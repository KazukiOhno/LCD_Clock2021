

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat Jul 10 20:40:03 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK4,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK5,global,class=CODE,delta=1,noexec
    10                           	psect	idataBANK6,global,class=CODE,delta=1,noexec
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    12                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    13                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    14                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    20                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    21                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    22                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    23                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    24                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    25                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    26                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    27                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1,lowdata,noexec
    28                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    29                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    30                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    31                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    32                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    33                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    34                           	psect	text0,global,reloc=2,class=CODE,delta=1
    35                           	psect	text1,global,reloc=2,class=CODE,delta=1
    36                           	psect	text2,global,reloc=2,class=CODE,delta=1
    37                           	psect	text3,global,reloc=2,class=CODE,delta=1
    38                           	psect	text4,global,reloc=2,class=CODE,delta=1
    39                           	psect	text5,global,reloc=2,class=CODE,delta=1
    40                           	psect	text6,global,reloc=2,class=CODE,delta=1
    41                           	psect	text7,global,reloc=2,class=CODE,delta=1
    42                           	psect	text8,global,reloc=2,class=CODE,delta=1
    43                           	psect	text9,global,reloc=2,class=CODE,delta=1
    44                           	psect	text10,global,reloc=2,class=CODE,delta=1
    45                           	psect	text11,global,reloc=2,class=CODE,delta=1
    46                           	psect	text12,global,reloc=2,class=CODE,delta=1
    47                           	psect	text13,global,reloc=2,class=CODE,delta=1
    48                           	psect	text14,global,reloc=2,class=CODE,delta=1
    49                           	psect	text15,global,reloc=2,class=CODE,delta=1
    50                           	psect	text16,global,reloc=2,class=CODE,delta=1
    51                           	psect	text17,global,reloc=2,class=CODE,delta=1
    52                           	psect	text18,global,reloc=2,class=CODE,delta=1
    53                           	psect	text19,global,reloc=2,class=CODE,delta=1
    54                           	psect	text20,global,reloc=2,class=CODE,delta=1
    55                           	psect	text21,global,reloc=2,class=CODE,delta=1
    56                           	psect	text22,global,reloc=2,class=CODE,delta=1
    57                           	psect	text23,global,reloc=2,class=CODE,delta=1
    58                           	psect	text24,global,reloc=2,class=CODE,delta=1
    59                           	psect	text25,global,reloc=2,class=CODE,delta=1
    60                           	psect	text26,global,reloc=2,class=CODE,delta=1
    61                           	psect	text27,global,reloc=2,class=CODE,delta=1
    62                           	psect	text28,global,reloc=2,class=CODE,delta=1
    63                           	psect	text29,global,reloc=2,class=CODE,delta=1
    64                           	psect	text30,global,reloc=2,class=CODE,delta=1
    65                           	psect	text31,global,reloc=2,class=CODE,delta=1
    66                           	psect	text32,global,reloc=2,class=CODE,delta=1
    67                           	psect	text33,global,reloc=2,class=CODE,delta=1
    68                           	psect	text34,global,reloc=2,class=CODE,delta=1
    69                           	psect	text35,global,reloc=2,class=CODE,delta=1
    70                           	psect	text36,global,reloc=2,class=CODE,delta=1
    71                           	psect	text37,global,reloc=2,class=CODE,delta=1
    72                           	psect	text38,global,reloc=2,class=CODE,delta=1
    73                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text40,global,reloc=2,class=CODE,delta=1
    75                           	psect	text41,global,reloc=2,class=CODE,delta=1
    76                           	psect	text42,global,reloc=2,class=CODE,delta=1
    77                           	psect	text43,global,reloc=2,class=CODE,delta=1
    78                           	psect	text44,global,reloc=2,class=CODE,delta=1
    79                           	psect	text45,global,reloc=2,class=CODE,delta=1
    80                           	psect	text46,global,reloc=2,class=CODE,delta=1
    81                           	psect	text47,global,reloc=2,class=CODE,delta=1
    82                           	psect	text48,global,reloc=2,class=CODE,delta=1
    83                           	psect	text49,global,reloc=2,class=CODE,delta=1
    84                           	psect	text50,global,reloc=2,class=CODE,delta=1
    85                           	psect	text51,global,reloc=2,class=CODE,delta=1
    86                           	psect	text52,global,reloc=2,class=CODE,delta=1
    87                           	psect	text53,global,reloc=2,class=CODE,delta=1
    88                           	psect	text54,global,reloc=2,class=CODE,delta=1
    89                           	psect	text55,global,reloc=2,class=CODE,delta=1
    90                           	psect	text56,global,reloc=2,class=CODE,delta=1
    91                           	psect	text57,global,reloc=2,class=CODE,delta=1
    92                           	psect	text58,global,reloc=2,class=CODE,delta=1
    93                           	psect	text59,global,reloc=2,class=CODE,delta=1
    94                           	psect	text60,global,reloc=2,class=CODE,delta=1
    95                           	psect	text61,global,reloc=2,class=CODE,delta=1
    96                           	psect	text62,global,reloc=2,class=CODE,delta=1
    97                           	psect	text63,global,reloc=2,class=CODE,delta=1
    98                           	psect	text64,global,reloc=2,class=CODE,delta=1
    99                           	psect	text65,global,reloc=2,class=CODE,delta=1
   100                           	psect	text66,global,reloc=2,class=CODE,delta=1
   101                           	psect	text67,global,reloc=2,class=CODE,delta=1
   102                           	psect	text68,global,reloc=2,class=CODE,delta=1
   103                           	psect	text69,global,reloc=2,class=CODE,delta=1
   104                           	psect	text70,global,reloc=2,class=CODE,delta=1
   105                           	psect	text71,global,reloc=2,class=CODE,delta=1
   106                           	psect	text72,global,reloc=2,class=CODE,delta=1
   107                           	psect	text73,global,reloc=2,class=CODE,delta=1
   108                           	psect	text74,global,reloc=2,class=CODE,delta=1
   109                           	psect	text75,global,reloc=2,class=CODE,delta=1
   110                           	psect	text76,global,reloc=2,class=CODE,delta=1
   111                           	psect	text77,global,reloc=2,class=CODE,delta=1
   112                           	psect	text78,global,reloc=2,class=CODE,delta=1
   113                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=2
   114                           	psect	text80,global,reloc=2,class=CODE,delta=1
   115                           	psect	text81,global,reloc=2,class=CODE,delta=1
   116                           	psect	text82,global,reloc=2,class=CODE,delta=1
   117                           	psect	text83,global,reloc=2,class=CODE,delta=1
   118                           	psect	text84,global,reloc=2,class=CODE,delta=1
   119                           	psect	text85,global,reloc=2,class=CODE,delta=1
   120                           	psect	text86,global,reloc=2,class=CODE,delta=1
   121                           	psect	text87,global,reloc=2,class=CODE,delta=1
   122                           	psect	text88,global,reloc=2,class=CODE,delta=1
   123                           	psect	text89,global,reloc=2,class=CODE,delta=1
   124                           	psect	text90,global,reloc=2,class=CODE,delta=1
   125                           	psect	text91,global,reloc=2,class=CODE,delta=1
   126                           	psect	text92,global,reloc=2,class=CODE,delta=1
   127                           	psect	text93,global,reloc=2,class=CODE,delta=1
   128                           	psect	text94,global,reloc=2,class=CODE,delta=1
   129                           	psect	text95,global,reloc=2,class=CODE,delta=1
   130                           	psect	text96,global,reloc=2,class=CODE,delta=1
   131                           	psect	text97,global,reloc=2,class=CODE,delta=1
   132                           	psect	text98,global,reloc=2,class=CODE,delta=1
   133                           	psect	text99,global,reloc=2,class=CODE,delta=1
   134                           	psect	text100,global,reloc=2,class=CODE,delta=1
   135                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=3
   136                           	psect	text102,global,reloc=2,class=CODE,delta=1
   137                           	psect	text103,global,reloc=2,class=CODE,delta=1
   138                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=3
   139                           	psect	text105,global,reloc=2,class=CODE,delta=1
   140                           	psect	text106,global,reloc=2,class=CODE,delta=1
   141                           	psect	text107,global,reloc=2,class=CODE,delta=1
   142                           	psect	text108,global,reloc=2,class=CODE,delta=1
   143                           	psect	text109,global,reloc=2,class=CODE,delta=1
   144                           	psect	text110,global,reloc=2,class=CODE,delta=1
   145                           	psect	text111,global,reloc=2,class=CODE,delta=1
   146                           	psect	text112,global,reloc=2,class=CODE,delta=1
   147                           	psect	text113,global,reloc=2,class=CODE,delta=1
   148                           	psect	text114,global,reloc=2,class=CODE,delta=1
   149                           	psect	text115,global,reloc=2,class=CODE,delta=1
   150                           	psect	text116,global,reloc=2,class=CODE,delta=1
   151                           	psect	text117,global,reloc=2,class=CODE,delta=1
   152                           	psect	text118,global,reloc=2,class=CODE,delta=1
   153                           	psect	text119,global,reloc=2,class=CODE,delta=1
   154                           	psect	text120,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text121,global,reloc=2,class=CODE,delta=1,group=3
   156                           	psect	text122,global,reloc=2,class=CODE,delta=1
   157                           	psect	text123,global,reloc=2,class=CODE,delta=1
   158                           	psect	text124,global,reloc=2,class=CODE,delta=1
   159                           	psect	text125,global,reloc=2,class=CODE,delta=1
   160                           	psect	text126,global,reloc=2,class=CODE,delta=1
   161                           	psect	text127,global,reloc=2,class=CODE,delta=1
   162                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=2
   163                           	psect	text129,global,reloc=2,class=CODE,delta=1
   164                           	psect	text130,global,reloc=2,class=CODE,delta=1
   165                           	psect	text131,global,reloc=2,class=CODE,delta=1
   166                           	psect	text132,global,reloc=2,class=CODE,delta=1
   167                           	psect	text133,global,reloc=2,class=CODE,delta=1
   168                           	psect	text134,global,reloc=2,class=CODE,delta=1
   169                           	psect	text135,global,reloc=2,class=CODE,delta=1
   170                           	psect	text136,global,reloc=2,class=CODE,delta=1
   171                           	psect	text137,global,reloc=2,class=CODE,delta=1
   172                           	psect	text138,global,reloc=2,class=CODE,delta=1
   173                           	psect	text139,global,reloc=2,class=CODE,delta=1
   174                           	psect	text140,global,reloc=2,class=CODE,delta=1
   175                           	psect	text141,global,reloc=2,class=CODE,delta=1
   176                           	psect	text142,global,reloc=2,class=CODE,delta=1
   177                           	psect	text143,global,reloc=2,class=CODE,delta=1
   178                           	psect	text144,global,reloc=2,class=CODE,delta=1
   179                           	psect	text145,global,reloc=2,class=CODE,delta=1
   180                           	psect	text146,global,reloc=2,class=CODE,delta=1
   181                           	psect	text147,global,reloc=2,class=CODE,delta=1
   182                           	psect	text148,global,reloc=2,class=CODE,delta=1
   183                           	psect	text149,global,reloc=2,class=CODE,delta=1
   184                           	psect	text150,global,reloc=2,class=CODE,delta=1
   185                           	psect	text151,global,reloc=2,class=CODE,delta=1
   186                           	psect	text152,global,reloc=2,class=CODE,delta=1
   187                           	psect	text153,global,reloc=2,class=CODE,delta=1
   188                           	psect	text154,global,reloc=2,class=CODE,delta=1
   189                           	psect	text155,global,reloc=2,class=CODE,delta=1
   190                           	psect	text156,global,reloc=2,class=CODE,delta=1
   191                           	psect	text157,global,reloc=2,class=CODE,delta=1
   192                           	psect	text158,global,reloc=2,class=CODE,delta=1
   193                           	psect	text159,global,reloc=2,class=CODE,delta=1
   194                           	psect	text160,global,reloc=2,class=CODE,delta=1
   195                           	psect	text161,global,reloc=2,class=CODE,delta=1
   196                           	psect	text162,global,reloc=2,class=CODE,delta=1
   197                           	psect	text163,global,reloc=2,class=CODE,delta=1
   198                           	psect	text164,global,reloc=2,class=CODE,delta=1
   199                           	psect	text165,global,reloc=2,class=CODE,delta=1
   200                           	psect	text166,global,reloc=2,class=CODE,delta=1
   201                           	psect	text167,global,reloc=2,class=CODE,delta=1
   202                           	psect	text168,global,reloc=2,class=CODE,delta=1
   203                           	psect	text169,global,reloc=2,class=CODE,delta=1
   204                           	psect	text170,global,reloc=2,class=CODE,delta=1
   205                           	psect	text171,global,reloc=2,class=CODE,delta=1
   206                           	psect	text172,global,reloc=2,class=CODE,delta=1
   207                           	psect	text173,global,reloc=2,class=CODE,delta=1
   208                           	psect	text174,global,reloc=2,class=CODE,delta=1
   209                           	psect	text175,global,reloc=2,class=CODE,delta=1
   210                           	psect	text176,global,reloc=2,class=CODE,delta=1
   211                           	psect	text177,global,reloc=2,class=CODE,delta=1
   212                           	psect	text178,global,reloc=2,class=CODE,delta=1,group=3
   213                           	psect	text179,global,reloc=2,class=CODE,delta=1
   214                           	psect	text180,global,reloc=2,class=CODE,delta=1
   215                           	psect	text181,global,reloc=2,class=CODE,delta=1,group=3
   216                           	psect	text182,global,reloc=2,class=CODE,delta=1,group=3
   217                           	psect	text183,global,reloc=2,class=CODE,delta=1,group=3
   218                           	psect	text184,global,reloc=2,class=CODE,delta=1,group=2
   219                           	psect	text185,global,reloc=2,class=CODE,delta=1,group=3
   220                           	psect	text186,global,reloc=2,class=CODE,delta=1,group=2
   221                           	psect	text187,global,reloc=2,class=CODE,delta=1,group=2
   222                           	psect	text188,global,reloc=2,class=CODE,delta=1,group=3
   223                           	psect	text189,global,reloc=2,class=CODE,delta=1,group=3
   224                           	psect	text190,global,reloc=2,class=CODE,delta=1,group=3
   225                           	psect	text191,global,reloc=2,class=CODE,delta=1,group=3
   226                           	psect	text192,global,reloc=2,class=CODE,delta=1,group=2
   227                           	psect	text193,global,reloc=2,class=CODE,delta=1,group=2
   228                           	psect	text194,global,reloc=2,class=CODE,delta=1,group=2
   229                           	psect	text195,global,reloc=2,class=CODE,delta=1,group=2
   230                           	psect	text196,global,reloc=2,class=CODE,delta=1
   231                           	psect	text197,global,reloc=2,class=CODE,delta=1,group=2
   232                           	psect	text198,global,reloc=2,class=CODE,delta=1,group=2
   233                           	psect	text199,global,reloc=2,class=CODE,delta=1
   234                           	psect	text200,global,reloc=2,class=CODE,delta=1
   235                           	psect	text201,global,reloc=2,class=CODE,delta=1
   236                           	psect	text202,global,reloc=2,class=CODE,delta=1
   237                           	psect	text203,global,reloc=2,class=CODE,delta=1
   238                           	psect	text204,global,reloc=2,class=CODE,delta=1
   239                           	psect	text205,global,reloc=2,class=CODE,delta=1,inline
   240                           	psect	text206,global,reloc=2,class=CODE,delta=1
   241                           	psect	text207,global,reloc=2,class=CODE,delta=1
   242                           	psect	text208,global,reloc=2,class=CODE,delta=1
   243                           	psect	text209,global,reloc=2,class=CODE,delta=1,inline
   244                           	psect	text210,global,reloc=2,class=CODE,delta=1,inline
   245                           	psect	text211,global,reloc=2,class=CODE,delta=1
   246                           	psect	text212,global,reloc=2,class=CODE,delta=1
   247                           	psect	text213,global,reloc=2,class=CODE,delta=1
   248                           	psect	text214,global,reloc=2,class=CODE,delta=1
   249                           	psect	text215,global,reloc=2,class=CODE,delta=1
   250                           	psect	text216,global,reloc=2,class=CODE,delta=1
   251                           	psect	text217,global,reloc=2,class=CODE,delta=1
   252                           	psect	text218,global,reloc=2,class=CODE,delta=1
   253                           	psect	text219,global,reloc=2,class=CODE,delta=1
   254                           	psect	text220,global,reloc=2,class=CODE,delta=1
   255                           	psect	text221,global,reloc=2,class=CODE,delta=1
   256                           	psect	text222,global,reloc=2,class=CODE,delta=1
   257                           	psect	text223,global,reloc=2,class=CODE,delta=1
   258                           	psect	text224,global,reloc=2,class=CODE,delta=1
   259                           	psect	text225,global,reloc=2,class=CODE,delta=1
   260                           	psect	text226,global,reloc=2,class=CODE,delta=1
   261                           	psect	text227,global,reloc=2,class=CODE,delta=1,inline
   262                           	psect	text228,global,reloc=2,class=CODE,delta=1,inline
   263                           	psect	text229,global,reloc=2,class=CODE,delta=1,inline
   264                           	psect	text230,global,reloc=2,class=CODE,delta=1,inline
   265                           	psect	text231,global,reloc=2,class=CODE,delta=1,inline
   266                           	psect	text232,global,reloc=2,class=CODE,delta=1,inline
   267                           	psect	text233,global,reloc=2,class=CODE,delta=1,inline
   268                           	psect	text234,global,reloc=2,class=CODE,delta=1
   269                           	psect	text235,global,reloc=2,class=CODE,delta=1
   270                           	psect	text236,global,reloc=2,class=CODE,delta=1
   271                           	psect	text237,global,reloc=2,class=CODE,delta=1
   272                           	psect	text238,global,reloc=2,class=CODE,delta=1
   273                           	psect	text239,global,reloc=2,class=CODE,delta=1
   274                           	psect	text240,global,reloc=2,class=CODE,delta=1
   275                           	psect	text241,global,reloc=2,class=CODE,delta=1
   276                           	psect	text242,global,reloc=2,class=CODE,delta=1
   277                           	psect	text243,global,reloc=2,class=CODE,delta=1
   278                           	psect	text244,global,reloc=2,class=CODE,delta=1,inline
   279                           	psect	text245,global,reloc=2,class=CODE,delta=1,inline
   280                           	psect	text246,global,reloc=2,class=CODE,delta=1,inline
   281                           	psect	text247,global,reloc=2,class=CODE,delta=1
   282                           	psect	text248,global,reloc=2,class=CODE,delta=1,inline
   283                           	psect	text249,global,reloc=2,class=CODE,delta=1,inline
   284                           	psect	text250,global,reloc=2,class=CODE,delta=1,inline
   285                           	psect	text251,global,reloc=2,class=CODE,delta=1
   286                           	psect	text252,global,reloc=2,class=CODE,delta=1,group=3
   287                           	psect	text253,global,reloc=2,class=CODE,delta=1
   288                           	psect	text254,global,reloc=2,class=CODE,delta=1
   289                           	psect	text255,global,reloc=2,class=CODE,delta=1
   290                           	psect	text256,global,reloc=2,class=CODE,delta=1
   291                           	psect	text257,global,reloc=2,class=CODE,delta=1
   292                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   293                           	psect	text259,global,reloc=2,class=CODE,delta=1
   294                           	psect	text260,global,reloc=2,class=CODE,delta=1
   295                           	psect	text261,global,reloc=2,class=CODE,delta=1
   296                           	psect	text262,global,reloc=2,class=CODE,delta=1
   297                           	psect	text263,global,reloc=2,class=CODE,delta=1
   298                           	psect	text264,global,reloc=2,class=CODE,delta=1
   299                           	psect	text265,global,reloc=2,class=CODE,delta=1
   300                           	psect	text266,global,reloc=2,class=CODE,delta=1
   301                           	psect	text267,global,reloc=2,class=CODE,delta=1
   302                           	psect	text268,global,reloc=2,class=CODE,delta=1
   303                           	psect	text269,global,reloc=2,class=CODE,delta=1
   304                           	psect	text270,global,reloc=2,class=CODE,delta=1
   305                           	psect	text271,global,reloc=2,class=CODE,delta=1
   306                           	psect	text272,global,reloc=2,class=CODE,delta=1
   307                           	psect	text273,global,reloc=2,class=CODE,delta=1
   308                           	psect	text274,global,reloc=2,class=CODE,delta=1
   309                           	psect	text275,global,reloc=2,class=CODE,delta=1
   310                           	psect	text276,global,reloc=2,class=CODE,delta=1
   311                           	psect	text277,global,reloc=2,class=CODE,delta=1
   312                           	psect	text278,global,reloc=2,class=CODE,delta=1
   313                           	psect	text279,global,reloc=2,class=CODE,delta=1
   314                           	psect	text280,global,reloc=2,class=CODE,delta=1
   315                           	psect	text281,global,reloc=2,class=CODE,delta=1
   316                           	psect	text282,global,reloc=2,class=CODE,delta=1
   317                           	psect	text283,global,reloc=2,class=CODE,delta=1
   318                           	psect	text284,global,reloc=2,class=CODE,delta=1
   319                           	psect	text285,global,reloc=2,class=CODE,delta=1
   320                           	psect	text286,global,reloc=2,class=CODE,delta=1
   321                           	psect	text287,global,reloc=2,class=CODE,delta=1
   322                           	psect	text288,global,reloc=2,class=CODE,delta=1
   323                           	psect	text289,global,reloc=2,class=CODE,delta=1
   324                           	psect	text290,global,reloc=2,class=CODE,delta=1
   325                           	psect	text291,global,reloc=2,class=CODE,delta=1
   326                           	psect	text292,global,reloc=2,class=CODE,delta=1
   327                           	psect	text293,global,reloc=2,class=CODE,delta=1
   328                           	psect	text294,global,reloc=2,class=CODE,delta=1
   329                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   330                           	psect	text295,global,reloc=2,class=CODE,delta=1
   331                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   332                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   333                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   334                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   335  0000                     
   336                           ; Version 2.20
   337                           ; Generated 05/05/2020 GMT
   338                           ; 
   339                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   340                           ; All rights reserved.
   341                           ; 
   342                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   343                           ; 
   344                           ; Redistribution and use in source and binary forms, with or without modification, are
   345                           ; permitted provided that the following conditions are met:
   346                           ; 
   347                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   348                           ;        conditions and the following disclaimer.
   349                           ; 
   350                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   351                           ;        of conditions and the following disclaimer in the documentation and/or other
   352                           ;        materials provided with the distribution.
   353                           ; 
   354                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   355                           ;        software without specific prior written permission.
   356                           ; 
   357                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   358                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   359                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   360                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   361                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   362                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   363                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   364                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   365                           ; 
   366                           ; 
   367                           ; Code-generator required, PIC18F26K22 Definitions
   368                           ; 
   369                           ; SFR Addresses
   370  0000                     
   371 ;; Function _SPI1_WriteBlock is unused but had its address taken
   372  0000                     
   373 ;; Function _SPI1_WriteByte is unused but had its address taken
   374  0000                     
   375 ;; Function _SPI1_ReadByte is unused but had its address taken
   376  0000                     
   377                           	psect	idataCOMRAM
   378  00F852                     __pidataCOMRAM:
   379                           	callstack 0
   380                           
   381                           ;initializer for _RTC_regF
   382  00F852  5F                 	db	95
   383                           
   384                           ;initializer for _Textsize
   385  00F853  01                 	db	1
   386                           
   387                           ;initializer for _SlideSWStatus
   388  00F854  0F                 	db	15
   389                           
   390                           	psect	idataBANK2
   391  00F5DA                     __pidataBANK2:
   392                           	callstack 0
   393                           
   394                           ;initializer for _BackLight
   395  00F5DA  0064               	dw	100
   396                           
   397                           ;initializer for RotaryHandler@RotA_status
   398  00F5DC  FF                 	db	255
   399                           
   400                           ;initializer for Timer5Handler@slideSW_status
   401  00F5DD  FF                 	db	255
   402                           
   403                           ;initializer for Timer5Handler@touch_status
   404  00F5DE  FF                 	db	255
   405                           
   406                           ;initializer for _Accel
   407  00F5DF  01                 	db	1
   408                           
   409                           ;initializer for _DateTime
   410  00F5E0  00                 	db	0
   411  00F5E1  00                 	db	0
   412  00F5E2  00                 	db	0
   413  00F5E3  00                 	db	0
   414  00F5E4  01                 	db	1
   415  00F5E5  01                 	db	1
   416  00F5E6  21                 	db	33
   417                           
   418                           ;initializer for _AlarmTime
   419  00F5E7  00                 	db	0
   420  00F5E8  00                 	db	0
   421  00F5E9  7F                 	db	127
   422                           
   423                           	psect	idataBANK3
   424  00EE3C                     __pidataBANK3:
   425                           	callstack 0
   426                           
   427                           ;initializer for FatFsDemo_Tasks@F257
   428  00EE3C  48                 	db	72
   429  00EE3D  65                 	db	101
   430  00EE3E  6C                 	db	108
   431  00EE3F  6C                 	db	108
   432  00EE40  6F                 	db	111
   433  00EE41  20                 	db	32
   434  00EE42  57                 	db	87
   435  00EE43  6F                 	db	111
   436  00EE44  72                 	db	114
   437  00EE45  6C                 	db	108
   438  00EE46  64                 	db	100
   439  00EE47  21                 	db	33
   440  00EE48  00                 	db	0
   441                           
   442                           ;initializer for _mediaInformation
   443  00EE49  00                 	db	0
   444  00EE4A  0200               	dw	512
   445  00EE4C  00                 	db	0
   446  00EE4D  0000               	dw	0
   447  00EE4F  0000               	dw	0
   448  00EE51  00                 	db	0
   449                           
   450                           ;initializer for _Font
   451  00EE52  08                 	db	8
   452  00EE53  08                 	db	8
   453  00EE54  08                 	db	8
   454  00EE55  08                 	db	8
   455  00EE56  D5                 	db	low _font
   456  00EE57  FA                 	db	high _font
   457  00EE58  00                 	db	0
   458                           
   459                           ;initializer for drawAlarmTime@F6643
   460  00EE59  41                 	db	65
   461  00EE5A  4D                 	db	77
   462  00EE5B  00                 	db	0
   463  00EE5C  50                 	db	80
   464  00EE5D  4D                 	db	77
   465  00EE5E  00                 	db	0
   466                           
   467                           ;initializer for get_tempHumidity@F6337
   468  00EE5F  03                 	db	3
   469  00EE60  00                 	db	0
   470  00EE61  04                 	db	4
   471                           
   472                           ;initializer for _Textbgcolor
   473  00EE62  FFFF               	dw	65535
   474                           
   475                           ;initializer for _Textcolor
   476  00EE64  FFFF               	dw	65535
   477                           
   478                           ;initializer for _FrontColor
   479  00EE66  FFFF               	dw	65535
   480                           
   481                           ;initializer for _wrap
   482  00EE68  01                 	db	1
   483                           
   484                           ;initializer for Timer5Handler@G1PPS_status
   485  00EE69  FF                 	db	255
   486                           
   487                           ;initializer for _FirstDraw
   488  00EE6A  01                 	db	1
   489                           
   490                           ;initializer for _SmoothAlarmTime
   491  00EE6B  00                 	db	0
   492  00EE6C  00                 	db	0
   493  00EE6D  7F                 	db	127
   494                           
   495                           ;initializer for _CT2_0
   496  00EE6E  04                 	db	4
   497                           
   498                           	psect	idataBANK4
   499  00C458                     __pidataBANK4:
   500                           	callstack 0
   501                           
   502                           ;initializer for _ButtonObj3
   503  00C458  001E               	dw	30
   504  00C45A  000A               	dw	10
   505  00C45C  0050               	dw	80
   506  00C45E  0012               	dw	18
   507  00C460  00                 	db	0
   508  00C461  00                 	db	0
   509  00C462  006E               	dw	110
   510  00C464  000A               	dw	10
   511  00C466  0030               	dw	48
   512  00C468  0012               	dw	18
   513  00C46A  00                 	db	0
   514  00C46B  00                 	db	0
   515  00C46C  009E               	dw	158
   516  00C46E  000A               	dw	10
   517  00C470  0050               	dw	80
   518  00C472  0012               	dw	18
   519  00C474  00                 	db	0
   520  00C475  00                 	db	0
   521  00C476  0014               	dw	20
   522  00C478  0023               	dw	35
   523  00C47A  00B0               	dw	176
   524  00C47C  003A               	dw	58
   525  00C47E  00                 	db	0
   526  00C47F  00                 	db	0
   527  00C480  00FA               	dw	250
   528  00C482  000A               	dw	10
   529  00C484  0041               	dw	65
   530  00C486  0032               	dw	50
   531  00C488  00                 	db	0
   532  00C489  00                 	db	0
   533  00C48A  00FA               	dw	250
   534  00C48C  0046               	dw	70
   535  00C48E  0041               	dw	65
   536  00C490  0032               	dw	50
   537  00C492  00                 	db	0
   538  00C493  00                 	db	0
   539  00C494  000A               	dw	10
   540  00C496  00A0               	dw	160
   541  00C498  012C               	dw	300
   542  00C49A  0050               	dw	80
   543  00C49C  00                 	db	0
   544  00C49D  00                 	db	0
   545                           
   546                           ;initializer for _RThisMonthCalendar
   547  00C49E  006E               	dw	110
   548  00C4A0  00A0               	dw	160
   549  00C4A2  0064               	dw	100
   550  00C4A4  0050               	dw	80
   551  00C4A6  02                 	db	2
   552  00C4A7  00                 	db	0
   553  00C4A8  0014               	dw	20
   554  00C4AA  0041               	dw	65
   555  00C4AC  0140               	dw	320
   556  00C4AE  00C8               	dw	200
   557  00C4B0  02                 	db	2
   558  00C4B1  00                 	db	0
   559  00C4B2  00DC               	dw	220
   560  00C4B4  0078               	dw	120
   561  00C4B6  0064               	dw	100
   562  00C4B8  0050               	dw	80
   563  00C4BA  02                 	db	2
   564  00C4BB  00                 	db	0
   565                           
   566                           ;initializer for _RAlarm
   567  00C4BC  0032               	dw	50
   568  00C4BE  0078               	dw	120
   569  00C4C0  0064               	dw	100
   570  00C4C2  0012               	dw	18
   571  00C4C4  02                 	db	2
   572  00C4C5  00                 	db	0
   573  00C4C6  0096               	dw	150
   574  00C4C8  0023               	dw	35
   575  00C4CA  0064               	dw	100
   576  00C4CC  0012               	dw	18
   577  00C4CE  02                 	db	2
   578  00C4CF  00                 	db	0
   579  00C4D0  000F               	dw	15
   580  00C4D2  0017               	dw	23
   581  00C4D4  0064               	dw	100
   582  00C4D6  0012               	dw	18
   583  00C4D8  13                 	db	19
   584  00C4D9  00                 	db	0
   585                           
   586                           ;initializer for _RDate
   587  00C4DA  001E               	dw	30
   588  00C4DC  000A               	dw	10
   589  00C4DE  00D0               	dw	208
   590  00C4E0  0012               	dw	18
   591  00C4E2  02                 	db	2
   592  00C4E3  00                 	db	0
   593  00C4E4  0000               	dw	0
   594  00C4E6  0000               	dw	0
   595  00C4E8  00D0               	dw	208
   596  00C4EA  0012               	dw	18
   597  00C4EC  02                 	db	2
   598  00C4ED  00                 	db	0
   599  00C4EE  0000               	dw	0
   600  00C4F0  0000               	dw	0
   601  00C4F2  00D0               	dw	208
   602  00C4F4  0012               	dw	18
   603  00C4F6  02                 	db	2
   604  00C4F7  00                 	db	0
   605                           
   606                           ;initializer for _RTime
   607  00C4F8  0014               	dw	20
   608  00C4FA  0023               	dw	35
   609  00C4FC  00B0               	dw	176
   610  00C4FE  003A               	dw	58
   611  00C500  02                 	db	2
   612  00C501  02                 	db	2
   613  00C502  0000               	dw	0
   614  00C504  000F               	dw	15
   615  00C506  00B0               	dw	176
   616  00C508  003A               	dw	58
   617  00C50A  01                 	db	1
   618  00C50B  00                 	db	0
   619  00C50C  0064               	dw	100
   620  00C50E  008C               	dw	140
   621  00C510  005A               	dw	90
   622  00C512  005A               	dw	90
   623  00C514  02                 	db	2
   624  00C515  00                 	db	0
   625                           
   626                           ;initializer for _SoundData
   627  00C516  04                 	db	4
   628  00C517  0A                 	db	10
   629  00C518  14                 	db	20
   630  00C519  0A                 	db	10
   631  00C51A  3C                 	db	60
   632  00C51B  00                 	db	0
   633  00C51C  00                 	db	0
   634  00C51D  06                 	db	6
   635  00C51E  0A                 	db	10
   636  00C51F  0A                 	db	10
   637  00C520  0A                 	db	10
   638  00C521  0A                 	db	10
   639  00C522  0A                 	db	10
   640  00C523  32                 	db	50
   641  00C524  04                 	db	4
   642  00C525  0A                 	db	10
   643  00C526  0A                 	db	10
   644  00C527  0A                 	db	10
   645  00C528  0A                 	db	10
   646  00C529  00                 	db	0
   647  00C52A  00                 	db	0
   648                           
   649                           	psect	idataBANK5
   650  00C52B                     __pidataBANK5:
   651                           	callstack 0
   652                           
   653                           ;initializer for _RPostMonthCalendar
   654  00C52B  00D2               	dw	210
   655  00C52D  00A0               	dw	160
   656  00C52F  0064               	dw	100
   657  00C531  0050               	dw	80
   658  00C533  02                 	db	2
   659  00C534  00                 	db	0
   660  00C535  0014               	dw	20
   661  00C537  0041               	dw	65
   662  00C539  0140               	dw	320
   663  00C53B  00C8               	dw	200
   664  00C53D  02                 	db	2
   665  00C53E  00                 	db	0
   666  00C53F  00DC               	dw	220
   667  00C541  00C8               	dw	200
   668  00C543  0064               	dw	100
   669  00C545  0050               	dw	80
   670  00C547  02                 	db	2
   671  00C548  00                 	db	0
   672                           
   673                           ;initializer for _RPrevMonthCalendar
   674  00C549  000A               	dw	10
   675  00C54B  00A0               	dw	160
   676  00C54D  0064               	dw	100
   677  00C54F  0050               	dw	80
   678  00C551  02                 	db	2
   679  00C552  00                 	db	0
   680  00C553  0014               	dw	20
   681  00C555  0041               	dw	65
   682  00C557  0140               	dw	320
   683  00C559  00C8               	dw	200
   684  00C55B  02                 	db	2
   685  00C55C  00                 	db	0
   686  00C55D  00DC               	dw	220
   687  00C55F  0028               	dw	40
   688  00C561  0064               	dw	100
   689  00C563  0050               	dw	80
   690  00C565  02                 	db	2
   691  00C566  00                 	db	0
   692                           
   693                           ;initializer for _RHumidity
   694  00C567  00F0               	dw	240
   695  00C569  0078               	dw	120
   696  00C56B  0032               	dw	50
   697  00C56D  000F               	dw	15
   698  00C56F  02                 	db	2
   699  00C570  00                 	db	0
   700  00C571  00F0               	dw	240
   701  00C573  0011               	dw	17
   702  00C575  0032               	dw	50
   703  00C577  000F               	dw	15
   704  00C579  02                 	db	2
   705  00C57A  00                 	db	0
   706  00C57B  00F0               	dw	240
   707  00C57D  0011               	dw	17
   708  00C57F  0032               	dw	50
   709  00C581  000F               	dw	15
   710  00C583  02                 	db	2
   711  00C584  00                 	db	0
   712                           
   713                           ;initializer for _RTemp
   714  00C585  00E6               	dw	230
   715  00C587  0064               	dw	100
   716  00C589  0032               	dw	50
   717  00C58B  000F               	dw	15
   718  00C58D  02                 	db	2
   719  00C58E  00                 	db	0
   720  00C58F  00E6               	dw	230
   721  00C591  0000               	dw	0
   722  00C593  0032               	dw	50
   723  00C595  000F               	dw	15
   724  00C597  02                 	db	2
   725  00C598  00                 	db	0
   726  00C599  00E6               	dw	230
   727  00C59B  0000               	dw	0
   728  00C59D  0032               	dw	50
   729  00C59F  000F               	dw	15
   730  00C5A1  02                 	db	2
   731  00C5A2  00                 	db	0
   732                           
   733                           ;initializer for _RDay
   734  00C5A3  009E               	dw	158
   735  00C5A5  000A               	dw	10
   736  00C5A7  0050               	dw	80
   737  00C5A9  0012               	dw	18
   738  00C5AB  02                 	db	2
   739  00C5AC  00                 	db	0
   740  00C5AD  0080               	dw	128
   741  00C5AF  0000               	dw	0
   742  00C5B1  0050               	dw	80
   743  00C5B3  0012               	dw	18
   744  00C5B5  02                 	db	2
   745  00C5B6  00                 	db	0
   746  00C5B7  0080               	dw	128
   747  00C5B9  0000               	dw	0
   748  00C5BB  0050               	dw	80
   749  00C5BD  0012               	dw	18
   750  00C5BF  02                 	db	2
   751  00C5C0  00                 	db	0
   752                           
   753                           ;initializer for _RMonth
   754  00C5C1  006E               	dw	110
   755  00C5C3  000A               	dw	10
   756  00C5C5  0030               	dw	48
   757  00C5C7  0012               	dw	18
   758  00C5C9  02                 	db	2
   759  00C5CA  00                 	db	0
   760  00C5CB  0050               	dw	80
   761  00C5CD  0000               	dw	0
   762  00C5CF  0030               	dw	48
   763  00C5D1  0012               	dw	18
   764  00C5D3  02                 	db	2
   765  00C5D4  00                 	db	0
   766  00C5D5  0050               	dw	80
   767  00C5D7  0000               	dw	0
   768  00C5D9  0030               	dw	48
   769  00C5DB  0012               	dw	18
   770  00C5DD  02                 	db	2
   771  00C5DE  00                 	db	0
   772                           
   773                           ;initializer for _RYear
   774  00C5DF  001E               	dw	30
   775  00C5E1  000A               	dw	10
   776  00C5E3  0050               	dw	80
   777  00C5E5  0012               	dw	18
   778  00C5E7  02                 	db	2
   779  00C5E8  00                 	db	0
   780  00C5E9  0000               	dw	0
   781  00C5EB  0000               	dw	0
   782  00C5ED  0050               	dw	80
   783  00C5EF  0012               	dw	18
   784  00C5F1  02                 	db	2
   785  00C5F2  00                 	db	0
   786  00C5F3  0000               	dw	0
   787  00C5F5  0000               	dw	0
   788  00C5F7  0050               	dw	80
   789  00C5F9  0012               	dw	18
   790  00C5FB  02                 	db	2
   791  00C5FC  00                 	db	0
   792                           
   793                           	psect	idataBANK6
   794  00F40E                     __pidataBANK6:
   795                           	callstack 0
   796                           
   797                           ;initializer for _WeekDays
   798  00F40E  53                 	db	83
   799  00F40F  75                 	db	117
   800  00F410  6E                 	db	110
   801  00F411  00                 	db	0
   802  00F412  4D                 	db	77
   803  00F413  6F                 	db	111
   804  00F414  6E                 	db	110
   805  00F415  00                 	db	0
   806  00F416  54                 	db	84
   807  00F417  75                 	db	117
   808  00F418  65                 	db	101
   809  00F419  00                 	db	0
   810  00F41A  57                 	db	87
   811  00F41B  65                 	db	101
   812  00F41C  64                 	db	100
   813  00F41D  00                 	db	0
   814  00F41E  54                 	db	84
   815  00F41F  68                 	db	104
   816  00F420  75                 	db	117
   817  00F421  00                 	db	0
   818  00F422  46                 	db	70
   819  00F423  72                 	db	114
   820  00F424  69                 	db	105
   821  00F425  00                 	db	0
   822  00F426  53                 	db	83
   823  00F427  61                 	db	97
   824  00F428  74                 	db	116
   825  00F429  00                 	db	0
   826                           
   827                           	psect	mediumconst
   828  00F866                     __pmediumconst:
   829                           	callstack 0
   830  00F866  00                 	db	0
   831  00F867                     _sin_table:
   832                           	callstack 0
   833  00F867  0000               	dw	0
   834  00F869  0004               	dw	4
   835  00F86B  0008               	dw	8
   836  00F86D  000D               	dw	13
   837  00F86F  0011               	dw	17
   838  00F871  0016               	dw	22
   839  00F873  001A               	dw	26
   840  00F875  001F               	dw	31
   841  00F877  0023               	dw	35
   842  00F879  0028               	dw	40
   843  00F87B  002C               	dw	44
   844  00F87D  0030               	dw	48
   845  00F87F  0035               	dw	53
   846  00F881  0039               	dw	57
   847  00F883  003D               	dw	61
   848  00F885  0042               	dw	66
   849  00F887  0046               	dw	70
   850  00F889  004A               	dw	74
   851  00F88B  004F               	dw	79
   852  00F88D  0053               	dw	83
   853  00F88F  0057               	dw	87
   854  00F891  005B               	dw	91
   855  00F893  005F               	dw	95
   856  00F895  0064               	dw	100
   857  00F897  0068               	dw	104
   858  00F899  006C               	dw	108
   859  00F89B  0070               	dw	112
   860  00F89D  0074               	dw	116
   861  00F89F  0078               	dw	120
   862  00F8A1  007C               	dw	124
   863  00F8A3  0080               	dw	128
   864  00F8A5  0083               	dw	131
   865  00F8A7  0087               	dw	135
   866  00F8A9  008B               	dw	139
   867  00F8AB  008F               	dw	143
   868  00F8AD  0092               	dw	146
   869  00F8AF  0096               	dw	150
   870  00F8B1  009A               	dw	154
   871  00F8B3  009D               	dw	157
   872  00F8B5  00A1               	dw	161
   873  00F8B7  00A4               	dw	164
   874  00F8B9  00A7               	dw	167
   875  00F8BB  00AB               	dw	171
   876  00F8BD  00AE               	dw	174
   877  00F8BF  00B1               	dw	177
   878  00F8C1  00B5               	dw	181
   879  00F8C3  00B8               	dw	184
   880  00F8C5  00BB               	dw	187
   881  00F8C7  00BE               	dw	190
   882  00F8C9  00C1               	dw	193
   883  00F8CB  00C4               	dw	196
   884  00F8CD  00C6               	dw	198
   885  00F8CF  00C9               	dw	201
   886  00F8D1  00CC               	dw	204
   887  00F8D3  00CF               	dw	207
   888  00F8D5  00D1               	dw	209
   889  00F8D7  00D4               	dw	212
   890  00F8D9  00D6               	dw	214
   891  00F8DB  00D9               	dw	217
   892  00F8DD  00DB               	dw	219
   893  00F8DF  00DD               	dw	221
   894  00F8E1  00DF               	dw	223
   895  00F8E3  00E2               	dw	226
   896  00F8E5  00E4               	dw	228
   897  00F8E7  00E6               	dw	230
   898  00F8E9  00E8               	dw	232
   899  00F8EB  00E9               	dw	233
   900  00F8ED  00EB               	dw	235
   901  00F8EF  00ED               	dw	237
   902  00F8F1  00EE               	dw	238
   903  00F8F3  00F0               	dw	240
   904  00F8F5  00F2               	dw	242
   905  00F8F7  00F3               	dw	243
   906  00F8F9  00F4               	dw	244
   907  00F8FB  00F6               	dw	246
   908  00F8FD  00F7               	dw	247
   909  00F8FF  00F8               	dw	248
   910  00F901  00F9               	dw	249
   911  00F903  00FA               	dw	250
   912  00F905  00FB               	dw	251
   913  00F907  00FC               	dw	252
   914  00F909  00FC               	dw	252
   915  00F90B  00FD               	dw	253
   916  00F90D  00FE               	dw	254
   917  00F90F  00FE               	dw	254
   918  00F911  00FF               	dw	255
   919  00F913  00FF               	dw	255
   920  00F915  00FF               	dw	255
   921  00F917  00FF               	dw	255
   922  00F919  00FF               	dw	255
   923  00F91B  0100               	dw	256
   924  00F91D  00FF               	dw	255
   925  00F91F  00FF               	dw	255
   926  00F921  00FF               	dw	255
   927  00F923  00FF               	dw	255
   928  00F925  00FF               	dw	255
   929  00F927  00FE               	dw	254
   930  00F929  00FE               	dw	254
   931  00F92B  00FD               	dw	253
   932  00F92D  00FC               	dw	252
   933  00F92F  00FC               	dw	252
   934  00F931  00FB               	dw	251
   935  00F933  00FA               	dw	250
   936  00F935  00F9               	dw	249
   937  00F937  00F8               	dw	248
   938  00F939  00F7               	dw	247
   939  00F93B  00F6               	dw	246
   940  00F93D  00F4               	dw	244
   941  00F93F  00F3               	dw	243
   942  00F941  00F2               	dw	242
   943  00F943  00F0               	dw	240
   944  00F945  00EE               	dw	238
   945  00F947  00ED               	dw	237
   946  00F949  00EB               	dw	235
   947  00F94B  00E9               	dw	233
   948  00F94D  00E8               	dw	232
   949  00F94F  00E6               	dw	230
   950  00F951  00E4               	dw	228
   951  00F953  00E2               	dw	226
   952  00F955  00DF               	dw	223
   953  00F957  00DD               	dw	221
   954  00F959  00DB               	dw	219
   955  00F95B  00D9               	dw	217
   956  00F95D  00D6               	dw	214
   957  00F95F  00D4               	dw	212
   958  00F961  00D1               	dw	209
   959  00F963  00CF               	dw	207
   960  00F965  00CC               	dw	204
   961  00F967  00C9               	dw	201
   962  00F969  00C6               	dw	198
   963  00F96B  00C4               	dw	196
   964  00F96D  00C1               	dw	193
   965  00F96F  00BE               	dw	190
   966  00F971  00BB               	dw	187
   967  00F973  00B8               	dw	184
   968  00F975  00B5               	dw	181
   969  00F977  00B1               	dw	177
   970  00F979  00AE               	dw	174
   971  00F97B  00AB               	dw	171
   972  00F97D  00A7               	dw	167
   973  00F97F  00A4               	dw	164
   974  00F981  00A1               	dw	161
   975  00F983  009D               	dw	157
   976  00F985  009A               	dw	154
   977  00F987  0096               	dw	150
   978  00F989  0092               	dw	146
   979  00F98B  008F               	dw	143
   980  00F98D  008B               	dw	139
   981  00F98F  0087               	dw	135
   982  00F991  0083               	dw	131
   983  00F993  0080               	dw	128
   984  00F995  007C               	dw	124
   985  00F997  0078               	dw	120
   986  00F999  0074               	dw	116
   987  00F99B  0070               	dw	112
   988  00F99D  006C               	dw	108
   989  00F99F  0068               	dw	104
   990  00F9A1  0064               	dw	100
   991  00F9A3  005F               	dw	95
   992  00F9A5  005B               	dw	91
   993  00F9A7  0057               	dw	87
   994  00F9A9  0053               	dw	83
   995  00F9AB  004F               	dw	79
   996  00F9AD  004A               	dw	74
   997  00F9AF  0046               	dw	70
   998  00F9B1  0042               	dw	66
   999  00F9B3  003D               	dw	61
  1000  00F9B5  0039               	dw	57
  1001  00F9B7  0035               	dw	53
  1002  00F9B9  0030               	dw	48
  1003  00F9BB  002C               	dw	44
  1004  00F9BD  0028               	dw	40
  1005  00F9BF  0023               	dw	35
  1006  00F9C1  001F               	dw	31
  1007  00F9C3  001A               	dw	26
  1008  00F9C5  0016               	dw	22
  1009  00F9C7  0011               	dw	17
  1010  00F9C9  000D               	dw	13
  1011  00F9CB  0008               	dw	8
  1012  00F9CD  0004               	dw	4
  1013  00F9CF                     __end_of_sin_table:
  1014                           	callstack 0
  1015  00F9CF                     _sdmmc_cmdtable:
  1016                           	callstack 0
  1017  00F9CF  00                 	db	0
  1018  00F9D0  95                 	db	149
  1019  00F9D1  00                 	db	0
  1020  00F9D2  00                 	db	0
  1021  00F9D3  01                 	db	1
  1022  00F9D4  F9                 	db	249
  1023  00F9D5  00                 	db	0
  1024  00F9D6  00                 	db	0
  1025  00F9D7  08                 	db	8
  1026  00F9D8  87                 	db	135
  1027  00F9D9  04                 	db	4
  1028  00F9DA  00                 	db	0
  1029  00F9DB  09                 	db	9
  1030  00F9DC  AF                 	db	175
  1031  00F9DD  00                 	db	0
  1032  00F9DE  01                 	db	1
  1033  00F9DF  0A                 	db	10
  1034  00F9E0  1B                 	db	27
  1035  00F9E1  00                 	db	0
  1036  00F9E2  01                 	db	1
  1037  00F9E3  0C                 	db	12
  1038  00F9E4  C3                 	db	195
  1039  00F9E5  01                 	db	1
  1040  00F9E6  00                 	db	0
  1041  00F9E7  0D                 	db	13
  1042  00F9E8  AF                 	db	175
  1043  00F9E9  02                 	db	2
  1044  00F9EA  00                 	db	0
  1045  00F9EB  10                 	db	16
  1046  00F9EC  FF                 	db	255
  1047  00F9ED  00                 	db	0
  1048  00F9EE  00                 	db	0
  1049  00F9EF  11                 	db	17
  1050  00F9F0  FF                 	db	255
  1051  00F9F1  00                 	db	0
  1052  00F9F2  01                 	db	1
  1053  00F9F3  12                 	db	18
  1054  00F9F4  FF                 	db	255
  1055  00F9F5  00                 	db	0
  1056  00F9F6  01                 	db	1
  1057  00F9F7  18                 	db	24
  1058  00F9F8  FF                 	db	255
  1059  00F9F9  00                 	db	0
  1060  00F9FA  01                 	db	1
  1061  00F9FB  19                 	db	25
  1062  00F9FC  FF                 	db	255
  1063  00F9FD  00                 	db	0
  1064  00F9FE  01                 	db	1
  1065  00F9FF  20                 	db	32
  1066  00FA00  FF                 	db	255
  1067  00FA01  00                 	db	0
  1068  00FA02  00                 	db	0
  1069  00FA03  21                 	db	33
  1070  00FA04  FF                 	db	255
  1071  00FA05  00                 	db	0
  1072  00FA06  00                 	db	0
  1073  00FA07  26                 	db	38
  1074  00FA08  DF                 	db	223
  1075  00FA09  01                 	db	1
  1076  00FA0A  00                 	db	0
  1077  00FA0B  37                 	db	55
  1078  00FA0C  73                 	db	115
  1079  00FA0D  00                 	db	0
  1080  00FA0E  00                 	db	0
  1081  00FA0F  3A                 	db	58
  1082  00FA10  25                 	db	37
  1083  00FA11  04                 	db	4
  1084  00FA12  00                 	db	0
  1085  00FA13  3B                 	db	59
  1086  00FA14  25                 	db	37
  1087  00FA15  00                 	db	0
  1088  00FA16  00                 	db	0
  1089  00FA17  29                 	db	41
  1090  00FA18  FF                 	db	255
  1091  00FA19  04                 	db	4
  1092  00FA1A  00                 	db	0
  1093  00FA1B  17                 	db	23
  1094  00FA1C  FF                 	db	255
  1095  00FA1D  00                 	db	0
  1096  00FA1E  00                 	db	0
  1097  00FA1F                     __end_of_sdmmc_cmdtable:
  1098                           	callstack 0
  1099  00FA1F                     _spiMaster:
  1100                           	callstack 0
  1101  00FA1F  FE                 	db	low _SPI1_Close
  1102  00FA20  F7                 	db	high _SPI1_Close
  1103  00FA21  68                 	db	low _SDFAST_open
  1104  00FA22  F7                 	db	high _SDFAST_open
  1105  00FA23  1A                 	db	low _SPI1_ExchangeByte
  1106  00FA24  F6                 	db	high _SPI1_ExchangeByte
  1107  00FA25  C6                 	db	low _SPI1_ExchangeBlock
  1108  00FA26  EB                 	db	high _SPI1_ExchangeBlock
  1109  00FA27  00                 	db	0
  1110  00FA28  00                 	db	0
  1111  00FA29  AE                 	db	low _SPI1_ReadBlock
  1112  00FA2A  F1                 	db	high _SPI1_ReadBlock
  1113  00FA2B  00                 	db	0
  1114  00FA2C  00                 	db	0
  1115  00FA2D  00                 	db	0
  1116  00FA2E  00                 	db	0
  1117  00FA2F  00                 	db	0
  1118  00FA30  00                 	db	0
  1119  00FA31  00                 	db	0
  1120  00FA32  00                 	db	0
  1121  00FA33  FE                 	db	low _SPI1_Close
  1122  00FA34  F7                 	db	high _SPI1_Close
  1123  00FA35  60                 	db	low _LCD8M_open
  1124  00FA36  F7                 	db	high _LCD8M_open
  1125  00FA37  1A                 	db	low _SPI1_ExchangeByte
  1126  00FA38  F6                 	db	high _SPI1_ExchangeByte
  1127  00FA39  C6                 	db	low _SPI1_ExchangeBlock
  1128  00FA3A  EB                 	db	high _SPI1_ExchangeBlock
  1129  00FA3B  00                 	db	0
  1130  00FA3C  00                 	db	0
  1131  00FA3D  AE                 	db	low _SPI1_ReadBlock
  1132  00FA3E  F1                 	db	high _SPI1_ReadBlock
  1133  00FA3F  00                 	db	0
  1134  00FA40  00                 	db	0
  1135  00FA41  00                 	db	0
  1136  00FA42  00                 	db	0
  1137  00FA43  00                 	db	0
  1138  00FA44  00                 	db	0
  1139  00FA45  00                 	db	0
  1140  00FA46  00                 	db	0
  1141  00FA47  FE                 	db	low _SPI1_Close
  1142  00FA48  F7                 	db	high _SPI1_Close
  1143  00FA49  58                 	db	low _SDSLOW_open
  1144  00FA4A  F7                 	db	high _SDSLOW_open
  1145  00FA4B  1A                 	db	low _SPI1_ExchangeByte
  1146  00FA4C  F6                 	db	high _SPI1_ExchangeByte
  1147  00FA4D  C6                 	db	low _SPI1_ExchangeBlock
  1148  00FA4E  EB                 	db	high _SPI1_ExchangeBlock
  1149  00FA4F  00                 	db	0
  1150  00FA50  00                 	db	0
  1151  00FA51  AE                 	db	low _SPI1_ReadBlock
  1152  00FA52  F1                 	db	high _SPI1_ReadBlock
  1153  00FA53  00                 	db	0
  1154  00FA54  00                 	db	0
  1155  00FA55  00                 	db	0
  1156  00FA56  00                 	db	0
  1157  00FA57  00                 	db	0
  1158  00FA58  00                 	db	0
  1159  00FA59  00                 	db	0
  1160  00FA5A  00                 	db	0
  1161  00FA5B  FE                 	db	low _SPI1_Close
  1162  00FA5C  F7                 	db	high _SPI1_Close
  1163  00FA5D  70                 	db	low _Touch2M_open
  1164  00FA5E  F7                 	db	high _Touch2M_open
  1165  00FA5F  1A                 	db	low _SPI1_ExchangeByte
  1166  00FA60  F6                 	db	high _SPI1_ExchangeByte
  1167  00FA61  C6                 	db	low _SPI1_ExchangeBlock
  1168  00FA62  EB                 	db	high _SPI1_ExchangeBlock
  1169  00FA63  00                 	db	0
  1170  00FA64  00                 	db	0
  1171  00FA65  AE                 	db	low _SPI1_ReadBlock
  1172  00FA66  F1                 	db	high _SPI1_ReadBlock
  1173  00FA67  00                 	db	0
  1174  00FA68  00                 	db	0
  1175  00FA69  00                 	db	0
  1176  00FA6A  00                 	db	0
  1177  00FA6B  00                 	db	0
  1178  00FA6C  00                 	db	0
  1179  00FA6D  00                 	db	0
  1180  00FA6E  00                 	db	0
  1181  00FA6F                     __end_of_spiMaster:
  1182                           	callstack 0
  1183  00FA6F                     _i2c2_fsmStateTable:
  1184                           	callstack 0
  1185  00FA6F  28                 	db	low _I2C2_DO_IDLE
  1186  00FA70  F7                 	db	high _I2C2_DO_IDLE
  1187  00FA71  88                 	db	low _I2C2_DO_SEND_ADR_READ
  1188  00FA72  F6                 	db	high _I2C2_DO_SEND_ADR_READ
  1189  00FA73  7A                 	db	low _I2C2_DO_SEND_ADR_WRITE
  1190  00FA74  F6                 	db	high _I2C2_DO_SEND_ADR_WRITE
  1191  00FA75  82                 	db	low _I2C2_DO_TX
  1192  00FA76  D7                 	db	high _I2C2_DO_TX
  1193  00FA77  B4                 	db	low _I2C2_DO_RX
  1194  00FA78  DF                 	db	high _I2C2_DO_RX
  1195  00FA79  1E                 	db	low _I2C2_DO_RCEN
  1196  00FA7A  F7                 	db	high _I2C2_DO_RCEN
  1197  00FA7B  1E                 	db	low _I2C2_DO_TX_EMPTY
  1198  00FA7C  E7                 	db	high _I2C2_DO_TX_EMPTY
  1199  00FA7D  B0                 	db	low _I2C2_DO_SEND_RESTART_READ
  1200  00FA7E  F7                 	db	high _I2C2_DO_SEND_RESTART_READ
  1201  00FA7F  A8                 	db	low _I2C2_DO_SEND_RESTART_WRITE
  1202  00FA80  F7                 	db	high _I2C2_DO_SEND_RESTART_WRITE
  1203  00FA81  A0                 	db	low _I2C2_DO_SEND_RESTART
  1204  00FA82  F7                 	db	high _I2C2_DO_SEND_RESTART
  1205  00FA83  98                 	db	low _I2C2_DO_SEND_STOP
  1206  00FA84  F7                 	db	high _I2C2_DO_SEND_STOP
  1207  00FA85  90                 	db	low _I2C2_DO_RX_ACK
  1208  00FA86  F7                 	db	high _I2C2_DO_RX_ACK
  1209  00FA87  88                 	db	low _I2C2_DO_RX_NACK_STOP
  1210  00FA88  F7                 	db	high _I2C2_DO_RX_NACK_STOP
  1211  00FA89  80                 	db	low _I2C2_DO_RX_NACK_RESTART
  1212  00FA8A  F7                 	db	high _I2C2_DO_RX_NACK_RESTART
  1213  00FA8B  14                 	db	low _I2C2_DO_RESET
  1214  00FA8C  F7                 	db	high _I2C2_DO_RESET
  1215  00FA8D  08                 	db	low _I2C2_DO_ADDRESS_NACK
  1216  00FA8E  EB                 	db	high _I2C2_DO_ADDRESS_NACK
  1217  00FA8F                     __end_of_i2c2_fsmStateTable:
  1218                           	callstack 0
  1219  00FA8F                     _spi1_configuration:
  1220                           	callstack 0
  1221  00FA8F  0A                 	db	10
  1222  00FA90  C0                 	db	192
  1223  00FA91  01                 	db	1
  1224  00FA92  00                 	db	0
  1225  00FA93  0A                 	db	10
  1226  00FA94  40                 	db	64
  1227  00FA95  01                 	db	1
  1228  00FA96  00                 	db	0
  1229  00FA97  0A                 	db	10
  1230  00FA98  40                 	db	64
  1231  00FA99  27                 	db	39
  1232  00FA9A  00                 	db	0
  1233  00FA9B  0A                 	db	10
  1234  00FA9C  40                 	db	64
  1235  00FA9D  01                 	db	1
  1236  00FA9E  00                 	db	0
  1237  00FA9F  0A                 	db	10
  1238  00FAA0  40                 	db	64
  1239  00FAA1  07                 	db	7
  1240  00FAA2  00                 	db	0
  1241  00FAA3                     __end_of_spi1_configuration:
  1242                           	callstack 0
  1243  00FAA3                     _moninit:
  1244                           	callstack 0
  1245  00FAA3  1F                 	db	31
  1246  00FAA4  1C                 	db	28
  1247  00FAA5  1F                 	db	31
  1248  00FAA6  1E                 	db	30
  1249  00FAA7  1F                 	db	31
  1250  00FAA8  1E                 	db	30
  1251  00FAA9  1F                 	db	31
  1252  00FAAA  1F                 	db	31
  1253  00FAAB  1E                 	db	30
  1254  00FAAC  1F                 	db	31
  1255  00FAAD  1E                 	db	30
  1256  00FAAE  1F                 	db	31
  1257  00FAAF                     __end_of_moninit:
  1258                           	callstack 0
  1259  00FAAF                     _dpowers:
  1260                           	callstack 0
  1261  00FAAF  0001               	dw	1
  1262  00FAB1  000A               	dw	10
  1263  00FAB3  0064               	dw	100
  1264  00FAB5  03E8               	dw	1000
  1265  00FAB7  2710               	dw	10000
  1266  00FAB9                     __end_of_dpowers:
  1267                           	callstack 0
  1268  00FAB9                     Dispseg@F6512:
  1269                           	callstack 0
  1270  00FAB9  3F                 	db	63
  1271  00FABA  06                 	db	6
  1272  00FABB  5B                 	db	91
  1273  00FABC  4F                 	db	79
  1274  00FABD  66                 	db	102
  1275  00FABE  6D                 	db	109
  1276  00FABF  7D                 	db	125
  1277  00FAC0  07                 	db	7
  1278  00FAC1  7F                 	db	127
  1279  00FAC2  6F                 	db	111
  1280  00FAC3                     __end_ofDispseg@F6512:
  1281                           	callstack 0
  1282  00FAC3                     _DbcTbl:
  1283                           	callstack 0
  1284  00FAC3  81                 	db	129
  1285  00FAC4  9F                 	db	159
  1286  00FAC5  E0                 	db	224
  1287  00FAC6  FC                 	db	252
  1288  00FAC7  40                 	db	64
  1289  00FAC8  7E                 	db	126
  1290  00FAC9  80                 	db	128
  1291  00FACA  FC                 	db	252
  1292  00FACB  00                 	db	0
  1293  00FACC  00                 	db	0
  1294  00FACD                     __end_of_DbcTbl:
  1295                           	callstack 0
  1296  00FACD                     _hexpowers:
  1297                           	callstack 0
  1298  00FACD  0001               	dw	1
  1299  00FACF  0010               	dw	16
  1300  00FAD1  0100               	dw	256
  1301  00FAD3  1000               	dw	4096
  1302  00FAD5                     __end_of_hexpowers:
  1303                           	callstack 0
  1304  00FAD5                     _font:
  1305                           	callstack 0
  1306  00FAD5  08                 	db	8
  1307  00FAD6  08                 	db	8
  1308  00FAD7  08                 	db	8
  1309  00FAD8  08                 	db	8
  1310  00FAD9  20                 	db	32
  1311  00FADA  00                 	db	0
  1312  00FADB  00                 	db	0
  1313  00FADC  00                 	db	0
  1314  00FADD  00                 	db	0
  1315  00FADE  00                 	db	0
  1316  00FADF  00                 	db	0
  1317  00FAE0  00                 	db	0
  1318  00FAE1  00                 	db	0
  1319  00FAE2  00                 	db	0
  1320  00FAE3  00                 	db	0
  1321  00FAE4  00                 	db	0
  1322  00FAE5  00                 	db	0
  1323  00FAE6  00                 	db	0
  1324  00FAE7  6F                 	db	111
  1325  00FAE8  6F                 	db	111
  1326  00FAE9  03                 	db	3
  1327  00FAEA  00                 	db	0
  1328  00FAEB  00                 	db	0
  1329  00FAEC  00                 	db	0
  1330  00FAED  00                 	db	0
  1331  00FAEE  06                 	db	6
  1332  00FAEF  03                 	db	3
  1333  00FAF0  01                 	db	1
  1334  00FAF1  06                 	db	6
  1335  00FAF2  03                 	db	3
  1336  00FAF3  01                 	db	1
  1337  00FAF4  00                 	db	0
  1338  00FAF5  10                 	db	16
  1339  00FAF6  74                 	db	116
  1340  00FAF7  1C                 	db	28
  1341  00FAF8  77                 	db	119
  1342  00FAF9  1C                 	db	28
  1343  00FAFA  17                 	db	23
  1344  00FAFB  04                 	db	4
  1345  00FAFC  00                 	db	0
  1346  00FAFD  04                 	db	4
  1347  00FAFE  2E                 	db	46
  1348  00FAFF  2A                 	db	42
  1349  00FB00  7F                 	db	127
  1350  00FB01  2A                 	db	42
  1351  00FB02  3A                 	db	58
  1352  00FB03  10                 	db	16
  1353  00FB04  00                 	db	0
  1354  00FB05  47                 	db	71
  1355  00FB06  65                 	db	101
  1356  00FB07  37                 	db	55
  1357  00FB08  08                 	db	8
  1358  00FB09  76                 	db	118
  1359  00FB0A  53                 	db	83
  1360  00FB0B  71                 	db	113
  1361  00FB0C  00                 	db	0
  1362  00FB0D  30                 	db	48
  1363  00FB0E  7A                 	db	122
  1364  00FB0F  4F                 	db	79
  1365  00FB10  55                 	db	85
  1366  00FB11  66                 	db	102
  1367  00FB12  38                 	db	56
  1368  00FB13  48                 	db	72
  1369  00FB14  00                 	db	0
  1370  00FB15  00                 	db	0
  1371  00FB16  06                 	db	6
  1372  00FB17  03                 	db	3
  1373  00FB18  01                 	db	1
  1374  00FB19  00                 	db	0
  1375  00FB1A  00                 	db	0
  1376  00FB1B  00                 	db	0
  1377  00FB1C  00                 	db	0
  1378  00FB1D  00                 	db	0
  1379  00FB1E  00                 	db	0
  1380  00FB1F  00                 	db	0
  1381  00FB20  3E                 	db	62
  1382  00FB21  7F                 	db	127
  1383  00FB22  41                 	db	65
  1384  00FB23  00                 	db	0
  1385  00FB24  00                 	db	0
  1386  00FB25  00                 	db	0
  1387  00FB26  00                 	db	0
  1388  00FB27  41                 	db	65
  1389  00FB28  7F                 	db	127
  1390  00FB29  3E                 	db	62
  1391  00FB2A  00                 	db	0
  1392  00FB2B  00                 	db	0
  1393  00FB2C  00                 	db	0
  1394  00FB2D  00                 	db	0
  1395  00FB2E  22                 	db	34
  1396  00FB2F  14                 	db	20
  1397  00FB30  3E                 	db	62
  1398  00FB31  14                 	db	20
  1399  00FB32  22                 	db	34
  1400  00FB33  00                 	db	0
  1401  00FB34  00                 	db	0
  1402  00FB35  08                 	db	8
  1403  00FB36  08                 	db	8
  1404  00FB37  3E                 	db	62
  1405  00FB38  3E                 	db	62
  1406  00FB39  08                 	db	8
  1407  00FB3A  08                 	db	8
  1408  00FB3B  00                 	db	0
  1409  00FB3C  00                 	db	0
  1410  00FB3D  00                 	db	0
  1411  00FB3E  B0                 	db	176
  1412  00FB3F  F0                 	db	240
  1413  00FB40  70                 	db	112
  1414  00FB41  00                 	db	0
  1415  00FB42  00                 	db	0
  1416  00FB43  00                 	db	0
  1417  00FB44  00                 	db	0
  1418  00FB45  08                 	db	8
  1419  00FB46  08                 	db	8
  1420  00FB47  08                 	db	8
  1421  00FB48  08                 	db	8
  1422  00FB49  08                 	db	8
  1423  00FB4A  08                 	db	8
  1424  00FB4B  00                 	db	0
  1425  00FB4C  00                 	db	0
  1426  00FB4D  00                 	db	0
  1427  00FB4E  00                 	db	0
  1428  00FB4F  60                 	db	96
  1429  00FB50  60                 	db	96
  1430  00FB51  00                 	db	0
  1431  00FB52  00                 	db	0
  1432  00FB53  00                 	db	0
  1433  00FB54  00                 	db	0
  1434  00FB55  60                 	db	96
  1435  00FB56  30                 	db	48
  1436  00FB57  18                 	db	24
  1437  00FB58  0C                 	db	12
  1438  00FB59  06                 	db	6
  1439  00FB5A  03                 	db	3
  1440  00FB5B  00                 	db	0
  1441  00FB5C  00                 	db	0
  1442  00FB5D  00                 	db	0
  1443  00FB5E  3E                 	db	62
  1444  00FB5F  7F                 	db	127
  1445  00FB60  41                 	db	65
  1446  00FB61  41                 	db	65
  1447  00FB62  7F                 	db	127
  1448  00FB63  3E                 	db	62
  1449  00FB64  00                 	db	0
  1450  00FB65  00                 	db	0
  1451  00FB66  00                 	db	0
  1452  00FB67  02                 	db	2
  1453  00FB68  7F                 	db	127
  1454  00FB69  7F                 	db	127
  1455  00FB6A  00                 	db	0
  1456  00FB6B  00                 	db	0
  1457  00FB6C  00                 	db	0
  1458  00FB6D  00                 	db	0
  1459  00FB6E  62                 	db	98
  1460  00FB6F  73                 	db	115
  1461  00FB70  59                 	db	89
  1462  00FB71  49                 	db	73
  1463  00FB72  4F                 	db	79
  1464  00FB73  46                 	db	70
  1465  00FB74  00                 	db	0
  1466  00FB75  00                 	db	0
  1467  00FB76  41                 	db	65
  1468  00FB77  49                 	db	73
  1469  00FB78  49                 	db	73
  1470  00FB79  49                 	db	73
  1471  00FB7A  7F                 	db	127
  1472  00FB7B  36                 	db	54
  1473  00FB7C  00                 	db	0
  1474  00FB7D  00                 	db	0
  1475  00FB7E  1F                 	db	31
  1476  00FB7F  10                 	db	16
  1477  00FB80  10                 	db	16
  1478  00FB81  7F                 	db	127
  1479  00FB82  7F                 	db	127
  1480  00FB83  10                 	db	16
  1481  00FB84  00                 	db	0
  1482  00FB85  00                 	db	0
  1483  00FB86  2F                 	db	47
  1484  00FB87  6F                 	db	111
  1485  00FB88  45                 	db	69
  1486  00FB89  45                 	db	69
  1487  00FB8A  7D                 	db	125
  1488  00FB8B  39                 	db	57
  1489  00FB8C  00                 	db	0
  1490  00FB8D  00                 	db	0
  1491  00FB8E  3C                 	db	60
  1492  00FB8F  7E                 	db	126
  1493  00FB90  4B                 	db	75
  1494  00FB91  49                 	db	73
  1495  00FB92  79                 	db	121
  1496  00FB93  30                 	db	48
  1497  00FB94  00                 	db	0
  1498  00FB95  00                 	db	0
  1499  00FB96  01                 	db	1
  1500  00FB97  01                 	db	1
  1501  00FB98  71                 	db	113
  1502  00FB99  7D                 	db	125
  1503  00FB9A  0F                 	db	15
  1504  00FB9B  03                 	db	3
  1505  00FB9C  00                 	db	0
  1506  00FB9D  00                 	db	0
  1507  00FB9E  36                 	db	54
  1508  00FB9F  7F                 	db	127
  1509  00FBA0  49                 	db	73
  1510  00FBA1  49                 	db	73
  1511  00FBA2  7F                 	db	127
  1512  00FBA3  36                 	db	54
  1513  00FBA4  00                 	db	0
  1514  00FBA5  00                 	db	0
  1515  00FBA6  06                 	db	6
  1516  00FBA7  4F                 	db	79
  1517  00FBA8  49                 	db	73
  1518  00FBA9  69                 	db	105
  1519  00FBAA  3F                 	db	63
  1520  00FBAB  1E                 	db	30
  1521  00FBAC  00                 	db	0
  1522  00FBAD  00                 	db	0
  1523  00FBAE  00                 	db	0
  1524  00FBAF  00                 	db	0
  1525  00FBB0  36                 	db	54
  1526  00FBB1  36                 	db	54
  1527  00FBB2  00                 	db	0
  1528  00FBB3  00                 	db	0
  1529  00FBB4  00                 	db	0
  1530  00FBB5  00                 	db	0
  1531  00FBB6  00                 	db	0
  1532  00FBB7  00                 	db	0
  1533  00FBB8  B6                 	db	182
  1534  00FBB9  76                 	db	118
  1535  00FBBA  00                 	db	0
  1536  00FBBB  00                 	db	0
  1537  00FBBC  00                 	db	0
  1538  00FBBD  00                 	db	0
  1539  00FBBE  08                 	db	8
  1540  00FBBF  1C                 	db	28
  1541  00FBC0  36                 	db	54
  1542  00FBC1  63                 	db	99
  1543  00FBC2  41                 	db	65
  1544  00FBC3  00                 	db	0
  1545  00FBC4  00                 	db	0
  1546  00FBC5  12                 	db	18
  1547  00FBC6  12                 	db	18
  1548  00FBC7  12                 	db	18
  1549  00FBC8  12                 	db	18
  1550  00FBC9  12                 	db	18
  1551  00FBCA  12                 	db	18
  1552  00FBCB  12                 	db	18
  1553  00FBCC  00                 	db	0
  1554  00FBCD  41                 	db	65
  1555  00FBCE  63                 	db	99
  1556  00FBCF  36                 	db	54
  1557  00FBD0  1C                 	db	28
  1558  00FBD1  08                 	db	8
  1559  00FBD2  00                 	db	0
  1560  00FBD3  00                 	db	0
  1561  00FBD4  00                 	db	0
  1562  00FBD5  06                 	db	6
  1563  00FBD6  07                 	db	7
  1564  00FBD7  51                 	db	81
  1565  00FBD8  59                 	db	89
  1566  00FBD9  09                 	db	9
  1567  00FBDA  0F                 	db	15
  1568  00FBDB  06                 	db	6
  1569  00FBDC  00                 	db	0
  1570  00FBDD  3E                 	db	62
  1571  00FBDE  63                 	db	99
  1572  00FBDF  59                 	db	89
  1573  00FBE0  65                 	db	101
  1574  00FBE1  45                 	db	69
  1575  00FBE2  7F                 	db	127
  1576  00FBE3  3E                 	db	62
  1577  00FBE4  00                 	db	0
  1578  00FBE5  7C                 	db	124
  1579  00FBE6  7E                 	db	126
  1580  00FBE7  13                 	db	19
  1581  00FBE8  11                 	db	17
  1582  00FBE9  13                 	db	19
  1583  00FBEA  7E                 	db	126
  1584  00FBEB  7C                 	db	124
  1585  00FBEC  00                 	db	0
  1586  00FBED  7F                 	db	127
  1587  00FBEE  7F                 	db	127
  1588  00FBEF  49                 	db	73
  1589  00FBF0  49                 	db	73
  1590  00FBF1  49                 	db	73
  1591  00FBF2  7F                 	db	127
  1592  00FBF3  36                 	db	54
  1593  00FBF4  00                 	db	0
  1594  00FBF5  3E                 	db	62
  1595  00FBF6  7F                 	db	127
  1596  00FBF7  63                 	db	99
  1597  00FBF8  41                 	db	65
  1598  00FBF9  41                 	db	65
  1599  00FBFA  41                 	db	65
  1600  00FBFB  41                 	db	65
  1601  00FBFC  00                 	db	0
  1602  00FBFD  7F                 	db	127
  1603  00FBFE  7F                 	db	127
  1604  00FBFF  41                 	db	65
  1605  00FC00  41                 	db	65
  1606  00FC01  41                 	db	65
  1607  00FC02  7F                 	db	127
  1608  00FC03  3E                 	db	62
  1609  00FC04  00                 	db	0
  1610  00FC05  7F                 	db	127
  1611  00FC06  7F                 	db	127
  1612  00FC07  49                 	db	73
  1613  00FC08  49                 	db	73
  1614  00FC09  49                 	db	73
  1615  00FC0A  49                 	db	73
  1616  00FC0B  41                 	db	65
  1617  00FC0C  00                 	db	0
  1618  00FC0D  7F                 	db	127
  1619  00FC0E  7F                 	db	127
  1620  00FC0F  09                 	db	9
  1621  00FC10  09                 	db	9
  1622  00FC11  09                 	db	9
  1623  00FC12  09                 	db	9
  1624  00FC13  01                 	db	1
  1625  00FC14  00                 	db	0
  1626  00FC15  3E                 	db	62
  1627  00FC16  7F                 	db	127
  1628  00FC17  41                 	db	65
  1629  00FC18  49                 	db	73
  1630  00FC19  49                 	db	73
  1631  00FC1A  79                 	db	121
  1632  00FC1B  7A                 	db	122
  1633  00FC1C  00                 	db	0
  1634  00FC1D  7F                 	db	127
  1635  00FC1E  7F                 	db	127
  1636  00FC1F  08                 	db	8
  1637  00FC20  08                 	db	8
  1638  00FC21  08                 	db	8
  1639  00FC22  7F                 	db	127
  1640  00FC23  7F                 	db	127
  1641  00FC24  00                 	db	0
  1642  00FC25  00                 	db	0
  1643  00FC26  00                 	db	0
  1644  00FC27  41                 	db	65
  1645  00FC28  7F                 	db	127
  1646  00FC29  7F                 	db	127
  1647  00FC2A  41                 	db	65
  1648  00FC2B  00                 	db	0
  1649  00FC2C  00                 	db	0
  1650  00FC2D  20                 	db	32
  1651  00FC2E  40                 	db	64
  1652  00FC2F  41                 	db	65
  1653  00FC30  7F                 	db	127
  1654  00FC31  3F                 	db	63
  1655  00FC32  01                 	db	1
  1656  00FC33  00                 	db	0
  1657  00FC34  00                 	db	0
  1658  00FC35  7F                 	db	127
  1659  00FC36  7F                 	db	127
  1660  00FC37  08                 	db	8
  1661  00FC38  1C                 	db	28
  1662  00FC39  36                 	db	54
  1663  00FC3A  63                 	db	99
  1664  00FC3B  41                 	db	65
  1665  00FC3C  00                 	db	0
  1666  00FC3D  7F                 	db	127
  1667  00FC3E  7F                 	db	127
  1668  00FC3F  40                 	db	64
  1669  00FC40  40                 	db	64
  1670  00FC41  40                 	db	64
  1671  00FC42  40                 	db	64
  1672  00FC43  40                 	db	64
  1673  00FC44  00                 	db	0
  1674  00FC45  7F                 	db	127
  1675  00FC46  7F                 	db	127
  1676  00FC47  06                 	db	6
  1677  00FC48  1C                 	db	28
  1678  00FC49  06                 	db	6
  1679  00FC4A  7F                 	db	127
  1680  00FC4B  7F                 	db	127
  1681  00FC4C  00                 	db	0
  1682  00FC4D  7F                 	db	127
  1683  00FC4E  7F                 	db	127
  1684  00FC4F  06                 	db	6
  1685  00FC50  08                 	db	8
  1686  00FC51  30                 	db	48
  1687  00FC52  7F                 	db	127
  1688  00FC53  7F                 	db	127
  1689  00FC54  00                 	db	0
  1690  00FC55  3E                 	db	62
  1691  00FC56  7F                 	db	127
  1692  00FC57  41                 	db	65
  1693  00FC58  41                 	db	65
  1694  00FC59  41                 	db	65
  1695  00FC5A  7F                 	db	127
  1696  00FC5B  3E                 	db	62
  1697  00FC5C  00                 	db	0
  1698  00FC5D  7F                 	db	127
  1699  00FC5E  7F                 	db	127
  1700  00FC5F  09                 	db	9
  1701  00FC60  09                 	db	9
  1702  00FC61  09                 	db	9
  1703  00FC62  0F                 	db	15
  1704  00FC63  06                 	db	6
  1705  00FC64  00                 	db	0
  1706  00FC65  3E                 	db	62
  1707  00FC66  7F                 	db	127
  1708  00FC67  41                 	db	65
  1709  00FC68  51                 	db	81
  1710  00FC69  21                 	db	33
  1711  00FC6A  7F                 	db	127
  1712  00FC6B  5E                 	db	94
  1713  00FC6C  00                 	db	0
  1714  00FC6D  7F                 	db	127
  1715  00FC6E  7F                 	db	127
  1716  00FC6F  09                 	db	9
  1717  00FC70  19                 	db	25
  1718  00FC71  39                 	db	57
  1719  00FC72  6F                 	db	111
  1720  00FC73  46                 	db	70
  1721  00FC74  00                 	db	0
  1722  00FC75  46                 	db	70
  1723  00FC76  4F                 	db	79
  1724  00FC77  49                 	db	73
  1725  00FC78  49                 	db	73
  1726  00FC79  49                 	db	73
  1727  00FC7A  79                 	db	121
  1728  00FC7B  31                 	db	49
  1729  00FC7C  00                 	db	0
  1730  00FC7D  00                 	db	0
  1731  00FC7E  01                 	db	1
  1732  00FC7F  01                 	db	1
  1733  00FC80  7F                 	db	127
  1734  00FC81  7F                 	db	127
  1735  00FC82  01                 	db	1
  1736  00FC83  01                 	db	1
  1737  00FC84  00                 	db	0
  1738  00FC85  3F                 	db	63
  1739  00FC86  7F                 	db	127
  1740  00FC87  40                 	db	64
  1741  00FC88  40                 	db	64
  1742  00FC89  40                 	db	64
  1743  00FC8A  7F                 	db	127
  1744  00FC8B  3F                 	db	63
  1745  00FC8C  00                 	db	0
  1746  00FC8D  03                 	db	3
  1747  00FC8E  0E                 	db	14
  1748  00FC8F  38                 	db	56
  1749  00FC90  60                 	db	96
  1750  00FC91  38                 	db	56
  1751  00FC92  0E                 	db	14
  1752  00FC93  03                 	db	3
  1753  00FC94  00                 	db	0
  1754  00FC95  1F                 	db	31
  1755  00FC96  78                 	db	120
  1756  00FC97  70                 	db	112
  1757  00FC98  1E                 	db	30
  1758  00FC99  70                 	db	112
  1759  00FC9A  78                 	db	120
  1760  00FC9B  1F                 	db	31
  1761  00FC9C  00                 	db	0
  1762  00FC9D  63                 	db	99
  1763  00FC9E  77                 	db	119
  1764  00FC9F  1C                 	db	28
  1765  00FCA0  08                 	db	8
  1766  00FCA1  1C                 	db	28
  1767  00FCA2  77                 	db	119
  1768  00FCA3  63                 	db	99
  1769  00FCA4  00                 	db	0
  1770  00FCA5  03                 	db	3
  1771  00FCA6  06                 	db	6
  1772  00FCA7  0C                 	db	12
  1773  00FCA8  78                 	db	120
  1774  00FCA9  0C                 	db	12
  1775  00FCAA  06                 	db	6
  1776  00FCAB  03                 	db	3
  1777  00FCAC  00                 	db	0
  1778  00FCAD  61                 	db	97
  1779  00FCAE  71                 	db	113
  1780  00FCAF  79                 	db	121
  1781  00FCB0  5D                 	db	93
  1782  00FCB1  4F                 	db	79
  1783  00FCB2  47                 	db	71
  1784  00FCB3  43                 	db	67
  1785  00FCB4  00                 	db	0
  1786  00FCB5  7F                 	db	127
  1787  00FCB6  7F                 	db	127
  1788  00FCB7  41                 	db	65
  1789  00FCB8  41                 	db	65
  1790  00FCB9  41                 	db	65
  1791  00FCBA  00                 	db	0
  1792  00FCBB  00                 	db	0
  1793  00FCBC  00                 	db	0
  1794  00FCBD  15                 	db	21
  1795  00FCBE  16                 	db	22
  1796  00FCBF  7C                 	db	124
  1797  00FCC0  7C                 	db	124
  1798  00FCC1  16                 	db	22
  1799  00FCC2  15                 	db	21
  1800  00FCC3  00                 	db	0
  1801  00FCC4  00                 	db	0
  1802  00FCC5  00                 	db	0
  1803  00FCC6  41                 	db	65
  1804  00FCC7  41                 	db	65
  1805  00FCC8  41                 	db	65
  1806  00FCC9  7F                 	db	127
  1807  00FCCA  7F                 	db	127
  1808  00FCCB  00                 	db	0
  1809  00FCCC  00                 	db	0
  1810  00FCCD  04                 	db	4
  1811  00FCCE  06                 	db	6
  1812  00FCCF  03                 	db	3
  1813  00FCD0  03                 	db	3
  1814  00FCD1  06                 	db	6
  1815  00FCD2  04                 	db	4
  1816  00FCD3  00                 	db	0
  1817  00FCD4  00                 	db	0
  1818  00FCD5  40                 	db	64
  1819  00FCD6  40                 	db	64
  1820  00FCD7  40                 	db	64
  1821  00FCD8  40                 	db	64
  1822  00FCD9  40                 	db	64
  1823  00FCDA  40                 	db	64
  1824  00FCDB  40                 	db	64
  1825  00FCDC  00                 	db	0
  1826  00FCDD  00                 	db	0
  1827  00FCDE  01                 	db	1
  1828  00FCDF  03                 	db	3
  1829  00FCE0  06                 	db	6
  1830  00FCE1  00                 	db	0
  1831  00FCE2  00                 	db	0
  1832  00FCE3  00                 	db	0
  1833  00FCE4  00                 	db	0
  1834  00FCE5  38                 	db	56
  1835  00FCE6  7C                 	db	124
  1836  00FCE7  44                 	db	68
  1837  00FCE8  24                 	db	36
  1838  00FCE9  7C                 	db	124
  1839  00FCEA  7C                 	db	124
  1840  00FCEB  00                 	db	0
  1841  00FCEC  00                 	db	0
  1842  00FCED  7F                 	db	127
  1843  00FCEE  7F                 	db	127
  1844  00FCEF  48                 	db	72
  1845  00FCF0  48                 	db	72
  1846  00FCF1  78                 	db	120
  1847  00FCF2  30                 	db	48
  1848  00FCF3  00                 	db	0
  1849  00FCF4  00                 	db	0
  1850  00FCF5  38                 	db	56
  1851  00FCF6  7C                 	db	124
  1852  00FCF7  44                 	db	68
  1853  00FCF8  44                 	db	68
  1854  00FCF9  44                 	db	68
  1855  00FCFA  44                 	db	68
  1856  00FCFB  00                 	db	0
  1857  00FCFC  00                 	db	0
  1858  00FCFD  30                 	db	48
  1859  00FCFE  78                 	db	120
  1860  00FCFF  48                 	db	72
  1861  00FD00  48                 	db	72
  1862  00FD01  7F                 	db	127
  1863  00FD02  7F                 	db	127
  1864  00FD03  00                 	db	0
  1865  00FD04  00                 	db	0
  1866  00FD05  38                 	db	56
  1867  00FD06  7C                 	db	124
  1868  00FD07  54                 	db	84
  1869  00FD08  54                 	db	84
  1870  00FD09  54                 	db	84
  1871  00FD0A  58                 	db	88
  1872  00FD0B  00                 	db	0
  1873  00FD0C  00                 	db	0
  1874  00FD0D  08                 	db	8
  1875  00FD0E  08                 	db	8
  1876  00FD0F  7E                 	db	126
  1877  00FD10  7F                 	db	127
  1878  00FD11  09                 	db	9
  1879  00FD12  09                 	db	9
  1880  00FD13  00                 	db	0
  1881  00FD14  00                 	db	0
  1882  00FD15  18                 	db	24
  1883  00FD16  BC                 	db	188
  1884  00FD17  A4                 	db	164
  1885  00FD18  A4                 	db	164
  1886  00FD19  FC                 	db	252
  1887  00FD1A  7C                 	db	124
  1888  00FD1B  00                 	db	0
  1889  00FD1C  00                 	db	0
  1890  00FD1D  7F                 	db	127
  1891  00FD1E  7F                 	db	127
  1892  00FD1F  08                 	db	8
  1893  00FD20  08                 	db	8
  1894  00FD21  78                 	db	120
  1895  00FD22  70                 	db	112
  1896  00FD23  00                 	db	0
  1897  00FD24  00                 	db	0
  1898  00FD25  00                 	db	0
  1899  00FD26  00                 	db	0
  1900  00FD27  7A                 	db	122
  1901  00FD28  7A                 	db	122
  1902  00FD29  00                 	db	0
  1903  00FD2A  00                 	db	0
  1904  00FD2B  00                 	db	0
  1905  00FD2C  00                 	db	0
  1906  00FD2D  80                 	db	128
  1907  00FD2E  80                 	db	128
  1908  00FD2F  FA                 	db	250
  1909  00FD30  7A                 	db	122
  1910  00FD31  00                 	db	0
  1911  00FD32  00                 	db	0
  1912  00FD33  00                 	db	0
  1913  00FD34  00                 	db	0
  1914  00FD35  7F                 	db	127
  1915  00FD36  7F                 	db	127
  1916  00FD37  10                 	db	16
  1917  00FD38  38                 	db	56
  1918  00FD39  6C                 	db	108
  1919  00FD3A  44                 	db	68
  1920  00FD3B  00                 	db	0
  1921  00FD3C  00                 	db	0
  1922  00FD3D  00                 	db	0
  1923  00FD3E  00                 	db	0
  1924  00FD3F  7F                 	db	127
  1925  00FD40  7F                 	db	127
  1926  00FD41  00                 	db	0
  1927  00FD42  00                 	db	0
  1928  00FD43  00                 	db	0
  1929  00FD44  00                 	db	0
  1930  00FD45  7C                 	db	124
  1931  00FD46  7C                 	db	124
  1932  00FD47  0C                 	db	12
  1933  00FD48  78                 	db	120
  1934  00FD49  0C                 	db	12
  1935  00FD4A  7C                 	db	124
  1936  00FD4B  78                 	db	120
  1937  00FD4C  00                 	db	0
  1938  00FD4D  7C                 	db	124
  1939  00FD4E  7C                 	db	124
  1940  00FD4F  04                 	db	4
  1941  00FD50  04                 	db	4
  1942  00FD51  7C                 	db	124
  1943  00FD52  78                 	db	120
  1944  00FD53  00                 	db	0
  1945  00FD54  00                 	db	0
  1946  00FD55  38                 	db	56
  1947  00FD56  7C                 	db	124
  1948  00FD57  44                 	db	68
  1949  00FD58  44                 	db	68
  1950  00FD59  7C                 	db	124
  1951  00FD5A  38                 	db	56
  1952  00FD5B  00                 	db	0
  1953  00FD5C  00                 	db	0
  1954  00FD5D  FC                 	db	252
  1955  00FD5E  FC                 	db	252
  1956  00FD5F  24                 	db	36
  1957  00FD60  24                 	db	36
  1958  00FD61  3C                 	db	60
  1959  00FD62  18                 	db	24
  1960  00FD63  00                 	db	0
  1961  00FD64  00                 	db	0
  1962  00FD65  18                 	db	24
  1963  00FD66  3C                 	db	60
  1964  00FD67  24                 	db	36
  1965  00FD68  24                 	db	36
  1966  00FD69  FC                 	db	252
  1967  00FD6A  FC                 	db	252
  1968  00FD6B  00                 	db	0
  1969  00FD6C  00                 	db	0
  1970  00FD6D  7C                 	db	124
  1971  00FD6E  7C                 	db	124
  1972  00FD6F  18                 	db	24
  1973  00FD70  0C                 	db	12
  1974  00FD71  0C                 	db	12
  1975  00FD72  0C                 	db	12
  1976  00FD73  00                 	db	0
  1977  00FD74  00                 	db	0
  1978  00FD75  48                 	db	72
  1979  00FD76  5C                 	db	92
  1980  00FD77  54                 	db	84
  1981  00FD78  54                 	db	84
  1982  00FD79  74                 	db	116
  1983  00FD7A  24                 	db	36
  1984  00FD7B  00                 	db	0
  1985  00FD7C  00                 	db	0
  1986  00FD7D  00                 	db	0
  1987  00FD7E  08                 	db	8
  1988  00FD7F  3C                 	db	60
  1989  00FD80  7C                 	db	124
  1990  00FD81  48                 	db	72
  1991  00FD82  00                 	db	0
  1992  00FD83  00                 	db	0
  1993  00FD84  00                 	db	0
  1994  00FD85  3C                 	db	60
  1995  00FD86  7C                 	db	124
  1996  00FD87  40                 	db	64
  1997  00FD88  40                 	db	64
  1998  00FD89  7C                 	db	124
  1999  00FD8A  7C                 	db	124
  2000  00FD8B  00                 	db	0
  2001  00FD8C  00                 	db	0
  2002  00FD8D  0C                 	db	12
  2003  00FD8E  38                 	db	56
  2004  00FD8F  60                 	db	96
  2005  00FD90  30                 	db	48
  2006  00FD91  0C                 	db	12
  2007  00FD92  00                 	db	0
  2008  00FD93  00                 	db	0
  2009  00FD94  00                 	db	0
  2010  00FD95  3C                 	db	60
  2011  00FD96  70                 	db	112
  2012  00FD97  3C                 	db	60
  2013  00FD98  70                 	db	112
  2014  00FD99  3C                 	db	60
  2015  00FD9A  00                 	db	0
  2016  00FD9B  00                 	db	0
  2017  00FD9C  00                 	db	0
  2018  00FD9D  44                 	db	68
  2019  00FD9E  6C                 	db	108
  2020  00FD9F  38                 	db	56
  2021  00FDA0  38                 	db	56
  2022  00FDA1  6C                 	db	108
  2023  00FDA2  44                 	db	68
  2024  00FDA3  00                 	db	0
  2025  00FDA4  00                 	db	0
  2026  00FDA5  0C                 	db	12
  2027  00FDA6  18                 	db	24
  2028  00FDA7  70                 	db	112
  2029  00FDA8  18                 	db	24
  2030  00FDA9  0C                 	db	12
  2031  00FDAA  00                 	db	0
  2032  00FDAB  00                 	db	0
  2033  00FDAC  00                 	db	0
  2034  00FDAD  44                 	db	68
  2035  00FDAE  64                 	db	100
  2036  00FDAF  74                 	db	116
  2037  00FDB0  5C                 	db	92
  2038  00FDB1  4C                 	db	76
  2039  00FDB2  44                 	db	68
  2040  00FDB3  00                 	db	0
  2041  00FDB4  00                 	db	0
  2042  00FDB5  08                 	db	8
  2043  00FDB6  1C                 	db	28
  2044  00FDB7  77                 	db	119
  2045  00FDB8  41                 	db	65
  2046  00FDB9  41                 	db	65
  2047  00FDBA  00                 	db	0
  2048  00FDBB  00                 	db	0
  2049  00FDBC  00                 	db	0
  2050  00FDBD  00                 	db	0
  2051  00FDBE  00                 	db	0
  2052  00FDBF  7F                 	db	127
  2053  00FDC0  7F                 	db	127
  2054  00FDC1  00                 	db	0
  2055  00FDC2  00                 	db	0
  2056  00FDC3  00                 	db	0
  2057  00FDC4  00                 	db	0
  2058  00FDC5  00                 	db	0
  2059  00FDC6  41                 	db	65
  2060  00FDC7  41                 	db	65
  2061  00FDC8  77                 	db	119
  2062  00FDC9  1C                 	db	28
  2063  00FDCA  08                 	db	8
  2064  00FDCB  00                 	db	0
  2065  00FDCC  00                 	db	0
  2066  00FDCD  0C                 	db	12
  2067  00FDCE  06                 	db	6
  2068  00FDCF  06                 	db	6
  2069  00FDD0  04                 	db	4
  2070  00FDD1  0C                 	db	12
  2071  00FDD2  0C                 	db	12
  2072  00FDD3  06                 	db	6
  2073  00FDD4  00                 	db	0
  2074  00FDD5  7F                 	db	127
  2075  00FDD6  41                 	db	65
  2076  00FDD7  41                 	db	65
  2077  00FDD8  41                 	db	65
  2078  00FDD9  41                 	db	65
  2079  00FDDA  41                 	db	65
  2080  00FDDB  7F                 	db	127
  2081  00FDDC  00                 	db	0
  2082  00FDDD  00                 	db	0
  2083  00FDDE  7F                 	db	127
  2084  00FDDF  49                 	db	73
  2085  00FDE0  49                 	db	73
  2086  00FDE1  49                 	db	73
  2087  00FDE2  7F                 	db	127
  2088  00FDE3  00                 	db	0
  2089  00FDE4  00                 	db	0
  2090  00FDE5  40                 	db	64
  2091  00FDE6  3F                 	db	63
  2092  00FDE7  15                 	db	21
  2093  00FDE8  15                 	db	21
  2094  00FDE9  55                 	db	85
  2095  00FDEA  7F                 	db	127
  2096  00FDEB  00                 	db	0
  2097  00FDEC  00                 	db	0
  2098  00FDED  00                 	db	0
  2099  00FDEE  46                 	db	70
  2100  00FDEF  30                 	db	48
  2101  00FDF0  0F                 	db	15
  2102  00FDF1  30                 	db	48
  2103  00FDF2  46                 	db	70
  2104  00FDF3  00                 	db	0
  2105  00FDF4  00                 	db	0
  2106  00FDF5  24                 	db	36
  2107  00FDF6  14                 	db	20
  2108  00FDF7  0C                 	db	12
  2109  00FDF8  7F                 	db	127
  2110  00FDF9  0C                 	db	12
  2111  00FDFA  12                 	db	18
  2112  00FDFB  21                 	db	33
  2113  00FDFC  00                 	db	0
  2114  00FDFD  22                 	db	34
  2115  00FDFE  12                 	db	18
  2116  00FDFF  0A                 	db	10
  2117  00FE00  7F                 	db	127
  2118  00FE01  0A                 	db	10
  2119  00FE02  12                 	db	18
  2120  00FE03  22                 	db	34
  2121  00FE04  00                 	db	0
  2122  00FE05  54                 	db	84
  2123  00FE06  72                 	db	114
  2124  00FE07  55                 	db	85
  2125  00FE08  7D                 	db	125
  2126  00FE09  55                 	db	85
  2127  00FE0A  72                 	db	114
  2128  00FE0B  54                 	db	84
  2129  00FE0C  00                 	db	0
  2130  00FE0D  40                 	db	64
  2131  00FE0E  44                 	db	68
  2132  00FE0F  44                 	db	68
  2133  00FE10  7F                 	db	127
  2134  00FE11  44                 	db	68
  2135  00FE12  44                 	db	68
  2136  00FE13  40                 	db	64
  2137  00FE14  00                 	db	0
  2138  00FE15  02                 	db	2
  2139  00FE16  05                 	db	5
  2140  00FE17  02                 	db	2
  2141  00FE18  3C                 	db	60
  2142  00FE19  42                 	db	66
  2143  00FE1A  42                 	db	66
  2144  00FE1B  42                 	db	66
  2145  00FE1C  00                 	db	0
  2146  00FE1D                     __end_of_font:
  2147                           	callstack 0
  2148  00FE1D                     _tinyfont:
  2149                           	callstack 0
  2150  00FE1D  06                 	db	6
  2151  00FE1E  08                 	db	8
  2152  00FE1F  00                 	db	0
  2153  00FE20  00                 	db	0
  2154  00FE21  30                 	db	48
  2155  00FE22  00                 	db	0
  2156  00FE23  00                 	db	0
  2157  00FE24  00                 	db	0
  2158  00FE25  3E                 	db	62
  2159  00FE26  7F                 	db	127
  2160  00FE27  41                 	db	65
  2161  00FE28  7F                 	db	127
  2162  00FE29  3E                 	db	62
  2163  00FE2A  00                 	db	0
  2164  00FE2B  00                 	db	0
  2165  00FE2C  02                 	db	2
  2166  00FE2D  7F                 	db	127
  2167  00FE2E  7F                 	db	127
  2168  00FE2F  00                 	db	0
  2169  00FE30  00                 	db	0
  2170  00FE31  66                 	db	102
  2171  00FE32  73                 	db	115
  2172  00FE33  59                 	db	89
  2173  00FE34  4F                 	db	79
  2174  00FE35  46                 	db	70
  2175  00FE36  00                 	db	0
  2176  00FE37  22                 	db	34
  2177  00FE38  6B                 	db	107
  2178  00FE39  49                 	db	73
  2179  00FE3A  7F                 	db	127
  2180  00FE3B  36                 	db	54
  2181  00FE3C  00                 	db	0
  2182  00FE3D  1C                 	db	28
  2183  00FE3E  13                 	db	19
  2184  00FE3F  7F                 	db	127
  2185  00FE40  7F                 	db	127
  2186  00FE41  10                 	db	16
  2187  00FE42  00                 	db	0
  2188  00FE43  2F                 	db	47
  2189  00FE44  47                 	db	71
  2190  00FE45  45                 	db	69
  2191  00FE46  7D                 	db	125
  2192  00FE47  39                 	db	57
  2193  00FE48  00                 	db	0
  2194  00FE49  38                 	db	56
  2195  00FE4A  7E                 	db	126
  2196  00FE4B  4B                 	db	75
  2197  00FE4C  79                 	db	121
  2198  00FE4D  38                 	db	56
  2199  00FE4E  00                 	db	0
  2200  00FE4F  01                 	db	1
  2201  00FE50  61                 	db	97
  2202  00FE51  79                 	db	121
  2203  00FE52  1F                 	db	31
  2204  00FE53  07                 	db	7
  2205  00FE54  00                 	db	0
  2206  00FE55  36                 	db	54
  2207  00FE56  7F                 	db	127
  2208  00FE57  49                 	db	73
  2209  00FE58  7F                 	db	127
  2210  00FE59  36                 	db	54
  2211  00FE5A  00                 	db	0
  2212  00FE5B  06                 	db	6
  2213  00FE5C  4F                 	db	79
  2214  00FE5D  69                 	db	105
  2215  00FE5E  7F                 	db	127
  2216  00FE5F  1E                 	db	30
  2217  00FE60  00                 	db	0
  2218  00FE61  00                 	db	0
  2219  00FE62  00                 	db	0
  2220  00FE63  00                 	db	0
  2221  00FE64  00                 	db	0
  2222  00FE65  00                 	db	0
  2223  00FE66  00                 	db	0
  2224  00FE67                     __end_of_tinyfont:
  2225                           	callstack 0
  2226  00FE67                     _ButtonName:
  2227                           	callstack 0
  2228  00FE67  59                 	db	89
  2229  00FE68  00                 	db	0
  2230  00FE69  00                 	db	0
  2231  00FE6A  00                 	db	0
  2232  00FE6B  00                 	db	0
  2233  00FE6C  00                 	db	0
  2234  00FE6D  00                 	db	0
  2235  00FE6E  00                 	db	0
  2236  00FE6F  4D                 	db	77
  2237  00FE70  00                 	db	0
  2238  00FE71  00                 	db	0
  2239  00FE72  00                 	db	0
  2240  00FE73  00                 	db	0
  2241  00FE74  00                 	db	0
  2242  00FE75  00                 	db	0
  2243  00FE76  00                 	db	0
  2244  00FE77  44                 	db	68
  2245  00FE78  00                 	db	0
  2246  00FE79  00                 	db	0
  2247  00FE7A  00                 	db	0
  2248  00FE7B  00                 	db	0
  2249  00FE7C  00                 	db	0
  2250  00FE7D  00                 	db	0
  2251  00FE7E  00                 	db	0
  2252  00FE7F  54                 	db	84
  2253  00FE80  00                 	db	0
  2254  00FE81  00                 	db	0
  2255  00FE82  00                 	db	0
  2256  00FE83  00                 	db	0
  2257  00FE84  00                 	db	0
  2258  00FE85  00                 	db	0
  2259  00FE86  00                 	db	0
  2260  00FE87  43                 	db	67
  2261  00FE88  61                 	db	97
  2262  00FE89  6E                 	db	110
  2263  00FE8A  63                 	db	99
  2264  00FE8B  65                 	db	101
  2265  00FE8C  6C                 	db	108
  2266  00FE8D  00                 	db	0
  2267  00FE8E  00                 	db	0
  2268  00FE8F  4F                 	db	79
  2269  00FE90  4B                 	db	75
  2270  00FE91  00                 	db	0
  2271  00FE92  00                 	db	0
  2272  00FE93  00                 	db	0
  2273  00FE94  00                 	db	0
  2274  00FE95  00                 	db	0
  2275  00FE96  00                 	db	0
  2276  00FE97                     __end_of_ButtonName:
  2277                           	callstack 0
  2278  00FE97                     _HEX:
  2279                           	callstack 0
  2280  00FE97  30                 	db	48
  2281  00FE98  31                 	db	49
  2282  00FE99  32                 	db	50
  2283  00FE9A  33                 	db	51
  2284  00FE9B  34                 	db	52
  2285  00FE9C  35                 	db	53
  2286  00FE9D  36                 	db	54
  2287  00FE9E  37                 	db	55
  2288  00FE9F  38                 	db	56
  2289  00FEA0  39                 	db	57
  2290  00FEA1  41                 	db	65
  2291  00FEA2  42                 	db	66
  2292  00FEA3  43                 	db	67
  2293  00FEA4  44                 	db	68
  2294  00FEA5  45                 	db	69
  2295  00FEA6  46                 	db	70
  2296  00FEA7  00                 	db	0
  2297  00FEA8                     __end_of_HEX:
  2298                           	callstack 0
  2299  00FEA8                     
  2300                           ; BSR set to: 2
  2301  00FEA8  4A                 	db	74	;'J'
  2302  00FEA9  61                 	db	97	;'a'
  2303  00FEAA  6E                 	db	110	;'n'
  2304  00FEAB  46                 	db	70	;'F'
  2305  00FEAC  65                 	db	101	;'e'
  2306  00FEAD  62                 	db	98	;'b'
  2307  00FEAE  4D                 	db	77	;'M'
  2308  00FEAF  61                 	db	97	;'a'
  2309  00FEB0  72                 	db	114	;'r'
  2310  00FEB1  41                 	db	65	;'A'
  2311  00FEB2  70                 	db	112	;'p'
  2312  00FEB3  72                 	db	114	;'r'
  2313  00FEB4  4D                 	db	77	;'M'
  2314  00FEB5  61                 	db	97	;'a'
  2315  00FEB6  79                 	db	121	;'y'
  2316  00FEB7  4A                 	db	74	;'J'
  2317  00FEB8  75                 	db	117	;'u'
  2318  00FEB9  6E                 	db	110	;'n'
  2319  00FEBA  4A                 	db	74	;'J'
  2320  00FEBB  75                 	db	117	;'u'
  2321  00FEBC  6C                 	db	108	;'l'
  2322  00FEBD  41                 	db	65	;'A'
  2323  00FEBE  75                 	db	117	;'u'
  2324  00FEBF  67                 	db	103	;'g'
  2325  00FEC0  53                 	db	83	;'S'
  2326  00FEC1  65                 	db	101	;'e'
  2327  00FEC2  70                 	db	112	;'p'
  2328  00FEC3  4F                 	db	79	;'O'
  2329  00FEC4  63                 	db	99	;'c'
  2330  00FEC5  74                 	db	116	;'t'
  2331  00FEC6  4E                 	db	78	;'N'
  2332  00FEC7  6F                 	db	111	;'o'
  2333  00FEC8  76                 	db	118	;'v'
  2334  00FEC9  44                 	db	68	;'D'
  2335  00FECA  65                 	db	101	;'e'
  2336  00FECB  63                 	db	99	;'c'
  2337  00FECC  00                 	db	0
  2338  00FECD                     STR_17:
  2339                           
  2340                           ; BSR set to: 2
  2341  00FECD  32                 	db	50	;'2'
  2342  00FECE  2E                 	db	46
  2343  00FECF  20                 	db	32
  2344  00FED0  54                 	db	84	;'T'
  2345  00FED1  6F                 	db	111	;'o'
  2346  00FED2  75                 	db	117	;'u'
  2347  00FED3  63                 	db	99	;'c'
  2348  00FED4  68                 	db	104	;'h'
  2349  00FED5  20                 	db	32
  2350  00FED6  2B                 	db	43
  2351  00FED7  20                 	db	32
  2352  00FED8  61                 	db	97	;'a'
  2353  00FED9  74                 	db	116	;'t'
  2354  00FEDA  20                 	db	32
  2355  00FEDB  42                 	db	66	;'B'
  2356  00FEDC  6F                 	db	111	;'o'
  2357  00FEDD  74                 	db	116	;'t'
  2358  00FEDE  74                 	db	116	;'t'
  2359  00FEDF  6F                 	db	111	;'o'
  2360  00FEE0  6D                 	db	109	;'m'
  2361  00FEE1  20                 	db	32
  2362  00FEE2  52                 	db	82	;'R'
  2363  00FEE3  69                 	db	105	;'i'
  2364  00FEE4  67                 	db	103	;'g'
  2365  00FEE5  68                 	db	104	;'h'
  2366  00FEE6  74                 	db	116	;'t'
  2367  00FEE7  00                 	db	0
  2368  00FEE8                     STR_9:
  2369                           
  2370                           ; BSR set to: 2
  2371  00FEE8  25                 	db	37
  2372  00FEE9  78                 	db	120	;'x'
  2373  00FEEA  2F                 	db	47
  2374  00FEEB  25                 	db	37
  2375  00FEEC  78                 	db	120	;'x'
  2376  00FEED  2F                 	db	47
  2377  00FEEE  25                 	db	37
  2378  00FEEF  78                 	db	120	;'x'
  2379  00FEF0  20                 	db	32
  2380  00FEF1  25                 	db	37
  2381  00FEF2  30                 	db	48	;'0'
  2382  00FEF3  32                 	db	50	;'2'
  2383  00FEF4  78                 	db	120	;'x'
  2384  00FEF5  3A                 	db	58	;':'
  2385  00FEF6  25                 	db	37
  2386  00FEF7  30                 	db	48	;'0'
  2387  00FEF8  32                 	db	50	;'2'
  2388  00FEF9  78                 	db	120	;'x'
  2389  00FEFA  20                 	db	32
  2390  00FEFB  25                 	db	37
  2391  00FEFC  64                 	db	100	;'d'
  2392  00FEFD  0D                 	db	13
  2393  00FEFE  0A                 	db	10
  2394  00FEFF  00                 	db	0
  2395  00FF00                     
  2396                           ; BSR set to: 2
  2397  00FF00  53                 	db	83	;'S'
  2398  00FF01  75                 	db	117	;'u'
  2399  00FF02  6E                 	db	110	;'n'
  2400  00FF03  4D                 	db	77	;'M'
  2401  00FF04  6F                 	db	111	;'o'
  2402  00FF05  6E                 	db	110	;'n'
  2403  00FF06  54                 	db	84	;'T'
  2404  00FF07  75                 	db	117	;'u'
  2405  00FF08  65                 	db	101	;'e'
  2406  00FF09  57                 	db	87	;'W'
  2407  00FF0A  65                 	db	101	;'e'
  2408  00FF0B  64                 	db	100	;'d'
  2409  00FF0C  54                 	db	84	;'T'
  2410  00FF0D  68                 	db	104	;'h'
  2411  00FF0E  75                 	db	117	;'u'
  2412  00FF0F  46                 	db	70	;'F'
  2413  00FF10  72                 	db	114	;'r'
  2414  00FF11  69                 	db	105	;'i'
  2415  00FF12  53                 	db	83	;'S'
  2416  00FF13  61                 	db	97	;'a'
  2417  00FF14  74                 	db	116	;'t'
  2418  00FF15  00                 	db	0
  2419  00FF16                     STR_16:
  2420                           
  2421                           ; BSR set to: 2
  2422  00FF16  31                 	db	49	;'1'
  2423  00FF17  2E                 	db	46
  2424  00FF18  20                 	db	32
  2425  00FF19  54                 	db	84	;'T'
  2426  00FF1A  6F                 	db	111	;'o'
  2427  00FF1B  75                 	db	117	;'u'
  2428  00FF1C  63                 	db	99	;'c'
  2429  00FF1D  68                 	db	104	;'h'
  2430  00FF1E  20                 	db	32
  2431  00FF1F  2B                 	db	43
  2432  00FF20  20                 	db	32
  2433  00FF21  61                 	db	97	;'a'
  2434  00FF22  74                 	db	116	;'t'
  2435  00FF23  20                 	db	32
  2436  00FF24  55                 	db	85	;'U'
  2437  00FF25  70                 	db	112	;'p'
  2438  00FF26  20                 	db	32
  2439  00FF27  4C                 	db	76	;'L'
  2440  00FF28  65                 	db	101	;'e'
  2441  00FF29  66                 	db	102	;'f'
  2442  00FF2A  74                 	db	116	;'t'
  2443  00FF2B  00                 	db	0
  2444  00FF2C                     STR_11:
  2445                           
  2446                           ; BSR set to: 2
  2447  00FF2C  32                 	db	50	;'2'
  2448  00FF2D  30                 	db	48	;'0'
  2449  00FF2E  25                 	db	37
  2450  00FF2F  30                 	db	48	;'0'
  2451  00FF30  32                 	db	50	;'2'
  2452  00FF31  78                 	db	120	;'x'
  2453  00FF32  2F                 	db	47
  2454  00FF33  25                 	db	37
  2455  00FF34  30                 	db	48	;'0'
  2456  00FF35  32                 	db	50	;'2'
  2457  00FF36  78                 	db	120	;'x'
  2458  00FF37  2F                 	db	47
  2459  00FF38  25                 	db	37
  2460  00FF39  30                 	db	48	;'0'
  2461  00FF3A  32                 	db	50	;'2'
  2462  00FF3B  78                 	db	120	;'x'
  2463  00FF3C  28                 	db	40
  2464  00FF3D  25                 	db	37
  2465  00FF3E  63                 	db	99	;'c'
  2466  00FF3F  29                 	db	41
  2467  00FF40  00                 	db	0
  2468  00FF41                     STR_27:
  2469                           
  2470                           ; BSR set to: 2
  2471  00FF41  41                 	db	65	;'A'
  2472  00FF42  6C                 	db	108	;'l'
  2473  00FF43  61                 	db	97	;'a'
  2474  00FF44  72                 	db	114	;'r'
  2475  00FF45  6D                 	db	109	;'m'
  2476  00FF46  2B                 	db	43
  2477  00FF47  20                 	db	32
  2478  00FF48  25                 	db	37
  2479  00FF49  73                 	db	115	;'s'
  2480  00FF4A  20                 	db	32
  2481  00FF4B  25                 	db	37
  2482  00FF4C  30                 	db	48	;'0'
  2483  00FF4D  32                 	db	50	;'2'
  2484  00FF4E  64                 	db	100	;'d'
  2485  00FF4F  3A                 	db	58	;':'
  2486  00FF50  25                 	db	37
  2487  00FF51  30                 	db	48	;'0'
  2488  00FF52  32                 	db	50	;'2'
  2489  00FF53  78                 	db	120	;'x'
  2490  00FF54  00                 	db	0
  2491  00FF55                     STR_28:
  2492                           
  2493                           ; BSR set to: 2
  2494  00FF55  41                 	db	65	;'A'
  2495  00FF56  6C                 	db	108	;'l'
  2496  00FF57  61                 	db	97	;'a'
  2497  00FF58  72                 	db	114	;'r'
  2498  00FF59  6D                 	db	109	;'m'
  2499  00FF5A  2D                 	db	45
  2500  00FF5B  20                 	db	32
  2501  00FF5C  25                 	db	37
  2502  00FF5D  73                 	db	115	;'s'
  2503  00FF5E  20                 	db	32
  2504  00FF5F  25                 	db	37
  2505  00FF60  30                 	db	48	;'0'
  2506  00FF61  32                 	db	50	;'2'
  2507  00FF62  64                 	db	100	;'d'
  2508  00FF63  3A                 	db	58	;':'
  2509  00FF64  25                 	db	37
  2510  00FF65  30                 	db	48	;'0'
  2511  00FF66  32                 	db	50	;'2'
  2512  00FF67  78                 	db	120	;'x'
  2513  00FF68  00                 	db	0
  2514  00FF69                     STR_35:
  2515                           
  2516                           ; BSR set to: 2
  2517  00FF69  30                 	db	48	;'0'
  2518  00FF6A  31                 	db	49	;'1'
  2519  00FF6B  32                 	db	50	;'2'
  2520  00FF6C  33                 	db	51	;'3'
  2521  00FF6D  34                 	db	52	;'4'
  2522  00FF6E  35                 	db	53	;'5'
  2523  00FF6F  36                 	db	54	;'6'
  2524  00FF70  37                 	db	55	;'7'
  2525  00FF71  38                 	db	56	;'8'
  2526  00FF72  39                 	db	57	;'9'
  2527  00FF73  61                 	db	97	;'a'
  2528  00FF74  62                 	db	98	;'b'
  2529  00FF75  63                 	db	99	;'c'
  2530  00FF76  64                 	db	100	;'d'
  2531  00FF77  65                 	db	101	;'e'
  2532  00FF78  66                 	db	102	;'f'
  2533  00FF79  00                 	db	0
  2534  00FF7A                     STR_29:
  2535                           
  2536                           ; BSR set to: 2
  2537  00FF7A  41                 	db	65	;'A'
  2538  00FF7B  4C                 	db	76	;'L'
  2539  00FF7C  4D                 	db	77	;'M'
  2540  00FF7D  2B                 	db	43
  2541  00FF7E  20                 	db	32
  2542  00FF7F  25                 	db	37
  2543  00FF80  30                 	db	48	;'0'
  2544  00FF81  32                 	db	50	;'2'
  2545  00FF82  78                 	db	120	;'x'
  2546  00FF83  3A                 	db	58	;':'
  2547  00FF84  25                 	db	37
  2548  00FF85  30                 	db	48	;'0'
  2549  00FF86  32                 	db	50	;'2'
  2550  00FF87  78                 	db	120	;'x'
  2551  00FF88  00                 	db	0
  2552  00FF89                     STR_30:
  2553                           
  2554                           ; BSR set to: 2
  2555  00FF89  41                 	db	65	;'A'
  2556  00FF8A  4C                 	db	76	;'L'
  2557  00FF8B  4D                 	db	77	;'M'
  2558  00FF8C  2D                 	db	45
  2559  00FF8D  20                 	db	32
  2560  00FF8E  25                 	db	37
  2561  00FF8F  30                 	db	48	;'0'
  2562  00FF90  32                 	db	50	;'2'
  2563  00FF91  78                 	db	120	;'x'
  2564  00FF92  3A                 	db	58	;':'
  2565  00FF93  25                 	db	37
  2566  00FF94  30                 	db	48	;'0'
  2567  00FF95  32                 	db	50	;'2'
  2568  00FF96  78                 	db	120	;'x'
  2569  00FF97  00                 	db	0
  2570  00FF98                     STR_4:
  2571                           
  2572                           ; BSR set to: 2
  2573  00FF98  22                 	db	34
  2574  00FF99  2A                 	db	42
  2575  00FF9A  2B                 	db	43
  2576  00FF9B  2C                 	db	44
  2577  00FF9C  3A                 	db	58	;':'
  2578  00FF9D  3B                 	db	59	;';'
  2579  00FF9E  3C                 	db	60	;'<'
  2580  00FF9F  3D                 	db	61	;'='
  2581  00FFA0  3E                 	db	62	;'>'
  2582  00FFA1  3F                 	db	63	;'?'
  2583  00FFA2  5B                 	db	91	;'['
  2584  00FFA3  5D                 	db	93	;']'
  2585  00FFA4  7C                 	db	124
  2586  00FFA5  7F                 	db	127
  2587  00FFA6  00                 	db	0
  2588  00FFA7                     STR_8:
  2589                           
  2590                           ; BSR set to: 2
  2591  00FFA7  54                 	db	84	;'T'
  2592  00FFA8  65                 	db	101	;'e'
  2593  00FFA9  6D                 	db	109	;'m'
  2594  00FFAA  70                 	db	112	;'p'
  2595  00FFAB  4C                 	db	76	;'L'
  2596  00FFAC  6F                 	db	111	;'o'
  2597  00FFAD  67                 	db	103	;'g'
  2598  00FFAE  2E                 	db	46
  2599  00FFAF  54                 	db	84	;'T'
  2600  00FFB0  58                 	db	88	;'X'
  2601  00FFB1  54                 	db	84	;'T'
  2602  00FFB2  00                 	db	0
  2603  00FFB3                     
  2604                           ; BSR set to: 2
  2605  00FFB3  48                 	db	72	;'H'
  2606  00FFB4  45                 	db	69	;'E'
  2607  00FFB5  4C                 	db	76	;'L'
  2608  00FFB6  4C                 	db	76	;'L'
  2609  00FFB7  4F                 	db	79	;'O'
  2610  00FFB8  2E                 	db	46
  2611  00FFB9  54                 	db	84	;'T'
  2612  00FFBA  58                 	db	88	;'X'
  2613  00FFBB  54                 	db	84	;'T'
  2614  00FFBC  00                 	db	0
  2615  00FFBD                     STR_32:
  2616                           
  2617                           ; BSR set to: 2
  2618  00FFBD  25                 	db	37
  2619  00FFBE  32                 	db	50	;'2'
  2620  00FFBF  64                 	db	100	;'d'
  2621  00FFC0  2E                 	db	46
  2622  00FFC1  25                 	db	37
  2623  00FFC2  31                 	db	49	;'1'
  2624  00FFC3  64                 	db	100	;'d'
  2625  00FFC4  87                 	db	-121
  2626  00FFC5  00                 	db	0
  2627  00FFC6                     STR_34:
  2628                           
  2629                           ; BSR set to: 2
  2630  00FFC6  28                 	db	40
  2631  00FFC7  6E                 	db	110	;'n'
  2632  00FFC8  75                 	db	117	;'u'
  2633  00FFC9  6C                 	db	108	;'l'
  2634  00FFCA  6C                 	db	108	;'l'
  2635  00FFCB  29                 	db	41
  2636  00FFCC  00                 	db	0
  2637  00FFCD                     STR_15:
  2638                           
  2639                           ; BSR set to: 2
  2640  00FFCD  24                 	db	36
  2641  00FFCE  47                 	db	71	;'G'
  2642  00FFCF  50                 	db	80	;'P'
  2643  00FFD0  52                 	db	82	;'R'
  2644  00FFD1  4D                 	db	77	;'M'
  2645  00FFD2  43                 	db	67	;'C'
  2646  00FFD3  00                 	db	0
  2647  00FFD4                     STR_12:
  2648                           
  2649                           ; BSR set to: 2
  2650  00FFD4  32                 	db	50	;'2'
  2651  00FFD5  30                 	db	48	;'0'
  2652  00FFD6  25                 	db	37
  2653  00FFD7  30                 	db	48	;'0'
  2654  00FFD8  32                 	db	50	;'2'
  2655  00FFD9  78                 	db	120	;'x'
  2656  00FFDA  00                 	db	0
  2657  00FFDB                     STR_33:
  2658                           
  2659                           ; BSR set to: 2
  2660  00FFDB  25                 	db	37
  2661  00FFDC  32                 	db	50	;'2'
  2662  00FFDD  64                 	db	100	;'d'
  2663  00FFDE  25                 	db	37
  2664  00FFDF  25                 	db	37
  2665  00FFE0  00                 	db	0
  2666  00FFE1                     STR_6:
  2667                           
  2668                           ; BSR set to: 2
  2669  00FFE1  46                 	db	70	;'F'
  2670  00FFE2  41                 	db	65	;'A'
  2671  00FFE3  54                 	db	84	;'T'
  2672  00FFE4  33                 	db	51	;'3'
  2673  00FFE5  32                 	db	50	;'2'
  2674  00FFE6  00                 	db	0
  2675  00FFE7                     STR_23:
  2676                           
  2677                           ; BSR set to: 2
  2678  00FFE7  25                 	db	37
  2679  00FFE8  32                 	db	50	;'2'
  2680  00FFE9  64                 	db	100	;'d'
  2681  00FFEA  00                 	db	0
  2682  00FFEB                     STR_5:
  2683                           
  2684                           ; BSR set to: 2
  2685  00FFEB  46                 	db	70	;'F'
  2686  00FFEC  41                 	db	65	;'A'
  2687  00FFED  54                 	db	84	;'T'
  2688  00FFEE  00                 	db	0
  2689  00FFEF                     STR_19:
  2690                           
  2691                           ; BSR set to: 2
  2692  00FFEF  41                 	db	65	;'A'
  2693  00FFF0  4D                 	db	77	;'M'
  2694  00FFF1  00                 	db	0
  2695  00FFF2                     STR_20:
  2696                           
  2697                           ; BSR set to: 2
  2698  00FFF2  50                 	db	80	;'P'
  2699  00FFF3  4D                 	db	77	;'M'
  2700  00FFF4  00                 	db	0
  2701  00FFF5                     STR_22:
  2702                           
  2703                           ; BSR set to: 2
  2704  00FFF5  25                 	db	37
  2705  00FFF6  63                 	db	99	;'c'
  2706  00FFF7  00                 	db	0
  2707  00FFF8                     STR_18:
  2708                           
  2709                           ; BSR set to: 2
  2710  00FFF8  25                 	db	37
  2711  00FFF9  64                 	db	100	;'d'
  2712  00FFFA  00                 	db	0
  2713  00FFFB                     STR_1:
  2714                           
  2715                           ; BSR set to: 2
  2716  00FFFB  30                 	db	48	;'0'
  2717  00FFFC  3A                 	db	58	;':'
  2718  00FFFD  00                 	db	0
  2719  00FFFE  00                 	db	0	; dummy byte at the end
  2720  0000                     
  2721                           	psect	nvBANK3
  2722  0003FD                     __pnvBANK3:
  2723                           	callstack 0
  2724  0003FD                     _IOCB4_InterruptHandler:
  2725                           	callstack 0
  2726  0003FD                     	ds	2
  2727  0000                     _TMR5	set	3919
  2728  0000                     _CCPTMRS1bits	set	3912
  2729  0000                     _CCPR5H	set	3926
  2730  0000                     _CCPR5L	set	3925
  2731  0000                     _CCP5CON	set	3924
  2732  0000                     _T5CONbits	set	3918
  2733  0000                     _T5CON	set	3918
  2734  0000                     _TMR5L	set	3919
  2735  0000                     _TMR5H	set	3920
  2736  0000                     _T5GCON	set	3917
  2737  0000                     _CCPTMRS0bits	set	3913
  2738  0000                     _T6CON	set	3914
  2739  0000                     _TMR6	set	3916
  2740  0000                     _PR6	set	3915
  2741  0000                     _ANSELA	set	3896
  2742  0000                     _ANSELB	set	3897
  2743  0000                     _ANSELC	set	3898
  2744  0000                     _TMR1	set	4046
  2745  0000                     _TMR3	set	4018
  2746  0000                     _LATBbits	set	3978
  2747  0000                     _TRISBbits	set	3987
  2748  0000                     _PORTCbits	set	3970
  2749  0000                     _PORTBbits	set	3969
  2750  0000                     _PORTAbits	set	3968
  2751  0000                     _PIE3bits	set	4003
  2752  0000                     _PIR3bits	set	4004
  2753  0000                     _SSP2CON2bits	set	3947
  2754  0000                     _SSP2BUF	set	3951
  2755  0000                     _SSP2CON1bits	set	3948
  2756  0000                     _SSP2ADD	set	3950
  2757  0000                     _SSP2CON2	set	3947
  2758  0000                     _SSP2CON1	set	3948
  2759  0000                     _SSP2STAT	set	3949
  2760  0000                     _CCPR1L	set	4030
  2761  0000                     _CCPR1H	set	4031
  2762  0000                     _PSTR1CON	set	4025
  2763  0000                     _PWM1CON	set	4023
  2764  0000                     _ECCP1AS	set	4022
  2765  0000                     _CCP1CON	set	4029
  2766  0000                     _SSP1BUF	set	4041
  2767  0000                     _SSP1CON2	set	4037
  2768  0000                     _SSP1CON1bits	set	4038
  2769  0000                     _TRISCbits	set	3988
  2770  0000                     _SSP1ADD	set	4040
  2771  0000                     _SSP1CON1	set	4038
  2772  0000                     _SSP1STAT	set	4039
  2773  0000                     _T1CONbits	set	4045
  2774  0000                     _T1CON	set	4045
  2775  0000                     _TMR1L	set	4046
  2776  0000                     _TMR1H	set	4047
  2777  0000                     _T1GCON	set	4044
  2778  0000                     _T3CON	set	4017
  2779  0000                     _TMR3L	set	4018
  2780  0000                     _TMR3H	set	4019
  2781  0000                     _T3GCON	set	4020
  2782  0000                     _PIR2bits	set	4001
  2783  0000                     _EEDATA	set	4008
  2784  0000                     _EEADR	set	4009
  2785  0000                     _EEADRH	set	4010
  2786  0000                     _EECON2	set	4007
  2787  0000                     _EECON1bits	set	4006
  2788  0000                     _RCREG1	set	4014
  2789  0000                     _RCSTA1bits	set	4011
  2790  0000                     _SPBRGH1	set	4016
  2791  0000                     _SPBRG1	set	4015
  2792  0000                     _TXSTA1	set	4012
  2793  0000                     _RCSTA1	set	4011
  2794  0000                     _BAUDCON1	set	4024
  2795  0000                     _CCPR2L	set	3943
  2796  0000                     _CCPR2H	set	3944
  2797  0000                     _PSTR2CON	set	3939
  2798  0000                     _PWM2CON	set	3941
  2799  0000                     _ECCP2AS	set	3940
  2800  0000                     _CCP2CON	set	3942
  2801  0000                     _PIE5bits	set	3965
  2802  0000                     _PIE1bits	set	3997
  2803  0000                     _RCONbits	set	4048
  2804  0000                     _T0CON	set	4053
  2805  0000                     _TMR0L	set	4054
  2806  0000                     _TMR0H	set	4055
  2807  0000                     _T0CONbits	set	4053
  2808  0000                     _T2CONbits	set	4026
  2809  0000                     _T2CON	set	4026
  2810  0000                     _PIR1bits	set	3998
  2811  0000                     _TMR2	set	4028
  2812  0000                     _PR2	set	4027
  2813  0000                     _PIR5bits	set	3966
  2814  0000                     _OSCTUNE	set	3995
  2815  0000                     _OSCCON2	set	4050
  2816  0000                     _OSCCON	set	4051
  2817  0000                     _INTCONbits	set	4082
  2818  0000                     _IOCBbits	set	3938
  2819  0000                     _INTCON2bits	set	4081
  2820  0000                     _WPUB	set	3937
  2821  0000                     _TRISC	set	3988
  2822  0000                     _TRISB	set	3987
  2823  0000                     _TRISA	set	3986
  2824  0000                     _LATC	set	3979
  2825  0000                     _LATB	set	3978
  2826  0000                     _LATA	set	3977
  2827  0000                     _ADCON0bits	set	4034
  2828  0000                     _ADCON0	set	4034
  2829  0000                     _ADRESH	set	4036
  2830  0000                     _ADRESL	set	4035
  2831  0000                     _ADCON2	set	4032
  2832  0000                     _ADCON1	set	4033
  2833  0000                     _LATAbits	set	3977
  2834  0000                     _PLLRDY	set	32407
  2835                           
  2836                           ; #config settings
  2837                           
  2838                           	psect	cinit
  2839  00B188                     __pcinit:
  2840                           	callstack 0
  2841  00B188                     start_initialization:
  2842                           	callstack 0
  2843  00B188                     __initialization:
  2844                           	callstack 0
  2845                           
  2846                           ; Initialize objects allocated to BANK6 (28 bytes)
  2847                           ; load TBLPTR registers with __pidataBANK6
  2848  00B188  0E0E               	movlw	low __pidataBANK6
  2849  00B18A  6EF6               	movwf	tblptrl,c
  2850  00B18C  0EF4               	movlw	high __pidataBANK6
  2851  00B18E  6EF7               	movwf	tblptrh,c
  2852  00B190  0E00               	movlw	low (__pidataBANK6 shr (0+16))
  2853  00B192  6EF8               	movwf	tblptru,c
  2854  00B194  EE06  F0E1         	lfsr	0,__pdataBANK6
  2855  00B198  EE10 F01C          	lfsr	1,28
  2856  00B19C                     copy_data0:
  2857  00B19C  0009               	tblrd		*+
  2858  00B19E  CFF5 FFEE          	movff	tablat,postinc0
  2859  00B1A2  50E5               	movf	postdec1,w,c
  2860  00B1A4  50E1               	movf	fsr1l,w,c
  2861  00B1A6  E1FA               	bnz	copy_data0
  2862                           
  2863                           ; Initialize objects allocated to BANK5 (210 bytes)
  2864                           ; load TBLPTR registers with __pidataBANK5
  2865  00B1A8  0E2B               	movlw	low __pidataBANK5
  2866  00B1AA  6EF6               	movwf	tblptrl,c
  2867  00B1AC  0EC5               	movlw	high __pidataBANK5
  2868  00B1AE  6EF7               	movwf	tblptrh,c
  2869  00B1B0  0E00               	movlw	low (__pidataBANK5 shr (0+16))
  2870  00B1B2  6EF8               	movwf	tblptru,c
  2871  00B1B4  EE05  F000         	lfsr	0,__pdataBANK5
  2872  00B1B8  EE10 F0D2          	lfsr	1,210
  2873  00B1BC                     copy_data1:
  2874  00B1BC  0009               	tblrd		*+
  2875  00B1BE  CFF5 FFEE          	movff	tablat,postinc0
  2876  00B1C2  50E5               	movf	postdec1,w,c
  2877  00B1C4  50E1               	movf	fsr1l,w,c
  2878  00B1C6  E1FA               	bnz	copy_data1
  2879                           
  2880                           ; Initialize objects allocated to BANK4 (211 bytes)
  2881                           ; load TBLPTR registers with __pidataBANK4
  2882  00B1C8  0E58               	movlw	low __pidataBANK4
  2883  00B1CA  6EF6               	movwf	tblptrl,c
  2884  00B1CC  0EC4               	movlw	high __pidataBANK4
  2885  00B1CE  6EF7               	movwf	tblptrh,c
  2886  00B1D0  0E00               	movlw	low (__pidataBANK4 shr (0+16))
  2887  00B1D2  6EF8               	movwf	tblptru,c
  2888  00B1D4  EE04  F000         	lfsr	0,__pdataBANK4
  2889  00B1D8  EE10 F0D3          	lfsr	1,211
  2890  00B1DC                     copy_data2:
  2891  00B1DC  0009               	tblrd		*+
  2892  00B1DE  CFF5 FFEE          	movff	tablat,postinc0
  2893  00B1E2  50E5               	movf	postdec1,w,c
  2894  00B1E4  50E1               	movf	fsr1l,w,c
  2895  00B1E6  E1FA               	bnz	copy_data2
  2896                           
  2897                           ; Initialize objects allocated to BANK3 (51 bytes)
  2898                           ; load TBLPTR registers with __pidataBANK3
  2899  00B1E8  0E3C               	movlw	low __pidataBANK3
  2900  00B1EA  6EF6               	movwf	tblptrl,c
  2901  00B1EC  0EEE               	movlw	high __pidataBANK3
  2902  00B1EE  6EF7               	movwf	tblptrh,c
  2903  00B1F0  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  2904  00B1F2  6EF8               	movwf	tblptru,c
  2905  00B1F4  EE03  F0CA         	lfsr	0,__pdataBANK3
  2906  00B1F8  EE10 F033          	lfsr	1,51
  2907  00B1FC                     copy_data3:
  2908  00B1FC  0009               	tblrd		*+
  2909  00B1FE  CFF5 FFEE          	movff	tablat,postinc0
  2910  00B202  50E5               	movf	postdec1,w,c
  2911  00B204  50E1               	movf	fsr1l,w,c
  2912  00B206  E1FA               	bnz	copy_data3
  2913                           
  2914                           ; Initialize objects allocated to BANK2 (16 bytes)
  2915                           ; load TBLPTR registers with __pidataBANK2
  2916  00B208  0EDA               	movlw	low __pidataBANK2
  2917  00B20A  6EF6               	movwf	tblptrl,c
  2918  00B20C  0EF5               	movlw	high __pidataBANK2
  2919  00B20E  6EF7               	movwf	tblptrh,c
  2920  00B210  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  2921  00B212  6EF8               	movwf	tblptru,c
  2922  00B214  EE02  F0F0         	lfsr	0,__pdataBANK2
  2923  00B218  EE10 F010          	lfsr	1,16
  2924  00B21C                     copy_data4:
  2925  00B21C  0009               	tblrd		*+
  2926  00B21E  CFF5 FFEE          	movff	tablat,postinc0
  2927  00B222  50E5               	movf	postdec1,w,c
  2928  00B224  50E1               	movf	fsr1l,w,c
  2929  00B226  E1FA               	bnz	copy_data4
  2930                           
  2931                           ; Initialize objects allocated to COMRAM (3 bytes)
  2932                           ; load TBLPTR registers with __pidataCOMRAM
  2933  00B228  0E52               	movlw	low __pidataCOMRAM
  2934  00B22A  6EF6               	movwf	tblptrl,c
  2935  00B22C  0EF8               	movlw	high __pidataCOMRAM
  2936  00B22E  6EF7               	movwf	tblptrh,c
  2937  00B230  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2938  00B232  6EF8               	movwf	tblptru,c
  2939  00B234  0009               	tblrd		*+	;fetch initializer
  2940  00B236  CFF5 F04F          	movff	tablat,__pdataCOMRAM
  2941  00B23A  0009               	tblrd		*+	;fetch initializer
  2942  00B23C  CFF5 F050          	movff	tablat,__pdataCOMRAM+1
  2943  00B240  0009               	tblrd		*+	;fetch initializer
  2944  00B242  CFF5 F051          	movff	tablat,__pdataCOMRAM+2
  2945                           
  2946                           ; Clear objects allocated to BIGRAM (1118 bytes)
  2947  00B246  EE07  F040         	lfsr	0,__pbssBIGRAM
  2948  00B24A  EE14 F05E          	lfsr	1,1118
  2949  00B24E                     clear_0:
  2950  00B24E  6AEE               	clrf	postinc0,c
  2951  00B250  50E5               	movf	postdec1,w,c
  2952  00B252  50E1               	movf	fsr1l,w,c
  2953  00B254  E1FC               	bnz	clear_0
  2954  00B256  50E2               	movf	fsr1h,w,c
  2955  00B258  E1FA               	bnz	clear_0
  2956                           
  2957                           ; Clear objects allocated to BANK7 (64 bytes)
  2958  00B25A  EE07  F000         	lfsr	0,__pbssBANK7
  2959  00B25E  0E40               	movlw	64
  2960  00B260                     clear_1:
  2961  00B260  6AEE               	clrf	postinc0,c
  2962  00B262  06E8               	decf	wreg,f,c
  2963  00B264  E1FD               	bnz	clear_1
  2964                           
  2965                           ; Clear objects allocated to BANK6 (225 bytes)
  2966  00B266  EE06  F000         	lfsr	0,__pbssBANK6
  2967  00B26A  0EE1               	movlw	225
  2968  00B26C                     clear_2:
  2969  00B26C  6AEE               	clrf	postinc0,c
  2970  00B26E  06E8               	decf	wreg,f,c
  2971  00B270  E1FD               	bnz	clear_2
  2972                           
  2973                           ; Clear objects allocated to BANK5 (34 bytes)
  2974  00B272  EE05  F0D2         	lfsr	0,__pbssBANK5
  2975  00B276  0E22               	movlw	34
  2976  00B278                     clear_3:
  2977  00B278  6AEE               	clrf	postinc0,c
  2978  00B27A  06E8               	decf	wreg,f,c
  2979  00B27C  E1FD               	bnz	clear_3
  2980                           
  2981                           ; Clear objects allocated to BANK4 (36 bytes)
  2982  00B27E  EE04  F0D3         	lfsr	0,__pbssBANK4
  2983  00B282  0E24               	movlw	36
  2984  00B284                     clear_4:
  2985  00B284  6AEE               	clrf	postinc0,c
  2986  00B286  06E8               	decf	wreg,f,c
  2987  00B288  E1FD               	bnz	clear_4
  2988                           
  2989                           ; Clear objects allocated to BANK3 (202 bytes)
  2990  00B28A  EE03  F000         	lfsr	0,__pbssBANK3
  2991  00B28E  0ECA               	movlw	202
  2992  00B290                     clear_5:
  2993  00B290  6AEE               	clrf	postinc0,c
  2994  00B292  06E8               	decf	wreg,f,c
  2995  00B294  E1FD               	bnz	clear_5
  2996                           
  2997                           ; Clear objects allocated to BANK2 (21 bytes)
  2998  00B296  EE02  F0DB         	lfsr	0,__pbssBANK2
  2999  00B29A  0E15               	movlw	21
  3000  00B29C                     clear_6:
  3001  00B29C  6AEE               	clrf	postinc0,c
  3002  00B29E  06E8               	decf	wreg,f,c
  3003  00B2A0  E1FD               	bnz	clear_6
  3004                           
  3005                           ; Clear objects allocated to BANK0 (1 bytes)
  3006  00B2A2  0100               	movlb	0
  3007  00B2A4  6BFF               	clrf	__pbssBANK0& (0+255),b
  3008                           
  3009                           ; Clear objects allocated to COMRAM (9 bytes)
  3010  00B2A6  EE00  F046         	lfsr	0,__pbssCOMRAM
  3011  00B2AA  0E09               	movlw	9
  3012  00B2AC                     clear_7:
  3013  00B2AC  6AEE               	clrf	postinc0,c
  3014  00B2AE  06E8               	decf	wreg,f,c
  3015  00B2B0  E1FD               	bnz	clear_7
  3016  00B2B2                     end_of_initialization:
  3017                           	callstack 0
  3018  00B2B2                     __end_of__initialization:
  3019                           	callstack 0
  3020  00B2B2  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3021  00B2B4  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3022  00B2B6  0100               	movlb	0
  3023  00B2B8  EFF1  F036         	goto	_main	;jump to C main() function
  3024                           
  3025                           	psect	bssCOMRAM
  3026  000046                     __pbssCOMRAM:
  3027                           	callstack 0
  3028  000046                     _timer0ReloadVal:
  3029                           	callstack 0
  3030  000046                     	ds	2
  3031  000048                     _SoundNum:
  3032                           	callstack 0
  3033  000048                     	ds	1
  3034  000049                     _SoundDataPos:
  3035                           	callstack 0
  3036  000049                     	ds	1
  3037  00004A                     _eusart1RxTail:
  3038                           	callstack 0
  3039  00004A                     	ds	1
  3040  00004B                     _eusart1RxHead:
  3041                           	callstack 0
  3042  00004B                     	ds	1
  3043  00004C                     _TouchStatus:
  3044                           	callstack 0
  3045  00004C                     	ds	1
  3046  00004D                     _T_x1:
  3047                           	callstack 0
  3048  00004D                     	ds	2
  3049                           
  3050                           	psect	dataCOMRAM
  3051  00004F                     __pdataCOMRAM:
  3052                           	callstack 0
  3053  00004F                     _RTC_regF:
  3054                           	callstack 0
  3055  00004F                     	ds	1
  3056  000050                     _Textsize:
  3057                           	callstack 0
  3058  000050                     	ds	1
  3059  000051                     _SlideSWStatus:
  3060                           	callstack 0
  3061  000051                     	ds	1
  3062                           
  3063                           	psect	bssBANK0
  3064  0000FF                     __pbssBANK0:
  3065                           	callstack 0
  3066  0000FF                     _RTC_regE:
  3067                           	callstack 0
  3068  0000FF                     	ds	1
  3069                           
  3070                           	psect	bssBANK2
  3071  0002DB                     __pbssBANK2:
  3072                           	callstack 0
  3073  0002DB                     _Cursor_y:
  3074                           	callstack 0
  3075  0002DB                     	ds	2
  3076  0002DD                     _Cursor_x:
  3077                           	callstack 0
  3078  0002DD                     	ds	2
  3079  0002DF                     _GetGPS:
  3080                           	callstack 0
  3081  0002DF                     	ds	1
  3082  0002E0                     _Count1PPS:
  3083                           	callstack 0
  3084  0002E0                     	ds	1
  3085  0002E1                     _RotCount:
  3086                           	callstack 0
  3087  0002E1                     	ds	1
  3088  0002E2                     _DisplayMode:
  3089                           	callstack 0
  3090  0002E2                     	ds	1
  3091  0002E3                     _Mode:
  3092                           	callstack 0
  3093  0002E3                     	ds	1
  3094  0002E4                     _eusart1RxCount:
  3095                           	callstack 0
  3096  0002E4                     	ds	1
  3097  0002E5                     SD_SPI_AsyncWriteTasks@command:
  3098                           	callstack 0
  3099  0002E5                     	ds	1
  3100  0002E6                     _T_y2:
  3101                           	callstack 0
  3102  0002E6                     	ds	2
  3103  0002E8                     _T_x2:
  3104                           	callstack 0
  3105  0002E8                     	ds	2
  3106  0002EA                     _T_y1:
  3107                           	callstack 0
  3108  0002EA                     	ds	2
  3109  0002EC                     _Test_y:
  3110                           	callstack 0
  3111  0002EC                     	ds	2
  3112  0002EE                     _Test_x:
  3113                           	callstack 0
  3114  0002EE                     	ds	2
  3115                           
  3116                           	psect	dataBANK2
  3117  0002F0                     __pdataBANK2:
  3118                           	callstack 0
  3119  0002F0                     _BackLight:
  3120                           	callstack 0
  3121  0002F0                     	ds	2
  3122  0002F2                     RotaryHandler@RotA_status:
  3123                           	callstack 0
  3124  0002F2                     	ds	1
  3125  0002F3                     Timer5Handler@slideSW_status:
  3126                           	callstack 0
  3127  0002F3                     	ds	1
  3128  0002F4                     Timer5Handler@touch_status:
  3129                           	callstack 0
  3130  0002F4                     	ds	1
  3131  0002F5                     _Accel:
  3132                           	callstack 0
  3133  0002F5                     	ds	1
  3134  0002F6                     _DateTime:
  3135                           	callstack 0
  3136  0002F6                     	ds	7
  3137  0002FD                     _AlarmTime:
  3138                           	callstack 0
  3139  0002FD                     	ds	3
  3140                           
  3141                           	psect	bssBANK3
  3142  000300                     __pbssBANK3:
  3143                           	callstack 0
  3144  000300                     _ioInfo:
  3145                           	callstack 0
  3146  000300                     	ds	13
  3147  00030D                     DrawAnalogClock@pay:
  3148                           	callstack 0
  3149  00030D                     	ds	10
  3150  000317                     DrawAnalogClock@pax:
  3151                           	callstack 0
  3152  000317                     	ds	10
  3153  000321                     DrawAnalogClock@psy:
  3154                           	callstack 0
  3155  000321                     	ds	10
  3156  00032B                     DrawAnalogClock@psx:
  3157                           	callstack 0
  3158  00032B                     	ds	10
  3159  000335                     DrawAnalogClock@pmy:
  3160                           	callstack 0
  3161  000335                     	ds	10
  3162  00033F                     DrawAnalogClock@pmx:
  3163                           	callstack 0
  3164  00033F                     	ds	10
  3165  000349                     DrawAnalogClock@phy:
  3166                           	callstack 0
  3167  000349                     	ds	10
  3168  000353                     DrawAnalogClock@phx:
  3169                           	callstack 0
  3170  000353                     	ds	10
  3171  00035D                     _timezone:
  3172                           	callstack 0
  3173  00035D                     	ds	4
  3174  000361                     SD_SPI_AsyncWriteTasks@WriteTimeout:
  3175                           	callstack 0
  3176  000361                     	ds	4
  3177  000365                     SD_SPI_AsyncReadTasks@longTimeoutCounter:
  3178                           	callstack 0
  3179  000365                     	ds	4
  3180  000369                     _AlarmColor:
  3181                           	callstack 0
  3182  000369                     	ds	4
  3183  00036D                     _preDateTime:
  3184                           	callstack 0
  3185  00036D                     	ds	3
  3186  000370                     _time_zone:
  3187                           	callstack 0
  3188  000370                     	ds	2
  3189  000372                     _global_bg_color:
  3190                           	callstack 0
  3191  000372                     	ds	2
  3192  000374                     _SoundTime:
  3193                           	callstack 0
  3194  000374                     	ds	2
  3195  000376                     _BufferP:
  3196                           	callstack 0
  3197  000376                     	ds	2
  3198  000378                     _Brightness:
  3199                           	callstack 0
  3200  000378                     	ds	2
  3201  00037A                     _BackColor:
  3202                           	callstack 0
  3203  00037A                     	ds	2
  3204  00037C                     _TMR1_InterruptHandler:
  3205                           	callstack 0
  3206  00037C                     	ds	2
  3207  00037E                     _timer1ReloadVal:
  3208                           	callstack 0
  3209  00037E                     	ds	2
  3210  000380                     _timer3ReloadVal:
  3211                           	callstack 0
  3212  000380                     	ds	2
  3213  000382                     _TMR5_InterruptHandler:
  3214                           	callstack 0
  3215  000382                     	ds	2
  3216  000384                     _timer5ReloadVal:
  3217                           	callstack 0
  3218  000384                     	ds	2
  3219  000386                     _EUSART1_ErrorHandler:
  3220                           	callstack 0
  3221  000386                     	ds	2
  3222  000388                     _EUSART1_OverrunErrorHandler:
  3223                           	callstack 0
  3224  000388                     	ds	2
  3225  00038A                     _EUSART1_FramingErrorHandler:
  3226                           	callstack 0
  3227  00038A                     	ds	2
  3228  00038C                     _INT0_InterruptHandler:
  3229                           	callstack 0
  3230  00038C                     	ds	2
  3231  00038E                     _EUSART1_RxDefaultInterruptHandler:
  3232                           	callstack 0
  3233  00038E                     	ds	2
  3234  000390                     _TMR0_InterruptHandler:
  3235                           	callstack 0
  3236  000390                     	ds	2
  3237  000392                     _ADC_InterruptHandler:
  3238                           	callstack 0
  3239  000392                     	ds	2
  3240  000394                     SD_SPI_AsyncWriteTasks@blockCounter:
  3241                           	callstack 0
  3242  000394                     	ds	2
  3243  000396                     SD_SPI_AsyncReadTasks@blockCounter:
  3244                           	callstack 0
  3245  000396                     	ds	2
  3246  000398                     _Fsid:
  3247                           	callstack 0
  3248  000398                     	ds	2
  3249  00039A                     _FatFs:
  3250                           	callstack 0
  3251  00039A                     	ds	2
  3252  00039C                     _SoundCount:
  3253                           	callstack 0
  3254  00039C                     	ds	1
  3255  00039D                     SettingProc@changeTime:
  3256                           	callstack 0
  3257  00039D                     	ds	1
  3258  00039E                     RotaryHandler@Bdata:
  3259                           	callstack 0
  3260  00039E                     	ds	1
  3261  00039F                     RotaryHandler@StartRot:
  3262                           	callstack 0
  3263  00039F                     	ds	1
  3264  0003A0                     _MountDone:
  3265                           	callstack 0
  3266  0003A0                     	ds	1
  3267  0003A1                     _SDcardStatus:
  3268                           	callstack 0
  3269  0003A1                     	ds	1
  3270  0003A2                     _SmoothCount:
  3271                           	callstack 0
  3272  0003A2                     	ds	1
  3273  0003A3                     _AlarmStatus:
  3274                           	callstack 0
  3275  0003A3                     	ds	1
  3276  0003A4                     _TouchCount:
  3277                           	callstack 0
  3278  0003A4                     	ds	1
  3279  0003A5                     _UpdateFlag:
  3280                           	callstack 0
  3281  0003A5                     	ds	1
  3282  0003A6                     _eusart1RxLastError:
  3283                           	callstack 0
  3284  0003A6                     	ds	1
  3285  0003A7                     SD_SPI_AsyncWriteTasks@data_byte:
  3286                           	callstack 0
  3287  0003A7                     	ds	1
  3288  0003A8                     SD_SPI_AsyncReadTasks@SingleBlockRead:
  3289                           	callstack 0
  3290  0003A8                     	ds	1
  3291  0003A9                     gmtime@tim:
  3292                           	callstack 0
  3293  0003A9                     	ds	18
  3294  0003BB                     _TmpTime:
  3295                           	callstack 0
  3296  0003BB                     	ds	7
  3297  0003C2                     _Humidity:
  3298                           	callstack 0
  3299  0003C2                     	ds	2
  3300  0003C4                     _Temp:
  3301                           	callstack 0
  3302  0003C4                     	ds	2
  3303  0003C6                     _TouchY:
  3304                           	callstack 0
  3305  0003C6                     	ds	2
  3306  0003C8                     _TouchX:
  3307                           	callstack 0
  3308  0003C8                     	ds	2
  3309                           
  3310                           	psect	dataBANK3
  3311  0003CA                     __pdataBANK3:
  3312                           	callstack 0
  3313  0003CA                     	ds	13
  3314  0003D7                     _mediaInformation:
  3315                           	callstack 0
  3316  0003D7                     	ds	9
  3317  0003E0                     _Font:
  3318                           	callstack 0
  3319  0003E0                     	ds	7
  3320  0003E7                     drawAlarmTime@F6643:
  3321                           	callstack 0
  3322  0003E7                     	ds	6
  3323  0003ED                     get_tempHumidity@F6337:
  3324                           	callstack 0
  3325  0003ED                     	ds	3
  3326  0003F0                     _Textbgcolor:
  3327                           	callstack 0
  3328  0003F0                     	ds	2
  3329  0003F2                     _Textcolor:
  3330                           	callstack 0
  3331  0003F2                     	ds	2
  3332  0003F4                     _FrontColor:
  3333                           	callstack 0
  3334  0003F4                     	ds	2
  3335  0003F6                     _wrap:
  3336                           	callstack 0
  3337  0003F6                     	ds	1
  3338  0003F7                     Timer5Handler@G1PPS_status:
  3339                           	callstack 0
  3340  0003F7                     	ds	1
  3341  0003F8                     _FirstDraw:
  3342                           	callstack 0
  3343  0003F8                     	ds	1
  3344  0003F9                     _SmoothAlarmTime:
  3345                           	callstack 0
  3346  0003F9                     	ds	3
  3347  0003FC                     _CT2_0:
  3348                           	callstack 0
  3349  0003FC                     	ds	1
  3350                           
  3351                           	psect	bssBANK4
  3352  0004D3                     __pbssBANK4:
  3353                           	callstack 0
  3354  0004D3                     _I2C2_Status:
  3355                           	callstack 0
  3356  0004D3                     	ds	36
  3357                           
  3358                           	psect	dataBANK4
  3359  000400                     __pdataBANK4:
  3360                           	callstack 0
  3361  000400                     _ButtonObj3:
  3362                           	callstack 0
  3363  000400                     	ds	70
  3364  000446                     _RThisMonthCalendar:
  3365                           	callstack 0
  3366  000446                     	ds	30
  3367  000464                     _RAlarm:
  3368                           	callstack 0
  3369  000464                     	ds	30
  3370  000482                     _RDate:
  3371                           	callstack 0
  3372  000482                     	ds	30
  3373  0004A0                     _RTime:
  3374                           	callstack 0
  3375  0004A0                     	ds	30
  3376  0004BE                     _SoundData:
  3377                           	callstack 0
  3378  0004BE                     	ds	21
  3379                           
  3380                           	psect	bssBANK5
  3381  0005D2                     __pbssBANK5:
  3382                           	callstack 0
  3383  0005D2                     _file:
  3384                           	callstack 0
  3385  0005D2                     	ds	34
  3386                           
  3387                           	psect	dataBANK5
  3388  000500                     __pdataBANK5:
  3389                           	callstack 0
  3390  000500                     _RPostMonthCalendar:
  3391                           	callstack 0
  3392  000500                     	ds	30
  3393  00051E                     _RPrevMonthCalendar:
  3394                           	callstack 0
  3395  00051E                     	ds	30
  3396  00053C                     _RHumidity:
  3397                           	callstack 0
  3398  00053C                     	ds	30
  3399  00055A                     _RTemp:
  3400                           	callstack 0
  3401  00055A                     	ds	30
  3402  000578                     _RDay:
  3403                           	callstack 0
  3404  000578                     	ds	30
  3405  000596                     _RMonth:
  3406                           	callstack 0
  3407  000596                     	ds	30
  3408  0005B4                     _RYear:
  3409                           	callstack 0
  3410  0005B4                     	ds	30
  3411                           
  3412                           	psect	bssBANK6
  3413  000600                     __pbssBANK6:
  3414                           	callstack 0
  3415  000600                     _eusart1RxStatusBuffer:
  3416                           	callstack 0
  3417  000600                     	ds	64
  3418  000640                     _Buffer:
  3419                           	callstack 0
  3420  000640                     	ds	100
  3421  0006A4                     _file@fatfs_demo$F388:
  3422                           	callstack 0
  3423  0006A4                     	ds	34
  3424  0006C6                     asctime@buf:
  3425                           	callstack 0
  3426  0006C6                     	ds	27
  3427                           
  3428                           	psect	dataBANK6
  3429  0006E1                     __pdataBANK6:
  3430                           	callstack 0
  3431  0006E1                     _WeekDays:
  3432                           	callstack 0
  3433  0006E1                     	ds	28
  3434                           
  3435                           	psect	bssBANK7
  3436  000700                     __pbssBANK7:
  3437                           	callstack 0
  3438  000700                     _eusart1RxBuffer:
  3439                           	callstack 0
  3440  000700                     	ds	64
  3441                           
  3442                           	psect	bssBIGRAM
  3443  000740                     __pbssBIGRAM:
  3444                           	callstack 0
  3445  000740                     _drive:
  3446                           	callstack 0
  3447  000740                     	ds	559
  3448  00096F                     _drive@fatfs_demo$F369:
  3449                           	callstack 0
  3450  00096F                     	ds	559
  3451                           
  3452                           	psect	cstackBANK3
  3453  0003FF                     __pcstackBANK3:
  3454                           	callstack 0
  3455  0003FF                     main@jj:
  3456                           	callstack 0
  3457                           
  3458                           ; 1 bytes @ 0x0
  3459  0003FF                     	ds	1
  3460                           
  3461                           	psect	cstackBANK2
  3462  000200                     __pcstackBANK2:
  3463                           	callstack 0
  3464  000200                     drawAlarmTime@str:
  3465                           	callstack 0
  3466                           
  3467                           ; 100 bytes @ 0x0
  3468  000200                     	ds	100
  3469  000264                     drawAlarmTime@ampm:
  3470                           	callstack 0
  3471                           
  3472                           ; 6 bytes @ 0x64
  3473  000264                     	ds	6
  3474  00026A                     _drawAlarmTime$8866:
  3475                           	callstack 0
  3476                           
  3477                           ; 2 bytes @ 0x6A
  3478  00026A                     	ds	2
  3479  00026C                     drawAlarmTime@ap:
  3480                           	callstack 0
  3481                           
  3482                           ; 1 bytes @ 0x6C
  3483  00026C                     	ds	1
  3484  00026D                     drawAlarmTime@mode:
  3485                           	callstack 0
  3486                           
  3487                           ; 1 bytes @ 0x6D
  3488  00026D                     	ds	1
  3489  00026E                     NormalProc@str:
  3490                           	callstack 0
  3491                           
  3492                           ; 100 bytes @ 0x6E
  3493  00026E                     	ds	100
  3494  0002D2                     NormalProc@actualLength:
  3495                           	callstack 0
  3496                           
  3497                           ; 2 bytes @ 0xD2
  3498  0002D2                     	ds	2
  3499  0002D4                     NormalProc@jj:
  3500                           	callstack 0
  3501                           
  3502                           ; 1 bytes @ 0xD4
  3503  0002D4                     	ds	1
  3504  0002D5                     NormalProc@newBL:
  3505                           	callstack 0
  3506                           
  3507                           ; 2 bytes @ 0xD5
  3508  0002D5                     	ds	2
  3509  0002D7                     NormalProc@hh:
  3510                           	callstack 0
  3511                           
  3512                           ; 1 bytes @ 0xD7
  3513  0002D7                     	ds	1
  3514  0002D8                     NormalProc@delta:
  3515                           	callstack 0
  3516                           
  3517                           ; 2 bytes @ 0xD8
  3518  0002D8                     	ds	2
  3519  0002DA                     NormalProc@mm:
  3520                           	callstack 0
  3521                           
  3522                           ; 1 bytes @ 0xDA
  3523  0002DA                     	ds	1
  3524                           
  3525                           	psect	cstackBANK1
  3526  000100                     __pcstackBANK1:
  3527                           	callstack 0
  3528  000100                     ??_follow_path:
  3529  000100                     dir_register@dp:
  3530                           	callstack 0
  3531  000100                     _f_write$1484:
  3532                           	callstack 0
  3533  000100                     DrawAnalogClock@cax:
  3534                           	callstack 0
  3535                           
  3536                           ; 10 bytes @ 0x0
  3537  000100                     	ds	2
  3538  000102                     dir_register@fs:
  3539                           	callstack 0
  3540                           
  3541                           ; 2 bytes @ 0x2
  3542  000102                     	ds	2
  3543  000104                     dir_register@res:
  3544                           	callstack 0
  3545  000104                     f_write@res:
  3546                           	callstack 0
  3547                           
  3548                           ; 1 bytes @ 0x4
  3549  000104                     	ds	1
  3550  000105                     f_write@wbuff:
  3551                           	callstack 0
  3552                           
  3553                           ; 2 bytes @ 0x5
  3554  000105                     	ds	1
  3555  000106                     follow_path@fs:
  3556                           	callstack 0
  3557                           
  3558                           ; 2 bytes @ 0x6
  3559  000106                     	ds	1
  3560  000107                     f_write@csect:
  3561                           	callstack 0
  3562                           
  3563                           ; 2 bytes @ 0x7
  3564  000107                     	ds	1
  3565  000108                     follow_path@ns:
  3566                           	callstack 0
  3567                           
  3568                           ; 1 bytes @ 0x8
  3569  000108                     	ds	1
  3570  000109                     follow_path@res:
  3571                           	callstack 0
  3572  000109                     f_write@cc:
  3573                           	callstack 0
  3574                           
  3575                           ; 2 bytes @ 0x9
  3576  000109                     	ds	1
  3577  00010A                     f_open@fp:
  3578                           	callstack 0
  3579  00010A                     DrawAnalogClock@cay:
  3580                           	callstack 0
  3581                           
  3582                           ; 10 bytes @ 0xA
  3583  00010A                     	ds	1
  3584  00010B                     f_write@sect:
  3585                           	callstack 0
  3586                           
  3587                           ; 4 bytes @ 0xB
  3588  00010B                     	ds	1
  3589  00010C                     f_open@path:
  3590                           	callstack 0
  3591                           
  3592                           ; 2 bytes @ 0xC
  3593  00010C                     	ds	2
  3594  00010E                     f_open@mode:
  3595                           	callstack 0
  3596                           
  3597                           ; 1 bytes @ 0xE
  3598  00010E                     	ds	1
  3599  00010F                     ??_f_open:
  3600  00010F                     f_write@clst:
  3601                           	callstack 0
  3602                           
  3603                           ; 4 bytes @ 0xF
  3604  00010F                     	ds	4
  3605  000113                     f_write@wcnt:
  3606                           	callstack 0
  3607                           
  3608                           ; 2 bytes @ 0x13
  3609  000113                     	ds	1
  3610  000114                     DrawAnalogClock@csx:
  3611                           	callstack 0
  3612                           
  3613                           ; 10 bytes @ 0x14
  3614  000114                     	ds	1
  3615  000115                     f_write@fs:
  3616                           	callstack 0
  3617                           
  3618                           ; 2 bytes @ 0x15
  3619  000115                     	ds	2
  3620  000117                     f_open@dw:
  3621                           	callstack 0
  3622                           
  3623                           ; 4 bytes @ 0x17
  3624  000117                     	ds	4
  3625  00011B                     f_open@sc:
  3626                           	callstack 0
  3627                           
  3628                           ; 4 bytes @ 0x1B
  3629  00011B                     	ds	3
  3630  00011E                     DrawAnalogClock@csy:
  3631                           	callstack 0
  3632                           
  3633                           ; 10 bytes @ 0x1E
  3634  00011E                     	ds	3
  3635  000121                     f_open@bcs:
  3636                           	callstack 0
  3637                           
  3638                           ; 4 bytes @ 0x21
  3639  000121                     	ds	4
  3640  000125                     f_open@cl:
  3641                           	callstack 0
  3642                           
  3643                           ; 4 bytes @ 0x25
  3644  000125                     	ds	3
  3645  000128                     DrawAnalogClock@cmx:
  3646                           	callstack 0
  3647                           
  3648                           ; 10 bytes @ 0x28
  3649  000128                     	ds	1
  3650  000129                     f_open@ofs:
  3651                           	callstack 0
  3652                           
  3653                           ; 4 bytes @ 0x29
  3654  000129                     	ds	4
  3655  00012D                     f_open@clst:
  3656                           	callstack 0
  3657                           
  3658                           ; 4 bytes @ 0x2D
  3659  00012D                     	ds	4
  3660  000131                     f_open@fs:
  3661                           	callstack 0
  3662                           
  3663                           ; 2 bytes @ 0x31
  3664  000131                     	ds	1
  3665  000132                     DrawAnalogClock@cmy:
  3666                           	callstack 0
  3667                           
  3668                           ; 10 bytes @ 0x32
  3669  000132                     	ds	1
  3670  000133                     f_open@res:
  3671                           	callstack 0
  3672                           
  3673                           ; 1 bytes @ 0x33
  3674  000133                     	ds	1
  3675  000134                     f_open@dj:
  3676                           	callstack 0
  3677                           
  3678                           ; 40 bytes @ 0x34
  3679  000134                     	ds	8
  3680  00013C                     DrawAnalogClock@chx:
  3681                           	callstack 0
  3682                           
  3683                           ; 10 bytes @ 0x3C
  3684  00013C                     	ds	10
  3685  000146                     DrawAnalogClock@chy:
  3686                           	callstack 0
  3687                           
  3688                           ; 10 bytes @ 0x46
  3689  000146                     	ds	10
  3690  000150                     DrawAnalogClock@minupdate:
  3691                           	callstack 0
  3692                           
  3693                           ; 1 bytes @ 0x50
  3694  000150                     	ds	1
  3695  000151                     DrawAnalogClock@x:
  3696                           	callstack 0
  3697                           
  3698                           ; 10 bytes @ 0x51
  3699  000151                     	ds	10
  3700  00015B                     DrawAnalogClock@y:
  3701                           	callstack 0
  3702                           
  3703                           ; 10 bytes @ 0x5B
  3704  00015B                     	ds	10
  3705  000165                     DrawAnalogClock@rcs:
  3706                           	callstack 0
  3707                           
  3708                           ; 2 bytes @ 0x65
  3709  000165                     	ds	2
  3710  000167                     DrawAnalogClock@rcm:
  3711                           	callstack 0
  3712                           
  3713                           ; 2 bytes @ 0x67
  3714  000167                     	ds	2
  3715  000169                     DrawAnalogClock@rch:
  3716                           	callstack 0
  3717                           
  3718                           ; 2 bytes @ 0x69
  3719  000169                     	ds	2
  3720  00016B                     DrawAnalogClock@rca:
  3721                           	callstack 0
  3722                           
  3723                           ; 2 bytes @ 0x6B
  3724  00016B                     	ds	2
  3725  00016D                     DrawAnalogClock@rc2:
  3726                           	callstack 0
  3727                           
  3728                           ; 2 bytes @ 0x6D
  3729  00016D                     	ds	2
  3730  00016F                     DrawAnalogClock@rcm2:
  3731                           	callstack 0
  3732                           
  3733                           ; 2 bytes @ 0x6F
  3734  00016F                     	ds	2
  3735  000171                     DrawAnalogClock@rcm3:
  3736                           	callstack 0
  3737                           
  3738                           ; 2 bytes @ 0x71
  3739  000171                     	ds	2
  3740  000173                     DrawAnalogClock@rch2:
  3741                           	callstack 0
  3742                           
  3743                           ; 2 bytes @ 0x73
  3744  000173                     	ds	2
  3745  000175                     DrawAnalogClock@rch3:
  3746                           	callstack 0
  3747                           
  3748                           ; 2 bytes @ 0x75
  3749  000175                     	ds	2
  3750  000177                     DrawAnalogClock@hcolor:
  3751                           	callstack 0
  3752                           
  3753                           ; 2 bytes @ 0x77
  3754  000177                     	ds	2
  3755  000179                     DrawAnalogClock@mcolor:
  3756                           	callstack 0
  3757                           
  3758                           ; 2 bytes @ 0x79
  3759  000179                     	ds	2
  3760  00017B                     DrawAnalogClock@ss:
  3761                           	callstack 0
  3762                           
  3763                           ; 1 bytes @ 0x7B
  3764  00017B                     	ds	1
  3765  00017C                     DrawAnalogClock@kk:
  3766                           	callstack 0
  3767                           
  3768                           ; 1 bytes @ 0x7C
  3769  00017C                     	ds	1
  3770  00017D                     DrawAnalogClock@str:
  3771                           	callstack 0
  3772                           
  3773                           ; 3 bytes @ 0x7D
  3774  00017D                     	ds	3
  3775  000180                     DrawAnalogClock@scolor:
  3776                           	callstack 0
  3777                           
  3778                           ; 2 bytes @ 0x80
  3779  000180                     	ds	2
  3780  000182                     DrawAnalogClock@acolor:
  3781                           	callstack 0
  3782                           
  3783                           ; 2 bytes @ 0x82
  3784  000182                     	ds	2
  3785  000184                     DrawAnalogClock@hh:
  3786                           	callstack 0
  3787                           
  3788                           ; 1 bytes @ 0x84
  3789  000184                     	ds	1
  3790  000185                     DrawAnalogClock@rcs2:
  3791                           	callstack 0
  3792                           
  3793                           ; 2 bytes @ 0x85
  3794  000185                     	ds	2
  3795  000187                     DrawAnalogClock@mm:
  3796                           	callstack 0
  3797                           
  3798                           ; 1 bytes @ 0x87
  3799  000187                     	ds	1
  3800  000188                     DrawAnalogClock@rc:
  3801                           	callstack 0
  3802                           
  3803                           ; 2 bytes @ 0x88
  3804  000188                     	ds	2
  3805  00018A                     DrawAnalogClock@rc1:
  3806                           	callstack 0
  3807                           
  3808                           ; 2 bytes @ 0x8A
  3809  00018A                     	ds	2
  3810  00018C                     DrawAnalogClock@xc:
  3811                           	callstack 0
  3812                           
  3813                           ; 2 bytes @ 0x8C
  3814  00018C                     	ds	2
  3815  00018E                     DrawAnalogClock@yc:
  3816                           	callstack 0
  3817                           
  3818                           ; 2 bytes @ 0x8E
  3819  00018E                     	ds	2
  3820  000190                     DrawAnalogClock@angle:
  3821                           	callstack 0
  3822                           
  3823                           ; 2 bytes @ 0x90
  3824  000190                     	ds	2
  3825  000192                     DrawAnalogClock@jj:
  3826                           	callstack 0
  3827                           
  3828                           ; 1 bytes @ 0x92
  3829  000192                     	ds	1
  3830  000193                     DrawSetBox@str:
  3831                           	callstack 0
  3832  000193                     drawDateTime@str:
  3833                           	callstack 0
  3834                           
  3835                           ; 100 bytes @ 0x93
  3836  000193                     	ds	100
  3837  0001F7                     drawDateTime@mode:
  3838                           	callstack 0
  3839  0001F7                     DrawSetBox@color:
  3840                           	callstack 0
  3841                           
  3842                           ; 2 bytes @ 0xF7
  3843  0001F7                     	ds	1
  3844  0001F8                     ??_NormalProc:
  3845                           
  3846                           ; 1 bytes @ 0xF8
  3847  0001F8                     	ds	1
  3848  0001F9                     DrawSetBox@mode:
  3849                           	callstack 0
  3850                           
  3851                           ; 1 bytes @ 0xF9
  3852  0001F9                     	ds	3
  3853  0001FC                     ??_main:
  3854                           
  3855                           ; 1 bytes @ 0xFC
  3856  0001FC                     	ds	4
  3857                           
  3858                           	psect	cstackBANK0
  3859  000060                     __pcstackBANK0:
  3860                           	callstack 0
  3861  000060                     ?_mktime:
  3862                           	callstack 0
  3863  000060                     SD_SPI_SectorRead@result:
  3864                           	callstack 0
  3865  000060                     SD_SPI_SectorWrite@result:
  3866                           	callstack 0
  3867  000060                     display_putc@line:
  3868                           	callstack 0
  3869  000060                     sprintf@idx:
  3870                           	callstack 0
  3871  000060                     mktime@timeptr:
  3872                           	callstack 0
  3873  000060                     display_drawLine@x0:
  3874                           	callstack 0
  3875  000060                     _display_drawRoundRect$7131:
  3876                           	callstack 0
  3877  000060                     display_fillCircle@x0:
  3878                           	callstack 0
  3879  000060                     display_fillTriangle@dx01:
  3880                           	callstack 0
  3881  000060                     SD_SPI_MediaInitialize@CSDResponse:
  3882                           	callstack 0
  3883  000060                     GetTouchLocation@samplesX:
  3884                           	callstack 0
  3885                           
  3886                           ; 32 bytes @ 0x0
  3887  000060                     	ds	1
  3888  000061                     SD_SPI_SectorRead@status:
  3889                           	callstack 0
  3890  000061                     SD_SPI_SectorWrite@status:
  3891                           	callstack 0
  3892  000061                     display_putc@pitchY:
  3893                           	callstack 0
  3894  000061                     sprintf@prec:
  3895                           	callstack 0
  3896                           
  3897                           ; 1 bytes @ 0x1
  3898  000061                     	ds	1
  3899  000062                     display_putc@fontXsize:
  3900                           	callstack 0
  3901  000062                     SD_SPI_SectorRead@i:
  3902                           	callstack 0
  3903  000062                     SD_SPI_SectorWrite@i:
  3904                           	callstack 0
  3905  000062                     display_drawLine@y0:
  3906                           	callstack 0
  3907  000062                     display_drawRoundRect@max_radius:
  3908                           	callstack 0
  3909  000062                     display_fillCircle@y0:
  3910                           	callstack 0
  3911  000062                     display_fillTriangle@dy01:
  3912                           	callstack 0
  3913  000062                     sprintf@cp:
  3914                           	callstack 0
  3915                           
  3916                           ; 2 bytes @ 0x2
  3917  000062                     	ds	1
  3918  000063                     display_putc@fontYsize:
  3919                           	callstack 0
  3920                           
  3921                           ; 1 bytes @ 0x3
  3922  000063                     	ds	1
  3923  000064                     ??_mktime:
  3924  000064                     display_putc@pitchX:
  3925                           	callstack 0
  3926  000064                     display_drawLine@x1:
  3927                           	callstack 0
  3928  000064                     display_fillCircle@r:
  3929                           	callstack 0
  3930  000064                     display_fillTriangle@dy12:
  3931                           	callstack 0
  3932  000064                     sprintf@len:
  3933                           	callstack 0
  3934  000064                     SD_SPI_SectorRead@info:
  3935                           	callstack 0
  3936  000064                     SD_SPI_SectorWrite@info:
  3937                           	callstack 0
  3938                           
  3939                           ; 13 bytes @ 0x4
  3940  000064                     	ds	1
  3941  000065                     display_putc@c:
  3942                           	callstack 0
  3943                           
  3944                           ; 1 bytes @ 0x5
  3945  000065                     	ds	1
  3946  000066                     display_putc@j:
  3947                           	callstack 0
  3948  000066                     sprintf@ap:
  3949                           	callstack 0
  3950  000066                     display_drawLine@y1:
  3951                           	callstack 0
  3952  000066                     display_fillCircle@color:
  3953                           	callstack 0
  3954  000066                     display_fillTriangle@t:
  3955                           	callstack 0
  3956                           
  3957                           ; 2 bytes @ 0x6
  3958  000066                     	ds	1
  3959  000067                     display_putc@textsizeX:
  3960                           	callstack 0
  3961  000067                     sprintf@val:
  3962                           	callstack 0
  3963                           
  3964                           ; 2 bytes @ 0x7
  3965  000067                     	ds	1
  3966  000068                     display_putc@i:
  3967                           	callstack 0
  3968  000068                     display_drawLine@color:
  3969                           	callstack 0
  3970  000068                     display_fillTriangle@t_7202:
  3971                           	callstack 0
  3972                           
  3973                           ; 2 bytes @ 0x8
  3974  000068                     	ds	1
  3975  000069                     display_putc@textsizeY:
  3976                           	callstack 0
  3977  000069                     sprintf@flag:
  3978                           	callstack 0
  3979                           
  3980                           ; 1 bytes @ 0x9
  3981  000069                     	ds	1
  3982  00006A                     display_drawChars@x:
  3983                           	callstack 0
  3984  00006A                     display_drawTriangle@x0:
  3985                           	callstack 0
  3986  00006A                     display_fillTriangle@t_7203:
  3987                           	callstack 0
  3988  00006A                     sprintf@width:
  3989                           	callstack 0
  3990  00006A                     mktime@tt:
  3991                           	callstack 0
  3992                           
  3993                           ; 4 bytes @ 0xA
  3994  00006A                     	ds	2
  3995  00006C                     sprintf@c:
  3996                           	callstack 0
  3997  00006C                     display_drawChars@y:
  3998                           	callstack 0
  3999  00006C                     display_drawTriangle@y0:
  4000                           	callstack 0
  4001  00006C                     display_fillTriangle@t_7204:
  4002                           	callstack 0
  4003                           
  4004                           ; 2 bytes @ 0xC
  4005  00006C                     	ds	2
  4006  00006E                     getWeekdays@year:
  4007                           	callstack 0
  4008  00006E                     display_drawChars@s:
  4009                           	callstack 0
  4010  00006E                     display_drawTriangle@x1:
  4011                           	callstack 0
  4012  00006E                     display_fillTriangle@t_7205:
  4013                           	callstack 0
  4014                           
  4015                           ; 2 bytes @ 0xE
  4016  00006E                     	ds	1
  4017  00006F                     getWeekdays@month:
  4018                           	callstack 0
  4019                           
  4020                           ; 1 bytes @ 0xF
  4021  00006F                     	ds	1
  4022  000070                     getWeekdays@day:
  4023                           	callstack 0
  4024  000070                     display_drawChars@color:
  4025                           	callstack 0
  4026  000070                     display_drawTriangle@y1:
  4027                           	callstack 0
  4028  000070                     display_fillTriangle@t_7206:
  4029                           	callstack 0
  4030                           
  4031                           ; 2 bytes @ 0x10
  4032  000070                     	ds	1
  4033  000071                     disk_read@buff:
  4034                           	callstack 0
  4035  000071                     disk_write@buff:
  4036                           	callstack 0
  4037  000071                     getWeekdays@tim:
  4038                           	callstack 0
  4039                           
  4040                           ; 4 bytes @ 0x11
  4041  000071                     	ds	1
  4042  000072                     display_drawChars@bg:
  4043                           	callstack 0
  4044  000072                     display_drawTriangle@x2:
  4045                           	callstack 0
  4046  000072                     display_fillTriangle@t_7207:
  4047                           	callstack 0
  4048                           
  4049                           ; 2 bytes @ 0x12
  4050  000072                     	ds	1
  4051  000073                     disk_read@sector:
  4052                           	callstack 0
  4053  000073                     disk_write@sector:
  4054                           	callstack 0
  4055                           
  4056                           ; 4 bytes @ 0x13
  4057  000073                     	ds	1
  4058  000074                     display_drawChars@size:
  4059                           	callstack 0
  4060  000074                     display_drawTriangle@y2:
  4061                           	callstack 0
  4062  000074                     display_fillTriangle@t_7208:
  4063                           	callstack 0
  4064  000074                     _SD_SPI_MediaInitialize$8864:
  4065                           	callstack 0
  4066                           
  4067                           ; 4 bytes @ 0x14
  4068  000074                     	ds	1
  4069  000075                     display_drawChars@prev_x:
  4070                           	callstack 0
  4071  000075                     getWeekdays@t2:
  4072                           	callstack 0
  4073                           
  4074                           ; 2 bytes @ 0x15
  4075  000075                     	ds	1
  4076  000076                     display_drawTriangle@color:
  4077                           	callstack 0
  4078  000076                     display_fillTriangle@last:
  4079                           	callstack 0
  4080                           
  4081                           ; 2 bytes @ 0x16
  4082  000076                     	ds	1
  4083  000077                     disk_read@count:
  4084                           	callstack 0
  4085  000077                     disk_write@count:
  4086                           	callstack 0
  4087  000077                     display_drawChars@prev_y:
  4088                           	callstack 0
  4089  000077                     getWeekdays@t:
  4090                           	callstack 0
  4091                           
  4092                           ; 18 bytes @ 0x17
  4093  000077                     	ds	1
  4094  000078                     SD_SPI_MediaInitialize@c_size_mult:
  4095                           	callstack 0
  4096  000078                     display_fillTriangle@dy02:
  4097                           	callstack 0
  4098                           
  4099                           ; 2 bytes @ 0x18
  4100  000078                     	ds	1
  4101  000079                     SD_SPI_MediaInitialize@index:
  4102                           	callstack 0
  4103  000079                     sync_window@fs:
  4104                           	callstack 0
  4105  000079                     display_drawChars@prev_color:
  4106                           	callstack 0
  4107                           
  4108                           ; 2 bytes @ 0x19
  4109  000079                     	ds	1
  4110  00007A                     SD_SPI_MediaInitialize@block_len:
  4111                           	callstack 0
  4112  00007A                     display_fillTriangle@dx12:
  4113                           	callstack 0
  4114                           
  4115                           ; 2 bytes @ 0x1A
  4116  00007A                     	ds	1
  4117  00007B                     ??_sync_window:
  4118  00007B                     SD_SPI_MediaInitialize@count:
  4119                           	callstack 0
  4120  00007B                     display_drawChars@prev_bg:
  4121                           	callstack 0
  4122                           
  4123                           ; 2 bytes @ 0x1B
  4124  00007B                     	ds	1
  4125  00007C                     display_fillTriangle@sa:
  4126                           	callstack 0
  4127  00007C                     SD_SPI_MediaInitialize@c_size:
  4128                           	callstack 0
  4129                           
  4130                           ; 4 bytes @ 0x1C
  4131  00007C                     	ds	1
  4132  00007D                     display_drawChars@prev_size:
  4133                           	callstack 0
  4134                           
  4135                           ; 1 bytes @ 0x1D
  4136  00007D                     	ds	1
  4137  00007E                     display_fillTriangle@sb:
  4138                           	callstack 0
  4139  00007E                     drawTempHumidity@str1:
  4140                           	callstack 0
  4141  00007E                     TouchAdjMsg@str:
  4142                           	callstack 0
  4143                           
  4144                           ; 100 bytes @ 0x1E
  4145  00007E                     	ds	2
  4146  000080                     display_fillTriangle@dx02:
  4147                           	callstack 0
  4148  000080                     SD_SPI_MediaInitialize@response:
  4149                           	callstack 0
  4150  000080                     GetTouchLocation@samplesY:
  4151                           	callstack 0
  4152                           
  4153                           ; 32 bytes @ 0x20
  4154  000080                     	ds	2
  4155  000082                     display_fillTriangle@y:
  4156                           	callstack 0
  4157                           
  4158                           ; 2 bytes @ 0x22
  4159  000082                     	ds	2
  4160  000084                     display_fillTriangle@b:
  4161                           	callstack 0
  4162                           
  4163                           ; 2 bytes @ 0x24
  4164  000084                     	ds	1
  4165  000085                     SD_SPI_MediaInitialize@timeout:
  4166                           	callstack 0
  4167                           
  4168                           ; 2 bytes @ 0x25
  4169  000085                     	ds	1
  4170  000086                     display_fillTriangle@a:
  4171                           	callstack 0
  4172                           
  4173                           ; 2 bytes @ 0x26
  4174  000086                     	ds	2
  4175  000088                     DrawAnalogClock@datetime:
  4176                           	callstack 0
  4177  000088                     Dispseg@pattern:
  4178                           	callstack 0
  4179                           
  4180                           ; 10 bytes @ 0x28
  4181  000088                     	ds	1
  4182  000089                     DrawBigCalendar@month:
  4183                           	callstack 0
  4184  000089                     DrawSmallCalendar@month:
  4185                           	callstack 0
  4186  000089                     dateErrorCheck@dateTime:
  4187                           	callstack 0
  4188                           
  4189                           ; 2 bytes @ 0x29
  4190  000089                     	ds	1
  4191  00008A                     DrawAnalogClock@xx:
  4192                           	callstack 0
  4193  00008A                     DrawBigCalendar@xs:
  4194                           	callstack 0
  4195  00008A                     DrawSmallCalendar@xs:
  4196                           	callstack 0
  4197                           
  4198                           ; 2 bytes @ 0x2A
  4199  00008A                     	ds	1
  4200  00008B                     sync_window@res:
  4201                           	callstack 0
  4202  00008B                     dateErrorCheck@yy:
  4203                           	callstack 0
  4204                           
  4205                           ; 1 bytes @ 0x2B
  4206  00008B                     	ds	1
  4207  00008C                     dateErrorCheck@mm:
  4208                           	callstack 0
  4209  00008C                     move_window@fs:
  4210                           	callstack 0
  4211  00008C                     sync_fs@fs:
  4212                           	callstack 0
  4213  00008C                     dir_clear@fs:
  4214                           	callstack 0
  4215  00008C                     DrawAnalogClock@yy:
  4216                           	callstack 0
  4217  00008C                     DrawBigCalendar@ys:
  4218                           	callstack 0
  4219  00008C                     DrawSmallCalendar@ys:
  4220                           	callstack 0
  4221                           
  4222                           ; 2 bytes @ 0x2C
  4223  00008C                     	ds	1
  4224  00008D                     dateErrorCheck@dd:
  4225                           	callstack 0
  4226                           
  4227                           ; 1 bytes @ 0x2D
  4228  00008D                     	ds	1
  4229  00008E                     ??_sync_fs:
  4230  00008E                     ??_GPRMCdatacheck:
  4231  00008E                     ??_DrawBigCalendar:
  4232  00008E                     ??_DrawSmallCalendar:
  4233  00008E                     DrawAnalogClock@size:
  4234                           	callstack 0
  4235  00008E                     init_RTC@datetime:
  4236                           	callstack 0
  4237  00008E                     move_window@sector:
  4238                           	callstack 0
  4239  00008E                     dir_clear@clst:
  4240                           	callstack 0
  4241                           
  4242                           ; 4 bytes @ 0x2E
  4243  00008E                     	ds	1
  4244  00008F                     DrawAnalogClock@color:
  4245                           	callstack 0
  4246                           
  4247                           ; 2 bytes @ 0x2F
  4248  00008F                     	ds	2
  4249  000091                     ??_DrawAnalogClock:
  4250                           
  4251                           ; 1 bytes @ 0x31
  4252  000091                     	ds	1
  4253  000092                     DrawBigCalendar@year:
  4254                           	callstack 0
  4255  000092                     DrawSmallCalendar@year:
  4256                           	callstack 0
  4257  000092                     Dispseg@x2:
  4258                           	callstack 0
  4259                           
  4260                           ; 2 bytes @ 0x32
  4261  000092                     	ds	1
  4262  000093                     DrawBigCalendar@wd:
  4263                           	callstack 0
  4264                           
  4265                           ; 1 bytes @ 0x33
  4266  000093                     	ds	1
  4267  000094                     GPRMCdatacheck@jj:
  4268                           	callstack 0
  4269  000094                     DrawBigCalendar@maxdays:
  4270                           	callstack 0
  4271  000094                     DrawSmallCalendar@wd:
  4272                           	callstack 0
  4273  000094                     dir_clear@ibuf:
  4274                           	callstack 0
  4275  000094                     Dispseg@x0:
  4276                           	callstack 0
  4277                           
  4278                           ; 2 bytes @ 0x34
  4279  000094                     	ds	1
  4280  000095                     GPRMCdatacheck@hh:
  4281                           	callstack 0
  4282  000095                     DrawSmallCalendar@maxdays:
  4283                           	callstack 0
  4284  000095                     drawAlarmTime@alarmtime:
  4285                           	callstack 0
  4286  000095                     DrawBigCalendar@str:
  4287                           	callstack 0
  4288                           
  4289                           ; 5 bytes @ 0x35
  4290  000095                     	ds	1
  4291  000096                     move_window@res:
  4292                           	callstack 0
  4293  000096                     sync_fs@res:
  4294                           	callstack 0
  4295  000096                     DrawSmallCalendar@thismonth:
  4296                           	callstack 0
  4297  000096                     GPRMCdatacheck@p:
  4298                           	callstack 0
  4299  000096                     Dispseg@y0:
  4300                           	callstack 0
  4301  000096                     dir_clear@sect:
  4302                           	callstack 0
  4303                           
  4304                           ; 4 bytes @ 0x36
  4305  000096                     	ds	1
  4306  000097                     ??_drawAlarmTime:
  4307  000097                     ?_get_fat:
  4308                           	callstack 0
  4309  000097                     get_fat@obj:
  4310                           	callstack 0
  4311  000097                     put_fat@fs:
  4312                           	callstack 0
  4313  000097                     check_fs@fs:
  4314                           	callstack 0
  4315  000097                     f_sync@fp:
  4316                           	callstack 0
  4317  000097                     DrawSmallCalendar@str:
  4318                           	callstack 0
  4319                           
  4320                           ; 5 bytes @ 0x37
  4321  000097                     	ds	1
  4322  000098                     Dispseg@y2:
  4323                           	callstack 0
  4324                           
  4325                           ; 2 bytes @ 0x38
  4326  000098                     	ds	1
  4327  000099                     get_fat@clst:
  4328                           	callstack 0
  4329  000099                     put_fat@clst:
  4330                           	callstack 0
  4331  000099                     check_fs@sect:
  4332                           	callstack 0
  4333  000099                     f_sync@tm:
  4334                           	callstack 0
  4335                           
  4336                           ; 4 bytes @ 0x39
  4337  000099                     	ds	1
  4338  00009A                     DrawBigCalendar@fonth:
  4339                           	callstack 0
  4340  00009A                     dir_clear@szb:
  4341                           	callstack 0
  4342  00009A                     Dispseg@x1:
  4343                           	callstack 0
  4344                           
  4345                           ; 2 bytes @ 0x3A
  4346  00009A                     	ds	1
  4347  00009B                     SlideSWProc@jj:
  4348                           	callstack 0
  4349  00009B                     DrawBigCalendar@kk:
  4350                           	callstack 0
  4351                           
  4352                           ; 1 bytes @ 0x3B
  4353  00009B                     	ds	1
  4354  00009C                     DrawBigCalendar@yr:
  4355                           	callstack 0
  4356  00009C                     DrawSmallCalendar@kk:
  4357                           	callstack 0
  4358  00009C                     dir_clear@n:
  4359                           	callstack 0
  4360  00009C                     Dispseg@y1:
  4361                           	callstack 0
  4362                           
  4363                           ; 2 bytes @ 0x3C
  4364  00009C                     	ds	1
  4365  00009D                     ??_get_fat:
  4366  00009D                     f_sync@res:
  4367                           	callstack 0
  4368  00009D                     DrawBigCalendar@mm:
  4369                           	callstack 0
  4370  00009D                     DrawSmallCalendar@yr:
  4371                           	callstack 0
  4372  00009D                     put_fat@val:
  4373                           	callstack 0
  4374                           
  4375                           ; 4 bytes @ 0x3D
  4376  00009D                     	ds	1
  4377  00009E                     DrawBigCalendar@ypitch:
  4378                           	callstack 0
  4379  00009E                     DrawSmallCalendar@mm:
  4380                           	callstack 0
  4381  00009E                     find_volume@path:
  4382                           	callstack 0
  4383  00009E                     f_sync@fs:
  4384                           	callstack 0
  4385  00009E                     DispTime@datetime:
  4386                           	callstack 0
  4387                           
  4388                           ; 2 bytes @ 0x3E
  4389  00009E                     	ds	1
  4390  00009F                     DrawBigCalendar@space:
  4391                           	callstack 0
  4392  00009F                     DrawSmallCalendar@ypitch:
  4393                           	callstack 0
  4394                           
  4395                           ; 1 bytes @ 0x3F
  4396  00009F                     	ds	1
  4397  0000A0                     DrawBigCalendar@dd:
  4398                           	callstack 0
  4399  0000A0                     DrawSmallCalendar@dd:
  4400                           	callstack 0
  4401  0000A0                     find_volume@rfs:
  4402                           	callstack 0
  4403  0000A0                     f_sync@dir:
  4404                           	callstack 0
  4405  0000A0                     DispTime@x:
  4406                           	callstack 0
  4407  0000A0                     GetTouchLocation@overrange:
  4408                           	callstack 0
  4409                           
  4410                           ; 2 bytes @ 0x40
  4411  0000A0                     	ds	1
  4412  0000A1                     ??_put_fat:
  4413  0000A1                     DrawBigCalendar@startday:
  4414                           	callstack 0
  4415  0000A1                     DrawSmallCalendar@startday:
  4416                           	callstack 0
  4417                           
  4418                           ; 1 bytes @ 0x41
  4419  0000A1                     	ds	1
  4420  0000A2                     find_volume@mode:
  4421                           	callstack 0
  4422  0000A2                     f_close@fp:
  4423                           	callstack 0
  4424  0000A2                     DispTime@y:
  4425                           	callstack 0
  4426  0000A2                     DrawBigCalendar@color:
  4427                           	callstack 0
  4428  0000A2                     DrawSmallCalendar@color:
  4429                           	callstack 0
  4430  0000A2                     GetTouchLocation@sample_sumX:
  4431                           	callstack 0
  4432                           
  4433                           ; 2 bytes @ 0x42
  4434  0000A2                     	ds	1
  4435  0000A3                     ??_find_volume:
  4436                           
  4437                           ; 1 bytes @ 0x43
  4438  0000A3                     	ds	1
  4439  0000A4                     DispTime@size:
  4440                           	callstack 0
  4441  0000A4                     f_close@fs:
  4442                           	callstack 0
  4443  0000A4                     DrawBigCalendar@backColor:
  4444                           	callstack 0
  4445  0000A4                     DrawSmallCalendar@backColor:
  4446                           	callstack 0
  4447  0000A4                     GetTouchLocation@sample_sumY:
  4448                           	callstack 0
  4449                           
  4450                           ; 2 bytes @ 0x44
  4451  0000A4                     	ds	1
  4452  0000A5                     DispTime@color:
  4453                           	callstack 0
  4454                           
  4455                           ; 2 bytes @ 0x45
  4456  0000A5                     	ds	1
  4457  0000A6                     f_close@res:
  4458                           	callstack 0
  4459  0000A6                     DrawSmallCalendar@fontw:
  4460                           	callstack 0
  4461  0000A6                     _get_fat$677:
  4462                           	callstack 0
  4463  0000A6                     DrawBigCalendar@yy:
  4464                           	callstack 0
  4465  0000A6                     GetTouchLocation@diff:
  4466                           	callstack 0
  4467                           
  4468                           ; 2 bytes @ 0x46
  4469  0000A6                     	ds	1
  4470  0000A7                     ??_DispTime:
  4471  0000A7                     DrawSmallCalendar@yy:
  4472                           	callstack 0
  4473                           
  4474                           ; 2 bytes @ 0x47
  4475  0000A7                     	ds	1
  4476  0000A8                     DrawBigCalendar@fontw:
  4477                           	callstack 0
  4478  0000A8                     GetTouchLocation@num:
  4479                           	callstack 0
  4480  0000A8                     get_fat@wc:
  4481                           	callstack 0
  4482                           
  4483                           ; 2 bytes @ 0x48
  4484  0000A8                     	ds	1
  4485  0000A9                     GetTouchLocation@oversampling:
  4486                           	callstack 0
  4487  0000A9                     DrawBigCalendar@xx:
  4488                           	callstack 0
  4489  0000A9                     DrawSmallCalendar@xx:
  4490                           	callstack 0
  4491                           
  4492                           ; 2 bytes @ 0x49
  4493  0000A9                     	ds	1
  4494  0000AA                     GetTouchLocation@avg:
  4495                           	callstack 0
  4496  0000AA                     get_fat@val:
  4497                           	callstack 0
  4498                           
  4499                           ; 4 bytes @ 0x4A
  4500  0000AA                     	ds	1
  4501  0000AB                     DispTime@endpoint:
  4502                           	callstack 0
  4503  0000AB                     DrawBigCalendar@jj:
  4504                           	callstack 0
  4505  0000AB                     DrawSmallCalendar@jj:
  4506                           	callstack 0
  4507  0000AB                     find_volume@br:
  4508                           	callstack 0
  4509                           
  4510                           ; 16 bytes @ 0x4B
  4511  0000AB                     	ds	1
  4512  0000AC                     DispTime@mode:
  4513                           	callstack 0
  4514  0000AC                     Draw3month@startmonth:
  4515                           	callstack 0
  4516  0000AC                     GetTouchLocation@jj:
  4517                           	callstack 0
  4518                           
  4519                           ; 1 bytes @ 0x4C
  4520  0000AC                     	ds	1
  4521  0000AD                     Draw3month@mode:
  4522                           	callstack 0
  4523  0000AD                     DispTime@yd:
  4524                           	callstack 0
  4525                           
  4526                           ; 2 bytes @ 0x4D
  4527  0000AD                     	ds	1
  4528  0000AE                     Draw3month@startyear:
  4529                           	callstack 0
  4530  0000AE                     get_fat@bc:
  4531                           	callstack 0
  4532                           
  4533                           ; 2 bytes @ 0x4E
  4534  0000AE                     	ds	1
  4535  0000AF                     Draw3month@yy:
  4536                           	callstack 0
  4537  0000AF                     _put_fat$705:
  4538                           	callstack 0
  4539  0000AF                     DispTime@xd:
  4540                           	callstack 0
  4541                           
  4542                           ; 2 bytes @ 0x4F
  4543  0000AF                     	ds	1
  4544  0000B0                     Draw3month@mm:
  4545                           	callstack 0
  4546  0000B0                     get_fat@fs:
  4547                           	callstack 0
  4548  0000B0                     drawTempHumidity@str2:
  4549                           	callstack 0
  4550                           
  4551                           ; 50 bytes @ 0x50
  4552  0000B0                     	ds	1
  4553  0000B1                     DispTime@jj:
  4554                           	callstack 0
  4555  0000B1                     _drawCalendar$8867:
  4556                           	callstack 0
  4557  0000B1                     _put_fat$706:
  4558                           	callstack 0
  4559                           
  4560                           ; 2 bytes @ 0x51
  4561  0000B1                     	ds	1
  4562  0000B2                     _drawCalendar$8868:
  4563                           	callstack 0
  4564  0000B2                     dir_sdi@dp:
  4565                           	callstack 0
  4566  0000B2                     drawTime@datetime:
  4567                           	callstack 0
  4568                           
  4569                           ; 2 bytes @ 0x52
  4570  0000B2                     	ds	1
  4571  0000B3                     _drawCalendar$8869:
  4572                           	callstack 0
  4573  0000B3                     put_fat@p:
  4574                           	callstack 0
  4575                           
  4576                           ; 2 bytes @ 0x53
  4577  0000B3                     	ds	1
  4578  0000B4                     _drawCalendar$8870:
  4579                           	callstack 0
  4580  0000B4                     drawTime@color:
  4581                           	callstack 0
  4582  0000B4                     dir_sdi@ofs:
  4583                           	callstack 0
  4584                           
  4585                           ; 4 bytes @ 0x54
  4586  0000B4                     	ds	1
  4587  0000B5                     drawCalendar@mode:
  4588                           	callstack 0
  4589  0000B5                     put_fat@bc:
  4590                           	callstack 0
  4591                           
  4592                           ; 2 bytes @ 0x55
  4593  0000B5                     	ds	1
  4594  0000B6                     drawTime@mode:
  4595                           	callstack 0
  4596                           
  4597                           ; 1 bytes @ 0x56
  4598  0000B6                     	ds	1
  4599  0000B7                     put_fat@res:
  4600                           	callstack 0
  4601  0000B7                     ButtonCheck@x:
  4602                           	callstack 0
  4603  0000B7                     drawDateTime@datetime:
  4604                           	callstack 0
  4605                           
  4606                           ; 2 bytes @ 0x57
  4607  0000B7                     	ds	1
  4608  0000B8                     ??_dir_sdi:
  4609  0000B8                     ?_create_chain:
  4610                           	callstack 0
  4611  0000B8                     remove_chain@obj:
  4612                           	callstack 0
  4613  0000B8                     create_chain@obj:
  4614                           	callstack 0
  4615                           
  4616                           ; 2 bytes @ 0x58
  4617  0000B8                     	ds	1
  4618  0000B9                     ??_drawDateTime:
  4619  0000B9                     ButtonCheck@y:
  4620                           	callstack 0
  4621                           
  4622                           ; 2 bytes @ 0x59
  4623  0000B9                     	ds	1
  4624  0000BA                     remove_chain@clst:
  4625                           	callstack 0
  4626  0000BA                     create_chain@clst:
  4627                           	callstack 0
  4628                           
  4629                           ; 4 bytes @ 0x5A
  4630  0000BA                     	ds	1
  4631  0000BB                     ButtonCheck@mode:
  4632                           	callstack 0
  4633  0000BB                     _find_volume$1181:
  4634                           	callstack 0
  4635                           
  4636                           ; 4 bytes @ 0x5B
  4637  0000BB                     	ds	1
  4638  0000BC                     ButtonCheck@kk:
  4639                           	callstack 0
  4640                           
  4641                           ; 1 bytes @ 0x5C
  4642  0000BC                     	ds	1
  4643  0000BD                     ButtonCheck@jj:
  4644                           	callstack 0
  4645                           
  4646                           ; 1 bytes @ 0x5D
  4647  0000BD                     	ds	1
  4648  0000BE                     ??_create_chain:
  4649  0000BE                     ??_SettingProc:
  4650  0000BE                     remove_chain@pclst:
  4651                           	callstack 0
  4652                           
  4653                           ; 4 bytes @ 0x5E
  4654  0000BE                     	ds	1
  4655  0000BF                     _find_volume$1182:
  4656                           	callstack 0
  4657                           
  4658                           ; 2 bytes @ 0x5F
  4659  0000BF                     	ds	2
  4660  0000C1                     find_volume@szbfat:
  4661                           	callstack 0
  4662                           
  4663                           ; 4 bytes @ 0x61
  4664  0000C1                     	ds	1
  4665  0000C2                     ??_remove_chain:
  4666                           
  4667                           ; 1 bytes @ 0x62
  4668  0000C2                     	ds	3
  4669  0000C5                     find_volume@pt:
  4670                           	callstack 0
  4671                           
  4672                           ; 2 bytes @ 0x65
  4673  0000C5                     	ds	1
  4674  0000C6                     create_chain@res:
  4675                           	callstack 0
  4676  0000C6                     dir_sdi@csz:
  4677                           	callstack 0
  4678                           
  4679                           ; 4 bytes @ 0x66
  4680  0000C6                     	ds	1
  4681  0000C7                     SettingProc@xp:
  4682                           	callstack 0
  4683  0000C7                     create_chain@scl:
  4684                           	callstack 0
  4685  0000C7                     find_volume@sysect:
  4686                           	callstack 0
  4687                           
  4688                           ; 4 bytes @ 0x67
  4689  0000C7                     	ds	2
  4690  0000C9                     SettingProc@yp:
  4691                           	callstack 0
  4692                           
  4693                           ; 2 bytes @ 0x69
  4694  0000C9                     	ds	1
  4695  0000CA                     remove_chain@nxt:
  4696                           	callstack 0
  4697  0000CA                     dir_sdi@clst:
  4698                           	callstack 0
  4699                           
  4700                           ; 4 bytes @ 0x6A
  4701  0000CA                     	ds	1
  4702  0000CB                     SettingProc@yy:
  4703                           	callstack 0
  4704  0000CB                     find_volume@vol:
  4705                           	callstack 0
  4706  0000CB                     create_chain@ncl:
  4707                           	callstack 0
  4708                           
  4709                           ; 4 bytes @ 0x6B
  4710  0000CB                     	ds	1
  4711  0000CC                     SettingProc@mo:
  4712                           	callstack 0
  4713                           
  4714                           ; 1 bytes @ 0x6C
  4715  0000CC                     	ds	1
  4716  0000CD                     SettingProc@dd:
  4717                           	callstack 0
  4718  0000CD                     find_volume@nrsv:
  4719                           	callstack 0
  4720                           
  4721                           ; 2 bytes @ 0x6D
  4722  0000CD                     	ds	1
  4723  0000CE                     remove_chain@res:
  4724                           	callstack 0
  4725  0000CE                     SettingProc@mm:
  4726                           	callstack 0
  4727  0000CE                     dir_sdi@fs:
  4728                           	callstack 0
  4729                           
  4730                           ; 2 bytes @ 0x6E
  4731  0000CE                     	ds	1
  4732  0000CF                     SettingProc@hh:
  4733                           	callstack 0
  4734  0000CF                     remove_chain@fs:
  4735                           	callstack 0
  4736  0000CF                     create_chain@fs:
  4737                           	callstack 0
  4738  0000CF                     find_volume@tsect:
  4739                           	callstack 0
  4740                           
  4741                           ; 4 bytes @ 0x6F
  4742  0000CF                     	ds	1
  4743  0000D0                     SettingProc@y:
  4744                           	callstack 0
  4745                           
  4746                           ; 1 bytes @ 0x70
  4747  0000D0                     	ds	1
  4748  0000D1                     SettingProc@m:
  4749                           	callstack 0
  4750  0000D1                     create_chain@cs:
  4751                           	callstack 0
  4752                           
  4753                           ; 4 bytes @ 0x71
  4754  0000D1                     	ds	1
  4755  0000D2                     SettingProc@d:
  4756                           	callstack 0
  4757                           
  4758                           ; 1 bytes @ 0x72
  4759  0000D2                     	ds	1
  4760  0000D3                     find_volume@stat:
  4761                           	callstack 0
  4762  0000D3                     SettingProc@delta:
  4763                           	callstack 0
  4764                           
  4765                           ; 1 bytes @ 0x73
  4766  0000D3                     	ds	1
  4767  0000D4                     SettingProc@jj:
  4768                           	callstack 0
  4769  0000D4                     find_volume@nclst:
  4770                           	callstack 0
  4771                           
  4772                           ; 4 bytes @ 0x74
  4773  0000D4                     	ds	1
  4774  0000D5                     dir_next@dp:
  4775                           	callstack 0
  4776  0000D5                     f_write@fp:
  4777                           	callstack 0
  4778                           
  4779                           ; 2 bytes @ 0x75
  4780  0000D5                     	ds	2
  4781  0000D7                     dir_next@stretch:
  4782                           	callstack 0
  4783  0000D7                     f_write@buff:
  4784                           	callstack 0
  4785                           
  4786                           ; 2 bytes @ 0x77
  4787  0000D7                     	ds	1
  4788  0000D8                     find_volume@fasize:
  4789                           	callstack 0
  4790                           
  4791                           ; 4 bytes @ 0x78
  4792  0000D8                     	ds	1
  4793  0000D9                     ??_dir_next:
  4794  0000D9                     f_write@btw:
  4795                           	callstack 0
  4796                           
  4797                           ; 2 bytes @ 0x79
  4798  0000D9                     	ds	2
  4799  0000DB                     f_write@bw:
  4800                           	callstack 0
  4801                           
  4802                           ; 2 bytes @ 0x7B
  4803  0000DB                     	ds	1
  4804  0000DC                     find_volume@bsect:
  4805                           	callstack 0
  4806                           
  4807                           ; 4 bytes @ 0x7C
  4808  0000DC                     	ds	1
  4809  0000DD                     ??_f_write:
  4810                           
  4811                           ; 1 bytes @ 0x7D
  4812  0000DD                     	ds	3
  4813  0000E0                     find_volume@i:
  4814                           	callstack 0
  4815                           
  4816                           ; 2 bytes @ 0x80
  4817  0000E0                     	ds	2
  4818  0000E2                     find_volume@fmt:
  4819                           	callstack 0
  4820  0000E2                     TouchAdjMsg@num:
  4821                           	callstack 0
  4822  0000E2                     drawTempHumidity@mode:
  4823                           	callstack 0
  4824                           
  4825                           ; 1 bytes @ 0x82
  4826  0000E2                     	ds	1
  4827  0000E3                     find_volume@fs:
  4828                           	callstack 0
  4829  0000E3                     TouchAdjMsg@color1:
  4830                           	callstack 0
  4831                           
  4832                           ; 2 bytes @ 0x83
  4833  0000E3                     	ds	2
  4834  0000E5                     f_mount@fs:
  4835                           	callstack 0
  4836  0000E5                     TouchAdjMsg@color2:
  4837                           	callstack 0
  4838                           
  4839                           ; 2 bytes @ 0x85
  4840  0000E5                     	ds	2
  4841  0000E7                     ??_TouchAdjust:
  4842  0000E7                     f_mount@path:
  4843                           	callstack 0
  4844                           
  4845                           ; 2 bytes @ 0x87
  4846  0000E7                     	ds	2
  4847  0000E9                     f_mount@opt:
  4848                           	callstack 0
  4849  0000E9                     TouchAdjust@dx:
  4850                           	callstack 0
  4851  0000E9                     dir_next@ofs:
  4852                           	callstack 0
  4853                           
  4854                           ; 4 bytes @ 0x89
  4855  0000E9                     	ds	1
  4856  0000EA                     f_mount@res:
  4857                           	callstack 0
  4858                           
  4859                           ; 1 bytes @ 0x8A
  4860  0000EA                     	ds	1
  4861  0000EB                     f_mount@cfs:
  4862                           	callstack 0
  4863  0000EB                     TouchAdjust@dy:
  4864                           	callstack 0
  4865                           
  4866                           ; 2 bytes @ 0x8B
  4867  0000EB                     	ds	2
  4868  0000ED                     TouchAdjust@count:
  4869                           	callstack 0
  4870  0000ED                     dir_next@fs:
  4871                           	callstack 0
  4872  0000ED                     f_mount@rp:
  4873                           	callstack 0
  4874                           
  4875                           ; 2 bytes @ 0x8D
  4876  0000ED                     	ds	1
  4877  0000EE                     TouchAdjust@result:
  4878                           	callstack 0
  4879                           
  4880                           ; 1 bytes @ 0x8E
  4881  0000EE                     	ds	1
  4882  0000EF                     TouchAdjust@kk:
  4883                           	callstack 0
  4884  0000EF                     f_mount@vol:
  4885                           	callstack 0
  4886  0000EF                     dir_next@clst:
  4887                           	callstack 0
  4888                           
  4889                           ; 4 bytes @ 0x8F
  4890  0000EF                     	ds	4
  4891  0000F3                     dir_alloc@dp:
  4892                           	callstack 0
  4893  0000F3                     dir_find@dp:
  4894                           	callstack 0
  4895                           
  4896                           ; 2 bytes @ 0x93
  4897  0000F3                     	ds	2
  4898  0000F5                     ??_dir_find:
  4899  0000F5                     dir_alloc@nent:
  4900                           	callstack 0
  4901                           
  4902                           ; 2 bytes @ 0x95
  4903  0000F5                     	ds	2
  4904  0000F7                     ??_dir_alloc:
  4905  0000F7                     dir_find@fs:
  4906                           	callstack 0
  4907                           
  4908                           ; 2 bytes @ 0x97
  4909  0000F7                     	ds	2
  4910  0000F9                     dir_find@c:
  4911                           	callstack 0
  4912                           
  4913                           ; 1 bytes @ 0x99
  4914  0000F9                     	ds	1
  4915  0000FA                     dir_find@res:
  4916                           	callstack 0
  4917  0000FA                     dir_alloc@fs:
  4918                           	callstack 0
  4919                           
  4920                           ; 2 bytes @ 0x9A
  4921  0000FA                     	ds	1
  4922  0000FB                     follow_path@dp:
  4923                           	callstack 0
  4924                           
  4925                           ; 2 bytes @ 0x9B
  4926  0000FB                     	ds	1
  4927  0000FC                     dir_alloc@n:
  4928                           	callstack 0
  4929                           
  4930                           ; 2 bytes @ 0x9C
  4931  0000FC                     	ds	1
  4932  0000FD                     follow_path@path:
  4933                           	callstack 0
  4934                           
  4935                           ; 2 bytes @ 0x9D
  4936  0000FD                     	ds	1
  4937  0000FE                     dir_alloc@res:
  4938                           	callstack 0
  4939                           
  4940                           ; 1 bytes @ 0x9E
  4941  0000FE                     	ds	1
  4942                           
  4943                           	psect	cstackCOMRAM
  4944  000001                     __pcstackCOMRAM:
  4945                           	callstack 0
  4946  000001                     ??_RotaryHandler:
  4947  000001                     ??_SoundHandler:
  4948  000001                     ??i2_AlarmSoundOn:
  4949  000001                     EUSART1_Read@readValue:
  4950                           	callstack 0
  4951  000001                     TMR5_WriteTimer@timerVal:
  4952                           	callstack 0
  4953  000001                     TMR1_WriteTimer@timerVal:
  4954                           	callstack 0
  4955                           
  4956                           ; 2 bytes @ 0x0
  4957  000001                     	ds	1
  4958  000002                     ??_Timer5Handler:
  4959  000002                     RotaryHandler@newBdata:
  4960                           	callstack 0
  4961                           
  4962                           ; 1 bytes @ 0x1
  4963  000002                     	ds	1
  4964  000003                     SoundHandler@num:
  4965                           	callstack 0
  4966  000003                     i2AlarmSoundOn@sn:
  4967                           	callstack 0
  4968                           
  4969                           ; 1 bytes @ 0x2
  4970  000003                     	ds	1
  4971  000004                     
  4972                           ; 1 bytes @ 0x3
  4973  000004                     	ds	2
  4974  000006                     Timer5Handler@rxStatus:
  4975                           	callstack 0
  4976                           
  4977                           ; 1 bytes @ 0x5
  4978  000006                     	ds	1
  4979  000007                     Timer5Handler@rxData:
  4980                           	callstack 0
  4981                           
  4982                           ; 1 bytes @ 0x6
  4983  000007                     	ds	1
  4984  000008                     ??_INTERRUPT_InterruptManager:
  4985                           
  4986                           ; 1 bytes @ 0x7
  4987  000008                     	ds	6
  4988  00000E                     ??_SPI1_Open:
  4989  00000E                     ??_Bcd2Hex:
  4990  00000E                     ??_AlarmSoundOn:
  4991  00000E                     ??_isdigit:
  4992  00000E                     ?_strlen:
  4993                           	callstack 0
  4994  00000E                     ?_strchr:
  4995                           	callstack 0
  4996  00000E                     ?_strncmp:
  4997                           	callstack 0
  4998  00000E                     ?_ld_word:
  4999                           	callstack 0
  5000  00000E                     ?_mem_cmp:
  5001                           	callstack 0
  5002  00000E                     ?_chk_chr:
  5003                           	callstack 0
  5004  00000E                     ?_dbc_1st:
  5005                           	callstack 0
  5006  00000E                     ?_dbc_2nd:
  5007                           	callstack 0
  5008  00000E                     ?_get_ldnumber:
  5009                           	callstack 0
  5010  00000E                     ?_ADC_GetConversion:
  5011                           	callstack 0
  5012  00000E                     ?_crc16:
  5013                           	callstack 0
  5014  00000E                     ?___awdiv:
  5015                           	callstack 0
  5016  00000E                     ?___awmod:
  5017                           	callstack 0
  5018  00000E                     ?___lwmod:
  5019                           	callstack 0
  5020  00000E                     ?_ld_dword:
  5021                           	callstack 0
  5022  00000E                     ?___lmul:
  5023                           	callstack 0
  5024  00000E                     ?___lldiv:
  5025                           	callstack 0
  5026  00000E                     ?___almod:
  5027                           	callstack 0
  5028  00000E                     disk_status@pdrv:
  5029                           	callstack 0
  5030  00000E                     disk_ioctl@cmd:
  5031                           	callstack 0
  5032  00000E                     SPI1_ExchangeByte@data:
  5033                           	callstack 0
  5034  00000E                     I2C2_Open@address:
  5035                           	callstack 0
  5036  00000E                     I2C2_Close@returnValue:
  5037                           	callstack 0
  5038  00000E                     I2C2_MasterSendTxData@data:
  5039                           	callstack 0
  5040  00000E                     crc16@ptr:
  5041                           	callstack 0
  5042  00000E                     ___lbdiv@divisor:
  5043                           	callstack 0
  5044  00000E                     ___lbmod@divisor:
  5045                           	callstack 0
  5046  00000E                     memcpy@d1:
  5047                           	callstack 0
  5048  00000E                     ld_word@ptr:
  5049                           	callstack 0
  5050  00000E                     ld_dword@ptr:
  5051                           	callstack 0
  5052  00000E                     st_word@ptr:
  5053                           	callstack 0
  5054  00000E                     mem_cpy@dst:
  5055                           	callstack 0
  5056  00000E                     mem_set@dst:
  5057                           	callstack 0
  5058  00000E                     mem_cmp@dst:
  5059                           	callstack 0
  5060  00000E                     chk_chr@str:
  5061                           	callstack 0
  5062  00000E                     get_ldnumber@path:
  5063                           	callstack 0
  5064  00000E                     IOCB4_SetInterruptHandler@InterruptHandler:
  5065                           	callstack 0
  5066  00000E                     TMR0_SetInterruptHandler@InterruptHandler:
  5067                           	callstack 0
  5068  00000E                     INT0_SetInterruptHandler@InterruptHandler:
  5069                           	callstack 0
  5070  00000E                     EUSART1_SetFramingErrorHandler@interruptHandler:
  5071                           	callstack 0
  5072  00000E                     EUSART1_SetOverrunErrorHandler@interruptHandler:
  5073                           	callstack 0
  5074  00000E                     EUSART1_SetErrorHandler@interruptHandler:
  5075                           	callstack 0
  5076  00000E                     EUSART1_SetRxInterruptHandler@interruptHandler:
  5077                           	callstack 0
  5078  00000E                     DATAEE_WriteByte@bAdd:
  5079                           	callstack 0
  5080  00000E                     DATAEE_ReadByte@bAdd:
  5081                           	callstack 0
  5082  00000E                     TMR5_SetInterruptHandler@InterruptHandler:
  5083                           	callstack 0
  5084  00000E                     TMR1_SetInterruptHandler@InterruptHandler:
  5085                           	callstack 0
  5086  00000E                     SPI1_ExchangeBlock@block:
  5087                           	callstack 0
  5088  00000E                     EPWM1_LoadDutyValue@dutyValue:
  5089                           	callstack 0
  5090  00000E                     I2C2_SetBuffer@buffer:
  5091                           	callstack 0
  5092  00000E                     I2C2_SetCallback@cb:
  5093                           	callstack 0
  5094  00000E                     ButtonPush@x:
  5095                           	callstack 0
  5096  00000E                     display_setTextColor@c:
  5097                           	callstack 0
  5098  00000E                     _display_setTextSize$6973:
  5099                           	callstack 0
  5100  00000E                     display_setCursor@x:
  5101                           	callstack 0
  5102  00000E                     display_SetFont@font:
  5103                           	callstack 0
  5104  00000E                     IncDecTime@dmm:
  5105                           	callstack 0
  5106  00000E                     ___awdiv@dividend:
  5107                           	callstack 0
  5108  00000E                     ___awmod@dividend:
  5109                           	callstack 0
  5110  00000E                     ___lwmod@dividend:
  5111                           	callstack 0
  5112  00000E                     memset@p1:
  5113                           	callstack 0
  5114  00000E                     strchr@ptr:
  5115                           	callstack 0
  5116  00000E                     strlen@s:
  5117                           	callstack 0
  5118  00000E                     strncmp@s1:
  5119                           	callstack 0
  5120  00000E                     ___lmul@multiplier:
  5121                           	callstack 0
  5122  00000E                     ___lldiv@dividend:
  5123                           	callstack 0
  5124  00000E                     ___almod@dividend:
  5125                           	callstack 0
  5126                           
  5127                           ; 4 bytes @ 0xD
  5128  00000E                     	ds	1
  5129  00000F                     ??_SD_SPI_DelayMilliseconds:
  5130  00000F                     disk_status@stat:
  5131                           	callstack 0
  5132  00000F                     SPI1_Open@spi1UniqueConfiguration:
  5133                           	callstack 0
  5134  00000F                     SPI1_ReadBlock@block:
  5135                           	callstack 0
  5136  00000F                     I2C2_Open@returnValue:
  5137                           	callstack 0
  5138  00000F                     write_command@cmd:
  5139                           	callstack 0
  5140  00000F                     write_data@data:
  5141                           	callstack 0
  5142  00000F                     Bcd2Hex@x:
  5143                           	callstack 0
  5144  00000F                     crc16@len:
  5145                           	callstack 0
  5146  00000F                     ___lbdiv@dividend:
  5147                           	callstack 0
  5148  00000F                     ___lbmod@dividend:
  5149                           	callstack 0
  5150  00000F                     _isdigit$8105:
  5151                           	callstack 0
  5152  00000F                     memcpy@s1:
  5153                           	callstack 0
  5154  00000F                     disk_ioctl@buff:
  5155                           	callstack 0
  5156                           
  5157                           ; 2 bytes @ 0xE
  5158  00000F                     	ds	1
  5159  000010                     ??_TMR0_Initialize:
  5160  000010                     ??_display_SetFont:
  5161  000010                     ??_ld_word:
  5162  000010                     ??_get_ldnumber:
  5163  000010                     ??_ADC_GetConversion:
  5164  000010                     ??_EPWM1_LoadDutyValue:
  5165  000010                     ??_crc16:
  5166  000010                     ?_decimalToFatTime:
  5167                           	callstack 0
  5168  000010                     spi_master_open@config:
  5169                           	callstack 0
  5170  000010                     dbc_1st@c:
  5171                           	callstack 0
  5172  000010                     dbc_2nd@c:
  5173                           	callstack 0
  5174  000010                     DATAEE_WriteByte@bData:
  5175                           	callstack 0
  5176  000010                     AlarmSoundOn@sn:
  5177                           	callstack 0
  5178  000010                     display_setTextSize@s:
  5179                           	callstack 0
  5180  000010                     ___lbdiv@counter:
  5181                           	callstack 0
  5182  000010                     ___lbmod@counter:
  5183                           	callstack 0
  5184  000010                     isdigit@c:
  5185                           	callstack 0
  5186  000010                     st_word@val:
  5187                           	callstack 0
  5188  000010                     mem_cpy@src:
  5189                           	callstack 0
  5190  000010                     mem_set@val:
  5191                           	callstack 0
  5192  000010                     mem_cmp@src:
  5193                           	callstack 0
  5194  000010                     chk_chr@chr:
  5195                           	callstack 0
  5196  000010                     validate@obj:
  5197                           	callstack 0
  5198  000010                     decimalToFatTime@year:
  5199                           	callstack 0
  5200  000010                     SPI1_ExchangeBlock@blockSize:
  5201                           	callstack 0
  5202  000010                     SPI1_ReadBlock@blockSize:
  5203                           	callstack 0
  5204  000010                     I2C2_SetBuffer@bufferSize:
  5205                           	callstack 0
  5206  000010                     I2C2_SetCallback@ptr:
  5207                           	callstack 0
  5208  000010                     ButtonPush@y:
  5209                           	callstack 0
  5210  000010                     display_setTextColor@b:
  5211                           	callstack 0
  5212  000010                     display_setCursor@y:
  5213                           	callstack 0
  5214  000010                     IncDecTime@hh:
  5215                           	callstack 0
  5216  000010                     ___awdiv@divisor:
  5217                           	callstack 0
  5218  000010                     ___awmod@divisor:
  5219                           	callstack 0
  5220  000010                     ___lwmod@divisor:
  5221                           	callstack 0
  5222  000010                     memcpy@n:
  5223                           	callstack 0
  5224  000010                     memset@c:
  5225                           	callstack 0
  5226  000010                     strchr@chr:
  5227                           	callstack 0
  5228  000010                     strlen@cp:
  5229                           	callstack 0
  5230  000010                     strncmp@s2:
  5231                           	callstack 0
  5232                           
  5233                           ; 2 bytes @ 0xF
  5234  000010                     	ds	1
  5235  000011                     ??_glcd_init2:
  5236  000011                     ??_glcd_init:
  5237  000011                     disk_ioctl@pdrv:
  5238                           	callstack 0
  5239  000011                     SD_SPI_DelayMilliseconds@milliseconds:
  5240                           	callstack 0
  5241  000011                     DATAEE_WriteByte@GIEBitValue:
  5242                           	callstack 0
  5243  000011                     crc16@ii:
  5244                           	callstack 0
  5245  000011                     ___lbdiv@quotient:
  5246                           	callstack 0
  5247  000011                     ___lbmod@rem:
  5248                           	callstack 0
  5249  000011                     addset@x:
  5250                           	callstack 0
  5251  000011                     lcd_set_cursor_x@x:
  5252                           	callstack 0
  5253  000011                     lcd_set_cursor_y@y:
  5254                           	callstack 0
  5255  000011                     draw_pixel@color:
  5256                           	callstack 0
  5257                           
  5258                           ; 2 bytes @ 0x10
  5259  000011                     	ds	1
  5260  000012                     ??_Hex2Bcd:
  5261  000012                     ??_strchr:
  5262  000012                     ??_ld_dword:
  5263  000012                     ??_chk_chr:
  5264  000012                     ??_WriteYMD:
  5265  000012                     decimalToFatTime@month:
  5266                           	callstack 0
  5267  000012                     ADC_GetConversion@channel:
  5268                           	callstack 0
  5269  000012                     SPI1_ReadBlock@data:
  5270                           	callstack 0
  5271  000012                     I2C2_SetCallback@idx:
  5272                           	callstack 0
  5273  000012                     ButtonPush@btn:
  5274                           	callstack 0
  5275  000012                     ___awdiv@counter:
  5276                           	callstack 0
  5277  000012                     ___awmod@counter:
  5278                           	callstack 0
  5279  000012                     ___lwmod@counter:
  5280                           	callstack 0
  5281  000012                     memcpy@tmp:
  5282                           	callstack 0
  5283  000012                     mem_cpy@cnt:
  5284                           	callstack 0
  5285  000012                     mem_set@cnt:
  5286                           	callstack 0
  5287  000012                     mem_cmp@cnt:
  5288                           	callstack 0
  5289  000012                     st_clust@fs:
  5290                           	callstack 0
  5291  000012                     validate@rfs:
  5292                           	callstack 0
  5293  000012                     SD_SPI_DelayMilliseconds@timeout:
  5294                           	callstack 0
  5295  000012                     SPI1_ExchangeBlock@data:
  5296                           	callstack 0
  5297  000012                     IncDecTime@mm:
  5298                           	callstack 0
  5299  000012                     crc16@crc:
  5300                           	callstack 0
  5301  000012                     memset@n:
  5302                           	callstack 0
  5303  000012                     strncmp@len:
  5304                           	callstack 0
  5305  000012                     ___lmul@multiplicand:
  5306                           	callstack 0
  5307  000012                     ___lldiv@divisor:
  5308                           	callstack 0
  5309  000012                     ___almod@divisor:
  5310                           	callstack 0
  5311                           
  5312                           ; 4 bytes @ 0x11
  5313  000012                     	ds	1
  5314  000013                     ??_ButtonPush:
  5315  000013                     ?_sind:
  5316                           	callstack 0
  5317  000013                     ?_dylen:
  5318                           	callstack 0
  5319  000013                     ?_isleap:
  5320                           	callstack 0
  5321  000013                     decimalToFatTime@day:
  5322                           	callstack 0
  5323  000013                     lcd_set_cursor_x@hi:
  5324                           	callstack 0
  5325  000013                     lcd_set_cursor_y@hi:
  5326                           	callstack 0
  5327  000013                     Hex2Bcd@x:
  5328                           	callstack 0
  5329  000013                     GetTouchRawXY@tx:
  5330                           	callstack 0
  5331  000013                     ___awdiv@sign:
  5332                           	callstack 0
  5333  000013                     ___awmod@sign:
  5334                           	callstack 0
  5335  000013                     memcpy@d:
  5336                           	callstack 0
  5337  000013                     ld_word@rv:
  5338                           	callstack 0
  5339  000013                     I2C2_SetDataCompleteCallback@cb:
  5340                           	callstack 0
  5341  000013                     I2C2_SetAddressNackCallback@cb:
  5342                           	callstack 0
  5343  000013                     sind@theta:
  5344                           	callstack 0
  5345  000013                     addset@y:
  5346                           	callstack 0
  5347  000013                     dylen@yr:
  5348                           	callstack 0
  5349  000013                     isleap@yr:
  5350                           	callstack 0
  5351                           
  5352                           ; 2 bytes @ 0x12
  5353  000013                     	ds	1
  5354  000014                     ??_strncmp:
  5355  000014                     ??_mem_cmp:
  5356  000014                     ??_validate:
  5357  000014                     decimalToFatTime@hour:
  5358                           	callstack 0
  5359  000014                     lcd_set_cursor_x@lo:
  5360                           	callstack 0
  5361  000014                     lcd_set_cursor_y@lo:
  5362                           	callstack 0
  5363  000014                     GetTouchRawXY@ty:
  5364                           	callstack 0
  5365  000014                     memcpy@s:
  5366                           	callstack 0
  5367  000014                     mem_cpy@d:
  5368                           	callstack 0
  5369  000014                     mem_set@d:
  5370                           	callstack 0
  5371  000014                     st_clust@dir:
  5372                           	callstack 0
  5373  000014                     get_ldnumber@i:
  5374                           	callstack 0
  5375  000014                     CheckCheckSum@buf:
  5376                           	callstack 0
  5377  000014                     IncDecTime@min:
  5378                           	callstack 0
  5379  000014                     ___awdiv@quotient:
  5380                           	callstack 0
  5381  000014                     memset@p:
  5382                           	callstack 0
  5383                           
  5384                           ; 2 bytes @ 0x13
  5385  000014                     	ds	1
  5386  000015                     ??_sind:
  5387  000015                     ??_GetTouchRawXY:
  5388  000015                     ??_dylen:
  5389  000015                     ??_isleap:
  5390  000015                     ?_ld_clust:
  5391                           	callstack 0
  5392  000015                     ?_SD_SendCmd:
  5393                           	callstack 0
  5394  000015                     decimalToFatTime@minute:
  5395                           	callstack 0
  5396  000015                     ld_clust@fs:
  5397                           	callstack 0
  5398  000015                     I2C2_SetDataCompleteCallback@ptr:
  5399                           	callstack 0
  5400  000015                     I2C2_SetAddressNackCallback@ptr:
  5401                           	callstack 0
  5402  000015                     ButtonPush@xx:
  5403                           	callstack 0
  5404  000015                     addset@xx:
  5405                           	callstack 0
  5406  000015                     lcd_set_cursor@x:
  5407                           	callstack 0
  5408  000015                     SD_SendCmd@address:
  5409                           	callstack 0
  5410                           
  5411                           ; 4 bytes @ 0x14
  5412  000015                     	ds	1
  5413  000016                     ??_CheckCheckSum:
  5414  000016                     get_ldnumber@tc:
  5415                           	callstack 0
  5416  000016                     decimalToFatTime@seconds:
  5417                           	callstack 0
  5418  000016                     ___almod@counter:
  5419                           	callstack 0
  5420  000016                     _isleap$8130:
  5421                           	callstack 0
  5422  000016                     mem_cpy@s:
  5423                           	callstack 0
  5424  000016                     mem_cmp@d:
  5425                           	callstack 0
  5426  000016                     create_name@dp:
  5427                           	callstack 0
  5428  000016                     IncDecTime@hour:
  5429                           	callstack 0
  5430  000016                     st_clust@cl:
  5431                           	callstack 0
  5432  000016                     WriteYMD@tmp:
  5433                           	callstack 0
  5434  000016                     ___lmul@product:
  5435                           	callstack 0
  5436  000016                     ___lldiv@quotient:
  5437                           	callstack 0
  5438                           
  5439                           ; 4 bytes @ 0x15
  5440  000016                     	ds	1
  5441  000017                     ??_decimalToFatTime:
  5442  000017                     ___almod@sign:
  5443                           	callstack 0
  5444  000017                     rd1RegCompleteHandler@ptr:
  5445                           	callstack 0
  5446  000017                     rd2RegCompleteHandler@ptr:
  5447                           	callstack 0
  5448  000017                     wr1RegCompleteHandler@ptr:
  5449                           	callstack 0
  5450  000017                     wr2RegCompleteHandler@ptr:
  5451                           	callstack 0
  5452  000017                     rdBlkRegCompleteHandler@ptr:
  5453                           	callstack 0
  5454  000017                     ld_clust@dir:
  5455                           	callstack 0
  5456  000017                     get_ldnumber@tt:
  5457                           	callstack 0
  5458  000017                     I2C2_CallbackReturnReset@funPtr:
  5459                           	callstack 0
  5460  000017                     ButtonPush@yy:
  5461                           	callstack 0
  5462  000017                     addset@yy:
  5463                           	callstack 0
  5464  000017                     lcd_set_cursor@y:
  5465                           	callstack 0
  5466  000017                     ld_dword@rv:
  5467                           	callstack 0
  5468                           
  5469                           ; 4 bytes @ 0x16
  5470  000017                     	ds	1
  5471  000018                     create_name@path:
  5472                           	callstack 0
  5473  000018                     mem_cmp@s:
  5474                           	callstack 0
  5475  000018                     _validate$1212:
  5476                           	callstack 0
  5477  000018                     GetTouchRawXY@data:
  5478                           	callstack 0
  5479                           
  5480                           ; 2 bytes @ 0x17
  5481  000018                     	ds	1
  5482  000019                     ??_ld_clust:
  5483  000019                     ??_create_name:
  5484  000019                     get_ldnumber@vol:
  5485                           	callstack 0
  5486  000019                     _I2C2_DO_TX$5388:
  5487                           	callstack 0
  5488  000019                     lcd_draw_pixel_at@x:
  5489                           	callstack 0
  5490  000019                     lcd_fill@bg_color:
  5491                           	callstack 0
  5492  000019                     drawHLine@x:
  5493                           	callstack 0
  5494  000019                     drawVLine@x:
  5495                           	callstack 0
  5496  000019                     lcd_fill_rect@x0:
  5497                           	callstack 0
  5498                           
  5499                           ; 2 bytes @ 0x18
  5500  000019                     	ds	1
  5501  00001A                     ??_SD_SendCmd:
  5502  00001A                     ?_clst2sect:
  5503                           	callstack 0
  5504  00001A                     ?___aldiv:
  5505                           	callstack 0
  5506  00001A                     validate@res:
  5507                           	callstack 0
  5508  00001A                     WriteYMD@jj:
  5509                           	callstack 0
  5510  00001A                     ___lldiv@counter:
  5511                           	callstack 0
  5512  00001A                     mem_cmp@r:
  5513                           	callstack 0
  5514  00001A                     clst2sect@fs:
  5515                           	callstack 0
  5516  00001A                     ___aldiv@dividend:
  5517                           	callstack 0
  5518                           
  5519                           ; 4 bytes @ 0x19
  5520  00001A                     	ds	1
  5521  00001B                     ??_I2C2_MasterFsm:
  5522  00001B                     ?_cosd:
  5523                           	callstack 0
  5524  00001B                     lcd_fill@hi:
  5525                           	callstack 0
  5526  00001B                     get_ldnumber@tp:
  5527                           	callstack 0
  5528  00001B                     cosd@theta:
  5529                           	callstack 0
  5530  00001B                     lcd_draw_pixel_at@y:
  5531                           	callstack 0
  5532  00001B                     drawHLine@y:
  5533                           	callstack 0
  5534  00001B                     drawVLine@y:
  5535                           	callstack 0
  5536  00001B                     lcd_fill_rect@y0:
  5537                           	callstack 0
  5538  00001B                     decimalToFatTime@fatTime:
  5539                           	callstack 0
  5540                           
  5541                           ; 4 bytes @ 0x1A
  5542  00001B                     	ds	1
  5543  00001C                     lcd_fill@lo:
  5544                           	callstack 0
  5545  00001C                     clst2sect@clst:
  5546                           	callstack 0
  5547  00001C                     SD_SendCmd@longTimeout:
  5548                           	callstack 0
  5549                           
  5550                           ; 4 bytes @ 0x1B
  5551  00001C                     	ds	1
  5552  00001D                     ?___wmul:
  5553                           	callstack 0
  5554  00001D                     I2C2_MasterOperation@read:
  5555                           	callstack 0
  5556  00001D                     _create_name$1054:
  5557                           	callstack 0
  5558  00001D                     lcd_draw_pixel_at@color:
  5559                           	callstack 0
  5560  00001D                     lcd_fill@height:
  5561                           	callstack 0
  5562  00001D                     drawHLine@w:
  5563                           	callstack 0
  5564  00001D                     drawVLine@h:
  5565                           	callstack 0
  5566  00001D                     lcd_fill_rect@x1:
  5567                           	callstack 0
  5568  00001D                     ___wmul@multiplier:
  5569                           	callstack 0
  5570  00001D                     ld_clust@cl:
  5571                           	callstack 0
  5572                           
  5573                           ; 4 bytes @ 0x1C
  5574  00001D                     	ds	1
  5575  00001E                     I2C2_MasterOperation@returnValue:
  5576                           	callstack 0
  5577  00001E                     ___aldiv@divisor:
  5578                           	callstack 0
  5579                           
  5580                           ; 4 bytes @ 0x1D
  5581  00001E                     	ds	1
  5582  00001F                     ?_get_fattime:
  5583                           	callstack 0
  5584  00001F                     I2C2_Read1ByteRegister@reg:
  5585                           	callstack 0
  5586  00001F                     I2C2_Write1ByteRegister@reg:
  5587                           	callstack 0
  5588  00001F                     I2C2_WriteNBytes@data:
  5589                           	callstack 0
  5590  00001F                     I2C2_ReadNBytes@data:
  5591                           	callstack 0
  5592  00001F                     I2C2_ReadDataBlock@reg:
  5593                           	callstack 0
  5594  00001F                     create_name@d:
  5595                           	callstack 0
  5596  00001F                     lcd_fill@width:
  5597                           	callstack 0
  5598  00001F                     drawHLine@color:
  5599                           	callstack 0
  5600  00001F                     drawVLine@color:
  5601                           	callstack 0
  5602  00001F                     writeLine@x0:
  5603                           	callstack 0
  5604  00001F                     lcd_fill_rect@y1:
  5605                           	callstack 0
  5606  00001F                     display_drawCircleHelper@x0:
  5607                           	callstack 0
  5608  00001F                     display_drawCircle@x0:
  5609                           	callstack 0
  5610  00001F                     ___wmul@multiplicand:
  5611                           	callstack 0
  5612                           
  5613                           ; 2 bytes @ 0x1E
  5614  00001F                     	ds	1
  5615  000020                     ??_clst2sect:
  5616  000020                     I2C2_Read1ByteRegister@address:
  5617                           	callstack 0
  5618  000020                     I2C2_Write1ByteRegister@data:
  5619                           	callstack 0
  5620  000020                     I2C2_WriteNBytes@len:
  5621                           	callstack 0
  5622  000020                     I2C2_ReadNBytes@len:
  5623                           	callstack 0
  5624  000020                     I2C2_ReadDataBlock@data:
  5625                           	callstack 0
  5626  000020                     create_name@ni:
  5627                           	callstack 0
  5628  000020                     SD_SendCmd@address_bytes:
  5629                           	callstack 0
  5630                           
  5631                           ; 4 bytes @ 0x1F
  5632  000020                     	ds	1
  5633  000021                     ??_drawHLine:
  5634  000021                     ??_drawVLine:
  5635  000021                     I2C2_Read1ByteRegister@returnValue:
  5636                           	callstack 0
  5637  000021                     I2C2_Write1ByteRegister@address:
  5638                           	callstack 0
  5639  000021                     writeLine@y0:
  5640                           	callstack 0
  5641  000021                     lcd_fill_rect@color:
  5642                           	callstack 0
  5643  000021                     display_drawCircleHelper@y0:
  5644                           	callstack 0
  5645  000021                     display_drawCircle@y0:
  5646                           	callstack 0
  5647  000021                     ___wmul@product:
  5648                           	callstack 0
  5649                           
  5650                           ; 2 bytes @ 0x20
  5651  000021                     	ds	1
  5652  000022                     I2C2_WriteNBytes@address:
  5653                           	callstack 0
  5654  000022                     I2C2_ReadNBytes@address:
  5655                           	callstack 0
  5656  000022                     ___aldiv@counter:
  5657                           	callstack 0
  5658  000022                     I2C2_ReadDataBlock@len:
  5659                           	callstack 0
  5660  000022                     create_name@p:
  5661                           	callstack 0
  5662  000022                     RTC_setAlarmTime@alarmtime:
  5663                           	callstack 0
  5664  000022                     RTC_setTime@datetime:
  5665                           	callstack 0
  5666  000022                     RTC_setDate@datetime:
  5667                           	callstack 0
  5668                           
  5669                           ; 2 bytes @ 0x21
  5670  000022                     	ds	1
  5671  000023                     ??_get_fattime:
  5672  000023                     ??_lcd_fill_rect:
  5673  000023                     ?___lwdiv:
  5674                           	callstack 0
  5675  000023                     ___aldiv@sign:
  5676                           	callstack 0
  5677  000023                     writeLine@x1:
  5678                           	callstack 0
  5679  000023                     display_drawCircleHelper@r:
  5680                           	callstack 0
  5681  000023                     display_drawCircle@r:
  5682                           	callstack 0
  5683  000023                     get_tempHumidity@temp:
  5684                           	callstack 0
  5685  000023                     ___lwdiv@dividend:
  5686                           	callstack 0
  5687                           
  5688                           ; 2 bytes @ 0x22
  5689  000023                     	ds	1
  5690  000024                     I2C2_ReadDataBlock@address:
  5691                           	callstack 0
  5692  000024                     CheckCheckSum@checksum:
  5693                           	callstack 0
  5694  000024                     st_dword@ptr:
  5695                           	callstack 0
  5696  000024                     create_name@si:
  5697                           	callstack 0
  5698  000024                     SD_SendCmd@timeout:
  5699                           	callstack 0
  5700  000024                     ___aldiv@quotient:
  5701                           	callstack 0
  5702                           
  5703                           ; 4 bytes @ 0x23
  5704  000024                     	ds	1
  5705  000025                     drawHLine@hi:
  5706                           	callstack 0
  5707  000025                     drawVLine@hi:
  5708                           	callstack 0
  5709  000025                     display_drawCircleHelper@cornername:
  5710                           	callstack 0
  5711  000025                     CheckCheckSum@start:
  5712                           	callstack 0
  5713  000025                     writeLine@y1:
  5714                           	callstack 0
  5715  000025                     display_drawCircle@color:
  5716                           	callstack 0
  5717  000025                     get_tempHumidity@humidity:
  5718                           	callstack 0
  5719  000025                     ___lwdiv@divisor:
  5720                           	callstack 0
  5721  000025                     I2C2_ReadDataBlock@bufferBlock:
  5722                           	callstack 0
  5723                           
  5724                           ; 4 bytes @ 0x24
  5725  000025                     	ds	1
  5726  000026                     SD_SendCmd@cmd:
  5727                           	callstack 0
  5728  000026                     drawHLine@lo:
  5729                           	callstack 0
  5730  000026                     drawVLine@lo:
  5731                           	callstack 0
  5732  000026                     create_name@sfn:
  5733                           	callstack 0
  5734  000026                     display_drawCircleHelper@color:
  5735                           	callstack 0
  5736  000026                     st_dword@val:
  5737                           	callstack 0
  5738                           
  5739                           ; 4 bytes @ 0x25
  5740  000026                     	ds	1
  5741  000027                     ??_get_tempHumidity:
  5742  000027                     ??_display_drawCircle:
  5743  000027                     ___lwdiv@counter:
  5744                           	callstack 0
  5745  000027                     CheckCheckSum@end:
  5746                           	callstack 0
  5747  000027                     writeLine@color:
  5748                           	callstack 0
  5749  000027                     lcd_fill_rect@ii:
  5750                           	callstack 0
  5751  000027                     display_drawRect@x:
  5752                           	callstack 0
  5753  000027                     display_fillCircleHelper@x0:
  5754                           	callstack 0
  5755  000027                     display_fillTriangle@x0:
  5756                           	callstack 0
  5757  000027                     SD_SendCmd@response:
  5758                           	callstack 0
  5759                           
  5760                           ; 5 bytes @ 0x26
  5761  000027                     	ds	1
  5762  000028                     ??_display_drawCircleHelper:
  5763  000028                     ?_gmtime:
  5764                           	callstack 0
  5765  000028                     gmtime@tp:
  5766                           	callstack 0
  5767  000028                     create_name@i:
  5768                           	callstack 0
  5769  000028                     TransCoordination@x:
  5770                           	callstack 0
  5771  000028                     ___lwdiv@quotient:
  5772                           	callstack 0
  5773                           
  5774                           ; 2 bytes @ 0x27
  5775  000028                     	ds	1
  5776  000029                     ??_writeLine:
  5777  000029                     lcd_fill_rect@jj:
  5778                           	callstack 0
  5779  000029                     display_drawRect@y:
  5780                           	callstack 0
  5781  000029                     display_drawCircle@ddF_x:
  5782                           	callstack 0
  5783  000029                     display_fillCircleHelper@y0:
  5784                           	callstack 0
  5785  000029                     display_fillTriangle@y0:
  5786                           	callstack 0
  5787  000029                     RTC_read@datetime:
  5788                           	callstack 0
  5789  000029                     get_tempHumidity@data:
  5790                           	callstack 0
  5791                           
  5792                           ; 3 bytes @ 0x28
  5793  000029                     	ds	1
  5794  00002A                     ??_gmtime:
  5795  00002A                     ?_sprintf:
  5796                           	callstack 0
  5797  00002A                     ?_months_to_days:
  5798                           	callstack 0
  5799  00002A                     ?_years_to_days:
  5800                           	callstack 0
  5801  00002A                     create_name@c:
  5802                           	callstack 0
  5803  00002A                     display_drawCircleHelper@ddF_x:
  5804                           	callstack 0
  5805  00002A                     GetTouchLocation@tx:
  5806                           	callstack 0
  5807  00002A                     TransCoordination@y:
  5808                           	callstack 0
  5809  00002A                     sprintf@sp:
  5810                           	callstack 0
  5811  00002A                     months_to_days@month:
  5812                           	callstack 0
  5813  00002A                     years_to_days@yr:
  5814                           	callstack 0
  5815                           
  5816                           ; 2 bytes @ 0x29
  5817  00002A                     	ds	1
  5818  00002B                     lcd_fill_rect@hi:
  5819                           	callstack 0
  5820  00002B                     writeLine@t:
  5821                           	callstack 0
  5822  00002B                     display_drawRect@w:
  5823                           	callstack 0
  5824  00002B                     display_drawCircle@ddF_y:
  5825                           	callstack 0
  5826  00002B                     display_fillCircleHelper@r:
  5827                           	callstack 0
  5828  00002B                     display_fillTriangle@x1:
  5829                           	callstack 0
  5830                           
  5831                           ; 2 bytes @ 0x2A
  5832  00002B                     	ds	1
  5833  00002C                     ??_SD_SPI_MediaInitialize:
  5834  00002C                     SD_SPI_AsyncReadTasks@info:
  5835                           	callstack 0
  5836  00002C                     SD_SPI_AsyncWriteTasks@info:
  5837                           	callstack 0
  5838  00002C                     lcd_fill_rect@lo:
  5839                           	callstack 0
  5840  00002C                     display_drawCircleHelper@ddF_y:
  5841                           	callstack 0
  5842  00002C                     GetTouchLocation@ty:
  5843                           	callstack 0
  5844  00002C                     TransCoordination@xg:
  5845                           	callstack 0
  5846  00002C                     sprintf@f:
  5847                           	callstack 0
  5848  00002C                     get_tempHumidity@work:
  5849                           	callstack 0
  5850                           
  5851                           ; 8 bytes @ 0x2B
  5852  00002C                     	ds	1
  5853  00002D                     ??_SD_SPI_AsyncReadTasks:
  5854  00002D                     ??_SD_SPI_AsyncWriteTasks:
  5855  00002D                     display_fillCircleHelper@corners:
  5856                           	callstack 0
  5857  00002D                     writeLine@t_7079:
  5858                           	callstack 0
  5859  00002D                     fillRect@x:
  5860                           	callstack 0
  5861  00002D                     display_drawRect@h:
  5862                           	callstack 0
  5863  00002D                     display_drawCircle@f:
  5864                           	callstack 0
  5865  00002D                     display_fillTriangle@y1:
  5866                           	callstack 0
  5867  00002D                     gmtime@tc:
  5868                           	callstack 0
  5869                           
  5870                           ; 4 bytes @ 0x2C
  5871  00002D                     	ds	1
  5872  00002E                     ??_GetTouchLocation:
  5873  00002E                     ??_years_to_days:
  5874  00002E                     display_drawCircleHelper@f:
  5875                           	callstack 0
  5876  00002E                     display_fillCircleHelper@delta:
  5877                           	callstack 0
  5878  00002E                     TransCoordination@yg:
  5879                           	callstack 0
  5880                           
  5881                           ; 2 bytes @ 0x2D
  5882  00002E                     	ds	1
  5883  00002F                     writeLine@t_7080:
  5884                           	callstack 0
  5885  00002F                     fillRect@y:
  5886                           	callstack 0
  5887  00002F                     display_drawRect@color:
  5888                           	callstack 0
  5889  00002F                     display_drawCircle@x:
  5890                           	callstack 0
  5891  00002F                     display_fillTriangle@x2:
  5892                           	callstack 0
  5893                           
  5894                           ; 2 bytes @ 0x2E
  5895  00002F                     	ds	1
  5896  000030                     ??_TransCoordination:
  5897  000030                     display_drawCircleHelper@x:
  5898                           	callstack 0
  5899  000030                     display_fillCircleHelper@color:
  5900                           	callstack 0
  5901  000030                     years_to_days@ret:
  5902                           	callstack 0
  5903                           
  5904                           ; 4 bytes @ 0x2F
  5905  000030                     	ds	1
  5906  000031                     ??_display_drawRect:
  5907  000031                     ?_localtime:
  5908                           	callstack 0
  5909  000031                     localtime@tp:
  5910                           	callstack 0
  5911  000031                     writeLine@t_7081:
  5912                           	callstack 0
  5913  000031                     fillRect@w:
  5914                           	callstack 0
  5915  000031                     display_drawCircle@y:
  5916                           	callstack 0
  5917  000031                     display_fillTriangle@y2:
  5918                           	callstack 0
  5919  000031                     SD_SPI_AsyncReadTasks@response:
  5920                           	callstack 0
  5921  000031                     SD_SPI_AsyncWriteTasks@response:
  5922                           	callstack 0
  5923                           
  5924                           ; 5 bytes @ 0x30
  5925  000031                     	ds	1
  5926  000032                     ??_display_fillCircleHelper:
  5927  000032                     display_drawCircleHelper@y:
  5928                           	callstack 0
  5929  000032                     TransCoordination@xx:
  5930                           	callstack 0
  5931                           
  5932                           ; 4 bytes @ 0x31
  5933  000032                     	ds	1
  5934  000033                     _writeLine$7072:
  5935                           	callstack 0
  5936  000033                     fillRect@h:
  5937                           	callstack 0
  5938  000033                     display_fillTriangle@color:
  5939                           	callstack 0
  5940  000033                     localtime@t:
  5941                           	callstack 0
  5942                           
  5943                           ; 4 bytes @ 0x32
  5944  000033                     	ds	1
  5945  000034                     ?_ymd_to_scalar:
  5946                           	callstack 0
  5947  000034                     display_drawRoundRect@x:
  5948                           	callstack 0
  5949  000034                     get_tempHumidity@error:
  5950                           	callstack 0
  5951  000034                     ymd_to_scalar@yr:
  5952                           	callstack 0
  5953                           
  5954                           ; 2 bytes @ 0x33
  5955  000034                     	ds	1
  5956  000035                     ??_display_fillTriangle:
  5957  000035                     _writeLine$7073:
  5958                           	callstack 0
  5959  000035                     fillRect@color:
  5960                           	callstack 0
  5961  000035                     display_fillCircleHelper@ddF_x:
  5962                           	callstack 0
  5963                           
  5964                           ; 2 bytes @ 0x34
  5965  000035                     	ds	1
  5966  000036                     SD_SPI_AsyncReadTasks@bData:
  5967                           	callstack 0
  5968  000036                     display_drawRoundRect@y:
  5969                           	callstack 0
  5970  000036                     get_tempHumidity@CRC:
  5971                           	callstack 0
  5972  000036                     ymd_to_scalar@mo:
  5973                           	callstack 0
  5974  000036                     SD_SPI_AsyncWriteTasks@preEraseBlockCount:
  5975                           	callstack 0
  5976  000036                     TransCoordination@yy:
  5977                           	callstack 0
  5978                           
  5979                           ; 4 bytes @ 0x35
  5980  000036                     	ds	1
  5981  000037                     ??_fillRect:
  5982  000037                     disk_initialize@pdrv:
  5983                           	callstack 0
  5984  000037                     Dispseg@x:
  5985                           	callstack 0
  5986  000037                     writeLine@dy:
  5987                           	callstack 0
  5988  000037                     display_fillCircleHelper@ddF_y:
  5989                           	callstack 0
  5990  000037                     SD_SPI_SectorRead@sector_address:
  5991                           	callstack 0
  5992                           
  5993                           ; 4 bytes @ 0x36
  5994  000037                     	ds	1
  5995  000038                     disk_initialize@stat:
  5996                           	callstack 0
  5997  000038                     display_drawRoundRect@w:
  5998                           	callstack 0
  5999  000038                     ymd_to_scalar@day:
  6000                           	callstack 0
  6001                           
  6002                           ; 2 bytes @ 0x37
  6003  000038                     	ds	1
  6004  000039                     Dispseg@y:
  6005                           	callstack 0
  6006  000039                     writeLine@ystep:
  6007                           	callstack 0
  6008  000039                     display_fillCircleHelper@f:
  6009                           	callstack 0
  6010                           
  6011                           ; 2 bytes @ 0x38
  6012  000039                     	ds	1
  6013  00003A                     ??_sprintf:
  6014  00003A                     ??_ymd_to_scalar:
  6015  00003A                     display_drawRoundRect@h:
  6016                           	callstack 0
  6017  00003A                     SD_SPI_SectorWrite@sector_address:
  6018                           	callstack 0
  6019                           
  6020                           ; 4 bytes @ 0x39
  6021  00003A                     	ds	1
  6022  00003B                     ??_display_putc:
  6023  00003B                     Dispseg@num:
  6024                           	callstack 0
  6025  00003B                     SD_SPI_SectorRead@buffer:
  6026                           	callstack 0
  6027  00003B                     writeLine@err:
  6028                           	callstack 0
  6029  00003B                     display_fillCircleHelper@py:
  6030                           	callstack 0
  6031                           
  6032                           ; 2 bytes @ 0x3A
  6033  00003B                     	ds	1
  6034  00003C                     Dispseg@size:
  6035                           	callstack 0
  6036  00003C                     display_drawRoundRect@r:
  6037                           	callstack 0
  6038                           
  6039                           ; 2 bytes @ 0x3B
  6040  00003C                     	ds	1
  6041  00003D                     SD_SPI_SectorRead@sector_count:
  6042                           	callstack 0
  6043  00003D                     Dispseg@color:
  6044                           	callstack 0
  6045  00003D                     writeLine@dx:
  6046                           	callstack 0
  6047  00003D                     display_fillCircleHelper@px:
  6048                           	callstack 0
  6049                           
  6050                           ; 2 bytes @ 0x3C
  6051  00003D                     	ds	1
  6052  00003E                     SD_SPI_SectorWrite@buffer:
  6053                           	callstack 0
  6054  00003E                     display_drawRoundRect@color:
  6055                           	callstack 0
  6056  00003E                     _ymd_to_scalar$8143:
  6057                           	callstack 0
  6058                           
  6059                           ; 2 bytes @ 0x3D
  6060  00003E                     	ds	1
  6061  00003F                     ??_SD_SPI_SectorRead:
  6062  00003F                     ??_Dispseg:
  6063  00003F                     writeLine@steep:
  6064                           	callstack 0
  6065  00003F                     display_fillCircleHelper@x:
  6066                           	callstack 0
  6067                           
  6068                           ; 2 bytes @ 0x3E
  6069  00003F                     	ds	1
  6070  000040                     ??_display_drawRoundRect:
  6071  000040                     ??_display_drawLine:
  6072  000040                     SD_SPI_SectorWrite@sector_count:
  6073                           	callstack 0
  6074  000040                     display_puts@s:
  6075                           	callstack 0
  6076  000040                     ymd_to_scalar@scalar:
  6077                           	callstack 0
  6078                           
  6079                           ; 4 bytes @ 0x3F
  6080  000040                     	ds	1
  6081  000041                     disk_read@pdrv:
  6082                           	callstack 0
  6083  000041                     display_fillCircleHelper@y:
  6084                           	callstack 0
  6085                           
  6086                           ; 2 bytes @ 0x40
  6087  000041                     	ds	1
  6088  000042                     ??_SD_SPI_SectorWrite:
  6089  000042                     disk_read@res:
  6090                           	callstack 0
  6091  000042                     drawTempHumidity@temp:
  6092                           	callstack 0
  6093  000042                     display_drawLine@t:
  6094                           	callstack 0
  6095                           
  6096                           ; 2 bytes @ 0x41
  6097  000042                     	ds	1
  6098  000043                     ??_display_fillCircle:
  6099                           
  6100                           ; 1 bytes @ 0x42
  6101  000043                     	ds	1
  6102  000044                     ??_getWeekdays:
  6103  000044                     disk_write@pdrv:
  6104                           	callstack 0
  6105  000044                     drawTempHumidity@humidity:
  6106                           	callstack 0
  6107  000044                     display_drawLine@t_7090:
  6108                           	callstack 0
  6109                           
  6110                           ; 2 bytes @ 0x43
  6111  000044                     	ds	1
  6112  000045                     ??_dateErrorCheck:
  6113  000045                     disk_write@res:
  6114                           	callstack 0
  6115                           
  6116                           ; 1 bytes @ 0x44
  6117  000045                     	ds	1
  6118  000046                     
  6119                           ; 1 bytes @ 0x45
  6120 ;;
  6121 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  6122 ;;
  6123 ;; *************** function _main *****************
  6124 ;; Defined at:
  6125 ;;		line 1086 in file "main.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  str           100    0        unsigned char [100]
  6130 ;;  y               2    0        unsigned int 
  6131 ;;  x               2    0        unsigned int 
  6132 ;;  jj              1    0[BANK3 ] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 3F/2
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Totals:         0       0       4       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;Total ram usage:        5 bytes
  6147 ;; Hardware stack levels required when called:   20
  6148 ;; This function calls:
  6149 ;;		_AlarmInitialize
  6150 ;;		_AlarmSoundOff
  6151 ;;		_AlarmSoundOn
  6152 ;;		_DATAEE_ReadByte
  6153 ;;		_DATAEE_WriteByte
  6154 ;;		_GPRMCdatacheck
  6155 ;;		_INT0_SetInterruptHandler
  6156 ;;		_IOCB4_SetInterruptHandler
  6157 ;;		_NormalProc
  6158 ;;		_SYSTEM_Initialize
  6159 ;;		_SettingProc
  6160 ;;		_SlideSWProc
  6161 ;;		_TMR1_SetInterruptHandler
  6162 ;;		_TMR5_SetInterruptHandler
  6163 ;;		_TMR5_StartTimer
  6164 ;;		_TouchAdjust
  6165 ;;		_display_SetFont
  6166 ;;		_glcd_init
  6167 ;;		_init_RTC
  6168 ;;		_lcd_fill
  6169 ;; This function is called by:
  6170 ;;		Startup code after reset
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           	psect	text0
  6175  006DE2                     __ptext0:
  6176                           	callstack 0
  6177  006DE2                     _main:
  6178                           	callstack 11
  6179                           
  6180                           ;main.c: 1087: char str[100];;main.c: 1088: uint8_t jj;;main.c: 1089: uint16_t x, y;;mai
      +                          n.c: 1092: SYSTEM_Initialize();
  6181                           
  6182                           ;incstack = 0
  6183  006DE2  EC99  F074         	call	_SYSTEM_Initialize	;wreg free
  6184                           
  6185                           ;main.c: 1095: AlarmInitialize();
  6186  006DE6  ECDB  F07A         	call	_AlarmInitialize	;wreg free
  6187                           
  6188                           ;main.c: 1100: IOCB4_SetInterruptHandler(AlarmWHandler);
  6189  006DEA  0EC8               	movlw	low _AlarmWHandler
  6190  006DEC  6E0E               	movwf	IOCB4_SetInterruptHandler@InterruptHandler^0,c
  6191  006DEE  0EF5               	movlw	high _AlarmWHandler
  6192  006DF0  6E0F               	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)^0,c
  6193  006DF2  EC67  F07B         	call	_IOCB4_SetInterruptHandler	;wreg free
  6194                           
  6195                           ;main.c: 1103: TMR1_SetInterruptHandler(RotaryHandler);
  6196  006DF6  0E94               	movlw	low _RotaryHandler
  6197  006DF8  6E0E               	movwf	TMR1_SetInterruptHandler@InterruptHandler^0,c
  6198  006DFA  0ED8               	movlw	high _RotaryHandler
  6199  006DFC  6E0F               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)^0,c
  6200  006DFE  EC62  F07B         	call	_TMR1_SetInterruptHandler	;wreg free
  6201                           
  6202                           ;main.c: 1106: TMR5_SetInterruptHandler(Timer5Handler);
  6203  006E02  0EA6               	movlw	low _Timer5Handler
  6204  006E04  6E0E               	movwf	TMR5_SetInterruptHandler@InterruptHandler^0,c
  6205  006E06  0EAD               	movlw	high _Timer5Handler
  6206  006E08  6E0F               	movwf	(TMR5_SetInterruptHandler@InterruptHandler+1)^0,c
  6207  006E0A  EC5D  F07B         	call	_TMR5_SetInterruptHandler	;wreg free
  6208                           
  6209                           ;main.c: 1107: TMR5_StartTimer();
  6210  006E0E  ECE4  F07B         	call	_TMR5_StartTimer	;wreg free
  6211                           
  6212                           ; BSR set to: 15
  6213                           ;main.c: 1108: TouchCount = 0;
  6214  006E12  0E00               	movlw	0
  6215  006E14  0103               	movlb	3	; () banked
  6216  006E16  6FA4               	movwf	_TouchCount& (0+255),b
  6217                           
  6218                           ; BSR set to: 3
  6219                           ;main.c: 1109: TouchStatus = 0;
  6220  006E18  0E00               	movlw	0
  6221  006E1A  6E4C               	movwf	_TouchStatus^0,c
  6222                           
  6223                           ; BSR set to: 3
  6224                           ;main.c: 1111: Count1PPS = 0;
  6225  006E1C  0E00               	movlw	0
  6226  006E1E  0102               	movlb	2	; () banked
  6227  006E20  6FE0               	movwf	_Count1PPS& (0+255),b
  6228                           
  6229                           ; BSR set to: 2
  6230                           ;main.c: 1112: GetGPS = 0;
  6231  006E22  0E00               	movlw	0
  6232  006E24  6FDF               	movwf	_GetGPS& (0+255),b
  6233                           
  6234                           ; BSR set to: 2
  6235                           ;main.c: 1115: init_RTC(DateTime);
  6236  006E26  0EF6               	movlw	low _DateTime
  6237  006E28  0100               	movlb	0	; () banked
  6238  006E2A  6F8E               	movwf	init_RTC@datetime& (0+255),b
  6239  006E2C  0E02               	movlw	high _DateTime
  6240  006E2E  6F8F               	movwf	(init_RTC@datetime+1)& (0+255),b
  6241  006E30  ECF7  F059         	call	_init_RTC	;wreg free
  6242                           
  6243                           ;main.c: 1116: INT0_SetInterruptHandler(RTC_handler);
  6244  006E34  0E4E               	movlw	low _RTC_handler
  6245  006E36  6E0E               	movwf	INT0_SetInterruptHandler@InterruptHandler^0,c
  6246  006E38  0EF8               	movlw	high _RTC_handler
  6247  006E3A  6E0F               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)^0,c
  6248  006E3C  EC6C  F07B         	call	_INT0_SetInterruptHandler	;wreg free
  6249                           
  6250                           ;main.c: 1123: (INTCONbits.GIE = 1);
  6251  006E40  8EF2               	bsf	242,7,c	;volatile
  6252                           
  6253                           ;main.c: 1129: (INTCONbits.PEIE = 1);
  6254  006E42  8CF2               	bsf	242,6,c	;volatile
  6255                           
  6256                           ;main.c: 1137: glcd_init();
  6257  006E44  ECC7  F049         	call	_glcd_init	;wreg free
  6258                           
  6259                           ;main.c: 1138: lcd_fill(0x0000);
  6260  006E48  0E00               	movlw	0
  6261  006E4A  6E1A               	movwf	(lcd_fill@bg_color+1)^0,c
  6262  006E4C  0E00               	movlw	0
  6263  006E4E  6E19               	movwf	lcd_fill@bg_color^0,c
  6264  006E50  EC06  F06C         	call	_lcd_fill	;wreg free
  6265                           
  6266                           ;main.c: 1141: AlarmSoundOn(0);
  6267  006E54  0E00               	movlw	0
  6268  006E56  ECDE  F073         	call	_AlarmSoundOn
  6269                           
  6270                           ;main.c: 1142: _delay((unsigned long)((100)*(64000000/4000.0)));
  6271  006E5A  0E09               	movlw	9
  6272  006E5C  0101               	movlb	1	; () banked
  6273  006E5E  6FFD               	movwf	(??_main+1)& (0+255),b
  6274  006E60  0E1E               	movlw	30
  6275  006E62  6FFC               	movwf	??_main& (0+255),b
  6276  006E64  0EE4               	movlw	228
  6277  006E66                     u30017:
  6278  006E66  2EE8               	decfsz	wreg,f,c
  6279  006E68  D7FE               	bra	u30017
  6280  006E6A  2FFC               	decfsz	??_main& (0+255),f,b
  6281  006E6C  D7FC               	bra	u30017
  6282  006E6E  2FFD               	decfsz	(??_main+1)& (0+255),f,b
  6283  006E70  D7FA               	bra	u30017
  6284  006E72  F000               	nop	
  6285                           
  6286                           ;main.c: 1143: AlarmSoundOff();
  6287  006E74  EC1D  F07B         	call	_AlarmSoundOff	;wreg free
  6288                           
  6289                           ;main.c: 1144: _delay((unsigned long)((200)*(64000000/4000.0)));
  6290  006E78  0E11               	movlw	17
  6291  006E7A  0101               	movlb	1	; () banked
  6292  006E7C  6FFD               	movwf	(??_main+1)& (0+255),b
  6293  006E7E  0E3C               	movlw	60
  6294  006E80  6FFC               	movwf	??_main& (0+255),b
  6295  006E82  0ECB               	movlw	203
  6296  006E84                     u30027:
  6297  006E84  2EE8               	decfsz	wreg,f,c
  6298  006E86  D7FE               	bra	u30027
  6299  006E88  2FFC               	decfsz	??_main& (0+255),f,b
  6300  006E8A  D7FC               	bra	u30027
  6301  006E8C  2FFD               	decfsz	(??_main+1)& (0+255),f,b
  6302  006E8E  D7FA               	bra	u30027
  6303                           
  6304                           ;main.c: 1145: AlarmSoundOn(0);
  6305  006E90  0E00               	movlw	0
  6306  006E92  ECDE  F073         	call	_AlarmSoundOn
  6307                           
  6308                           ;main.c: 1146: _delay((unsigned long)((300)*(64000000/4000.0)));
  6309  006E96  0E19               	movlw	25
  6310  006E98  0101               	movlb	1	; () banked
  6311  006E9A  6FFD               	movwf	(??_main+1)& (0+255),b
  6312  006E9C  0E5A               	movlw	90
  6313  006E9E  6FFC               	movwf	??_main& (0+255),b
  6314  006EA0  0EB1               	movlw	177
  6315  006EA2                     u30037:
  6316  006EA2  2EE8               	decfsz	wreg,f,c
  6317  006EA4  D7FE               	bra	u30037
  6318  006EA6  2FFC               	decfsz	??_main& (0+255),f,b
  6319  006EA8  D7FC               	bra	u30037
  6320  006EAA  2FFD               	decfsz	(??_main+1)& (0+255),f,b
  6321  006EAC  D7FA               	bra	u30037
  6322  006EAE  D000               	nop2	
  6323                           
  6324                           ;main.c: 1147: AlarmSoundOff();
  6325  006EB0  EC1D  F07B         	call	_AlarmSoundOff	;wreg free
  6326                           
  6327                           ;main.c: 1149: display_SetFont(font);
  6328  006EB4  0ED5               	movlw	low _font
  6329  006EB6  6E0E               	movwf	display_SetFont@font^0,c
  6330  006EB8  0EFA               	movlw	high _font
  6331  006EBA  6E0F               	movwf	(display_SetFont@font+1)^0,c
  6332  006EBC  EC92  F071         	call	_display_SetFont	;wreg free
  6333                           
  6334                           ;main.c: 1151: if (DATAEE_ReadByte(0x00) == 0xff) {
  6335  006EC0  0E00               	movlw	0
  6336  006EC2  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6337  006EC4  0E00               	movlw	0
  6338  006EC6  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6339  006EC8  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6340  006ECC  0AFF               	xorlw	255
  6341  006ECE  A4D8               	btfss	status,2,c
  6342  006ED0  D074               	goto	l26045
  6343                           
  6344                           ;main.c: 1152: TouchAdjust();
  6345  006ED2  EC9E  F048         	call	_TouchAdjust	;wreg free
  6346                           
  6347                           ;main.c: 1153: lcd_fill(0x001F);
  6348  006ED6  0E00               	movlw	0
  6349  006ED8  6E1A               	movwf	(lcd_fill@bg_color+1)^0,c
  6350  006EDA  0E1F               	movlw	31
  6351  006EDC  6E19               	movwf	lcd_fill@bg_color^0,c
  6352  006EDE  EC06  F06C         	call	_lcd_fill	;wreg free
  6353                           
  6354                           ;main.c: 1176: DATAEE_WriteByte(0x00, 0x55);
  6355  006EE2  0E00               	movlw	0
  6356  006EE4  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6357  006EE6  0E00               	movlw	0
  6358  006EE8  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6359  006EEA  0E55               	movlw	85
  6360  006EEC  6E10               	movwf	DATAEE_WriteByte@bData^0,c
  6361  006EEE  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6362                           
  6363                           ;main.c: 1178: DATAEE_WriteByte(0x18, ((T_x1) & 0xff));
  6364  006EF2  0E00               	movlw	0
  6365  006EF4  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6366  006EF6  0E18               	movlw	24
  6367  006EF8  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6368  006EFA  C04D  F010         	movff	_T_x1,DATAEE_WriteByte@bData
  6369  006EFE  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6370                           
  6371                           ;main.c: 1179: DATAEE_WriteByte(0x18+1, ((T_x1) >> 8));
  6372  006F02  0E00               	movlw	0
  6373  006F04  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6374  006F06  0E19               	movlw	25
  6375  006F08  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6376  006F0A  C04E  F010         	movff	_T_x1+1,DATAEE_WriteByte@bData
  6377  006F0E  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6378                           
  6379                           ;main.c: 1180: DATAEE_WriteByte(0x18+2, ((T_y1) & 0xff));
  6380  006F12  0E00               	movlw	0
  6381  006F14  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6382  006F16  0E1A               	movlw	26
  6383  006F18  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6384  006F1A  C2EA  F010         	movff	_T_y1,DATAEE_WriteByte@bData
  6385  006F1E  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6386                           
  6387                           ;main.c: 1181: DATAEE_WriteByte(0x18+3, ((T_y1) >> 8));
  6388  006F22  0E00               	movlw	0
  6389  006F24  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6390  006F26  0E1B               	movlw	27
  6391  006F28  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6392  006F2A  C2EB  F010         	movff	_T_y1+1,DATAEE_WriteByte@bData
  6393  006F2E  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6394                           
  6395                           ;main.c: 1182: DATAEE_WriteByte(0x18+4, ((T_x2) & 0xff));
  6396  006F32  0E00               	movlw	0
  6397  006F34  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6398  006F36  0E1C               	movlw	28
  6399  006F38  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6400  006F3A  C2E8  F010         	movff	_T_x2,DATAEE_WriteByte@bData
  6401  006F3E  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6402                           
  6403                           ;main.c: 1183: DATAEE_WriteByte(0x18+5, ((T_x2) >> 8));
  6404  006F42  0E00               	movlw	0
  6405  006F44  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6406  006F46  0E1D               	movlw	29
  6407  006F48  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6408  006F4A  C2E9  F010         	movff	_T_x2+1,DATAEE_WriteByte@bData
  6409  006F4E  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6410                           
  6411                           ;main.c: 1184: DATAEE_WriteByte(0x18+6, ((T_y2) & 0xff));
  6412  006F52  0E00               	movlw	0
  6413  006F54  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6414  006F56  0E1E               	movlw	30
  6415  006F58  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6416  006F5A  C2E6  F010         	movff	_T_y2,DATAEE_WriteByte@bData
  6417  006F5E  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6418                           
  6419                           ;main.c: 1185: DATAEE_WriteByte(0x18+7, ((T_y2) >> 8));
  6420  006F62  0E00               	movlw	0
  6421  006F64  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6422  006F66  0E1F               	movlw	31
  6423  006F68  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6424  006F6A  C2E7  F010         	movff	_T_y2+1,DATAEE_WriteByte@bData
  6425  006F6E  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6426                           
  6427                           ;main.c: 1190: for (jj=0; jj<3; jj++) {
  6428  006F72  0E00               	movlw	0
  6429  006F74  0103               	movlb	3	; () banked
  6430  006F76  6FFF               	movwf	main@jj& (0+255),b
  6431  006F78                     l26035:
  6432                           
  6433                           ; BSR set to: 3
  6434                           ;main.c: 1191: DATAEE_WriteByte(0x0c+jj, AlarmTime[jj]);
  6435  006F78  0E0C               	movlw	12
  6436  006F7A  25FF               	addwf	main@jj& (0+255),w,b
  6437  006F7C  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6438  006F7E  6A0F               	clrf	(DATAEE_WriteByte@bAdd+1)^0,c
  6439  006F80  0E00               	movlw	0
  6440  006F82  220F               	addwfc	(DATAEE_WriteByte@bAdd+1)^0,f,c
  6441  006F84  0EFD               	movlw	low _AlarmTime
  6442  006F86  25FF               	addwf	main@jj& (0+255),w,b
  6443  006F88  6ED9               	movwf	fsr2l,c
  6444  006F8A  6ADA               	clrf	fsr2h,c
  6445  006F8C  0E02               	movlw	high _AlarmTime
  6446  006F8E  22DA               	addwfc	fsr2h,f,c
  6447  006F90  50DF               	movf	indf2,w,c
  6448  006F92  6E10               	movwf	DATAEE_WriteByte@bData^0,c
  6449  006F94  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6450  006F98  0103               	movlb	3	; () banked
  6451  006F9A  2BFF               	incf	main@jj& (0+255),f,b
  6452                           
  6453                           ; BSR set to: 3
  6454  006F9C  0E02               	movlw	2
  6455  006F9E  65FF               	cpfsgt	main@jj& (0+255),b
  6456  006FA0  D7EB               	goto	l26035
  6457                           
  6458                           ; BSR set to: 3
  6459                           ;main.c: 1192: };main.c: 1193: DisplayMode = 0x00;
  6460  006FA2  0E00               	movlw	0
  6461  006FA4  0102               	movlb	2	; () banked
  6462  006FA6  6FE2               	movwf	_DisplayMode& (0+255),b
  6463                           
  6464                           ; BSR set to: 2
  6465                           ;main.c: 1194: DATAEE_WriteByte(0x07, DisplayMode);
  6466  006FA8  0E00               	movlw	0
  6467  006FAA  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  6468  006FAC  0E07               	movlw	7
  6469  006FAE  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  6470  006FB0  C2E2  F010         	movff	_DisplayMode,DATAEE_WriteByte@bData
  6471  006FB4  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  6472                           
  6473                           ;main.c: 1196: } else {
  6474  006FB8  D0A2               	goto	l26073
  6475  006FBA                     l26045:
  6476                           
  6477                           ;main.c: 1198: T_x1 = DATAEE_ReadByte(0x18) + (DATAEE_ReadByte(0x18+1)<<8);
  6478  006FBA  0E00               	movlw	0
  6479  006FBC  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6480  006FBE  0E19               	movlw	25
  6481  006FC0  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6482  006FC2  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6483  006FC6  0101               	movlb	1	; () banked
  6484  006FC8  6FFC               	movwf	??_main& (0+255),b
  6485  006FCA  51FC               	movf	??_main& (0+255),w,b
  6486  006FCC  6FFE               	movwf	(??_main+2)& (0+255),b
  6487  006FCE  6BFD               	clrf	(??_main+1)& (0+255),b
  6488  006FD0  0E00               	movlw	0
  6489  006FD2  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6490  006FD4  0E18               	movlw	24
  6491  006FD6  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6492  006FD8  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6493  006FDC  0101               	movlb	1	; () banked
  6494  006FDE  6FFF               	movwf	(??_main+3)& (0+255),b
  6495  006FE0  51FF               	movf	(??_main+3)& (0+255),w,b
  6496  006FE2  25FD               	addwf	(??_main+1)& (0+255),w,b
  6497  006FE4  6E4D               	movwf	_T_x1^0,c
  6498  006FE6  0E00               	movlw	0
  6499  006FE8  21FE               	addwfc	(??_main+2)& (0+255),w,b
  6500  006FEA  6E4E               	movwf	(_T_x1+1)^0,c
  6501                           
  6502                           ;main.c: 1199: T_y1 = DATAEE_ReadByte(0x18+2) + (DATAEE_ReadByte(0x18+3)<<8);
  6503  006FEC  0E00               	movlw	0
  6504  006FEE  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6505  006FF0  0E1B               	movlw	27
  6506  006FF2  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6507  006FF4  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6508  006FF8  0101               	movlb	1	; () banked
  6509  006FFA  6FFC               	movwf	??_main& (0+255),b
  6510  006FFC  51FC               	movf	??_main& (0+255),w,b
  6511  006FFE  6FFE               	movwf	(??_main+2)& (0+255),b
  6512  007000  6BFD               	clrf	(??_main+1)& (0+255),b
  6513  007002  0E00               	movlw	0
  6514  007004  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6515  007006  0E1A               	movlw	26
  6516  007008  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6517  00700A  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6518  00700E  0101               	movlb	1	; () banked
  6519  007010  6FFF               	movwf	(??_main+3)& (0+255),b
  6520  007012  51FF               	movf	(??_main+3)& (0+255),w,b
  6521  007014  25FD               	addwf	(??_main+1)& (0+255),w,b
  6522  007016  0102               	movlb	2	; () banked
  6523  007018  6FEA               	movwf	_T_y1& (0+255),b
  6524  00701A  0E00               	movlw	0
  6525  00701C  0101               	movlb	1	; () banked
  6526  00701E  21FE               	addwfc	(??_main+2)& (0+255),w,b
  6527  007020  0102               	movlb	2	; () banked
  6528  007022  6FEB               	movwf	(_T_y1+1)& (0+255),b
  6529                           
  6530                           ;main.c: 1200: T_x2 = DATAEE_ReadByte(0x18+4) + (DATAEE_ReadByte(0x18+5)<<8);
  6531  007024  0E00               	movlw	0
  6532  007026  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6533  007028  0E1D               	movlw	29
  6534  00702A  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6535  00702C  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6536  007030  0101               	movlb	1	; () banked
  6537  007032  6FFC               	movwf	??_main& (0+255),b
  6538  007034  51FC               	movf	??_main& (0+255),w,b
  6539  007036  6FFE               	movwf	(??_main+2)& (0+255),b
  6540  007038  6BFD               	clrf	(??_main+1)& (0+255),b
  6541  00703A  0E00               	movlw	0
  6542  00703C  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6543  00703E  0E1C               	movlw	28
  6544  007040  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6545  007042  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6546  007046  0101               	movlb	1	; () banked
  6547  007048  6FFF               	movwf	(??_main+3)& (0+255),b
  6548  00704A  51FF               	movf	(??_main+3)& (0+255),w,b
  6549  00704C  25FD               	addwf	(??_main+1)& (0+255),w,b
  6550  00704E  0102               	movlb	2	; () banked
  6551  007050  6FE8               	movwf	_T_x2& (0+255),b
  6552  007052  0E00               	movlw	0
  6553  007054  0101               	movlb	1	; () banked
  6554  007056  21FE               	addwfc	(??_main+2)& (0+255),w,b
  6555  007058  0102               	movlb	2	; () banked
  6556  00705A  6FE9               	movwf	(_T_x2+1)& (0+255),b
  6557                           
  6558                           ;main.c: 1201: T_y2 = DATAEE_ReadByte(0x18+6) + (DATAEE_ReadByte(0x18+7)<<8);
  6559  00705C  0E00               	movlw	0
  6560  00705E  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6561  007060  0E1F               	movlw	31
  6562  007062  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6563  007064  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6564  007068  0101               	movlb	1	; () banked
  6565  00706A  6FFC               	movwf	??_main& (0+255),b
  6566  00706C  51FC               	movf	??_main& (0+255),w,b
  6567  00706E  6FFE               	movwf	(??_main+2)& (0+255),b
  6568  007070  6BFD               	clrf	(??_main+1)& (0+255),b
  6569  007072  0E00               	movlw	0
  6570  007074  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6571  007076  0E1E               	movlw	30
  6572  007078  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6573  00707A  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6574  00707E  0101               	movlb	1	; () banked
  6575  007080  6FFF               	movwf	(??_main+3)& (0+255),b
  6576  007082  51FF               	movf	(??_main+3)& (0+255),w,b
  6577  007084  25FD               	addwf	(??_main+1)& (0+255),w,b
  6578  007086  0102               	movlb	2	; () banked
  6579  007088  6FE6               	movwf	_T_y2& (0+255),b
  6580  00708A  0E00               	movlw	0
  6581  00708C  0101               	movlb	1	; () banked
  6582  00708E  21FE               	addwfc	(??_main+2)& (0+255),w,b
  6583  007090  0102               	movlb	2	; () banked
  6584  007092  6FE7               	movwf	(_T_y2+1)& (0+255),b
  6585                           
  6586                           ; BSR set to: 2
  6587                           ;main.c: 1206: for (jj=0; jj<4; jj++) {
  6588  007094  0E00               	movlw	0
  6589  007096  0103               	movlb	3	; () banked
  6590  007098  6FFF               	movwf	main@jj& (0+255),b
  6591  00709A                     l26053:
  6592                           
  6593                           ; BSR set to: 3
  6594                           ;main.c: 1207: DateTime[jj+3] = DATAEE_ReadByte(0x08+jj);
  6595  00709A  0EF9               	movlw	low (_DateTime+3)
  6596  00709C  25FF               	addwf	main@jj& (0+255),w,b
  6597  00709E  6ED9               	movwf	fsr2l,c
  6598  0070A0  6ADA               	clrf	fsr2h,c
  6599  0070A2  0E02               	movlw	high (_DateTime+3)
  6600  0070A4  22DA               	addwfc	fsr2h,f,c
  6601  0070A6  0E08               	movlw	8
  6602  0070A8  25FF               	addwf	main@jj& (0+255),w,b
  6603  0070AA  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6604  0070AC  6A0F               	clrf	(DATAEE_ReadByte@bAdd+1)^0,c
  6605  0070AE  0E00               	movlw	0
  6606  0070B0  220F               	addwfc	(DATAEE_ReadByte@bAdd+1)^0,f,c
  6607  0070B2  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6608  0070B6  6EDF               	movwf	indf2,c
  6609  0070B8  0103               	movlb	3	; () banked
  6610  0070BA  2BFF               	incf	main@jj& (0+255),f,b
  6611                           
  6612                           ; BSR set to: 3
  6613  0070BC  0E03               	movlw	3
  6614  0070BE  65FF               	cpfsgt	main@jj& (0+255),b
  6615  0070C0  D7EC               	goto	l26053
  6616                           
  6617                           ; BSR set to: 3
  6618                           ;main.c: 1208: };main.c: 1209: for (jj=0; jj<3; jj++) {
  6619  0070C2  0E00               	movlw	0
  6620  0070C4  6FFF               	movwf	main@jj& (0+255),b
  6621  0070C6                     l26065:
  6622                           
  6623                           ; BSR set to: 3
  6624                           ;main.c: 1210: AlarmTime[jj] = DATAEE_ReadByte(0x0c+jj);
  6625  0070C6  0EFD               	movlw	low _AlarmTime
  6626  0070C8  25FF               	addwf	main@jj& (0+255),w,b
  6627  0070CA  6ED9               	movwf	fsr2l,c
  6628  0070CC  6ADA               	clrf	fsr2h,c
  6629  0070CE  0E02               	movlw	high _AlarmTime
  6630  0070D0  22DA               	addwfc	fsr2h,f,c
  6631  0070D2  0E0C               	movlw	12
  6632  0070D4  25FF               	addwf	main@jj& (0+255),w,b
  6633  0070D6  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6634  0070D8  6A0F               	clrf	(DATAEE_ReadByte@bAdd+1)^0,c
  6635  0070DA  0E00               	movlw	0
  6636  0070DC  220F               	addwfc	(DATAEE_ReadByte@bAdd+1)^0,f,c
  6637  0070DE  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6638  0070E2  6EDF               	movwf	indf2,c
  6639  0070E4  0103               	movlb	3	; () banked
  6640  0070E6  2BFF               	incf	main@jj& (0+255),f,b
  6641                           
  6642                           ; BSR set to: 3
  6643  0070E8  0E02               	movlw	2
  6644  0070EA  65FF               	cpfsgt	main@jj& (0+255),b
  6645  0070EC  D7EC               	goto	l26065
  6646                           
  6647                           ; BSR set to: 3
  6648                           ;main.c: 1211: };main.c: 1213: DisplayMode = DATAEE_ReadByte(0x07);
  6649  0070EE  0E00               	movlw	0
  6650  0070F0  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
  6651  0070F2  0E07               	movlw	7
  6652  0070F4  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
  6653  0070F6  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
  6654  0070FA  0102               	movlb	2	; () banked
  6655  0070FC  6FE2               	movwf	_DisplayMode& (0+255),b
  6656  0070FE                     l26073:
  6657                           
  6658                           ;main.c: 1214: };main.c: 1216: Mode = 0x00;
  6659  0070FE  0E00               	movlw	0
  6660  007100  0102               	movlb	2	; () banked
  6661  007102  6FE3               	movwf	_Mode& (0+255),b
  6662                           
  6663                           ; BSR set to: 2
  6664                           ;main.c: 1219: AlarmColor[0] = 0x4208;
  6665  007104  0E42               	movlw	66
  6666  007106  0103               	movlb	3	; () banked
  6667  007108  6F6A               	movwf	(_AlarmColor+1)& (0+255),b
  6668  00710A  0E08               	movlw	8
  6669  00710C  6F69               	movwf	_AlarmColor& (0+255),b
  6670                           
  6671                           ; BSR set to: 3
  6672                           ;main.c: 1220: AlarmColor[1] = 0xFFFF;
  6673  00710E  696B               	setf	(_AlarmColor+2)& (0+255),b
  6674  007110  696C               	setf	(_AlarmColor+3)& (0+255),b
  6675  007112                     l26079:
  6676                           
  6677                           ;main.c: 1283: {;main.c: 1289: if (Mode <= 0x01) NormalProc();
  6678  007112  0E02               	movlw	2
  6679  007114  0102               	movlb	2	; () banked
  6680  007116  61E3               	cpfslt	_Mode& (0+255),b
  6681  007118  D003               	goto	l2726
  6682                           
  6683                           ; BSR set to: 2
  6684  00711A  EC95  F01D         	call	_NormalProc	;wreg free
  6685  00711E  D003               	goto	l2727
  6686  007120                     l2726:
  6687                           
  6688                           ; BSR set to: 2
  6689                           ;main.c: 1290: else if (Mode & 0x10) SettingProc();
  6690  007120  B9E3               	btfsc	_Mode& (0+255),4,b
  6691                           
  6692                           ; BSR set to: 2
  6693  007122  EC38  F026         	call	_SettingProc	;wreg free
  6694  007126                     l2727:
  6695                           
  6696                           ;main.c: 1293: SlideSWProc();
  6697  007126  EC0C  F06A         	call	_SlideSWProc	;wreg free
  6698                           
  6699                           ;main.c: 1296: if (GetGPS == 2) {
  6700  00712A  0E02               	movlw	2
  6701  00712C  0102               	movlb	2	; () banked
  6702  00712E  19DF               	xorwf	_GetGPS& (0+255),w,b
  6703  007130  A4D8               	btfss	status,2,c
  6704  007132  D7EF               	goto	l26079
  6705                           
  6706                           ; BSR set to: 2
  6707                           ;main.c: 1298: if (GPRMCdatacheck()) {
  6708  007134  ECF4  F044         	call	_GPRMCdatacheck	;wreg free
  6709  007138  0900               	iorlw	0
  6710  00713A  B4D8               	btfsc	status,2,c
  6711  00713C  D009               	goto	l26093
  6712                           
  6713                           ;main.c: 1299: GetGPS = 1;
  6714  00713E  0E01               	movlw	1
  6715  007140  0102               	movlb	2	; () banked
  6716  007142  6FDF               	movwf	_GetGPS& (0+255),b
  6717                           
  6718                           ; BSR set to: 2
  6719                           ;main.c: 1300: BufferP = Buffer;
  6720  007144  0E40               	movlw	low _Buffer
  6721  007146  0103               	movlb	3	; () banked
  6722  007148  6F76               	movwf	_BufferP& (0+255),b
  6723  00714A  0E06               	movlw	high _Buffer
  6724  00714C  6F77               	movwf	(_BufferP+1)& (0+255),b
  6725                           
  6726                           ;main.c: 1301: }
  6727  00714E  D7E1               	goto	l26079
  6728  007150                     l26093:
  6729                           
  6730                           ;main.c: 1302: else {;main.c: 1303: GetGPS = 0;
  6731  007150  0E00               	movlw	0
  6732  007152  0102               	movlb	2	; () banked
  6733  007154  6FDF               	movwf	_GetGPS& (0+255),b
  6734  007156  D7DD               	goto	l26079
  6735  007158                     __end_of_main:
  6736                           	callstack 0
  6737                           
  6738 ;; *************** function _init_RTC *****************
  6739 ;; Defined at:
  6740 ;;		line 264 in file "RTC8025.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  datetime        2   46[BANK0 ] PTR unsigned char 
  6743 ;;		 -> DateTime(7), 
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;		None
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  1    wreg      void 
  6748 ;; Registers used:
  6749 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : 3F/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6755 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;Total ram usage:        2 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:   16
  6762 ;; This function calls:
  6763 ;;		_I2C2_Read1ByteRegister
  6764 ;;		_I2C2_Write1ByteRegister
  6765 ;;		_RTC_setDate
  6766 ;;		_RTC_setTime
  6767 ;;		_dateErrorCheck
  6768 ;;		_resetCTFG
  6769 ;; This function is called by:
  6770 ;;		_main
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text1
  6775  00B3EE                     __ptext1:
  6776                           	callstack 0
  6777  00B3EE                     _init_RTC:
  6778                           	callstack 14
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;RTC8025.c: 266: _delay((unsigned long)((80)*(64000000/4000000.0)));
  6782                           
  6783                           ; BSR set to: 2
  6784                           ;incstack = 0
  6785  00B3EE  0EB6               	movlw	182
  6786  00B3F0                     u30047:
  6787  00B3F0  D000               	nop2	
  6788  00B3F2  D000               	nop2	
  6789  00B3F4  2EE8               	decfsz	wreg,f,c
  6790  00B3F6  D7FC               	bra	u30047
  6791  00B3F8  D000               	nop2	
  6792  00B3FA  D000               	nop2	
  6793  00B3FC  D000               	nop2	
  6794                           
  6795                           ;RTC8025.c: 271: RTC_regE = I2C2_Read1ByteRegister(0x32, 0xe0);
  6796  00B3FE  0EE0               	movlw	224
  6797  00B400  6E1F               	movwf	I2C2_Read1ByteRegister@reg^0,c
  6798  00B402  0E32               	movlw	50
  6799  00B404  EC36  F071         	call	_I2C2_Read1ByteRegister
  6800  00B408  0100               	movlb	0	; () banked
  6801  00B40A  6FFF               	movwf	_RTC_regE& (0+255),b
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;RTC8025.c: 273: RTC_regF = I2C2_Read1ByteRegister(0x32, 0xf0);
  6805  00B40C  0EF0               	movlw	240
  6806  00B40E  6E1F               	movwf	I2C2_Read1ByteRegister@reg^0,c
  6807  00B410  0E32               	movlw	50
  6808  00B412  EC36  F071         	call	_I2C2_Read1ByteRegister
  6809  00B416  6E4F               	movwf	_RTC_regF^0,c
  6810                           
  6811                           ; BSR set to: 4
  6812                           ;RTC8025.c: 282: if ((RTC_regF & (0x40 | 0x20 | 0x10)) == 0x20) {
  6813  00B418  504F               	movf	_RTC_regF^0,w,c
  6814  00B41A  0B70               	andlw	112
  6815  00B41C  0A20               	xorlw	32
  6816  00B41E  A4D8               	btfss	status,2,c
  6817  00B420  D003               	goto	l24795
  6818                           
  6819                           ; BSR set to: 4
  6820                           ;RTC8025.c: 286: resetCTFG();
  6821  00B422  ECFF  F078         	call	_resetCTFG	;wreg free
  6822  00B426  0012               	return	
  6823  00B428                     l24795:
  6824                           
  6825                           ; BSR set to: 4
  6826                           ;RTC8025.c: 288: };RTC8025.c: 291: _delay((unsigned long)((80)*(64000000/4000000.0)));
  6827  00B428  0EB6               	movlw	182
  6828  00B42A                     u30057:
  6829  00B42A  D000               	nop2	
  6830  00B42C  D000               	nop2	
  6831  00B42E  2EE8               	decfsz	wreg,f,c
  6832  00B430  D7FC               	bra	u30057
  6833  00B432  D000               	nop2	
  6834  00B434  D000               	nop2	
  6835  00B436  D000               	nop2	
  6836                           
  6837                           ;RTC8025.c: 295: RTC_regE = 0x20 | 0x10 | CT2_0;
  6838  00B438  0103               	movlb	3	; () banked
  6839  00B43A  51FC               	movf	_CT2_0& (0+255),w,b
  6840  00B43C  0930               	iorlw	48
  6841  00B43E  0100               	movlb	0	; () banked
  6842  00B440  6FFF               	movwf	_RTC_regE& (0+255),b
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;RTC8025.c: 296: I2C2_Write1ByteRegister(0x32, 0xe0, RTC_regE);
  6846  00B442  0EE0               	movlw	224
  6847  00B444  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
  6848  00B446  C0FF  F020         	movff	_RTC_regE,I2C2_Write1ByteRegister@data
  6849  00B44A  0E32               	movlw	50
  6850  00B44C  EC41  F072         	call	_I2C2_Write1ByteRegister
  6851                           
  6852                           ; BSR set to: 4
  6853                           ;RTC8025.c: 297: _delay((unsigned long)((80)*(64000000/4000000.0)));
  6854  00B450  0EB6               	movlw	182
  6855  00B452                     u30067:
  6856  00B452  D000               	nop2	
  6857  00B454  D000               	nop2	
  6858  00B456  2EE8               	decfsz	wreg,f,c
  6859  00B458  D7FC               	bra	u30067
  6860  00B45A  D000               	nop2	
  6861  00B45C  D000               	nop2	
  6862  00B45E  D000               	nop2	
  6863                           
  6864                           ;RTC8025.c: 301: RTC_regF = 0x20 | 0x08;
  6865  00B460  0E28               	movlw	40
  6866  00B462  6E4F               	movwf	_RTC_regF^0,c
  6867                           
  6868                           ;RTC8025.c: 302: I2C2_Write1ByteRegister(0x32, 0xf0, RTC_regF);
  6869  00B464  0EF0               	movlw	240
  6870  00B466  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
  6871  00B468  C04F  F020         	movff	_RTC_regF,I2C2_Write1ByteRegister@data
  6872  00B46C  0E32               	movlw	50
  6873  00B46E  EC41  F072         	call	_I2C2_Write1ByteRegister
  6874                           
  6875                           ; BSR set to: 4
  6876                           ;RTC8025.c: 303: _delay((unsigned long)((80)*(64000000/4000000.0)));
  6877  00B472  0EB6               	movlw	182
  6878  00B474                     u30077:
  6879  00B474  D000               	nop2	
  6880  00B476  D000               	nop2	
  6881  00B478  2EE8               	decfsz	wreg,f,c
  6882  00B47A  D7FC               	bra	u30077
  6883  00B47C  D000               	nop2	
  6884  00B47E  D000               	nop2	
  6885  00B480  D000               	nop2	
  6886                           
  6887                           ;RTC8025.c: 306: dateErrorCheck(datetime);
  6888  00B482  C08E  F089         	movff	init_RTC@datetime,dateErrorCheck@dateTime
  6889  00B486  C08F  F08A         	movff	init_RTC@datetime+1,dateErrorCheck@dateTime+1
  6890  00B48A  EC72  F068         	call	_dateErrorCheck	;wreg free
  6891                           
  6892                           ;RTC8025.c: 309: RTC_setDate(datetime);
  6893  00B48E  C08E  F022         	movff	init_RTC@datetime,RTC_setDate@datetime
  6894  00B492  C08F  F023         	movff	init_RTC@datetime+1,RTC_setDate@datetime+1
  6895  00B496  EC1D  F068         	call	_RTC_setDate	;wreg free
  6896                           
  6897                           ;RTC8025.c: 310: datetime[0] = 0x00;
  6898  00B49A  C08E  FFD9         	movff	init_RTC@datetime,fsr2l
  6899  00B49E  C08F  FFDA         	movff	init_RTC@datetime+1,fsr2h
  6900  00B4A2  0E00               	movlw	0
  6901  00B4A4  6EDF               	movwf	indf2,c
  6902                           
  6903                           ;RTC8025.c: 311: RTC_setTime(datetime);
  6904  00B4A6  C08E  F022         	movff	init_RTC@datetime,RTC_setTime@datetime
  6905  00B4AA  C08F  F023         	movff	init_RTC@datetime+1,RTC_setTime@datetime+1
  6906  00B4AE  ECD8  F06D         	call	_RTC_setTime	;wreg free
  6907                           
  6908                           ;RTC8025.c: 313: I2C2_Write1ByteRegister(0x32, 0x70, 0x00);
  6909  00B4B2  0E70               	movlw	112
  6910  00B4B4  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
  6911  00B4B6  0E00               	movlw	0
  6912  00B4B8  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
  6913  00B4BA  0E32               	movlw	50
  6914  00B4BC  EC41  F072         	call	_I2C2_Write1ByteRegister
  6915                           
  6916                           ; BSR set to: 4
  6917                           ;RTC8025.c: 315: I2C2_Write1ByteRegister(0x32, 0x80, 0x00);
  6918  00B4C0  0E80               	movlw	128
  6919  00B4C2  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
  6920  00B4C4  0E00               	movlw	0
  6921  00B4C6  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
  6922  00B4C8  0E32               	movlw	50
  6923  00B4CA  EC41  F072         	call	_I2C2_Write1ByteRegister
  6924                           
  6925                           ; BSR set to: 4
  6926                           ;RTC8025.c: 316: I2C2_Write1ByteRegister(0x32, 0x90, 0x00);
  6927  00B4CE  0E90               	movlw	144
  6928  00B4D0  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
  6929  00B4D2  0E00               	movlw	0
  6930  00B4D4  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
  6931  00B4D6  0E32               	movlw	50
  6932  00B4D8  EC41  F072         	call	_I2C2_Write1ByteRegister
  6933                           
  6934                           ; BSR set to: 4
  6935                           ;RTC8025.c: 317: I2C2_Write1ByteRegister(0x32, 0xa0, 0x00);
  6936  00B4DC  0EA0               	movlw	160
  6937  00B4DE  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
  6938  00B4E0  0E00               	movlw	0
  6939  00B4E2  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
  6940  00B4E4  0E32               	movlw	50
  6941  00B4E6  EC41  F072         	call	_I2C2_Write1ByteRegister
  6942                           
  6943                           ; BSR set to: 4
  6944                           ;RTC8025.c: 319: I2C2_Write1ByteRegister(0x32, 0xb0, 0x00);
  6945  00B4EA  0EB0               	movlw	176
  6946  00B4EC  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
  6947  00B4EE  0E00               	movlw	0
  6948  00B4F0  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
  6949  00B4F2  0E32               	movlw	50
  6950  00B4F4  EC41  F072         	call	_I2C2_Write1ByteRegister
  6951                           
  6952                           ; BSR set to: 4
  6953                           ;RTC8025.c: 320: I2C2_Write1ByteRegister(0x32, 0xc0, 0x00);
  6954  00B4F8  0EC0               	movlw	192
  6955  00B4FA  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
  6956  00B4FC  0E00               	movlw	0
  6957  00B4FE  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
  6958  00B500  0E32               	movlw	50
  6959  00B502  EC41  F072         	call	_I2C2_Write1ByteRegister
  6960                           
  6961                           ; BSR set to: 4
  6962                           ;RTC8025.c: 322: _delay((unsigned long)((80)*(64000000/4000000.0)));
  6963  00B506  0EB6               	movlw	182
  6964  00B508                     u30087:
  6965  00B508  D000               	nop2	
  6966  00B50A  D000               	nop2	
  6967  00B50C  2EE8               	decfsz	wreg,f,c
  6968  00B50E  D7FC               	bra	u30087
  6969  00B510  D000               	nop2	
  6970  00B512  D000               	nop2	
  6971  00B514  D000               	nop2	
  6972  00B516  0012               	return		;funcret
  6973  00B518                     __end_of_init_RTC:
  6974                           	callstack 0
  6975                           
  6976 ;; *************** function _glcd_init *****************
  6977 ;; Defined at:
  6978 ;;		line 1297 in file "LCD320x240color.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;		None
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;		None
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  1    wreg      void 
  6985 ;; Registers used:
  6986 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/2
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;Total ram usage:        2 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    9
  6999 ;; This function calls:
  7000 ;;		_SPI1_Close
  7001 ;;		_spi_master_open
  7002 ;;		_write_command
  7003 ;;		_write_data
  7004 ;; This function is called by:
  7005 ;;		_main
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text2
  7010  00938E                     __ptext2:
  7011                           	callstack 0
  7012  00938E                     _glcd_init:
  7013                           	callstack 21
  7014                           
  7015                           ;incstack = 0
  7016                           ;LCD320x240color.c: 1300: do { LATAbits.LATA1 = 0; } while(0);
  7017  00938E  9289               	bcf	137,1,c	;volatile
  7018                           
  7019                           ;LCD320x240color.c: 1301: _delay((unsigned long)((1)*(64000000/4000.0)));
  7020  009390  0E15               	movlw	21
  7021  009392  6E11               	movwf	??_glcd_init^0,c
  7022  009394  0EC6               	movlw	198
  7023  009396                     u30097:
  7024  009396  2EE8               	decfsz	wreg,f,c
  7025  009398  D7FE               	bra	u30097
  7026  00939A  2E11               	decfsz	??_glcd_init^0,f,c
  7027  00939C  D7FC               	bra	u30097
  7028  00939E  D000               	nop2	
  7029  0093A0  8289               	bsf	137,1,c	;volatile
  7030                           
  7031                           ;LCD320x240color.c: 1303: _delay((unsigned long)((15)*(64000000/4000.0)));
  7032  0093A2  0E02               	movlw	2
  7033  0093A4  6E12               	movwf	(??_glcd_init+1)^0,c
  7034  0093A6  0E38               	movlw	56
  7035  0093A8  6E11               	movwf	??_glcd_init^0,c
  7036  0093AA  0EAD               	movlw	173
  7037  0093AC                     u30107:
  7038  0093AC  2EE8               	decfsz	wreg,f,c
  7039  0093AE  D7FE               	bra	u30107
  7040  0093B0  2E11               	decfsz	??_glcd_init^0,f,c
  7041  0093B2  D7FC               	bra	u30107
  7042  0093B4  2E12               	decfsz	(??_glcd_init+1)^0,f,c
  7043  0093B6  D7FA               	bra	u30107
  7044  0093B8  F000               	nop	
  7045                           
  7046                           ;LCD320x240color.c: 1305: if (spi_master_open(LCD8M)) {
  7047  0093BA  0E01               	movlw	1
  7048  0093BC  EC3E  F076         	call	_spi_master_open
  7049  0093C0  0900               	iorlw	0
  7050  0093C2  B4D8               	btfsc	status,2,c
  7051  0093C4  0012               	return	
  7052                           
  7053                           ;LCD320x240color.c: 1307: do { LATAbits.LATA0 = 0; } while(0);
  7054  0093C6  9089               	bcf	137,0,c	;volatile
  7055                           
  7056                           ;LCD320x240color.c: 1310: write_command(0xCB);
  7057  0093C8  0ECB               	movlw	203
  7058  0093CA  EC51  F07B         	call	_write_command
  7059                           
  7060                           ;LCD320x240color.c: 1311: write_data(0x39);
  7061  0093CE  0E39               	movlw	57
  7062  0093D0  EC4B  F07B         	call	_write_data
  7063                           
  7064                           ;LCD320x240color.c: 1312: write_data(0x2C);
  7065  0093D4  0E2C               	movlw	44
  7066  0093D6  EC4B  F07B         	call	_write_data
  7067                           
  7068                           ;LCD320x240color.c: 1313: write_data(0x00);
  7069  0093DA  0E00               	movlw	0
  7070  0093DC  EC4B  F07B         	call	_write_data
  7071                           
  7072                           ;LCD320x240color.c: 1314: write_data(0x34);
  7073  0093E0  0E34               	movlw	52
  7074  0093E2  EC4B  F07B         	call	_write_data
  7075                           
  7076                           ;LCD320x240color.c: 1315: write_data(0x02);
  7077  0093E6  0E02               	movlw	2
  7078  0093E8  EC4B  F07B         	call	_write_data
  7079                           
  7080                           ;LCD320x240color.c: 1318: write_command(0xCF);
  7081  0093EC  0ECF               	movlw	207
  7082  0093EE  EC51  F07B         	call	_write_command
  7083                           
  7084                           ;LCD320x240color.c: 1319: write_data(0x00);
  7085  0093F2  0E00               	movlw	0
  7086  0093F4  EC4B  F07B         	call	_write_data
  7087                           
  7088                           ;LCD320x240color.c: 1320: write_data(0xC1);
  7089  0093F8  0EC1               	movlw	193
  7090  0093FA  EC4B  F07B         	call	_write_data
  7091                           
  7092                           ;LCD320x240color.c: 1321: write_data(0x30);
  7093  0093FE  0E30               	movlw	48
  7094  009400  EC4B  F07B         	call	_write_data
  7095                           
  7096                           ;LCD320x240color.c: 1324: write_command(0xE8);
  7097  009404  0EE8               	movlw	232
  7098  009406  EC51  F07B         	call	_write_command
  7099                           
  7100                           ;LCD320x240color.c: 1325: write_data(0x85);
  7101  00940A  0E85               	movlw	133
  7102  00940C  EC4B  F07B         	call	_write_data
  7103                           
  7104                           ;LCD320x240color.c: 1326: write_data(0x00);
  7105  009410  0E00               	movlw	0
  7106  009412  EC4B  F07B         	call	_write_data
  7107                           
  7108                           ;LCD320x240color.c: 1327: write_data(0x78);
  7109  009416  0E78               	movlw	120
  7110  009418  EC4B  F07B         	call	_write_data
  7111                           
  7112                           ;LCD320x240color.c: 1330: write_command(0xEA);
  7113  00941C  0EEA               	movlw	234
  7114  00941E  EC51  F07B         	call	_write_command
  7115                           
  7116                           ;LCD320x240color.c: 1331: write_data(0x00);
  7117  009422  0E00               	movlw	0
  7118  009424  EC4B  F07B         	call	_write_data
  7119                           
  7120                           ;LCD320x240color.c: 1332: write_data(0x00);
  7121  009428  0E00               	movlw	0
  7122  00942A  EC4B  F07B         	call	_write_data
  7123                           
  7124                           ;LCD320x240color.c: 1335: write_command(0xED);
  7125  00942E  0EED               	movlw	237
  7126  009430  EC51  F07B         	call	_write_command
  7127                           
  7128                           ;LCD320x240color.c: 1336: write_data(0x64);
  7129  009434  0E64               	movlw	100
  7130  009436  EC4B  F07B         	call	_write_data
  7131                           
  7132                           ;LCD320x240color.c: 1337: write_data(0x03);
  7133  00943A  0E03               	movlw	3
  7134  00943C  EC4B  F07B         	call	_write_data
  7135                           
  7136                           ;LCD320x240color.c: 1338: write_data(0x12);
  7137  009440  0E12               	movlw	18
  7138  009442  EC4B  F07B         	call	_write_data
  7139                           
  7140                           ;LCD320x240color.c: 1339: write_data(0x81);
  7141  009446  0E81               	movlw	129
  7142  009448  EC4B  F07B         	call	_write_data
  7143                           
  7144                           ;LCD320x240color.c: 1342: write_command(0xF7);
  7145  00944C  0EF7               	movlw	247
  7146  00944E  EC51  F07B         	call	_write_command
  7147                           
  7148                           ;LCD320x240color.c: 1343: write_data(0x20);
  7149  009452  0E20               	movlw	32
  7150  009454  EC4B  F07B         	call	_write_data
  7151                           
  7152                           ;LCD320x240color.c: 1346: write_command(0xC0);
  7153  009458  0EC0               	movlw	192
  7154  00945A  EC51  F07B         	call	_write_command
  7155                           
  7156                           ;LCD320x240color.c: 1347: write_data(0x23);
  7157  00945E  0E23               	movlw	35
  7158  009460  EC4B  F07B         	call	_write_data
  7159                           
  7160                           ;LCD320x240color.c: 1350: write_command(0xC1);
  7161  009464  0EC1               	movlw	193
  7162  009466  EC51  F07B         	call	_write_command
  7163                           
  7164                           ;LCD320x240color.c: 1351: write_data(0x10);
  7165  00946A  0E10               	movlw	16
  7166  00946C  EC4B  F07B         	call	_write_data
  7167                           
  7168                           ;LCD320x240color.c: 1354: write_command(0xC5);
  7169  009470  0EC5               	movlw	197
  7170  009472  EC51  F07B         	call	_write_command
  7171                           
  7172                           ;LCD320x240color.c: 1355: write_data(0x3E);
  7173  009476  0E3E               	movlw	62
  7174  009478  EC4B  F07B         	call	_write_data
  7175                           
  7176                           ;LCD320x240color.c: 1356: write_data(0x28);
  7177  00947C  0E28               	movlw	40
  7178  00947E  EC4B  F07B         	call	_write_data
  7179                           
  7180                           ;LCD320x240color.c: 1359: write_command(0xC7);
  7181  009482  0EC7               	movlw	199
  7182  009484  EC51  F07B         	call	_write_command
  7183                           
  7184                           ;LCD320x240color.c: 1360: write_data(0x86);
  7185  009488  0E86               	movlw	134
  7186  00948A  EC4B  F07B         	call	_write_data
  7187                           
  7188                           ;LCD320x240color.c: 1363: write_command(0x36);
  7189  00948E  0E36               	movlw	54
  7190  009490  EC51  F07B         	call	_write_command
  7191                           
  7192                           ;LCD320x240color.c: 1364: write_data(0xe8);
  7193  009494  0EE8               	movlw	232
  7194  009496  EC4B  F07B         	call	_write_data
  7195                           
  7196                           ;LCD320x240color.c: 1367: write_command(0x3A);
  7197  00949A  0E3A               	movlw	58
  7198  00949C  EC51  F07B         	call	_write_command
  7199                           
  7200                           ;LCD320x240color.c: 1368: write_data(0x55);
  7201  0094A0  0E55               	movlw	85
  7202  0094A2  EC4B  F07B         	call	_write_data
  7203                           
  7204                           ;LCD320x240color.c: 1371: write_command(0xB1);
  7205  0094A6  0EB1               	movlw	177
  7206  0094A8  EC51  F07B         	call	_write_command
  7207                           
  7208                           ;LCD320x240color.c: 1372: write_data(0x00);
  7209  0094AC  0E00               	movlw	0
  7210  0094AE  EC4B  F07B         	call	_write_data
  7211                           
  7212                           ;LCD320x240color.c: 1373: write_data(0x18);
  7213  0094B2  0E18               	movlw	24
  7214  0094B4  EC4B  F07B         	call	_write_data
  7215                           
  7216                           ;LCD320x240color.c: 1376: write_command(0xB6);
  7217  0094B8  0EB6               	movlw	182
  7218  0094BA  EC51  F07B         	call	_write_command
  7219                           
  7220                           ;LCD320x240color.c: 1377: write_data(0x08);
  7221  0094BE  0E08               	movlw	8
  7222  0094C0  EC4B  F07B         	call	_write_data
  7223                           
  7224                           ;LCD320x240color.c: 1378: write_data(0x82);
  7225  0094C4  0E82               	movlw	130
  7226  0094C6  EC4B  F07B         	call	_write_data
  7227                           
  7228                           ;LCD320x240color.c: 1379: write_data(0x27);
  7229  0094CA  0E27               	movlw	39
  7230  0094CC  EC4B  F07B         	call	_write_data
  7231                           
  7232                           ;LCD320x240color.c: 1382: write_command(0xF2);
  7233  0094D0  0EF2               	movlw	242
  7234  0094D2  EC51  F07B         	call	_write_command
  7235                           
  7236                           ;LCD320x240color.c: 1383: write_data(0x00);
  7237  0094D6  0E00               	movlw	0
  7238  0094D8  EC4B  F07B         	call	_write_data
  7239                           
  7240                           ;LCD320x240color.c: 1386: write_command(0x26);
  7241  0094DC  0E26               	movlw	38
  7242  0094DE  EC51  F07B         	call	_write_command
  7243                           
  7244                           ;LCD320x240color.c: 1387: write_data(0x01);
  7245  0094E2  0E01               	movlw	1
  7246  0094E4  EC4B  F07B         	call	_write_data
  7247                           
  7248                           ;LCD320x240color.c: 1390: write_command(0xE0);
  7249  0094E8  0EE0               	movlw	224
  7250  0094EA  EC51  F07B         	call	_write_command
  7251                           
  7252                           ;LCD320x240color.c: 1391: write_data(0x0F);
  7253  0094EE  0E0F               	movlw	15
  7254  0094F0  EC4B  F07B         	call	_write_data
  7255                           
  7256                           ;LCD320x240color.c: 1392: write_data(0x31);
  7257  0094F4  0E31               	movlw	49
  7258  0094F6  EC4B  F07B         	call	_write_data
  7259                           
  7260                           ;LCD320x240color.c: 1393: write_data(0x2B);
  7261  0094FA  0E2B               	movlw	43
  7262  0094FC  EC4B  F07B         	call	_write_data
  7263                           
  7264                           ;LCD320x240color.c: 1394: write_data(0x0C);
  7265  009500  0E0C               	movlw	12
  7266  009502  EC4B  F07B         	call	_write_data
  7267                           
  7268                           ;LCD320x240color.c: 1395: write_data(0x0E);
  7269  009506  0E0E               	movlw	14
  7270  009508  EC4B  F07B         	call	_write_data
  7271                           
  7272                           ;LCD320x240color.c: 1396: write_data(0x08);
  7273  00950C  0E08               	movlw	8
  7274  00950E  EC4B  F07B         	call	_write_data
  7275                           
  7276                           ;LCD320x240color.c: 1397: write_data(0x4E);
  7277  009512  0E4E               	movlw	78
  7278  009514  EC4B  F07B         	call	_write_data
  7279                           
  7280                           ;LCD320x240color.c: 1398: write_data(0xF1);
  7281  009518  0EF1               	movlw	241
  7282  00951A  EC4B  F07B         	call	_write_data
  7283                           
  7284                           ;LCD320x240color.c: 1399: write_data(0x37);
  7285  00951E  0E37               	movlw	55
  7286  009520  EC4B  F07B         	call	_write_data
  7287                           
  7288                           ;LCD320x240color.c: 1400: write_data(0x07);
  7289  009524  0E07               	movlw	7
  7290  009526  EC4B  F07B         	call	_write_data
  7291                           
  7292                           ;LCD320x240color.c: 1401: write_data(0x10);
  7293  00952A  0E10               	movlw	16
  7294  00952C  EC4B  F07B         	call	_write_data
  7295                           
  7296                           ;LCD320x240color.c: 1402: write_data(0x03);
  7297  009530  0E03               	movlw	3
  7298  009532  EC4B  F07B         	call	_write_data
  7299                           
  7300                           ;LCD320x240color.c: 1403: write_data(0x0E);
  7301  009536  0E0E               	movlw	14
  7302  009538  EC4B  F07B         	call	_write_data
  7303                           
  7304                           ;LCD320x240color.c: 1404: write_data(0x09);
  7305  00953C  0E09               	movlw	9
  7306  00953E  EC4B  F07B         	call	_write_data
  7307                           
  7308                           ;LCD320x240color.c: 1405: write_data(0x00);
  7309  009542  0E00               	movlw	0
  7310  009544  EC4B  F07B         	call	_write_data
  7311                           
  7312                           ;LCD320x240color.c: 1408: write_command(0xE1);
  7313  009548  0EE1               	movlw	225
  7314  00954A  EC51  F07B         	call	_write_command
  7315                           
  7316                           ;LCD320x240color.c: 1409: write_data(0x00);
  7317  00954E  0E00               	movlw	0
  7318  009550  EC4B  F07B         	call	_write_data
  7319                           
  7320                           ;LCD320x240color.c: 1410: write_data(0x0E);
  7321  009554  0E0E               	movlw	14
  7322  009556  EC4B  F07B         	call	_write_data
  7323                           
  7324                           ;LCD320x240color.c: 1411: write_data(0x14);
  7325  00955A  0E14               	movlw	20
  7326  00955C  EC4B  F07B         	call	_write_data
  7327                           
  7328                           ;LCD320x240color.c: 1412: write_data(0x03);
  7329  009560  0E03               	movlw	3
  7330  009562  EC4B  F07B         	call	_write_data
  7331                           
  7332                           ;LCD320x240color.c: 1413: write_data(0x11);
  7333  009566  0E11               	movlw	17
  7334  009568  EC4B  F07B         	call	_write_data
  7335                           
  7336                           ;LCD320x240color.c: 1414: write_data(0x07);
  7337  00956C  0E07               	movlw	7
  7338  00956E  EC4B  F07B         	call	_write_data
  7339                           
  7340                           ;LCD320x240color.c: 1415: write_data(0x31);
  7341  009572  0E31               	movlw	49
  7342  009574  EC4B  F07B         	call	_write_data
  7343                           
  7344                           ;LCD320x240color.c: 1416: write_data(0xC1);
  7345  009578  0EC1               	movlw	193
  7346  00957A  EC4B  F07B         	call	_write_data
  7347                           
  7348                           ;LCD320x240color.c: 1417: write_data(0x48);
  7349  00957E  0E48               	movlw	72
  7350  009580  EC4B  F07B         	call	_write_data
  7351                           
  7352                           ;LCD320x240color.c: 1418: write_data(0x08);
  7353  009584  0E08               	movlw	8
  7354  009586  EC4B  F07B         	call	_write_data
  7355                           
  7356                           ;LCD320x240color.c: 1419: write_data(0x0F);
  7357  00958A  0E0F               	movlw	15
  7358  00958C  EC4B  F07B         	call	_write_data
  7359                           
  7360                           ;LCD320x240color.c: 1420: write_data(0x0C);
  7361  009590  0E0C               	movlw	12
  7362  009592  EC4B  F07B         	call	_write_data
  7363                           
  7364                           ;LCD320x240color.c: 1421: write_data(0x31);
  7365  009596  0E31               	movlw	49
  7366  009598  EC4B  F07B         	call	_write_data
  7367                           
  7368                           ;LCD320x240color.c: 1422: write_data(0x36);
  7369  00959C  0E36               	movlw	54
  7370  00959E  EC4B  F07B         	call	_write_data
  7371                           
  7372                           ;LCD320x240color.c: 1423: write_data(0x0F);
  7373  0095A2  0E0F               	movlw	15
  7374  0095A4  EC4B  F07B         	call	_write_data
  7375                           
  7376                           ;LCD320x240color.c: 1425: write_command(0x11);
  7377  0095A8  0E11               	movlw	17
  7378  0095AA  EC51  F07B         	call	_write_command
  7379                           
  7380                           ;LCD320x240color.c: 1426: _delay((unsigned long)((10)*(64000000/4000.0)));
  7381  0095AE  0ED0               	movlw	208
  7382  0095B0  6E11               	movwf	??_glcd_init^0,c
  7383  0095B2  0ECA               	movlw	202
  7384  0095B4                     u30117:
  7385  0095B4  2EE8               	decfsz	wreg,f,c
  7386  0095B6  D7FE               	bra	u30117
  7387  0095B8  2E11               	decfsz	??_glcd_init^0,f,c
  7388  0095BA  D7FC               	bra	u30117
  7389                           
  7390                           ;LCD320x240color.c: 1427: write_command(0x29);
  7391  0095BC  0E29               	movlw	41
  7392  0095BE  EC51  F07B         	call	_write_command
  7393                           
  7394                           ;LCD320x240color.c: 1434: write_command(0x2c);
  7395  0095C2  0E2C               	movlw	44
  7396  0095C4  EC51  F07B         	call	_write_command
  7397  0095C8  8089               	bsf	137,0,c	;volatile
  7398                           
  7399                           ;LCD320x240color.c: 1437: SPI1_Close();
  7400  0095CA  ECFF  F07B         	call	_SPI1_Close	;wreg free
  7401  0095CE  0012               	return		;funcret
  7402  0095D0                     __end_of_glcd_init:
  7403                           	callstack 0
  7404                           
  7405 ;; *************** function _TouchAdjust *****************
  7406 ;; Defined at:
  7407 ;;		line 1012 in file "main.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;  dy              2  139[BANK0 ] int 
  7412 ;;  dx              2  137[BANK0 ] int 
  7413 ;;  str           100    0        unsigned char [100]
  7414 ;;  kk              1  143[BANK0 ] unsigned char 
  7415 ;;  result          1  142[BANK0 ] char 
  7416 ;;  count           1  141[BANK0 ] unsigned char 
  7417 ;; Return value:  Size  Location     Type
  7418 ;;                  1    wreg      void 
  7419 ;; Registers used:
  7420 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : 0/2
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7427 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7428 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7429 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;Total ram usage:        9 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; Hardware stack levels required when called:   16
  7433 ;; This function calls:
  7434 ;;		_AlarmSoundOff
  7435 ;;		_AlarmSoundOn
  7436 ;;		_GetTouchLocation
  7437 ;;		_TouchAdjMsg
  7438 ;;		_display_drawLine
  7439 ;; This function is called by:
  7440 ;;		_main
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           	psect	text3
  7445  00913C                     __ptext3:
  7446                           	callstack 0
  7447  00913C                     _TouchAdjust:
  7448                           	callstack 14
  7449                           
  7450                           ;main.c: 1013: uint8_t count, kk;;main.c: 1014: char str[100];;main.c: 1015: int8_t resu
      +                          lt;;main.c: 1018: display_drawLine(17, 20, 23, 20, 0xFFFF);
  7451                           
  7452                           ;incstack = 0
  7453  00913C  0E00               	movlw	0
  7454  00913E  0100               	movlb	0	; () banked
  7455  009140  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
  7456  009142  0E11               	movlw	17
  7457  009144  6F60               	movwf	display_drawLine@x0& (0+255),b
  7458  009146  0E00               	movlw	0
  7459  009148  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
  7460  00914A  0E14               	movlw	20
  7461  00914C  6F62               	movwf	display_drawLine@y0& (0+255),b
  7462  00914E  0E00               	movlw	0
  7463  009150  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
  7464  009152  0E17               	movlw	23
  7465  009154  6F64               	movwf	display_drawLine@x1& (0+255),b
  7466  009156  0E00               	movlw	0
  7467  009158  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
  7468  00915A  0E14               	movlw	20
  7469  00915C  6F66               	movwf	display_drawLine@y1& (0+255),b
  7470  00915E  0EFF               	movlw	255
  7471  009160  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
  7472  009162  6968               	setf	display_drawLine@color& (0+255),b
  7473  009164  ECA7  F05C         	call	_display_drawLine	;wreg free
  7474                           
  7475                           ;main.c: 1019: display_drawLine(20, 17, 20, 23, 0xFFFF);
  7476  009168  0E00               	movlw	0
  7477  00916A  0100               	movlb	0	; () banked
  7478  00916C  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
  7479  00916E  0E14               	movlw	20
  7480  009170  6F60               	movwf	display_drawLine@x0& (0+255),b
  7481  009172  0E00               	movlw	0
  7482  009174  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
  7483  009176  0E11               	movlw	17
  7484  009178  6F62               	movwf	display_drawLine@y0& (0+255),b
  7485  00917A  0E00               	movlw	0
  7486  00917C  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
  7487  00917E  0E14               	movlw	20
  7488  009180  6F64               	movwf	display_drawLine@x1& (0+255),b
  7489  009182  0E00               	movlw	0
  7490  009184  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
  7491  009186  0E17               	movlw	23
  7492  009188  6F66               	movwf	display_drawLine@y1& (0+255),b
  7493  00918A  0EFF               	movlw	255
  7494  00918C  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
  7495  00918E  6968               	setf	display_drawLine@color& (0+255),b
  7496  009190  ECA7  F05C         	call	_display_drawLine	;wreg free
  7497                           
  7498                           ;main.c: 1022: TouchAdjMsg(1);
  7499  009194  0E01               	movlw	1
  7500  009196  EC10  F066         	call	_TouchAdjMsg
  7501                           
  7502                           ;main.c: 1024: count = 0;
  7503  00919A  0E00               	movlw	0
  7504  00919C  0100               	movlb	0	; () banked
  7505  00919E  6FED               	movwf	TouchAdjust@count& (0+255),b
  7506  0091A0                     l24707:
  7507                           
  7508                           ;main.c: 1026: if (TouchStatus == 2) {
  7509  0091A0  0E02               	movlw	2
  7510  0091A2  184C               	xorwf	_TouchStatus^0,w,c
  7511  0091A4  A4D8               	btfss	status,2,c
  7512  0091A6  D7FC               	goto	l24707
  7513                           
  7514                           ;main.c: 1027: if (count == 0) {
  7515  0091A8  0100               	movlb	0	; () banked
  7516  0091AA  51ED               	movf	TouchAdjust@count& (0+255),w,b
  7517  0091AC  A4D8               	btfss	status,2,c
  7518  0091AE  D086               	goto	l24743
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;main.c: 1029: for (kk=0; kk<2; kk++) {
  7522  0091B0  0E00               	movlw	0
  7523  0091B2  6FEF               	movwf	TouchAdjust@kk& (0+255),b
  7524  0091B4                     l24717:
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;main.c: 1031: result = GetTouchLocation(&T_x1, &T_y1);
  7528  0091B4  0E4D               	movlw	low _T_x1
  7529  0091B6  6E2A               	movwf	GetTouchLocation@tx^0,c
  7530  0091B8  6A2B               	clrf	(GetTouchLocation@tx+1)^0,c
  7531  0091BA  0EEA               	movlw	low _T_y1
  7532  0091BC  6E2C               	movwf	GetTouchLocation@ty^0,c
  7533  0091BE  0E02               	movlw	high _T_y1
  7534  0091C0  6E2D               	movwf	(GetTouchLocation@ty+1)^0,c
  7535  0091C2  EC94  F043         	call	_GetTouchLocation	;wreg free
  7536  0091C6  0100               	movlb	0	; () banked
  7537  0091C8  6FEE               	movwf	TouchAdjust@result& (0+255),b
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;main.c: 1032: } while (result == -1);
  7541  0091CA  29EE               	incf	TouchAdjust@result& (0+255),w,b
  7542  0091CC  B4D8               	btfsc	status,2,c
  7543  0091CE  D7F2               	goto	l24717
  7544                           
  7545                           ; BSR set to: 0
  7546  0091D0  2BEF               	incf	TouchAdjust@kk& (0+255),f,b
  7547                           
  7548                           ; BSR set to: 0
  7549  0091D2  0E01               	movlw	1
  7550  0091D4  65EF               	cpfsgt	TouchAdjust@kk& (0+255),b
  7551  0091D6  D7EE               	goto	l24717
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;main.c: 1033: };main.c: 1035: AlarmSoundOn(0);
  7555  0091D8  0E00               	movlw	0
  7556  0091DA  ECDE  F073         	call	_AlarmSoundOn
  7557                           
  7558                           ;main.c: 1036: _delay((unsigned long)((100)*(64000000/4000.0)));
  7559  0091DE  0E09               	movlw	9
  7560  0091E0  0100               	movlb	0	; () banked
  7561  0091E2  6FE8               	movwf	(??_TouchAdjust+1)& (0+255),b
  7562  0091E4  0E1E               	movlw	30
  7563  0091E6  6FE7               	movwf	??_TouchAdjust& (0+255),b
  7564  0091E8  0EE4               	movlw	228
  7565  0091EA                     u30127:
  7566  0091EA  2EE8               	decfsz	wreg,f,c
  7567  0091EC  D7FE               	bra	u30127
  7568  0091EE  2FE7               	decfsz	??_TouchAdjust& (0+255),f,b
  7569  0091F0  D7FC               	bra	u30127
  7570  0091F2  2FE8               	decfsz	(??_TouchAdjust+1)& (0+255),f,b
  7571  0091F4  D7FA               	bra	u30127
  7572  0091F6  F000               	nop	
  7573                           
  7574                           ;main.c: 1037: AlarmSoundOff();
  7575  0091F8  EC1D  F07B         	call	_AlarmSoundOff	;wreg free
  7576                           
  7577                           ;main.c: 1040: display_drawLine(17, 20, 23, 20, 0x8410);
  7578  0091FC  0E00               	movlw	0
  7579  0091FE  0100               	movlb	0	; () banked
  7580  009200  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
  7581  009202  0E11               	movlw	17
  7582  009204  6F60               	movwf	display_drawLine@x0& (0+255),b
  7583  009206  0E00               	movlw	0
  7584  009208  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
  7585  00920A  0E14               	movlw	20
  7586  00920C  6F62               	movwf	display_drawLine@y0& (0+255),b
  7587  00920E  0E00               	movlw	0
  7588  009210  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
  7589  009212  0E17               	movlw	23
  7590  009214  6F64               	movwf	display_drawLine@x1& (0+255),b
  7591  009216  0E00               	movlw	0
  7592  009218  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
  7593  00921A  0E14               	movlw	20
  7594  00921C  6F66               	movwf	display_drawLine@y1& (0+255),b
  7595  00921E  0E84               	movlw	132
  7596  009220  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
  7597  009222  0E10               	movlw	16
  7598  009224  6F68               	movwf	display_drawLine@color& (0+255),b
  7599  009226  ECA7  F05C         	call	_display_drawLine	;wreg free
  7600                           
  7601                           ;main.c: 1041: display_drawLine(20, 17, 20, 23, 0x8410);
  7602  00922A  0E00               	movlw	0
  7603  00922C  0100               	movlb	0	; () banked
  7604  00922E  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
  7605  009230  0E14               	movlw	20
  7606  009232  6F60               	movwf	display_drawLine@x0& (0+255),b
  7607  009234  0E00               	movlw	0
  7608  009236  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
  7609  009238  0E11               	movlw	17
  7610  00923A  6F62               	movwf	display_drawLine@y0& (0+255),b
  7611  00923C  0E00               	movlw	0
  7612  00923E  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
  7613  009240  0E14               	movlw	20
  7614  009242  6F64               	movwf	display_drawLine@x1& (0+255),b
  7615  009244  0E00               	movlw	0
  7616  009246  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
  7617  009248  0E17               	movlw	23
  7618  00924A  6F66               	movwf	display_drawLine@y1& (0+255),b
  7619  00924C  0E84               	movlw	132
  7620  00924E  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
  7621  009250  0E10               	movlw	16
  7622  009252  6F68               	movwf	display_drawLine@color& (0+255),b
  7623  009254  ECA7  F05C         	call	_display_drawLine	;wreg free
  7624                           
  7625                           ;main.c: 1044: display_drawLine(297, 220, 303, 220, 0xFFFF);
  7626  009258  0E01               	movlw	1
  7627  00925A  0100               	movlb	0	; () banked
  7628  00925C  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
  7629  00925E  0E29               	movlw	41
  7630  009260  6F60               	movwf	display_drawLine@x0& (0+255),b
  7631  009262  0E00               	movlw	0
  7632  009264  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
  7633  009266  0EDC               	movlw	220
  7634  009268  6F62               	movwf	display_drawLine@y0& (0+255),b
  7635  00926A  0E01               	movlw	1
  7636  00926C  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
  7637  00926E  0E2F               	movlw	47
  7638  009270  6F64               	movwf	display_drawLine@x1& (0+255),b
  7639  009272  0E00               	movlw	0
  7640  009274  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
  7641  009276  0EDC               	movlw	220
  7642  009278  6F66               	movwf	display_drawLine@y1& (0+255),b
  7643  00927A  0EFF               	movlw	255
  7644  00927C  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
  7645  00927E  6968               	setf	display_drawLine@color& (0+255),b
  7646  009280  ECA7  F05C         	call	_display_drawLine	;wreg free
  7647                           
  7648                           ;main.c: 1045: display_drawLine(300, 217, 300, 223, 0xFFFF);
  7649  009284  0E01               	movlw	1
  7650  009286  0100               	movlb	0	; () banked
  7651  009288  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
  7652  00928A  0E2C               	movlw	44
  7653  00928C  6F60               	movwf	display_drawLine@x0& (0+255),b
  7654  00928E  0E00               	movlw	0
  7655  009290  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
  7656  009292  0ED9               	movlw	217
  7657  009294  6F62               	movwf	display_drawLine@y0& (0+255),b
  7658  009296  0E01               	movlw	1
  7659  009298  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
  7660  00929A  0E2C               	movlw	44
  7661  00929C  6F64               	movwf	display_drawLine@x1& (0+255),b
  7662  00929E  0E00               	movlw	0
  7663  0092A0  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
  7664  0092A2  0EDF               	movlw	223
  7665  0092A4  6F66               	movwf	display_drawLine@y1& (0+255),b
  7666  0092A6  0EFF               	movlw	255
  7667  0092A8  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
  7668  0092AA  6968               	setf	display_drawLine@color& (0+255),b
  7669  0092AC  ECA7  F05C         	call	_display_drawLine	;wreg free
  7670                           
  7671                           ;main.c: 1047: TouchAdjMsg(2);
  7672  0092B0  0E02               	movlw	2
  7673  0092B2  EC10  F066         	call	_TouchAdjMsg
  7674                           
  7675                           ;main.c: 1049: count++;
  7676  0092B6  0100               	movlb	0	; () banked
  7677  0092B8  2BED               	incf	TouchAdjust@count& (0+255),f,b
  7678                           
  7679                           ;main.c: 1050: } else {
  7680  0092BA  D067               	goto	l24777
  7681  0092BC                     l24743:
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;main.c: 1054: for (kk=0; kk<2; kk++) {
  7685  0092BC  0E00               	movlw	0
  7686  0092BE  6FEF               	movwf	TouchAdjust@kk& (0+255),b
  7687  0092C0                     l24749:
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;main.c: 1056: result = GetTouchLocation(&T_x2, &T_y2);
  7691  0092C0  0EE8               	movlw	low _T_x2
  7692  0092C2  6E2A               	movwf	GetTouchLocation@tx^0,c
  7693  0092C4  0E02               	movlw	high _T_x2
  7694  0092C6  6E2B               	movwf	(GetTouchLocation@tx+1)^0,c
  7695  0092C8  0EE6               	movlw	low _T_y2
  7696  0092CA  6E2C               	movwf	GetTouchLocation@ty^0,c
  7697  0092CC  0E02               	movlw	high _T_y2
  7698  0092CE  6E2D               	movwf	(GetTouchLocation@ty+1)^0,c
  7699  0092D0  EC94  F043         	call	_GetTouchLocation	;wreg free
  7700  0092D4  0100               	movlb	0	; () banked
  7701  0092D6  6FEE               	movwf	TouchAdjust@result& (0+255),b
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;main.c: 1057: } while (result == -1);
  7705  0092D8  29EE               	incf	TouchAdjust@result& (0+255),w,b
  7706  0092DA  B4D8               	btfsc	status,2,c
  7707  0092DC  D7F1               	goto	l24749
  7708                           
  7709                           ; BSR set to: 0
  7710  0092DE  2BEF               	incf	TouchAdjust@kk& (0+255),f,b
  7711                           
  7712                           ; BSR set to: 0
  7713  0092E0  0E01               	movlw	1
  7714  0092E2  65EF               	cpfsgt	TouchAdjust@kk& (0+255),b
  7715  0092E4  D7ED               	goto	l24749
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;main.c: 1058: };main.c: 1060: if (T_x1 > T_x2) dx = T_x1 - T_x2;
  7719  0092E6  504D               	movf	_T_x1^0,w,c
  7720  0092E8  0102               	movlb	2	; () banked
  7721  0092EA  5DE8               	subwf	_T_x2& (0+255),w,b
  7722  0092EC  504E               	movf	(_T_x1+1)^0,w,c
  7723  0092EE  59E9               	subwfb	(_T_x2+1)& (0+255),w,b
  7724  0092F0  B0D8               	btfsc	status,0,c
  7725  0092F2  D008               	goto	l24761
  7726                           
  7727                           ; BSR set to: 2
  7728  0092F4  51E8               	movf	_T_x2& (0+255),w,b
  7729  0092F6  5C4D               	subwf	_T_x1^0,w,c
  7730  0092F8  0100               	movlb	0	; () banked
  7731  0092FA  6FE9               	movwf	TouchAdjust@dx& (0+255),b
  7732  0092FC  0102               	movlb	2	; () banked
  7733  0092FE  51E9               	movf	(_T_x2+1)& (0+255),w,b
  7734  009300  584E               	subwfb	(_T_x1+1)^0,w,c
  7735  009302  D007               	goto	L1
  7736  009304                     l24761:
  7737                           
  7738                           ; BSR set to: 2
  7739                           ;main.c: 1061: else dx = T_x2 - T_x1;
  7740  009304  504D               	movf	_T_x1^0,w,c
  7741  009306  5DE8               	subwf	_T_x2& (0+255),w,b
  7742  009308  0100               	movlb	0	; () banked
  7743  00930A  6FE9               	movwf	TouchAdjust@dx& (0+255),b
  7744  00930C  504E               	movf	(_T_x1+1)^0,w,c
  7745  00930E  0102               	movlb	2	; () banked
  7746  009310  59E9               	subwfb	(_T_x2+1)& (0+255),w,b
  7747  009312                     L1:
  7748  009312  0100               	movlb	0	; () banked
  7749  009314  6FEA               	movwf	(TouchAdjust@dx+1)& (0+255),b
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;main.c: 1062: if (T_y1 > T_y2) dy = T_y1 - T_y2;
  7753  009316  0102               	movlb	2	; () banked
  7754  009318  51EA               	movf	_T_y1& (0+255),w,b
  7755  00931A  5DE6               	subwf	_T_y2& (0+255),w,b
  7756  00931C  51EB               	movf	(_T_y1+1)& (0+255),w,b
  7757  00931E  59E7               	subwfb	(_T_y2+1)& (0+255),w,b
  7758  009320  B0D8               	btfsc	status,0,c
  7759  009322  D008               	goto	l24765
  7760                           
  7761                           ; BSR set to: 2
  7762  009324  51E6               	movf	_T_y2& (0+255),w,b
  7763  009326  5DEA               	subwf	_T_y1& (0+255),w,b
  7764  009328  0100               	movlb	0	; () banked
  7765  00932A  6FEB               	movwf	TouchAdjust@dy& (0+255),b
  7766  00932C  0102               	movlb	2	; () banked
  7767  00932E  51E7               	movf	(_T_y2+1)& (0+255),w,b
  7768  009330  59EB               	subwfb	(_T_y1+1)& (0+255),w,b
  7769  009332  D007               	goto	L2
  7770  009334                     l24765:
  7771                           
  7772                           ; BSR set to: 2
  7773                           ;main.c: 1063: else dy = T_y2 - T_y1;
  7774  009334  51EA               	movf	_T_y1& (0+255),w,b
  7775  009336  5DE6               	subwf	_T_y2& (0+255),w,b
  7776  009338  0100               	movlb	0	; () banked
  7777  00933A  6FEB               	movwf	TouchAdjust@dy& (0+255),b
  7778  00933C  0102               	movlb	2	; () banked
  7779  00933E  51EB               	movf	(_T_y1+1)& (0+255),w,b
  7780  009340  59E7               	subwfb	(_T_y2+1)& (0+255),w,b
  7781  009342                     L2:
  7782  009342  0100               	movlb	0	; () banked
  7783  009344  6FEC               	movwf	(TouchAdjust@dy+1)& (0+255),b
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;main.c: 1064: } while ((dx < 1000) || (dy < 1000));
  7787  009346  BFEA               	btfsc	(TouchAdjust@dx+1)& (0+255),7,b
  7788  009348  D7B9               	goto	l24743
  7789  00934A  0EE8               	movlw	232
  7790  00934C  5DE9               	subwf	TouchAdjust@dx& (0+255),w,b
  7791  00934E  0E03               	movlw	3
  7792  009350  59EA               	subwfb	(TouchAdjust@dx+1)& (0+255),w,b
  7793  009352  B0D8               	btfsc	status,0,c
  7794                           
  7795                           ; BSR set to: 0
  7796  009354  BFEC               	btfsc	(TouchAdjust@dy+1)& (0+255),7,b
  7797  009356  D7B2               	goto	l24743
  7798  009358  0EE8               	movlw	232
  7799  00935A  5DEB               	subwf	TouchAdjust@dy& (0+255),w,b
  7800  00935C  0E03               	movlw	3
  7801  00935E  59EC               	subwfb	(TouchAdjust@dy+1)& (0+255),w,b
  7802  009360  A0D8               	btfss	status,0,c
  7803  009362  D7AC               	goto	l24743
  7804                           
  7805                           ; BSR set to: 0
  7806                           ;main.c: 1071: AlarmSoundOn(0);
  7807  009364  0E00               	movlw	0
  7808  009366  ECDE  F073         	call	_AlarmSoundOn
  7809                           
  7810                           ;main.c: 1072: _delay((unsigned long)((100)*(64000000/4000.0)));
  7811  00936A  0E09               	movlw	9
  7812  00936C  0100               	movlb	0	; () banked
  7813  00936E  6FE8               	movwf	(??_TouchAdjust+1)& (0+255),b
  7814  009370  0E1E               	movlw	30
  7815  009372  6FE7               	movwf	??_TouchAdjust& (0+255),b
  7816  009374  0EE4               	movlw	228
  7817  009376                     u30137:
  7818  009376  2EE8               	decfsz	wreg,f,c
  7819  009378  D7FE               	bra	u30137
  7820  00937A  2FE7               	decfsz	??_TouchAdjust& (0+255),f,b
  7821  00937C  D7FC               	bra	u30137
  7822  00937E  2FE8               	decfsz	(??_TouchAdjust+1)& (0+255),f,b
  7823  009380  D7FA               	bra	u30137
  7824  009382  F000               	nop	
  7825                           
  7826                           ;main.c: 1073: AlarmSoundOff();
  7827  009384  EC1D  F07B         	call	_AlarmSoundOff	;wreg free
  7828  009388  0012               	return	
  7829  00938A                     l24777:
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;main.c: 1075: };main.c: 1076: TouchStatus++;
  7833  00938A  2A4C               	incf	_TouchStatus^0,f,c
  7834  00938C  D709               	goto	l24707
  7835  00938E                     __end_of_TouchAdjust:
  7836                           	callstack 0
  7837                           
  7838 ;; *************** function _TouchAdjMsg *****************
  7839 ;; Defined at:
  7840 ;;		line 991 in file "main.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;  num             1    wreg     unsigned char 
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;  num             1  130[BANK0 ] unsigned char 
  7845 ;;  str           100   30[BANK0 ] unsigned char [100]
  7846 ;;  color2          2  133[BANK0 ] unsigned int 
  7847 ;;  color1          2  131[BANK0 ] unsigned int 
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      void 
  7850 ;; Registers used:
  7851 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7852 ;; Tracked objects:
  7853 ;;		On entry : 0/2
  7854 ;;		On exit  : 0/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7858 ;;      Locals:         0     105       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7860 ;;      Totals:         0     105       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7861 ;;Total ram usage:      105 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:   15
  7864 ;; This function calls:
  7865 ;;		_display_SetFont
  7866 ;;		_display_drawChars
  7867 ;;		_sprintf
  7868 ;; This function is called by:
  7869 ;;		_TouchAdjust
  7870 ;; This function uses a non-reentrant model
  7871 ;;
  7872                           
  7873                           	psect	text4
  7874  00CC20                     __ptext4:
  7875                           	callstack 0
  7876  00CC20                     _TouchAdjMsg:
  7877                           	callstack 14
  7878                           
  7879                           ;incstack = 0
  7880                           ;TouchAdjMsg@num stored from wreg
  7881  00CC20  0100               	movlb	0	; () banked
  7882  00CC22  6FE2               	movwf	TouchAdjMsg@num& (0+255),b
  7883                           
  7884                           ;main.c: 992: uint16_t color1, color2;;main.c: 993: char str[100];;main.c: 995: if (num 
      +                          == 1) {
  7885  00CC24  0100               	movlb	0	; () banked
  7886  00CC26  05E2               	decf	TouchAdjMsg@num& (0+255),w,b
  7887  00CC28  A4D8               	btfss	status,2,c
  7888  00CC2A  D007               	goto	l24191
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;main.c: 996: color1 = 0xFFFF;
  7892  00CC2C  69E3               	setf	TouchAdjMsg@color1& (0+255),b
  7893  00CC2E  69E4               	setf	(TouchAdjMsg@color1+1)& (0+255),b
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;main.c: 997: color2 = 0x8410;
  7897  00CC30  0E84               	movlw	132
  7898  00CC32  6FE6               	movwf	(TouchAdjMsg@color2+1)& (0+255),b
  7899  00CC34  0E10               	movlw	16
  7900  00CC36  6FE5               	movwf	TouchAdjMsg@color2& (0+255),b
  7901                           
  7902                           ;main.c: 998: } else {
  7903  00CC38  D006               	goto	l24195
  7904  00CC3A                     l24191:
  7905                           
  7906                           ; BSR set to: 0
  7907                           ;main.c: 999: color1 = 0x8410;
  7908  00CC3A  0E84               	movlw	132
  7909  00CC3C  6FE4               	movwf	(TouchAdjMsg@color1+1)& (0+255),b
  7910  00CC3E  0E10               	movlw	16
  7911  00CC40  6FE3               	movwf	TouchAdjMsg@color1& (0+255),b
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;main.c: 1000: color2 = 0xFFFF;
  7915  00CC42  69E5               	setf	TouchAdjMsg@color2& (0+255),b
  7916  00CC44  69E6               	setf	(TouchAdjMsg@color2+1)& (0+255),b
  7917  00CC46                     l24195:
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;main.c: 1001: };main.c: 1002: display_SetFont(font);
  7921  00CC46  0ED5               	movlw	low _font
  7922  00CC48  6E0E               	movwf	display_SetFont@font^0,c
  7923  00CC4A  0EFA               	movlw	high _font
  7924  00CC4C  6E0F               	movwf	(display_SetFont@font+1)^0,c
  7925  00CC4E  EC92  F071         	call	_display_SetFont	;wreg free
  7926                           
  7927                           ;main.c: 1003: sprintf(str, "1. Touch + at Up Left");
  7928  00CC52  0E7E               	movlw	low TouchAdjMsg@str
  7929  00CC54  6E2A               	movwf	sprintf@sp^0,c
  7930  00CC56  6A2B               	clrf	(sprintf@sp+1)^0,c
  7931  00CC58  0E16               	movlw	low STR_16
  7932  00CC5A  6E2C               	movwf	sprintf@f^0,c
  7933  00CC5C  0EFF               	movlw	high STR_16
  7934  00CC5E  6E2D               	movwf	(sprintf@f+1)^0,c
  7935  00CC60  ECD0  F028         	call	_sprintf	;wreg free
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;main.c: 1004: display_drawChars(50, 100, str, color1, 0x0000, 1);
  7939  00CC64  0E00               	movlw	0
  7940  00CC66  6F6B               	movwf	(display_drawChars@x+1)& (0+255),b
  7941  00CC68  0E32               	movlw	50
  7942  00CC6A  6F6A               	movwf	display_drawChars@x& (0+255),b
  7943  00CC6C  0E00               	movlw	0
  7944  00CC6E  6F6D               	movwf	(display_drawChars@y+1)& (0+255),b
  7945  00CC70  0E64               	movlw	100
  7946  00CC72  6F6C               	movwf	display_drawChars@y& (0+255),b
  7947  00CC74  0E7E               	movlw	low TouchAdjMsg@str
  7948  00CC76  6F6E               	movwf	display_drawChars@s& (0+255),b
  7949  00CC78  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
  7950  00CC7A  C0E3  F070         	movff	TouchAdjMsg@color1,display_drawChars@color
  7951  00CC7E  C0E4  F071         	movff	TouchAdjMsg@color1+1,display_drawChars@color+1
  7952  00CC82  0E00               	movlw	0
  7953  00CC84  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
  7954  00CC86  0E00               	movlw	0
  7955  00CC88  6F72               	movwf	display_drawChars@bg& (0+255),b
  7956  00CC8A  0E01               	movlw	1
  7957  00CC8C  6F74               	movwf	display_drawChars@size& (0+255),b
  7958  00CC8E  EC13  F06D         	call	_display_drawChars	;wreg free
  7959                           
  7960                           ;main.c: 1005: sprintf(str, "2. Touch + at Bottom Right");
  7961  00CC92  0E7E               	movlw	low TouchAdjMsg@str
  7962  00CC94  6E2A               	movwf	sprintf@sp^0,c
  7963  00CC96  6A2B               	clrf	(sprintf@sp+1)^0,c
  7964  00CC98  0ECD               	movlw	low STR_17
  7965  00CC9A  6E2C               	movwf	sprintf@f^0,c
  7966  00CC9C  0EFE               	movlw	high STR_17
  7967  00CC9E  6E2D               	movwf	(sprintf@f+1)^0,c
  7968  00CCA0  ECD0  F028         	call	_sprintf	;wreg free
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;main.c: 1006: display_drawChars(50, 120, str, color2, 0x0000, 1);
  7972  00CCA4  0E00               	movlw	0
  7973  00CCA6  6F6B               	movwf	(display_drawChars@x+1)& (0+255),b
  7974  00CCA8  0E32               	movlw	50
  7975  00CCAA  6F6A               	movwf	display_drawChars@x& (0+255),b
  7976  00CCAC  0E00               	movlw	0
  7977  00CCAE  6F6D               	movwf	(display_drawChars@y+1)& (0+255),b
  7978  00CCB0  0E78               	movlw	120
  7979  00CCB2  6F6C               	movwf	display_drawChars@y& (0+255),b
  7980  00CCB4  0E7E               	movlw	low TouchAdjMsg@str
  7981  00CCB6  6F6E               	movwf	display_drawChars@s& (0+255),b
  7982  00CCB8  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
  7983  00CCBA  C0E5  F070         	movff	TouchAdjMsg@color2,display_drawChars@color
  7984  00CCBE  C0E6  F071         	movff	TouchAdjMsg@color2+1,display_drawChars@color+1
  7985  00CCC2  0E00               	movlw	0
  7986  00CCC4  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
  7987  00CCC6  0E00               	movlw	0
  7988  00CCC8  6F72               	movwf	display_drawChars@bg& (0+255),b
  7989  00CCCA  0E01               	movlw	1
  7990  00CCCC  6F74               	movwf	display_drawChars@size& (0+255),b
  7991  00CCCE  EC13  F06D         	call	_display_drawChars	;wreg free
  7992  00CCD2  0012               	return		;funcret
  7993  00CCD4                     __end_of_TouchAdjMsg:
  7994                           	callstack 0
  7995                           
  7996 ;; *************** function _TMR5_StartTimer *****************
  7997 ;; Defined at:
  7998 ;;		line 93 in file "mcc_generated_files/tmr5.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;		None
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;		None
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  1    wreg      void 
  8005 ;; Registers used:
  8006 ;;		None
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 3F/F
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;Total ram usage:        0 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    6
  8019 ;; This function calls:
  8020 ;;		Nothing
  8021 ;; This function is called by:
  8022 ;;		_main
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           	psect	text5
  8027  00F7C8                     __ptext5:
  8028                           	callstack 0
  8029  00F7C8                     _TMR5_StartTimer:
  8030                           	callstack 24
  8031                           
  8032                           ;tmr5.c: 96: T5CONbits.TMR5ON = 1;
  8033                           
  8034                           ;incstack = 0
  8035  00F7C8  010F               	movlb	15	; () banked
  8036  00F7CA  814E               	bsf	78,0,b	;volatile
  8037                           
  8038                           ; BSR set to: 15
  8039  00F7CC  0012               	return		;funcret
  8040  00F7CE                     __end_of_TMR5_StartTimer:
  8041                           	callstack 0
  8042                           
  8043 ;; *************** function _SlideSWProc *****************
  8044 ;; Defined at:
  8045 ;;		line 831 in file "main.c"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;		None
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;  jj              1   59[BANK0 ] char 
  8050 ;; Return value:  Size  Location     Type
  8051 ;;                  1    wreg      void 
  8052 ;; Registers used:
  8053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8054 ;; Tracked objects:
  8055 ;;		On entry : 0/2
  8056 ;;		On exit  : 0/0
  8057 ;;		Unchanged: 0/0
  8058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8060 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8062 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;Total ram usage:        1 bytes
  8064 ;; Hardware stack levels used:    1
  8065 ;; Hardware stack levels required when called:   17
  8066 ;; This function calls:
  8067 ;;		_AlarmSoundOff
  8068 ;;		_DATAEE_WriteByte
  8069 ;;		_RTC_resetAlarm
  8070 ;;		_RTC_setAlarmTime
  8071 ;;		_drawAlarmTime
  8072 ;; This function is called by:
  8073 ;;		_main
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           	psect	text6
  8078  00D418                     __ptext6:
  8079                           	callstack 0
  8080  00D418                     _SlideSWProc:
  8081                           	callstack 13
  8082                           
  8083                           ;main.c: 832: int8_t jj;;main.c: 834: if (SlideSWStatus == 2) {
  8084                           
  8085                           ; BSR set to: 15
  8086                           ;incstack = 0
  8087  00D418  0E02               	movlw	2
  8088  00D41A  1851               	xorwf	_SlideSWStatus^0,w,c
  8089  00D41C  A4D8               	btfss	status,2,c
  8090  00D41E  D031               	goto	l24625
  8091                           
  8092                           ;main.c: 836: drawAlarmTime(DisplayMode, AlarmTime);
  8093  00D420  0EFD               	movlw	low _AlarmTime
  8094  00D422  0100               	movlb	0	; () banked
  8095  00D424  6F95               	movwf	drawAlarmTime@alarmtime& (0+255),b
  8096  00D426  0E02               	movlw	high _AlarmTime
  8097  00D428  6F96               	movwf	(drawAlarmTime@alarmtime+1)& (0+255),b
  8098  00D42A  0102               	movlb	2	; () banked
  8099  00D42C  51E2               	movf	_DisplayMode& (0+255),w,b
  8100  00D42E  EC38  F03F         	call	_drawAlarmTime
  8101                           
  8102                           ;main.c: 837: AlarmStatus = 0;
  8103  00D432  0E00               	movlw	0
  8104  00D434  0103               	movlb	3	; () banked
  8105  00D436  6FA3               	movwf	_AlarmStatus& (0+255),b
  8106                           
  8107                           ; BSR set to: 3
  8108                           ;main.c: 838: RTC_setAlarmTime(AlarmTime);
  8109  00D438  0EFD               	movlw	low _AlarmTime
  8110  00D43A  6E22               	movwf	RTC_setAlarmTime@alarmtime^0,c
  8111  00D43C  0E02               	movlw	high _AlarmTime
  8112  00D43E  6E23               	movwf	(RTC_setAlarmTime@alarmtime+1)^0,c
  8113  00D440  EC92  F05F         	call	_RTC_setAlarmTime	;wreg free
  8114                           
  8115                           ;main.c: 841: for (jj=0; jj<3; jj++) {
  8116  00D444  0E00               	movlw	0
  8117  00D446  0100               	movlb	0	; () banked
  8118  00D448  6F9B               	movwf	SlideSWProc@jj& (0+255),b
  8119  00D44A                     l24617:
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;main.c: 842: DATAEE_WriteByte(0x0c+jj, AlarmTime[jj]);
  8123  00D44A  0E0C               	movlw	12
  8124  00D44C  259B               	addwf	SlideSWProc@jj& (0+255),w,b
  8125  00D44E  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
  8126  00D450  6AE8               	clrf	wreg,c
  8127  00D452  B0D8               	btfsc	status,0,c
  8128  00D454  2AE8               	incf	wreg,f,c
  8129  00D456  BF9B               	btfsc	SlideSWProc@jj& (0+255),7,b
  8130  00D458  06E8               	decf	wreg,f,c
  8131  00D45A  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
  8132  00D45C  0EFD               	movlw	low _AlarmTime
  8133  00D45E  259B               	addwf	SlideSWProc@jj& (0+255),w,b
  8134  00D460  6ED9               	movwf	fsr2l,c
  8135  00D462  6ADA               	clrf	fsr2h,c
  8136  00D464  0E02               	movlw	high _AlarmTime
  8137  00D466  22DA               	addwfc	fsr2h,f,c
  8138  00D468  50DF               	movf	indf2,w,c
  8139  00D46A  6E10               	movwf	DATAEE_WriteByte@bData^0,c
  8140  00D46C  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
  8141  00D470  0100               	movlb	0	; () banked
  8142  00D472  2B9B               	incf	SlideSWProc@jj& (0+255),f,b
  8143                           
  8144                           ; BSR set to: 0
  8145  00D474  519B               	movf	SlideSWProc@jj& (0+255),w,b
  8146  00D476  0A80               	xorlw	128
  8147  00D478  0F7D               	addlw	-131
  8148  00D47A  A0D8               	btfss	status,0,c
  8149  00D47C  D7E6               	goto	l24617
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;main.c: 843: };main.c: 844: SlideSWStatus++;
  8153  00D47E  2A51               	incf	_SlideSWStatus^0,f,c
  8154                           
  8155                           ;main.c: 846: } else if (SlideSWStatus == 0) {
  8156  00D480  0012               	return	
  8157  00D482                     l24625:
  8158  00D482  5051               	movf	_SlideSWStatus^0,w,c
  8159  00D484  A4D8               	btfss	status,2,c
  8160  00D486  0012               	return	
  8161                           
  8162                           ;main.c: 848: AlarmSoundOff();
  8163  00D488  EC1D  F07B         	call	_AlarmSoundOff	;wreg free
  8164                           
  8165                           ;main.c: 849: AlarmStatus = 0;
  8166  00D48C  0E00               	movlw	0
  8167  00D48E  0103               	movlb	3	; () banked
  8168  00D490  6FA3               	movwf	_AlarmStatus& (0+255),b
  8169                           
  8170                           ; BSR set to: 3
  8171                           ;main.c: 850: RTC_resetAlarm();
  8172  00D492  EC2C  F074         	call	_RTC_resetAlarm	;wreg free
  8173                           
  8174                           ;main.c: 851: drawAlarmTime(DisplayMode, AlarmTime);
  8175  00D496  0EFD               	movlw	low _AlarmTime
  8176  00D498  0100               	movlb	0	; () banked
  8177  00D49A  6F95               	movwf	drawAlarmTime@alarmtime& (0+255),b
  8178  00D49C  0E02               	movlw	high _AlarmTime
  8179  00D49E  6F96               	movwf	(drawAlarmTime@alarmtime+1)& (0+255),b
  8180  00D4A0  0102               	movlb	2	; () banked
  8181  00D4A2  51E2               	movf	_DisplayMode& (0+255),w,b
  8182  00D4A4  EC38  F03F         	call	_drawAlarmTime
  8183                           
  8184                           ;main.c: 852: SlideSWStatus++;
  8185  00D4A8  2A51               	incf	_SlideSWStatus^0,f,c
  8186                           
  8187                           ;main.c: 853: SmoothCount = 0;
  8188  00D4AA  0E00               	movlw	0
  8189  00D4AC  0103               	movlb	3	; () banked
  8190  00D4AE  6FA2               	movwf	_SmoothCount& (0+255),b
  8191  00D4B0  0012               	return		;funcret
  8192  00D4B2                     __end_of_SlideSWProc:
  8193                           	callstack 0
  8194                           
  8195 ;; *************** function _SettingProc *****************
  8196 ;; Defined at:
  8197 ;;		line 692 in file "main.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;		None
  8200 ;; Auto vars:     Size  Location     Type
  8201 ;;  yp              2  105[BANK0 ] unsigned int 
  8202 ;;  xp              2  103[BANK0 ] unsigned int 
  8203 ;;  str           100    0        unsigned char [100]
  8204 ;;  jj              1  116[BANK0 ] char 
  8205 ;;  delta           1  115[BANK0 ] char 
  8206 ;;  d               1  114[BANK0 ] unsigned char 
  8207 ;;  m               1  113[BANK0 ] unsigned char 
  8208 ;;  y               1  112[BANK0 ] unsigned char 
  8209 ;;  hh              1  111[BANK0 ] char 
  8210 ;;  mm              1  110[BANK0 ] char 
  8211 ;;  dd              1  109[BANK0 ] char 
  8212 ;;  mo              1  108[BANK0 ] char 
  8213 ;;  yy              1  107[BANK0 ] char 
  8214 ;;  SetOK           1    0        unsigned char 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  1    wreg      void 
  8217 ;; Registers used:
  8218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8219 ;; Tracked objects:
  8220 ;;		On entry : 3F/2
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;Total ram usage:       23 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:   19
  8231 ;; This function calls:
  8232 ;;		_Bcd2Hex
  8233 ;;		_ButtonCheck
  8234 ;;		_DrawSetBox
  8235 ;;		_GetTouchLocation
  8236 ;;		_Hex2Bcd
  8237 ;;		_IncDecTime
  8238 ;;		_RTC_setDate
  8239 ;;		_RTC_setTime
  8240 ;;		_TransCoordination
  8241 ;;		_WriteYMD
  8242 ;;		___awmod
  8243 ;;		___wmul
  8244 ;;		_display_drawChars
  8245 ;;		_display_drawRoundRect
  8246 ;;		_drawTime
  8247 ;;		_getWeekdays
  8248 ;;		_lcd_fill
  8249 ;;		_strlen
  8250 ;; This function is called by:
  8251 ;;		_main
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           	psect	text7
  8256  004C70                     __ptext7:
  8257                           	callstack 0
  8258  004C70                     _SettingProc:
  8259                           	callstack 11
  8260                           
  8261                           ; BSR set to: 2
  8262                           ;main.c: 696: int8_t yy, mo, dd, mm, hh;;main.c: 697: uint8_t y, m, d;;main.c: 698: stat
      +                          ic uint8_t changeTime;;main.c: 700: if (Mode == 0x10) {
  8263                           
  8264                           ; BSR set to: 2
  8265                           
  8266                           ;incstack = 0
  8267  004C70  0E10               	movlw	16
  8268  004C72  19E3               	xorwf	_Mode& (0+255),w,b
  8269  004C74  A4D8               	btfss	status,2,c
  8270  004C76  D118               	goto	u27760
  8271                           
  8272                           ; BSR set to: 2
  8273                           ;main.c: 702: lcd_fill(0x0000);
  8274  004C78  0E00               	movlw	0
  8275  004C7A  6E1A               	movwf	(lcd_fill@bg_color+1)^0,c
  8276  004C7C  0E00               	movlw	0
  8277  004C7E  6E19               	movwf	lcd_fill@bg_color^0,c
  8278  004C80  EC06  F06C         	call	_lcd_fill	;wreg free
  8279                           
  8280                           ;main.c: 704: Mode = 0x14;
  8281  004C84  0E14               	movlw	20
  8282  004C86  0102               	movlb	2	; () banked
  8283  004C88  6FE3               	movwf	_Mode& (0+255),b
  8284                           
  8285                           ; BSR set to: 2
  8286                           ;main.c: 705: for (jj = 0; jj < 7; jj++) TmpTime[jj] = DateTime[jj];
  8287  004C8A  0E00               	movlw	0
  8288  004C8C  0100               	movlb	0	; () banked
  8289  004C8E  6FD4               	movwf	SettingProc@jj& (0+255),b
  8290  004C90                     l24453:
  8291                           
  8292                           ; BSR set to: 0
  8293  004C90  0EF6               	movlw	low _DateTime
  8294  004C92  25D4               	addwf	SettingProc@jj& (0+255),w,b
  8295  004C94  6ED9               	movwf	fsr2l,c
  8296  004C96  6ADA               	clrf	fsr2h,c
  8297  004C98  0E02               	movlw	high _DateTime
  8298  004C9A  22DA               	addwfc	fsr2h,f,c
  8299  004C9C  0EBB               	movlw	low _TmpTime
  8300  004C9E  25D4               	addwf	SettingProc@jj& (0+255),w,b
  8301  004CA0  6EE1               	movwf	fsr1l,c
  8302  004CA2  6AE2               	clrf	fsr1h,c
  8303  004CA4  0E03               	movlw	high _TmpTime
  8304  004CA6  22E2               	addwfc	fsr1h,f,c
  8305  004CA8  CFDF FFE7          	movff	indf2,indf1
  8306                           
  8307                           ; BSR set to: 0
  8308  004CAC  2BD4               	incf	SettingProc@jj& (0+255),f,b
  8309                           
  8310                           ; BSR set to: 0
  8311  004CAE  51D4               	movf	SettingProc@jj& (0+255),w,b
  8312  004CB0  0A80               	xorlw	128
  8313  004CB2  0F79               	addlw	-135
  8314  004CB4  A0D8               	btfss	status,0,c
  8315  004CB6  D7EC               	goto	l24453
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;main.c: 706: changeTime = 0;
  8319  004CB8  0E00               	movlw	0
  8320  004CBA  0103               	movlb	3	; () banked
  8321  004CBC  6F9D               	movwf	SettingProc@changeTime& (0+255),b
  8322                           
  8323                           ;main.c: 708: for (jj = 0; jj < 3; jj++) preDateTime[jj] = 0xff;
  8324  004CBE  0E00               	movlw	0
  8325  004CC0  0100               	movlb	0	; () banked
  8326  004CC2  6FD4               	movwf	SettingProc@jj& (0+255),b
  8327  004CC4                     l24465:
  8328                           
  8329                           ; BSR set to: 0
  8330  004CC4  0E6D               	movlw	low _preDateTime
  8331  004CC6  25D4               	addwf	SettingProc@jj& (0+255),w,b
  8332  004CC8  6ED9               	movwf	fsr2l,c
  8333  004CCA  6ADA               	clrf	fsr2h,c
  8334  004CCC  0E03               	movlw	high _preDateTime
  8335  004CCE  22DA               	addwfc	fsr2h,f,c
  8336  004CD0  0EFF               	movlw	255
  8337  004CD2  6EDF               	movwf	indf2,c
  8338                           
  8339                           ; BSR set to: 0
  8340  004CD4  2BD4               	incf	SettingProc@jj& (0+255),f,b
  8341                           
  8342                           ; BSR set to: 0
  8343  004CD6  51D4               	movf	SettingProc@jj& (0+255),w,b
  8344  004CD8  0A80               	xorlw	128
  8345  004CDA  0F7D               	addlw	-131
  8346  004CDC  A0D8               	btfss	status,0,c
  8347  004CDE  D7F2               	goto	l24465
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;main.c: 710: DrawSetBox(Mode);
  8351  004CE0  0102               	movlb	2	; () banked
  8352  004CE2  51E3               	movf	_Mode& (0+255),w,b
  8353  004CE4  EC35  F046         	call	_DrawSetBox
  8354                           
  8355                           ;main.c: 713: for (jj=4; jj<=5; jj++) {
  8356  004CE8  0E04               	movlw	4
  8357  004CEA  0100               	movlb	0	; () banked
  8358  004CEC  6FD4               	movwf	SettingProc@jj& (0+255),b
  8359  004CEE                     l24479:
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;main.c: 714: display_drawRoundRect(ButtonObj3[jj].x, ButtonObj3[jj].y, ButtonObj3[jj].x
      +                          w, ButtonObj3[jj].yw, 10, 0xFFFF);
  8363  004CEE  51D4               	movf	SettingProc@jj& (0+255),w,b
  8364  004CF0  0D0A               	mullw	10
  8365  004CF2  0E00               	movlw	low _ButtonObj3
  8366  004CF4  24F3               	addwf	243,w,c
  8367  004CF6  6ED9               	movwf	fsr2l,c
  8368  004CF8  0E04               	movlw	high _ButtonObj3
  8369  004CFA  20F4               	addwfc	prodh,w,c
  8370  004CFC  6EDA               	movwf	fsr2h,c
  8371  004CFE  CFDE F034          	movff	postinc2,display_drawRoundRect@x
  8372  004D02  CFDD F035          	movff	postdec2,display_drawRoundRect@x+1
  8373  004D06  51D4               	movf	SettingProc@jj& (0+255),w,b
  8374  004D08  0D0A               	mullw	10
  8375  004D0A  0E02               	movlw	low (_ButtonObj3+2)
  8376  004D0C  24F3               	addwf	243,w,c
  8377  004D0E  6ED9               	movwf	fsr2l,c
  8378  004D10  0E04               	movlw	high (_ButtonObj3+2)
  8379  004D12  20F4               	addwfc	prodh,w,c
  8380  004D14  6EDA               	movwf	fsr2h,c
  8381  004D16  CFDE F036          	movff	postinc2,display_drawRoundRect@y
  8382  004D1A  CFDD F037          	movff	postdec2,display_drawRoundRect@y+1
  8383  004D1E  51D4               	movf	SettingProc@jj& (0+255),w,b
  8384  004D20  0D0A               	mullw	10
  8385  004D22  0E04               	movlw	low (_ButtonObj3+4)
  8386  004D24  24F3               	addwf	243,w,c
  8387  004D26  6ED9               	movwf	fsr2l,c
  8388  004D28  0E04               	movlw	high (_ButtonObj3+4)
  8389  004D2A  20F4               	addwfc	prodh,w,c
  8390  004D2C  6EDA               	movwf	fsr2h,c
  8391  004D2E  CFDE F038          	movff	postinc2,display_drawRoundRect@w
  8392  004D32  CFDD F039          	movff	postdec2,display_drawRoundRect@w+1
  8393  004D36  51D4               	movf	SettingProc@jj& (0+255),w,b
  8394  004D38  0D0A               	mullw	10
  8395  004D3A  0E06               	movlw	low (_ButtonObj3+6)
  8396  004D3C  24F3               	addwf	243,w,c
  8397  004D3E  6ED9               	movwf	fsr2l,c
  8398  004D40  0E04               	movlw	high (_ButtonObj3+6)
  8399  004D42  20F4               	addwfc	prodh,w,c
  8400  004D44  6EDA               	movwf	fsr2h,c
  8401  004D46  CFDE F03A          	movff	postinc2,display_drawRoundRect@h
  8402  004D4A  CFDD F03B          	movff	postdec2,display_drawRoundRect@h+1
  8403  004D4E  0E00               	movlw	0
  8404  004D50  6E3D               	movwf	(display_drawRoundRect@r+1)^0,c
  8405  004D52  0E0A               	movlw	10
  8406  004D54  6E3C               	movwf	display_drawRoundRect@r^0,c
  8407  004D56  0EFF               	movlw	255
  8408  004D58  6E3F               	movwf	(display_drawRoundRect@color+1)^0,c
  8409  004D5A  683E               	setf	display_drawRoundRect@color^0,c
  8410  004D5C  EC71  F047         	call	_display_drawRoundRect	;wreg free
  8411                           
  8412                           ;main.c: 716: uint16_t xp = ButtonObj3[jj].x + ButtonObj3[jj].xw/2 - strlen(ButtonName[j
      +                          j])*4*(jj-3);
  8413  004D60  0100               	movlb	0	; () banked
  8414  004D62  51D4               	movf	SettingProc@jj& (0+255),w,b
  8415  004D64  0D0A               	mullw	10
  8416  004D66  0E00               	movlw	low _ButtonObj3
  8417  004D68  24F3               	addwf	243,w,c
  8418  004D6A  6ED9               	movwf	fsr2l,c
  8419  004D6C  0E04               	movlw	high _ButtonObj3
  8420  004D6E  20F4               	addwfc	prodh,w,c
  8421  004D70  6EDA               	movwf	fsr2h,c
  8422  004D72  CFDE F0BE          	movff	postinc2,??_SettingProc
  8423  004D76  CFDD F0BF          	movff	postdec2,??_SettingProc+1
  8424  004D7A  0EFD               	movlw	253
  8425  004D7C  6FC0               	movwf	(??_SettingProc+2)& (0+255),b
  8426  004D7E  0EFF               	movlw	255
  8427  004D80  6FC1               	movwf	(??_SettingProc+3)& (0+255),b
  8428  004D82  51C0               	movf	(??_SettingProc+2)& (0+255),w,b
  8429  004D84  25D4               	addwf	SettingProc@jj& (0+255),w,b
  8430  004D86  6E1D               	movwf	___wmul@multiplier^0,c
  8431  004D88  0E00               	movlw	0
  8432  004D8A  BFD4               	btfsc	SettingProc@jj& (0+255),7,b
  8433  004D8C  0EFF               	movlw	255
  8434  004D8E  21C1               	addwfc	(??_SettingProc+3)& (0+255),w,b
  8435  004D90  6E1E               	movwf	(___wmul@multiplier+1)^0,c
  8436  004D92  51D4               	movf	SettingProc@jj& (0+255),w,b
  8437  004D94  0D08               	mullw	8
  8438  004D96  0E67               	movlw	low _ButtonName
  8439  004D98  24F3               	addwf	243,w,c
  8440  004D9A  6E0E               	movwf	strlen@s^0,c
  8441  004D9C  0EFE               	movlw	high _ButtonName
  8442  004D9E  20F4               	addwfc	prodh,w,c
  8443  004DA0  6E0F               	movwf	(strlen@s+1)^0,c
  8444  004DA2  ECBC  F074         	call	_strlen	;wreg free
  8445  004DA6  90D8               	bcf	status,0,c
  8446  004DA8  360E               	rlcf	?_strlen^0,f,c
  8447  004DAA  360F               	rlcf	(?_strlen+1)^0,f,c
  8448  004DAC  90D8               	bcf	status,0,c
  8449  004DAE  360E               	rlcf	?_strlen^0,f,c
  8450  004DB0  360F               	rlcf	(?_strlen+1)^0,f,c
  8451  004DB2  C00E  F01F         	movff	?_strlen,___wmul@multiplicand
  8452  004DB6  C00F  F020         	movff	?_strlen+1,___wmul@multiplicand+1
  8453  004DBA  EC12  F079         	call	___wmul	;wreg free
  8454  004DBE  0100               	movlb	0	; () banked
  8455  004DC0  51D4               	movf	SettingProc@jj& (0+255),w,b
  8456  004DC2  0D0A               	mullw	10
  8457  004DC4  0E04               	movlw	low (_ButtonObj3+4)
  8458  004DC6  24F3               	addwf	243,w,c
  8459  004DC8  6ED9               	movwf	fsr2l,c
  8460  004DCA  0E04               	movlw	high (_ButtonObj3+4)
  8461  004DCC  20F4               	addwfc	prodh,w,c
  8462  004DCE  6EDA               	movwf	fsr2h,c
  8463  004DD0  CFDE F0C2          	movff	postinc2,??_SettingProc+4
  8464  004DD4  CFDD F0C3          	movff	postdec2,??_SettingProc+5
  8465  004DD8  90D8               	bcf	status,0,c
  8466  004DDA  31C3               	rrcf	(??_SettingProc+5)& (0+255),w,b
  8467  004DDC  6FC5               	movwf	(??_SettingProc+7)& (0+255),b
  8468  004DDE  31C2               	rrcf	(??_SettingProc+4)& (0+255),w,b
  8469  004DE0  6FC4               	movwf	(??_SettingProc+6)& (0+255),b
  8470  004DE2  501D               	movf	?___wmul^0,w,c
  8471  004DE4  5FC4               	subwf	(??_SettingProc+6)& (0+255),f,b
  8472  004DE6  501E               	movf	(?___wmul+1)^0,w,c
  8473  004DE8  5BC5               	subwfb	(??_SettingProc+7)& (0+255),f,b
  8474  004DEA  51BE               	movf	??_SettingProc& (0+255),w,b
  8475  004DEC  25C4               	addwf	(??_SettingProc+6)& (0+255),w,b
  8476  004DEE  6FC7               	movwf	SettingProc@xp& (0+255),b
  8477  004DF0  51BF               	movf	(??_SettingProc+1)& (0+255),w,b
  8478  004DF2  21C5               	addwfc	(??_SettingProc+7)& (0+255),w,b
  8479  004DF4  6FC8               	movwf	(SettingProc@xp+1)& (0+255),b
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;main.c: 717: uint16_t yp = ButtonObj3[jj].y + ButtonObj3[jj].yw/2 - 4*(jj-3);
  8483  004DF6  51D4               	movf	SettingProc@jj& (0+255),w,b
  8484  004DF8  0D0A               	mullw	10
  8485  004DFA  0E02               	movlw	low (_ButtonObj3+2)
  8486  004DFC  24F3               	addwf	243,w,c
  8487  004DFE  6ED9               	movwf	fsr2l,c
  8488  004E00  0E04               	movlw	high (_ButtonObj3+2)
  8489  004E02  20F4               	addwfc	prodh,w,c
  8490  004E04  6EDA               	movwf	fsr2h,c
  8491  004E06  CFDE F0BE          	movff	postinc2,??_SettingProc
  8492  004E0A  CFDD F0BF          	movff	postdec2,??_SettingProc+1
  8493  004E0E  C0D4  F0C0         	movff	SettingProc@jj,??_SettingProc+2
  8494  004E12  6BC1               	clrf	(??_SettingProc+3)& (0+255),b
  8495  004E14  BFC0               	btfsc	(??_SettingProc+2)& (0+255),7,b
  8496  004E16  07C1               	decf	(??_SettingProc+3)& (0+255),f,b
  8497  004E18  90D8               	bcf	status,0,c
  8498  004E1A  37C0               	rlcf	(??_SettingProc+2)& (0+255),f,b
  8499  004E1C  37C1               	rlcf	(??_SettingProc+3)& (0+255),f,b
  8500  004E1E  90D8               	bcf	status,0,c
  8501  004E20  37C0               	rlcf	(??_SettingProc+2)& (0+255),f,b
  8502  004E22  37C1               	rlcf	(??_SettingProc+3)& (0+255),f,b
  8503  004E24  51D4               	movf	SettingProc@jj& (0+255),w,b
  8504  004E26  0D0A               	mullw	10
  8505  004E28  0E06               	movlw	low (_ButtonObj3+6)
  8506  004E2A  24F3               	addwf	243,w,c
  8507  004E2C  6ED9               	movwf	fsr2l,c
  8508  004E2E  0E04               	movlw	high (_ButtonObj3+6)
  8509  004E30  20F4               	addwfc	prodh,w,c
  8510  004E32  6EDA               	movwf	fsr2h,c
  8511  004E34  CFDE F0C2          	movff	postinc2,??_SettingProc+4
  8512  004E38  CFDD F0C3          	movff	postdec2,??_SettingProc+5
  8513  004E3C  90D8               	bcf	status,0,c
  8514  004E3E  31C3               	rrcf	(??_SettingProc+5)& (0+255),w,b
  8515  004E40  6FC5               	movwf	(??_SettingProc+7)& (0+255),b
  8516  004E42  31C2               	rrcf	(??_SettingProc+4)& (0+255),w,b
  8517  004E44  6FC4               	movwf	(??_SettingProc+6)& (0+255),b
  8518  004E46  51C0               	movf	(??_SettingProc+2)& (0+255),w,b
  8519  004E48  5FC4               	subwf	(??_SettingProc+6)& (0+255),f,b
  8520  004E4A  51C1               	movf	(??_SettingProc+3)& (0+255),w,b
  8521  004E4C  5BC5               	subwfb	(??_SettingProc+7)& (0+255),f,b
  8522  004E4E  51BE               	movf	??_SettingProc& (0+255),w,b
  8523  004E50  27C4               	addwf	(??_SettingProc+6)& (0+255),f,b
  8524  004E52  51BF               	movf	(??_SettingProc+1)& (0+255),w,b
  8525  004E54  23C5               	addwfc	(??_SettingProc+7)& (0+255),f,b
  8526  004E56  0E0C               	movlw	12
  8527  004E58  25C4               	addwf	(??_SettingProc+6)& (0+255),w,b
  8528  004E5A  6FC9               	movwf	SettingProc@yp& (0+255),b
  8529  004E5C  0E00               	movlw	0
  8530  004E5E  21C5               	addwfc	(??_SettingProc+7)& (0+255),w,b
  8531  004E60  6FCA               	movwf	(SettingProc@yp+1)& (0+255),b
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;main.c: 720: display_drawChars(xp, yp, (char *) ButtonName[jj], 0xFFFF, 0x0000, jj-3);
  8535  004E62  C0C7  F06A         	movff	SettingProc@xp,display_drawChars@x
  8536  004E66  C0C8  F06B         	movff	SettingProc@xp+1,display_drawChars@x+1
  8537  004E6A  C0C9  F06C         	movff	SettingProc@yp,display_drawChars@y
  8538  004E6E  C0CA  F06D         	movff	SettingProc@yp+1,display_drawChars@y+1
  8539  004E72  51D4               	movf	SettingProc@jj& (0+255),w,b
  8540  004E74  0D08               	mullw	8
  8541  004E76  0E67               	movlw	low _ButtonName
  8542  004E78  24F3               	addwf	243,w,c
  8543  004E7A  6F6E               	movwf	display_drawChars@s& (0+255),b
  8544  004E7C  0EFE               	movlw	high _ButtonName
  8545  004E7E  20F4               	addwfc	prodh,w,c
  8546  004E80  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
  8547  004E82  0EFF               	movlw	255
  8548  004E84  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
  8549  004E86  6970               	setf	display_drawChars@color& (0+255),b
  8550  004E88  0E00               	movlw	0
  8551  004E8A  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
  8552  004E8C  0E00               	movlw	0
  8553  004E8E  6F72               	movwf	display_drawChars@bg& (0+255),b
  8554  004E90  51D4               	movf	SettingProc@jj& (0+255),w,b
  8555  004E92  0FFD               	addlw	253
  8556  004E94  6F74               	movwf	display_drawChars@size& (0+255),b
  8557  004E96  EC13  F06D         	call	_display_drawChars	;wreg free
  8558  004E9A  0100               	movlb	0	; () banked
  8559  004E9C  2BD4               	incf	SettingProc@jj& (0+255),f,b
  8560                           
  8561                           ; BSR set to: 0
  8562  004E9E  51D4               	movf	SettingProc@jj& (0+255),w,b
  8563  004EA0  0A80               	xorlw	128
  8564  004EA2  0F7A               	addlw	-134
  8565  004EA4  A0D8               	btfss	status,0,c
  8566  004EA6  D723               	goto	l24479
  8567  004EA8                     u27760:
  8568                           
  8569                           ;main.c: 721: };main.c: 723: };main.c: 726: if (TouchStatus == 2) {
  8570  004EA8  0E02               	movlw	2
  8571  004EAA  184C               	xorwf	_TouchStatus^0,w,c
  8572  004EAC  A4D8               	btfss	status,2,c
  8573  004EAE  D065               	goto	l24529
  8574                           
  8575                           ;main.c: 727: TouchStatus++;
  8576  004EB0  2A4C               	incf	_TouchStatus^0,f,c
  8577                           
  8578                           ;main.c: 729: GetTouchLocation(&TouchX, &TouchY);
  8579  004EB2  0EC8               	movlw	low _TouchX
  8580  004EB4  6E2A               	movwf	GetTouchLocation@tx^0,c
  8581  004EB6  0E03               	movlw	high _TouchX
  8582  004EB8  6E2B               	movwf	(GetTouchLocation@tx+1)^0,c
  8583  004EBA  0EC6               	movlw	low _TouchY
  8584  004EBC  6E2C               	movwf	GetTouchLocation@ty^0,c
  8585  004EBE  0E03               	movlw	high _TouchY
  8586  004EC0  6E2D               	movwf	(GetTouchLocation@ty+1)^0,c
  8587  004EC2  EC94  F043         	call	_GetTouchLocation	;wreg free
  8588                           
  8589                           ;main.c: 730: TransCoordination(TouchX, TouchY, &Test_x, &Test_y);
  8590  004EC6  C3C8  F028         	movff	_TouchX,TransCoordination@x
  8591  004ECA  C3C9  F029         	movff	_TouchX+1,TransCoordination@x+1
  8592  004ECE  C3C6  F02A         	movff	_TouchY,TransCoordination@y
  8593  004ED2  C3C7  F02B         	movff	_TouchY+1,TransCoordination@y+1
  8594  004ED6  0EEE               	movlw	low _Test_x
  8595  004ED8  6E2C               	movwf	TransCoordination@xg^0,c
  8596  004EDA  0E02               	movlw	high _Test_x
  8597  004EDC  6E2D               	movwf	(TransCoordination@xg+1)^0,c
  8598  004EDE  0EEC               	movlw	low _Test_y
  8599  004EE0  6E2E               	movwf	TransCoordination@yg^0,c
  8600  004EE2  0E02               	movlw	high _Test_y
  8601  004EE4  6E2F               	movwf	(TransCoordination@yg+1)^0,c
  8602  004EE6  EC00  F052         	call	_TransCoordination	;wreg free
  8603                           
  8604                           ;main.c: 738: Mode = ButtonCheck(Test_x, Test_y);
  8605  004EEA  C2EE  F0B7         	movff	_Test_x,ButtonCheck@x
  8606  004EEE  C2EF  F0B8         	movff	_Test_x+1,ButtonCheck@x+1
  8607  004EF2  C2EC  F0B9         	movff	_Test_y,ButtonCheck@y
  8608  004EF6  C2ED  F0BA         	movff	_Test_y+1,ButtonCheck@y+1
  8609  004EFA  EC77  F070         	call	_ButtonCheck	;wreg free
  8610  004EFE  0102               	movlb	2	; () banked
  8611  004F00  6FE3               	movwf	_Mode& (0+255),b
  8612                           
  8613                           ;main.c: 740: switch (Mode) {
  8614  004F02  D033               	goto	l24527
  8615  004F04                     l24501:
  8616                           
  8617                           ; BSR set to: 2
  8618                           ;main.c: 742: Mode = 0x00;
  8619  004F04  0E00               	movlw	0
  8620  004F06  6FE3               	movwf	_Mode& (0+255),b
  8621  004F08  0012               	return	
  8622  004F0A                     l24505:
  8623                           
  8624                           ; BSR set to: 2
  8625                           ;main.c: 746: for (jj = 0; jj < 7; jj++) DateTime[jj] = TmpTime[jj];
  8626  004F0A  0E00               	movlw	0
  8627  004F0C  0100               	movlb	0	; () banked
  8628  004F0E  6FD4               	movwf	SettingProc@jj& (0+255),b
  8629  004F10                     l24511:
  8630                           
  8631                           ; BSR set to: 0
  8632  004F10  0EBB               	movlw	low _TmpTime
  8633  004F12  25D4               	addwf	SettingProc@jj& (0+255),w,b
  8634  004F14  6ED9               	movwf	fsr2l,c
  8635  004F16  6ADA               	clrf	fsr2h,c
  8636  004F18  0E03               	movlw	high _TmpTime
  8637  004F1A  22DA               	addwfc	fsr2h,f,c
  8638  004F1C  0EF6               	movlw	low _DateTime
  8639  004F1E  25D4               	addwf	SettingProc@jj& (0+255),w,b
  8640  004F20  6EE1               	movwf	fsr1l,c
  8641  004F22  6AE2               	clrf	fsr1h,c
  8642  004F24  0E02               	movlw	high _DateTime
  8643  004F26  22E2               	addwfc	fsr1h,f,c
  8644  004F28  CFDF FFE7          	movff	indf2,indf1
  8645                           
  8646                           ; BSR set to: 0
  8647  004F2C  2BD4               	incf	SettingProc@jj& (0+255),f,b
  8648                           
  8649                           ; BSR set to: 0
  8650  004F2E  51D4               	movf	SettingProc@jj& (0+255),w,b
  8651  004F30  0A80               	xorlw	128
  8652  004F32  0F79               	addlw	-135
  8653  004F34  A0D8               	btfss	status,0,c
  8654  004F36  D7EC               	goto	l24511
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;main.c: 747: DateTime[0] = 0x00;
  8658  004F38  0E00               	movlw	0
  8659  004F3A  0102               	movlb	2	; () banked
  8660  004F3C  6FF6               	movwf	_DateTime& (0+255),b
  8661                           
  8662                           ;main.c: 748: if (changeTime) RTC_setTime(DateTime);
  8663  004F3E  0103               	movlb	3	; () banked
  8664  004F40  519D               	movf	SettingProc@changeTime& (0+255),w,b
  8665  004F42  B4D8               	btfsc	status,2,c
  8666  004F44  D006               	goto	l2636
  8667                           
  8668                           ; BSR set to: 3
  8669  004F46  0EF6               	movlw	low _DateTime
  8670  004F48  6E22               	movwf	RTC_setTime@datetime^0,c
  8671  004F4A  0E02               	movlw	high _DateTime
  8672  004F4C  6E23               	movwf	(RTC_setTime@datetime+1)^0,c
  8673  004F4E  ECD8  F06D         	call	_RTC_setTime	;wreg free
  8674  004F52                     l2636:
  8675                           
  8676                           ;main.c: 749: RTC_setDate(DateTime);
  8677  004F52  0EF6               	movlw	low _DateTime
  8678  004F54  6E22               	movwf	RTC_setDate@datetime^0,c
  8679  004F56  0E02               	movlw	high _DateTime
  8680  004F58  6E23               	movwf	(RTC_setDate@datetime+1)^0,c
  8681  004F5A  EC1D  F068         	call	_RTC_setDate	;wreg free
  8682                           
  8683                           ;main.c: 751: WriteYMD();
  8684  004F5E  EC7B  F06B         	call	_WriteYMD	;wreg free
  8685  004F62                     l24523:
  8686                           
  8687                           ;main.c: 752: Mode = 0x00;
  8688  004F62  0E00               	movlw	0
  8689  004F64  0102               	movlb	2	; () banked
  8690  004F66  6FE3               	movwf	_Mode& (0+255),b
  8691                           
  8692                           ;main.c: 753: break;
  8693  004F68  D011               	goto	l24539
  8694  004F6A                     l24527:
  8695                           
  8696                           ; BSR set to: 2
  8697  004F6A  51E3               	movf	_Mode& (0+255),w,b
  8698                           
  8699                           ; Switch size 1, requested type "simple"
  8700                           ; Number of cases is 2, Range of values is 21 to 22
  8701                           ; switch strategies available:
  8702                           ; Name         Instructions Cycles
  8703                           ; simple_byte            7     4 (average)
  8704                           ;	Chosen strategy is simple_byte
  8705  004F6C  0A15               	xorlw	21	; case 21
  8706  004F6E  B4D8               	btfsc	status,2,c
  8707  004F70  D7C9               	goto	l24501
  8708  004F72  0A03               	xorlw	3	; case 22
  8709  004F74  B4D8               	btfsc	status,2,c
  8710  004F76  D7C9               	goto	l24505
  8711  004F78  D009               	goto	l24539
  8712  004F7A                     l24529:
  8713  004F7A  0E05               	movlw	5
  8714  004F7C  184C               	xorwf	_TouchStatus^0,w,c
  8715  004F7E  A4D8               	btfss	status,2,c
  8716  004F80  D002               	goto	l24535
  8717                           
  8718                           ;main.c: 757: TouchStatus++;
  8719  004F82  2A4C               	incf	_TouchStatus^0,f,c
  8720  004F84  D7EE               	goto	l24523
  8721  004F86                     l24535:
  8722  004F86  504C               	movf	_TouchStatus^0,w,c
  8723  004F88  B4D8               	btfsc	status,2,c
  8724                           
  8725                           ;main.c: 766: TouchStatus++;
  8726  004F8A  2A4C               	incf	_TouchStatus^0,f,c
  8727  004F8C                     l24539:
  8728                           
  8729                           ;main.c: 768: };main.c: 774: if (RotCount != 0) {
  8730  004F8C  0102               	movlb	2	; () banked
  8731  004F8E  51E1               	movf	_RotCount& (0+255),w,b
  8732  004F90  B4D8               	btfsc	status,2,c
  8733  004F92  0012               	return	
  8734                           
  8735                           ; BSR set to: 2
  8736                           ;main.c: 775: delta = RotCount;
  8737  004F94  C2E1  F0D3         	movff	_RotCount,SettingProc@delta
  8738                           
  8739                           ; BSR set to: 2
  8740                           ;main.c: 776: RotCount = 0;
  8741  004F98  0E00               	movlw	0
  8742  004F9A  6FE1               	movwf	_RotCount& (0+255),b
  8743                           
  8744                           ; BSR set to: 2
  8745                           ;main.c: 778: if ((delta > 2) || (delta < -2)) {
  8746  004F9C  0100               	movlb	0	; () banked
  8747  004F9E  51D3               	movf	SettingProc@delta& (0+255),w,b
  8748  004FA0  0A80               	xorlw	128
  8749  004FA2  0F7D               	addlw	-131
  8750  004FA4  B0D8               	btfsc	status,0,c
  8751  004FA6  D005               	goto	u27840
  8752                           
  8753                           ; BSR set to: 0
  8754  004FA8  51D3               	movf	SettingProc@delta& (0+255),w,b
  8755  004FAA  0A80               	xorlw	128
  8756  004FAC  0F82               	addlw	130
  8757  004FAE  B0D8               	btfsc	status,0,c
  8758  004FB0  D011               	goto	l24553
  8759  004FB2                     u27840:
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;main.c: 780: if (Accel < 8) Accel = Accel * 2;
  8763  004FB2  0102               	movlb	2	; () banked
  8764  004FB4  51F5               	movf	_Accel& (0+255),w,b
  8765  004FB6  0A80               	xorlw	128
  8766  004FB8  0F78               	addlw	-136
  8767  004FBA  B0D8               	btfsc	status,0,c
  8768  004FBC  D004               	goto	l2646
  8769                           
  8770                           ; BSR set to: 2
  8771  004FBE  51F5               	movf	_Accel& (0+255),w,b
  8772  004FC0  0D02               	mullw	2
  8773  004FC2  CFF3 F2F5          	movff	prodl,_Accel
  8774  004FC6                     l2646:
  8775                           
  8776                           ; BSR set to: 2
  8777                           ;main.c: 781: delta = delta * Accel;
  8778  004FC6  0100               	movlb	0	; () banked
  8779  004FC8  51D3               	movf	SettingProc@delta& (0+255),w,b
  8780  004FCA  0102               	movlb	2	; () banked
  8781  004FCC  03F5               	mulwf	_Accel& (0+255),b
  8782  004FCE  CFF3 F0D3          	movff	prodl,SettingProc@delta
  8783                           
  8784                           ;main.c: 782: }
  8785  004FD2  D003               	goto	l24555
  8786  004FD4                     l24553:
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;main.c: 783: else Accel = 1;
  8790  004FD4  0E01               	movlw	1
  8791  004FD6  0102               	movlb	2	; () banked
  8792  004FD8  6FF5               	movwf	_Accel& (0+255),b
  8793  004FDA                     l24555:
  8794                           
  8795                           ; BSR set to: 2
  8796                           ;main.c: 785: if (Mode == 0x14) {
  8797  004FDA  0E14               	movlw	20
  8798  004FDC  19E3               	xorwf	_Mode& (0+255),w,b
  8799  004FDE  A4D8               	btfss	status,2,c
  8800  004FE0  D036               	goto	l24569
  8801                           
  8802                           ; BSR set to: 2
  8803                           ;main.c: 786: mm = (int8_t)Bcd2Hex(TmpTime[1]);
  8804  004FE2  0103               	movlb	3	; () banked
  8805  004FE4  51BC               	movf	(_TmpTime+1)& (0+255),w,b
  8806  004FE6  EC84  F07A         	call	_Bcd2Hex
  8807  004FEA  0100               	movlb	0	; () banked
  8808  004FEC  6FCE               	movwf	SettingProc@mm& (0+255),b
  8809                           
  8810                           ;main.c: 787: hh = (int8_t)Bcd2Hex(TmpTime[2]);
  8811  004FEE  0103               	movlb	3	; () banked
  8812  004FF0  51BD               	movf	(_TmpTime+2)& (0+255),w,b
  8813  004FF2  EC84  F07A         	call	_Bcd2Hex
  8814  004FF6  0100               	movlb	0	; () banked
  8815  004FF8  6FCF               	movwf	SettingProc@hh& (0+255),b
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;main.c: 788: IncDecTime(delta, &hh, &mm);
  8819  004FFA  51D3               	movf	SettingProc@delta& (0+255),w,b
  8820  004FFC  6E0E               	movwf	IncDecTime@dmm^0,c
  8821  004FFE  6A0F               	clrf	(IncDecTime@dmm+1)^0,c
  8822  005000  BE0E               	btfsc	IncDecTime@dmm^0,7,c
  8823  005002  060F               	decf	(IncDecTime@dmm+1)^0,f,c
  8824  005004  0ECF               	movlw	low SettingProc@hh
  8825  005006  6E10               	movwf	IncDecTime@hh^0,c
  8826  005008  6A11               	clrf	(IncDecTime@hh+1)^0,c
  8827  00500A  0ECE               	movlw	low SettingProc@mm
  8828  00500C  6E12               	movwf	IncDecTime@mm^0,c
  8829  00500E  6A13               	clrf	(IncDecTime@mm+1)^0,c
  8830  005010  EC54  F065         	call	_IncDecTime	;wreg free
  8831                           
  8832                           ;main.c: 789: TmpTime[1] = Hex2Bcd(mm);
  8833  005014  0100               	movlb	0	; () banked
  8834  005016  51CE               	movf	SettingProc@mm& (0+255),w,b
  8835  005018  EC8A  F079         	call	_Hex2Bcd
  8836  00501C  0103               	movlb	3	; () banked
  8837  00501E  6FBC               	movwf	(_TmpTime+1)& (0+255),b
  8838                           
  8839                           ; BSR set to: 3
  8840                           ;main.c: 790: TmpTime[2] = Hex2Bcd(hh);
  8841  005020  0100               	movlb	0	; () banked
  8842  005022  51CF               	movf	SettingProc@hh& (0+255),w,b
  8843  005024  EC8A  F079         	call	_Hex2Bcd
  8844  005028  0103               	movlb	3	; () banked
  8845  00502A  6FBD               	movwf	(_TmpTime+2)& (0+255),b
  8846                           
  8847                           ; BSR set to: 3
  8848                           ;main.c: 792: drawTime(DisplayMode, TmpTime, 0xF800);
  8849  00502C  0EBB               	movlw	low _TmpTime
  8850  00502E  0100               	movlb	0	; () banked
  8851  005030  6FB2               	movwf	drawTime@datetime& (0+255),b
  8852  005032  0E03               	movlw	high _TmpTime
  8853  005034  6FB3               	movwf	(drawTime@datetime+1)& (0+255),b
  8854  005036  0EF8               	movlw	248
  8855  005038  6FB5               	movwf	(drawTime@color+1)& (0+255),b
  8856  00503A  0E00               	movlw	0
  8857  00503C  6FB4               	movwf	drawTime@color& (0+255),b
  8858  00503E  0102               	movlb	2	; () banked
  8859  005040  51E2               	movf	_DisplayMode& (0+255),w,b
  8860  005042  ECC1  F061         	call	_drawTime
  8861                           
  8862                           ;main.c: 794: changeTime = 1;
  8863  005046  0E01               	movlw	1
  8864  005048  0103               	movlb	3	; () banked
  8865  00504A  6F9D               	movwf	SettingProc@changeTime& (0+255),b
  8866                           
  8867                           ;main.c: 795: } else if (Mode >= 0x11 && Mode <= 0x13) {
  8868  00504C  0012               	return	
  8869  00504E                     l24569:
  8870                           
  8871                           ; BSR set to: 2
  8872  00504E  0E10               	movlw	16
  8873  005050  65E3               	cpfsgt	_Mode& (0+255),b
  8874  005052  0012               	return	
  8875                           
  8876                           ; BSR set to: 2
  8877  005054  0E14               	movlw	20
  8878  005056  61E3               	cpfslt	_Mode& (0+255),b
  8879  005058  0012               	return	
  8880                           
  8881                           ; BSR set to: 2
  8882                           ;main.c: 796: yy = Bcd2Hex(TmpTime[6]);
  8883  00505A  0103               	movlb	3	; () banked
  8884  00505C  51C1               	movf	(_TmpTime+6)& (0+255),w,b
  8885  00505E  EC84  F07A         	call	_Bcd2Hex
  8886  005062  0100               	movlb	0	; () banked
  8887  005064  6FCB               	movwf	SettingProc@yy& (0+255),b
  8888                           
  8889                           ;main.c: 797: mo = Bcd2Hex(TmpTime[5]);
  8890  005066  0103               	movlb	3	; () banked
  8891  005068  51C0               	movf	(_TmpTime+5)& (0+255),w,b
  8892  00506A  EC84  F07A         	call	_Bcd2Hex
  8893  00506E  0100               	movlb	0	; () banked
  8894  005070  6FCC               	movwf	SettingProc@mo& (0+255),b
  8895                           
  8896                           ;main.c: 798: dd = Bcd2Hex(TmpTime[4]);
  8897  005072  0103               	movlb	3	; () banked
  8898  005074  51BF               	movf	(_TmpTime+4)& (0+255),w,b
  8899  005076  EC84  F07A         	call	_Bcd2Hex
  8900  00507A  0100               	movlb	0	; () banked
  8901  00507C  6FCD               	movwf	SettingProc@dd& (0+255),b
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;main.c: 800: if (Mode == 0x11) {
  8905  00507E  0E11               	movlw	17
  8906  005080  0102               	movlb	2	; () banked
  8907  005082  19E3               	xorwf	_Mode& (0+255),w,b
  8908  005084  A4D8               	btfss	status,2,c
  8909  005086  D01F               	goto	l24579
  8910                           
  8911                           ; BSR set to: 2
  8912                           ;main.c: 801: yy = (yy + delta -1 + 99) % 99 +1;
  8913  005088  C0D3  F0BE         	movff	SettingProc@delta,??_SettingProc
  8914  00508C  0100               	movlb	0	; () banked
  8915  00508E  6BBF               	clrf	(??_SettingProc+1)& (0+255),b
  8916  005090  BFBE               	btfsc	??_SettingProc& (0+255),7,b
  8917  005092  07BF               	decf	(??_SettingProc+1)& (0+255),f,b
  8918  005094  C0CB  F0C0         	movff	SettingProc@yy,??_SettingProc+2
  8919  005098  6BC1               	clrf	(??_SettingProc+3)& (0+255),b
  8920  00509A  BFC0               	btfsc	(??_SettingProc+2)& (0+255),7,b
  8921  00509C  07C1               	decf	(??_SettingProc+3)& (0+255),f,b
  8922  00509E  51BE               	movf	??_SettingProc& (0+255),w,b
  8923  0050A0  27C0               	addwf	(??_SettingProc+2)& (0+255),f,b
  8924  0050A2  51BF               	movf	(??_SettingProc+1)& (0+255),w,b
  8925  0050A4  23C1               	addwfc	(??_SettingProc+3)& (0+255),f,b
  8926  0050A6  0E62               	movlw	98
  8927  0050A8  25C0               	addwf	(??_SettingProc+2)& (0+255),w,b
  8928  0050AA  6E0E               	movwf	___awmod@dividend^0,c
  8929  0050AC  0E00               	movlw	0
  8930  0050AE  21C1               	addwfc	(??_SettingProc+3)& (0+255),w,b
  8931  0050B0  6E0F               	movwf	(___awmod@dividend+1)^0,c
  8932  0050B2  0E00               	movlw	0
  8933  0050B4  6E11               	movwf	(___awmod@divisor+1)^0,c
  8934  0050B6  0E63               	movlw	99
  8935  0050B8  6E10               	movwf	___awmod@divisor^0,c
  8936  0050BA  ECC7  F06E         	call	___awmod	;wreg free
  8937  0050BE  280E               	incf	?___awmod^0,w,c
  8938  0050C0  0100               	movlb	0	; () banked
  8939  0050C2  6FCB               	movwf	SettingProc@yy& (0+255),b
  8940                           
  8941                           ;main.c: 802: } else if (Mode == 0x12) {
  8942  0050C4  D045               	goto	l24587
  8943  0050C6                     l24579:
  8944                           
  8945                           ; BSR set to: 2
  8946  0050C6  0E12               	movlw	18
  8947  0050C8  19E3               	xorwf	_Mode& (0+255),w,b
  8948  0050CA  A4D8               	btfss	status,2,c
  8949  0050CC  D01F               	goto	l24583
  8950                           
  8951                           ; BSR set to: 2
  8952                           ;main.c: 803: mo = (mo + delta -1 + 12) % 12 +1;
  8953  0050CE  C0D3  F0BE         	movff	SettingProc@delta,??_SettingProc
  8954  0050D2  0100               	movlb	0	; () banked
  8955  0050D4  6BBF               	clrf	(??_SettingProc+1)& (0+255),b
  8956  0050D6  BFBE               	btfsc	??_SettingProc& (0+255),7,b
  8957  0050D8  07BF               	decf	(??_SettingProc+1)& (0+255),f,b
  8958  0050DA  C0CC  F0C0         	movff	SettingProc@mo,??_SettingProc+2
  8959  0050DE  6BC1               	clrf	(??_SettingProc+3)& (0+255),b
  8960  0050E0  BFC0               	btfsc	(??_SettingProc+2)& (0+255),7,b
  8961  0050E2  07C1               	decf	(??_SettingProc+3)& (0+255),f,b
  8962  0050E4  51BE               	movf	??_SettingProc& (0+255),w,b
  8963  0050E6  27C0               	addwf	(??_SettingProc+2)& (0+255),f,b
  8964  0050E8  51BF               	movf	(??_SettingProc+1)& (0+255),w,b
  8965  0050EA  23C1               	addwfc	(??_SettingProc+3)& (0+255),f,b
  8966  0050EC  0E0B               	movlw	11
  8967  0050EE  25C0               	addwf	(??_SettingProc+2)& (0+255),w,b
  8968  0050F0  6E0E               	movwf	___awmod@dividend^0,c
  8969  0050F2  0E00               	movlw	0
  8970  0050F4  21C1               	addwfc	(??_SettingProc+3)& (0+255),w,b
  8971  0050F6  6E0F               	movwf	(___awmod@dividend+1)^0,c
  8972  0050F8  0E00               	movlw	0
  8973  0050FA  6E11               	movwf	(___awmod@divisor+1)^0,c
  8974  0050FC  0E0C               	movlw	12
  8975  0050FE  6E10               	movwf	___awmod@divisor^0,c
  8976  005100  ECC7  F06E         	call	___awmod	;wreg free
  8977  005104  280E               	incf	?___awmod^0,w,c
  8978  005106  0100               	movlb	0	; () banked
  8979  005108  6FCC               	movwf	SettingProc@mo& (0+255),b
  8980                           
  8981                           ;main.c: 804: } else if (Mode == 0x13) {
  8982  00510A  D022               	goto	l24587
  8983  00510C                     l24583:
  8984                           
  8985                           ; BSR set to: 2
  8986  00510C  0E13               	movlw	19
  8987  00510E  19E3               	xorwf	_Mode& (0+255),w,b
  8988  005110  A4D8               	btfss	status,2,c
  8989  005112  D01E               	goto	l24587
  8990                           
  8991                           ; BSR set to: 2
  8992                           ;main.c: 805: dd = (dd + delta -1 + 31) % 31 +1;
  8993  005114  C0D3  F0BE         	movff	SettingProc@delta,??_SettingProc
  8994  005118  0100               	movlb	0	; () banked
  8995  00511A  6BBF               	clrf	(??_SettingProc+1)& (0+255),b
  8996  00511C  BFBE               	btfsc	??_SettingProc& (0+255),7,b
  8997  00511E  07BF               	decf	(??_SettingProc+1)& (0+255),f,b
  8998  005120  C0CD  F0C0         	movff	SettingProc@dd,??_SettingProc+2
  8999  005124  6BC1               	clrf	(??_SettingProc+3)& (0+255),b
  9000  005126  BFC0               	btfsc	(??_SettingProc+2)& (0+255),7,b
  9001  005128  07C1               	decf	(??_SettingProc+3)& (0+255),f,b
  9002  00512A  51BE               	movf	??_SettingProc& (0+255),w,b
  9003  00512C  27C0               	addwf	(??_SettingProc+2)& (0+255),f,b
  9004  00512E  51BF               	movf	(??_SettingProc+1)& (0+255),w,b
  9005  005130  23C1               	addwfc	(??_SettingProc+3)& (0+255),f,b
  9006  005132  0E1E               	movlw	30
  9007  005134  25C0               	addwf	(??_SettingProc+2)& (0+255),w,b
  9008  005136  6E0E               	movwf	___awmod@dividend^0,c
  9009  005138  0E00               	movlw	0
  9010  00513A  21C1               	addwfc	(??_SettingProc+3)& (0+255),w,b
  9011  00513C  6E0F               	movwf	(___awmod@dividend+1)^0,c
  9012  00513E  0E00               	movlw	0
  9013  005140  6E11               	movwf	(___awmod@divisor+1)^0,c
  9014  005142  0E1F               	movlw	31
  9015  005144  6E10               	movwf	___awmod@divisor^0,c
  9016  005146  ECC7  F06E         	call	___awmod	;wreg free
  9017  00514A  280E               	incf	?___awmod^0,w,c
  9018  00514C  0100               	movlb	0	; () banked
  9019  00514E  6FCD               	movwf	SettingProc@dd& (0+255),b
  9020  005150                     l24587:
  9021                           
  9022                           ;main.c: 806: };main.c: 808: y = yy;
  9023  005150  C0CB  F0D0         	movff	SettingProc@yy,SettingProc@y
  9024                           
  9025                           ;main.c: 809: m = mo;
  9026  005154  C0CC  F0D1         	movff	SettingProc@mo,SettingProc@m
  9027                           
  9028                           ;main.c: 810: d = dd;
  9029  005158  C0CD  F0D2         	movff	SettingProc@dd,SettingProc@d
  9030                           
  9031                           ;main.c: 811: TmpTime[3] = getWeekdays(&y, &m, &d);
  9032  00515C  0ED0               	movlw	low SettingProc@y
  9033  00515E  0100               	movlb	0	; () banked
  9034  005160  6F6E               	movwf	getWeekdays@year& (0+255),b
  9035  005162  0ED1               	movlw	low SettingProc@m
  9036  005164  6F6F               	movwf	getWeekdays@month& (0+255),b
  9037  005166  0ED2               	movlw	low SettingProc@d
  9038  005168  6F70               	movwf	getWeekdays@day& (0+255),b
  9039  00516A  ECE7  F060         	call	_getWeekdays	;wreg free
  9040  00516E  0103               	movlb	3	; () banked
  9041  005170  6FBE               	movwf	(_TmpTime+3)& (0+255),b
  9042                           
  9043                           ; BSR set to: 3
  9044                           ;main.c: 812: TmpTime[6] = Hex2Bcd(y);
  9045  005172  0100               	movlb	0	; () banked
  9046  005174  51D0               	movf	SettingProc@y& (0+255),w,b
  9047  005176  EC8A  F079         	call	_Hex2Bcd
  9048  00517A  0103               	movlb	3	; () banked
  9049  00517C  6FC1               	movwf	(_TmpTime+6)& (0+255),b
  9050                           
  9051                           ; BSR set to: 3
  9052                           ;main.c: 813: TmpTime[5] = Hex2Bcd(m);
  9053  00517E  0100               	movlb	0	; () banked
  9054  005180  51D1               	movf	SettingProc@m& (0+255),w,b
  9055  005182  EC8A  F079         	call	_Hex2Bcd
  9056  005186  0103               	movlb	3	; () banked
  9057  005188  6FC0               	movwf	(_TmpTime+5)& (0+255),b
  9058                           
  9059                           ; BSR set to: 3
  9060                           ;main.c: 814: TmpTime[4] = Hex2Bcd(d);
  9061  00518A  0100               	movlb	0	; () banked
  9062  00518C  51D2               	movf	SettingProc@d& (0+255),w,b
  9063  00518E  EC8A  F079         	call	_Hex2Bcd
  9064  005192  0103               	movlb	3	; () banked
  9065  005194  6FBF               	movwf	(_TmpTime+4)& (0+255),b
  9066                           
  9067                           ; BSR set to: 3
  9068                           ;main.c: 815: DrawSetBox(Mode);
  9069  005196  0102               	movlb	2	; () banked
  9070  005198  51E3               	movf	_Mode& (0+255),w,b
  9071  00519A  EC35  F046         	call	_DrawSetBox
  9072  00519E  0012               	return		;funcret
  9073  0051A0                     __end_of_SettingProc:
  9074                           	callstack 0
  9075                           
  9076 ;; *************** function _display_drawRoundRect *****************
  9077 ;; Defined at:
  9078 ;;		line 617 in file "LCD320x240color.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  x               2   51[COMRAM] unsigned int 
  9081 ;;  y               2   53[COMRAM] unsigned int 
  9082 ;;  w               2   55[COMRAM] unsigned int 
  9083 ;;  h               2   57[COMRAM] unsigned int 
  9084 ;;  r               2   59[COMRAM] unsigned int 
  9085 ;;  color           2   61[COMRAM] unsigned int 
  9086 ;; Auto vars:     Size  Location     Type
  9087 ;;  max_radius      2    2[BANK0 ] int 
  9088 ;; Return value:  Size  Location     Type
  9089 ;;                  1    wreg      void 
  9090 ;; Registers used:
  9091 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9092 ;; Tracked objects:
  9093 ;;		On entry : 3F/0
  9094 ;;		On exit  : 0/0
  9095 ;;		Unchanged: 0/0
  9096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9097 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9098 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9099 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9100 ;;      Totals:        16       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9101 ;;Total ram usage:       20 bytes
  9102 ;; Hardware stack levels used:    1
  9103 ;; Hardware stack levels required when called:   13
  9104 ;; This function calls:
  9105 ;;		_display_drawCircleHelper
  9106 ;;		_drawHLine
  9107 ;;		_drawVLine
  9108 ;; This function is called by:
  9109 ;;		_SettingProc
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	text8
  9114  008EE2                     __ptext8:
  9115                           	callstack 0
  9116  008EE2                     _display_drawRoundRect:
  9117                           	callstack 16
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;LCD320x240color.c: 619: int16_t max_radius = ((w < h) ? w : h) / 2;
  9121                           
  9122                           ;incstack = 0
  9123  008EE2  503A               	movf	display_drawRoundRect@h^0,w,c
  9124  008EE4  5C38               	subwf	display_drawRoundRect@w^0,w,c
  9125  008EE6  503B               	movf	(display_drawRoundRect@h+1)^0,w,c
  9126  008EE8  5839               	subwfb	(display_drawRoundRect@w+1)^0,w,c
  9127  008EEA  A0D8               	btfss	status,0,c
  9128  008EEC  D005               	goto	l3304
  9129                           
  9130                           ; BSR set to: 0
  9131  008EEE  C03A  F060         	movff	display_drawRoundRect@h,_display_drawRoundRect$7131
  9132  008EF2  C03B  F061         	movff	display_drawRoundRect@h+1,_display_drawRoundRect$7131+1
  9133  008EF6  D004               	goto	l24091
  9134  008EF8                     l3304:
  9135                           
  9136                           ; BSR set to: 0
  9137  008EF8  C038  F060         	movff	display_drawRoundRect@w,_display_drawRoundRect$7131
  9138  008EFC  C039  F061         	movff	display_drawRoundRect@w+1,_display_drawRoundRect$7131+1
  9139  008F00                     l24091:
  9140                           
  9141                           ; BSR set to: 0
  9142  008F00  90D8               	bcf	status,0,c
  9143  008F02  3161               	rrcf	(_display_drawRoundRect$7131+1)& (0+255),w,b
  9144  008F04  6E40               	movwf	??_display_drawRoundRect^0,c
  9145  008F06  3160               	rrcf	_display_drawRoundRect$7131& (0+255),w,b
  9146  008F08  6F62               	movwf	display_drawRoundRect@max_radius& (0+255),b
  9147  008F0A  C040  F063         	movff	??_display_drawRoundRect,display_drawRoundRect@max_radius+1
  9148                           
  9149                           ;LCD320x240color.c: 620: if (r > max_radius) r = max_radius;
  9150  008F0E  503C               	movf	display_drawRoundRect@r^0,w,c
  9151  008F10  5D62               	subwf	display_drawRoundRect@max_radius& (0+255),w,b
  9152  008F12  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9153  008F14  5963               	subwfb	(display_drawRoundRect@max_radius+1)& (0+255),w,b
  9154  008F16  B0D8               	btfsc	status,0,c
  9155  008F18  D004               	goto	l24095
  9156                           
  9157                           ; BSR set to: 0
  9158  008F1A  C062  F03C         	movff	display_drawRoundRect@max_radius,display_drawRoundRect@r
  9159  008F1E  C063  F03D         	movff	display_drawRoundRect@max_radius+1,display_drawRoundRect@r+1
  9160  008F22                     l24095:
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;LCD320x240color.c: 622: drawHLine(x+r , y , w-2*r, color);
  9164  008F22  503C               	movf	display_drawRoundRect@r^0,w,c
  9165  008F24  2434               	addwf	display_drawRoundRect@x^0,w,c
  9166  008F26  6E19               	movwf	drawHLine@x^0,c
  9167  008F28  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9168  008F2A  2035               	addwfc	(display_drawRoundRect@x+1)^0,w,c
  9169  008F2C  6E1A               	movwf	(drawHLine@x+1)^0,c
  9170  008F2E  C036  F01B         	movff	display_drawRoundRect@y,drawHLine@y
  9171  008F32  C037  F01C         	movff	display_drawRoundRect@y+1,drawHLine@y+1
  9172  008F36  C03C  F040         	movff	display_drawRoundRect@r,??_display_drawRoundRect
  9173  008F3A  C03D  F041         	movff	display_drawRoundRect@r+1,??_display_drawRoundRect+1
  9174  008F3E  90D8               	bcf	status,0,c
  9175  008F40  3640               	rlcf	??_display_drawRoundRect^0,f,c
  9176  008F42  3641               	rlcf	(??_display_drawRoundRect+1)^0,f,c
  9177  008F44  5040               	movf	??_display_drawRoundRect^0,w,c
  9178  008F46  5C38               	subwf	display_drawRoundRect@w^0,w,c
  9179  008F48  6E1D               	movwf	drawHLine@w^0,c
  9180  008F4A  5041               	movf	(??_display_drawRoundRect+1)^0,w,c
  9181  008F4C  5839               	subwfb	(display_drawRoundRect@w+1)^0,w,c
  9182  008F4E  6E1E               	movwf	(drawHLine@w+1)^0,c
  9183  008F50  C03E  F01F         	movff	display_drawRoundRect@color,drawHLine@color
  9184  008F54  C03F  F020         	movff	display_drawRoundRect@color+1,drawHLine@color+1
  9185  008F58  EC30  F064         	call	_drawHLine	;wreg free
  9186                           
  9187                           ;LCD320x240color.c: 623: drawHLine(x+r , y+h-1, w-2*r, color);
  9188  008F5C  503C               	movf	display_drawRoundRect@r^0,w,c
  9189  008F5E  2434               	addwf	display_drawRoundRect@x^0,w,c
  9190  008F60  6E19               	movwf	drawHLine@x^0,c
  9191  008F62  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9192  008F64  2035               	addwfc	(display_drawRoundRect@x+1)^0,w,c
  9193  008F66  6E1A               	movwf	(drawHLine@x+1)^0,c
  9194  008F68  503A               	movf	display_drawRoundRect@h^0,w,c
  9195  008F6A  2436               	addwf	display_drawRoundRect@y^0,w,c
  9196  008F6C  6E40               	movwf	??_display_drawRoundRect^0,c
  9197  008F6E  503B               	movf	(display_drawRoundRect@h+1)^0,w,c
  9198  008F70  2037               	addwfc	(display_drawRoundRect@y+1)^0,w,c
  9199  008F72  6E41               	movwf	(??_display_drawRoundRect+1)^0,c
  9200  008F74  0EFF               	movlw	255
  9201  008F76  2440               	addwf	??_display_drawRoundRect^0,w,c
  9202  008F78  6E1B               	movwf	drawHLine@y^0,c
  9203  008F7A  0EFF               	movlw	255
  9204  008F7C  2041               	addwfc	(??_display_drawRoundRect+1)^0,w,c
  9205  008F7E  6E1C               	movwf	(drawHLine@y+1)^0,c
  9206  008F80  C03C  F042         	movff	display_drawRoundRect@r,??_display_drawRoundRect+2
  9207  008F84  C03D  F043         	movff	display_drawRoundRect@r+1,??_display_drawRoundRect+3
  9208  008F88  90D8               	bcf	status,0,c
  9209  008F8A  3642               	rlcf	(??_display_drawRoundRect+2)^0,f,c
  9210  008F8C  3643               	rlcf	(??_display_drawRoundRect+3)^0,f,c
  9211  008F8E  5042               	movf	(??_display_drawRoundRect+2)^0,w,c
  9212  008F90  5C38               	subwf	display_drawRoundRect@w^0,w,c
  9213  008F92  6E1D               	movwf	drawHLine@w^0,c
  9214  008F94  5043               	movf	(??_display_drawRoundRect+3)^0,w,c
  9215  008F96  5839               	subwfb	(display_drawRoundRect@w+1)^0,w,c
  9216  008F98  6E1E               	movwf	(drawHLine@w+1)^0,c
  9217  008F9A  C03E  F01F         	movff	display_drawRoundRect@color,drawHLine@color
  9218  008F9E  C03F  F020         	movff	display_drawRoundRect@color+1,drawHLine@color+1
  9219  008FA2  EC30  F064         	call	_drawHLine	;wreg free
  9220                           
  9221                           ;LCD320x240color.c: 624: drawVLine(x , y+r , h-2*r, color);
  9222  008FA6  C034  F019         	movff	display_drawRoundRect@x,drawVLine@x
  9223  008FAA  C035  F01A         	movff	display_drawRoundRect@x+1,drawVLine@x+1
  9224  008FAE  503C               	movf	display_drawRoundRect@r^0,w,c
  9225  008FB0  2436               	addwf	display_drawRoundRect@y^0,w,c
  9226  008FB2  6E1B               	movwf	drawVLine@y^0,c
  9227  008FB4  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9228  008FB6  2037               	addwfc	(display_drawRoundRect@y+1)^0,w,c
  9229  008FB8  6E1C               	movwf	(drawVLine@y+1)^0,c
  9230  008FBA  C03C  F040         	movff	display_drawRoundRect@r,??_display_drawRoundRect
  9231  008FBE  C03D  F041         	movff	display_drawRoundRect@r+1,??_display_drawRoundRect+1
  9232  008FC2  90D8               	bcf	status,0,c
  9233  008FC4  3640               	rlcf	??_display_drawRoundRect^0,f,c
  9234  008FC6  3641               	rlcf	(??_display_drawRoundRect+1)^0,f,c
  9235  008FC8  5040               	movf	??_display_drawRoundRect^0,w,c
  9236  008FCA  5C3A               	subwf	display_drawRoundRect@h^0,w,c
  9237  008FCC  6E1D               	movwf	drawVLine@h^0,c
  9238  008FCE  5041               	movf	(??_display_drawRoundRect+1)^0,w,c
  9239  008FD0  583B               	subwfb	(display_drawRoundRect@h+1)^0,w,c
  9240  008FD2  6E1E               	movwf	(drawVLine@h+1)^0,c
  9241  008FD4  C03E  F01F         	movff	display_drawRoundRect@color,drawVLine@color
  9242  008FD8  C03F  F020         	movff	display_drawRoundRect@color+1,drawVLine@color+1
  9243  008FDC  ECCC  F063         	call	_drawVLine	;wreg free
  9244                           
  9245                           ;LCD320x240color.c: 625: drawVLine(x+w-1, y+r , h-2*r, color);
  9246  008FE0  5038               	movf	display_drawRoundRect@w^0,w,c
  9247  008FE2  2434               	addwf	display_drawRoundRect@x^0,w,c
  9248  008FE4  6E40               	movwf	??_display_drawRoundRect^0,c
  9249  008FE6  5039               	movf	(display_drawRoundRect@w+1)^0,w,c
  9250  008FE8  2035               	addwfc	(display_drawRoundRect@x+1)^0,w,c
  9251  008FEA  6E41               	movwf	(??_display_drawRoundRect+1)^0,c
  9252  008FEC  0EFF               	movlw	255
  9253  008FEE  2440               	addwf	??_display_drawRoundRect^0,w,c
  9254  008FF0  6E19               	movwf	drawVLine@x^0,c
  9255  008FF2  0EFF               	movlw	255
  9256  008FF4  2041               	addwfc	(??_display_drawRoundRect+1)^0,w,c
  9257  008FF6  6E1A               	movwf	(drawVLine@x+1)^0,c
  9258  008FF8  503C               	movf	display_drawRoundRect@r^0,w,c
  9259  008FFA  2436               	addwf	display_drawRoundRect@y^0,w,c
  9260  008FFC  6E1B               	movwf	drawVLine@y^0,c
  9261  008FFE  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9262  009000  2037               	addwfc	(display_drawRoundRect@y+1)^0,w,c
  9263  009002  6E1C               	movwf	(drawVLine@y+1)^0,c
  9264  009004  C03C  F042         	movff	display_drawRoundRect@r,??_display_drawRoundRect+2
  9265  009008  C03D  F043         	movff	display_drawRoundRect@r+1,??_display_drawRoundRect+3
  9266  00900C  90D8               	bcf	status,0,c
  9267  00900E  3642               	rlcf	(??_display_drawRoundRect+2)^0,f,c
  9268  009010  3643               	rlcf	(??_display_drawRoundRect+3)^0,f,c
  9269  009012  5042               	movf	(??_display_drawRoundRect+2)^0,w,c
  9270  009014  5C3A               	subwf	display_drawRoundRect@h^0,w,c
  9271  009016  6E1D               	movwf	drawVLine@h^0,c
  9272  009018  5043               	movf	(??_display_drawRoundRect+3)^0,w,c
  9273  00901A  583B               	subwfb	(display_drawRoundRect@h+1)^0,w,c
  9274  00901C  6E1E               	movwf	(drawVLine@h+1)^0,c
  9275  00901E  C03E  F01F         	movff	display_drawRoundRect@color,drawVLine@color
  9276  009022  C03F  F020         	movff	display_drawRoundRect@color+1,drawVLine@color+1
  9277  009026  ECCC  F063         	call	_drawVLine	;wreg free
  9278                           
  9279                           ;LCD320x240color.c: 627: display_drawCircleHelper(x+r , y+r , r, 1, color);
  9280  00902A  503C               	movf	display_drawRoundRect@r^0,w,c
  9281  00902C  2434               	addwf	display_drawRoundRect@x^0,w,c
  9282  00902E  6E1F               	movwf	display_drawCircleHelper@x0^0,c
  9283  009030  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9284  009032  2035               	addwfc	(display_drawRoundRect@x+1)^0,w,c
  9285  009034  6E20               	movwf	(display_drawCircleHelper@x0+1)^0,c
  9286  009036  503C               	movf	display_drawRoundRect@r^0,w,c
  9287  009038  2436               	addwf	display_drawRoundRect@y^0,w,c
  9288  00903A  6E21               	movwf	display_drawCircleHelper@y0^0,c
  9289  00903C  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9290  00903E  2037               	addwfc	(display_drawRoundRect@y+1)^0,w,c
  9291  009040  6E22               	movwf	(display_drawCircleHelper@y0+1)^0,c
  9292  009042  C03C  F023         	movff	display_drawRoundRect@r,display_drawCircleHelper@r
  9293  009046  C03D  F024         	movff	display_drawRoundRect@r+1,display_drawCircleHelper@r+1
  9294  00904A  0E01               	movlw	1
  9295  00904C  6E25               	movwf	display_drawCircleHelper@cornername^0,c
  9296  00904E  C03E  F026         	movff	display_drawRoundRect@color,display_drawCircleHelper@color
  9297  009052  C03F  F027         	movff	display_drawRoundRect@color+1,display_drawCircleHelper@color+1
  9298  009056  ECEE  F052         	call	_display_drawCircleHelper	;wreg free
  9299                           
  9300                           ;LCD320x240color.c: 628: display_drawCircleHelper(x+w-r-1, y+r , r, 2, color);
  9301  00905A  503C               	movf	display_drawRoundRect@r^0,w,c
  9302  00905C  5C34               	subwf	display_drawRoundRect@x^0,w,c
  9303  00905E  6E40               	movwf	??_display_drawRoundRect^0,c
  9304  009060  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9305  009062  5835               	subwfb	(display_drawRoundRect@x+1)^0,w,c
  9306  009064  6E41               	movwf	(??_display_drawRoundRect+1)^0,c
  9307  009066  5038               	movf	display_drawRoundRect@w^0,w,c
  9308  009068  2640               	addwf	??_display_drawRoundRect^0,f,c
  9309  00906A  5039               	movf	(display_drawRoundRect@w+1)^0,w,c
  9310  00906C  2241               	addwfc	(??_display_drawRoundRect+1)^0,f,c
  9311  00906E  0EFF               	movlw	255
  9312  009070  2440               	addwf	??_display_drawRoundRect^0,w,c
  9313  009072  6E1F               	movwf	display_drawCircleHelper@x0^0,c
  9314  009074  0EFF               	movlw	255
  9315  009076  2041               	addwfc	(??_display_drawRoundRect+1)^0,w,c
  9316  009078  6E20               	movwf	(display_drawCircleHelper@x0+1)^0,c
  9317  00907A  503C               	movf	display_drawRoundRect@r^0,w,c
  9318  00907C  2436               	addwf	display_drawRoundRect@y^0,w,c
  9319  00907E  6E21               	movwf	display_drawCircleHelper@y0^0,c
  9320  009080  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9321  009082  2037               	addwfc	(display_drawRoundRect@y+1)^0,w,c
  9322  009084  6E22               	movwf	(display_drawCircleHelper@y0+1)^0,c
  9323  009086  C03C  F023         	movff	display_drawRoundRect@r,display_drawCircleHelper@r
  9324  00908A  C03D  F024         	movff	display_drawRoundRect@r+1,display_drawCircleHelper@r+1
  9325  00908E  0E02               	movlw	2
  9326  009090  6E25               	movwf	display_drawCircleHelper@cornername^0,c
  9327  009092  C03E  F026         	movff	display_drawRoundRect@color,display_drawCircleHelper@color
  9328  009096  C03F  F027         	movff	display_drawRoundRect@color+1,display_drawCircleHelper@color+1
  9329  00909A  ECEE  F052         	call	_display_drawCircleHelper	;wreg free
  9330                           
  9331                           ;LCD320x240color.c: 629: display_drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
  9332  00909E  503C               	movf	display_drawRoundRect@r^0,w,c
  9333  0090A0  5C34               	subwf	display_drawRoundRect@x^0,w,c
  9334  0090A2  6E40               	movwf	??_display_drawRoundRect^0,c
  9335  0090A4  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9336  0090A6  5835               	subwfb	(display_drawRoundRect@x+1)^0,w,c
  9337  0090A8  6E41               	movwf	(??_display_drawRoundRect+1)^0,c
  9338  0090AA  5038               	movf	display_drawRoundRect@w^0,w,c
  9339  0090AC  2640               	addwf	??_display_drawRoundRect^0,f,c
  9340  0090AE  5039               	movf	(display_drawRoundRect@w+1)^0,w,c
  9341  0090B0  2241               	addwfc	(??_display_drawRoundRect+1)^0,f,c
  9342  0090B2  0EFF               	movlw	255
  9343  0090B4  2440               	addwf	??_display_drawRoundRect^0,w,c
  9344  0090B6  6E1F               	movwf	display_drawCircleHelper@x0^0,c
  9345  0090B8  0EFF               	movlw	255
  9346  0090BA  2041               	addwfc	(??_display_drawRoundRect+1)^0,w,c
  9347  0090BC  6E20               	movwf	(display_drawCircleHelper@x0+1)^0,c
  9348  0090BE  503C               	movf	display_drawRoundRect@r^0,w,c
  9349  0090C0  5C36               	subwf	display_drawRoundRect@y^0,w,c
  9350  0090C2  6E42               	movwf	(??_display_drawRoundRect+2)^0,c
  9351  0090C4  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9352  0090C6  5837               	subwfb	(display_drawRoundRect@y+1)^0,w,c
  9353  0090C8  6E43               	movwf	(??_display_drawRoundRect+3)^0,c
  9354  0090CA  503A               	movf	display_drawRoundRect@h^0,w,c
  9355  0090CC  2642               	addwf	(??_display_drawRoundRect+2)^0,f,c
  9356  0090CE  503B               	movf	(display_drawRoundRect@h+1)^0,w,c
  9357  0090D0  2243               	addwfc	(??_display_drawRoundRect+3)^0,f,c
  9358  0090D2  0EFF               	movlw	255
  9359  0090D4  2442               	addwf	(??_display_drawRoundRect+2)^0,w,c
  9360  0090D6  6E21               	movwf	display_drawCircleHelper@y0^0,c
  9361  0090D8  0EFF               	movlw	255
  9362  0090DA  2043               	addwfc	(??_display_drawRoundRect+3)^0,w,c
  9363  0090DC  6E22               	movwf	(display_drawCircleHelper@y0+1)^0,c
  9364  0090DE  C03C  F023         	movff	display_drawRoundRect@r,display_drawCircleHelper@r
  9365  0090E2  C03D  F024         	movff	display_drawRoundRect@r+1,display_drawCircleHelper@r+1
  9366  0090E6  0E04               	movlw	4
  9367  0090E8  6E25               	movwf	display_drawCircleHelper@cornername^0,c
  9368  0090EA  C03E  F026         	movff	display_drawRoundRect@color,display_drawCircleHelper@color
  9369  0090EE  C03F  F027         	movff	display_drawRoundRect@color+1,display_drawCircleHelper@color+1
  9370  0090F2  ECEE  F052         	call	_display_drawCircleHelper	;wreg free
  9371                           
  9372                           ;LCD320x240color.c: 630: display_drawCircleHelper(x+r , y+h-r-1, r, 8, color);
  9373  0090F6  503C               	movf	display_drawRoundRect@r^0,w,c
  9374  0090F8  2434               	addwf	display_drawRoundRect@x^0,w,c
  9375  0090FA  6E1F               	movwf	display_drawCircleHelper@x0^0,c
  9376  0090FC  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9377  0090FE  2035               	addwfc	(display_drawRoundRect@x+1)^0,w,c
  9378  009100  6E20               	movwf	(display_drawCircleHelper@x0+1)^0,c
  9379  009102  503C               	movf	display_drawRoundRect@r^0,w,c
  9380  009104  5C36               	subwf	display_drawRoundRect@y^0,w,c
  9381  009106  6E40               	movwf	??_display_drawRoundRect^0,c
  9382  009108  503D               	movf	(display_drawRoundRect@r+1)^0,w,c
  9383  00910A  5837               	subwfb	(display_drawRoundRect@y+1)^0,w,c
  9384  00910C  6E41               	movwf	(??_display_drawRoundRect+1)^0,c
  9385  00910E  503A               	movf	display_drawRoundRect@h^0,w,c
  9386  009110  2640               	addwf	??_display_drawRoundRect^0,f,c
  9387  009112  503B               	movf	(display_drawRoundRect@h+1)^0,w,c
  9388  009114  2241               	addwfc	(??_display_drawRoundRect+1)^0,f,c
  9389  009116  0EFF               	movlw	255
  9390  009118  2440               	addwf	??_display_drawRoundRect^0,w,c
  9391  00911A  6E21               	movwf	display_drawCircleHelper@y0^0,c
  9392  00911C  0EFF               	movlw	255
  9393  00911E  2041               	addwfc	(??_display_drawRoundRect+1)^0,w,c
  9394  009120  6E22               	movwf	(display_drawCircleHelper@y0+1)^0,c
  9395  009122  C03C  F023         	movff	display_drawRoundRect@r,display_drawCircleHelper@r
  9396  009126  C03D  F024         	movff	display_drawRoundRect@r+1,display_drawCircleHelper@r+1
  9397  00912A  0E08               	movlw	8
  9398  00912C  6E25               	movwf	display_drawCircleHelper@cornername^0,c
  9399  00912E  C03E  F026         	movff	display_drawRoundRect@color,display_drawCircleHelper@color
  9400  009132  C03F  F027         	movff	display_drawRoundRect@color+1,display_drawCircleHelper@color+1
  9401  009136  ECEE  F052         	call	_display_drawCircleHelper	;wreg free
  9402  00913A  0012               	return		;funcret
  9403  00913C                     __end_of_display_drawRoundRect:
  9404                           	callstack 0
  9405                           
  9406 ;; *************** function _display_drawCircleHelper *****************
  9407 ;; Defined at:
  9408 ;;		line 665 in file "LCD320x240color.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;  x0              2   30[COMRAM] unsigned int 
  9411 ;;  y0              2   32[COMRAM] unsigned int 
  9412 ;;  r               2   34[COMRAM] unsigned int 
  9413 ;;  cornername      1   36[COMRAM] unsigned char 
  9414 ;;  color           2   37[COMRAM] unsigned int 
  9415 ;; Auto vars:     Size  Location     Type
  9416 ;;  y               2   49[COMRAM] int 
  9417 ;;  x               2   47[COMRAM] int 
  9418 ;;  f               2   45[COMRAM] int 
  9419 ;;  ddF_y           2   43[COMRAM] int 
  9420 ;;  ddF_x           2   41[COMRAM] int 
  9421 ;; Return value:  Size  Location     Type
  9422 ;;                  1    wreg      void 
  9423 ;; Registers used:
  9424 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9430 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9431 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9432 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9433 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9434 ;;Total ram usage:       21 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; Hardware stack levels required when called:   12
  9437 ;; This function calls:
  9438 ;;		_lcd_draw_pixel_at
  9439 ;; This function is called by:
  9440 ;;		_display_drawRoundRect
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           	psect	text9
  9445  00A5DC                     __ptext9:
  9446                           	callstack 0
  9447  00A5DC                     _display_drawCircleHelper:
  9448                           	callstack 16
  9449                           
  9450                           ;LCD320x240color.c: 666: int16_t f = 1 - r;
  9451                           
  9452                           ;incstack = 0
  9453  00A5DC  5023               	movf	display_drawCircleHelper@r^0,w,c
  9454  00A5DE  0801               	sublw	1
  9455  00A5E0  6E2E               	movwf	display_drawCircleHelper@f^0,c
  9456  00A5E2  5024               	movf	(display_drawCircleHelper@r+1)^0,w,c
  9457  00A5E4  A0D8               	btfss	status,0,c
  9458  00A5E6  2AE8               	incf	wreg,f,c
  9459  00A5E8  0800               	sublw	0
  9460  00A5EA  6E2F               	movwf	(display_drawCircleHelper@f+1)^0,c
  9461                           
  9462                           ;LCD320x240color.c: 667: int16_t ddF_x = 1;
  9463  00A5EC  0E00               	movlw	0
  9464  00A5EE  6E2B               	movwf	(display_drawCircleHelper@ddF_x+1)^0,c
  9465  00A5F0  0E01               	movlw	1
  9466  00A5F2  6E2A               	movwf	display_drawCircleHelper@ddF_x^0,c
  9467                           
  9468                           ;LCD320x240color.c: 668: int16_t ddF_y = -2 * r;
  9469  00A5F4  C023  F028         	movff	display_drawCircleHelper@r,??_display_drawCircleHelper
  9470  00A5F8  C024  F029         	movff	display_drawCircleHelper@r+1,??_display_drawCircleHelper+1
  9471  00A5FC  90D8               	bcf	status,0,c
  9472  00A5FE  3628               	rlcf	??_display_drawCircleHelper^0,f,c
  9473  00A600  3629               	rlcf	(??_display_drawCircleHelper+1)^0,f,c
  9474  00A602  1E28               	comf	??_display_drawCircleHelper^0,f,c
  9475  00A604  1E29               	comf	(??_display_drawCircleHelper+1)^0,f,c
  9476  00A606  4A28               	infsnz	??_display_drawCircleHelper^0,f,c
  9477  00A608  2A29               	incf	(??_display_drawCircleHelper+1)^0,f,c
  9478  00A60A  C028  F02C         	movff	??_display_drawCircleHelper,display_drawCircleHelper@ddF_y
  9479  00A60E  C029  F02D         	movff	??_display_drawCircleHelper+1,display_drawCircleHelper@ddF_y+1
  9480                           
  9481                           ;LCD320x240color.c: 669: int16_t x = 0;
  9482  00A612  0E00               	movlw	0
  9483  00A614  6E31               	movwf	(display_drawCircleHelper@x+1)^0,c
  9484  00A616  0E00               	movlw	0
  9485  00A618  6E30               	movwf	display_drawCircleHelper@x^0,c
  9486                           
  9487                           ;LCD320x240color.c: 670: int16_t y = r;
  9488  00A61A  C023  F032         	movff	display_drawCircleHelper@r,display_drawCircleHelper@y
  9489  00A61E  C024  F033         	movff	display_drawCircleHelper@r+1,display_drawCircleHelper@y+1
  9490                           
  9491                           ;LCD320x240color.c: 672: while (x<y) {
  9492  00A622  D0AF               	goto	l23211
  9493  00A624                     l23183:
  9494                           
  9495                           ;LCD320x240color.c: 673: if (f >= 0) {
  9496  00A624  BE2F               	btfsc	(display_drawCircleHelper@f+1)^0,7,c
  9497  00A626  D00B               	goto	l3321
  9498                           
  9499                           ;LCD320x240color.c: 674: y--;
  9500  00A628  0632               	decf	display_drawCircleHelper@y^0,f,c
  9501  00A62A  A0D8               	btfss	status,0,c
  9502  00A62C  0633               	decf	(display_drawCircleHelper@y+1)^0,f,c
  9503                           
  9504                           ;LCD320x240color.c: 675: ddF_y += 2;
  9505  00A62E  0E02               	movlw	2
  9506  00A630  262C               	addwf	display_drawCircleHelper@ddF_y^0,f,c
  9507  00A632  0E00               	movlw	0
  9508  00A634  222D               	addwfc	(display_drawCircleHelper@ddF_y+1)^0,f,c
  9509                           
  9510                           ;LCD320x240color.c: 676: f += ddF_y;
  9511  00A636  502C               	movf	display_drawCircleHelper@ddF_y^0,w,c
  9512  00A638  262E               	addwf	display_drawCircleHelper@f^0,f,c
  9513  00A63A  502D               	movf	(display_drawCircleHelper@ddF_y+1)^0,w,c
  9514  00A63C  222F               	addwfc	(display_drawCircleHelper@f+1)^0,f,c
  9515  00A63E                     l3321:
  9516                           
  9517                           ;LCD320x240color.c: 677: };LCD320x240color.c: 678: x++;
  9518  00A63E  4A30               	infsnz	display_drawCircleHelper@x^0,f,c
  9519  00A640  2A31               	incf	(display_drawCircleHelper@x+1)^0,f,c
  9520                           
  9521                           ;LCD320x240color.c: 679: ddF_x += 2;
  9522  00A642  0E02               	movlw	2
  9523  00A644  262A               	addwf	display_drawCircleHelper@ddF_x^0,f,c
  9524  00A646  0E00               	movlw	0
  9525  00A648  222B               	addwfc	(display_drawCircleHelper@ddF_x+1)^0,f,c
  9526                           
  9527                           ;LCD320x240color.c: 680: f += ddF_x;
  9528  00A64A  502A               	movf	display_drawCircleHelper@ddF_x^0,w,c
  9529  00A64C  262E               	addwf	display_drawCircleHelper@f^0,f,c
  9530  00A64E  502B               	movf	(display_drawCircleHelper@ddF_x+1)^0,w,c
  9531  00A650  222F               	addwfc	(display_drawCircleHelper@f+1)^0,f,c
  9532                           
  9533                           ;LCD320x240color.c: 681: if (cornername & 0x4) {
  9534  00A652  A425               	btfss	display_drawCircleHelper@cornername^0,2,c
  9535  00A654  D024               	goto	l23199
  9536                           
  9537                           ;LCD320x240color.c: 682: lcd_draw_pixel_at(x0 + x, y0 + y, color);
  9538  00A656  501F               	movf	display_drawCircleHelper@x0^0,w,c
  9539  00A658  2430               	addwf	display_drawCircleHelper@x^0,w,c
  9540  00A65A  6E19               	movwf	lcd_draw_pixel_at@x^0,c
  9541  00A65C  5020               	movf	(display_drawCircleHelper@x0+1)^0,w,c
  9542  00A65E  2031               	addwfc	(display_drawCircleHelper@x+1)^0,w,c
  9543  00A660  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
  9544  00A662  5021               	movf	display_drawCircleHelper@y0^0,w,c
  9545  00A664  2432               	addwf	display_drawCircleHelper@y^0,w,c
  9546  00A666  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
  9547  00A668  5022               	movf	(display_drawCircleHelper@y0+1)^0,w,c
  9548  00A66A  2033               	addwfc	(display_drawCircleHelper@y+1)^0,w,c
  9549  00A66C  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
  9550  00A66E  C026  F01D         	movff	display_drawCircleHelper@color,lcd_draw_pixel_at@color
  9551  00A672  C027  F01E         	movff	display_drawCircleHelper@color+1,lcd_draw_pixel_at@color+1
  9552  00A676  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
  9553                           
  9554                           ;LCD320x240color.c: 683: lcd_draw_pixel_at(x0 + y, y0 + x, color);
  9555  00A67A  501F               	movf	display_drawCircleHelper@x0^0,w,c
  9556  00A67C  2432               	addwf	display_drawCircleHelper@y^0,w,c
  9557  00A67E  6E19               	movwf	lcd_draw_pixel_at@x^0,c
  9558  00A680  5020               	movf	(display_drawCircleHelper@x0+1)^0,w,c
  9559  00A682  2033               	addwfc	(display_drawCircleHelper@y+1)^0,w,c
  9560  00A684  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
  9561  00A686  5021               	movf	display_drawCircleHelper@y0^0,w,c
  9562  00A688  2430               	addwf	display_drawCircleHelper@x^0,w,c
  9563  00A68A  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
  9564  00A68C  5022               	movf	(display_drawCircleHelper@y0+1)^0,w,c
  9565  00A68E  2031               	addwfc	(display_drawCircleHelper@x+1)^0,w,c
  9566  00A690  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
  9567  00A692  C026  F01D         	movff	display_drawCircleHelper@color,lcd_draw_pixel_at@color
  9568  00A696  C027  F01E         	movff	display_drawCircleHelper@color+1,lcd_draw_pixel_at@color+1
  9569  00A69A  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
  9570  00A69E                     l23199:
  9571                           
  9572                           ;LCD320x240color.c: 684: };LCD320x240color.c: 685: if (cornername & 0x2) {
  9573  00A69E  A225               	btfss	display_drawCircleHelper@cornername^0,1,c
  9574  00A6A0  D024               	goto	l23203
  9575                           
  9576                           ;LCD320x240color.c: 686: lcd_draw_pixel_at(x0 + x, y0 - y, color);
  9577  00A6A2  501F               	movf	display_drawCircleHelper@x0^0,w,c
  9578  00A6A4  2430               	addwf	display_drawCircleHelper@x^0,w,c
  9579  00A6A6  6E19               	movwf	lcd_draw_pixel_at@x^0,c
  9580  00A6A8  5020               	movf	(display_drawCircleHelper@x0+1)^0,w,c
  9581  00A6AA  2031               	addwfc	(display_drawCircleHelper@x+1)^0,w,c
  9582  00A6AC  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
  9583  00A6AE  5032               	movf	display_drawCircleHelper@y^0,w,c
  9584  00A6B0  5C21               	subwf	display_drawCircleHelper@y0^0,w,c
  9585  00A6B2  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
  9586  00A6B4  5033               	movf	(display_drawCircleHelper@y+1)^0,w,c
  9587  00A6B6  5822               	subwfb	(display_drawCircleHelper@y0+1)^0,w,c
  9588  00A6B8  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
  9589  00A6BA  C026  F01D         	movff	display_drawCircleHelper@color,lcd_draw_pixel_at@color
  9590  00A6BE  C027  F01E         	movff	display_drawCircleHelper@color+1,lcd_draw_pixel_at@color+1
  9591  00A6C2  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
  9592                           
  9593                           ;LCD320x240color.c: 687: lcd_draw_pixel_at(x0 + y, y0 - x, color);
  9594  00A6C6  501F               	movf	display_drawCircleHelper@x0^0,w,c
  9595  00A6C8  2432               	addwf	display_drawCircleHelper@y^0,w,c
  9596  00A6CA  6E19               	movwf	lcd_draw_pixel_at@x^0,c
  9597  00A6CC  5020               	movf	(display_drawCircleHelper@x0+1)^0,w,c
  9598  00A6CE  2033               	addwfc	(display_drawCircleHelper@y+1)^0,w,c
  9599  00A6D0  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
  9600  00A6D2  5030               	movf	display_drawCircleHelper@x^0,w,c
  9601  00A6D4  5C21               	subwf	display_drawCircleHelper@y0^0,w,c
  9602  00A6D6  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
  9603  00A6D8  5031               	movf	(display_drawCircleHelper@x+1)^0,w,c
  9604  00A6DA  5822               	subwfb	(display_drawCircleHelper@y0+1)^0,w,c
  9605  00A6DC  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
  9606  00A6DE  C026  F01D         	movff	display_drawCircleHelper@color,lcd_draw_pixel_at@color
  9607  00A6E2  C027  F01E         	movff	display_drawCircleHelper@color+1,lcd_draw_pixel_at@color+1
  9608  00A6E6  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
  9609  00A6EA                     l23203:
  9610                           
  9611                           ;LCD320x240color.c: 688: };LCD320x240color.c: 689: if (cornername & 0x8) {
  9612  00A6EA  A625               	btfss	display_drawCircleHelper@cornername^0,3,c
  9613  00A6EC  D024               	goto	l23207
  9614                           
  9615                           ;LCD320x240color.c: 690: lcd_draw_pixel_at(x0 - y, y0 + x, color);
  9616  00A6EE  5032               	movf	display_drawCircleHelper@y^0,w,c
  9617  00A6F0  5C1F               	subwf	display_drawCircleHelper@x0^0,w,c
  9618  00A6F2  6E19               	movwf	lcd_draw_pixel_at@x^0,c
  9619  00A6F4  5033               	movf	(display_drawCircleHelper@y+1)^0,w,c
  9620  00A6F6  5820               	subwfb	(display_drawCircleHelper@x0+1)^0,w,c
  9621  00A6F8  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
  9622  00A6FA  5021               	movf	display_drawCircleHelper@y0^0,w,c
  9623  00A6FC  2430               	addwf	display_drawCircleHelper@x^0,w,c
  9624  00A6FE  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
  9625  00A700  5022               	movf	(display_drawCircleHelper@y0+1)^0,w,c
  9626  00A702  2031               	addwfc	(display_drawCircleHelper@x+1)^0,w,c
  9627  00A704  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
  9628  00A706  C026  F01D         	movff	display_drawCircleHelper@color,lcd_draw_pixel_at@color
  9629  00A70A  C027  F01E         	movff	display_drawCircleHelper@color+1,lcd_draw_pixel_at@color+1
  9630  00A70E  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
  9631                           
  9632                           ;LCD320x240color.c: 691: lcd_draw_pixel_at(x0 - x, y0 + y, color);
  9633  00A712  5030               	movf	display_drawCircleHelper@x^0,w,c
  9634  00A714  5C1F               	subwf	display_drawCircleHelper@x0^0,w,c
  9635  00A716  6E19               	movwf	lcd_draw_pixel_at@x^0,c
  9636  00A718  5031               	movf	(display_drawCircleHelper@x+1)^0,w,c
  9637  00A71A  5820               	subwfb	(display_drawCircleHelper@x0+1)^0,w,c
  9638  00A71C  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
  9639  00A71E  5021               	movf	display_drawCircleHelper@y0^0,w,c
  9640  00A720  2432               	addwf	display_drawCircleHelper@y^0,w,c
  9641  00A722  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
  9642  00A724  5022               	movf	(display_drawCircleHelper@y0+1)^0,w,c
  9643  00A726  2033               	addwfc	(display_drawCircleHelper@y+1)^0,w,c
  9644  00A728  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
  9645  00A72A  C026  F01D         	movff	display_drawCircleHelper@color,lcd_draw_pixel_at@color
  9646  00A72E  C027  F01E         	movff	display_drawCircleHelper@color+1,lcd_draw_pixel_at@color+1
  9647  00A732  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
  9648  00A736                     l23207:
  9649                           
  9650                           ;LCD320x240color.c: 692: };LCD320x240color.c: 693: if (cornername & 0x1) {
  9651  00A736  A025               	btfss	display_drawCircleHelper@cornername^0,0,c
  9652  00A738  D024               	goto	l23211
  9653                           
  9654                           ;LCD320x240color.c: 694: lcd_draw_pixel_at(x0 - y, y0 - x, color);
  9655  00A73A  5032               	movf	display_drawCircleHelper@y^0,w,c
  9656  00A73C  5C1F               	subwf	display_drawCircleHelper@x0^0,w,c
  9657  00A73E  6E19               	movwf	lcd_draw_pixel_at@x^0,c
  9658  00A740  5033               	movf	(display_drawCircleHelper@y+1)^0,w,c
  9659  00A742  5820               	subwfb	(display_drawCircleHelper@x0+1)^0,w,c
  9660  00A744  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
  9661  00A746  5030               	movf	display_drawCircleHelper@x^0,w,c
  9662  00A748  5C21               	subwf	display_drawCircleHelper@y0^0,w,c
  9663  00A74A  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
  9664  00A74C  5031               	movf	(display_drawCircleHelper@x+1)^0,w,c
  9665  00A74E  5822               	subwfb	(display_drawCircleHelper@y0+1)^0,w,c
  9666  00A750  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
  9667  00A752  C026  F01D         	movff	display_drawCircleHelper@color,lcd_draw_pixel_at@color
  9668  00A756  C027  F01E         	movff	display_drawCircleHelper@color+1,lcd_draw_pixel_at@color+1
  9669  00A75A  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
  9670                           
  9671                           ;LCD320x240color.c: 695: lcd_draw_pixel_at(x0 - x, y0 - y, color);
  9672  00A75E  5030               	movf	display_drawCircleHelper@x^0,w,c
  9673  00A760  5C1F               	subwf	display_drawCircleHelper@x0^0,w,c
  9674  00A762  6E19               	movwf	lcd_draw_pixel_at@x^0,c
  9675  00A764  5031               	movf	(display_drawCircleHelper@x+1)^0,w,c
  9676  00A766  5820               	subwfb	(display_drawCircleHelper@x0+1)^0,w,c
  9677  00A768  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
  9678  00A76A  5032               	movf	display_drawCircleHelper@y^0,w,c
  9679  00A76C  5C21               	subwf	display_drawCircleHelper@y0^0,w,c
  9680  00A76E  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
  9681  00A770  5033               	movf	(display_drawCircleHelper@y+1)^0,w,c
  9682  00A772  5822               	subwfb	(display_drawCircleHelper@y0+1)^0,w,c
  9683  00A774  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
  9684  00A776  C026  F01D         	movff	display_drawCircleHelper@color,lcd_draw_pixel_at@color
  9685  00A77A  C027  F01E         	movff	display_drawCircleHelper@color+1,lcd_draw_pixel_at@color+1
  9686  00A77E  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
  9687  00A782                     l23211:
  9688  00A782  5032               	movf	display_drawCircleHelper@y^0,w,c
  9689  00A784  5C30               	subwf	display_drawCircleHelper@x^0,w,c
  9690  00A786  5031               	movf	(display_drawCircleHelper@x+1)^0,w,c
  9691  00A788  0A80               	xorlw	128
  9692  00A78A  6E28               	movwf	??_display_drawCircleHelper^0,c
  9693  00A78C  5033               	movf	(display_drawCircleHelper@y+1)^0,w,c
  9694  00A78E  0A80               	xorlw	128
  9695  00A790  5828               	subwfb	??_display_drawCircleHelper^0,w,c
  9696  00A792  B0D8               	btfsc	status,0,c
  9697  00A794  0012               	return	
  9698  00A796  D746               	goto	l23183
  9699  00A798                     __end_of_display_drawCircleHelper:
  9700                           	callstack 0
  9701                           
  9702 ;; *************** function _ButtonCheck *****************
  9703 ;; Defined at:
  9704 ;;		line 655 in file "main.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  x               2   87[BANK0 ] unsigned int 
  9707 ;;  y               2   89[BANK0 ] unsigned int 
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;  jj              1   93[BANK0 ] unsigned char 
  9710 ;;  kk              1   92[BANK0 ] unsigned char 
  9711 ;;  mode            1   91[BANK0 ] unsigned char 
  9712 ;; Return value:  Size  Location     Type
  9713 ;;                  1    wreg      unsigned char 
  9714 ;; Registers used:
  9715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9716 ;; Tracked objects:
  9717 ;;		On entry : 0/2
  9718 ;;		On exit  : 3F/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9721 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9722 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;Total ram usage:        7 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:   18
  9728 ;; This function calls:
  9729 ;;		_ButtonPush
  9730 ;;		_DrawSetBox
  9731 ;; This function is called by:
  9732 ;;		_SettingProc
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           	psect	text10
  9737  00E0EE                     __ptext10:
  9738                           	callstack 0
  9739  00E0EE                     _ButtonCheck:
  9740                           	callstack 11
  9741                           
  9742                           ;main.c: 656: uint8_t jj, kk;;main.c: 657: uint8_t mode = Mode;
  9743                           
  9744                           ;incstack = 0
  9745  00E0EE  C2E3  F0BB         	movff	_Mode,ButtonCheck@mode
  9746                           
  9747                           ;main.c: 660: for (jj = 0; jj< 6; jj++) {
  9748  00E0F2  0E00               	movlw	0
  9749  00E0F4  0100               	movlb	0	; () banked
  9750  00E0F6  6FBD               	movwf	ButtonCheck@jj& (0+255),b
  9751  00E0F8                     l24061:
  9752                           
  9753                           ; BSR set to: 0
  9754                           ;main.c: 661: if (ButtonPush(Test_x, Test_y, jj)) {
  9755  00E0F8  C2EE  F00E         	movff	_Test_x,ButtonPush@x
  9756  00E0FC  C2EF  F00F         	movff	_Test_x+1,ButtonPush@x+1
  9757  00E100  C2EC  F010         	movff	_Test_y,ButtonPush@y
  9758  00E104  C2ED  F011         	movff	_Test_y+1,ButtonPush@y+1
  9759  00E108  C0BD  F012         	movff	ButtonCheck@jj,ButtonPush@btn
  9760  00E10C  EC34  F06B         	call	_ButtonPush	;wreg free
  9761  00E110  0900               	iorlw	0
  9762  00E112  B4D8               	btfsc	status,2,c
  9763  00E114  D016               	goto	l24079
  9764                           
  9765                           ;main.c: 669: mode = 0x11 + jj;
  9766  00E116  0100               	movlb	0	; () banked
  9767  00E118  51BD               	movf	ButtonCheck@jj& (0+255),w,b
  9768  00E11A  0F11               	addlw	17
  9769  00E11C  6FBB               	movwf	ButtonCheck@mode& (0+255),b
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;main.c: 670: for (kk = 0; kk < 3; kk++) preDateTime[kk] = 0xff;
  9773  00E11E  0E00               	movlw	0
  9774  00E120  6FBC               	movwf	ButtonCheck@kk& (0+255),b
  9775  00E122                     l24071:
  9776                           
  9777                           ; BSR set to: 0
  9778  00E122  0E6D               	movlw	low _preDateTime
  9779  00E124  25BC               	addwf	ButtonCheck@kk& (0+255),w,b
  9780  00E126  6ED9               	movwf	fsr2l,c
  9781  00E128  6ADA               	clrf	fsr2h,c
  9782  00E12A  0E03               	movlw	high _preDateTime
  9783  00E12C  22DA               	addwfc	fsr2h,f,c
  9784  00E12E  0EFF               	movlw	255
  9785  00E130  6EDF               	movwf	indf2,c
  9786                           
  9787                           ; BSR set to: 0
  9788  00E132  2BBC               	incf	ButtonCheck@kk& (0+255),f,b
  9789                           
  9790                           ; BSR set to: 0
  9791  00E134  0E02               	movlw	2
  9792  00E136  65BC               	cpfsgt	ButtonCheck@kk& (0+255),b
  9793  00E138  D7F4               	goto	l24071
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;main.c: 671: DrawSetBox(mode);
  9797  00E13A  51BB               	movf	ButtonCheck@mode& (0+255),w,b
  9798  00E13C  EC35  F046         	call	_DrawSetBox
  9799                           
  9800                           ;main.c: 672: break;
  9801  00E140  D005               	goto	u27270
  9802  00E142                     l24079:
  9803  00E142  0100               	movlb	0	; () banked
  9804  00E144  2BBD               	incf	ButtonCheck@jj& (0+255),f,b
  9805                           
  9806                           ; BSR set to: 0
  9807  00E146  0E05               	movlw	5
  9808  00E148  65BD               	cpfsgt	ButtonCheck@jj& (0+255),b
  9809  00E14A  D7D6               	goto	l24061
  9810  00E14C                     u27270:
  9811                           
  9812                           ;main.c: 673: };main.c: 674: };main.c: 684: return mode;
  9813  00E14C  0100               	movlb	0	; () banked
  9814  00E14E  51BB               	movf	ButtonCheck@mode& (0+255),w,b
  9815                           
  9816                           ; BSR set to: 0
  9817  00E150  0012               	return		;funcret
  9818  00E152                     __end_of_ButtonCheck:
  9819                           	callstack 0
  9820                           
  9821 ;; *************** function _DrawSetBox *****************
  9822 ;; Defined at:
  9823 ;;		line 616 in file "main.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;  mode            1    wreg     unsigned char 
  9826 ;; Auto vars:     Size  Location     Type
  9827 ;;  mode            1  249[BANK1 ] unsigned char 
  9828 ;;  str           100  147[BANK1 ] unsigned char [100]
  9829 ;;  color           2  247[BANK1 ] unsigned int 
  9830 ;; Return value:  Size  Location     Type
  9831 ;;                  1    wreg      void 
  9832 ;; Registers used:
  9833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9834 ;; Tracked objects:
  9835 ;;		On entry : 3D/2
  9836 ;;		On exit  : 0/0
  9837 ;;		Unchanged: 0/0
  9838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9840 ;;      Locals:         0       0     103       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9842 ;;      Totals:         0       0     103       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9843 ;;Total ram usage:      103 bytes
  9844 ;; Hardware stack levels used:    1
  9845 ;; Hardware stack levels required when called:   17
  9846 ;; This function calls:
  9847 ;;		_AlarmSoundOff
  9848 ;;		_display_drawChars
  9849 ;;		_drawTime
  9850 ;;		_sprintf
  9851 ;; This function is called by:
  9852 ;;		_ButtonCheck
  9853 ;;		_SettingProc
  9854 ;; This function uses a non-reentrant model
  9855 ;;
  9856                           
  9857                           	psect	text11
  9858  008C6A                     __ptext11:
  9859                           	callstack 0
  9860  008C6A                     _DrawSetBox:
  9861                           	callstack 12
  9862                           
  9863                           ; BSR set to: 0
  9864                           ;incstack = 0
  9865                           ;DrawSetBox@mode stored from wreg
  9866  008C6A  0101               	movlb	1	; () banked
  9867  008C6C  6FF9               	movwf	DrawSetBox@mode& (0+255),b
  9868                           
  9869                           ;main.c: 617: char str[100];;main.c: 618: uint16_t color;;main.c: 620: if (mode == 0x14)
      +                           {
  9870  008C6E  0E14               	movlw	20
  9871  008C70  0101               	movlb	1	; () banked
  9872  008C72  19F9               	xorwf	DrawSetBox@mode& (0+255),w,b
  9873  008C74  A4D8               	btfss	status,2,c
  9874  008C76  D002               	goto	l23001
  9875                           
  9876                           ; BSR set to: 1
  9877                           ;main.c: 622: color = 0xF800;
  9878  008C78  0EF8               	movlw	248
  9879  008C7A  D001               	goto	L3
  9880  008C7C                     l23001:
  9881                           
  9882                           ; BSR set to: 1
  9883                           ;main.c: 624: color = 0x0400;
  9884  008C7C  0E04               	movlw	4
  9885  008C7E                     L3:
  9886  008C7E  6FF8               	movwf	(DrawSetBox@color+1)& (0+255),b
  9887  008C80  0E00               	movlw	0
  9888  008C82  6FF7               	movwf	DrawSetBox@color& (0+255),b
  9889                           
  9890                           ; BSR set to: 1
  9891                           ;main.c: 625: };main.c: 626: drawTime(DisplayMode, TmpTime, color);
  9892  008C84  0EBB               	movlw	low _TmpTime
  9893  008C86  0100               	movlb	0	; () banked
  9894  008C88  6FB2               	movwf	drawTime@datetime& (0+255),b
  9895  008C8A  0E03               	movlw	high _TmpTime
  9896  008C8C  6FB3               	movwf	(drawTime@datetime+1)& (0+255),b
  9897  008C8E  C1F7  F0B4         	movff	DrawSetBox@color,drawTime@color
  9898  008C92  C1F8  F0B5         	movff	DrawSetBox@color+1,drawTime@color+1
  9899  008C96  0102               	movlb	2	; () banked
  9900  008C98  51E2               	movf	_DisplayMode& (0+255),w,b
  9901  008C9A  ECC1  F061         	call	_drawTime
  9902                           
  9903                           ;main.c: 630: sprintf(str, "20%02x/%02x/%02x(%c)", TmpTime[6], TmpTime[5], TmpTime[4], 0
      +                          x80+TmpTime[3]);
  9904  008C9E  0E93               	movlw	low DrawSetBox@str
  9905  008CA0  6E2A               	movwf	sprintf@sp^0,c
  9906  008CA2  0E01               	movlw	high DrawSetBox@str
  9907  008CA4  6E2B               	movwf	(sprintf@sp+1)^0,c
  9908  008CA6  0E2C               	movlw	low STR_11
  9909  008CA8  6E2C               	movwf	sprintf@f^0,c
  9910  008CAA  0EFF               	movlw	high STR_11
  9911  008CAC  6E2D               	movwf	(sprintf@f+1)^0,c
  9912  008CAE  C3C1  F02E         	movff	_TmpTime+6,?_sprintf+4
  9913  008CB2  6A2F               	clrf	(?_sprintf+5)^0,c
  9914  008CB4  C3C0  F030         	movff	_TmpTime+5,?_sprintf+6
  9915  008CB8  6A31               	clrf	(?_sprintf+7)^0,c
  9916  008CBA  C3BF  F032         	movff	_TmpTime+4,?_sprintf+8
  9917  008CBE  6A33               	clrf	(?_sprintf+9)^0,c
  9918  008CC0  0E80               	movlw	128
  9919  008CC2  0103               	movlb	3	; () banked
  9920  008CC4  25BE               	addwf	(_TmpTime+3)& (0+255),w,b
  9921  008CC6  6E34               	movwf	(?_sprintf+10)^0,c
  9922  008CC8  6A35               	clrf	(?_sprintf+11)^0,c
  9923  008CCA  0E00               	movlw	0
  9924  008CCC  2235               	addwfc	(?_sprintf+11)^0,f,c
  9925  008CCE  ECD0  F028         	call	_sprintf	;wreg free
  9926                           
  9927                           ; BSR set to: 0
  9928                           ;main.c: 631: display_drawChars(RDate[DisplayMode].x, RDate[DisplayMode].y, str, 0xFFFF,
      +                           0x0000, RDate[DisplayMode].font);
  9929  008CD2  0102               	movlb	2	; () banked
  9930  008CD4  51E2               	movf	_DisplayMode& (0+255),w,b
  9931  008CD6  0D0A               	mullw	10
  9932  008CD8  0E82               	movlw	low _RDate
  9933  008CDA  24F3               	addwf	243,w,c
  9934  008CDC  6ED9               	movwf	fsr2l,c
  9935  008CDE  0E04               	movlw	high _RDate
  9936  008CE0  20F4               	addwfc	prodh,w,c
  9937  008CE2  6EDA               	movwf	fsr2h,c
  9938  008CE4  CFDE F06A          	movff	postinc2,display_drawChars@x
  9939  008CE8  CFDD F06B          	movff	postdec2,display_drawChars@x+1
  9940  008CEC  51E2               	movf	_DisplayMode& (0+255),w,b
  9941  008CEE  0D0A               	mullw	10
  9942  008CF0  0E84               	movlw	low (_RDate+2)
  9943  008CF2  24F3               	addwf	243,w,c
  9944  008CF4  6ED9               	movwf	fsr2l,c
  9945  008CF6  0E04               	movlw	high (_RDate+2)
  9946  008CF8  20F4               	addwfc	prodh,w,c
  9947  008CFA  6EDA               	movwf	fsr2h,c
  9948  008CFC  CFDE F06C          	movff	postinc2,display_drawChars@y
  9949  008D00  CFDD F06D          	movff	postdec2,display_drawChars@y+1
  9950  008D04  0E93               	movlw	low DrawSetBox@str
  9951  008D06  0100               	movlb	0	; () banked
  9952  008D08  6F6E               	movwf	display_drawChars@s& (0+255),b
  9953  008D0A  0E01               	movlw	high DrawSetBox@str
  9954  008D0C  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
  9955  008D0E  0EFF               	movlw	255
  9956  008D10  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
  9957  008D12  6970               	setf	display_drawChars@color& (0+255),b
  9958  008D14  0E00               	movlw	0
  9959  008D16  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
  9960  008D18  0E00               	movlw	0
  9961  008D1A  6F72               	movwf	display_drawChars@bg& (0+255),b
  9962  008D1C  0102               	movlb	2	; () banked
  9963  008D1E  51E2               	movf	_DisplayMode& (0+255),w,b
  9964  008D20  0D0A               	mullw	10
  9965  008D22  0E8A               	movlw	low (_RDate+8)
  9966  008D24  24F3               	addwf	243,w,c
  9967  008D26  6ED9               	movwf	fsr2l,c
  9968  008D28  0E04               	movlw	high (_RDate+8)
  9969  008D2A  20F4               	addwfc	prodh,w,c
  9970  008D2C  6EDA               	movwf	fsr2h,c
  9971  008D2E  50DF               	movf	indf2,w,c
  9972  008D30  0100               	movlb	0	; () banked
  9973  008D32  6F74               	movwf	display_drawChars@size& (0+255),b
  9974  008D34  EC13  F06D         	call	_display_drawChars	;wreg free
  9975                           
  9976                           ;main.c: 633: if (mode == 0x11) {
  9977  008D38  0E11               	movlw	17
  9978  008D3A  0101               	movlb	1	; () banked
  9979  008D3C  19F9               	xorwf	DrawSetBox@mode& (0+255),w,b
  9980  008D3E  A4D8               	btfss	status,2,c
  9981  008D40  D042               	goto	l23013
  9982                           
  9983                           ; BSR set to: 1
  9984                           ;main.c: 634: sprintf(str, "20%02x", TmpTime[6]);
  9985  008D42  0E93               	movlw	low DrawSetBox@str
  9986  008D44  6E2A               	movwf	sprintf@sp^0,c
  9987  008D46  0E01               	movlw	high DrawSetBox@str
  9988  008D48  6E2B               	movwf	(sprintf@sp+1)^0,c
  9989  008D4A  0ED4               	movlw	low STR_12
  9990  008D4C  6E2C               	movwf	sprintf@f^0,c
  9991  008D4E  0EFF               	movlw	high STR_12
  9992  008D50  6E2D               	movwf	(sprintf@f+1)^0,c
  9993  008D52  C3C1  F02E         	movff	_TmpTime+6,?_sprintf+4
  9994  008D56  6A2F               	clrf	(?_sprintf+5)^0,c
  9995  008D58  ECD0  F028         	call	_sprintf	;wreg free
  9996                           
  9997                           ;main.c: 635: display_drawChars(RYear[DisplayMode].x, RYear[DisplayMode].y, str, 0xF800,
      +                           0x0000, RDate[DisplayMode].font);
  9998  008D5C  0102               	movlb	2	; () banked
  9999  008D5E  51E2               	movf	_DisplayMode& (0+255),w,b
 10000  008D60  0D0A               	mullw	10
 10001  008D62  0EB4               	movlw	low _RYear
 10002  008D64  24F3               	addwf	243,w,c
 10003  008D66  6ED9               	movwf	fsr2l,c
 10004  008D68  0E05               	movlw	high _RYear
 10005  008D6A  20F4               	addwfc	prodh,w,c
 10006  008D6C  6EDA               	movwf	fsr2h,c
 10007  008D6E  CFDE F06A          	movff	postinc2,display_drawChars@x
 10008  008D72  CFDD F06B          	movff	postdec2,display_drawChars@x+1
 10009  008D76  51E2               	movf	_DisplayMode& (0+255),w,b
 10010  008D78  0D0A               	mullw	10
 10011  008D7A  0EB6               	movlw	low (_RYear+2)
 10012  008D7C  24F3               	addwf	243,w,c
 10013  008D7E  6ED9               	movwf	fsr2l,c
 10014  008D80  0E05               	movlw	high (_RYear+2)
 10015  008D82  20F4               	addwfc	prodh,w,c
 10016  008D84  6EDA               	movwf	fsr2h,c
 10017  008D86  CFDE F06C          	movff	postinc2,display_drawChars@y
 10018  008D8A  CFDD F06D          	movff	postdec2,display_drawChars@y+1
 10019  008D8E  0E93               	movlw	low DrawSetBox@str
 10020  008D90  0100               	movlb	0	; () banked
 10021  008D92  6F6E               	movwf	display_drawChars@s& (0+255),b
 10022  008D94  0E01               	movlw	high DrawSetBox@str
 10023  008D96  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
 10024  008D98  0EF8               	movlw	248
 10025  008D9A  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
 10026  008D9C  0E00               	movlw	0
 10027  008D9E  6F70               	movwf	display_drawChars@color& (0+255),b
 10028  008DA0  0E00               	movlw	0
 10029  008DA2  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
 10030  008DA4  0E00               	movlw	0
 10031  008DA6  6F72               	movwf	display_drawChars@bg& (0+255),b
 10032  008DA8  0102               	movlb	2	; () banked
 10033  008DAA  51E2               	movf	_DisplayMode& (0+255),w,b
 10034  008DAC  0D0A               	mullw	10
 10035  008DAE  0E8A               	movlw	low (_RDate+8)
 10036  008DB0  24F3               	addwf	243,w,c
 10037  008DB2  6ED9               	movwf	fsr2l,c
 10038  008DB4  0E04               	movlw	high (_RDate+8)
 10039  008DB6  20F4               	addwfc	prodh,w,c
 10040  008DB8  6EDA               	movwf	fsr2h,c
 10041  008DBA  50DF               	movf	indf2,w,c
 10042  008DBC  0100               	movlb	0	; () banked
 10043  008DBE  6F74               	movwf	display_drawChars@size& (0+255),b
 10044  008DC0  EC13  F06D         	call	_display_drawChars	;wreg free
 10045                           
 10046                           ;main.c: 636: }
 10047  008DC4  D08B               	goto	l23021
 10048  008DC6                     l23013:
 10049                           
 10050                           ; BSR set to: 1
 10051                           ;main.c: 637: else if (mode == 0x12) {
 10052  008DC6  0E12               	movlw	18
 10053  008DC8  19F9               	xorwf	DrawSetBox@mode& (0+255),w,b
 10054  008DCA  A4D8               	btfss	status,2,c
 10055  008DCC  D042               	goto	l23017
 10056                           
 10057                           ; BSR set to: 1
 10058                           ;main.c: 638: sprintf(str, "%02x", TmpTime[5]);
 10059  008DCE  0E93               	movlw	low DrawSetBox@str
 10060  008DD0  6E2A               	movwf	sprintf@sp^0,c
 10061  008DD2  0E01               	movlw	high DrawSetBox@str
 10062  008DD4  6E2B               	movwf	(sprintf@sp+1)^0,c
 10063  008DD6  0ED6               	movlw	low (STR_12+2)
 10064  008DD8  6E2C               	movwf	sprintf@f^0,c
 10065  008DDA  0EFF               	movlw	high (STR_12+2)
 10066  008DDC  6E2D               	movwf	(sprintf@f+1)^0,c
 10067  008DDE  C3C0  F02E         	movff	_TmpTime+5,?_sprintf+4
 10068  008DE2  6A2F               	clrf	(?_sprintf+5)^0,c
 10069  008DE4  ECD0  F028         	call	_sprintf	;wreg free
 10070                           
 10071                           ;main.c: 639: display_drawChars(RMonth[DisplayMode].x, RMonth[DisplayMode].y, str, 0xF80
      +                          0, 0x0000, RDate[DisplayMode].font);
 10072  008DE8  0102               	movlb	2	; () banked
 10073  008DEA  51E2               	movf	_DisplayMode& (0+255),w,b
 10074  008DEC  0D0A               	mullw	10
 10075  008DEE  0E96               	movlw	low _RMonth
 10076  008DF0  24F3               	addwf	243,w,c
 10077  008DF2  6ED9               	movwf	fsr2l,c
 10078  008DF4  0E05               	movlw	high _RMonth
 10079  008DF6  20F4               	addwfc	prodh,w,c
 10080  008DF8  6EDA               	movwf	fsr2h,c
 10081  008DFA  CFDE F06A          	movff	postinc2,display_drawChars@x
 10082  008DFE  CFDD F06B          	movff	postdec2,display_drawChars@x+1
 10083  008E02  51E2               	movf	_DisplayMode& (0+255),w,b
 10084  008E04  0D0A               	mullw	10
 10085  008E06  0E98               	movlw	low (_RMonth+2)
 10086  008E08  24F3               	addwf	243,w,c
 10087  008E0A  6ED9               	movwf	fsr2l,c
 10088  008E0C  0E05               	movlw	high (_RMonth+2)
 10089  008E0E  20F4               	addwfc	prodh,w,c
 10090  008E10  6EDA               	movwf	fsr2h,c
 10091  008E12  CFDE F06C          	movff	postinc2,display_drawChars@y
 10092  008E16  CFDD F06D          	movff	postdec2,display_drawChars@y+1
 10093  008E1A  0E93               	movlw	low DrawSetBox@str
 10094  008E1C  0100               	movlb	0	; () banked
 10095  008E1E  6F6E               	movwf	display_drawChars@s& (0+255),b
 10096  008E20  0E01               	movlw	high DrawSetBox@str
 10097  008E22  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
 10098  008E24  0EF8               	movlw	248
 10099  008E26  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
 10100  008E28  0E00               	movlw	0
 10101  008E2A  6F70               	movwf	display_drawChars@color& (0+255),b
 10102  008E2C  0E00               	movlw	0
 10103  008E2E  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
 10104  008E30  0E00               	movlw	0
 10105  008E32  6F72               	movwf	display_drawChars@bg& (0+255),b
 10106  008E34  0102               	movlb	2	; () banked
 10107  008E36  51E2               	movf	_DisplayMode& (0+255),w,b
 10108  008E38  0D0A               	mullw	10
 10109  008E3A  0E8A               	movlw	low (_RDate+8)
 10110  008E3C  24F3               	addwf	243,w,c
 10111  008E3E  6ED9               	movwf	fsr2l,c
 10112  008E40  0E04               	movlw	high (_RDate+8)
 10113  008E42  20F4               	addwfc	prodh,w,c
 10114  008E44  6EDA               	movwf	fsr2h,c
 10115  008E46  50DF               	movf	indf2,w,c
 10116  008E48  0100               	movlb	0	; () banked
 10117  008E4A  6F74               	movwf	display_drawChars@size& (0+255),b
 10118  008E4C  EC13  F06D         	call	_display_drawChars	;wreg free
 10119                           
 10120                           ;main.c: 640: }
 10121  008E50  D045               	goto	l23021
 10122  008E52                     l23017:
 10123                           
 10124                           ; BSR set to: 1
 10125                           ;main.c: 641: else if (mode ==0x13) {
 10126  008E52  0E13               	movlw	19
 10127  008E54  19F9               	xorwf	DrawSetBox@mode& (0+255),w,b
 10128  008E56  A4D8               	btfss	status,2,c
 10129  008E58  D041               	goto	l23021
 10130                           
 10131                           ; BSR set to: 1
 10132                           ;main.c: 642: sprintf(str, "%02x", TmpTime[4]);
 10133  008E5A  0E93               	movlw	low DrawSetBox@str
 10134  008E5C  6E2A               	movwf	sprintf@sp^0,c
 10135  008E5E  0E01               	movlw	high DrawSetBox@str
 10136  008E60  6E2B               	movwf	(sprintf@sp+1)^0,c
 10137  008E62  0ED6               	movlw	low (STR_12+2)
 10138  008E64  6E2C               	movwf	sprintf@f^0,c
 10139  008E66  0EFF               	movlw	high (STR_12+2)
 10140  008E68  6E2D               	movwf	(sprintf@f+1)^0,c
 10141  008E6A  C3BF  F02E         	movff	_TmpTime+4,?_sprintf+4
 10142  008E6E  6A2F               	clrf	(?_sprintf+5)^0,c
 10143  008E70  ECD0  F028         	call	_sprintf	;wreg free
 10144                           
 10145                           ;main.c: 643: display_drawChars(RDay[DisplayMode].x, RDay[DisplayMode].y, str, 0xF800, 0
      +                          x0000, RDate[DisplayMode].font);
 10146  008E74  0102               	movlb	2	; () banked
 10147  008E76  51E2               	movf	_DisplayMode& (0+255),w,b
 10148  008E78  0D0A               	mullw	10
 10149  008E7A  0E78               	movlw	low _RDay
 10150  008E7C  24F3               	addwf	243,w,c
 10151  008E7E  6ED9               	movwf	fsr2l,c
 10152  008E80  0E05               	movlw	high _RDay
 10153  008E82  20F4               	addwfc	prodh,w,c
 10154  008E84  6EDA               	movwf	fsr2h,c
 10155  008E86  CFDE F06A          	movff	postinc2,display_drawChars@x
 10156  008E8A  CFDD F06B          	movff	postdec2,display_drawChars@x+1
 10157  008E8E  51E2               	movf	_DisplayMode& (0+255),w,b
 10158  008E90  0D0A               	mullw	10
 10159  008E92  0E7A               	movlw	low (_RDay+2)
 10160  008E94  24F3               	addwf	243,w,c
 10161  008E96  6ED9               	movwf	fsr2l,c
 10162  008E98  0E05               	movlw	high (_RDay+2)
 10163  008E9A  20F4               	addwfc	prodh,w,c
 10164  008E9C  6EDA               	movwf	fsr2h,c
 10165  008E9E  CFDE F06C          	movff	postinc2,display_drawChars@y
 10166  008EA2  CFDD F06D          	movff	postdec2,display_drawChars@y+1
 10167  008EA6  0E93               	movlw	low DrawSetBox@str
 10168  008EA8  0100               	movlb	0	; () banked
 10169  008EAA  6F6E               	movwf	display_drawChars@s& (0+255),b
 10170  008EAC  0E01               	movlw	high DrawSetBox@str
 10171  008EAE  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
 10172  008EB0  0EF8               	movlw	248
 10173  008EB2  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
 10174  008EB4  0E00               	movlw	0
 10175  008EB6  6F70               	movwf	display_drawChars@color& (0+255),b
 10176  008EB8  0E00               	movlw	0
 10177  008EBA  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
 10178  008EBC  0E00               	movlw	0
 10179  008EBE  6F72               	movwf	display_drawChars@bg& (0+255),b
 10180  008EC0  0102               	movlb	2	; () banked
 10181  008EC2  51E2               	movf	_DisplayMode& (0+255),w,b
 10182  008EC4  0D0A               	mullw	10
 10183  008EC6  0E8A               	movlw	low (_RDate+8)
 10184  008EC8  24F3               	addwf	243,w,c
 10185  008ECA  6ED9               	movwf	fsr2l,c
 10186  008ECC  0E04               	movlw	high (_RDate+8)
 10187  008ECE  20F4               	addwfc	prodh,w,c
 10188  008ED0  6EDA               	movwf	fsr2h,c
 10189  008ED2  50DF               	movf	indf2,w,c
 10190  008ED4  0100               	movlb	0	; () banked
 10191  008ED6  6F74               	movwf	display_drawChars@size& (0+255),b
 10192  008ED8  EC13  F06D         	call	_display_drawChars	;wreg free
 10193  008EDC                     l23021:
 10194                           
 10195                           ;main.c: 644: };main.c: 645: AlarmSoundOff();
 10196  008EDC  EC1D  F07B         	call	_AlarmSoundOff	;wreg free
 10197  008EE0  0012               	return		;funcret
 10198  008EE2                     __end_of_DrawSetBox:
 10199                           	callstack 0
 10200                           
 10201 ;; *************** function _SYSTEM_Initialize *****************
 10202 ;; Defined at:
 10203 ;;		line 50 in file "mcc_generated_files/mcc.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;		None
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;		None
 10208 ;; Return value:  Size  Location     Type
 10209 ;;                  1    wreg      void 
 10210 ;; Registers used:
 10211 ;;		wreg, status,2, status,0, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 3F/2
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10221 ;;Total ram usage:        0 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    8
 10224 ;; This function calls:
 10225 ;;		_ADC_Initialize
 10226 ;;		_CCP5_Initialize
 10227 ;;		_EPWM1_Initialize
 10228 ;;		_EPWM2_Initialize
 10229 ;;		_EUSART1_Initialize
 10230 ;;		_EXT_INT_Initialize
 10231 ;;		_I2C2_Initialize
 10232 ;;		_INTERRUPT_Initialize
 10233 ;;		_OSCILLATOR_Initialize
 10234 ;;		_PIN_MANAGER_Initialize
 10235 ;;		_SPI1_Initialize
 10236 ;;		_TMR0_Initialize
 10237 ;;		_TMR1_Initialize
 10238 ;;		_TMR2_Initialize
 10239 ;;		_TMR3_Initialize
 10240 ;;		_TMR5_Initialize
 10241 ;;		_TMR6_Initialize
 10242 ;; This function is called by:
 10243 ;;		_main
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           	psect	text12
 10248  00E932                     __ptext12:
 10249                           	callstack 0
 10250  00E932                     _SYSTEM_Initialize:
 10251                           	callstack 22
 10252                           
 10253                           ;mcc.c: 53: INTERRUPT_Initialize();
 10254                           
 10255                           ;incstack = 0
 10256  00E932  ECF9  F07B         	call	_INTERRUPT_Initialize	;wreg free
 10257                           
 10258                           ;mcc.c: 54: SPI1_Initialize();
 10259  00E936  ECB7  F07A         	call	_SPI1_Initialize	;wreg free
 10260                           
 10261                           ;mcc.c: 55: I2C2_Initialize();
 10262  00E93A  EC8F  F07A         	call	_I2C2_Initialize	;wreg free
 10263                           
 10264                           ;mcc.c: 56: PIN_MANAGER_Initialize();
 10265  00E93E  ECC4  F075         	call	_PIN_MANAGER_Initialize	;wreg free
 10266                           
 10267                           ;mcc.c: 57: OSCILLATOR_Initialize();
 10268  00E942  ECC0  F07A         	call	_OSCILLATOR_Initialize	;wreg free
 10269                           
 10270                           ;mcc.c: 58: EPWM2_Initialize();
 10271  00E946  EC7A  F079         	call	_EPWM2_Initialize	;wreg free
 10272                           
 10273                           ; BSR set to: 15
 10274                           ;mcc.c: 59: CCP5_Initialize();
 10275  00E94A  EC6E  F07A         	call	_CCP5_Initialize	;wreg free
 10276                           
 10277                           ; BSR set to: 15
 10278                           ;mcc.c: 60: TMR2_Initialize();
 10279  00E94E  ECFD  F07A         	call	_TMR2_Initialize	;wreg free
 10280                           
 10281                           ; BSR set to: 15
 10282                           ;mcc.c: 61: EXT_INT_Initialize();
 10283  00E952  EC99  F07A         	call	_EXT_INT_Initialize	;wreg free
 10284                           
 10285                           ;mcc.c: 62: TMR0_Initialize();
 10286  00E956  ECCE  F076         	call	_TMR0_Initialize	;wreg free
 10287                           
 10288                           ;mcc.c: 63: TMR6_Initialize();
 10289  00E95A  ECF5  F07A         	call	_TMR6_Initialize	;wreg free
 10290                           
 10291                           ; BSR set to: 15
 10292                           ;mcc.c: 64: ADC_Initialize();
 10293  00E95E  EC79  F07A         	call	_ADC_Initialize	;wreg free
 10294                           
 10295                           ; BSR set to: 15
 10296                           ;mcc.c: 65: EPWM1_Initialize();
 10297  00E962  EC25  F079         	call	_EPWM1_Initialize	;wreg free
 10298                           
 10299                           ; BSR set to: 15
 10300                           ;mcc.c: 66: TMR3_Initialize();
 10301  00E966  EC15  F07A         	call	_TMR3_Initialize	;wreg free
 10302                           
 10303                           ; BSR set to: 15
 10304                           ;mcc.c: 67: TMR5_Initialize();
 10305  00E96A  EC97  F077         	call	_TMR5_Initialize	;wreg free
 10306                           
 10307                           ; BSR set to: 15
 10308                           ;mcc.c: 68: TMR1_Initialize();
 10309  00E96E  EC5D  F078         	call	_TMR1_Initialize	;wreg free
 10310                           
 10311                           ;mcc.c: 69: EUSART1_Initialize();
 10312  00E972  ECA9  F070         	call	_EUSART1_Initialize	;wreg free
 10313                           
 10314                           ; BSR set to: 2
 10315  00E976  0012               	return		;funcret
 10316  00E978                     __end_of_SYSTEM_Initialize:
 10317                           	callstack 0
 10318                           
 10319 ;; *************** function _TMR6_Initialize *****************
 10320 ;; Defined at:
 10321 ;;		line 62 in file "mcc_generated_files/tmr6.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;		None
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      void 
 10328 ;; Registers used:
 10329 ;;		wreg, status,2
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/F
 10332 ;;		On exit  : 3F/F
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10339 ;;Total ram usage:        0 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:    6
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		_SYSTEM_Initialize
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           	psect	text13
 10350  00F5EA                     __ptext13:
 10351                           	callstack 0
 10352  00F5EA                     _TMR6_Initialize:
 10353                           	callstack 23
 10354                           
 10355                           ;tmr6.c: 67: PR6 = 0xFF;
 10356                           
 10357                           ; BSR set to: 2
 10358                           ;incstack = 0
 10359  00F5EA  010F               	movlb	15	; () banked
 10360  00F5EC  694B               	setf	75,b	;volatile
 10361                           
 10362                           ; BSR set to: 15
 10363                           ;tmr6.c: 70: TMR6 = 0x00;
 10364  00F5EE  0E00               	movlw	0
 10365  00F5F0  6F4C               	movwf	76,b	;volatile
 10366                           
 10367                           ; BSR set to: 15
 10368                           ;tmr6.c: 73: PIR5bits.TMR6IF = 0;
 10369  00F5F2  947E               	bcf	126,2,c	;volatile
 10370                           
 10371                           ;tmr6.c: 76: T6CON = 0x06;
 10372  00F5F4  0E06               	movlw	6
 10373  00F5F6  6F4A               	movwf	74,b	;volatile
 10374                           
 10375                           ; BSR set to: 15
 10376  00F5F8  0012               	return		;funcret
 10377  00F5FA                     __end_of_TMR6_Initialize:
 10378                           	callstack 0
 10379                           
 10380 ;; *************** function _TMR5_Initialize *****************
 10381 ;; Defined at:
 10382 ;;		line 64 in file "mcc_generated_files/tmr5.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;		None
 10385 ;; Auto vars:     Size  Location     Type
 10386 ;;		None
 10387 ;; Return value:  Size  Location     Type
 10388 ;;                  1    wreg      void 
 10389 ;; Registers used:
 10390 ;;		wreg, status,2, status,0, cstack
 10391 ;; Tracked objects:
 10392 ;;		On entry : 3F/F
 10393 ;;		On exit  : 3F/F
 10394 ;;		Unchanged: 0/0
 10395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;Total ram usage:        0 bytes
 10401 ;; Hardware stack levels used:    1
 10402 ;; Hardware stack levels required when called:    7
 10403 ;; This function calls:
 10404 ;;		_TMR5_SetInterruptHandler
 10405 ;; This function is called by:
 10406 ;;		_SYSTEM_Initialize
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           	psect	text14
 10411  00EF2E                     __ptext14:
 10412                           	callstack 0
 10413  00EF2E                     _TMR5_Initialize:
 10414                           	callstack 22
 10415                           
 10416                           ; BSR set to: 15
 10417                           ;tmr5.c: 69: T5GCON = 0x00;
 10418                           
 10419                           ; BSR set to: 15
 10420                           ;incstack = 0
 10421  00EF2E  0E00               	movlw	0
 10422  00EF30  6F4D               	movwf	77,b	;volatile
 10423                           
 10424                           ;tmr5.c: 72: TMR5H = 0xB1;
 10425  00EF32  0EB1               	movlw	177
 10426  00EF34  6F50               	movwf	80,b	;volatile
 10427                           
 10428                           ;tmr5.c: 75: TMR5L = 0xE0;
 10429  00EF36  0EE0               	movlw	224
 10430  00EF38  6F4F               	movwf	79,b	;volatile
 10431                           
 10432                           ; BSR set to: 15
 10433                           ;tmr5.c: 78: timer5ReloadVal=TMR5;
 10434  00EF3A  CF4F F384          	movff	3919,_timer5ReloadVal	;volatile
 10435  00EF3E  CF50 F385          	movff	3920,_timer5ReloadVal+1	;volatile
 10436                           
 10437                           ; BSR set to: 15
 10438                           ;tmr5.c: 81: PIR5bits.TMR5IF = 0;
 10439  00EF42  927E               	bcf	126,1,c	;volatile
 10440                           
 10441                           ; BSR set to: 15
 10442                           ;tmr5.c: 84: PIE5bits.TMR5IE = 1;
 10443  00EF44  827D               	bsf	125,1,c	;volatile
 10444                           
 10445                           ; BSR set to: 15
 10446                           ;tmr5.c: 87: TMR5_SetInterruptHandler(TMR5_DefaultInterruptHandler);
 10447  00EF46  0E56               	movlw	low _TMR5_DefaultInterruptHandler
 10448  00EF48  6E0E               	movwf	TMR5_SetInterruptHandler@InterruptHandler^0,c
 10449  00EF4A  0EF8               	movlw	high _TMR5_DefaultInterruptHandler
 10450  00EF4C  6E0F               	movwf	(TMR5_SetInterruptHandler@InterruptHandler+1)^0,c
 10451  00EF4E  EC5D  F07B         	call	_TMR5_SetInterruptHandler	;wreg free
 10452                           
 10453                           ;tmr5.c: 90: T5CON = 0x31;
 10454  00EF52  0E31               	movlw	49
 10455  00EF54  010F               	movlb	15	; () banked
 10456  00EF56  6F4E               	movwf	78,b	;volatile
 10457                           
 10458                           ; BSR set to: 15
 10459  00EF58  0012               	return		;funcret
 10460  00EF5A                     __end_of_TMR5_Initialize:
 10461                           	callstack 0
 10462                           
 10463 ;; *************** function _TMR5_SetInterruptHandler *****************
 10464 ;; Defined at:
 10465 ;;		line 179 in file "mcc_generated_files/tmr5.c"
 10466 ;; Parameters:    Size  Location     Type
 10467 ;;  InterruptHan    2   13[COMRAM] PTR FTN()void 
 10468 ;;		 -> Timer5Handler(1), TMR5_DefaultInterruptHandler(1), 
 10469 ;; Auto vars:     Size  Location     Type
 10470 ;;		None
 10471 ;; Return value:  Size  Location     Type
 10472 ;;                  1    wreg      void 
 10473 ;; Registers used:
 10474 ;;		wreg, status,2, status,0
 10475 ;; Tracked objects:
 10476 ;;		On entry : 0/2
 10477 ;;		On exit  : 0/0
 10478 ;;		Unchanged: 0/0
 10479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10480 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10483 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10484 ;;Total ram usage:        2 bytes
 10485 ;; Hardware stack levels used:    1
 10486 ;; Hardware stack levels required when called:    6
 10487 ;; This function calls:
 10488 ;;		Nothing
 10489 ;; This function is called by:
 10490 ;;		_TMR5_Initialize
 10491 ;;		_main
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           	psect	text15
 10496  00F6BA                     __ptext15:
 10497                           	callstack 0
 10498  00F6BA                     _TMR5_SetInterruptHandler:
 10499                           	callstack 24
 10500                           
 10501                           ;tmr5.c: 180: TMR5_InterruptHandler = InterruptHandler;
 10502                           
 10503                           ; BSR set to: 15
 10504                           ;incstack = 0
 10505  00F6BA  C00E  F382         	movff	TMR5_SetInterruptHandler@InterruptHandler,_TMR5_InterruptHandler
 10506  00F6BE  C00F  F383         	movff	TMR5_SetInterruptHandler@InterruptHandler+1,_TMR5_InterruptHandler+1
 10507  00F6C2  0012               	return		;funcret
 10508  00F6C4                     __end_of_TMR5_SetInterruptHandler:
 10509                           	callstack 0
 10510                           
 10511 ;; *************** function _TMR3_Initialize *****************
 10512 ;; Defined at:
 10513 ;;		line 63 in file "mcc_generated_files/tmr3.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;		None
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;		None
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  1    wreg      void 
 10520 ;; Registers used:
 10521 ;;		wreg, status,2
 10522 ;; Tracked objects:
 10523 ;;		On entry : 3F/F
 10524 ;;		On exit  : 3F/F
 10525 ;;		Unchanged: 3E/0
 10526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10531 ;;Total ram usage:        0 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    6
 10534 ;; This function calls:
 10535 ;;		Nothing
 10536 ;; This function is called by:
 10537 ;;		_SYSTEM_Initialize
 10538 ;; This function uses a non-reentrant model
 10539 ;;
 10540                           
 10541                           	psect	text16
 10542  00F42A                     __ptext16:
 10543                           	callstack 0
 10544  00F42A                     _TMR3_Initialize:
 10545                           	callstack 23
 10546                           
 10547                           ; BSR set to: 15
 10548                           ;tmr3.c: 68: T3GCON = 0x00;
 10549                           
 10550                           ;incstack = 0
 10551  00F42A  0E00               	movlw	0
 10552  00F42C  6EB4               	movwf	180,c	;volatile
 10553                           
 10554                           ;tmr3.c: 71: TMR3H = 0xE0;
 10555  00F42E  0EE0               	movlw	224
 10556  00F430  6EB3               	movwf	179,c	;volatile
 10557                           
 10558                           ;tmr3.c: 74: TMR3L = 0x00;
 10559  00F432  0E00               	movlw	0
 10560  00F434  6EB2               	movwf	178,c	;volatile
 10561                           
 10562                           ; BSR set to: 15
 10563                           ;tmr3.c: 77: timer3ReloadVal=TMR3;
 10564  00F436  CFB2 F380          	movff	4018,_timer3ReloadVal	;volatile
 10565  00F43A  CFB3 F381          	movff	4019,_timer3ReloadVal+1	;volatile
 10566                           
 10567                           ; BSR set to: 15
 10568                           ;tmr3.c: 80: PIR2bits.TMR3IF = 0;
 10569  00F43E  92A1               	bcf	161,1,c	;volatile
 10570                           
 10571                           ;tmr3.c: 83: T3CON = 0x31;
 10572  00F440  0E31               	movlw	49
 10573  00F442  6EB1               	movwf	177,c	;volatile
 10574                           
 10575                           ; BSR set to: 15
 10576  00F444  0012               	return		;funcret
 10577  00F446                     __end_of_TMR3_Initialize:
 10578                           	callstack 0
 10579                           
 10580 ;; *************** function _TMR2_Initialize *****************
 10581 ;; Defined at:
 10582 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 10583 ;; Parameters:    Size  Location     Type
 10584 ;;		None
 10585 ;; Auto vars:     Size  Location     Type
 10586 ;;		None
 10587 ;; Return value:  Size  Location     Type
 10588 ;;                  1    wreg      void 
 10589 ;; Registers used:
 10590 ;;		wreg, status,2
 10591 ;; Tracked objects:
 10592 ;;		On entry : 3F/F
 10593 ;;		On exit  : 3F/F
 10594 ;;		Unchanged: 3E/0
 10595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10600 ;;Total ram usage:        0 bytes
 10601 ;; Hardware stack levels used:    1
 10602 ;; Hardware stack levels required when called:    6
 10603 ;; This function calls:
 10604 ;;		Nothing
 10605 ;; This function is called by:
 10606 ;;		_SYSTEM_Initialize
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           	psect	text17
 10611  00F5FA                     __ptext17:
 10612                           	callstack 0
 10613  00F5FA                     _TMR2_Initialize:
 10614                           	callstack 23
 10615                           
 10616                           ; BSR set to: 15
 10617                           ;tmr2.c: 67: PR2 = 0xF9;
 10618                           
 10619                           ; BSR set to: 15
 10620                           ;incstack = 0
 10621  00F5FA  0EF9               	movlw	249
 10622  00F5FC  6EBB               	movwf	187,c	;volatile
 10623                           
 10624                           ;tmr2.c: 70: TMR2 = 0x00;
 10625  00F5FE  0E00               	movlw	0
 10626  00F600  6EBC               	movwf	188,c	;volatile
 10627                           
 10628                           ; BSR set to: 15
 10629                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
 10630  00F602  929E               	bcf	158,1,c	;volatile
 10631                           
 10632                           ;tmr2.c: 76: T2CON = 0x02;
 10633  00F604  0E02               	movlw	2
 10634  00F606  6EBA               	movwf	186,c	;volatile
 10635                           
 10636                           ; BSR set to: 15
 10637  00F608  0012               	return		;funcret
 10638  00F60A                     __end_of_TMR2_Initialize:
 10639                           	callstack 0
 10640                           
 10641 ;; *************** function _TMR1_Initialize *****************
 10642 ;; Defined at:
 10643 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 10644 ;; Parameters:    Size  Location     Type
 10645 ;;		None
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;		None
 10648 ;; Return value:  Size  Location     Type
 10649 ;;                  1    wreg      void 
 10650 ;; Registers used:
 10651 ;;		wreg, status,2, status,0, cstack
 10652 ;; Tracked objects:
 10653 ;;		On entry : 3F/F
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10661 ;;Total ram usage:        0 bytes
 10662 ;; Hardware stack levels used:    1
 10663 ;; Hardware stack levels required when called:    7
 10664 ;; This function calls:
 10665 ;;		_TMR1_SetInterruptHandler
 10666 ;; This function is called by:
 10667 ;;		_SYSTEM_Initialize
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           	psect	text18
 10672  00F0BA                     __ptext18:
 10673                           	callstack 0
 10674  00F0BA                     _TMR1_Initialize:
 10675                           	callstack 22
 10676                           
 10677                           ; BSR set to: 15
 10678                           ;tmr1.c: 69: T1GCON = 0x00;
 10679                           
 10680                           ; BSR set to: 15
 10681                           ;incstack = 0
 10682  00F0BA  0E00               	movlw	0
 10683  00F0BC  6ECC               	movwf	204,c	;volatile
 10684                           
 10685                           ;tmr1.c: 72: TMR1H = 0xFC;
 10686  00F0BE  0EFC               	movlw	252
 10687  00F0C0  6ECF               	movwf	207,c	;volatile
 10688                           
 10689                           ;tmr1.c: 75: TMR1L = 0xE0;
 10690  00F0C2  0EE0               	movlw	224
 10691  00F0C4  6ECE               	movwf	206,c	;volatile
 10692                           
 10693                           ; BSR set to: 15
 10694                           ;tmr1.c: 78: timer1ReloadVal=TMR1;
 10695  00F0C6  CFCE F37E          	movff	4046,_timer1ReloadVal	;volatile
 10696  00F0CA  CFCF F37F          	movff	4047,_timer1ReloadVal+1	;volatile
 10697                           
 10698                           ; BSR set to: 15
 10699                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
 10700  00F0CE  909E               	bcf	158,0,c	;volatile
 10701                           
 10702                           ; BSR set to: 15
 10703                           ;tmr1.c: 84: PIE1bits.TMR1IE = 1;
 10704  00F0D0  809D               	bsf	157,0,c	;volatile
 10705                           
 10706                           ; BSR set to: 15
 10707                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 10708  00F0D2  0E58               	movlw	low _TMR1_DefaultInterruptHandler
 10709  00F0D4  6E0E               	movwf	TMR1_SetInterruptHandler@InterruptHandler^0,c
 10710  00F0D6  0EF8               	movlw	high _TMR1_DefaultInterruptHandler
 10711  00F0D8  6E0F               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)^0,c
 10712  00F0DA  EC62  F07B         	call	_TMR1_SetInterruptHandler	;wreg free
 10713                           
 10714                           ;tmr1.c: 90: T1CON = 0x11;
 10715  00F0DE  0E11               	movlw	17
 10716  00F0E0  6ECD               	movwf	205,c	;volatile
 10717  00F0E2  0012               	return		;funcret
 10718  00F0E4                     __end_of_TMR1_Initialize:
 10719                           	callstack 0
 10720                           
 10721 ;; *************** function _TMR1_SetInterruptHandler *****************
 10722 ;; Defined at:
 10723 ;;		line 172 in file "mcc_generated_files/tmr1.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;  InterruptHan    2   13[COMRAM] PTR FTN()void 
 10726 ;;		 -> RotaryHandler(1), TMR1_DefaultInterruptHandler(1), 
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;		None
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  1    wreg      void 
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, status,0
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/2
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10738 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10741 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10742 ;;Total ram usage:        2 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    6
 10745 ;; This function calls:
 10746 ;;		Nothing
 10747 ;; This function is called by:
 10748 ;;		_TMR1_Initialize
 10749 ;;		_main
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           	psect	text19
 10754  00F6C4                     __ptext19:
 10755                           	callstack 0
 10756  00F6C4                     _TMR1_SetInterruptHandler:
 10757                           	callstack 24
 10758                           
 10759                           ;tmr1.c: 173: TMR1_InterruptHandler = InterruptHandler;
 10760                           
 10761                           ;incstack = 0
 10762  00F6C4  C00E  F37C         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
 10763  00F6C8  C00F  F37D         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
 10764  00F6CC  0012               	return		;funcret
 10765  00F6CE                     __end_of_TMR1_SetInterruptHandler:
 10766                           	callstack 0
 10767                           
 10768 ;; *************** function _TMR0_Initialize *****************
 10769 ;; Defined at:
 10770 ;;		line 67 in file "mcc_generated_files/tmr0.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;		None
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;		None
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		wreg, status,2, status,0, cstack
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/F
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10786 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10787 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10788 ;;Total ram usage:        2 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:    7
 10791 ;; This function calls:
 10792 ;;		_TMR0_SetInterruptHandler
 10793 ;; This function is called by:
 10794 ;;		_SYSTEM_Initialize
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           	psect	text20
 10799  00ED9C                     __ptext20:
 10800                           	callstack 0
 10801  00ED9C                     _TMR0_Initialize:
 10802                           	callstack 22
 10803                           
 10804                           ;tmr0.c: 72: T0CONbits.T08BIT = 0;
 10805                           
 10806                           ;incstack = 0
 10807  00ED9C  9CD5               	bcf	213,6,c	;volatile
 10808                           
 10809                           ;tmr0.c: 75: TMR0H = 0xFD;
 10810  00ED9E  0EFD               	movlw	253
 10811  00EDA0  6ED7               	movwf	215,c	;volatile
 10812                           
 10813                           ;tmr0.c: 78: TMR0L = 0x8E;
 10814  00EDA2  0E8E               	movlw	142
 10815  00EDA4  6ED6               	movwf	214,c	;volatile
 10816                           
 10817                           ;tmr0.c: 82: timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
 10818  00EDA6  50D6               	movf	214,w,c	;volatile
 10819  00EDA8  CFD7 F010          	movff	4055,??_TMR0_Initialize	;volatile
 10820  00EDAC  6A11               	clrf	(??_TMR0_Initialize+1)^0,c
 10821  00EDAE  C010  F011         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 10822  00EDB2  6A10               	clrf	??_TMR0_Initialize^0,c
 10823  00EDB4  1010               	iorwf	??_TMR0_Initialize^0,w,c
 10824  00EDB6  6E46               	movwf	_timer0ReloadVal^0,c	;volatile
 10825  00EDB8  5011               	movf	(??_TMR0_Initialize+1)^0,w,c
 10826  00EDBA  6E47               	movwf	(_timer0ReloadVal+1)^0,c	;volatile
 10827                           
 10828                           ;tmr0.c: 85: INTCONbits.TMR0IF = 0;
 10829  00EDBC  94F2               	bcf	242,2,c	;volatile
 10830                           
 10831                           ;tmr0.c: 88: INTCONbits.TMR0IE = 1;
 10832  00EDBE  8AF2               	bsf	242,5,c	;volatile
 10833                           
 10834                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 10835  00EDC0  0E5A               	movlw	low _TMR0_DefaultInterruptHandler
 10836  00EDC2  6E0E               	movwf	TMR0_SetInterruptHandler@InterruptHandler^0,c
 10837  00EDC4  0EF8               	movlw	high _TMR0_DefaultInterruptHandler
 10838  00EDC6  6E0F               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)^0,c
 10839  00EDC8  EC99  F07B         	call	_TMR0_SetInterruptHandler	;wreg free
 10840                           
 10841                           ;tmr0.c: 94: T0CON = 0x97;
 10842  00EDCC  0E97               	movlw	151
 10843  00EDCE  6ED5               	movwf	213,c	;volatile
 10844  00EDD0  0012               	return		;funcret
 10845  00EDD2                     __end_of_TMR0_Initialize:
 10846                           	callstack 0
 10847                           
 10848 ;; *************** function _SPI1_Initialize *****************
 10849 ;; Defined at:
 10850 ;;		line 66 in file "mcc_generated_files/spi1.c"
 10851 ;; Parameters:    Size  Location     Type
 10852 ;;		None
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;		None
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  1    wreg      void 
 10857 ;; Registers used:
 10858 ;;		wreg, status,2
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;Total ram usage:        0 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    6
 10871 ;; This function calls:
 10872 ;;		Nothing
 10873 ;; This function is called by:
 10874 ;;		_SYSTEM_Initialize
 10875 ;; This function uses a non-reentrant model
 10876 ;;
 10877                           
 10878                           	psect	text21
 10879  00F56E                     __ptext21:
 10880                           	callstack 0
 10881  00F56E                     _SPI1_Initialize:
 10882                           	callstack 23
 10883                           
 10884                           ;spi1.c: 69: SSP1STAT = 0x40;
 10885                           
 10886                           ;incstack = 0
 10887  00F56E  0E40               	movlw	64
 10888  00F570  6EC7               	movwf	199,c	;volatile
 10889                           
 10890                           ;spi1.c: 70: SSP1CON1 = 0x0A;
 10891  00F572  0E0A               	movlw	10
 10892  00F574  6EC6               	movwf	198,c	;volatile
 10893                           
 10894                           ;spi1.c: 71: SSP1ADD = 0x01;
 10895  00F576  0E01               	movlw	1
 10896  00F578  6EC8               	movwf	200,c	;volatile
 10897                           
 10898                           ;spi1.c: 72: TRISCbits.TRISC3 = 0;
 10899  00F57A  9694               	bcf	148,3,c	;volatile
 10900                           
 10901                           ;spi1.c: 73: SSP1CON1bits.SSPEN = 0;
 10902  00F57C  9AC6               	bcf	198,5,c	;volatile
 10903  00F57E  0012               	return		;funcret
 10904  00F580                     __end_of_SPI1_Initialize:
 10905                           	callstack 0
 10906                           
 10907 ;; *************** function _PIN_MANAGER_Initialize *****************
 10908 ;; Defined at:
 10909 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 10910 ;; Parameters:    Size  Location     Type
 10911 ;;		None
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;		None
 10914 ;; Return value:  Size  Location     Type
 10915 ;;                  1    wreg      void 
 10916 ;; Registers used:
 10917 ;;		wreg, status,2, status,0, cstack
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10927 ;;Total ram usage:        0 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; Hardware stack levels required when called:    7
 10930 ;; This function calls:
 10931 ;;		_IOCB4_SetInterruptHandler
 10932 ;; This function is called by:
 10933 ;;		_SYSTEM_Initialize
 10934 ;; This function uses a non-reentrant model
 10935 ;;
 10936                           
 10937                           	psect	text22
 10938  00EB88                     __ptext22:
 10939                           	callstack 0
 10940  00EB88                     _PIN_MANAGER_Initialize:
 10941                           	callstack 22
 10942                           
 10943                           ;pin_manager.c: 62: LATA = 0x61;
 10944                           
 10945                           ;incstack = 0
 10946  00EB88  0E61               	movlw	97
 10947  00EB8A  6E89               	movwf	137,c	;volatile
 10948                           
 10949                           ;pin_manager.c: 63: LATB = 0x10;
 10950  00EB8C  0E10               	movlw	16
 10951  00EB8E  6E8A               	movwf	138,c	;volatile
 10952                           
 10953                           ;pin_manager.c: 64: LATC = 0x04;
 10954  00EB90  0E04               	movlw	4
 10955  00EB92  6E8B               	movwf	139,c	;volatile
 10956                           
 10957                           ;pin_manager.c: 69: TRISA = 0x98;
 10958  00EB94  0E98               	movlw	152
 10959  00EB96  6E92               	movwf	146,c	;volatile
 10960                           
 10961                           ;pin_manager.c: 70: TRISB = 0xF7;
 10962  00EB98  0EF7               	movlw	247
 10963  00EB9A  6E93               	movwf	147,c	;volatile
 10964                           
 10965                           ;pin_manager.c: 71: TRISC = 0xD3;
 10966  00EB9C  0ED3               	movlw	211
 10967  00EB9E  6E94               	movwf	148,c	;volatile
 10968                           
 10969                           ;pin_manager.c: 76: ANSELC = 0x40;
 10970  00EBA0  0E40               	movlw	64
 10971  00EBA2  010F               	movlb	15	; () banked
 10972  00EBA4  6F3A               	movwf	58,b	;volatile
 10973                           
 10974                           ;pin_manager.c: 77: ANSELB = 0x00;
 10975  00EBA6  0E00               	movlw	0
 10976  00EBA8  6F39               	movwf	57,b	;volatile
 10977                           
 10978                           ;pin_manager.c: 78: ANSELA = 0x08;
 10979  00EBAA  0E08               	movlw	8
 10980  00EBAC  6F38               	movwf	56,b	;volatile
 10981                           
 10982                           ;pin_manager.c: 83: WPUB = 0x10;
 10983  00EBAE  0E10               	movlw	16
 10984  00EBB0  6E61               	movwf	97,c	;volatile
 10985                           
 10986                           ; BSR set to: 15
 10987                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
 10988  00EBB2  9EF1               	bcf	241,7,c	;volatile
 10989                           
 10990                           ; BSR set to: 15
 10991                           ;pin_manager.c: 92: IOCBbits.IOCB4 = 1;
 10992  00EBB4  8862               	bsf	98,4,c	;volatile
 10993                           
 10994                           ; BSR set to: 15
 10995                           ;pin_manager.c: 97: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
 10996  00EBB6  0E5C               	movlw	low _IOCB4_DefaultInterruptHandler
 10997  00EBB8  6E0E               	movwf	IOCB4_SetInterruptHandler@InterruptHandler^0,c
 10998  00EBBA  0EF8               	movlw	high _IOCB4_DefaultInterruptHandler
 10999  00EBBC  6E0F               	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)^0,c
 11000  00EBBE  EC67  F07B         	call	_IOCB4_SetInterruptHandler	;wreg free
 11001                           
 11002                           ;pin_manager.c: 100: INTCONbits.RBIE = 1;
 11003  00EBC2  86F2               	bsf	242,3,c	;volatile
 11004  00EBC4  0012               	return		;funcret
 11005  00EBC6                     __end_of_PIN_MANAGER_Initialize:
 11006                           	callstack 0
 11007                           
 11008 ;; *************** function _IOCB4_SetInterruptHandler *****************
 11009 ;; Defined at:
 11010 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 11011 ;; Parameters:    Size  Location     Type
 11012 ;;  InterruptHan    2   13[COMRAM] PTR FTN()void 
 11013 ;;		 -> AlarmWHandler(1), IOCB4_DefaultInterruptHandler(1), 
 11014 ;; Auto vars:     Size  Location     Type
 11015 ;;		None
 11016 ;; Return value:  Size  Location     Type
 11017 ;;                  1    wreg      void 
 11018 ;; Registers used:
 11019 ;;		wreg, status,2, status,0
 11020 ;; Tracked objects:
 11021 ;;		On entry : 0/2
 11022 ;;		On exit  : 0/0
 11023 ;;		Unchanged: 0/0
 11024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11025 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11028 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11029 ;;Total ram usage:        2 bytes
 11030 ;; Hardware stack levels used:    1
 11031 ;; Hardware stack levels required when called:    6
 11032 ;; This function calls:
 11033 ;;		Nothing
 11034 ;; This function is called by:
 11035 ;;		_PIN_MANAGER_Initialize
 11036 ;;		_main
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           	psect	text23
 11041  00F6CE                     __ptext23:
 11042                           	callstack 0
 11043  00F6CE                     _IOCB4_SetInterruptHandler:
 11044                           	callstack 22
 11045                           
 11046                           ;pin_manager.c: 133: IOCB4_InterruptHandler = InterruptHandler;
 11047                           
 11048                           ;incstack = 0
 11049  00F6CE  C00E  F3FD         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
 11050  00F6D2  C00F  F3FE         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
 11051  00F6D6  0012               	return		;funcret
 11052  00F6D8                     __end_of_IOCB4_SetInterruptHandler:
 11053                           	callstack 0
 11054                           
 11055 ;; *************** function _OSCILLATOR_Initialize *****************
 11056 ;; Defined at:
 11057 ;;		line 72 in file "mcc_generated_files/mcc.c"
 11058 ;; Parameters:    Size  Location     Type
 11059 ;;		None
 11060 ;; Auto vars:     Size  Location     Type
 11061 ;;		None
 11062 ;; Return value:  Size  Location     Type
 11063 ;;                  1    wreg      void 
 11064 ;; Registers used:
 11065 ;;		wreg, status,2
 11066 ;; Tracked objects:
 11067 ;;		On entry : 0/0
 11068 ;;		On exit  : 0/0
 11069 ;;		Unchanged: 0/0
 11070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;Total ram usage:        0 bytes
 11076 ;; Hardware stack levels used:    1
 11077 ;; Hardware stack levels required when called:    6
 11078 ;; This function calls:
 11079 ;;		Nothing
 11080 ;; This function is called by:
 11081 ;;		_SYSTEM_Initialize
 11082 ;; This function uses a non-reentrant model
 11083 ;;
 11084                           
 11085                           	psect	text24
 11086  00F580                     __ptext24:
 11087                           	callstack 0
 11088  00F580                     _OSCILLATOR_Initialize:
 11089                           	callstack 23
 11090                           
 11091                           ;mcc.c: 75: OSCCON = 0x70;
 11092                           
 11093                           ;incstack = 0
 11094  00F580  0E70               	movlw	112
 11095  00F582  6ED3               	movwf	211,c	;volatile
 11096                           
 11097                           ;mcc.c: 77: OSCCON2 = 0x04;
 11098  00F584  0E04               	movlw	4
 11099  00F586  6ED2               	movwf	210,c	;volatile
 11100                           
 11101                           ;mcc.c: 79: OSCTUNE = 0x40;
 11102  00F588  0E40               	movlw	64
 11103  00F58A  6E9B               	movwf	155,c	;volatile
 11104  00F58C                     l1261:
 11105  00F58C  BED2               	btfsc	4050,7,c	;volatile
 11106  00F58E  0012               	return	
 11107  00F590  D7FD               	goto	l1261
 11108  00F592                     __end_of_OSCILLATOR_Initialize:
 11109                           	callstack 0
 11110                           
 11111 ;; *************** function _INTERRUPT_Initialize *****************
 11112 ;; Defined at:
 11113 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;		None
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;		None
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  1    wreg      void 
 11120 ;; Registers used:
 11121 ;;		None
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11131 ;;Total ram usage:        0 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:    6
 11134 ;; This function calls:
 11135 ;;		Nothing
 11136 ;; This function is called by:
 11137 ;;		_SYSTEM_Initialize
 11138 ;; This function uses a non-reentrant model
 11139 ;;
 11140                           
 11141                           	psect	text25
 11142  00F7F2                     __ptext25:
 11143                           	callstack 0
 11144  00F7F2                     _INTERRUPT_Initialize:
 11145                           	callstack 23
 11146                           
 11147                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
 11148                           
 11149                           ;incstack = 0
 11150  00F7F2  9ED0               	bcf	208,7,c	;volatile
 11151  00F7F4  0012               	return		;funcret
 11152  00F7F6                     __end_of_INTERRUPT_Initialize:
 11153                           	callstack 0
 11154                           
 11155 ;; *************** function _I2C2_Initialize *****************
 11156 ;; Defined at:
 11157 ;;		line 167 in file "mcc_generated_files/i2c2_master.c"
 11158 ;; Parameters:    Size  Location     Type
 11159 ;;		None
 11160 ;; Auto vars:     Size  Location     Type
 11161 ;;		None
 11162 ;; Return value:  Size  Location     Type
 11163 ;;                  1    wreg      void 
 11164 ;; Registers used:
 11165 ;;		wreg, status,2
 11166 ;; Tracked objects:
 11167 ;;		On entry : 0/0
 11168 ;;		On exit  : 0/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;Total ram usage:        0 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; Hardware stack levels required when called:    6
 11178 ;; This function calls:
 11179 ;;		Nothing
 11180 ;; This function is called by:
 11181 ;;		_SYSTEM_Initialize
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           	psect	text26
 11186  00F51E                     __ptext26:
 11187                           	callstack 0
 11188  00F51E                     _I2C2_Initialize:
 11189                           	callstack 23
 11190                           
 11191                           ;i2c2_master.c: 169: SSP2STAT = 0x00;
 11192                           
 11193                           ;incstack = 0
 11194  00F51E  0E00               	movlw	0
 11195  00F520  6E6D               	movwf	109,c	;volatile
 11196                           
 11197                           ;i2c2_master.c: 170: SSP2CON1 = 0x08;
 11198  00F522  0E08               	movlw	8
 11199  00F524  6E6C               	movwf	108,c	;volatile
 11200                           
 11201                           ;i2c2_master.c: 171: SSP2CON2 = 0x00;
 11202  00F526  0E00               	movlw	0
 11203  00F528  6E6B               	movwf	107,c	;volatile
 11204                           
 11205                           ;i2c2_master.c: 172: SSP2ADD = 0x9F;
 11206  00F52A  0E9F               	movlw	159
 11207  00F52C  6E6E               	movwf	110,c	;volatile
 11208                           
 11209                           ;i2c2_master.c: 173: SSP2CON1bits.SSPEN = 0;
 11210  00F52E  9A6C               	bcf	108,5,c	;volatile
 11211  00F530  0012               	return		;funcret
 11212  00F532                     __end_of_I2C2_Initialize:
 11213                           	callstack 0
 11214                           
 11215 ;; *************** function _EXT_INT_Initialize *****************
 11216 ;; Defined at:
 11217 ;;		line 59 in file "mcc_generated_files/ext_int.c"
 11218 ;; Parameters:    Size  Location     Type
 11219 ;;		None
 11220 ;; Auto vars:     Size  Location     Type
 11221 ;;		None
 11222 ;; Return value:  Size  Location     Type
 11223 ;;                  1    wreg      void 
 11224 ;; Registers used:
 11225 ;;		wreg, status,2, status,0, cstack
 11226 ;; Tracked objects:
 11227 ;;		On entry : 3F/F
 11228 ;;		On exit  : 0/0
 11229 ;;		Unchanged: 0/0
 11230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11235 ;;Total ram usage:        0 bytes
 11236 ;; Hardware stack levels used:    1
 11237 ;; Hardware stack levels required when called:    7
 11238 ;; This function calls:
 11239 ;;		_INT0_SetInterruptHandler
 11240 ;; This function is called by:
 11241 ;;		_SYSTEM_Initialize
 11242 ;; This function uses a non-reentrant model
 11243 ;;
 11244                           
 11245                           	psect	text27
 11246  00F532                     __ptext27:
 11247                           	callstack 0
 11248  00F532                     _EXT_INT_Initialize:
 11249                           	callstack 22
 11250                           
 11251                           ; BSR set to: 15
 11252                           ;ext_int.c: 64: (INTCONbits.INT0IF = 0);
 11253                           
 11254                           ;incstack = 0
 11255  00F532  92F2               	bcf	242,1,c	;volatile
 11256                           
 11257                           ;ext_int.c: 65: (INTCON2bits.INTEDG0 = 0);
 11258  00F534  9CF1               	bcf	241,6,c	;volatile
 11259                           
 11260                           ; BSR set to: 15
 11261                           ;ext_int.c: 67: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
 11262  00F536  0E5E               	movlw	low _INT0_DefaultInterruptHandler
 11263  00F538  6E0E               	movwf	INT0_SetInterruptHandler@InterruptHandler^0,c
 11264  00F53A  0EF8               	movlw	high _INT0_DefaultInterruptHandler
 11265  00F53C  6E0F               	movwf	(INT0_SetInterruptHandler@InterruptHandler+1)^0,c
 11266  00F53E  EC6C  F07B         	call	_INT0_SetInterruptHandler	;wreg free
 11267                           
 11268                           ;ext_int.c: 68: (INTCONbits.INT0IE = 1);
 11269  00F542  88F2               	bsf	242,4,c	;volatile
 11270  00F544  0012               	return		;funcret
 11271  00F546                     __end_of_EXT_INT_Initialize:
 11272                           	callstack 0
 11273                           
 11274 ;; *************** function _INT0_SetInterruptHandler *****************
 11275 ;; Defined at:
 11276 ;;		line 50 in file "mcc_generated_files/ext_int.c"
 11277 ;; Parameters:    Size  Location     Type
 11278 ;;  InterruptHan    2   13[COMRAM] PTR FTN()void 
 11279 ;;		 -> RTC_handler(1), INT0_DefaultInterruptHandler(1), 
 11280 ;; Auto vars:     Size  Location     Type
 11281 ;;		None
 11282 ;; Return value:  Size  Location     Type
 11283 ;;                  1    wreg      void 
 11284 ;; Registers used:
 11285 ;;		wreg, status,2, status,0
 11286 ;; Tracked objects:
 11287 ;;		On entry : 0/2
 11288 ;;		On exit  : 0/0
 11289 ;;		Unchanged: 0/0
 11290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11291 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11294 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11295 ;;Total ram usage:        2 bytes
 11296 ;; Hardware stack levels used:    1
 11297 ;; Hardware stack levels required when called:    6
 11298 ;; This function calls:
 11299 ;;		Nothing
 11300 ;; This function is called by:
 11301 ;;		_EXT_INT_Initialize
 11302 ;;		_main
 11303 ;; This function uses a non-reentrant model
 11304 ;;
 11305                           
 11306                           	psect	text28
 11307  00F6D8                     __ptext28:
 11308                           	callstack 0
 11309  00F6D8                     _INT0_SetInterruptHandler:
 11310                           	callstack 22
 11311                           
 11312                           ;ext_int.c: 51: INT0_InterruptHandler = InterruptHandler;
 11313                           
 11314                           ;incstack = 0
 11315  00F6D8  C00E  F38C         	movff	INT0_SetInterruptHandler@InterruptHandler,_INT0_InterruptHandler
 11316  00F6DC  C00F  F38D         	movff	INT0_SetInterruptHandler@InterruptHandler+1,_INT0_InterruptHandler+1
 11317  00F6E0  0012               	return		;funcret
 11318  00F6E2                     __end_of_INT0_SetInterruptHandler:
 11319                           	callstack 0
 11320                           
 11321 ;; *************** function _EUSART1_Initialize *****************
 11322 ;; Defined at:
 11323 ;;		line 83 in file "mcc_generated_files/eusart1.c"
 11324 ;; Parameters:    Size  Location     Type
 11325 ;;		None
 11326 ;; Auto vars:     Size  Location     Type
 11327 ;;		None
 11328 ;; Return value:  Size  Location     Type
 11329 ;;                  1    wreg      void 
 11330 ;; Registers used:
 11331 ;;		wreg, status,2, status,0, cstack
 11332 ;; Tracked objects:
 11333 ;;		On entry : 0/F
 11334 ;;		On exit  : 3F/2
 11335 ;;		Unchanged: 0/0
 11336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11341 ;;Total ram usage:        0 bytes
 11342 ;; Hardware stack levels used:    1
 11343 ;; Hardware stack levels required when called:    7
 11344 ;; This function calls:
 11345 ;;		_EUSART1_SetErrorHandler
 11346 ;;		_EUSART1_SetFramingErrorHandler
 11347 ;;		_EUSART1_SetOverrunErrorHandler
 11348 ;;		_EUSART1_SetRxInterruptHandler
 11349 ;; This function is called by:
 11350 ;;		_SYSTEM_Initialize
 11351 ;; This function uses a non-reentrant model
 11352 ;;
 11353                           
 11354                           	psect	text29
 11355  00E152                     __ptext29:
 11356                           	callstack 0
 11357  00E152                     _EUSART1_Initialize:
 11358                           	callstack 22
 11359                           
 11360                           ;eusart1.c: 86: PIE1bits.RC1IE = 0;
 11361                           
 11362                           ;incstack = 0
 11363  00E152  9A9D               	bcf	157,5,c	;volatile
 11364                           
 11365                           ;eusart1.c: 87: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
 11366  00E154  0EB2               	movlw	low _EUSART1_Receive_ISR
 11367  00E156  6E0E               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler^0,c
 11368  00E158  0ED4               	movlw	high _EUSART1_Receive_ISR
 11369  00E15A  6E0F               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+1)^0,c
 11370  00E15C  EC71  F07B         	call	_EUSART1_SetRxInterruptHandler	;wreg free
 11371                           
 11372                           ;eusart1.c: 91: BAUDCON1 = 0x08;
 11373  00E160  0E08               	movlw	8
 11374  00E162  6EB8               	movwf	184,c	;volatile
 11375                           
 11376                           ;eusart1.c: 94: RCSTA1 = 0x90;
 11377  00E164  0E90               	movlw	144
 11378  00E166  6EAB               	movwf	171,c	;volatile
 11379                           
 11380                           ;eusart1.c: 97: TXSTA1 = 0x04;
 11381  00E168  0E04               	movlw	4
 11382  00E16A  6EAC               	movwf	172,c	;volatile
 11383                           
 11384                           ;eusart1.c: 100: SPBRG1 = 0x82;
 11385  00E16C  0E82               	movlw	130
 11386  00E16E  6EAF               	movwf	175,c	;volatile
 11387                           
 11388                           ;eusart1.c: 103: SPBRGH1 = 0x06;
 11389  00E170  0E06               	movlw	6
 11390  00E172  6EB0               	movwf	176,c	;volatile
 11391                           
 11392                           ;eusart1.c: 106: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
 11393  00E174  0E60               	movlw	low _EUSART1_DefaultFramingErrorHandler
 11394  00E176  6E0E               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler^0,c
 11395  00E178  0EF8               	movlw	high _EUSART1_DefaultFramingErrorHandler
 11396  00E17A  6E0F               	movwf	(EUSART1_SetFramingErrorHandler@interruptHandler+1)^0,c
 11397  00E17C  EC7B  F07B         	call	_EUSART1_SetFramingErrorHandler	;wreg free
 11398                           
 11399                           ;eusart1.c: 107: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
 11400  00E180  0EE6               	movlw	low _EUSART1_DefaultOverrunErrorHandler
 11401  00E182  6E0E               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler^0,c
 11402  00E184  0EF7               	movlw	high _EUSART1_DefaultOverrunErrorHandler
 11403  00E186  6E0F               	movwf	(EUSART1_SetOverrunErrorHandler@interruptHandler+1)^0,c
 11404  00E188  EC76  F07B         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
 11405                           
 11406                           ;eusart1.c: 108: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
 11407  00E18C  0EEC               	movlw	low _EUSART1_DefaultErrorHandler
 11408  00E18E  6E0E               	movwf	EUSART1_SetErrorHandler@interruptHandler^0,c
 11409  00E190  0EF7               	movlw	high _EUSART1_DefaultErrorHandler
 11410  00E192  6E0F               	movwf	(EUSART1_SetErrorHandler@interruptHandler+1)^0,c
 11411  00E194  EC80  F07B         	call	_EUSART1_SetErrorHandler	;wreg free
 11412                           
 11413                           ;eusart1.c: 110: eusart1RxLastError.status = 0;
 11414  00E198  0E00               	movlw	0
 11415  00E19A  0103               	movlb	3	; () banked
 11416  00E19C  6FA6               	movwf	_eusart1RxLastError& (0+255),b	;volatile
 11417                           
 11418                           ;eusart1.c: 113: eusart1RxHead = 0;
 11419  00E19E  0E00               	movlw	0
 11420  00E1A0  6E4B               	movwf	_eusart1RxHead^0,c	;volatile
 11421                           
 11422                           ;eusart1.c: 114: eusart1RxTail = 0;
 11423  00E1A2  0E00               	movlw	0
 11424  00E1A4  6E4A               	movwf	_eusart1RxTail^0,c	;volatile
 11425                           
 11426                           ;eusart1.c: 115: eusart1RxCount = 0;
 11427  00E1A6  0E00               	movlw	0
 11428  00E1A8  0102               	movlb	2	; () banked
 11429  00E1AA  6FE4               	movwf	_eusart1RxCount& (0+255),b	;volatile
 11430                           
 11431                           ; BSR set to: 2
 11432                           ;eusart1.c: 118: PIE1bits.RC1IE = 1;
 11433  00E1AC  8A9D               	bsf	157,5,c	;volatile
 11434                           
 11435                           ; BSR set to: 2
 11436  00E1AE  0012               	return		;funcret
 11437  00E1B0                     __end_of_EUSART1_Initialize:
 11438                           	callstack 0
 11439                           
 11440 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
 11441 ;; Defined at:
 11442 ;;		line 234 in file "mcc_generated_files/eusart1.c"
 11443 ;; Parameters:    Size  Location     Type
 11444 ;;  interruptHan    2   13[COMRAM] PTR FTN()void 
 11445 ;;		 -> EUSART1_Receive_ISR(1), 
 11446 ;; Auto vars:     Size  Location     Type
 11447 ;;		None
 11448 ;; Return value:  Size  Location     Type
 11449 ;;                  1    wreg      void 
 11450 ;; Registers used:
 11451 ;;		wreg, status,2, status,0
 11452 ;; Tracked objects:
 11453 ;;		On entry : 0/F
 11454 ;;		On exit  : 0/0
 11455 ;;		Unchanged: 0/0
 11456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11457 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11460 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;Total ram usage:        2 bytes
 11462 ;; Hardware stack levels used:    1
 11463 ;; Hardware stack levels required when called:    6
 11464 ;; This function calls:
 11465 ;;		Nothing
 11466 ;; This function is called by:
 11467 ;;		_EUSART1_Initialize
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           	psect	text30
 11472  00F6E2                     __ptext30:
 11473                           	callstack 0
 11474  00F6E2                     _EUSART1_SetRxInterruptHandler:
 11475                           	callstack 22
 11476                           
 11477                           ;eusart1.c: 235: EUSART1_RxDefaultInterruptHandler = interruptHandler;
 11478                           
 11479                           ; BSR set to: 2
 11480                           ;incstack = 0
 11481  00F6E2  C00E  F38E         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
 11482  00F6E6  C00F  F38F         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
 11483  00F6EA  0012               	return		;funcret
 11484  00F6EC                     __end_of_EUSART1_SetRxInterruptHandler:
 11485                           	callstack 0
 11486                           
 11487 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
 11488 ;; Defined at:
 11489 ;;		line 225 in file "mcc_generated_files/eusart1.c"
 11490 ;; Parameters:    Size  Location     Type
 11491 ;;  interruptHan    2   13[COMRAM] PTR FTN()void 
 11492 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
 11493 ;; Auto vars:     Size  Location     Type
 11494 ;;		None
 11495 ;; Return value:  Size  Location     Type
 11496 ;;                  1    wreg      void 
 11497 ;; Registers used:
 11498 ;;		wreg, status,2, status,0
 11499 ;; Tracked objects:
 11500 ;;		On entry : 0/F
 11501 ;;		On exit  : 0/0
 11502 ;;		Unchanged: 0/0
 11503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11507 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11508 ;;Total ram usage:        2 bytes
 11509 ;; Hardware stack levels used:    1
 11510 ;; Hardware stack levels required when called:    6
 11511 ;; This function calls:
 11512 ;;		Nothing
 11513 ;; This function is called by:
 11514 ;;		_EUSART1_Initialize
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           	psect	text31
 11519  00F6EC                     __ptext31:
 11520                           	callstack 0
 11521  00F6EC                     _EUSART1_SetOverrunErrorHandler:
 11522                           	callstack 22
 11523                           
 11524                           ;eusart1.c: 226: EUSART1_OverrunErrorHandler = interruptHandler;
 11525                           
 11526                           ;incstack = 0
 11527  00F6EC  C00E  F388         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
 11528  00F6F0  C00F  F389         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
 11529  00F6F4  0012               	return		;funcret
 11530  00F6F6                     __end_of_EUSART1_SetOverrunErrorHandler:
 11531                           	callstack 0
 11532                           
 11533 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
 11534 ;; Defined at:
 11535 ;;		line 221 in file "mcc_generated_files/eusart1.c"
 11536 ;; Parameters:    Size  Location     Type
 11537 ;;  interruptHan    2   13[COMRAM] PTR FTN()void 
 11538 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;		None
 11541 ;; Return value:  Size  Location     Type
 11542 ;;                  1    wreg      void 
 11543 ;; Registers used:
 11544 ;;		wreg, status,2, status,0
 11545 ;; Tracked objects:
 11546 ;;		On entry : 0/F
 11547 ;;		On exit  : 0/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11550 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11554 ;;Total ram usage:        2 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; Hardware stack levels required when called:    6
 11557 ;; This function calls:
 11558 ;;		Nothing
 11559 ;; This function is called by:
 11560 ;;		_EUSART1_Initialize
 11561 ;; This function uses a non-reentrant model
 11562 ;;
 11563                           
 11564                           	psect	text32
 11565  00F6F6                     __ptext32:
 11566                           	callstack 0
 11567  00F6F6                     _EUSART1_SetFramingErrorHandler:
 11568                           	callstack 22
 11569                           
 11570                           ;eusart1.c: 222: EUSART1_FramingErrorHandler = interruptHandler;
 11571                           
 11572                           ;incstack = 0
 11573  00F6F6  C00E  F38A         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
 11574  00F6FA  C00F  F38B         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
 11575  00F6FE  0012               	return		;funcret
 11576  00F700                     __end_of_EUSART1_SetFramingErrorHandler:
 11577                           	callstack 0
 11578                           
 11579 ;; *************** function _EUSART1_SetErrorHandler *****************
 11580 ;; Defined at:
 11581 ;;		line 229 in file "mcc_generated_files/eusart1.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;  interruptHan    2   13[COMRAM] PTR FTN()void 
 11584 ;;		 -> EUSART1_DefaultErrorHandler(1), 
 11585 ;; Auto vars:     Size  Location     Type
 11586 ;;		None
 11587 ;; Return value:  Size  Location     Type
 11588 ;;                  1    wreg      void 
 11589 ;; Registers used:
 11590 ;;		wreg, status,2, status,0
 11591 ;; Tracked objects:
 11592 ;;		On entry : 0/F
 11593 ;;		On exit  : 0/0
 11594 ;;		Unchanged: 0/0
 11595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11596 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;Total ram usage:        2 bytes
 11601 ;; Hardware stack levels used:    1
 11602 ;; Hardware stack levels required when called:    6
 11603 ;; This function calls:
 11604 ;;		Nothing
 11605 ;; This function is called by:
 11606 ;;		_EUSART1_Initialize
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           	psect	text33
 11611  00F700                     __ptext33:
 11612                           	callstack 0
 11613  00F700                     _EUSART1_SetErrorHandler:
 11614                           	callstack 22
 11615                           
 11616                           ;eusart1.c: 230: EUSART1_ErrorHandler = interruptHandler;
 11617                           
 11618                           ;incstack = 0
 11619  00F700  C00E  F386         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
 11620  00F704  C00F  F387         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
 11621  00F708  0012               	return		;funcret
 11622  00F70A                     __end_of_EUSART1_SetErrorHandler:
 11623                           	callstack 0
 11624                           
 11625 ;; *************** function _EPWM2_Initialize *****************
 11626 ;; Defined at:
 11627 ;;		line 64 in file "mcc_generated_files/epwm2.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;		None
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;		None
 11632 ;; Return value:  Size  Location     Type
 11633 ;;                  1    wreg      void 
 11634 ;; Registers used:
 11635 ;;		wreg, status,2
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : 3F/F
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11645 ;;Total ram usage:        0 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:    6
 11648 ;; This function calls:
 11649 ;;		Nothing
 11650 ;; This function is called by:
 11651 ;;		_SYSTEM_Initialize
 11652 ;; This function uses a non-reentrant model
 11653 ;;
 11654                           
 11655                           	psect	text34
 11656  00F2F4                     __ptext34:
 11657                           	callstack 0
 11658  00F2F4                     _EPWM2_Initialize:
 11659                           	callstack 23
 11660                           
 11661                           ;epwm2.c: 69: CCP2CON = 0x3C;
 11662                           
 11663                           ;incstack = 0
 11664  00F2F4  0E3C               	movlw	60
 11665  00F2F6  6E66               	movwf	102,c	;volatile
 11666                           
 11667                           ;epwm2.c: 72: ECCP2AS = 0x00;
 11668  00F2F8  0E00               	movlw	0
 11669  00F2FA  6E64               	movwf	100,c	;volatile
 11670                           
 11671                           ;epwm2.c: 75: PWM2CON = 0x80;
 11672  00F2FC  0E80               	movlw	128
 11673  00F2FE  6E65               	movwf	101,c	;volatile
 11674                           
 11675                           ;epwm2.c: 78: PSTR2CON = 0x01;
 11676  00F300  0E01               	movlw	1
 11677  00F302  6E63               	movwf	99,c	;volatile
 11678                           
 11679                           ;epwm2.c: 81: CCPR2H = 0x00;
 11680  00F304  0E00               	movlw	0
 11681  00F306  6E68               	movwf	104,c	;volatile
 11682                           
 11683                           ;epwm2.c: 84: CCPR2L = 0x7C;
 11684  00F308  0E7C               	movlw	124
 11685  00F30A  6E67               	movwf	103,c	;volatile
 11686                           
 11687                           ;epwm2.c: 87: CCPTMRS0bits.C2TSEL = 0x0;
 11688  00F30C  0EE7               	movlw	-25
 11689  00F30E  010F               	movlb	15	; () banked
 11690  00F310  1749               	andwf	73,f,b	;volatile
 11691                           
 11692                           ; BSR set to: 15
 11693  00F312  0012               	return		;funcret
 11694  00F314                     __end_of_EPWM2_Initialize:
 11695                           	callstack 0
 11696                           
 11697 ;; *************** function _EPWM1_Initialize *****************
 11698 ;; Defined at:
 11699 ;;		line 64 in file "mcc_generated_files/epwm1.c"
 11700 ;; Parameters:    Size  Location     Type
 11701 ;;		None
 11702 ;; Auto vars:     Size  Location     Type
 11703 ;;		None
 11704 ;; Return value:  Size  Location     Type
 11705 ;;                  1    wreg      void 
 11706 ;; Registers used:
 11707 ;;		wreg, status,2
 11708 ;; Tracked objects:
 11709 ;;		On entry : 3F/F
 11710 ;;		On exit  : 3F/F
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11717 ;;Total ram usage:        0 bytes
 11718 ;; Hardware stack levels used:    1
 11719 ;; Hardware stack levels required when called:    6
 11720 ;; This function calls:
 11721 ;;		Nothing
 11722 ;; This function is called by:
 11723 ;;		_SYSTEM_Initialize
 11724 ;; This function uses a non-reentrant model
 11725 ;;
 11726                           
 11727                           	psect	text35
 11728  00F24A                     __ptext35:
 11729                           	callstack 0
 11730  00F24A                     _EPWM1_Initialize:
 11731                           	callstack 23
 11732                           
 11733                           ; BSR set to: 15
 11734                           ;epwm1.c: 69: CCP1CON = 0x1F;
 11735                           
 11736                           ; BSR set to: 15
 11737                           ;incstack = 0
 11738  00F24A  0E1F               	movlw	31
 11739  00F24C  6EBD               	movwf	189,c	;volatile
 11740                           
 11741                           ;epwm1.c: 72: ECCP1AS = 0x00;
 11742  00F24E  0E00               	movlw	0
 11743  00F250  6EB6               	movwf	182,c	;volatile
 11744                           
 11745                           ;epwm1.c: 75: PWM1CON = 0x80;
 11746  00F252  0E80               	movlw	128
 11747  00F254  6EB7               	movwf	183,c	;volatile
 11748                           
 11749                           ;epwm1.c: 78: PSTR1CON = 0x01;
 11750  00F256  0E01               	movlw	1
 11751  00F258  6EB9               	movwf	185,c	;volatile
 11752                           
 11753                           ;epwm1.c: 81: CCPR1H = 0x00;
 11754  00F25A  0E00               	movlw	0
 11755  00F25C  6EBF               	movwf	191,c	;volatile
 11756                           
 11757                           ;epwm1.c: 84: CCPR1L = 0x19;
 11758  00F25E  0E19               	movlw	25
 11759  00F260  6EBE               	movwf	190,c	;volatile
 11760                           
 11761                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x2;
 11762  00F262  5149               	movf	73,w,b	;volatile
 11763  00F264  0BFC               	andlw	-4
 11764  00F266  0902               	iorlw	2
 11765  00F268  6F49               	movwf	73,b	;volatile
 11766                           
 11767                           ; BSR set to: 15
 11768  00F26A  0012               	return		;funcret
 11769  00F26C                     __end_of_EPWM1_Initialize:
 11770                           	callstack 0
 11771                           
 11772 ;; *************** function _CCP5_Initialize *****************
 11773 ;; Defined at:
 11774 ;;		line 58 in file "mcc_generated_files/ccp5.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;		None
 11777 ;; Auto vars:     Size  Location     Type
 11778 ;;		None
 11779 ;; Return value:  Size  Location     Type
 11780 ;;                  1    wreg      void 
 11781 ;; Registers used:
 11782 ;;		wreg, status,2
 11783 ;; Tracked objects:
 11784 ;;		On entry : 3F/F
 11785 ;;		On exit  : 3F/F
 11786 ;;		Unchanged: 0/0
 11787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;Total ram usage:        0 bytes
 11793 ;; Hardware stack levels used:    1
 11794 ;; Hardware stack levels required when called:    6
 11795 ;; This function calls:
 11796 ;;		Nothing
 11797 ;; This function is called by:
 11798 ;;		_SYSTEM_Initialize
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802                           	psect	text36
 11803  00F4DC                     __ptext36:
 11804                           	callstack 0
 11805  00F4DC                     _CCP5_Initialize:
 11806                           	callstack 23
 11807                           
 11808                           ; BSR set to: 15
 11809                           ;ccp5.c: 63: CCP5CON = 0x0B;
 11810                           
 11811                           ; BSR set to: 15
 11812                           ;incstack = 0
 11813  00F4DC  0E0B               	movlw	11
 11814  00F4DE  6F54               	movwf	84,b	;volatile
 11815                           
 11816                           ;ccp5.c: 66: CCPR5L = 0x00;
 11817  00F4E0  0E00               	movlw	0
 11818  00F4E2  6F55               	movwf	85,b	;volatile
 11819                           
 11820                           ;ccp5.c: 69: CCPR5H = 0x00;
 11821  00F4E4  0E00               	movlw	0
 11822  00F4E6  6F56               	movwf	86,b	;volatile
 11823                           
 11824                           ;ccp5.c: 72: CCPTMRS1bits.C5TSEL = 0x1;
 11825  00F4E8  5148               	movf	72,w,b	;volatile
 11826  00F4EA  0BF3               	andlw	-13
 11827  00F4EC  0904               	iorlw	4
 11828  00F4EE  6F48               	movwf	72,b	;volatile
 11829                           
 11830                           ; BSR set to: 15
 11831  00F4F0  0012               	return		;funcret
 11832  00F4F2                     __end_of_CCP5_Initialize:
 11833                           	callstack 0
 11834                           
 11835 ;; *************** function _ADC_Initialize *****************
 11836 ;; Defined at:
 11837 ;;		line 62 in file "mcc_generated_files/adc.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;		None
 11840 ;; Auto vars:     Size  Location     Type
 11841 ;;		None
 11842 ;; Return value:  Size  Location     Type
 11843 ;;                  1    wreg      void 
 11844 ;; Registers used:
 11845 ;;		wreg, status,2
 11846 ;; Tracked objects:
 11847 ;;		On entry : 3F/F
 11848 ;;		On exit  : 3F/F
 11849 ;;		Unchanged: 3E/0
 11850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;Total ram usage:        0 bytes
 11856 ;; Hardware stack levels used:    1
 11857 ;; Hardware stack levels required when called:    6
 11858 ;; This function calls:
 11859 ;;		Nothing
 11860 ;; This function is called by:
 11861 ;;		_SYSTEM_Initialize
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           	psect	text37
 11866  00F4F2                     __ptext37:
 11867                           	callstack 0
 11868  00F4F2                     _ADC_Initialize:
 11869                           	callstack 23
 11870                           
 11871                           ; BSR set to: 15
 11872                           ;adc.c: 67: ADCON1 = 0x00;
 11873                           
 11874                           ; BSR set to: 15
 11875                           ;incstack = 0
 11876  00F4F2  0E00               	movlw	0
 11877  00F4F4  6EC1               	movwf	193,c	;volatile
 11878                           
 11879                           ;adc.c: 70: ADCON2 = 0xBE;
 11880  00F4F6  0EBE               	movlw	190
 11881  00F4F8  6EC0               	movwf	192,c	;volatile
 11882                           
 11883                           ;adc.c: 73: ADRESL = 0x00;
 11884  00F4FA  0E00               	movlw	0
 11885  00F4FC  6EC3               	movwf	195,c	;volatile
 11886                           
 11887                           ;adc.c: 76: ADRESH = 0x00;
 11888  00F4FE  0E00               	movlw	0
 11889  00F500  6EC4               	movwf	196,c	;volatile
 11890                           
 11891                           ;adc.c: 79: ADCON0 = 0x00;
 11892  00F502  0E00               	movlw	0
 11893  00F504  6EC2               	movwf	194,c	;volatile
 11894                           
 11895                           ; BSR set to: 15
 11896  00F506  0012               	return		;funcret
 11897  00F508                     __end_of_ADC_Initialize:
 11898                           	callstack 0
 11899                           
 11900 ;; *************** function _NormalProc *****************
 11901 ;; Defined at:
 11902 ;;		line 390 in file "main.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;		None
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;  str           100  110[BANK2 ] unsigned char [100]
 11907 ;;  delta           2  216[BANK2 ] int 
 11908 ;;  newBL           2  213[BANK2 ] unsigned int 
 11909 ;;  actualLength    2  210[BANK2 ] unsigned int 
 11910 ;;  mm              1  218[BANK2 ] char 
 11911 ;;  hh              1  215[BANK2 ] char 
 11912 ;;  jj              1  212[BANK2 ] char 
 11913 ;; Return value:  Size  Location     Type
 11914 ;;                  1    wreg      void 
 11915 ;; Registers used:
 11916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 11917 ;; Tracked objects:
 11918 ;;		On entry : 3F/2
 11919 ;;		On exit  : 0/0
 11920 ;;		Unchanged: 0/0
 11921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11923 ;;      Locals:         0       0       0     109       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11924 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Totals:         0       0       4     109       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;Total ram usage:      113 bytes
 11927 ;; Hardware stack levels used:    1
 11928 ;; Hardware stack levels required when called:   19
 11929 ;; This function calls:
 11930 ;;		_ADC_GetConversion
 11931 ;;		_AlarmSoundOff
 11932 ;;		_AlarmSoundOn
 11933 ;;		_Bcd2Hex
 11934 ;;		_ButtonPush
 11935 ;;		_DATAEE_WriteByte
 11936 ;;		_EPWM1_LoadDutyValue
 11937 ;;		_GetTouchLocation
 11938 ;;		_Hex2Bcd
 11939 ;;		_IncDecTime
 11940 ;;		_RTC_read
 11941 ;;		_RTC_resetAlarm
 11942 ;;		_RTC_setAlarmTime
 11943 ;;		_TransCoordination
 11944 ;;		_WriteYMD
 11945 ;;		___awmod
 11946 ;;		___wmul
 11947 ;;		_display_fillCircle
 11948 ;;		_drawAlarmTime
 11949 ;;		_drawCalendar
 11950 ;;		_drawDateTime
 11951 ;;		_drawTempHumidity
 11952 ;;		_f_close
 11953 ;;		_f_mount
 11954 ;;		_f_open
 11955 ;;		_f_write
 11956 ;;		_get_tempHumidity
 11957 ;;		_glcd_init2
 11958 ;;		_lcd_fill
 11959 ;;		_resetCTFG
 11960 ;;		_sprintf
 11961 ;;		_strlen
 11962 ;; This function is called by:
 11963 ;;		_main
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           	psect	text38
 11968  003B2A                     __ptext38:
 11969                           	callstack 0
 11970  003B2A                     _NormalProc:
 11971                           	callstack 11
 11972                           
 11973                           ; BSR set to: 2
 11974                           ;main.c: 391: char str[100];;main.c: 392: int16_t delta;;main.c: 393: int8_t mm, hh, jj;
      +                          ;main.c: 394: UINT actualLength;;main.c: 395: uint16_t newBL;;main.c: 405: if (Mode == 0
      +                          x00) {
 11975                           
 11976                           ; BSR set to: 15
 11977                           ;incstack = 0
 11978  003B2A  51E3               	movf	_Mode& (0+255),w,b
 11979  003B2C  A4D8               	btfss	status,2,c
 11980  003B2E  D01C               	goto	l25787
 11981                           
 11982                           ; BSR set to: 2
 11983                           ;main.c: 406: lcd_fill(0x0000);
 11984  003B30  0E00               	movlw	0
 11985  003B32  6E1A               	movwf	(lcd_fill@bg_color+1)^0,c
 11986  003B34  0E00               	movlw	0
 11987  003B36  6E19               	movwf	lcd_fill@bg_color^0,c
 11988  003B38  EC06  F06C         	call	_lcd_fill	;wreg free
 11989                           
 11990                           ;main.c: 409: for (jj = 0; jj < 3; jj++) preDateTime[jj] = 0xff;
 11991  003B3C  0E00               	movlw	0
 11992  003B3E  0102               	movlb	2	; () banked
 11993  003B40  6FD4               	movwf	NormalProc@jj& (0+255),b
 11994  003B42                     l25777:
 11995                           
 11996                           ; BSR set to: 2
 11997  003B42  0E6D               	movlw	low _preDateTime
 11998  003B44  25D4               	addwf	NormalProc@jj& (0+255),w,b
 11999  003B46  6ED9               	movwf	fsr2l,c
 12000  003B48  6ADA               	clrf	fsr2h,c
 12001  003B4A  0E03               	movlw	high _preDateTime
 12002  003B4C  22DA               	addwfc	fsr2h,f,c
 12003  003B4E  0EFF               	movlw	255
 12004  003B50  6EDF               	movwf	indf2,c
 12005                           
 12006                           ; BSR set to: 2
 12007  003B52  2BD4               	incf	NormalProc@jj& (0+255),f,b
 12008                           
 12009                           ; BSR set to: 2
 12010  003B54  51D4               	movf	NormalProc@jj& (0+255),w,b
 12011  003B56  0A80               	xorlw	128
 12012  003B58  0F7D               	addlw	-131
 12013  003B5A  A0D8               	btfss	status,0,c
 12014  003B5C  D7F2               	goto	l25777
 12015                           
 12016                           ; BSR set to: 2
 12017                           ;main.c: 411: UpdateFlag |= 0x01 | 0x20;
 12018  003B5E  0E21               	movlw	33
 12019  003B60  0103               	movlb	3	; () banked
 12020  003B62  13A5               	iorwf	_UpdateFlag& (0+255),f,b
 12021                           
 12022                           ; BSR set to: 3
 12023                           ;main.c: 412: Mode++;
 12024  003B64  0102               	movlb	2	; () banked
 12025  003B66  2BE3               	incf	_Mode& (0+255),f,b
 12026  003B68                     l25787:
 12027                           
 12028                           ; BSR set to: 2
 12029                           ;main.c: 413: };main.c: 415: if (UpdateFlag & 0x01) {
 12030  003B68  0103               	movlb	3	; () banked
 12031  003B6A  A1A5               	btfss	_UpdateFlag& (0+255),0,b
 12032  003B6C  D139               	goto	l25841
 12033                           
 12034                           ; BSR set to: 3
 12035                           ;main.c: 417: RTC_read(DateTime);
 12036  003B6E  0EF6               	movlw	low _DateTime
 12037  003B70  6E29               	movwf	RTC_read@datetime^0,c
 12038  003B72  0E02               	movlw	high _DateTime
 12039  003B74  6E2A               	movwf	(RTC_read@datetime+1)^0,c
 12040  003B76  ECD9  F077         	call	_RTC_read	;wreg free
 12041                           
 12042                           ; BSR set to: 4
 12043                           ;main.c: 419: drawDateTime(DisplayMode, DateTime);
 12044  003B7A  0EF6               	movlw	low _DateTime
 12045  003B7C  0100               	movlb	0	; () banked
 12046  003B7E  6FB7               	movwf	drawDateTime@datetime& (0+255),b
 12047  003B80  0E02               	movlw	high _DateTime
 12048  003B82  6FB8               	movwf	(drawDateTime@datetime+1)& (0+255),b
 12049  003B84  0102               	movlb	2	; () banked
 12050  003B86  51E2               	movf	_DisplayMode& (0+255),w,b
 12051  003B88  ECA4  F05D         	call	_drawDateTime
 12052                           
 12053                           ;main.c: 421: resetCTFG();
 12054  003B8C  ECFF  F078         	call	_resetCTFG	;wreg free
 12055                           
 12056                           ;main.c: 422: (INTCONbits.INT0IF = 0);
 12057  003B90  92F2               	bcf	242,1,c	;volatile
 12058                           
 12059                           ;main.c: 423: WriteYMD();
 12060  003B92  EC7B  F06B         	call	_WriteYMD	;wreg free
 12061                           
 12062                           ;main.c: 424: UpdateFlag &= ~0x01;
 12063  003B96  0103               	movlb	3	; () banked
 12064  003B98  91A5               	bcf	_UpdateFlag& (0+255),0,b
 12065                           
 12066                           ; BSR set to: 3
 12067                           ;main.c: 426: if ((DateTime[0] & 0x0f)==1) {
 12068  003B9A  0102               	movlb	2	; () banked
 12069  003B9C  51F6               	movf	_DateTime& (0+255),w,b
 12070  003B9E  0B0F               	andlw	15
 12071  003BA0  06E8               	decf	wreg,f,c
 12072  003BA2  A4D8               	btfss	status,2,c
 12073  003BA4  D091               	goto	l25819
 12074                           
 12075                           ; BSR set to: 2
 12076                           ;main.c: 434: Brightness = Brightness/8*7 + ADC_GetConversion(PhotoDiode);
 12077  003BA6  C378  F1F8         	movff	_Brightness,??_NormalProc
 12078  003BAA  C379  F1F9         	movff	_Brightness+1,??_NormalProc+1
 12079  003BAE  0101               	movlb	1	; () banked
 12080  003BB0  90D8               	bcf	status,0,c
 12081  003BB2  33F9               	rrcf	(??_NormalProc+1)& (0+255),f,b
 12082  003BB4  33F8               	rrcf	??_NormalProc& (0+255),f,b
 12083  003BB6  90D8               	bcf	status,0,c
 12084  003BB8  33F9               	rrcf	(??_NormalProc+1)& (0+255),f,b
 12085  003BBA  33F8               	rrcf	??_NormalProc& (0+255),f,b
 12086  003BBC  90D8               	bcf	status,0,c
 12087  003BBE  33F9               	rrcf	(??_NormalProc+1)& (0+255),f,b
 12088  003BC0  33F8               	rrcf	??_NormalProc& (0+255),f,b
 12089  003BC2  C1F8  F01D         	movff	??_NormalProc,___wmul@multiplier
 12090  003BC6  C1F9  F01E         	movff	??_NormalProc+1,___wmul@multiplier+1
 12091  003BCA  0E00               	movlw	0
 12092  003BCC  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 12093  003BCE  0E07               	movlw	7
 12094  003BD0  6E1F               	movwf	___wmul@multiplicand^0,c
 12095  003BD2  EC12  F079         	call	___wmul	;wreg free
 12096  003BD6  C01D  F1FA         	movff	?___wmul,??_NormalProc+2
 12097  003BDA  C01E  F1FB         	movff	?___wmul+1,??_NormalProc+3
 12098  003BDE  0E03               	movlw	3
 12099  003BE0  EC68  F077         	call	_ADC_GetConversion
 12100  003BE4  500E               	movf	?_ADC_GetConversion^0,w,c
 12101  003BE6  0101               	movlb	1	; () banked
 12102  003BE8  25FA               	addwf	(??_NormalProc+2)& (0+255),w,b
 12103  003BEA  0103               	movlb	3	; () banked
 12104  003BEC  6F78               	movwf	_Brightness& (0+255),b
 12105  003BEE  500F               	movf	(?_ADC_GetConversion+1)^0,w,c
 12106  003BF0  0101               	movlb	1	; () banked
 12107  003BF2  21FB               	addwfc	(??_NormalProc+3)& (0+255),w,b
 12108  003BF4  0103               	movlb	3	; () banked
 12109  003BF6  6F79               	movwf	(_Brightness+1)& (0+255),b
 12110                           
 12111                           ;main.c: 437: newBL = 100 + Brightness/8*3;
 12112  003BF8  C378  F1F8         	movff	_Brightness,??_NormalProc
 12113  003BFC  C379  F1F9         	movff	_Brightness+1,??_NormalProc+1
 12114  003C00  0101               	movlb	1	; () banked
 12115  003C02  90D8               	bcf	status,0,c
 12116  003C04  33F9               	rrcf	(??_NormalProc+1)& (0+255),f,b
 12117  003C06  33F8               	rrcf	??_NormalProc& (0+255),f,b
 12118  003C08  90D8               	bcf	status,0,c
 12119  003C0A  33F9               	rrcf	(??_NormalProc+1)& (0+255),f,b
 12120  003C0C  33F8               	rrcf	??_NormalProc& (0+255),f,b
 12121  003C0E  90D8               	bcf	status,0,c
 12122  003C10  33F9               	rrcf	(??_NormalProc+1)& (0+255),f,b
 12123  003C12  33F8               	rrcf	??_NormalProc& (0+255),f,b
 12124  003C14  C1F8  F01D         	movff	??_NormalProc,___wmul@multiplier
 12125  003C18  C1F9  F01E         	movff	??_NormalProc+1,___wmul@multiplier+1
 12126  003C1C  0E00               	movlw	0
 12127  003C1E  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 12128  003C20  0E03               	movlw	3
 12129  003C22  6E1F               	movwf	___wmul@multiplicand^0,c
 12130  003C24  EC12  F079         	call	___wmul	;wreg free
 12131  003C28  0E64               	movlw	100
 12132  003C2A  241D               	addwf	?___wmul^0,w,c
 12133  003C2C  0102               	movlb	2	; () banked
 12134  003C2E  6FD5               	movwf	NormalProc@newBL& (0+255),b
 12135  003C30  0E00               	movlw	0
 12136  003C32  201E               	addwfc	(?___wmul+1)^0,w,c
 12137  003C34  6FD6               	movwf	(NormalProc@newBL+1)& (0+255),b
 12138                           
 12139                           ; BSR set to: 2
 12140                           ;main.c: 439: if (newBL > 1000) newBL = 1000;
 12141  003C36  0EE9               	movlw	233
 12142  003C38  5DD5               	subwf	NormalProc@newBL& (0+255),w,b
 12143  003C3A  0E03               	movlw	3
 12144  003C3C  59D6               	subwfb	(NormalProc@newBL+1)& (0+255),w,b
 12145  003C3E  A0D8               	btfss	status,0,c
 12146  003C40  D004               	goto	l25809
 12147                           
 12148                           ; BSR set to: 2
 12149  003C42  0E03               	movlw	3
 12150  003C44  6FD6               	movwf	(NormalProc@newBL+1)& (0+255),b
 12151  003C46  0EE8               	movlw	232
 12152  003C48  6FD5               	movwf	NormalProc@newBL& (0+255),b
 12153  003C4A                     l25809:
 12154                           
 12155                           ; BSR set to: 2
 12156                           ;main.c: 441: if (BackLight > newBL+10) BackLight = BackLight -10;
 12157  003C4A  0E0A               	movlw	10
 12158  003C4C  25D5               	addwf	NormalProc@newBL& (0+255),w,b
 12159  003C4E  0101               	movlb	1	; () banked
 12160  003C50  6FF8               	movwf	??_NormalProc& (0+255),b
 12161  003C52  0E00               	movlw	0
 12162  003C54  0102               	movlb	2	; () banked
 12163  003C56  21D6               	addwfc	(NormalProc@newBL+1)& (0+255),w,b
 12164  003C58  0101               	movlb	1	; () banked
 12165  003C5A  6FF9               	movwf	(??_NormalProc+1)& (0+255),b
 12166  003C5C  0102               	movlb	2	; () banked
 12167  003C5E  51F0               	movf	_BackLight& (0+255),w,b
 12168  003C60  0101               	movlb	1	; () banked
 12169  003C62  5DF8               	subwf	??_NormalProc& (0+255),w,b
 12170  003C64  0102               	movlb	2	; () banked
 12171  003C66  51F1               	movf	(_BackLight+1)& (0+255),w,b
 12172  003C68  0101               	movlb	1	; () banked
 12173  003C6A  59F9               	subwfb	(??_NormalProc+1)& (0+255),w,b
 12174  003C6C  B0D8               	btfsc	status,0,c
 12175  003C6E  D006               	goto	l25813
 12176                           
 12177                           ; BSR set to: 1
 12178  003C70  0EF6               	movlw	246
 12179  003C72  0102               	movlb	2	; () banked
 12180  003C74  25F0               	addwf	_BackLight& (0+255),w,b
 12181  003C76  6FF0               	movwf	_BackLight& (0+255),b
 12182  003C78  0EFF               	movlw	255
 12183  003C7A  D019               	goto	L4
 12184  003C7C                     l25813:
 12185                           
 12186                           ; BSR set to: 1
 12187                           ;main.c: 442: else if (BackLight < newBL-10) BackLight = BackLight +10;
 12188  003C7C  0EF6               	movlw	246
 12189  003C7E  6FF8               	movwf	??_NormalProc& (0+255),b
 12190  003C80  0EFF               	movlw	255
 12191  003C82  6FF9               	movwf	(??_NormalProc+1)& (0+255),b
 12192  003C84  C2D5  F1FA         	movff	NormalProc@newBL,??_NormalProc+2
 12193  003C88  C2D6  F1FB         	movff	NormalProc@newBL+1,??_NormalProc+3
 12194  003C8C  51F8               	movf	??_NormalProc& (0+255),w,b
 12195  003C8E  27FA               	addwf	(??_NormalProc+2)& (0+255),f,b
 12196  003C90  51F9               	movf	(??_NormalProc+1)& (0+255),w,b
 12197  003C92  23FB               	addwfc	(??_NormalProc+3)& (0+255),f,b
 12198  003C94  51FA               	movf	(??_NormalProc+2)& (0+255),w,b
 12199  003C96  0102               	movlb	2	; () banked
 12200  003C98  5DF0               	subwf	_BackLight& (0+255),w,b
 12201  003C9A  0101               	movlb	1	; () banked
 12202  003C9C  51FB               	movf	(??_NormalProc+3)& (0+255),w,b
 12203  003C9E  0102               	movlb	2	; () banked
 12204  003CA0  59F1               	subwfb	(_BackLight+1)& (0+255),w,b
 12205  003CA2  B0D8               	btfsc	status,0,c
 12206  003CA4  D007               	goto	l2568
 12207                           
 12208                           ; BSR set to: 2
 12209  003CA6  0E0A               	movlw	10
 12210  003CA8  25F0               	addwf	_BackLight& (0+255),w,b
 12211  003CAA  6FF0               	movwf	_BackLight& (0+255),b
 12212  003CAC  0E00               	movlw	0
 12213  003CAE                     L4:
 12214  003CAE  21F1               	addwfc	(_BackLight+1)& (0+255),w,b
 12215  003CB0  6FF1               	movwf	(_BackLight+1)& (0+255),b
 12216  003CB2  D004               	goto	l25817
 12217  003CB4                     l2568:
 12218                           
 12219                           ; BSR set to: 2
 12220                           ;main.c: 443: else BackLight = newBL;
 12221  003CB4  C2D5  F2F0         	movff	NormalProc@newBL,_BackLight
 12222  003CB8  C2D6  F2F1         	movff	NormalProc@newBL+1,_BackLight+1
 12223  003CBC                     l25817:
 12224                           
 12225                           ; BSR set to: 2
 12226                           ;main.c: 450: EPWM1_LoadDutyValue(BackLight);
 12227  003CBC  C2F0  F00E         	movff	_BackLight,EPWM1_LoadDutyValue@dutyValue
 12228  003CC0  C2F1  F00F         	movff	_BackLight+1,EPWM1_LoadDutyValue@dutyValue+1
 12229  003CC4  EC50  F077         	call	_EPWM1_LoadDutyValue	;wreg free
 12230  003CC8                     l25819:
 12231                           
 12232                           ; BSR set to: 2
 12233                           ;main.c: 451: };main.c: 453: if ((DateTime[0] & 0x0f) == 2) {
 12234  003CC8  51F6               	movf	_DateTime& (0+255),w,b
 12235  003CCA  0B0F               	andlw	15
 12236  003CCC  0A02               	xorlw	2
 12237  003CCE  A4D8               	btfss	status,2,c
 12238  003CD0  D016               	goto	l25825
 12239                           
 12240                           ; BSR set to: 2
 12241                           ;main.c: 455: get_tempHumidity(&Temp, &Humidity);
 12242  003CD2  0EC4               	movlw	low _Temp
 12243  003CD4  6E23               	movwf	get_tempHumidity@temp^0,c
 12244  003CD6  0E03               	movlw	high _Temp
 12245  003CD8  6E24               	movwf	(get_tempHumidity@temp+1)^0,c
 12246  003CDA  0EC2               	movlw	low _Humidity
 12247  003CDC  6E25               	movwf	get_tempHumidity@humidity^0,c
 12248  003CDE  0E03               	movlw	high _Humidity
 12249  003CE0  6E26               	movwf	(get_tempHumidity@humidity+1)^0,c
 12250  003CE2  EC56  F061         	call	_get_tempHumidity	;wreg free
 12251                           
 12252                           ; BSR set to: 4
 12253                           ;main.c: 456: drawTempHumidity(DisplayMode, Temp, Humidity);
 12254  003CE6  C3C4  F042         	movff	_Temp,drawTempHumidity@temp
 12255  003CEA  C3C5  F043         	movff	_Temp+1,drawTempHumidity@temp+1
 12256  003CEE  C3C2  F044         	movff	_Humidity,drawTempHumidity@humidity
 12257  003CF2  C3C3  F045         	movff	_Humidity+1,drawTempHumidity@humidity+1
 12258  003CF6  0102               	movlb	2	; () banked
 12259  003CF8  51E2               	movf	_DisplayMode& (0+255),w,b
 12260  003CFA  EC28  F058         	call	_drawTempHumidity
 12261  003CFE                     l25825:
 12262                           
 12263                           ;main.c: 457: };main.c: 461: if (DateTime[0] == 8) {
 12264  003CFE  0E08               	movlw	8
 12265  003D00  0102               	movlb	2	; () banked
 12266  003D02  19F6               	xorwf	_DateTime& (0+255),w,b
 12267  003D04  A4D8               	btfss	status,2,c
 12268  003D06  D06C               	goto	l25841
 12269                           
 12270                           ; BSR set to: 2
 12271                           ;main.c: 465: if (f_mount(&drive,"0:",1) == FR_OK) {
 12272  003D08  0E40               	movlw	low _drive
 12273  003D0A  0100               	movlb	0	; () banked
 12274  003D0C  6FE5               	movwf	f_mount@fs& (0+255),b
 12275  003D0E  0E07               	movlw	high _drive
 12276  003D10  6FE6               	movwf	(f_mount@fs+1)& (0+255),b
 12277  003D12  0EFB               	movlw	low STR_1
 12278  003D14  6FE7               	movwf	f_mount@path& (0+255),b
 12279  003D16  0EFF               	movlw	high STR_1
 12280  003D18  6FE8               	movwf	(f_mount@path+1)& (0+255),b
 12281  003D1A  0E01               	movlw	1
 12282  003D1C  6FE9               	movwf	f_mount@opt& (0+255),b
 12283  003D1E  EC6C  F069         	call	_f_mount	;wreg free
 12284  003D22  0900               	iorlw	0
 12285  003D24  A4D8               	btfss	status,2,c
 12286  003D26  D05C               	goto	l25841
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;main.c: 466: if (f_open(&file, "TempLog.TXT", 0x02 | 0x30 ) == FR_OK) {
 12290  003D28  0ED2               	movlw	low _file
 12291  003D2A  0101               	movlb	1	; () banked
 12292  003D2C  6F0A               	movwf	f_open@fp& (0+255),b
 12293  003D2E  0E05               	movlw	high _file
 12294  003D30  6F0B               	movwf	(f_open@fp+1)& (0+255),b
 12295  003D32  0EA7               	movlw	low STR_8
 12296  003D34  6F0C               	movwf	f_open@path& (0+255),b
 12297  003D36  0EFF               	movlw	high STR_8
 12298  003D38  6F0D               	movwf	(f_open@path+1)& (0+255),b
 12299  003D3A  0E32               	movlw	50
 12300  003D3C  6F0E               	movwf	f_open@mode& (0+255),b
 12301  003D3E  ECC2  F020         	call	_f_open	;wreg free
 12302  003D42  0900               	iorlw	0
 12303  003D44  A4D8               	btfss	status,2,c
 12304  003D46  D03D               	goto	l25837
 12305                           
 12306                           ; BSR set to: 1
 12307                           ;main.c: 472: sprintf(str, "%x/%x/%x %02x:%02x %d\r\n", DateTime[6], DateTime[5], DateTi
      +                          me[4], DateTime[2], DateTime[1], Temp);
 12308  003D48  0E6E               	movlw	low NormalProc@str
 12309  003D4A  6E2A               	movwf	sprintf@sp^0,c
 12310  003D4C  0E02               	movlw	high NormalProc@str
 12311  003D4E  6E2B               	movwf	(sprintf@sp+1)^0,c
 12312  003D50  0EE8               	movlw	low STR_9
 12313  003D52  6E2C               	movwf	sprintf@f^0,c
 12314  003D54  0EFE               	movlw	high STR_9
 12315  003D56  6E2D               	movwf	(sprintf@f+1)^0,c
 12316  003D58  C2FC  F02E         	movff	_DateTime+6,?_sprintf+4
 12317  003D5C  6A2F               	clrf	(?_sprintf+5)^0,c
 12318  003D5E  C2FB  F030         	movff	_DateTime+5,?_sprintf+6
 12319  003D62  6A31               	clrf	(?_sprintf+7)^0,c
 12320  003D64  C2FA  F032         	movff	_DateTime+4,?_sprintf+8
 12321  003D68  6A33               	clrf	(?_sprintf+9)^0,c
 12322  003D6A  C2F8  F034         	movff	_DateTime+2,?_sprintf+10
 12323  003D6E  6A35               	clrf	(?_sprintf+11)^0,c
 12324  003D70  C2F7  F036         	movff	_DateTime+1,?_sprintf+12
 12325  003D74  6A37               	clrf	(?_sprintf+13)^0,c
 12326  003D76  C3C4  F038         	movff	_Temp,?_sprintf+14
 12327  003D7A  C3C5  F039         	movff	_Temp+1,?_sprintf+15
 12328  003D7E  ECD0  F028         	call	_sprintf	;wreg free
 12329                           
 12330                           ; BSR set to: 0
 12331                           ;main.c: 473: f_write(&file, str, strlen(str), &actualLength);
 12332  003D82  0ED2               	movlw	low _file
 12333  003D84  6FD5               	movwf	f_write@fp& (0+255),b
 12334  003D86  0E05               	movlw	high _file
 12335  003D88  6FD6               	movwf	(f_write@fp+1)& (0+255),b
 12336  003D8A  0E6E               	movlw	low NormalProc@str
 12337  003D8C  6FD7               	movwf	f_write@buff& (0+255),b
 12338  003D8E  0E02               	movlw	high NormalProc@str
 12339  003D90  6FD8               	movwf	(f_write@buff+1)& (0+255),b
 12340  003D92  0E6E               	movlw	low NormalProc@str
 12341  003D94  6E0E               	movwf	strlen@s^0,c
 12342  003D96  0E02               	movlw	high NormalProc@str
 12343  003D98  6E0F               	movwf	(strlen@s+1)^0,c
 12344  003D9A  ECBC  F074         	call	_strlen	;wreg free
 12345  003D9E  C00E  F0D9         	movff	?_strlen,f_write@btw
 12346  003DA2  C00F  F0DA         	movff	?_strlen+1,f_write@btw+1
 12347  003DA6  0ED2               	movlw	low NormalProc@actualLength
 12348  003DA8  0100               	movlb	0	; () banked
 12349  003DAA  6FDB               	movwf	f_write@bw& (0+255),b
 12350  003DAC  0E02               	movlw	high NormalProc@actualLength
 12351  003DAE  6FDC               	movwf	(f_write@bw+1)& (0+255),b
 12352  003DB0  EC73  F016         	call	_f_write	;wreg free
 12353                           
 12354                           ;main.c: 475: f_close(&file);
 12355  003DB4  0ED2               	movlw	low _file
 12356  003DB6  0100               	movlb	0	; () banked
 12357  003DB8  6FA2               	movwf	f_close@fp& (0+255),b
 12358  003DBA  0E05               	movlw	high _file
 12359  003DBC  6FA3               	movwf	(f_close@fp+1)& (0+255),b
 12360  003DBE  EC00  F075         	call	_f_close	;wreg free
 12361  003DC2                     l25837:
 12362                           
 12363                           ;main.c: 476: };main.c: 477: f_mount(0,"0:",0);
 12364  003DC2  0E00               	movlw	0
 12365  003DC4  0100               	movlb	0	; () banked
 12366  003DC6  6FE5               	movwf	f_mount@fs& (0+255),b
 12367  003DC8  0E00               	movlw	0
 12368  003DCA  6FE6               	movwf	(f_mount@fs+1)& (0+255),b
 12369  003DCC  0EFB               	movlw	low STR_1
 12370  003DCE  6FE7               	movwf	f_mount@path& (0+255),b
 12371  003DD0  0EFF               	movlw	high STR_1
 12372  003DD2  6FE8               	movwf	(f_mount@path+1)& (0+255),b
 12373  003DD4  0E00               	movlw	0
 12374  003DD6  6FE9               	movwf	f_mount@opt& (0+255),b
 12375  003DD8  EC6C  F069         	call	_f_mount	;wreg free
 12376                           
 12377                           ; BSR set to: 0
 12378                           ;main.c: 478: glcd_init2();
 12379  003DDC  EC96  F076         	call	_glcd_init2	;wreg free
 12380  003DE0                     l25841:
 12381                           
 12382                           ;main.c: 479: };main.c: 481: };main.c: 482: };main.c: 484: if (UpdateFlag & 0x20) {
 12383  003DE0  0103               	movlb	3	; () banked
 12384  003DE2  ABA5               	btfss	_UpdateFlag& (0+255),5,b
 12385  003DE4  D00C               	goto	l25851
 12386                           
 12387                           ; BSR set to: 3
 12388                           ;main.c: 486: drawCalendar(DisplayMode);
 12389  003DE6  0102               	movlb	2	; () banked
 12390  003DE8  51E2               	movf	_DisplayMode& (0+255),w,b
 12391  003DEA  ECA5  F06A         	call	_drawCalendar
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;main.c: 487: UpdateFlag &= ~0x20;
 12395  003DEE  0103               	movlb	3	; () banked
 12396  003DF0  9BA5               	bcf	_UpdateFlag& (0+255),5,b
 12397                           
 12398                           ; BSR set to: 3
 12399                           ;main.c: 490: if (Count1PPS >= 20) Count1PPS = 0;
 12400  003DF2  0E13               	movlw	19
 12401  003DF4  0102               	movlb	2	; () banked
 12402  003DF6  65E0               	cpfsgt	_Count1PPS& (0+255),b
 12403  003DF8  D002               	goto	l25851
 12404                           
 12405                           ; BSR set to: 2
 12406  003DFA  0E00               	movlw	0
 12407  003DFC  6FE0               	movwf	_Count1PPS& (0+255),b
 12408  003DFE                     l25851:
 12409                           
 12410                           ;main.c: 491: };main.c: 494: if (TouchStatus == 2) {
 12411  003DFE  0E02               	movlw	2
 12412  003E00  184C               	xorwf	_TouchStatus^0,w,c
 12413  003E02  A4D8               	btfss	status,2,c
 12414  003E04  D0DD               	goto	l25903
 12415                           
 12416                           ;main.c: 495: TouchStatus++;
 12417  003E06  2A4C               	incf	_TouchStatus^0,f,c
 12418                           
 12419                           ;main.c: 496: GetTouchLocation(&TouchX, &TouchY);
 12420  003E08  0EC8               	movlw	low _TouchX
 12421  003E0A  6E2A               	movwf	GetTouchLocation@tx^0,c
 12422  003E0C  0E03               	movlw	high _TouchX
 12423  003E0E  6E2B               	movwf	(GetTouchLocation@tx+1)^0,c
 12424  003E10  0EC6               	movlw	low _TouchY
 12425  003E12  6E2C               	movwf	GetTouchLocation@ty^0,c
 12426  003E14  0E03               	movlw	high _TouchY
 12427  003E16  6E2D               	movwf	(GetTouchLocation@ty+1)^0,c
 12428  003E18  EC94  F043         	call	_GetTouchLocation	;wreg free
 12429                           
 12430                           ;main.c: 497: TransCoordination(TouchX, TouchY, &Test_x, &Test_y);
 12431  003E1C  C3C8  F028         	movff	_TouchX,TransCoordination@x
 12432  003E20  C3C9  F029         	movff	_TouchX+1,TransCoordination@x+1
 12433  003E24  C3C6  F02A         	movff	_TouchY,TransCoordination@y
 12434  003E28  C3C7  F02B         	movff	_TouchY+1,TransCoordination@y+1
 12435  003E2C  0EEE               	movlw	low _Test_x
 12436  003E2E  6E2C               	movwf	TransCoordination@xg^0,c
 12437  003E30  0E02               	movlw	high _Test_x
 12438  003E32  6E2D               	movwf	(TransCoordination@xg+1)^0,c
 12439  003E34  0EEC               	movlw	low _Test_y
 12440  003E36  6E2E               	movwf	TransCoordination@yg^0,c
 12441  003E38  0E02               	movlw	high _Test_y
 12442  003E3A  6E2F               	movwf	(TransCoordination@yg+1)^0,c
 12443  003E3C  EC00  F052         	call	_TransCoordination	;wreg free
 12444                           
 12445                           ;main.c: 503: if (AlarmStatus == 1) {
 12446  003E40  0103               	movlb	3	; () banked
 12447  003E42  05A3               	decf	_AlarmStatus& (0+255),w,b
 12448  003E44  A4D8               	btfss	status,2,c
 12449  003E46  D043               	goto	l25885
 12450                           
 12451                           ; BSR set to: 3
 12452                           ;main.c: 504: AlarmSoundOff();
 12453  003E48  EC1D  F07B         	call	_AlarmSoundOff	;wreg free
 12454                           
 12455                           ;main.c: 505: AlarmStatus = 0;
 12456  003E4C  0E00               	movlw	0
 12457  003E4E  0103               	movlb	3	; () banked
 12458  003E50  6FA3               	movwf	_AlarmStatus& (0+255),b
 12459                           
 12460                           ; BSR set to: 3
 12461                           ;main.c: 506: RTC_resetAlarm();
 12462  003E52  EC2C  F074         	call	_RTC_resetAlarm	;wreg free
 12463                           
 12464                           ;main.c: 507: SmoothCount++;
 12465  003E56  0103               	movlb	3	; () banked
 12466  003E58  2BA2               	incf	_SmoothCount& (0+255),f,b
 12467                           
 12468                           ; BSR set to: 3
 12469                           ;main.c: 508: if (SmoothCount <= 12) {
 12470  003E5A  0E0D               	movlw	13
 12471  003E5C  61A2               	cpfslt	_SmoothCount& (0+255),b
 12472  003E5E  D02F               	goto	l25881
 12473                           
 12474                           ; BSR set to: 3
 12475                           ;main.c: 510: mm = Bcd2Hex(AlarmTime[0]);
 12476  003E60  0102               	movlb	2	; () banked
 12477  003E62  51FD               	movf	_AlarmTime& (0+255),w,b
 12478  003E64  EC84  F07A         	call	_Bcd2Hex
 12479  003E68  0102               	movlb	2	; () banked
 12480  003E6A  6FDA               	movwf	NormalProc@mm& (0+255),b
 12481                           
 12482                           ;main.c: 511: hh = Bcd2Hex(AlarmTime[1]);
 12483  003E6C  51FE               	movf	(_AlarmTime+1)& (0+255),w,b
 12484  003E6E  EC84  F07A         	call	_Bcd2Hex
 12485  003E72  0102               	movlb	2	; () banked
 12486  003E74  6FD7               	movwf	NormalProc@hh& (0+255),b
 12487                           
 12488                           ; BSR set to: 2
 12489                           ;main.c: 512: IncDecTime(SmoothCount*5, &hh, &mm);
 12490  003E76  0103               	movlb	3	; () banked
 12491  003E78  51A2               	movf	_SmoothCount& (0+255),w,b
 12492  003E7A  0D05               	mullw	5
 12493  003E7C  CFF3 F00E          	movff	prodl,IncDecTime@dmm
 12494  003E80  CFF4 F00F          	movff	prodh,IncDecTime@dmm+1
 12495  003E84  0ED7               	movlw	low NormalProc@hh
 12496  003E86  6E10               	movwf	IncDecTime@hh^0,c
 12497  003E88  0E02               	movlw	high NormalProc@hh
 12498  003E8A  6E11               	movwf	(IncDecTime@hh+1)^0,c
 12499  003E8C  0EDA               	movlw	low NormalProc@mm
 12500  003E8E  6E12               	movwf	IncDecTime@mm^0,c
 12501  003E90  0E02               	movlw	high NormalProc@mm
 12502  003E92  6E13               	movwf	(IncDecTime@mm+1)^0,c
 12503  003E94  EC54  F065         	call	_IncDecTime	;wreg free
 12504                           
 12505                           ;main.c: 513: SmoothAlarmTime[0] = Hex2Bcd(mm);
 12506  003E98  0102               	movlb	2	; () banked
 12507  003E9A  51DA               	movf	NormalProc@mm& (0+255),w,b
 12508  003E9C  EC8A  F079         	call	_Hex2Bcd
 12509  003EA0  0103               	movlb	3	; () banked
 12510  003EA2  6FF9               	movwf	_SmoothAlarmTime& (0+255),b
 12511                           
 12512                           ; BSR set to: 3
 12513                           ;main.c: 514: SmoothAlarmTime[1] = Hex2Bcd(hh);
 12514  003EA4  0102               	movlb	2	; () banked
 12515  003EA6  51D7               	movf	NormalProc@hh& (0+255),w,b
 12516  003EA8  EC8A  F079         	call	_Hex2Bcd
 12517  003EAC  0103               	movlb	3	; () banked
 12518  003EAE  6FFA               	movwf	(_SmoothAlarmTime+1)& (0+255),b
 12519                           
 12520                           ; BSR set to: 3
 12521                           ;main.c: 517: RTC_setAlarmTime(SmoothAlarmTime);
 12522  003EB0  0EF9               	movlw	low _SmoothAlarmTime
 12523  003EB2  6E22               	movwf	RTC_setAlarmTime@alarmtime^0,c
 12524  003EB4  0E03               	movlw	high _SmoothAlarmTime
 12525  003EB6  6E23               	movwf	(RTC_setAlarmTime@alarmtime+1)^0,c
 12526  003EB8  EC92  F05F         	call	_RTC_setAlarmTime	;wreg free
 12527                           
 12528                           ;main.c: 519: } else {
 12529  003EBC  D008               	goto	l25885
 12530  003EBE                     l25881:
 12531                           
 12532                           ; BSR set to: 3
 12533                           ;main.c: 521: SmoothCount = 0;
 12534  003EBE  0E00               	movlw	0
 12535  003EC0  6FA2               	movwf	_SmoothCount& (0+255),b
 12536                           
 12537                           ; BSR set to: 3
 12538                           ;main.c: 523: RTC_setAlarmTime(AlarmTime);
 12539  003EC2  0EFD               	movlw	low _AlarmTime
 12540  003EC4  6E22               	movwf	RTC_setAlarmTime@alarmtime^0,c
 12541  003EC6  0E02               	movlw	high _AlarmTime
 12542  003EC8  6E23               	movwf	(RTC_setAlarmTime@alarmtime+1)^0,c
 12543  003ECA  EC92  F05F         	call	_RTC_setAlarmTime	;wreg free
 12544  003ECE                     l25885:
 12545                           
 12546                           ;main.c: 524: };main.c: 525: };main.c: 527: if (ButtonPush(Test_x, Test_y, 6)) {
 12547  003ECE  C2EE  F00E         	movff	_Test_x,ButtonPush@x
 12548  003ED2  C2EF  F00F         	movff	_Test_x+1,ButtonPush@x+1
 12549  003ED6  C2EC  F010         	movff	_Test_y,ButtonPush@y
 12550  003EDA  C2ED  F011         	movff	_Test_y+1,ButtonPush@y+1
 12551  003EDE  0E06               	movlw	6
 12552  003EE0  6E12               	movwf	ButtonPush@btn^0,c
 12553  003EE2  EC34  F06B         	call	_ButtonPush	;wreg free
 12554  003EE6  0900               	iorlw	0
 12555  003EE8  B4D8               	btfsc	status,2,c
 12556  003EEA  D092               	goto	l25921
 12557                           
 12558                           ;main.c: 528: DisplayMode = (DisplayMode +1) % 3;
 12559  003EEC  0E01               	movlw	1
 12560  003EEE  0102               	movlb	2	; () banked
 12561  003EF0  25E2               	addwf	_DisplayMode& (0+255),w,b
 12562  003EF2  6E0E               	movwf	___awmod@dividend^0,c
 12563  003EF4  6A0F               	clrf	(___awmod@dividend+1)^0,c
 12564  003EF6  0E00               	movlw	0
 12565  003EF8  220F               	addwfc	(___awmod@dividend+1)^0,f,c
 12566  003EFA  0E00               	movlw	0
 12567  003EFC  6E11               	movwf	(___awmod@divisor+1)^0,c
 12568  003EFE  0E03               	movlw	3
 12569  003F00  6E10               	movwf	___awmod@divisor^0,c
 12570  003F02  ECC7  F06E         	call	___awmod	;wreg free
 12571  003F06  500E               	movf	?___awmod^0,w,c
 12572  003F08  0102               	movlb	2	; () banked
 12573  003F0A  6FE2               	movwf	_DisplayMode& (0+255),b
 12574                           
 12575                           ;main.c: 529: DATAEE_WriteByte(0x07, DisplayMode);
 12576  003F0C  0E00               	movlw	0
 12577  003F0E  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
 12578  003F10  0E07               	movlw	7
 12579  003F12  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
 12580  003F14  C2E2  F010         	movff	_DisplayMode,DATAEE_WriteByte@bData
 12581  003F18  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
 12582                           
 12583                           ;main.c: 530: FirstDraw = 1;
 12584  003F1C  0E01               	movlw	1
 12585  003F1E  0103               	movlb	3	; () banked
 12586  003F20  6FF8               	movwf	_FirstDraw& (0+255),b
 12587                           
 12588                           ; BSR set to: 3
 12589                           ;main.c: 532: Mode = 0x00;
 12590  003F22  0E00               	movlw	0
 12591  003F24  0102               	movlb	2	; () banked
 12592  003F26  6FE3               	movwf	_Mode& (0+255),b
 12593                           
 12594                           ; BSR set to: 2
 12595                           ;main.c: 534: ButtonObj3[0] = RYear[DisplayMode];
 12596  003F28  51E2               	movf	_DisplayMode& (0+255),w,b
 12597  003F2A  0D0A               	mullw	10
 12598  003F2C  0EB4               	movlw	low _RYear
 12599  003F2E  24F3               	addwf	243,w,c
 12600  003F30  6ED9               	movwf	fsr2l,c
 12601  003F32  0E05               	movlw	high _RYear
 12602  003F34  20F4               	addwfc	prodh,w,c
 12603  003F36  6EDA               	movwf	fsr2h,c
 12604  003F38  EE14  F000         	lfsr	1,_ButtonObj3
 12605  003F3C  0E09               	movlw	9
 12606  003F3E                     u29781:
 12607  003F3E  CFDB FFE3          	movff	plusw2,plusw1
 12608  003F42  06E8               	decf	wreg,f,c
 12609  003F44  E2FC               	bc	u29781
 12610                           
 12611                           ; BSR set to: 2
 12612                           ;main.c: 535: ButtonObj3[1] = RMonth[DisplayMode];
 12613  003F46  51E2               	movf	_DisplayMode& (0+255),w,b
 12614  003F48  0D0A               	mullw	10
 12615  003F4A  0E96               	movlw	low _RMonth
 12616  003F4C  24F3               	addwf	243,w,c
 12617  003F4E  6ED9               	movwf	fsr2l,c
 12618  003F50  0E05               	movlw	high _RMonth
 12619  003F52  20F4               	addwfc	prodh,w,c
 12620  003F54  6EDA               	movwf	fsr2h,c
 12621  003F56  EE14  F00A         	lfsr	1,_ButtonObj3+10
 12622  003F5A  0E09               	movlw	9
 12623  003F5C                     u29791:
 12624  003F5C  CFDB FFE3          	movff	plusw2,plusw1
 12625  003F60  06E8               	decf	wreg,f,c
 12626  003F62  E2FC               	bc	u29791
 12627                           
 12628                           ; BSR set to: 2
 12629                           ;main.c: 536: ButtonObj3[2] = RDay[DisplayMode];
 12630  003F64  51E2               	movf	_DisplayMode& (0+255),w,b
 12631  003F66  0D0A               	mullw	10
 12632  003F68  0E78               	movlw	low _RDay
 12633  003F6A  24F3               	addwf	243,w,c
 12634  003F6C  6ED9               	movwf	fsr2l,c
 12635  003F6E  0E05               	movlw	high _RDay
 12636  003F70  20F4               	addwfc	prodh,w,c
 12637  003F72  6EDA               	movwf	fsr2h,c
 12638  003F74  EE14  F014         	lfsr	1,_ButtonObj3+20
 12639  003F78  0E09               	movlw	9
 12640  003F7A                     u29801:
 12641  003F7A  CFDB FFE3          	movff	plusw2,plusw1
 12642  003F7E  06E8               	decf	wreg,f,c
 12643  003F80  E2FC               	bc	u29801
 12644                           
 12645                           ; BSR set to: 2
 12646                           ;main.c: 537: ButtonObj3[3] = RTime[DisplayMode];
 12647  003F82  51E2               	movf	_DisplayMode& (0+255),w,b
 12648  003F84  0D0A               	mullw	10
 12649  003F86  0EA0               	movlw	low _RTime
 12650  003F88  24F3               	addwf	243,w,c
 12651  003F8A  6ED9               	movwf	fsr2l,c
 12652  003F8C  0E04               	movlw	high _RTime
 12653  003F8E  20F4               	addwfc	prodh,w,c
 12654  003F90  6EDA               	movwf	fsr2h,c
 12655  003F92  EE14  F01E         	lfsr	1,_ButtonObj3+30
 12656  003F96  0E09               	movlw	9
 12657  003F98                     u29811:
 12658  003F98  CFDB FFE3          	movff	plusw2,plusw1
 12659  003F9C  06E8               	decf	wreg,f,c
 12660  003F9E  E2FC               	bc	u29811
 12661                           
 12662                           ; BSR set to: 2
 12663                           ;main.c: 538: ButtonObj3[6] = RPrevMonthCalendar[DisplayMode];
 12664  003FA0  51E2               	movf	_DisplayMode& (0+255),w,b
 12665  003FA2  0D0A               	mullw	10
 12666  003FA4  0E1E               	movlw	low _RPrevMonthCalendar
 12667  003FA6  24F3               	addwf	243,w,c
 12668  003FA8  6ED9               	movwf	fsr2l,c
 12669  003FAA  0E05               	movlw	high _RPrevMonthCalendar
 12670  003FAC  20F4               	addwfc	prodh,w,c
 12671  003FAE  6EDA               	movwf	fsr2h,c
 12672  003FB0  EE14  F03C         	lfsr	1,_ButtonObj3+60
 12673  003FB4  0E09               	movlw	9
 12674  003FB6                     u29821:
 12675  003FB6  CFDB FFE3          	movff	plusw2,plusw1
 12676  003FBA  06E8               	decf	wreg,f,c
 12677  003FBC  E2FC               	bc	u29821
 12678  003FBE  D028               	goto	l25921
 12679  003FC0                     l25903:
 12680  003FC0  0E05               	movlw	5
 12681  003FC2  184C               	xorwf	_TouchStatus^0,w,c
 12682  003FC4  A4D8               	btfss	status,2,c
 12683  003FC6  D017               	goto	l25915
 12684                           
 12685                           ;main.c: 547: Mode = 0x10;
 12686  003FC8  0E10               	movlw	16
 12687  003FCA  0102               	movlb	2	; () banked
 12688  003FCC  6FE3               	movwf	_Mode& (0+255),b
 12689                           
 12690                           ; BSR set to: 2
 12691                           ;main.c: 548: TouchStatus++;
 12692  003FCE  2A4C               	incf	_TouchStatus^0,f,c
 12693                           
 12694                           ; BSR set to: 2
 12695                           ;main.c: 549: AlarmSoundOn(0);
 12696  003FD0  0E00               	movlw	0
 12697  003FD2  ECDE  F073         	call	_AlarmSoundOn
 12698                           
 12699                           ;main.c: 550: _delay((unsigned long)((100)*(64000000/4000.0)));
 12700  003FD6  0E09               	movlw	9
 12701  003FD8  0101               	movlb	1	; () banked
 12702  003FDA  6FF9               	movwf	(??_NormalProc+1)& (0+255),b
 12703  003FDC  0E1E               	movlw	30
 12704  003FDE  6FF8               	movwf	??_NormalProc& (0+255),b
 12705  003FE0  0EE4               	movlw	228
 12706  003FE2                     u30147:
 12707  003FE2  2EE8               	decfsz	wreg,f,c
 12708  003FE4  D7FE               	bra	u30147
 12709  003FE6  2FF8               	decfsz	??_NormalProc& (0+255),f,b
 12710  003FE8  D7FC               	bra	u30147
 12711  003FEA  2FF9               	decfsz	(??_NormalProc+1)& (0+255),f,b
 12712  003FEC  D7FA               	bra	u30147
 12713  003FEE  F000               	nop	
 12714                           
 12715                           ;main.c: 551: AlarmSoundOff();
 12716  003FF0  EC1D  F07B         	call	_AlarmSoundOff	;wreg free
 12717                           
 12718                           ;main.c: 553: } else if (TouchStatus == 0) {
 12719  003FF4  D00D               	goto	l25921
 12720  003FF6                     l25915:
 12721  003FF6  504C               	movf	_TouchStatus^0,w,c
 12722  003FF8  A4D8               	btfss	status,2,c
 12723  003FFA  D00A               	goto	l25921
 12724                           
 12725                           ;main.c: 555: drawAlarmTime(DisplayMode, AlarmTime);
 12726  003FFC  0EFD               	movlw	low _AlarmTime
 12727  003FFE  0100               	movlb	0	; () banked
 12728  004000  6F95               	movwf	drawAlarmTime@alarmtime& (0+255),b
 12729  004002  0E02               	movlw	high _AlarmTime
 12730  004004  6F96               	movwf	(drawAlarmTime@alarmtime+1)& (0+255),b
 12731  004006  0102               	movlb	2	; () banked
 12732  004008  51E2               	movf	_DisplayMode& (0+255),w,b
 12733  00400A  EC38  F03F         	call	_drawAlarmTime
 12734                           
 12735                           ;main.c: 556: TouchStatus++;
 12736  00400E  2A4C               	incf	_TouchStatus^0,f,c
 12737  004010                     l25921:
 12738                           
 12739                           ;main.c: 557: };main.c: 560: if (RotCount != 0) {
 12740  004010  0102               	movlb	2	; () banked
 12741  004012  51E1               	movf	_RotCount& (0+255),w,b
 12742  004014  B4D8               	btfsc	status,2,c
 12743  004016  D08A               	goto	l25959
 12744                           
 12745                           ; BSR set to: 2
 12746                           ;main.c: 561: delta = RotCount;
 12747  004018  51E1               	movf	_RotCount& (0+255),w,b
 12748  00401A  6FD8               	movwf	NormalProc@delta& (0+255),b
 12749  00401C  6BD9               	clrf	(NormalProc@delta+1)& (0+255),b
 12750  00401E  BFD8               	btfsc	NormalProc@delta& (0+255),7,b
 12751  004020  07D9               	decf	(NormalProc@delta+1)& (0+255),f,b
 12752                           
 12753                           ;main.c: 562: RotCount = 0;
 12754  004022  0E00               	movlw	0
 12755  004024  6FE1               	movwf	_RotCount& (0+255),b
 12756                           
 12757                           ; BSR set to: 2
 12758                           ;main.c: 564: if (DisplayMode != 0x02) {
 12759  004026  0E02               	movlw	2
 12760  004028  19E2               	xorwf	_DisplayMode& (0+255),w,b
 12761  00402A  B4D8               	btfsc	status,2,c
 12762  00402C  D028               	goto	l25939
 12763                           
 12764                           ; BSR set to: 2
 12765                           ;main.c: 566: if ((delta > 2) || (delta < -2)) {
 12766  00402E  BFD9               	btfsc	(NormalProc@delta+1)& (0+255),7,b
 12767  004030  D006               	goto	u29870
 12768  004032  51D9               	movf	(NormalProc@delta+1)& (0+255),w,b
 12769  004034  E10C               	bnz	l25931
 12770  004036  0E03               	movlw	3
 12771  004038  5DD8               	subwf	NormalProc@delta& (0+255),w,b
 12772  00403A  B0D8               	btfsc	status,0,c
 12773  00403C  D008               	goto	u29880
 12774  00403E                     u29870:
 12775                           
 12776                           ; BSR set to: 2
 12777  00403E  AFD9               	btfss	(NormalProc@delta+1)& (0+255),7,b
 12778  004040  D01B               	goto	l25937
 12779  004042  0EFE               	movlw	254
 12780  004044  5DD8               	subwf	NormalProc@delta& (0+255),w,b
 12781  004046  0EFF               	movlw	255
 12782  004048  59D9               	subwfb	(NormalProc@delta+1)& (0+255),w,b
 12783  00404A  B0D8               	btfsc	status,0,c
 12784  00404C  D015               	goto	l25937
 12785  00404E                     u29880:
 12786  00404E                     l25931:
 12787                           
 12788                           ; BSR set to: 2
 12789                           ;main.c: 568: if (Accel < 8) Accel = Accel * 2;
 12790  00404E  51F5               	movf	_Accel& (0+255),w,b
 12791  004050  0A80               	xorlw	128
 12792  004052  0F78               	addlw	-136
 12793  004054  B0D8               	btfsc	status,0,c
 12794  004056  D004               	goto	l25935
 12795                           
 12796                           ; BSR set to: 2
 12797  004058  51F5               	movf	_Accel& (0+255),w,b
 12798  00405A  0D02               	mullw	2
 12799  00405C  CFF3 F2F5          	movff	prodl,_Accel
 12800  004060                     l25935:
 12801                           
 12802                           ; BSR set to: 2
 12803                           ;main.c: 569: delta = delta * Accel;
 12804  004060  51F5               	movf	_Accel& (0+255),w,b
 12805  004062  6E1D               	movwf	___wmul@multiplier^0,c
 12806  004064  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 12807  004066  BE1D               	btfsc	___wmul@multiplier^0,7,c
 12808  004068  061E               	decf	(___wmul@multiplier+1)^0,f,c
 12809  00406A  C2D8  F01F         	movff	NormalProc@delta,___wmul@multiplicand
 12810  00406E  C2D9  F020         	movff	NormalProc@delta+1,___wmul@multiplicand+1
 12811  004072  EC12  F079         	call	___wmul	;wreg free
 12812  004076  D00D               	goto	L5
 12813  004078                     l25937:
 12814                           
 12815                           ; BSR set to: 2
 12816                           ;main.c: 571: else Accel = 1;
 12817  004078  0E01               	movlw	1
 12818  00407A  6FF5               	movwf	_Accel& (0+255),b
 12819  00407C  D00E               	goto	l2592
 12820  00407E                     l25939:
 12821                           
 12822                           ; BSR set to: 2
 12823                           ;main.c: 573: delta = delta * 5;
 12824  00407E  C2D8  F01D         	movff	NormalProc@delta,___wmul@multiplier
 12825  004082  C2D9  F01E         	movff	NormalProc@delta+1,___wmul@multiplier+1
 12826  004086  0E00               	movlw	0
 12827  004088  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 12828  00408A  0E05               	movlw	5
 12829  00408C  6E1F               	movwf	___wmul@multiplicand^0,c
 12830  00408E  EC12  F079         	call	___wmul	;wreg free
 12831  004092                     L5:
 12832  004092  C01D  F2D8         	movff	?___wmul,NormalProc@delta
 12833  004096  C01E  F2D9         	movff	?___wmul+1,NormalProc@delta+1
 12834  00409A                     l2592:
 12835                           
 12836                           ;main.c: 574: };main.c: 576: mm = Bcd2Hex(AlarmTime[0]);
 12837  00409A  0102               	movlb	2	; () banked
 12838  00409C  51FD               	movf	_AlarmTime& (0+255),w,b
 12839  00409E  EC84  F07A         	call	_Bcd2Hex
 12840  0040A2  0102               	movlb	2	; () banked
 12841  0040A4  6FDA               	movwf	NormalProc@mm& (0+255),b
 12842                           
 12843                           ; BSR set to: 2
 12844                           ;main.c: 577: if (DisplayMode == 0x02) mm = mm - (mm % 5);
 12845  0040A6  0E02               	movlw	2
 12846  0040A8  19E2               	xorwf	_DisplayMode& (0+255),w,b
 12847  0040AA  A4D8               	btfss	status,2,c
 12848  0040AC  D00F               	goto	l25945
 12849                           
 12850                           ; BSR set to: 2
 12851  0040AE  51DA               	movf	NormalProc@mm& (0+255),w,b
 12852  0040B0  6E0E               	movwf	___awmod@dividend^0,c
 12853  0040B2  6A0F               	clrf	(___awmod@dividend+1)^0,c
 12854  0040B4  BE0E               	btfsc	___awmod@dividend^0,7,c
 12855  0040B6  060F               	decf	(___awmod@dividend+1)^0,f,c
 12856  0040B8  0E00               	movlw	0
 12857  0040BA  6E11               	movwf	(___awmod@divisor+1)^0,c
 12858  0040BC  0E05               	movlw	5
 12859  0040BE  6E10               	movwf	___awmod@divisor^0,c
 12860  0040C0  ECC7  F06E         	call	___awmod	;wreg free
 12861  0040C4  500E               	movf	?___awmod^0,w,c
 12862  0040C6  0102               	movlb	2	; () banked
 12863  0040C8  5DDA               	subwf	NormalProc@mm& (0+255),w,b
 12864  0040CA  6FDA               	movwf	NormalProc@mm& (0+255),b
 12865  0040CC                     l25945:
 12866                           
 12867                           ; BSR set to: 2
 12868                           ;main.c: 578: hh = Bcd2Hex(AlarmTime[1]);
 12869  0040CC  51FE               	movf	(_AlarmTime+1)& (0+255),w,b
 12870  0040CE  EC84  F07A         	call	_Bcd2Hex
 12871  0040D2  0102               	movlb	2	; () banked
 12872  0040D4  6FD7               	movwf	NormalProc@hh& (0+255),b
 12873                           
 12874                           ; BSR set to: 2
 12875                           ;main.c: 579: IncDecTime(delta, &hh, &mm);
 12876  0040D6  C2D8  F00E         	movff	NormalProc@delta,IncDecTime@dmm
 12877  0040DA  C2D9  F00F         	movff	NormalProc@delta+1,IncDecTime@dmm+1
 12878  0040DE  0ED7               	movlw	low NormalProc@hh
 12879  0040E0  6E10               	movwf	IncDecTime@hh^0,c
 12880  0040E2  0E02               	movlw	high NormalProc@hh
 12881  0040E4  6E11               	movwf	(IncDecTime@hh+1)^0,c
 12882  0040E6  0EDA               	movlw	low NormalProc@mm
 12883  0040E8  6E12               	movwf	IncDecTime@mm^0,c
 12884  0040EA  0E02               	movlw	high NormalProc@mm
 12885  0040EC  6E13               	movwf	(IncDecTime@mm+1)^0,c
 12886  0040EE  EC54  F065         	call	_IncDecTime	;wreg free
 12887                           
 12888                           ;main.c: 580: AlarmTime[0] = Hex2Bcd(mm);
 12889  0040F2  0102               	movlb	2	; () banked
 12890  0040F4  51DA               	movf	NormalProc@mm& (0+255),w,b
 12891  0040F6  EC8A  F079         	call	_Hex2Bcd
 12892  0040FA  0102               	movlb	2	; () banked
 12893  0040FC  6FFD               	movwf	_AlarmTime& (0+255),b
 12894                           
 12895                           ; BSR set to: 2
 12896                           ;main.c: 581: AlarmTime[1] = Hex2Bcd(hh);
 12897  0040FE  51D7               	movf	NormalProc@hh& (0+255),w,b
 12898  004100  EC8A  F079         	call	_Hex2Bcd
 12899  004104  0102               	movlb	2	; () banked
 12900  004106  6FFE               	movwf	(_AlarmTime+1)& (0+255),b
 12901                           
 12902                           ; BSR set to: 2
 12903                           ;main.c: 585: if (SlideSWStatus > 2) {
 12904  004108  0E02               	movlw	2
 12905  00410A  6451               	cpfsgt	_SlideSWStatus^0,c
 12906  00410C  D006               	goto	l25957
 12907                           
 12908                           ; BSR set to: 2
 12909                           ;main.c: 586: RTC_setAlarmTime(AlarmTime);
 12910  00410E  0EFD               	movlw	low _AlarmTime
 12911  004110  6E22               	movwf	RTC_setAlarmTime@alarmtime^0,c
 12912  004112  0E02               	movlw	high _AlarmTime
 12913  004114  6E23               	movwf	(RTC_setAlarmTime@alarmtime+1)^0,c
 12914  004116  EC92  F05F         	call	_RTC_setAlarmTime	;wreg free
 12915  00411A                     l25957:
 12916                           
 12917                           ;main.c: 587: };main.c: 588: drawAlarmTime(DisplayMode, AlarmTime);
 12918  00411A  0EFD               	movlw	low _AlarmTime
 12919  00411C  0100               	movlb	0	; () banked
 12920  00411E  6F95               	movwf	drawAlarmTime@alarmtime& (0+255),b
 12921  004120  0E02               	movlw	high _AlarmTime
 12922  004122  6F96               	movwf	(drawAlarmTime@alarmtime+1)& (0+255),b
 12923  004124  0102               	movlb	2	; () banked
 12924  004126  51E2               	movf	_DisplayMode& (0+255),w,b
 12925  004128  EC38  F03F         	call	_drawAlarmTime
 12926  00412C                     l25959:
 12927                           
 12928                           ;main.c: 594: };main.c: 597: if (GetGPS >= 1) {
 12929  00412C  0102               	movlb	2	; () banked
 12930  00412E  51DF               	movf	_GetGPS& (0+255),w,b
 12931  004130  B4D8               	btfsc	status,2,c
 12932  004132  D014               	goto	l25963
 12933                           
 12934                           ; BSR set to: 2
 12935                           ;main.c: 598: display_fillCircle(7, 230, 3, 0xF800);
 12936  004134  0E00               	movlw	0
 12937  004136  0100               	movlb	0	; () banked
 12938  004138  6F61               	movwf	(display_fillCircle@x0+1)& (0+255),b
 12939  00413A  0E07               	movlw	7
 12940  00413C  6F60               	movwf	display_fillCircle@x0& (0+255),b
 12941  00413E  0E00               	movlw	0
 12942  004140  6F63               	movwf	(display_fillCircle@y0+1)& (0+255),b
 12943  004142  0EE6               	movlw	230
 12944  004144  6F62               	movwf	display_fillCircle@y0& (0+255),b
 12945  004146  0E00               	movlw	0
 12946  004148  6F65               	movwf	(display_fillCircle@r+1)& (0+255),b
 12947  00414A  0E03               	movlw	3
 12948  00414C  6F64               	movwf	display_fillCircle@r& (0+255),b
 12949  00414E  0EF8               	movlw	248
 12950  004150  6F67               	movwf	(display_fillCircle@color+1)& (0+255),b
 12951  004152  0E00               	movlw	0
 12952  004154  6F66               	movwf	display_fillCircle@color& (0+255),b
 12953  004156  ECA4  F06F         	call	_display_fillCircle	;wreg free
 12954                           
 12955                           ;main.c: 599: } else {
 12956  00415A  0012               	return	
 12957  00415C                     l25963:
 12958                           
 12959                           ; BSR set to: 2
 12960                           ;main.c: 600: display_fillCircle(7, 230, 3, 0x0400);
 12961  00415C  0E00               	movlw	0
 12962  00415E  0100               	movlb	0	; () banked
 12963  004160  6F61               	movwf	(display_fillCircle@x0+1)& (0+255),b
 12964  004162  0E07               	movlw	7
 12965  004164  6F60               	movwf	display_fillCircle@x0& (0+255),b
 12966  004166  0E00               	movlw	0
 12967  004168  6F63               	movwf	(display_fillCircle@y0+1)& (0+255),b
 12968  00416A  0EE6               	movlw	230
 12969  00416C  6F62               	movwf	display_fillCircle@y0& (0+255),b
 12970  00416E  0E00               	movlw	0
 12971  004170  6F65               	movwf	(display_fillCircle@r+1)& (0+255),b
 12972  004172  0E03               	movlw	3
 12973  004174  6F64               	movwf	display_fillCircle@r& (0+255),b
 12974  004176  0E04               	movlw	4
 12975  004178  6F67               	movwf	(display_fillCircle@color+1)& (0+255),b
 12976  00417A  0E00               	movlw	0
 12977  00417C  6F66               	movwf	display_fillCircle@color& (0+255),b
 12978  00417E  ECA4  F06F         	call	_display_fillCircle	;wreg free
 12979  004182  0012               	return		;funcret
 12980  004184                     __end_of_NormalProc:
 12981                           	callstack 0
 12982                           
 12983 ;; *************** function _strlen *****************
 12984 ;; Defined at:
 12985 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strlen.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;  s               2   13[COMRAM] PTR const unsigned char 
 12988 ;;		 -> ButtonName(48), NormalProc@str(100), 
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;  cp              2   15[COMRAM] PTR const unsigned char 
 12991 ;;		 -> ButtonName(48), NormalProc@str(100), 
 12992 ;; Return value:  Size  Location     Type
 12993 ;;                  2   13[COMRAM] unsigned int 
 12994 ;; Registers used:
 12995 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 12996 ;; Tracked objects:
 12997 ;;		On entry : 3F/0
 12998 ;;		On exit  : 0/0
 12999 ;;		Unchanged: 0/0
 13000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13001 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13004 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13005 ;;Total ram usage:        4 bytes
 13006 ;; Hardware stack levels used:    1
 13007 ;; Hardware stack levels required when called:    6
 13008 ;; This function calls:
 13009 ;;		Nothing
 13010 ;; This function is called by:
 13011 ;;		_NormalProc
 13012 ;;		_SettingProc
 13013 ;; This function uses a non-reentrant model
 13014 ;;
 13015                           
 13016                           	psect	text39
 13017  00E978                     __ptext39:
 13018                           	callstack 0
 13019  00E978                     _strlen:
 13020                           	callstack 23
 13021                           
 13022                           ; BSR set to: 0
 13023                           
 13024                           ;incstack = 0
 13025  00E978  C00E  F010         	movff	strlen@s,strlen@cp
 13026  00E97C  C00F  F011         	movff	strlen@s+1,strlen@cp+1
 13027  00E980  D002               	goto	l23807
 13028  00E982                     l23805:
 13029  00E982  4A10               	infsnz	strlen@cp^0,f,c
 13030  00E984  2A11               	incf	(strlen@cp+1)^0,f,c
 13031  00E986                     l23807:
 13032  00E986  C010  FFF6         	movff	strlen@cp,tblptrl
 13033  00E98A  C011  FFF7         	movff	strlen@cp+1,tblptrh
 13034  00E98E  0E00               	movlw	low (__mediumconst shr (0+16))
 13035  00E990  6EF8               	movwf	tblptru,c
 13036  00E992  0E0F               	movlw	(high __ramtop+-1)
 13037  00E994  64F7               	cpfsgt	tblptrh,c
 13038  00E996  D003               	bra	u26957
 13039  00E998  0008               	tblrd		*
 13040  00E99A  50F5               	movf	tablat,w,c
 13041  00E99C  D005               	bra	u26950
 13042  00E99E                     u26957:
 13043  00E99E  CFF6 FFE9          	movff	tblptrl,fsr0l
 13044  00E9A2  CFF7 FFEA          	movff	tblptrh,fsr0h
 13045  00E9A6  50EF               	movf	indf0,w,c
 13046  00E9A8                     u26950:
 13047  00E9A8  0900               	iorlw	0
 13048  00E9AA  A4D8               	btfss	status,2,c
 13049  00E9AC  D7EA               	goto	l23805
 13050  00E9AE  500E               	movf	strlen@s^0,w,c
 13051  00E9B0  5C10               	subwf	strlen@cp^0,w,c
 13052  00E9B2  6E0E               	movwf	?_strlen^0,c
 13053  00E9B4  500F               	movf	(strlen@s+1)^0,w,c
 13054  00E9B6  5811               	subwfb	(strlen@cp+1)^0,w,c
 13055  00E9B8  6E0F               	movwf	(?_strlen+1)^0,c
 13056  00E9BA  0012               	return		;funcret
 13057  00E9BC                     __end_of_strlen:
 13058                           	callstack 0
 13059                           
 13060 ;; *************** function _resetCTFG *****************
 13061 ;; Defined at:
 13062 ;;		line 242 in file "RTC8025.c"
 13063 ;; Parameters:    Size  Location     Type
 13064 ;;		None
 13065 ;; Auto vars:     Size  Location     Type
 13066 ;;		None
 13067 ;; Return value:  Size  Location     Type
 13068 ;;                  1    wreg      void 
 13069 ;; Registers used:
 13070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13071 ;; Tracked objects:
 13072 ;;		On entry : 38/4
 13073 ;;		On exit  : 0/0
 13074 ;;		Unchanged: 0/0
 13075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13080 ;;Total ram usage:        0 bytes
 13081 ;; Hardware stack levels used:    1
 13082 ;; Hardware stack levels required when called:   15
 13083 ;; This function calls:
 13084 ;;		_I2C2_Write1ByteRegister
 13085 ;; This function is called by:
 13086 ;;		_NormalProc
 13087 ;;		_init_RTC
 13088 ;; This function uses a non-reentrant model
 13089 ;;
 13090                           
 13091                           	psect	text40
 13092  00F1FE                     __ptext40:
 13093                           	callstack 0
 13094  00F1FE                     _resetCTFG:
 13095                           	callstack 14
 13096                           
 13097                           ;RTC8025.c: 245: RTC_regF = RTC_regF & ~0x04;
 13098                           
 13099                           ;incstack = 0
 13100  00F1FE  504F               	movf	_RTC_regF^0,w,c
 13101  00F200  0BFB               	andlw	251
 13102  00F202  6E4F               	movwf	_RTC_regF^0,c
 13103                           
 13104                           ;RTC8025.c: 246: I2C2_Write1ByteRegister(0x32, 0xf0, RTC_regF);
 13105  00F204  0EF0               	movlw	240
 13106  00F206  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 13107  00F208  C04F  F020         	movff	_RTC_regF,I2C2_Write1ByteRegister@data
 13108  00F20C  0E32               	movlw	50
 13109  00F20E  EC41  F072         	call	_I2C2_Write1ByteRegister
 13110                           
 13111                           ; BSR set to: 4
 13112                           ;RTC8025.c: 247: _delay((unsigned long)((80)*(64000000/4000000.0)));
 13113  00F212  0EB6               	movlw	182
 13114  00F214                     u30157:
 13115  00F214  D000               	nop2	
 13116  00F216  D000               	nop2	
 13117  00F218  2EE8               	decfsz	wreg,f,c
 13118  00F21A  D7FC               	bra	u30157
 13119  00F21C  D000               	nop2	
 13120  00F21E  D000               	nop2	
 13121  00F220  D000               	nop2	
 13122  00F222  0012               	return		;funcret
 13123  00F224                     __end_of_resetCTFG:
 13124                           	callstack 0
 13125                           
 13126 ;; *************** function _lcd_fill *****************
 13127 ;; Defined at:
 13128 ;;		line 382 in file "LCD320x240color.c"
 13129 ;; Parameters:    Size  Location     Type
 13130 ;;  bg_color        2   24[COMRAM] unsigned int 
 13131 ;; Auto vars:     Size  Location     Type
 13132 ;;  width           2   30[COMRAM] unsigned int 
 13133 ;;  height          2   28[COMRAM] unsigned int 
 13134 ;;  lo              1   27[COMRAM] unsigned char 
 13135 ;;  hi              1   26[COMRAM] unsigned char 
 13136 ;; Return value:  Size  Location     Type
 13137 ;;                  1    wreg      void 
 13138 ;; Registers used:
 13139 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13140 ;; Tracked objects:
 13141 ;;		On entry : 0/2
 13142 ;;		On exit  : 0/0
 13143 ;;		Unchanged: 0/0
 13144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13145 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13146 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13148 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13149 ;;Total ram usage:        8 bytes
 13150 ;; Hardware stack levels used:    1
 13151 ;; Hardware stack levels required when called:   10
 13152 ;; This function calls:
 13153 ;;		_SPI1_Close
 13154 ;;		_addset
 13155 ;;		_spi_master_open
 13156 ;;		_write_data
 13157 ;; This function is called by:
 13158 ;;		_NormalProc
 13159 ;;		_SettingProc
 13160 ;;		_main
 13161 ;; This function uses a non-reentrant model
 13162 ;;
 13163                           
 13164                           	psect	text41
 13165  00D80C                     __ptext41:
 13166                           	callstack 0
 13167  00D80C                     _lcd_fill:
 13168                           	callstack 20
 13169                           
 13170                           ;LCD320x240color.c: 383: uint16_t width = 320, height = 240;
 13171                           
 13172                           ;incstack = 0
 13173  00D80C  0E01               	movlw	1
 13174  00D80E  6E20               	movwf	(lcd_fill@width+1)^0,c
 13175  00D810  0E40               	movlw	64
 13176  00D812  6E1F               	movwf	lcd_fill@width^0,c
 13177  00D814  0E00               	movlw	0
 13178  00D816  6E1E               	movwf	(lcd_fill@height+1)^0,c
 13179  00D818  0EF0               	movlw	240
 13180  00D81A  6E1D               	movwf	lcd_fill@height^0,c
 13181                           
 13182                           ;LCD320x240color.c: 384: uint8_t hi = bg_color >> 8, lo = bg_color;
 13183  00D81C  C01A  F01B         	movff	lcd_fill@bg_color+1,lcd_fill@hi
 13184  00D820  C019  F01C         	movff	lcd_fill@bg_color,lcd_fill@lo
 13185                           
 13186                           ;LCD320x240color.c: 386: addset(0, 0, width, height);
 13187  00D824  0E00               	movlw	0
 13188  00D826  6E12               	movwf	(addset@x+1)^0,c
 13189  00D828  0E00               	movlw	0
 13190  00D82A  6E11               	movwf	addset@x^0,c
 13191  00D82C  0E00               	movlw	0
 13192  00D82E  6E14               	movwf	(addset@y+1)^0,c
 13193  00D830  0E00               	movlw	0
 13194  00D832  6E13               	movwf	addset@y^0,c
 13195  00D834  0E01               	movlw	1
 13196  00D836  6E16               	movwf	(addset@xx+1)^0,c
 13197  00D838  0E40               	movlw	64
 13198  00D83A  6E15               	movwf	addset@xx^0,c
 13199  00D83C  0E00               	movlw	0
 13200  00D83E  6E18               	movwf	(addset@yy+1)^0,c
 13201  00D840  0EF0               	movlw	240
 13202  00D842  6E17               	movwf	addset@yy^0,c
 13203  00D844  ECBF  F071         	call	_addset	;wreg free
 13204                           
 13205                           ;LCD320x240color.c: 388: if (spi_master_open(LCD8M)) {
 13206  00D848  0E01               	movlw	1
 13207  00D84A  EC3E  F076         	call	_spi_master_open
 13208  00D84E  0900               	iorlw	0
 13209  00D850  B4D8               	btfsc	status,2,c
 13210  00D852  0012               	return	
 13211                           
 13212                           ;LCD320x240color.c: 390: do { LATAbits.LATA0 = 0; } while(0);
 13213  00D854  9089               	bcf	137,0,c	;volatile
 13214  00D856  D012               	goto	l23763
 13215  00D858                     l23757:
 13216                           
 13217                           ;LCD320x240color.c: 393: write_data(hi);
 13218  00D858  501B               	movf	lcd_fill@hi^0,w,c
 13219  00D85A  EC4B  F07B         	call	_write_data
 13220                           
 13221                           ;LCD320x240color.c: 394: write_data(lo);
 13222  00D85E  501C               	movf	lcd_fill@lo^0,w,c
 13223  00D860  EC4B  F07B         	call	_write_data
 13224  00D864                     l23759:
 13225  00D864  061F               	decf	lcd_fill@width^0,f,c
 13226  00D866  A0D8               	btfss	status,0,c
 13227  00D868  0620               	decf	(lcd_fill@width+1)^0,f,c
 13228  00D86A  281F               	incf	lcd_fill@width^0,w,c
 13229  00D86C  E1F5               	bnz	l23757
 13230  00D86E  2820               	incf	(lcd_fill@width+1)^0,w,c
 13231  00D870  A4D8               	btfss	status,2,c
 13232  00D872  D7F2               	goto	l23757
 13233                           
 13234                           ;LCD320x240color.c: 395: };LCD320x240color.c: 396: width = 320;
 13235  00D874  0E01               	movlw	1
 13236  00D876  6E20               	movwf	(lcd_fill@width+1)^0,c
 13237  00D878  0E40               	movlw	64
 13238  00D87A  6E1F               	movwf	lcd_fill@width^0,c
 13239  00D87C                     l23763:
 13240  00D87C  061D               	decf	lcd_fill@height^0,f,c
 13241  00D87E  A0D8               	btfss	status,0,c
 13242  00D880  061E               	decf	(lcd_fill@height+1)^0,f,c
 13243  00D882  281D               	incf	lcd_fill@height^0,w,c
 13244  00D884  E1EF               	bnz	l23759
 13245  00D886  281E               	incf	(lcd_fill@height+1)^0,w,c
 13246  00D888  A4D8               	btfss	status,2,c
 13247  00D88A  D7EC               	goto	l23759
 13248                           
 13249                           ;LCD320x240color.c: 397: };LCD320x240color.c: 398: do { LATAbits.LATA0 = 1; } while(0);
 13250  00D88C  8089               	bsf	137,0,c	;volatile
 13251                           
 13252                           ;LCD320x240color.c: 399: SPI1_Close();
 13253  00D88E  ECFF  F07B         	call	_SPI1_Close	;wreg free
 13254  00D892  0012               	return		;funcret
 13255  00D894                     __end_of_lcd_fill:
 13256                           	callstack 0
 13257                           
 13258 ;; *************** function _glcd_init2 *****************
 13259 ;; Defined at:
 13260 ;;		line 1446 in file "LCD320x240color.c"
 13261 ;; Parameters:    Size  Location     Type
 13262 ;;		None
 13263 ;; Auto vars:     Size  Location     Type
 13264 ;;		None
 13265 ;; Return value:  Size  Location     Type
 13266 ;;                  1    wreg      void 
 13267 ;; Registers used:
 13268 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13269 ;; Tracked objects:
 13270 ;;		On entry : 3F/0
 13271 ;;		On exit  : 0/0
 13272 ;;		Unchanged: 0/0
 13273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13276 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13277 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13278 ;;Total ram usage:        1 bytes
 13279 ;; Hardware stack levels used:    1
 13280 ;; Hardware stack levels required when called:    9
 13281 ;; This function calls:
 13282 ;;		_SPI1_Close
 13283 ;;		_SPI1_ExchangeByte
 13284 ;;		_spi_master_open
 13285 ;;		_write_command
 13286 ;; This function is called by:
 13287 ;;		_NormalProc
 13288 ;; This function uses a non-reentrant model
 13289 ;;
 13290                           
 13291                           	psect	text42
 13292  00ED2C                     __ptext42:
 13293                           	callstack 0
 13294  00ED2C                     _glcd_init2:
 13295                           	callstack 20
 13296                           
 13297                           ; BSR set to: 0
 13298                           ;LCD320x240color.c: 1450: if (spi_master_open(LCD8M)) {
 13299                           
 13300                           ;incstack = 0
 13301  00ED2C  0E01               	movlw	1
 13302  00ED2E  EC3E  F076         	call	_spi_master_open
 13303  00ED32  0900               	iorlw	0
 13304  00ED34  B4D8               	btfsc	status,2,c
 13305  00ED36  0012               	return	
 13306                           
 13307                           ;LCD320x240color.c: 1452: do { LATAbits.LATA0 = 1; } while(0);
 13308  00ED38  8089               	bsf	137,0,c	;volatile
 13309                           
 13310                           ;LCD320x240color.c: 1453: SPI1_ExchangeByte(0);
 13311  00ED3A  0E00               	movlw	0
 13312  00ED3C  EC0D  F07B         	call	_SPI1_ExchangeByte
 13313  00ED40  9089               	bcf	137,0,c	;volatile
 13314                           
 13315                           ;LCD320x240color.c: 1455: write_command(0x11);
 13316  00ED42  0E11               	movlw	17
 13317  00ED44  EC51  F07B         	call	_write_command
 13318                           
 13319                           ;LCD320x240color.c: 1456: _delay((unsigned long)((10)*(64000000/4000.0)));
 13320  00ED48  0ED0               	movlw	208
 13321  00ED4A  6E11               	movwf	??_glcd_init2^0,c
 13322  00ED4C  0ECA               	movlw	202
 13323  00ED4E                     u30167:
 13324  00ED4E  2EE8               	decfsz	wreg,f,c
 13325  00ED50  D7FE               	bra	u30167
 13326  00ED52  2E11               	decfsz	??_glcd_init2^0,f,c
 13327  00ED54  D7FC               	bra	u30167
 13328                           
 13329                           ;LCD320x240color.c: 1457: write_command(0x2c);
 13330  00ED56  0E2C               	movlw	44
 13331  00ED58  EC51  F07B         	call	_write_command
 13332  00ED5C  8089               	bsf	137,0,c	;volatile
 13333                           
 13334                           ;LCD320x240color.c: 1459: SPI1_Close();
 13335  00ED5E  ECFF  F07B         	call	_SPI1_Close	;wreg free
 13336  00ED62  0012               	return		;funcret
 13337  00ED64                     __end_of_glcd_init2:
 13338                           	callstack 0
 13339                           
 13340 ;; *************** function _get_tempHumidity *****************
 13341 ;; Defined at:
 13342 ;;		line 48 in file "TempHumidityAM2320.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  temp            2   34[COMRAM] PTR int 
 13345 ;;		 -> Temp(2), 
 13346 ;;  humidity        2   36[COMRAM] PTR int 
 13347 ;;		 -> Humidity(2), 
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;  work            8   43[COMRAM] unsigned char [8]
 13350 ;;  data            3   40[COMRAM] unsigned char [3]
 13351 ;;  CRC             2   53[COMRAM] unsigned int 
 13352 ;;  error           2   51[COMRAM] unsigned int 
 13353 ;; Return value:  Size  Location     Type
 13354 ;;                  1    wreg      void 
 13355 ;; Registers used:
 13356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13357 ;; Tracked objects:
 13358 ;;		On entry : 3F/2
 13359 ;;		On exit  : 3F/4
 13360 ;;		Unchanged: 0/0
 13361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13362 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13363 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13364 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13365 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13366 ;;Total ram usage:       21 bytes
 13367 ;; Hardware stack levels used:    1
 13368 ;; Hardware stack levels required when called:   15
 13369 ;; This function calls:
 13370 ;;		_I2C2_Read1ByteRegister
 13371 ;;		_I2C2_ReadNBytes
 13372 ;;		_I2C2_WriteNBytes
 13373 ;;		_crc16
 13374 ;; This function is called by:
 13375 ;;		_NormalProc
 13376 ;; This function uses a non-reentrant model
 13377 ;;
 13378                           
 13379                           	psect	text43
 13380  00C2AC                     __ptext43:
 13381                           	callstack 0
 13382  00C2AC                     _get_tempHumidity:
 13383                           	callstack 14
 13384                           
 13385                           ; BSR set to: 2
 13386                           ;TempHumidityAM2320.c: 49: uint8_t work[8];;TempHumidityAM2320.c: 50: uint8_t data[] = {
      +                           0x03, 0x00, 0x04 };
 13387                           
 13388                           ;incstack = 0
 13389  00C2AC  C3ED  F029         	movff	get_tempHumidity@F6337,get_tempHumidity@data
 13390  00C2B0  C3EE  F02A         	movff	get_tempHumidity@F6337+1,get_tempHumidity@data+1
 13391  00C2B4  C3EF  F02B         	movff	get_tempHumidity@F6337+2,get_tempHumidity@data+2
 13392                           
 13393                           ; BSR set to: 2
 13394                           ;TempHumidityAM2320.c: 51: uint16_t error;;TempHumidityAM2320.c: 52: uint16_t CRC;;TempH
      +                          umidityAM2320.c: 55: I2C2_Read1ByteRegister(0x5c, 0);
 13395  00C2B8  0E00               	movlw	0
 13396  00C2BA  6E1F               	movwf	I2C2_Read1ByteRegister@reg^0,c
 13397  00C2BC  0E5C               	movlw	92
 13398  00C2BE  EC36  F071         	call	_I2C2_Read1ByteRegister
 13399                           
 13400                           ; BSR set to: 4
 13401                           ;TempHumidityAM2320.c: 56: _delay((unsigned long)((1)*(64000000/4000.0)));
 13402  00C2C2  0E15               	movlw	21
 13403  00C2C4  6E27               	movwf	??_get_tempHumidity^0,c
 13404  00C2C6  0EC6               	movlw	198
 13405  00C2C8                     u30177:
 13406  00C2C8  2EE8               	decfsz	wreg,f,c
 13407  00C2CA  D7FE               	bra	u30177
 13408  00C2CC  2E27               	decfsz	??_get_tempHumidity^0,f,c
 13409  00C2CE  D7FC               	bra	u30177
 13410  00C2D0  D000               	nop2	
 13411                           
 13412                           ;TempHumidityAM2320.c: 58: I2C2_WriteNBytes(0x5c, data, 3);
 13413  00C2D2  0E29               	movlw	low get_tempHumidity@data
 13414  00C2D4  6E1F               	movwf	I2C2_WriteNBytes@data^0,c
 13415  00C2D6  0E00               	movlw	0
 13416  00C2D8  6E21               	movwf	(I2C2_WriteNBytes@len+1)^0,c
 13417  00C2DA  0E03               	movlw	3
 13418  00C2DC  6E20               	movwf	I2C2_WriteNBytes@len^0,c
 13419  00C2DE  0E5C               	movlw	92
 13420  00C2E0  ECDE  F074         	call	_I2C2_WriteNBytes
 13421                           
 13422                           ;TempHumidityAM2320.c: 59: _delay((unsigned long)((2)*(64000000/4000.0)));
 13423  00C2E4  0E2A               	movlw	42
 13424  00C2E6  6E27               	movwf	??_get_tempHumidity^0,c
 13425  00C2E8  0E8E               	movlw	142
 13426  00C2EA                     u30187:
 13427  00C2EA  2EE8               	decfsz	wreg,f,c
 13428  00C2EC  D7FE               	bra	u30187
 13429  00C2EE  2E27               	decfsz	??_get_tempHumidity^0,f,c
 13430  00C2F0  D7FC               	bra	u30187
 13431                           
 13432                           ;TempHumidityAM2320.c: 61: I2C2_ReadNBytes(0x5c, work, 8);
 13433  00C2F2  0E2C               	movlw	low get_tempHumidity@work
 13434  00C2F4  6E1F               	movwf	I2C2_ReadNBytes@data^0,c
 13435  00C2F6  0E00               	movlw	0
 13436  00C2F8  6E21               	movwf	(I2C2_ReadNBytes@len+1)^0,c
 13437  00C2FA  0E08               	movlw	8
 13438  00C2FC  6E20               	movwf	I2C2_ReadNBytes@len^0,c
 13439  00C2FE  0E5C               	movlw	92
 13440  00C300  EC38  F077         	call	_I2C2_ReadNBytes
 13441                           
 13442                           ; BSR set to: 4
 13443                           ;TempHumidityAM2320.c: 64: CRC = work[6] + (work[7]<<8);
 13444  00C304  5033               	movf	(get_tempHumidity@work+7)^0,w,c
 13445  00C306  6E28               	movwf	(??_get_tempHumidity+1)^0,c
 13446  00C308  6A27               	clrf	??_get_tempHumidity^0,c
 13447  00C30A  5032               	movf	(get_tempHumidity@work+6)^0,w,c
 13448  00C30C  2427               	addwf	??_get_tempHumidity^0,w,c
 13449  00C30E  6E36               	movwf	get_tempHumidity@CRC^0,c
 13450  00C310  0E00               	movlw	0
 13451  00C312  2028               	addwfc	(??_get_tempHumidity+1)^0,w,c
 13452  00C314  6E37               	movwf	(get_tempHumidity@CRC+1)^0,c
 13453                           
 13454                           ; BSR set to: 4
 13455                           ;TempHumidityAM2320.c: 65: error = crc16(work, 6);
 13456  00C316  0E2C               	movlw	low get_tempHumidity@work
 13457  00C318  6E0E               	movwf	crc16@ptr^0,c
 13458  00C31A  0E06               	movlw	6
 13459  00C31C  6E0F               	movwf	crc16@len^0,c
 13460  00C31E  EC14  F073         	call	_crc16	;wreg free
 13461  00C322  C00E  F034         	movff	?_crc16,get_tempHumidity@error
 13462  00C326  C00F  F035         	movff	?_crc16+1,get_tempHumidity@error+1
 13463                           
 13464                           ; BSR set to: 4
 13465                           ;TempHumidityAM2320.c: 66: if (CRC != error) {
 13466  00C32A  5034               	movf	get_tempHumidity@error^0,w,c
 13467  00C32C  1836               	xorwf	get_tempHumidity@CRC^0,w,c
 13468  00C32E  E128               	bnz	l3497
 13469  00C330  5035               	movf	(get_tempHumidity@error+1)^0,w,c
 13470  00C332  1837               	xorwf	(get_tempHumidity@CRC+1)^0,w,c
 13471  00C334  A4D8               	btfss	status,2,c
 13472  00C336  0012               	return	
 13473                           
 13474                           ; BSR set to: 4
 13475                           ;TempHumidityAM2320.c: 70: *temp = (work[4]<<8) + work[5];
 13476  00C338  5031               	movf	(get_tempHumidity@work+5)^0,w,c
 13477  00C33A  C030  F027         	movff	get_tempHumidity@work+4,??_get_tempHumidity
 13478  00C33E  6A28               	clrf	(??_get_tempHumidity+1)^0,c
 13479  00C340  C027  F028         	movff	??_get_tempHumidity,??_get_tempHumidity+1
 13480  00C344  6A27               	clrf	??_get_tempHumidity^0,c
 13481  00C346  2627               	addwf	??_get_tempHumidity^0,f,c
 13482  00C348  0E00               	movlw	0
 13483  00C34A  2228               	addwfc	(??_get_tempHumidity+1)^0,f,c
 13484  00C34C  C023  FFD9         	movff	get_tempHumidity@temp,fsr2l
 13485  00C350  C024  FFDA         	movff	get_tempHumidity@temp+1,fsr2h
 13486  00C354  C027  FFDE         	movff	??_get_tempHumidity,postinc2
 13487  00C358  C028  FFDD         	movff	??_get_tempHumidity+1,postdec2
 13488                           
 13489                           ;TempHumidityAM2320.c: 71: *humidity = (work[2]<<8) + work[3];
 13490  00C35C  502F               	movf	(get_tempHumidity@work+3)^0,w,c
 13491  00C35E  C02E  F027         	movff	get_tempHumidity@work+2,??_get_tempHumidity
 13492  00C362  6A28               	clrf	(??_get_tempHumidity+1)^0,c
 13493  00C364  C027  F028         	movff	??_get_tempHumidity,??_get_tempHumidity+1
 13494  00C368  6A27               	clrf	??_get_tempHumidity^0,c
 13495  00C36A  2627               	addwf	??_get_tempHumidity^0,f,c
 13496  00C36C  0E00               	movlw	0
 13497  00C36E  2228               	addwfc	(??_get_tempHumidity+1)^0,f,c
 13498  00C370  C025  FFD9         	movff	get_tempHumidity@humidity,fsr2l
 13499  00C374  C026  FFDA         	movff	get_tempHumidity@humidity+1,fsr2h
 13500  00C378  C027  FFDE         	movff	??_get_tempHumidity,postinc2
 13501  00C37C  C028  FFDD         	movff	??_get_tempHumidity+1,postdec2
 13502  00C380                     l3497:
 13503                           
 13504                           ; BSR set to: 4
 13505  00C380  0012               	return		;funcret
 13506  00C382                     __end_of_get_tempHumidity:
 13507                           	callstack 0
 13508                           
 13509 ;; *************** function _crc16 *****************
 13510 ;; Defined at:
 13511 ;;		line 24 in file "TempHumidityAM2320.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;  ptr             1   13[COMRAM] PTR unsigned char 
 13514 ;;		 -> get_tempHumidity@work(8), 
 13515 ;;  len             1   14[COMRAM] char 
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;  crc             2   17[COMRAM] unsigned int 
 13518 ;;  ii              1   16[COMRAM] char 
 13519 ;; Return value:  Size  Location     Type
 13520 ;;                  2   13[COMRAM] unsigned int 
 13521 ;; Registers used:
 13522 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13523 ;; Tracked objects:
 13524 ;;		On entry : 3F/4
 13525 ;;		On exit  : 3F/4
 13526 ;;		Unchanged: 3F/0
 13527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13528 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13529 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13530 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13531 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13532 ;;Total ram usage:        6 bytes
 13533 ;; Hardware stack levels used:    1
 13534 ;; Hardware stack levels required when called:    6
 13535 ;; This function calls:
 13536 ;;		Nothing
 13537 ;; This function is called by:
 13538 ;;		_get_tempHumidity
 13539 ;; This function uses a non-reentrant model
 13540 ;;
 13541                           
 13542                           	psect	text44
 13543  00E628                     __ptext44:
 13544                           	callstack 0
 13545  00E628                     _crc16:
 13546                           	callstack 22
 13547                           
 13548                           ; BSR set to: 4
 13549                           ;TempHumidityAM2320.c: 25: uint16_t crc = 0xFFFF;
 13550                           
 13551                           ; BSR set to: 4
 13552                           ;incstack = 0
 13553  00E628  6812               	setf	crc16@crc^0,c
 13554  00E62A  6813               	setf	(crc16@crc+1)^0,c
 13555                           
 13556                           ;TempHumidityAM2320.c: 26: int8_t ii;;TempHumidityAM2320.c: 28: while (len--) {
 13557  00E62C  D01D               	goto	u26170
 13558  00E62E                     l23215:
 13559                           
 13560                           ; BSR set to: 4
 13561                           ;TempHumidityAM2320.c: 29: crc ^= *ptr++;
 13562  00E62E  500E               	movf	crc16@ptr^0,w,c
 13563  00E630  6ED9               	movwf	fsr2l,c
 13564  00E632  6ADA               	clrf	fsr2h,c
 13565  00E634  50DF               	movf	indf2,w,c
 13566  00E636  6E10               	movwf	??_crc16^0,c
 13567  00E638  5010               	movf	??_crc16^0,w,c
 13568  00E63A  1A12               	xorwf	crc16@crc^0,f,c
 13569                           
 13570                           ; BSR set to: 4
 13571  00E63C  2A0E               	incf	crc16@ptr^0,f,c
 13572                           
 13573                           ; BSR set to: 4
 13574                           ;TempHumidityAM2320.c: 31: for (ii = 0; ii < 8; ii++) {
 13575  00E63E  0E00               	movlw	0
 13576  00E640  6E11               	movwf	crc16@ii^0,c
 13577  00E642                     l3485:
 13578                           
 13579                           ; BSR set to: 4
 13580                           ;TempHumidityAM2320.c: 32: if (crc & 0x01) {
 13581  00E642  A012               	btfss	crc16@crc^0,0,c
 13582  00E644  D008               	goto	l23229
 13583                           
 13584                           ; BSR set to: 4
 13585                           ;TempHumidityAM2320.c: 33: crc >>= 1;
 13586  00E646  90D8               	bcf	status,0,c
 13587  00E648  3213               	rrcf	(crc16@crc+1)^0,f,c
 13588  00E64A  3212               	rrcf	crc16@crc^0,f,c
 13589                           
 13590                           ; BSR set to: 4
 13591                           ;TempHumidityAM2320.c: 34: crc ^= 0xA001;
 13592  00E64C  0E01               	movlw	1
 13593  00E64E  1A12               	xorwf	crc16@crc^0,f,c
 13594  00E650  0EA0               	movlw	160
 13595  00E652  1A13               	xorwf	(crc16@crc+1)^0,f,c
 13596                           
 13597                           ;TempHumidityAM2320.c: 35: } else {
 13598  00E654  D003               	goto	l3488
 13599  00E656                     l23229:
 13600                           
 13601                           ; BSR set to: 4
 13602                           ;TempHumidityAM2320.c: 36: crc >>= 1;
 13603  00E656  90D8               	bcf	status,0,c
 13604  00E658  3213               	rrcf	(crc16@crc+1)^0,f,c
 13605  00E65A  3212               	rrcf	crc16@crc^0,f,c
 13606  00E65C                     l3488:
 13607                           
 13608                           ; BSR set to: 4
 13609  00E65C  2A11               	incf	crc16@ii^0,f,c
 13610                           
 13611                           ; BSR set to: 4
 13612  00E65E  5011               	movf	crc16@ii^0,w,c
 13613  00E660  0A80               	xorlw	128
 13614  00E662  0F78               	addlw	-136
 13615  00E664  A0D8               	btfss	status,0,c
 13616  00E666  D7ED               	goto	l3485
 13617  00E668                     u26170:
 13618                           
 13619                           ; BSR set to: 4
 13620  00E668  060F               	decf	crc16@len^0,f,c
 13621  00E66A  280F               	incf	crc16@len^0,w,c
 13622  00E66C  A4D8               	btfss	status,2,c
 13623  00E66E  D7DF               	goto	l23215
 13624                           
 13625                           ; BSR set to: 4
 13626                           ;TempHumidityAM2320.c: 37: };TempHumidityAM2320.c: 38: };TempHumidityAM2320.c: 39: };Tem
      +                          pHumidityAM2320.c: 40: return crc;
 13627  00E670  C012  F00E         	movff	crc16@crc,?_crc16
 13628  00E674  C013  F00F         	movff	crc16@crc+1,?_crc16+1
 13629                           
 13630                           ; BSR set to: 4
 13631  00E678  0012               	return		;funcret
 13632  00E67A                     __end_of_crc16:
 13633                           	callstack 0
 13634                           
 13635 ;; *************** function _I2C2_WriteNBytes *****************
 13636 ;; Defined at:
 13637 ;;		line 111 in file "mcc_generated_files/examples/i2c2_master_example.c"
 13638 ;; Parameters:    Size  Location     Type
 13639 ;;  address         1    wreg     unsigned char 
 13640 ;;  data            1   30[COMRAM] PTR unsigned char 
 13641 ;;		 -> get_tempHumidity@data(3), 
 13642 ;;  len             2   31[COMRAM] unsigned int 
 13643 ;; Auto vars:     Size  Location     Type
 13644 ;;  address         1   33[COMRAM] unsigned char 
 13645 ;; Return value:  Size  Location     Type
 13646 ;;                  1    wreg      void 
 13647 ;; Registers used:
 13648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13649 ;; Tracked objects:
 13650 ;;		On entry : 0/4
 13651 ;;		On exit  : 3F/4
 13652 ;;		Unchanged: 0/0
 13653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13654 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13657 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;Total ram usage:        4 bytes
 13659 ;; Hardware stack levels used:    1
 13660 ;; Hardware stack levels required when called:   14
 13661 ;; This function calls:
 13662 ;;		_I2C2_Close
 13663 ;;		_I2C2_MasterWrite
 13664 ;;		_I2C2_Open
 13665 ;;		_I2C2_SetAddressNackCallback
 13666 ;;		_I2C2_SetBuffer
 13667 ;; This function is called by:
 13668 ;;		_get_tempHumidity
 13669 ;; This function uses a non-reentrant model
 13670 ;;
 13671                           
 13672                           	psect	text45
 13673  00E9BC                     __ptext45:
 13674                           	callstack 0
 13675  00E9BC                     _I2C2_WriteNBytes:
 13676                           	callstack 14
 13677                           
 13678                           ; BSR set to: 4
 13679                           ;incstack = 0
 13680                           ;I2C2_WriteNBytes@address stored from wreg
 13681  00E9BC  6E22               	movwf	I2C2_WriteNBytes@address^0,c
 13682  00E9BE                     
 13683                           ;i2c2_master_example.c: 113: while(!I2C2_Open(address));
 13684  00E9BE  5022               	movf	I2C2_WriteNBytes@address^0,w,c
 13685  00E9C0  EC55  F06D         	call	_I2C2_Open
 13686  00E9C4  0900               	iorlw	0
 13687  00E9C6  B4D8               	btfsc	status,2,c
 13688  00E9C8  D7FA               	goto	l22425
 13689                           
 13690                           ; BSR set to: 4
 13691                           ;i2c2_master_example.c: 114: I2C2_SetBuffer(data,len);
 13692  00E9CA  C01F  F00E         	movff	I2C2_WriteNBytes@data,I2C2_SetBuffer@buffer
 13693  00E9CE  6A0F               	clrf	(I2C2_SetBuffer@buffer+1)^0,c
 13694  00E9D0  C020  F010         	movff	I2C2_WriteNBytes@len,I2C2_SetBuffer@bufferSize
 13695  00E9D4  C021  F011         	movff	I2C2_WriteNBytes@len+1,I2C2_SetBuffer@bufferSize+1
 13696  00E9D8  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 13697                           
 13698                           ; BSR set to: 4
 13699                           ;i2c2_master_example.c: 115: I2C2_SetAddressNackCallback((0),(0));
 13700  00E9DC  0E00               	movlw	0
 13701  00E9DE  6E13               	movwf	I2C2_SetAddressNackCallback@cb^0,c
 13702  00E9E0  0E00               	movlw	0
 13703  00E9E2  6E14               	movwf	(I2C2_SetAddressNackCallback@cb+1)^0,c
 13704  00E9E4  0E00               	movlw	0
 13705  00E9E6  6E15               	movwf	I2C2_SetAddressNackCallback@ptr^0,c
 13706  00E9E8  0E00               	movlw	0
 13707  00E9EA  6E16               	movwf	(I2C2_SetAddressNackCallback@ptr+1)^0,c
 13708  00E9EC  EC4A  F07A         	call	_I2C2_SetAddressNackCallback	;wreg free
 13709                           
 13710                           ;i2c2_master_example.c: 116: I2C2_MasterWrite();
 13711  00E9F0  ECBC  F07B         	call	_I2C2_MasterWrite	;wreg free
 13712  00E9F4                     l22435:
 13713                           
 13714                           ; BSR set to: 4
 13715  00E9F4  EC58  F079         	call	_I2C2_Close	;wreg free
 13716  00E9F8  06E8               	decf	wreg,f,c
 13717  00E9FA  A4D8               	btfss	status,2,c
 13718  00E9FC  0012               	return	
 13719  00E9FE  D7FA               	goto	l22435
 13720  00EA00                     __end_of_I2C2_WriteNBytes:
 13721                           	callstack 0
 13722                           
 13723 ;; *************** function _I2C2_ReadNBytes *****************
 13724 ;; Defined at:
 13725 ;;		line 120 in file "mcc_generated_files/examples/i2c2_master_example.c"
 13726 ;; Parameters:    Size  Location     Type
 13727 ;;  address         1    wreg     unsigned char 
 13728 ;;  data            1   30[COMRAM] PTR unsigned char 
 13729 ;;		 -> get_tempHumidity@work(8), 
 13730 ;;  len             2   31[COMRAM] unsigned int 
 13731 ;; Auto vars:     Size  Location     Type
 13732 ;;  address         1   33[COMRAM] unsigned char 
 13733 ;; Return value:  Size  Location     Type
 13734 ;;                  1    wreg      void 
 13735 ;; Registers used:
 13736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13737 ;; Tracked objects:
 13738 ;;		On entry : 0/4
 13739 ;;		On exit  : 3F/4
 13740 ;;		Unchanged: 0/0
 13741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13742 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;Total ram usage:        4 bytes
 13747 ;; Hardware stack levels used:    1
 13748 ;; Hardware stack levels required when called:   14
 13749 ;; This function calls:
 13750 ;;		_I2C2_Close
 13751 ;;		_I2C2_MasterRead
 13752 ;;		_I2C2_Open
 13753 ;;		_I2C2_SetBuffer
 13754 ;; This function is called by:
 13755 ;;		_get_tempHumidity
 13756 ;; This function uses a non-reentrant model
 13757 ;;
 13758                           
 13759                           	psect	text46
 13760  00EE70                     __ptext46:
 13761                           	callstack 0
 13762  00EE70                     _I2C2_ReadNBytes:
 13763                           	callstack 14
 13764                           
 13765                           ; BSR set to: 4
 13766                           ;incstack = 0
 13767                           ;I2C2_ReadNBytes@address stored from wreg
 13768  00EE70  6E22               	movwf	I2C2_ReadNBytes@address^0,c
 13769  00EE72                     
 13770                           ;i2c2_master_example.c: 122: while(!I2C2_Open(address));
 13771  00EE72  5022               	movf	I2C2_ReadNBytes@address^0,w,c
 13772  00EE74  EC55  F06D         	call	_I2C2_Open
 13773  00EE78  0900               	iorlw	0
 13774  00EE7A  B4D8               	btfsc	status,2,c
 13775  00EE7C  D7FA               	goto	l22437
 13776                           
 13777                           ; BSR set to: 4
 13778                           ;i2c2_master_example.c: 123: I2C2_SetBuffer(data,len);
 13779  00EE7E  C01F  F00E         	movff	I2C2_ReadNBytes@data,I2C2_SetBuffer@buffer
 13780  00EE82  6A0F               	clrf	(I2C2_SetBuffer@buffer+1)^0,c
 13781  00EE84  C020  F010         	movff	I2C2_ReadNBytes@len,I2C2_SetBuffer@bufferSize
 13782  00EE88  C021  F011         	movff	I2C2_ReadNBytes@len+1,I2C2_SetBuffer@bufferSize+1
 13783  00EE8C  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 13784                           
 13785                           ; BSR set to: 4
 13786                           ;i2c2_master_example.c: 124: I2C2_MasterRead();
 13787  00EE90  ECA8  F07B         	call	_I2C2_MasterRead	;wreg free
 13788  00EE94                     l22445:
 13789                           
 13790                           ; BSR set to: 4
 13791  00EE94  EC58  F079         	call	_I2C2_Close	;wreg free
 13792  00EE98  06E8               	decf	wreg,f,c
 13793  00EE9A  A4D8               	btfss	status,2,c
 13794  00EE9C  0012               	return	
 13795  00EE9E  D7FA               	goto	l22445
 13796  00EEA0                     __end_of_I2C2_ReadNBytes:
 13797                           	callstack 0
 13798                           
 13799 ;; *************** function _I2C2_MasterRead *****************
 13800 ;; Defined at:
 13801 ;;		line 246 in file "mcc_generated_files/i2c2_master.c"
 13802 ;; Parameters:    Size  Location     Type
 13803 ;;		None
 13804 ;; Auto vars:     Size  Location     Type
 13805 ;;		None
 13806 ;; Return value:  Size  Location     Type
 13807 ;;                  1    wreg      enum E92
 13808 ;; Registers used:
 13809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13810 ;; Tracked objects:
 13811 ;;		On entry : 3F/4
 13812 ;;		On exit  : 3F/4
 13813 ;;		Unchanged: 0/0
 13814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13819 ;;Total ram usage:        0 bytes
 13820 ;; Hardware stack levels used:    1
 13821 ;; Hardware stack levels required when called:   13
 13822 ;; This function calls:
 13823 ;;		_I2C2_MasterOperation
 13824 ;; This function is called by:
 13825 ;;		_I2C2_ReadNBytes
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           	psect	text47
 13830  00F750                     __ptext47:
 13831                           	callstack 0
 13832  00F750                     _I2C2_MasterRead:
 13833                           	callstack 14
 13834                           
 13835                           ; BSR set to: 4
 13836                           ;i2c2_master.c: 248: return I2C2_MasterOperation(1);;	Return value of _I2C2_MasterRead i
      +                          s never used
 13837                           
 13838                           ; BSR set to: 4
 13839                           ;incstack = 0
 13840  00F750  0E01               	movlw	1
 13841  00F752  ECEF  F077         	call	_I2C2_MasterOperation
 13842                           
 13843                           ; BSR set to: 4
 13844  00F756  0012               	return		;funcret
 13845  00F758                     __end_of_I2C2_MasterRead:
 13846                           	callstack 0
 13847                           
 13848 ;; *************** function _I2C2_Read1ByteRegister *****************
 13849 ;; Defined at:
 13850 ;;		line 63 in file "mcc_generated_files/examples/i2c2_master_example.c"
 13851 ;; Parameters:    Size  Location     Type
 13852 ;;  address         1    wreg     unsigned char 
 13853 ;;  reg             1   30[COMRAM] unsigned char 
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;  address         1   31[COMRAM] unsigned char 
 13856 ;;  returnValue     1   32[COMRAM] unsigned char 
 13857 ;; Return value:  Size  Location     Type
 13858 ;;                  1    wreg      unsigned char 
 13859 ;; Registers used:
 13860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13861 ;; Tracked objects:
 13862 ;;		On entry : 0/0
 13863 ;;		On exit  : 3F/4
 13864 ;;		Unchanged: 0/0
 13865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13866 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13867 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13869 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13870 ;;Total ram usage:        3 bytes
 13871 ;; Hardware stack levels used:    1
 13872 ;; Hardware stack levels required when called:   14
 13873 ;; This function calls:
 13874 ;;		_I2C2_Close
 13875 ;;		_I2C2_MasterWrite
 13876 ;;		_I2C2_Open
 13877 ;;		_I2C2_SetAddressNackCallback
 13878 ;;		_I2C2_SetBuffer
 13879 ;;		_I2C2_SetDataCompleteCallback
 13880 ;; This function is called by:
 13881 ;;		_init_RTC
 13882 ;;		_get_tempHumidity
 13883 ;; This function uses a non-reentrant model
 13884 ;;
 13885                           
 13886                           	psect	text48
 13887  00E26C                     __ptext48:
 13888                           	callstack 0
 13889  00E26C                     _I2C2_Read1ByteRegister:
 13890                           	callstack 15
 13891                           
 13892                           ; BSR set to: 4
 13893                           ;incstack = 0
 13894                           ;I2C2_Read1ByteRegister@address stored from wreg
 13895  00E26C  6E20               	movwf	I2C2_Read1ByteRegister@address^0,c
 13896                           
 13897                           ;i2c2_master_example.c: 65: uint8_t returnValue = 0x00;
 13898  00E26E  0E00               	movlw	0
 13899  00E270  6E21               	movwf	I2C2_Read1ByteRegister@returnValue^0,c
 13900  00E272                     l22395:
 13901  00E272  5020               	movf	I2C2_Read1ByteRegister@address^0,w,c
 13902  00E274  EC55  F06D         	call	_I2C2_Open
 13903  00E278  0900               	iorlw	0
 13904  00E27A  B4D8               	btfsc	status,2,c
 13905  00E27C  D7FA               	goto	l22395
 13906                           
 13907                           ; BSR set to: 4
 13908                           ;i2c2_master_example.c: 68: I2C2_SetDataCompleteCallback(rd1RegCompleteHandler,&returnVa
      +                          lue);
 13909  00E27E  0E62               	movlw	low _rd1RegCompleteHandler
 13910  00E280  6E13               	movwf	I2C2_SetDataCompleteCallback@cb^0,c
 13911  00E282  0EF0               	movlw	high _rd1RegCompleteHandler
 13912  00E284  6E14               	movwf	(I2C2_SetDataCompleteCallback@cb+1)^0,c
 13913  00E286  0E21               	movlw	low I2C2_Read1ByteRegister@returnValue
 13914  00E288  6E15               	movwf	I2C2_SetDataCompleteCallback@ptr^0,c
 13915  00E28A  6A16               	clrf	(I2C2_SetDataCompleteCallback@ptr+1)^0,c
 13916  00E28C  EC62  F07A         	call	_I2C2_SetDataCompleteCallback	;wreg free
 13917                           
 13918                           ;i2c2_master_example.c: 69: I2C2_SetBuffer(&reg,1);
 13919  00E290  0E1F               	movlw	low I2C2_Read1ByteRegister@reg
 13920  00E292  6E0E               	movwf	I2C2_SetBuffer@buffer^0,c
 13921  00E294  6A0F               	clrf	(I2C2_SetBuffer@buffer+1)^0,c
 13922  00E296  0E00               	movlw	0
 13923  00E298  6E11               	movwf	(I2C2_SetBuffer@bufferSize+1)^0,c
 13924  00E29A  0E01               	movlw	1
 13925  00E29C  6E10               	movwf	I2C2_SetBuffer@bufferSize^0,c
 13926  00E29E  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 13927                           
 13928                           ; BSR set to: 4
 13929                           ;i2c2_master_example.c: 70: I2C2_SetAddressNackCallback((0),(0));
 13930  00E2A2  0E00               	movlw	0
 13931  00E2A4  6E13               	movwf	I2C2_SetAddressNackCallback@cb^0,c
 13932  00E2A6  0E00               	movlw	0
 13933  00E2A8  6E14               	movwf	(I2C2_SetAddressNackCallback@cb+1)^0,c
 13934  00E2AA  0E00               	movlw	0
 13935  00E2AC  6E15               	movwf	I2C2_SetAddressNackCallback@ptr^0,c
 13936  00E2AE  0E00               	movlw	0
 13937  00E2B0  6E16               	movwf	(I2C2_SetAddressNackCallback@ptr+1)^0,c
 13938  00E2B2  EC4A  F07A         	call	_I2C2_SetAddressNackCallback	;wreg free
 13939                           
 13940                           ;i2c2_master_example.c: 71: I2C2_MasterWrite();
 13941  00E2B6  ECBC  F07B         	call	_I2C2_MasterWrite	;wreg free
 13942  00E2BA                     l22405:
 13943                           
 13944                           ; BSR set to: 4
 13945  00E2BA  EC58  F079         	call	_I2C2_Close	;wreg free
 13946  00E2BE  06E8               	decf	wreg,f,c
 13947  00E2C0  B4D8               	btfsc	status,2,c
 13948  00E2C2  D7FB               	goto	l22405
 13949                           
 13950                           ; BSR set to: 4
 13951                           ;i2c2_master_example.c: 74: return returnValue;
 13952  00E2C4  5021               	movf	I2C2_Read1ByteRegister@returnValue^0,w,c
 13953                           
 13954                           ; BSR set to: 4
 13955  00E2C6  0012               	return		;funcret
 13956  00E2C8                     __end_of_I2C2_Read1ByteRegister:
 13957                           	callstack 0
 13958                           
 13959 ;; *************** function _f_write *****************
 13960 ;; Defined at:
 13961 ;;		line 3810 in file "mcc_generated_files/fatfs/ff.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;  fp              2  117[BANK0 ] PTR struct .
 13964 ;;		 -> file(34), file@fatfs_demo$F388(34), 
 13965 ;;  buff            2  119[BANK0 ] PTR const void 
 13966 ;;		 -> NormalProc@str(100), FatFsDemo_Tasks@data(13), 
 13967 ;;  btw             2  121[BANK0 ] unsigned int 
 13968 ;;  bw              2  123[BANK0 ] PTR unsigned int 
 13969 ;;		 -> NormalProc@actualLength(2), FatFsDemo_Tasks@actualLength(2), 
 13970 ;; Auto vars:     Size  Location     Type
 13971 ;;  clst            4   15[BANK1 ] unsigned long 
 13972 ;;  sect            4   11[BANK1 ] unsigned long 
 13973 ;;  fs              2   21[BANK1 ] PTR struct .
 13974 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 13975 ;;  wcnt            2   19[BANK1 ] unsigned int 
 13976 ;;  cc              2    9[BANK1 ] unsigned int 
 13977 ;;  csect           2    7[BANK1 ] unsigned int 
 13978 ;;  wbuff           2    5[BANK1 ] PTR const unsigned char 
 13979 ;;		 -> NormalProc@str(100), FatFsDemo_Tasks@data(13), 
 13980 ;;  res             1    4[BANK1 ] enum E64
 13981 ;; Return value:  Size  Location     Type
 13982 ;;                  1    wreg      enum E64
 13983 ;; Registers used:
 13984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13985 ;; Tracked objects:
 13986 ;;		On entry : 3F/0
 13987 ;;		On exit  : 3E/0
 13988 ;;		Unchanged: 0/0
 13989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13990 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13991 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13992 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13993 ;;      Totals:         0      20      23       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13994 ;;Total ram usage:       43 bytes
 13995 ;; Hardware stack levels used:    1
 13996 ;; Hardware stack levels required when called:   15
 13997 ;; This function calls:
 13998 ;;		_clst2sect
 13999 ;;		_create_chain
 14000 ;;		_disk_write
 14001 ;;		_mem_cpy
 14002 ;;		_move_window
 14003 ;;		_sync_window
 14004 ;;		_validate
 14005 ;; This function is called by:
 14006 ;;		_NormalProc
 14007 ;; This function uses a non-reentrant model
 14008 ;;
 14009                           
 14010                           	psect	text49
 14011  002CE6                     __ptext49:
 14012                           	callstack 0
 14013  002CE6                     _f_write:
 14014                           	callstack 14
 14015                           
 14016                           ; BSR set to: 0
 14017                           ;ff.c: 3817: FRESULT res;;ff.c: 3818: FATFS *fs;;ff.c: 3819: DWORD clst, sect;;ff.c: 382
      +                          0: UINT wcnt, cc, csect;;ff.c: 3821: const BYTE *wbuff = (const BYTE*)buff;
 14018                           
 14019                           ; BSR set to: 4
 14020                           ;incstack = 0
 14021  002CE6  C0D7  F105         	movff	f_write@buff,f_write@wbuff
 14022  002CEA  C0D8  F106         	movff	f_write@buff+1,f_write@wbuff+1
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;ff.c: 3824: *bw = 0;
 14026  002CEE  C0DB  FFD9         	movff	f_write@bw,fsr2l
 14027  002CF2  C0DC  FFDA         	movff	f_write@bw+1,fsr2h
 14028  002CF6  0E00               	movlw	0
 14029  002CF8  6EDE               	movwf	postinc2,c
 14030  002CFA  0E00               	movlw	0
 14031  002CFC  6EDD               	movwf	postdec2,c
 14032                           
 14033                           ; BSR set to: 0
 14034                           ;ff.c: 3825: res = validate(&fp->obj, &fs);
 14035  002CFE  C0D5  F010         	movff	f_write@fp,validate@obj
 14036  002D02  C0D6  F011         	movff	f_write@fp+1,validate@obj+1
 14037  002D06  0E15               	movlw	low f_write@fs
 14038  002D08  6E12               	movwf	validate@rfs^0,c
 14039  002D0A  0E01               	movlw	high f_write@fs
 14040  002D0C  6E13               	movwf	(validate@rfs+1)^0,c
 14041  002D0E  ECF4  F064         	call	_validate	;wreg free
 14042  002D12  0101               	movlb	1	; () banked
 14043  002D14  6F04               	movwf	f_write@res& (0+255),b
 14044                           
 14045                           ; BSR set to: 1
 14046                           ;ff.c: 3826: if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
 14047  002D16  5104               	movf	f_write@res& (0+255),w,b
 14048  002D18  A4D8               	btfss	status,2,c
 14049  002D1A  0012               	return	
 14050                           
 14051                           ; BSR set to: 1
 14052  002D1C  0100               	movlb	0	; () banked
 14053  002D1E  EE20 F00F          	lfsr	2,15
 14054  002D22  51D5               	movf	f_write@fp& (0+255),w,b
 14055  002D24  26D9               	addwf	fsr2l,f,c
 14056  002D26  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14057  002D28  22DA               	addwfc	fsr2h,f,c
 14058  002D2A  50DF               	movf	indf2,w,c
 14059  002D2C  0101               	movlb	1	; () banked
 14060  002D2E  6F04               	movwf	f_write@res& (0+255),b
 14061  002D30  5104               	movf	f_write@res& (0+255),w,b
 14062  002D32  A4D8               	btfss	status,2,c
 14063  002D34  0012               	return	
 14064                           
 14065                           ; BSR set to: 1
 14066                           ;ff.c: 3827: if (!(fp->flag & 0x02)) return FR_DENIED;
 14067  002D36  0100               	movlb	0	; () banked
 14068  002D38  EE20 F00E          	lfsr	2,14
 14069  002D3C  51D5               	movf	f_write@fp& (0+255),w,b
 14070  002D3E  26D9               	addwf	fsr2l,f,c
 14071  002D40  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14072  002D42  22DA               	addwfc	fsr2h,f,c
 14073  002D44  A2DF               	btfss	indf2,1,c
 14074  002D46  0012               	return	
 14075                           
 14076                           ; BSR set to: 0
 14077  002D48  EE20 F010          	lfsr	2,16
 14078  002D4C  51D5               	movf	f_write@fp& (0+255),w,b
 14079  002D4E  26D9               	addwf	fsr2l,f,c
 14080  002D50  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14081  002D52  22DA               	addwfc	fsr2h,f,c
 14082  002D54  EE10 F010          	lfsr	1,16
 14083  002D58  51D5               	movf	f_write@fp& (0+255),w,b
 14084  002D5A  26E1               	addwf	fsr1l,f,c
 14085  002D5C  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14086  002D5E  22E2               	addwfc	fsr1h,f,c
 14087  002D60  CFE6 F0E1          	movff	postinc1,??_f_write+4
 14088  002D64  CFE6 F0E2          	movff	postinc1,??_f_write+5
 14089  002D68  CFE6 F0E3          	movff	postinc1,??_f_write+6
 14090  002D6C  CFE6 F0E4          	movff	postinc1,??_f_write+7
 14091  002D70  51D9               	movf	f_write@btw& (0+255),w,b
 14092  002D72  25E1               	addwf	(??_f_write+4)& (0+255),w,b
 14093  002D74  6FE5               	movwf	(??_f_write+8)& (0+255),b
 14094  002D76  51DA               	movf	(f_write@btw+1)& (0+255),w,b
 14095  002D78  21E2               	addwfc	(??_f_write+5)& (0+255),w,b
 14096  002D7A  6FE6               	movwf	(??_f_write+9)& (0+255),b
 14097  002D7C  0E00               	movlw	0
 14098  002D7E  21E3               	addwfc	(??_f_write+6)& (0+255),w,b
 14099  002D80  6FE7               	movwf	(??_f_write+10)& (0+255),b
 14100  002D82  0E00               	movlw	0
 14101  002D84  21E4               	addwfc	(??_f_write+7)& (0+255),w,b
 14102  002D86  6FE8               	movwf	(??_f_write+11)& (0+255),b
 14103  002D88  50DE               	movf	postinc2,w,c
 14104  002D8A  5DE5               	subwf	(??_f_write+8)& (0+255),w,b
 14105  002D8C  50DE               	movf	postinc2,w,c
 14106  002D8E  59E6               	subwfb	(??_f_write+9)& (0+255),w,b
 14107  002D90  50DE               	movf	postinc2,w,c
 14108  002D92  59E7               	subwfb	(??_f_write+10)& (0+255),w,b
 14109  002D94  50DE               	movf	postinc2,w,c
 14110  002D96  59E8               	subwfb	(??_f_write+11)& (0+255),w,b
 14111  002D98  B0D8               	btfsc	status,0,c
 14112  002D9A  D365               	goto	l25749
 14113                           
 14114                           ; BSR set to: 0
 14115                           ;ff.c: 3831: btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 14116  002D9C  EE20 F010          	lfsr	2,16
 14117  002DA0  51D5               	movf	f_write@fp& (0+255),w,b
 14118  002DA2  26D9               	addwf	fsr2l,f,c
 14119  002DA4  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14120  002DA6  22DA               	addwfc	fsr2h,f,c
 14121  002DA8  CFDE F0DD          	movff	postinc2,??_f_write
 14122  002DAC  CFDD F0DE          	movff	postdec2,??_f_write+1
 14123  002DB0  1DDD               	comf	??_f_write& (0+255),w,b
 14124  002DB2  6FD9               	movwf	f_write@btw& (0+255),b
 14125  002DB4  1DDE               	comf	(??_f_write+1)& (0+255),w,b
 14126  002DB6  6FDA               	movwf	(f_write@btw+1)& (0+255),b
 14127  002DB8  D356               	goto	l25749
 14128  002DBA                     l25635:
 14129                           
 14130                           ; BSR set to: 0
 14131                           ;ff.c: 3836: if (fp->fptr % ((UINT)512) == 0) {
 14132  002DBA  EE20 F010          	lfsr	2,16
 14133  002DBE  51D5               	movf	f_write@fp& (0+255),w,b
 14134  002DC0  26D9               	addwf	fsr2l,f,c
 14135  002DC2  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14136  002DC4  22DA               	addwfc	fsr2h,f,c
 14137  002DC6  0EFF               	movlw	255
 14138  002DC8  14DE               	andwf	postinc2,w,c
 14139  002DCA  6FDD               	movwf	??_f_write& (0+255),b
 14140  002DCC  0E01               	movlw	1
 14141  002DCE  14DE               	andwf	postinc2,w,c
 14142  002DD0  6FDE               	movwf	(??_f_write+1)& (0+255),b
 14143  002DD2  0E00               	movlw	0
 14144  002DD4  14DE               	andwf	postinc2,w,c
 14145  002DD6  6FDF               	movwf	(??_f_write+2)& (0+255),b
 14146  002DD8  0E00               	movlw	0
 14147  002DDA  14DE               	andwf	postinc2,w,c
 14148  002DDC  6FE0               	movwf	(??_f_write+3)& (0+255),b
 14149  002DDE  51DD               	movf	??_f_write& (0+255),w,b
 14150  002DE0  11DE               	iorwf	(??_f_write+1)& (0+255),w,b
 14151  002DE2  11DF               	iorwf	(??_f_write+2)& (0+255),w,b
 14152  002DE4  11E0               	iorwf	(??_f_write+3)& (0+255),w,b
 14153  002DE6  A4D8               	btfss	status,2,c
 14154  002DE8  D267               	goto	l691
 14155                           
 14156                           ; BSR set to: 0
 14157                           ;ff.c: 3837: csect = (UINT)(fp->fptr / ((UINT)512)) & (fs->csize - 1);
 14158  002DEA  EE20 F010          	lfsr	2,16
 14159  002DEE  51D5               	movf	f_write@fp& (0+255),w,b
 14160  002DF0  26D9               	addwf	fsr2l,f,c
 14161  002DF2  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14162  002DF4  22DA               	addwfc	fsr2h,f,c
 14163  002DF6  CFDE F0DD          	movff	postinc2,??_f_write
 14164  002DFA  CFDE F0DE          	movff	postinc2,??_f_write+1
 14165  002DFE  CFDE F0DF          	movff	postinc2,??_f_write+2
 14166  002E02  CFDE F0E0          	movff	postinc2,??_f_write+3
 14167  002E06  0E0A               	movlw	10
 14168  002E08  D005               	goto	u29350
 14169  002E0A                     u29355:
 14170  002E0A  90D8               	bcf	status,0,c
 14171  002E0C  33E0               	rrcf	(??_f_write+3)& (0+255),f,b
 14172  002E0E  33DF               	rrcf	(??_f_write+2)& (0+255),f,b
 14173  002E10  33DE               	rrcf	(??_f_write+1)& (0+255),f,b
 14174  002E12  33DD               	rrcf	??_f_write& (0+255),f,b
 14175  002E14                     u29350:
 14176  002E14  2EE8               	decfsz	wreg,f,c
 14177  002E16  D7F9               	goto	u29355
 14178  002E18  0EFF               	movlw	255
 14179  002E1A  6FE1               	movwf	(??_f_write+4)& (0+255),b
 14180  002E1C  0EFF               	movlw	255
 14181  002E1E  6FE2               	movwf	(??_f_write+5)& (0+255),b
 14182  002E20  0101               	movlb	1	; () banked
 14183  002E22  EE20 F009          	lfsr	2,9
 14184  002E26  5115               	movf	f_write@fs& (0+255),w,b
 14185  002E28  26D9               	addwf	fsr2l,f,c
 14186  002E2A  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14187  002E2C  22DA               	addwfc	fsr2h,f,c
 14188  002E2E  CFDE F0E3          	movff	postinc2,??_f_write+6
 14189  002E32  CFDD F0E4          	movff	postdec2,??_f_write+7
 14190  002E36  0100               	movlb	0	; () banked
 14191  002E38  51E1               	movf	(??_f_write+4)& (0+255),w,b
 14192  002E3A  27E3               	addwf	(??_f_write+6)& (0+255),f,b
 14193  002E3C  51E2               	movf	(??_f_write+5)& (0+255),w,b
 14194  002E3E  23E4               	addwfc	(??_f_write+7)& (0+255),f,b
 14195  002E40  51DD               	movf	??_f_write& (0+255),w,b
 14196  002E42  15E3               	andwf	(??_f_write+6)& (0+255),w,b
 14197  002E44  0101               	movlb	1	; () banked
 14198  002E46  6F07               	movwf	f_write@csect& (0+255),b
 14199  002E48  0100               	movlb	0	; () banked
 14200  002E4A  51DE               	movf	(??_f_write+1)& (0+255),w,b
 14201  002E4C  15E4               	andwf	(??_f_write+7)& (0+255),w,b
 14202  002E4E  0101               	movlb	1	; () banked
 14203  002E50  6F08               	movwf	(f_write@csect+1)& (0+255),b
 14204                           
 14205                           ; BSR set to: 1
 14206                           ;ff.c: 3838: if (csect == 0) {
 14207  002E52  5107               	movf	f_write@csect& (0+255),w,b
 14208  002E54  1108               	iorwf	(f_write@csect+1)& (0+255),w,b
 14209  002E56  A4D8               	btfss	status,2,c
 14210  002E58  D0A1               	goto	l25671
 14211                           
 14212                           ; BSR set to: 1
 14213                           ;ff.c: 3839: if (fp->fptr == 0) {
 14214  002E5A  0100               	movlb	0	; () banked
 14215  002E5C  EE20 F010          	lfsr	2,16
 14216  002E60  51D5               	movf	f_write@fp& (0+255),w,b
 14217  002E62  26D9               	addwf	fsr2l,f,c
 14218  002E64  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14219  002E66  22DA               	addwfc	fsr2h,f,c
 14220  002E68  50DE               	movf	postinc2,w,c
 14221  002E6A  10DE               	iorwf	postinc2,w,c
 14222  002E6C  10DE               	iorwf	postinc2,w,c
 14223  002E6E  10DE               	iorwf	postinc2,w,c
 14224  002E70  A4D8               	btfss	status,2,c
 14225  002E72  D025               	goto	l25649
 14226                           
 14227                           ; BSR set to: 0
 14228                           ;ff.c: 3840: clst = fp->obj.sclust;
 14229  002E74  EE20 F006          	lfsr	2,6
 14230  002E78  51D5               	movf	f_write@fp& (0+255),w,b
 14231  002E7A  26D9               	addwf	fsr2l,f,c
 14232  002E7C  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14233  002E7E  22DA               	addwfc	fsr2h,f,c
 14234  002E80  CFDE F10F          	movff	postinc2,f_write@clst
 14235  002E84  CFDE F110          	movff	postinc2,f_write@clst+1
 14236  002E88  CFDE F111          	movff	postinc2,f_write@clst+2
 14237  002E8C  CFDE F112          	movff	postinc2,f_write@clst+3
 14238                           
 14239                           ; BSR set to: 0
 14240                           ;ff.c: 3841: if (clst == 0) {
 14241  002E90  0101               	movlb	1	; () banked
 14242  002E92  510F               	movf	f_write@clst& (0+255),w,b
 14243  002E94  1110               	iorwf	(f_write@clst+1)& (0+255),w,b
 14244  002E96  1111               	iorwf	(f_write@clst+2)& (0+255),w,b
 14245  002E98  1112               	iorwf	(f_write@clst+3)& (0+255),w,b
 14246  002E9A  A4D8               	btfss	status,2,c
 14247  002E9C  D02C               	goto	l25651
 14248                           
 14249                           ; BSR set to: 1
 14250                           ;ff.c: 3842: clst = create_chain(&fp->obj, 0);
 14251  002E9E  C0D5  F0B8         	movff	f_write@fp,create_chain@obj
 14252  002EA2  C0D6  F0B9         	movff	f_write@fp+1,create_chain@obj+1
 14253  002EA6  0E00               	movlw	0
 14254  002EA8  0100               	movlb	0	; () banked
 14255  002EAA  6FBA               	movwf	create_chain@clst& (0+255),b
 14256  002EAC  0E00               	movlw	0
 14257  002EAE  6FBB               	movwf	(create_chain@clst+1)& (0+255),b
 14258  002EB0  0E00               	movlw	0
 14259  002EB2  6FBC               	movwf	(create_chain@clst+2)& (0+255),b
 14260  002EB4  0E00               	movlw	0
 14261  002EB6  6FBD               	movwf	(create_chain@clst+3)& (0+255),b
 14262  002EB8  EC19  F02B         	call	_create_chain	;wreg free
 14263  002EBC  D014               	goto	L6
 14264  002EBE                     l25649:
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;ff.c: 3850: {;ff.c: 3851: clst = create_chain(&fp->obj, fp->clust);
 14268  002EBE  C0D5  F0B8         	movff	f_write@fp,create_chain@obj
 14269  002EC2  C0D6  F0B9         	movff	f_write@fp+1,create_chain@obj+1
 14270  002EC6  EE20 F014          	lfsr	2,20
 14271  002ECA  51D5               	movf	f_write@fp& (0+255),w,b
 14272  002ECC  26D9               	addwf	fsr2l,f,c
 14273  002ECE  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14274  002ED0  22DA               	addwfc	fsr2h,f,c
 14275  002ED2  CFDE F0BA          	movff	postinc2,create_chain@clst
 14276  002ED6  CFDE F0BB          	movff	postinc2,create_chain@clst+1
 14277  002EDA  CFDE F0BC          	movff	postinc2,create_chain@clst+2
 14278  002EDE  CFDE F0BD          	movff	postinc2,create_chain@clst+3
 14279  002EE2  EC19  F02B         	call	_create_chain	;wreg free
 14280  002EE6                     L6:
 14281  002EE6  C0B8  F10F         	movff	?_create_chain,f_write@clst
 14282  002EEA  C0B9  F110         	movff	?_create_chain+1,f_write@clst+1
 14283  002EEE  C0BA  F111         	movff	?_create_chain+2,f_write@clst+2
 14284  002EF2  C0BB  F112         	movff	?_create_chain+3,f_write@clst+3
 14285  002EF6                     l25651:
 14286                           
 14287                           ;ff.c: 3852: };ff.c: 3853: };ff.c: 3854: if (clst == 0) break;
 14288  002EF6  0101               	movlb	1	; () banked
 14289  002EF8  510F               	movf	f_write@clst& (0+255),w,b
 14290  002EFA  1110               	iorwf	(f_write@clst+1)& (0+255),w,b
 14291  002EFC  1111               	iorwf	(f_write@clst+2)& (0+255),w,b
 14292  002EFE  1112               	iorwf	(f_write@clst+3)& (0+255),w,b
 14293  002F00  B4D8               	btfsc	status,2,c
 14294  002F02  D2B5               	goto	u29580
 14295                           
 14296                           ; BSR set to: 1
 14297                           ;ff.c: 3855: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 14298  002F04  050F               	decf	f_write@clst& (0+255),w,b
 14299  002F06  1110               	iorwf	(f_write@clst+1)& (0+255),w,b
 14300  002F08  1111               	iorwf	(f_write@clst+2)& (0+255),w,b
 14301  002F0A  1112               	iorwf	(f_write@clst+3)& (0+255),w,b
 14302  002F0C  A4D8               	btfss	status,2,c
 14303  002F0E  D00A               	goto	l25661
 14304                           
 14305                           ; BSR set to: 1
 14306  002F10  0100               	movlb	0	; () banked
 14307  002F12  EE20 F00F          	lfsr	2,15
 14308  002F16  51D5               	movf	f_write@fp& (0+255),w,b
 14309  002F18  26D9               	addwf	fsr2l,f,c
 14310  002F1A  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14311  002F1C  22DA               	addwfc	fsr2h,f,c
 14312  002F1E  0E02               	movlw	2
 14313  002F20  6EDF               	movwf	indf2,c
 14314  002F22  0012               	return	
 14315  002F24                     l25661:
 14316                           
 14317                           ; BSR set to: 1
 14318                           ;ff.c: 3856: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR
      +                          ; };
 14319  002F24  290F               	incf	f_write@clst& (0+255),w,b
 14320  002F26  E111               	bnz	l25667
 14321  002F28  2910               	incf	(f_write@clst+1)& (0+255),w,b
 14322  002F2A  E10F               	bnz	l25667
 14323  002F2C  2911               	incf	(f_write@clst+2)& (0+255),w,b
 14324  002F2E  E10D               	bnz	l25667
 14325  002F30  2912               	incf	(f_write@clst+3)& (0+255),w,b
 14326  002F32  A4D8               	btfss	status,2,c
 14327  002F34  D00A               	goto	l25667
 14328                           
 14329                           ; BSR set to: 1
 14330  002F36  0100               	movlb	0	; () banked
 14331  002F38  EE20 F00F          	lfsr	2,15
 14332  002F3C  51D5               	movf	f_write@fp& (0+255),w,b
 14333  002F3E  26D9               	addwf	fsr2l,f,c
 14334  002F40  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14335  002F42  22DA               	addwfc	fsr2h,f,c
 14336  002F44  0E01               	movlw	1
 14337  002F46  6EDF               	movwf	indf2,c
 14338  002F48  0012               	return	
 14339  002F4A                     l25667:
 14340                           
 14341                           ; BSR set to: 1
 14342                           ;ff.c: 3857: fp->clust = clst;
 14343  002F4A  0100               	movlb	0	; () banked
 14344  002F4C  EE20 F014          	lfsr	2,20
 14345  002F50  51D5               	movf	f_write@fp& (0+255),w,b
 14346  002F52  26D9               	addwf	fsr2l,f,c
 14347  002F54  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14348  002F56  22DA               	addwfc	fsr2h,f,c
 14349  002F58  C10F  FFDE         	movff	f_write@clst,postinc2
 14350  002F5C  C110  FFDE         	movff	f_write@clst+1,postinc2
 14351  002F60  C111  FFDE         	movff	f_write@clst+2,postinc2
 14352  002F64  C112  FFDE         	movff	f_write@clst+3,postinc2
 14353                           
 14354                           ;ff.c: 3858: if (fp->obj.sclust == 0) fp->obj.sclust = clst;
 14355  002F68  EE20 F006          	lfsr	2,6
 14356  002F6C  51D5               	movf	f_write@fp& (0+255),w,b
 14357  002F6E  26D9               	addwf	fsr2l,f,c
 14358  002F70  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14359  002F72  22DA               	addwfc	fsr2h,f,c
 14360  002F74  50DE               	movf	postinc2,w,c
 14361  002F76  10DE               	iorwf	postinc2,w,c
 14362  002F78  10DE               	iorwf	postinc2,w,c
 14363  002F7A  10DE               	iorwf	postinc2,w,c
 14364  002F7C  A4D8               	btfss	status,2,c
 14365  002F7E  D00E               	goto	l25671
 14366                           
 14367                           ; BSR set to: 0
 14368  002F80  EE20 F006          	lfsr	2,6
 14369  002F84  51D5               	movf	f_write@fp& (0+255),w,b
 14370  002F86  26D9               	addwf	fsr2l,f,c
 14371  002F88  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14372  002F8A  22DA               	addwfc	fsr2h,f,c
 14373  002F8C  C10F  FFDE         	movff	f_write@clst,postinc2
 14374  002F90  C110  FFDE         	movff	f_write@clst+1,postinc2
 14375  002F94  C111  FFDE         	movff	f_write@clst+2,postinc2
 14376  002F98  C112  FFDE         	movff	f_write@clst+3,postinc2
 14377  002F9C                     l25671:
 14378                           
 14379                           ;ff.c: 3859: };ff.c: 3861: if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) { fp
      +                          ->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
 14380  002F9C  0100               	movlb	0	; () banked
 14381  002F9E  EE20 F018          	lfsr	2,24
 14382  002FA2  51D5               	movf	f_write@fp& (0+255),w,b
 14383  002FA4  26D9               	addwf	fsr2l,f,c
 14384  002FA6  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14385  002FA8  22DA               	addwfc	fsr2h,f,c
 14386  002FAA  0101               	movlb	1	; () banked
 14387  002FAC  EE10 F02B          	lfsr	1,43
 14388  002FB0  5115               	movf	f_write@fs& (0+255),w,b
 14389  002FB2  26E1               	addwf	fsr1l,f,c
 14390  002FB4  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14391  002FB6  22E2               	addwfc	fsr1h,f,c
 14392  002FB8  50DE               	movf	postinc2,w,c
 14393  002FBA  18E6               	xorwf	postinc1,w,c
 14394  002FBC  E11C               	bnz	l25679
 14395  002FBE  50DE               	movf	postinc2,w,c
 14396  002FC0  18E6               	xorwf	postinc1,w,c
 14397  002FC2  E119               	bnz	l25679
 14398  002FC4  50DE               	movf	postinc2,w,c
 14399  002FC6  18E6               	xorwf	postinc1,w,c
 14400  002FC8  E116               	bnz	l25679
 14401  002FCA  50DE               	movf	postinc2,w,c
 14402  002FCC  18E6               	xorwf	postinc1,w,c
 14403  002FCE  A4D8               	btfss	status,2,c
 14404  002FD0  D012               	goto	l25679
 14405                           
 14406                           ; BSR set to: 1
 14407  002FD2  C115  F079         	movff	f_write@fs,sync_window@fs
 14408  002FD6  C116  F07A         	movff	f_write@fs+1,sync_window@fs+1
 14409  002FDA  ECA6  F054         	call	_sync_window	;wreg free
 14410  002FDE  0900               	iorlw	0
 14411  002FE0  B4D8               	btfsc	status,2,c
 14412  002FE2  D009               	goto	l25679
 14413                           
 14414                           ; BSR set to: 0
 14415  002FE4  EE20 F00F          	lfsr	2,15
 14416  002FE8  51D5               	movf	f_write@fp& (0+255),w,b
 14417  002FEA  26D9               	addwf	fsr2l,f,c
 14418  002FEC  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14419  002FEE  22DA               	addwfc	fsr2h,f,c
 14420  002FF0  0E01               	movlw	1
 14421  002FF2  6EDF               	movwf	indf2,c
 14422  002FF4  0012               	return	
 14423  002FF6                     l25679:
 14424                           
 14425                           ;ff.c: 3868: sect = clst2sect(fs, fp->clust);
 14426  002FF6  C115  F01A         	movff	f_write@fs,clst2sect@fs
 14427  002FFA  C116  F01B         	movff	f_write@fs+1,clst2sect@fs+1
 14428  002FFE  0100               	movlb	0	; () banked
 14429  003000  EE20 F014          	lfsr	2,20
 14430  003004  51D5               	movf	f_write@fp& (0+255),w,b
 14431  003006  26D9               	addwf	fsr2l,f,c
 14432  003008  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14433  00300A  22DA               	addwfc	fsr2h,f,c
 14434  00300C  CFDE F01C          	movff	postinc2,clst2sect@clst
 14435  003010  CFDE F01D          	movff	postinc2,clst2sect@clst+1
 14436  003014  CFDE F01E          	movff	postinc2,clst2sect@clst+2
 14437  003018  CFDE F01F          	movff	postinc2,clst2sect@clst+3
 14438  00301C  EC94  F064         	call	_clst2sect	;wreg free
 14439  003020  C01A  F10B         	movff	?_clst2sect,f_write@sect
 14440  003024  C01B  F10C         	movff	?_clst2sect+1,f_write@sect+1
 14441  003028  C01C  F10D         	movff	?_clst2sect+2,f_write@sect+2
 14442  00302C  C01D  F10E         	movff	?_clst2sect+3,f_write@sect+3
 14443                           
 14444                           ;ff.c: 3869: if (sect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 14445  003030  0101               	movlb	1	; () banked
 14446  003032  510B               	movf	f_write@sect& (0+255),w,b
 14447  003034  110C               	iorwf	(f_write@sect+1)& (0+255),w,b
 14448  003036  110D               	iorwf	(f_write@sect+2)& (0+255),w,b
 14449  003038  110E               	iorwf	(f_write@sect+3)& (0+255),w,b
 14450  00303A  A4D8               	btfss	status,2,c
 14451  00303C  D00A               	goto	l25687
 14452                           
 14453                           ; BSR set to: 1
 14454  00303E  0100               	movlb	0	; () banked
 14455  003040  EE20 F00F          	lfsr	2,15
 14456  003044  51D5               	movf	f_write@fp& (0+255),w,b
 14457  003046  26D9               	addwf	fsr2l,f,c
 14458  003048  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14459  00304A  22DA               	addwfc	fsr2h,f,c
 14460  00304C  0E02               	movlw	2
 14461  00304E  6EDF               	movwf	indf2,c
 14462  003050  0012               	return	
 14463  003052                     l25687:
 14464                           
 14465                           ; BSR set to: 1
 14466                           ;ff.c: 3870: sect += csect;
 14467  003052  5107               	movf	f_write@csect& (0+255),w,b
 14468  003054  270B               	addwf	f_write@sect& (0+255),f,b
 14469  003056  5108               	movf	(f_write@csect+1)& (0+255),w,b
 14470  003058  230C               	addwfc	(f_write@sect+1)& (0+255),f,b
 14471  00305A  0E00               	movlw	0
 14472  00305C  230D               	addwfc	(f_write@sect+2)& (0+255),f,b
 14473  00305E  0E00               	movlw	0
 14474  003060  230E               	addwfc	(f_write@sect+3)& (0+255),f,b
 14475                           
 14476                           ; BSR set to: 1
 14477                           ;ff.c: 3871: cc = btw / ((UINT)512);
 14478  003062  C0D9  F0DD         	movff	f_write@btw,??_f_write
 14479  003066  C0DA  F0DE         	movff	f_write@btw+1,??_f_write+1
 14480  00306A  0E09               	movlw	9
 14481  00306C  0100               	movlb	0	; () banked
 14482  00306E  6FDF               	movwf	(??_f_write+2)& (0+255),b
 14483  003070                     u29465:
 14484  003070  90D8               	bcf	status,0,c
 14485  003072  33DE               	rrcf	(??_f_write+1)& (0+255),f,b
 14486  003074  33DD               	rrcf	??_f_write& (0+255),f,b
 14487  003076  2FDF               	decfsz	(??_f_write+2)& (0+255),f,b
 14488  003078  D7FB               	goto	u29465
 14489  00307A  C0DD  F109         	movff	??_f_write,f_write@cc
 14490  00307E  C0DE  F10A         	movff	??_f_write+1,f_write@cc+1
 14491                           
 14492                           ; BSR set to: 0
 14493                           ;ff.c: 3872: if (cc > 0) {
 14494  003082  0101               	movlb	1	; () banked
 14495  003084  5109               	movf	f_write@cc& (0+255),w,b
 14496  003086  110A               	iorwf	(f_write@cc+1)& (0+255),w,b
 14497  003088  B4D8               	btfsc	status,2,c
 14498  00308A  D0CF               	goto	l25711
 14499                           
 14500                           ; BSR set to: 1
 14501                           ;ff.c: 3873: if (csect + cc > fs->csize) {
 14502  00308C  5109               	movf	f_write@cc& (0+255),w,b
 14503  00308E  2507               	addwf	f_write@csect& (0+255),w,b
 14504  003090  0100               	movlb	0	; () banked
 14505  003092  6FDD               	movwf	??_f_write& (0+255),b
 14506  003094  0101               	movlb	1	; () banked
 14507  003096  510A               	movf	(f_write@cc+1)& (0+255),w,b
 14508  003098  2108               	addwfc	(f_write@csect+1)& (0+255),w,b
 14509  00309A  0100               	movlb	0	; () banked
 14510  00309C  6FDE               	movwf	(??_f_write+1)& (0+255),b
 14511  00309E  0101               	movlb	1	; () banked
 14512  0030A0  EE20 F009          	lfsr	2,9
 14513  0030A4  5115               	movf	f_write@fs& (0+255),w,b
 14514  0030A6  26D9               	addwf	fsr2l,f,c
 14515  0030A8  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14516  0030AA  22DA               	addwfc	fsr2h,f,c
 14517  0030AC  0100               	movlb	0	; () banked
 14518  0030AE  51DD               	movf	??_f_write& (0+255),w,b
 14519  0030B0  5CDE               	subwf	postinc2,w,c
 14520  0030B2  51DE               	movf	(??_f_write+1)& (0+255),w,b
 14521  0030B4  58DE               	subwfb	postinc2,w,c
 14522  0030B6  B0D8               	btfsc	status,0,c
 14523  0030B8  D015               	goto	l25697
 14524                           
 14525                           ; BSR set to: 0
 14526                           ;ff.c: 3874: cc = fs->csize - csect;
 14527  0030BA  0101               	movlb	1	; () banked
 14528  0030BC  EE20 F009          	lfsr	2,9
 14529  0030C0  5115               	movf	f_write@fs& (0+255),w,b
 14530  0030C2  26D9               	addwf	fsr2l,f,c
 14531  0030C4  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14532  0030C6  22DA               	addwfc	fsr2h,f,c
 14533  0030C8  CFDE F0DD          	movff	postinc2,??_f_write
 14534  0030CC  CFDD F0DE          	movff	postdec2,??_f_write+1
 14535  0030D0  5107               	movf	f_write@csect& (0+255),w,b
 14536  0030D2  0100               	movlb	0	; () banked
 14537  0030D4  5DDD               	subwf	??_f_write& (0+255),w,b
 14538  0030D6  0101               	movlb	1	; () banked
 14539  0030D8  6F09               	movwf	f_write@cc& (0+255),b
 14540  0030DA  5108               	movf	(f_write@csect+1)& (0+255),w,b
 14541  0030DC  0100               	movlb	0	; () banked
 14542  0030DE  59DE               	subwfb	(??_f_write+1)& (0+255),w,b
 14543  0030E0  0101               	movlb	1	; () banked
 14544  0030E2  6F0A               	movwf	(f_write@cc+1)& (0+255),b
 14545  0030E4                     l25697:
 14546                           
 14547                           ;ff.c: 3875: };ff.c: 3876: if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) { fp->er
      +                          r = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
 14548  0030E4  C105  F071         	movff	f_write@wbuff,disk_write@buff
 14549  0030E8  C106  F072         	movff	f_write@wbuff+1,disk_write@buff+1
 14550  0030EC  C10B  F073         	movff	f_write@sect,disk_write@sector
 14551  0030F0  C10C  F074         	movff	f_write@sect+1,disk_write@sector+1
 14552  0030F4  C10D  F075         	movff	f_write@sect+2,disk_write@sector+2
 14553  0030F8  C10E  F076         	movff	f_write@sect+3,disk_write@sector+3
 14554  0030FC  C109  F077         	movff	f_write@cc,disk_write@count
 14555  003100  C10A  F078         	movff	f_write@cc+1,disk_write@count+1
 14556  003104  0101               	movlb	1	; () banked
 14557  003106  EE20 F001          	lfsr	2,1
 14558  00310A  5115               	movf	f_write@fs& (0+255),w,b
 14559  00310C  26D9               	addwf	fsr2l,f,c
 14560  00310E  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14561  003110  22DA               	addwfc	fsr2h,f,c
 14562  003112  50DF               	movf	indf2,w,c
 14563  003114  EC51  F074         	call	_disk_write
 14564  003118  0900               	iorlw	0
 14565  00311A  B4D8               	btfsc	status,2,c
 14566  00311C  D00A               	goto	l25703
 14567  00311E  0100               	movlb	0	; () banked
 14568  003120  EE20 F00F          	lfsr	2,15
 14569  003124  51D5               	movf	f_write@fp& (0+255),w,b
 14570  003126  26D9               	addwf	fsr2l,f,c
 14571  003128  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14572  00312A  22DA               	addwfc	fsr2h,f,c
 14573  00312C  0E01               	movlw	1
 14574  00312E  6EDF               	movwf	indf2,c
 14575  003130  0012               	return	
 14576  003132                     l25703:
 14577                           
 14578                           ;ff.c: 3879: if (fs->winsect - sect < cc) {
 14579  003132  0101               	movlb	1	; () banked
 14580  003134  5109               	movf	f_write@cc& (0+255),w,b
 14581  003136  0100               	movlb	0	; () banked
 14582  003138  6FDD               	movwf	??_f_write& (0+255),b
 14583  00313A  0101               	movlb	1	; () banked
 14584  00313C  510A               	movf	(f_write@cc+1)& (0+255),w,b
 14585  00313E  0100               	movlb	0	; () banked
 14586  003140  6FDE               	movwf	(??_f_write+1)& (0+255),b
 14587  003142  6BDF               	clrf	(??_f_write+2)& (0+255),b
 14588  003144  6BE0               	clrf	(??_f_write+3)& (0+255),b
 14589  003146  0101               	movlb	1	; () banked
 14590  003148  EE20 F02B          	lfsr	2,43
 14591  00314C  5115               	movf	f_write@fs& (0+255),w,b
 14592  00314E  26D9               	addwf	fsr2l,f,c
 14593  003150  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14594  003152  22DA               	addwfc	fsr2h,f,c
 14595  003154  CFDE F0E1          	movff	postinc2,??_f_write+4
 14596  003158  CFDE F0E2          	movff	postinc2,??_f_write+5
 14597  00315C  CFDE F0E3          	movff	postinc2,??_f_write+6
 14598  003160  CFDE F0E4          	movff	postinc2,??_f_write+7
 14599  003164  510B               	movf	f_write@sect& (0+255),w,b
 14600  003166  0100               	movlb	0	; () banked
 14601  003168  5DE1               	subwf	(??_f_write+4)& (0+255),w,b
 14602  00316A  6FE5               	movwf	(??_f_write+8)& (0+255),b
 14603  00316C  0101               	movlb	1	; () banked
 14604  00316E  510C               	movf	(f_write@sect+1)& (0+255),w,b
 14605  003170  0100               	movlb	0	; () banked
 14606  003172  59E2               	subwfb	(??_f_write+5)& (0+255),w,b
 14607  003174  6FE6               	movwf	(??_f_write+9)& (0+255),b
 14608  003176  0101               	movlb	1	; () banked
 14609  003178  510D               	movf	(f_write@sect+2)& (0+255),w,b
 14610  00317A  0100               	movlb	0	; () banked
 14611  00317C  59E3               	subwfb	(??_f_write+6)& (0+255),w,b
 14612  00317E  6FE7               	movwf	(??_f_write+10)& (0+255),b
 14613  003180  0101               	movlb	1	; () banked
 14614  003182  510E               	movf	(f_write@sect+3)& (0+255),w,b
 14615  003184  0100               	movlb	0	; () banked
 14616  003186  59E4               	subwfb	(??_f_write+7)& (0+255),w,b
 14617  003188  6FE8               	movwf	(??_f_write+11)& (0+255),b
 14618  00318A  51DD               	movf	??_f_write& (0+255),w,b
 14619  00318C  5DE5               	subwf	(??_f_write+8)& (0+255),w,b
 14620  00318E  51DE               	movf	(??_f_write+1)& (0+255),w,b
 14621  003190  59E6               	subwfb	(??_f_write+9)& (0+255),w,b
 14622  003192  51DF               	movf	(??_f_write+2)& (0+255),w,b
 14623  003194  59E7               	subwfb	(??_f_write+10)& (0+255),w,b
 14624  003196  51E0               	movf	(??_f_write+3)& (0+255),w,b
 14625  003198  59E8               	subwfb	(??_f_write+11)& (0+255),w,b
 14626  00319A  B0D8               	btfsc	status,0,c
 14627  00319C  D036               	goto	l25709
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;ff.c: 3880: mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * ((UINT)512)), ((UINT)512))
      +                          ;
 14631  00319E  0E2F               	movlw	47
 14632  0031A0  0101               	movlb	1	; () banked
 14633  0031A2  2515               	addwf	f_write@fs& (0+255),w,b
 14634  0031A4  6E0E               	movwf	mem_cpy@dst^0,c
 14635  0031A6  0E00               	movlw	0
 14636  0031A8  2116               	addwfc	(f_write@fs+1)& (0+255),w,b
 14637  0031AA  6E0F               	movwf	(mem_cpy@dst+1)^0,c
 14638  0031AC  EE20 F02B          	lfsr	2,43
 14639  0031B0  5115               	movf	f_write@fs& (0+255),w,b
 14640  0031B2  26D9               	addwf	fsr2l,f,c
 14641  0031B4  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14642  0031B6  22DA               	addwfc	fsr2h,f,c
 14643  0031B8  CFDE F0DD          	movff	postinc2,??_f_write
 14644  0031BC  CFDD F0DE          	movff	postdec2,??_f_write+1
 14645  0031C0  510B               	movf	f_write@sect& (0+255),w,b
 14646  0031C2  0100               	movlb	0	; () banked
 14647  0031C4  5FDD               	subwf	??_f_write& (0+255),f,b
 14648  0031C6  0101               	movlb	1	; () banked
 14649  0031C8  510C               	movf	(f_write@sect+1)& (0+255),w,b
 14650  0031CA  0100               	movlb	0	; () banked
 14651  0031CC  5BDE               	subwfb	(??_f_write+1)& (0+255),f,b
 14652  0031CE  0E09               	movlw	9
 14653  0031D0                     u29515:
 14654  0031D0  90D8               	bcf	status,0,c
 14655  0031D2  37DD               	rlcf	??_f_write& (0+255),f,b
 14656  0031D4  37DE               	rlcf	(??_f_write+1)& (0+255),f,b
 14657  0031D6  2EE8               	decfsz	wreg,f,c
 14658  0031D8  D7FB               	goto	u29515
 14659  0031DA  51DD               	movf	??_f_write& (0+255),w,b
 14660  0031DC  0101               	movlb	1	; () banked
 14661  0031DE  2505               	addwf	f_write@wbuff& (0+255),w,b
 14662  0031E0  6E10               	movwf	mem_cpy@src^0,c
 14663  0031E2  0100               	movlb	0	; () banked
 14664  0031E4  51DE               	movf	(??_f_write+1)& (0+255),w,b
 14665  0031E6  0101               	movlb	1	; () banked
 14666  0031E8  2106               	addwfc	(f_write@wbuff+1)& (0+255),w,b
 14667  0031EA  6E11               	movwf	(mem_cpy@src+1)^0,c
 14668  0031EC  0E02               	movlw	2
 14669  0031EE  6E13               	movwf	(mem_cpy@cnt+1)^0,c
 14670  0031F0  0E00               	movlw	0
 14671  0031F2  6E12               	movwf	mem_cpy@cnt^0,c
 14672  0031F4  EC02  F076         	call	_mem_cpy	;wreg free
 14673                           
 14674                           ;ff.c: 3881: fs->wflag = 0;
 14675  0031F8  0101               	movlb	1	; () banked
 14676  0031FA  EE20 F003          	lfsr	2,3
 14677  0031FE  5115               	movf	f_write@fs& (0+255),w,b
 14678  003200  26D9               	addwf	fsr2l,f,c
 14679  003202  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14680  003204  22DA               	addwfc	fsr2h,f,c
 14681  003206  0E00               	movlw	0
 14682  003208  6EDF               	movwf	indf2,c
 14683  00320A                     l25709:
 14684                           
 14685                           ;ff.c: 3882: };ff.c: 3890: wcnt = ((UINT)512) * cc;
 14686  00320A  C109  F0DD         	movff	f_write@cc,??_f_write
 14687  00320E  C10A  F0DE         	movff	f_write@cc+1,??_f_write+1
 14688  003212  0E09               	movlw	9
 14689  003214                     u29525:
 14690  003214  90D8               	bcf	status,0,c
 14691  003216  0100               	movlb	0	; () banked
 14692  003218  37DD               	rlcf	??_f_write& (0+255),f,b
 14693  00321A  37DE               	rlcf	(??_f_write+1)& (0+255),f,b
 14694  00321C  2EE8               	decfsz	wreg,f,c
 14695  00321E  D7FA               	goto	u29525
 14696  003220  C0DD  F113         	movff	??_f_write,f_write@wcnt
 14697  003224  C0DE  F114         	movff	??_f_write+1,f_write@wcnt+1
 14698                           
 14699                           ;ff.c: 3891: continue;
 14700  003228  D0C4               	goto	l25735
 14701  00322A                     l25711:
 14702                           
 14703                           ; BSR set to: 1
 14704                           ;ff.c: 3892: };ff.c: 3894: if (fp->fptr >= fp->obj.objsize) {
 14705  00322A  0100               	movlb	0	; () banked
 14706  00322C  EE20 F00A          	lfsr	2,10
 14707  003230  51D5               	movf	f_write@fp& (0+255),w,b
 14708  003232  26D9               	addwf	fsr2l,f,c
 14709  003234  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14710  003236  22DA               	addwfc	fsr2h,f,c
 14711  003238  EE10 F010          	lfsr	1,16
 14712  00323C  51D5               	movf	f_write@fp& (0+255),w,b
 14713  00323E  26E1               	addwf	fsr1l,f,c
 14714  003240  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14715  003242  22E2               	addwfc	fsr1h,f,c
 14716  003244  50DE               	movf	postinc2,w,c
 14717  003246  5CE6               	subwf	postinc1,w,c
 14718  003248  50DE               	movf	postinc2,w,c
 14719  00324A  58E6               	subwfb	postinc1,w,c
 14720  00324C  50DE               	movf	postinc2,w,c
 14721  00324E  58E6               	subwfb	postinc1,w,c
 14722  003250  50DE               	movf	postinc2,w,c
 14723  003252  58E6               	subwfb	postinc1,w,c
 14724  003254  A0D8               	btfss	status,0,c
 14725  003256  D021               	goto	l708
 14726                           
 14727                           ; BSR set to: 0
 14728                           ;ff.c: 3895: if (sync_window(fs) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DI
      +                          SK_ERR; };
 14729  003258  C115  F079         	movff	f_write@fs,sync_window@fs
 14730  00325C  C116  F07A         	movff	f_write@fs+1,sync_window@fs+1
 14731  003260  ECA6  F054         	call	_sync_window	;wreg free
 14732  003264  0900               	iorlw	0
 14733  003266  B4D8               	btfsc	status,2,c
 14734  003268  D009               	goto	l25719
 14735                           
 14736                           ; BSR set to: 0
 14737  00326A  EE20 F00F          	lfsr	2,15
 14738  00326E  51D5               	movf	f_write@fp& (0+255),w,b
 14739  003270  26D9               	addwf	fsr2l,f,c
 14740  003272  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14741  003274  22DA               	addwfc	fsr2h,f,c
 14742  003276  0E01               	movlw	1
 14743  003278  6EDF               	movwf	indf2,c
 14744  00327A  0012               	return	
 14745  00327C                     l25719:
 14746                           
 14747                           ; BSR set to: 0
 14748                           ;ff.c: 3896: fs->winsect = sect;
 14749  00327C  0101               	movlb	1	; () banked
 14750  00327E  EE20 F02B          	lfsr	2,43
 14751  003282  5115               	movf	f_write@fs& (0+255),w,b
 14752  003284  26D9               	addwf	fsr2l,f,c
 14753  003286  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14754  003288  22DA               	addwfc	fsr2h,f,c
 14755  00328A  C10B  FFDE         	movff	f_write@sect,postinc2
 14756  00328E  C10C  FFDE         	movff	f_write@sect+1,postinc2
 14757  003292  C10D  FFDE         	movff	f_write@sect+2,postinc2
 14758  003296  C10E  FFDE         	movff	f_write@sect+3,postinc2
 14759  00329A                     l708:
 14760                           
 14761                           ;ff.c: 3897: };ff.c: 3905: fp->sect = sect;
 14762  00329A  0100               	movlb	0	; () banked
 14763  00329C  EE20 F018          	lfsr	2,24
 14764  0032A0  51D5               	movf	f_write@fp& (0+255),w,b
 14765  0032A2  26D9               	addwf	fsr2l,f,c
 14766  0032A4  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14767  0032A6  22DA               	addwfc	fsr2h,f,c
 14768  0032A8  C10B  FFDE         	movff	f_write@sect,postinc2
 14769  0032AC  C10C  FFDE         	movff	f_write@sect+1,postinc2
 14770  0032B0  C10D  FFDE         	movff	f_write@sect+2,postinc2
 14771  0032B4  C10E  FFDE         	movff	f_write@sect+3,postinc2
 14772  0032B8                     l691:
 14773                           
 14774                           ; BSR set to: 0
 14775                           ;ff.c: 3906: };ff.c: 3907: wcnt = ((UINT)512) - (UINT)fp->fptr % ((UINT)512);
 14776  0032B8  0EFF               	movlw	255
 14777  0032BA  6FDD               	movwf	??_f_write& (0+255),b
 14778  0032BC  0E01               	movlw	1
 14779  0032BE  6FDE               	movwf	(??_f_write+1)& (0+255),b
 14780  0032C0  EE20 F010          	lfsr	2,16
 14781  0032C4  51D5               	movf	f_write@fp& (0+255),w,b
 14782  0032C6  26D9               	addwf	fsr2l,f,c
 14783  0032C8  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14784  0032CA  22DA               	addwfc	fsr2h,f,c
 14785  0032CC  CFDE F0DF          	movff	postinc2,??_f_write+2
 14786  0032D0  CFDD F0E0          	movff	postdec2,??_f_write+3
 14787  0032D4  51DD               	movf	??_f_write& (0+255),w,b
 14788  0032D6  17DF               	andwf	(??_f_write+2)& (0+255),f,b
 14789  0032D8  51DE               	movf	(??_f_write+1)& (0+255),w,b
 14790  0032DA  17E0               	andwf	(??_f_write+3)& (0+255),f,b
 14791  0032DC  51DF               	movf	(??_f_write+2)& (0+255),w,b
 14792  0032DE  0800               	sublw	0
 14793  0032E0  0101               	movlb	1	; () banked
 14794  0032E2  6F13               	movwf	f_write@wcnt& (0+255),b
 14795  0032E4  0100               	movlb	0	; () banked
 14796  0032E6  51E0               	movf	(??_f_write+3)& (0+255),w,b
 14797  0032E8  A0D8               	btfss	status,0,c
 14798  0032EA  2AE8               	incf	wreg,f,c
 14799  0032EC  0802               	sublw	2
 14800  0032EE  0101               	movlb	1	; () banked
 14801  0032F0  6F14               	movwf	(f_write@wcnt+1)& (0+255),b
 14802                           
 14803                           ; BSR set to: 1
 14804                           ;ff.c: 3908: if (wcnt > btw) wcnt = btw;
 14805  0032F2  5113               	movf	f_write@wcnt& (0+255),w,b
 14806  0032F4  0100               	movlb	0	; () banked
 14807  0032F6  5DD9               	subwf	f_write@btw& (0+255),w,b
 14808  0032F8  0101               	movlb	1	; () banked
 14809  0032FA  5114               	movf	(f_write@wcnt+1)& (0+255),w,b
 14810  0032FC  0100               	movlb	0	; () banked
 14811  0032FE  59DA               	subwfb	(f_write@btw+1)& (0+255),w,b
 14812  003300  B0D8               	btfsc	status,0,c
 14813  003302  D004               	goto	l25725
 14814                           
 14815                           ; BSR set to: 0
 14816  003304  C0D9  F113         	movff	f_write@btw,f_write@wcnt
 14817  003308  C0DA  F114         	movff	f_write@btw+1,f_write@wcnt+1
 14818  00330C                     l25725:
 14819                           
 14820                           ; BSR set to: 0
 14821                           ;ff.c: 3910: if (move_window(fs, fp->sect) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); re
      +                          turn FR_DISK_ERR; };
 14822  00330C  C115  F08C         	movff	f_write@fs,move_window@fs
 14823  003310  C116  F08D         	movff	f_write@fs+1,move_window@fs+1
 14824  003314  EE20 F018          	lfsr	2,24
 14825  003318  51D5               	movf	f_write@fp& (0+255),w,b
 14826  00331A  26D9               	addwf	fsr2l,f,c
 14827  00331C  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14828  00331E  22DA               	addwfc	fsr2h,f,c
 14829  003320  CFDE F08E          	movff	postinc2,move_window@sector
 14830  003324  CFDE F08F          	movff	postinc2,move_window@sector+1
 14831  003328  CFDE F090          	movff	postinc2,move_window@sector+2
 14832  00332C  CFDE F091          	movff	postinc2,move_window@sector+3
 14833  003330  EC1B  F067         	call	_move_window	;wreg free
 14834  003334  0900               	iorlw	0
 14835  003336  B4D8               	btfsc	status,2,c
 14836  003338  D009               	goto	l25731
 14837                           
 14838                           ; BSR set to: 0
 14839  00333A  EE20 F00F          	lfsr	2,15
 14840  00333E  51D5               	movf	f_write@fp& (0+255),w,b
 14841  003340  26D9               	addwf	fsr2l,f,c
 14842  003342  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14843  003344  22DA               	addwfc	fsr2h,f,c
 14844  003346  0E01               	movlw	1
 14845  003348  6EDF               	movwf	indf2,c
 14846  00334A  0012               	return	
 14847  00334C                     l25731:
 14848                           
 14849                           ; BSR set to: 0
 14850                           ;ff.c: 3911: mem_cpy(fs->win + fp->fptr % ((UINT)512), wbuff, wcnt);
 14851  00334C  0EFF               	movlw	255
 14852  00334E  6FDD               	movwf	??_f_write& (0+255),b
 14853  003350  0E01               	movlw	1
 14854  003352  6FDE               	movwf	(??_f_write+1)& (0+255),b
 14855  003354  EE20 F010          	lfsr	2,16
 14856  003358  51D5               	movf	f_write@fp& (0+255),w,b
 14857  00335A  26D9               	addwf	fsr2l,f,c
 14858  00335C  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14859  00335E  22DA               	addwfc	fsr2h,f,c
 14860  003360  CFDE F0DF          	movff	postinc2,??_f_write+2
 14861  003364  CFDD F0E0          	movff	postdec2,??_f_write+3
 14862  003368  51DD               	movf	??_f_write& (0+255),w,b
 14863  00336A  17DF               	andwf	(??_f_write+2)& (0+255),f,b
 14864  00336C  51DE               	movf	(??_f_write+1)& (0+255),w,b
 14865  00336E  17E0               	andwf	(??_f_write+3)& (0+255),f,b
 14866  003370  C115  F0E1         	movff	f_write@fs,??_f_write+4
 14867  003374  C116  F0E2         	movff	f_write@fs+1,??_f_write+5
 14868  003378  51DF               	movf	(??_f_write+2)& (0+255),w,b
 14869  00337A  27E1               	addwf	(??_f_write+4)& (0+255),f,b
 14870  00337C  51E0               	movf	(??_f_write+3)& (0+255),w,b
 14871  00337E  23E2               	addwfc	(??_f_write+5)& (0+255),f,b
 14872  003380  0E2F               	movlw	47
 14873  003382  25E1               	addwf	(??_f_write+4)& (0+255),w,b
 14874  003384  6E0E               	movwf	mem_cpy@dst^0,c
 14875  003386  0E00               	movlw	0
 14876  003388  21E2               	addwfc	(??_f_write+5)& (0+255),w,b
 14877  00338A  6E0F               	movwf	(mem_cpy@dst+1)^0,c
 14878  00338C  C105  F010         	movff	f_write@wbuff,mem_cpy@src
 14879  003390  C106  F011         	movff	f_write@wbuff+1,mem_cpy@src+1
 14880  003394  C113  F012         	movff	f_write@wcnt,mem_cpy@cnt
 14881  003398  C114  F013         	movff	f_write@wcnt+1,mem_cpy@cnt+1
 14882  00339C  EC02  F076         	call	_mem_cpy	;wreg free
 14883                           
 14884                           ;ff.c: 3912: fs->wflag = 1;
 14885  0033A0  0101               	movlb	1	; () banked
 14886  0033A2  EE20 F003          	lfsr	2,3
 14887  0033A6  5115               	movf	f_write@fs& (0+255),w,b
 14888  0033A8  26D9               	addwf	fsr2l,f,c
 14889  0033AA  5116               	movf	(f_write@fs+1)& (0+255),w,b
 14890  0033AC  22DA               	addwfc	fsr2h,f,c
 14891  0033AE  0E01               	movlw	1
 14892  0033B0  6EDF               	movwf	indf2,c
 14893  0033B2                     l25735:
 14894  0033B2  0101               	movlb	1	; () banked
 14895  0033B4  5113               	movf	f_write@wcnt& (0+255),w,b
 14896  0033B6  0100               	movlb	0	; () banked
 14897  0033B8  5FD9               	subwf	f_write@btw& (0+255),f,b
 14898  0033BA  0101               	movlb	1	; () banked
 14899  0033BC  5114               	movf	(f_write@wcnt+1)& (0+255),w,b
 14900  0033BE  0100               	movlb	0	; () banked
 14901  0033C0  5BDA               	subwfb	(f_write@btw+1)& (0+255),f,b
 14902                           
 14903                           ; BSR set to: 0
 14904  0033C2  C0DB  FFD9         	movff	f_write@bw,fsr2l
 14905  0033C6  C0DC  FFDA         	movff	f_write@bw+1,fsr2h
 14906  0033CA  0101               	movlb	1	; () banked
 14907  0033CC  5113               	movf	f_write@wcnt& (0+255),w,b
 14908  0033CE  26DE               	addwf	postinc2,f,c
 14909  0033D0  5114               	movf	(f_write@wcnt+1)& (0+255),w,b
 14910  0033D2  22DD               	addwfc	postdec2,f,c
 14911                           
 14912                           ; BSR set to: 1
 14913  0033D4  5113               	movf	f_write@wcnt& (0+255),w,b
 14914  0033D6  2705               	addwf	f_write@wbuff& (0+255),f,b
 14915  0033D8  5114               	movf	(f_write@wcnt+1)& (0+255),w,b
 14916  0033DA  2306               	addwfc	(f_write@wbuff+1)& (0+255),f,b
 14917                           
 14918                           ; BSR set to: 1
 14919  0033DC  0100               	movlb	0	; () banked
 14920  0033DE  EE20 F010          	lfsr	2,16
 14921  0033E2  51D5               	movf	f_write@fp& (0+255),w,b
 14922  0033E4  26D9               	addwf	fsr2l,f,c
 14923  0033E6  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14924  0033E8  22DA               	addwfc	fsr2h,f,c
 14925  0033EA  0101               	movlb	1	; () banked
 14926  0033EC  5113               	movf	f_write@wcnt& (0+255),w,b
 14927  0033EE  26DE               	addwf	postinc2,f,c
 14928  0033F0  5114               	movf	(f_write@wcnt+1)& (0+255),w,b
 14929  0033F2  22DE               	addwfc	postinc2,f,c
 14930  0033F4  0E00               	movlw	0
 14931  0033F6  22DE               	addwfc	postinc2,f,c
 14932  0033F8  22DE               	addwfc	postinc2,f,c
 14933                           
 14934                           ; BSR set to: 1
 14935  0033FA  0100               	movlb	0	; () banked
 14936  0033FC  EE20 F010          	lfsr	2,16
 14937  003400  51D5               	movf	f_write@fp& (0+255),w,b
 14938  003402  26D9               	addwf	fsr2l,f,c
 14939  003404  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14940  003406  22DA               	addwfc	fsr2h,f,c
 14941  003408  EE10 F00A          	lfsr	1,10
 14942  00340C  51D5               	movf	f_write@fp& (0+255),w,b
 14943  00340E  26E1               	addwf	fsr1l,f,c
 14944  003410  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14945  003412  22E2               	addwfc	fsr1h,f,c
 14946  003414  50DE               	movf	postinc2,w,c
 14947  003416  5CE6               	subwf	postinc1,w,c
 14948  003418  50DE               	movf	postinc2,w,c
 14949  00341A  58E6               	subwfb	postinc1,w,c
 14950  00341C  50DE               	movf	postinc2,w,c
 14951  00341E  58E6               	subwfb	postinc1,w,c
 14952  003420  50DE               	movf	postinc2,w,c
 14953  003422  58E6               	subwfb	postinc1,w,c
 14954  003424  A0D8               	btfss	status,0,c
 14955  003426  D003               	goto	l25747
 14956                           
 14957                           ; BSR set to: 0
 14958  003428  EE20 F00A          	lfsr	2,10
 14959  00342C  D002               	goto	L7
 14960  00342E                     l25747:
 14961                           
 14962                           ; BSR set to: 0
 14963  00342E  EE20 F010          	lfsr	2,16
 14964  003432                     L7:
 14965  003432  51D5               	movf	f_write@fp& (0+255),w,b
 14966  003434  26D9               	addwf	fsr2l,f,c
 14967  003436  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14968  003438  22DA               	addwfc	fsr2h,f,c
 14969  00343A  CFDE F100          	movff	postinc2,_f_write$1484
 14970  00343E  CFDE F101          	movff	postinc2,_f_write$1484+1
 14971  003442  CFDE F102          	movff	postinc2,_f_write$1484+2
 14972  003446  CFDE F103          	movff	postinc2,_f_write$1484+3
 14973                           
 14974                           ; BSR set to: 0
 14975  00344A  EE20 F00A          	lfsr	2,10
 14976  00344E  51D5               	movf	f_write@fp& (0+255),w,b
 14977  003450  26D9               	addwf	fsr2l,f,c
 14978  003452  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14979  003454  22DA               	addwfc	fsr2h,f,c
 14980  003456  C100  FFDE         	movff	_f_write$1484,postinc2
 14981  00345A  C101  FFDE         	movff	_f_write$1484+1,postinc2
 14982  00345E  C102  FFDE         	movff	_f_write$1484+2,postinc2
 14983  003462  C103  FFDE         	movff	_f_write$1484+3,postinc2
 14984  003466                     l25749:
 14985                           
 14986                           ; BSR set to: 0
 14987  003466  51D9               	movf	f_write@btw& (0+255),w,b
 14988  003468  11DA               	iorwf	(f_write@btw+1)& (0+255),w,b
 14989  00346A  A4D8               	btfss	status,2,c
 14990  00346C  D4A6               	goto	l25635
 14991  00346E                     u29580:
 14992                           
 14993                           ;ff.c: 3917: };ff.c: 3919: fp->flag |= 0x40;
 14994  00346E  0100               	movlb	0	; () banked
 14995  003470  EE20 F00E          	lfsr	2,14
 14996  003474  51D5               	movf	f_write@fp& (0+255),w,b
 14997  003476  26D9               	addwf	fsr2l,f,c
 14998  003478  51D6               	movf	(f_write@fp+1)& (0+255),w,b
 14999  00347A  22DA               	addwfc	fsr2h,f,c
 15000  00347C  0E00               	movlw	0
 15001  00347E  8CDB               	bsf	plusw2,6,c
 15002  003480  0012               	return		;funcret
 15003  003482                     __end_of_f_write:
 15004                           	callstack 0
 15005                           
 15006 ;; *************** function _f_open *****************
 15007 ;; Defined at:
 15008 ;;		line 3520 in file "mcc_generated_files/fatfs/ff.c"
 15009 ;; Parameters:    Size  Location     Type
 15010 ;;  fp              2   10[BANK1 ] PTR struct .
 15011 ;;		 -> file(34), file@fatfs_demo$F388(34), 
 15012 ;;  path            2   12[BANK1 ] PTR const unsigned char 
 15013 ;;		 -> STR_10(3), STR_8(12), STR_7(3), STR_3(3), 
 15014 ;;		 -> STR_2(10), STR_1(3), 
 15015 ;;  mode            1   14[BANK1 ] unsigned char 
 15016 ;; Auto vars:     Size  Location     Type
 15017 ;;  dj             40   52[BANK1 ] struct .
 15018 ;;  clst            4   45[BANK1 ] unsigned long 
 15019 ;;  ofs             4   41[BANK1 ] unsigned long 
 15020 ;;  cl              4   37[BANK1 ] unsigned long 
 15021 ;;  bcs             4   33[BANK1 ] unsigned long 
 15022 ;;  sc              4   27[BANK1 ] unsigned long 
 15023 ;;  dw              4   23[BANK1 ] unsigned long 
 15024 ;;  fs              2   49[BANK1 ] PTR struct .
 15025 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 15026 ;;  res             1   51[BANK1 ] enum E64
 15027 ;; Return value:  Size  Location     Type
 15028 ;;                  1    wreg      enum E64
 15029 ;; Registers used:
 15030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 15031 ;; Tracked objects:
 15032 ;;		On entry : 3F/1
 15033 ;;		On exit  : 3F/1
 15034 ;;		Unchanged: 0/0
 15035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15036 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15037 ;;      Locals:         0       0      69       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15038 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15039 ;;      Totals:         0       0      82       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15040 ;;Total ram usage:       82 bytes
 15041 ;; Hardware stack levels used:    1
 15042 ;; Hardware stack levels required when called:   18
 15043 ;; This function calls:
 15044 ;;		_clst2sect
 15045 ;;		_dir_register
 15046 ;;		_find_volume
 15047 ;;		_follow_path
 15048 ;;		_get_fat
 15049 ;;		_get_fattime
 15050 ;;		_ld_clust
 15051 ;;		_ld_dword
 15052 ;;		_move_window
 15053 ;;		_remove_chain
 15054 ;;		_st_clust
 15055 ;;		_st_dword
 15056 ;; This function is called by:
 15057 ;;		_NormalProc
 15058 ;; This function uses a non-reentrant model
 15059 ;;
 15060                           
 15061                           	psect	text50
 15062  004184                     __ptext50:
 15063                           	callstack 0
 15064  004184                     _f_open:
 15065                           	callstack 11
 15066                           
 15067                           ; BSR set to: 1
 15068                           ;ff.c: 3526: FRESULT res;;ff.c: 3527: FFDIR dj;;ff.c: 3528: FATFS *fs;;ff.c: 3530: DWORD
      +                           dw, cl, bcs, clst, sc;;ff.c: 3531: FSIZE_t ofs;;ff.c: 3536: if (!fp) return FR_INVALID_
      +                          OBJECT;
 15069                           
 15070                           ;incstack = 0
 15071  004184  510A               	movf	f_open@fp& (0+255),w,b
 15072  004186  110B               	iorwf	(f_open@fp+1)& (0+255),w,b
 15073  004188  A4D8               	btfss	status,2,c
 15074  00418A  D002               	goto	l25471
 15075                           
 15076                           ; BSR set to: 1
 15077  00418C  0E09               	movlw	9
 15078  00418E  0012               	return	
 15079  004190                     l25471:
 15080                           
 15081                           ; BSR set to: 1
 15082                           
 15083                           ; BSR set to: 1
 15084  004190  0E3F               	movlw	63
 15085  004192  170E               	andwf	f_open@mode& (0+255),f,b
 15086                           
 15087                           ; BSR set to: 1
 15088                           ;ff.c: 3540: res = find_volume(&path, &fs, mode);
 15089  004194  0E0C               	movlw	low f_open@path
 15090  004196  0100               	movlb	0	; () banked
 15091  004198  6F9E               	movwf	find_volume@path& (0+255),b
 15092  00419A  0E01               	movlw	high f_open@path
 15093  00419C  6F9F               	movwf	(find_volume@path+1)& (0+255),b
 15094  00419E  0E31               	movlw	low f_open@fs
 15095  0041A0  6FA0               	movwf	find_volume@rfs& (0+255),b
 15096  0041A2  0E01               	movlw	high f_open@fs
 15097  0041A4  6FA1               	movwf	(find_volume@rfs+1)& (0+255),b
 15098  0041A6  C10E  F0A2         	movff	f_open@mode,find_volume@mode
 15099  0041AA  EC6A  F011         	call	_find_volume	;wreg free
 15100  0041AE  0101               	movlb	1	; () banked
 15101  0041B0  6F33               	movwf	f_open@res& (0+255),b
 15102                           
 15103                           ; BSR set to: 1
 15104                           ;ff.c: 3541: if (res == FR_OK) {
 15105  0041B2  5133               	movf	f_open@res& (0+255),w,b
 15106  0041B4  A4D8               	btfss	status,2,c
 15107  0041B6  D29D               	goto	l25607
 15108                           
 15109                           ; BSR set to: 1
 15110                           ;ff.c: 3542: dj.obj.fs = fs;
 15111  0041B8  C131  F134         	movff	f_open@fs,f_open@dj
 15112  0041BC  C132  F135         	movff	f_open@fs+1,f_open@dj+1
 15113                           
 15114                           ; BSR set to: 1
 15115                           ;ff.c: 3543: ;;ff.c: 3544: res = follow_path(&dj, path);
 15116  0041C0  0E34               	movlw	low f_open@dj
 15117  0041C2  0100               	movlb	0	; () banked
 15118  0041C4  6FFB               	movwf	follow_path@dp& (0+255),b
 15119  0041C6  0E01               	movlw	high f_open@dj
 15120  0041C8  6FFC               	movwf	(follow_path@dp+1)& (0+255),b
 15121  0041CA  C10C  F0FD         	movff	f_open@path,follow_path@path
 15122  0041CE  C10D  F0FE         	movff	f_open@path+1,follow_path@path+1
 15123  0041D2  EC63  F055         	call	_follow_path	;wreg free
 15124  0041D6  6F33               	movwf	f_open@res& (0+255),b
 15125                           
 15126                           ; BSR set to: 1
 15127                           ;ff.c: 3546: if (res == FR_OK) {
 15128  0041D8  5133               	movf	f_open@res& (0+255),w,b
 15129  0041DA  B4D8               	btfsc	status,2,c
 15130                           
 15131                           ; BSR set to: 1
 15132                           ;ff.c: 3547: if (dj.fn[11] & 0x80) {
 15133  0041DC  AF5B               	btfss	(f_open@dj+39)& (0+255),7,b
 15134  0041DE  D002               	goto	l25491
 15135                           
 15136                           ; BSR set to: 1
 15137                           ;ff.c: 3548: res = FR_INVALID_NAME;
 15138  0041E0  0E06               	movlw	6
 15139  0041E2  6F33               	movwf	f_open@res& (0+255),b
 15140  0041E4                     l25491:
 15141                           
 15142                           ; BSR set to: 1
 15143                           ;ff.c: 3549: };ff.c: 3555: };ff.c: 3557: if (mode & (0x08 | 0x10 | 0x04)) {
 15144  0041E4  C10E  F10F         	movff	f_open@mode,??_f_open
 15145  0041E8  0E1C               	movlw	28
 15146  0041EA  170F               	andwf	??_f_open& (0+255),f,b
 15147  0041EC  B4D8               	btfsc	status,2,c
 15148  0041EE  D0D5               	goto	l25533
 15149                           
 15150                           ; BSR set to: 1
 15151                           ;ff.c: 3558: if (res != FR_OK) {
 15152  0041F0  5133               	movf	f_open@res& (0+255),w,b
 15153  0041F2  B4D8               	btfsc	status,2,c
 15154  0041F4  D00D               	goto	l25501
 15155                           
 15156                           ; BSR set to: 1
 15157                           ;ff.c: 3559: if (res == FR_NO_FILE) {
 15158  0041F6  0E04               	movlw	4
 15159  0041F8  1933               	xorwf	f_open@res& (0+255),w,b
 15160  0041FA  A4D8               	btfss	status,2,c
 15161  0041FC  D007               	goto	l25499
 15162                           
 15163                           ; BSR set to: 1
 15164                           ;ff.c: 3563: res = dir_register(&dj);
 15165  0041FE  0E34               	movlw	low f_open@dj
 15166  004200  6F00               	movwf	dir_register@dp& (0+255),b
 15167  004202  0E01               	movlw	high f_open@dj
 15168  004204  6F01               	movwf	(dir_register@dp+1)& (0+255),b
 15169  004206  ECFF  F062         	call	_dir_register	;wreg free
 15170  00420A  6F33               	movwf	f_open@res& (0+255),b
 15171  00420C                     l25499:
 15172                           
 15173                           ; BSR set to: 1
 15174                           ;ff.c: 3565: };ff.c: 3566: mode |= 0x08;
 15175  00420C  870E               	bsf	f_open@mode& (0+255),3,b
 15176                           
 15177                           ;ff.c: 3567: }
 15178  00420E  D00C               	goto	l627
 15179  004210                     l25501:
 15180                           
 15181                           ; BSR set to: 1
 15182                           ;ff.c: 3568: else {;ff.c: 3569: if (dj.obj.attr & (0x01 | 0x10)) {
 15183  004210  C138  F10F         	movff	f_open@dj+4,??_f_open
 15184  004214  0E11               	movlw	17
 15185  004216  170F               	andwf	??_f_open& (0+255),f,b
 15186  004218  B4D8               	btfsc	status,2,c
 15187  00421A  D002               	goto	l628
 15188                           
 15189                           ; BSR set to: 1
 15190                           ;ff.c: 3570: res = FR_DENIED;
 15191  00421C  0E07               	movlw	7
 15192  00421E  D003               	goto	L8
 15193  004220                     l628:
 15194                           
 15195                           ; BSR set to: 1
 15196                           ;ff.c: 3572: if (mode & 0x04) res = FR_EXIST;
 15197  004220  A50E               	btfss	f_open@mode& (0+255),2,b
 15198  004222  D002               	goto	l627
 15199                           
 15200                           ; BSR set to: 1
 15201  004224  0E08               	movlw	8
 15202  004226                     L8:
 15203  004226  6F33               	movwf	f_open@res& (0+255),b
 15204  004228                     l627:
 15205                           
 15206                           ; BSR set to: 1
 15207                           ;ff.c: 3573: };ff.c: 3574: };ff.c: 3575: if (res == FR_OK && (mode & 0x08)) {
 15208  004228  5133               	movf	f_open@res& (0+255),w,b
 15209  00422A  B4D8               	btfsc	status,2,c
 15210                           
 15211                           ; BSR set to: 1
 15212  00422C  A70E               	btfss	f_open@mode& (0+255),3,b
 15213  00422E  D0C1               	goto	l634
 15214                           
 15215                           ; BSR set to: 1
 15216                           ;ff.c: 3594: {;ff.c: 3596: cl = ld_clust(fs, dj.dir);
 15217  004230  C131  F015         	movff	f_open@fs,ld_clust@fs
 15218  004234  C132  F016         	movff	f_open@fs+1,ld_clust@fs+1
 15219  004238  C14E  F017         	movff	f_open@dj+26,ld_clust@dir
 15220  00423C  C14F  F018         	movff	f_open@dj+27,ld_clust@dir+1
 15221  004240  EC52  F06E         	call	_ld_clust	;wreg free
 15222  004244  C015  F125         	movff	?_ld_clust,f_open@cl
 15223  004248  C016  F126         	movff	?_ld_clust+1,f_open@cl+1
 15224  00424C  C017  F127         	movff	?_ld_clust+2,f_open@cl+2
 15225  004250  C018  F128         	movff	?_ld_clust+3,f_open@cl+3
 15226                           
 15227                           ;ff.c: 3597: st_dword(dj.dir + 14, get_fattime());
 15228  004254  0E0E               	movlw	14
 15229  004256  0101               	movlb	1	; () banked
 15230  004258  254E               	addwf	(f_open@dj+26)& (0+255),w,b
 15231  00425A  6E24               	movwf	st_dword@ptr^0,c
 15232  00425C  0E00               	movlw	0
 15233  00425E  214F               	addwfc	(f_open@dj+27)& (0+255),w,b
 15234  004260  6E25               	movwf	(st_dword@ptr+1)^0,c
 15235  004262  ECD8  F070         	call	_get_fattime	;wreg free
 15236  004266  C01F  F026         	movff	?_get_fattime,st_dword@val
 15237  00426A  C020  F027         	movff	?_get_fattime+1,st_dword@val+1
 15238  00426E  C021  F028         	movff	?_get_fattime+2,st_dword@val+2
 15239  004272  C022  F029         	movff	?_get_fattime+3,st_dword@val+3
 15240  004276  EC6E  F06F         	call	_st_dword	;wreg free
 15241                           
 15242                           ;ff.c: 3598: dj.dir[11] = 0x20;
 15243  00427A  0101               	movlb	1	; () banked
 15244  00427C  EE20 F00B          	lfsr	2,11
 15245  004280  514E               	movf	(f_open@dj+26)& (0+255),w,b
 15246  004282  26D9               	addwf	fsr2l,f,c
 15247  004284  514F               	movf	(f_open@dj+27)& (0+255),w,b
 15248  004286  22DA               	addwfc	fsr2h,f,c
 15249  004288  0E20               	movlw	32
 15250  00428A  6EDF               	movwf	indf2,c
 15251                           
 15252                           ; BSR set to: 1
 15253                           ;ff.c: 3599: st_clust(fs, dj.dir, 0);
 15254  00428C  C131  F012         	movff	f_open@fs,st_clust@fs
 15255  004290  C132  F013         	movff	f_open@fs+1,st_clust@fs+1
 15256  004294  C14E  F014         	movff	f_open@dj+26,st_clust@dir
 15257  004298  C14F  F015         	movff	f_open@dj+27,st_clust@dir+1
 15258  00429C  0E00               	movlw	0
 15259  00429E  6E16               	movwf	st_clust@cl^0,c
 15260  0042A0  0E00               	movlw	0
 15261  0042A2  6E17               	movwf	(st_clust@cl+1)^0,c
 15262  0042A4  0E00               	movlw	0
 15263  0042A6  6E18               	movwf	(st_clust@cl+2)^0,c
 15264  0042A8  0E00               	movlw	0
 15265  0042AA  6E19               	movwf	(st_clust@cl+3)^0,c
 15266  0042AC  EC21  F075         	call	_st_clust	;wreg free
 15267                           
 15268                           ;ff.c: 3600: st_dword(dj.dir + 28, 0);
 15269  0042B0  0E1C               	movlw	28
 15270  0042B2  0101               	movlb	1	; () banked
 15271  0042B4  254E               	addwf	(f_open@dj+26)& (0+255),w,b
 15272  0042B6  6E24               	movwf	st_dword@ptr^0,c
 15273  0042B8  0E00               	movlw	0
 15274  0042BA  214F               	addwfc	(f_open@dj+27)& (0+255),w,b
 15275  0042BC  6E25               	movwf	(st_dword@ptr+1)^0,c
 15276  0042BE  0E00               	movlw	0
 15277  0042C0  6E26               	movwf	st_dword@val^0,c
 15278  0042C2  0E00               	movlw	0
 15279  0042C4  6E27               	movwf	(st_dword@val+1)^0,c
 15280  0042C6  0E00               	movlw	0
 15281  0042C8  6E28               	movwf	(st_dword@val+2)^0,c
 15282  0042CA  0E00               	movlw	0
 15283  0042CC  6E29               	movwf	(st_dword@val+3)^0,c
 15284  0042CE  EC6E  F06F         	call	_st_dword	;wreg free
 15285                           
 15286                           ;ff.c: 3601: fs->wflag = 1;
 15287  0042D2  0101               	movlb	1	; () banked
 15288  0042D4  EE20 F003          	lfsr	2,3
 15289  0042D8  5131               	movf	f_open@fs& (0+255),w,b
 15290  0042DA  26D9               	addwf	fsr2l,f,c
 15291  0042DC  5132               	movf	(f_open@fs+1)& (0+255),w,b
 15292  0042DE  22DA               	addwfc	fsr2h,f,c
 15293  0042E0  0E01               	movlw	1
 15294  0042E2  6EDF               	movwf	indf2,c
 15295                           
 15296                           ; BSR set to: 1
 15297                           ;ff.c: 3602: if (cl != 0) {
 15298  0042E4  5125               	movf	f_open@cl& (0+255),w,b
 15299  0042E6  1126               	iorwf	(f_open@cl+1)& (0+255),w,b
 15300  0042E8  1127               	iorwf	(f_open@cl+2)& (0+255),w,b
 15301  0042EA  1128               	iorwf	(f_open@cl+3)& (0+255),w,b
 15302  0042EC  B4D8               	btfsc	status,2,c
 15303  0042EE  D061               	goto	l634
 15304                           
 15305                           ; BSR set to: 1
 15306                           ;ff.c: 3603: dw = fs->winsect;
 15307  0042F0  EE20 F02B          	lfsr	2,43
 15308  0042F4  5131               	movf	f_open@fs& (0+255),w,b
 15309  0042F6  26D9               	addwf	fsr2l,f,c
 15310  0042F8  5132               	movf	(f_open@fs+1)& (0+255),w,b
 15311  0042FA  22DA               	addwfc	fsr2h,f,c
 15312  0042FC  CFDE F117          	movff	postinc2,f_open@dw
 15313  004300  CFDE F118          	movff	postinc2,f_open@dw+1
 15314  004304  CFDE F119          	movff	postinc2,f_open@dw+2
 15315  004308  CFDE F11A          	movff	postinc2,f_open@dw+3
 15316                           
 15317                           ; BSR set to: 1
 15318                           ;ff.c: 3604: res = remove_chain(&dj.obj, cl, 0);
 15319  00430C  0E34               	movlw	low f_open@dj
 15320  00430E  0100               	movlb	0	; () banked
 15321  004310  6FB8               	movwf	remove_chain@obj& (0+255),b
 15322  004312  0E01               	movlw	high f_open@dj
 15323  004314  6FB9               	movwf	(remove_chain@obj+1)& (0+255),b
 15324  004316  C125  F0BA         	movff	f_open@cl,remove_chain@clst
 15325  00431A  C126  F0BB         	movff	f_open@cl+1,remove_chain@clst+1
 15326  00431E  C127  F0BC         	movff	f_open@cl+2,remove_chain@clst+2
 15327  004322  C128  F0BD         	movff	f_open@cl+3,remove_chain@clst+3
 15328  004326  0E00               	movlw	0
 15329  004328  6FBE               	movwf	remove_chain@pclst& (0+255),b
 15330  00432A  0E00               	movlw	0
 15331  00432C  6FBF               	movwf	(remove_chain@pclst+1)& (0+255),b
 15332  00432E  0E00               	movlw	0
 15333  004330  6FC0               	movwf	(remove_chain@pclst+2)& (0+255),b
 15334  004332  0E00               	movlw	0
 15335  004334  6FC1               	movwf	(remove_chain@pclst+3)& (0+255),b
 15336  004336  ECCC  F053         	call	_remove_chain	;wreg free
 15337  00433A  0101               	movlb	1	; () banked
 15338  00433C  6F33               	movwf	f_open@res& (0+255),b
 15339                           
 15340                           ; BSR set to: 1
 15341                           ;ff.c: 3605: if (res == FR_OK) {
 15342  00433E  5133               	movf	f_open@res& (0+255),w,b
 15343  004340  A4D8               	btfss	status,2,c
 15344  004342  D037               	goto	l634
 15345                           
 15346                           ; BSR set to: 1
 15347                           ;ff.c: 3606: res = move_window(fs, dw);
 15348  004344  C131  F08C         	movff	f_open@fs,move_window@fs
 15349  004348  C132  F08D         	movff	f_open@fs+1,move_window@fs+1
 15350  00434C  C117  F08E         	movff	f_open@dw,move_window@sector
 15351  004350  C118  F08F         	movff	f_open@dw+1,move_window@sector+1
 15352  004354  C119  F090         	movff	f_open@dw+2,move_window@sector+2
 15353  004358  C11A  F091         	movff	f_open@dw+3,move_window@sector+3
 15354  00435C  EC1B  F067         	call	_move_window	;wreg free
 15355  004360  0101               	movlb	1	; () banked
 15356  004362  6F33               	movwf	f_open@res& (0+255),b
 15357                           
 15358                           ; BSR set to: 1
 15359                           ;ff.c: 3607: fs->last_clst = cl - 1;
 15360  004364  0EFF               	movlw	255
 15361  004366  2525               	addwf	f_open@cl& (0+255),w,b
 15362  004368  6F0F               	movwf	??_f_open& (0+255),b
 15363  00436A  0EFF               	movlw	255
 15364  00436C  2126               	addwfc	(f_open@cl+1)& (0+255),w,b
 15365  00436E  6F10               	movwf	(??_f_open+1)& (0+255),b
 15366  004370  0EFF               	movlw	255
 15367  004372  2127               	addwfc	(f_open@cl+2)& (0+255),w,b
 15368  004374  6F11               	movwf	(??_f_open+2)& (0+255),b
 15369  004376  0EFF               	movlw	255
 15370  004378  2128               	addwfc	(f_open@cl+3)& (0+255),w,b
 15371  00437A  6F12               	movwf	(??_f_open+3)& (0+255),b
 15372  00437C  EE20 F00B          	lfsr	2,11
 15373  004380  5131               	movf	f_open@fs& (0+255),w,b
 15374  004382  26D9               	addwf	fsr2l,f,c
 15375  004384  5132               	movf	(f_open@fs+1)& (0+255),w,b
 15376  004386  22DA               	addwfc	fsr2h,f,c
 15377  004388  C10F  FFDE         	movff	??_f_open,postinc2
 15378  00438C  C110  FFDE         	movff	??_f_open+1,postinc2
 15379  004390  C111  FFDE         	movff	??_f_open+2,postinc2
 15380  004394  C112  FFDE         	movff	??_f_open+3,postinc2
 15381  004398  D00C               	goto	l634
 15382  00439A                     l25533:
 15383                           
 15384                           ; BSR set to: 1
 15385                           ;ff.c: 3613: else {;ff.c: 3614: if (res == FR_OK) {
 15386  00439A  5133               	movf	f_open@res& (0+255),w,b
 15387  00439C  A4D8               	btfss	status,2,c
 15388  00439E  D009               	goto	l634
 15389                           
 15390                           ; BSR set to: 1
 15391                           ;ff.c: 3615: if (dj.obj.attr & 0x10) {
 15392  0043A0  A938               	btfss	(f_open@dj+4)& (0+255),4,b
 15393  0043A2  D002               	goto	l636
 15394                           
 15395                           ; BSR set to: 1
 15396                           ;ff.c: 3616: res = FR_NO_FILE;
 15397  0043A4  0E04               	movlw	4
 15398  0043A6  D004               	goto	L9
 15399  0043A8                     l636:
 15400                           
 15401                           ; BSR set to: 1
 15402                           ;ff.c: 3618: if ((mode & 0x02) && (dj.obj.attr & 0x01)) {
 15403  0043A8  B30E               	btfsc	f_open@mode& (0+255),1,b
 15404                           
 15405                           ; BSR set to: 1
 15406  0043AA  A138               	btfss	(f_open@dj+4)& (0+255),0,b
 15407  0043AC  D002               	goto	l634
 15408                           
 15409                           ; BSR set to: 1
 15410                           ;ff.c: 3619: res = FR_DENIED;
 15411  0043AE  0E07               	movlw	7
 15412  0043B0                     L9:
 15413  0043B0  6F33               	movwf	f_open@res& (0+255),b
 15414  0043B2                     l634:
 15415                           
 15416                           ; BSR set to: 1
 15417                           ;ff.c: 3620: };ff.c: 3621: };ff.c: 3622: };ff.c: 3623: };ff.c: 3624: if (res == FR_OK) {
 15418  0043B2  5133               	movf	f_open@res& (0+255),w,b
 15419  0043B4  A4D8               	btfss	status,2,c
 15420  0043B6  D020               	goto	l25551
 15421                           
 15422                           ; BSR set to: 1
 15423                           ;ff.c: 3625: if (mode & 0x08) mode |= 0x40;
 15424  0043B8  B70E               	btfsc	f_open@mode& (0+255),3,b
 15425                           
 15426                           ; BSR set to: 1
 15427  0043BA  8D0E               	bsf	f_open@mode& (0+255),6,b
 15428                           
 15429                           ; BSR set to: 1
 15430                           ;ff.c: 3626: fp->dir_sect = fs->winsect;
 15431  0043BC  EE20 F02B          	lfsr	2,43
 15432  0043C0  5131               	movf	f_open@fs& (0+255),w,b
 15433  0043C2  26D9               	addwf	fsr2l,f,c
 15434  0043C4  5132               	movf	(f_open@fs+1)& (0+255),w,b
 15435  0043C6  22DA               	addwfc	fsr2h,f,c
 15436  0043C8  EE10 F01C          	lfsr	1,28
 15437  0043CC  510A               	movf	f_open@fp& (0+255),w,b
 15438  0043CE  26E1               	addwf	fsr1l,f,c
 15439  0043D0  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15440  0043D2  22E2               	addwfc	fsr1h,f,c
 15441  0043D4  CFDE FFE6          	movff	postinc2,postinc1
 15442  0043D8  CFDE FFE6          	movff	postinc2,postinc1
 15443  0043DC  CFDE FFE6          	movff	postinc2,postinc1
 15444  0043E0  CFDE FFE6          	movff	postinc2,postinc1
 15445                           
 15446                           ; BSR set to: 1
 15447                           ;ff.c: 3627: fp->dir_ptr = dj.dir;
 15448  0043E4  EE20 F020          	lfsr	2,32
 15449  0043E8  510A               	movf	f_open@fp& (0+255),w,b
 15450  0043EA  26D9               	addwf	fsr2l,f,c
 15451  0043EC  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15452  0043EE  22DA               	addwfc	fsr2h,f,c
 15453  0043F0  C14E  FFDE         	movff	f_open@dj+26,postinc2
 15454  0043F4  C14F  FFDD         	movff	f_open@dj+27,postdec2
 15455  0043F8                     l25551:
 15456                           
 15457                           ; BSR set to: 1
 15458                           ;ff.c: 3632: };ff.c: 3645: if (res == FR_OK) {
 15459  0043F8  5133               	movf	f_open@res& (0+255),w,b
 15460  0043FA  A4D8               	btfss	status,2,c
 15461  0043FC  D17A               	goto	l25607
 15462                           
 15463                           ; BSR set to: 1
 15464                           ;ff.c: 3654: {;ff.c: 3655: fp->obj.sclust = ld_clust(fs, dj.dir);
 15465  0043FE  C131  F015         	movff	f_open@fs,ld_clust@fs
 15466  004402  C132  F016         	movff	f_open@fs+1,ld_clust@fs+1
 15467  004406  C14E  F017         	movff	f_open@dj+26,ld_clust@dir
 15468  00440A  C14F  F018         	movff	f_open@dj+27,ld_clust@dir+1
 15469  00440E  EC52  F06E         	call	_ld_clust	;wreg free
 15470  004412  0101               	movlb	1	; () banked
 15471  004414  EE20 F006          	lfsr	2,6
 15472  004418  510A               	movf	f_open@fp& (0+255),w,b
 15473  00441A  26D9               	addwf	fsr2l,f,c
 15474  00441C  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15475  00441E  22DA               	addwfc	fsr2h,f,c
 15476  004420  C015  FFDE         	movff	?_ld_clust,postinc2
 15477  004424  C016  FFDE         	movff	?_ld_clust+1,postinc2
 15478  004428  C017  FFDE         	movff	?_ld_clust+2,postinc2
 15479  00442C  C018  FFDE         	movff	?_ld_clust+3,postinc2
 15480                           
 15481                           ;ff.c: 3656: fp->obj.objsize = ld_dword(dj.dir + 28);
 15482  004430  0E1C               	movlw	28
 15483  004432  254E               	addwf	(f_open@dj+26)& (0+255),w,b
 15484  004434  6E0E               	movwf	ld_dword@ptr^0,c
 15485  004436  0E00               	movlw	0
 15486  004438  214F               	addwfc	(f_open@dj+27)& (0+255),w,b
 15487  00443A  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 15488  00443C  ECB4  F065         	call	_ld_dword	;wreg free
 15489  004440  0101               	movlb	1	; () banked
 15490  004442  EE20 F00A          	lfsr	2,10
 15491  004446  510A               	movf	f_open@fp& (0+255),w,b
 15492  004448  26D9               	addwf	fsr2l,f,c
 15493  00444A  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15494  00444C  22DA               	addwfc	fsr2h,f,c
 15495  00444E  C00E  FFDE         	movff	?_ld_dword,postinc2
 15496  004452  C00F  FFDE         	movff	?_ld_dword+1,postinc2
 15497  004456  C010  FFDE         	movff	?_ld_dword+2,postinc2
 15498  00445A  C011  FFDE         	movff	?_ld_dword+3,postinc2
 15499                           
 15500                           ; BSR set to: 1
 15501                           ;ff.c: 3657: };ff.c: 3661: fp->obj.fs = fs;
 15502  00445E  C10A  FFD9         	movff	f_open@fp,fsr2l
 15503  004462  C10B  FFDA         	movff	f_open@fp+1,fsr2h
 15504  004466  C131  FFDE         	movff	f_open@fs,postinc2
 15505  00446A  C132  FFDD         	movff	f_open@fs+1,postdec2
 15506                           
 15507                           ; BSR set to: 1
 15508                           ;ff.c: 3662: fp->obj.id = fs->id;
 15509  00446E  EE20 F005          	lfsr	2,5
 15510  004472  5131               	movf	f_open@fs& (0+255),w,b
 15511  004474  26D9               	addwf	fsr2l,f,c
 15512  004476  5132               	movf	(f_open@fs+1)& (0+255),w,b
 15513  004478  22DA               	addwfc	fsr2h,f,c
 15514  00447A  EE10 F002          	lfsr	1,2
 15515  00447E  510A               	movf	f_open@fp& (0+255),w,b
 15516  004480  26E1               	addwf	fsr1l,f,c
 15517  004482  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15518  004484  22E2               	addwfc	fsr1h,f,c
 15519  004486  CFDE FFE6          	movff	postinc2,postinc1
 15520  00448A  CFDD FFE5          	movff	postdec2,postdec1
 15521                           
 15522                           ; BSR set to: 1
 15523                           ;ff.c: 3663: fp->flag = mode;
 15524  00448E  EE20 F00E          	lfsr	2,14
 15525  004492  510A               	movf	f_open@fp& (0+255),w,b
 15526  004494  26D9               	addwf	fsr2l,f,c
 15527  004496  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15528  004498  22DA               	addwfc	fsr2h,f,c
 15529  00449A  C10E  FFDF         	movff	f_open@mode,indf2
 15530                           
 15531                           ; BSR set to: 1
 15532                           ;ff.c: 3664: fp->err = 0;
 15533  00449E  EE20 F00F          	lfsr	2,15
 15534  0044A2  510A               	movf	f_open@fp& (0+255),w,b
 15535  0044A4  26D9               	addwf	fsr2l,f,c
 15536  0044A6  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15537  0044A8  22DA               	addwfc	fsr2h,f,c
 15538  0044AA  0E00               	movlw	0
 15539  0044AC  6EDF               	movwf	indf2,c
 15540                           
 15541                           ; BSR set to: 1
 15542                           ;ff.c: 3665: fp->sect = 0;
 15543  0044AE  EE20 F018          	lfsr	2,24
 15544  0044B2  510A               	movf	f_open@fp& (0+255),w,b
 15545  0044B4  26D9               	addwf	fsr2l,f,c
 15546  0044B6  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15547  0044B8  22DA               	addwfc	fsr2h,f,c
 15548  0044BA  6ADE               	clrf	postinc2,c
 15549  0044BC  6ADE               	clrf	postinc2,c
 15550  0044BE  6ADE               	clrf	postinc2,c
 15551  0044C0  6ADD               	clrf	postdec2,c
 15552                           
 15553                           ; BSR set to: 1
 15554                           ;ff.c: 3666: fp->fptr = 0;
 15555  0044C2  EE20 F010          	lfsr	2,16
 15556  0044C6  510A               	movf	f_open@fp& (0+255),w,b
 15557  0044C8  26D9               	addwf	fsr2l,f,c
 15558  0044CA  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15559  0044CC  22DA               	addwfc	fsr2h,f,c
 15560  0044CE  6ADE               	clrf	postinc2,c
 15561  0044D0  6ADE               	clrf	postinc2,c
 15562  0044D2  6ADE               	clrf	postinc2,c
 15563  0044D4  6ADD               	clrf	postdec2,c
 15564                           
 15565                           ; BSR set to: 1
 15566                           ;ff.c: 3671: if ((mode & 0x20) && fp->obj.objsize > 0) {
 15567  0044D6  AB0E               	btfss	f_open@mode& (0+255),5,b
 15568  0044D8  D10C               	goto	l25607
 15569                           
 15570                           ; BSR set to: 1
 15571  0044DA  EE20 F00A          	lfsr	2,10
 15572  0044DE  510A               	movf	f_open@fp& (0+255),w,b
 15573  0044E0  26D9               	addwf	fsr2l,f,c
 15574  0044E2  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15575  0044E4  22DA               	addwfc	fsr2h,f,c
 15576  0044E6  50DE               	movf	postinc2,w,c
 15577  0044E8  10DE               	iorwf	postinc2,w,c
 15578  0044EA  10DE               	iorwf	postinc2,w,c
 15579  0044EC  10DE               	iorwf	postinc2,w,c
 15580  0044EE  B4D8               	btfsc	status,2,c
 15581  0044F0  D100               	goto	l25607
 15582                           
 15583                           ; BSR set to: 1
 15584                           ;ff.c: 3672: fp->fptr = fp->obj.objsize;
 15585  0044F2  EE20 F00A          	lfsr	2,10
 15586  0044F6  510A               	movf	f_open@fp& (0+255),w,b
 15587  0044F8  26D9               	addwf	fsr2l,f,c
 15588  0044FA  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15589  0044FC  22DA               	addwfc	fsr2h,f,c
 15590  0044FE  EE10 F010          	lfsr	1,16
 15591  004502  510A               	movf	f_open@fp& (0+255),w,b
 15592  004504  26E1               	addwf	fsr1l,f,c
 15593  004506  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15594  004508  22E2               	addwfc	fsr1h,f,c
 15595  00450A  CFDE FFE6          	movff	postinc2,postinc1
 15596  00450E  CFDE FFE6          	movff	postinc2,postinc1
 15597  004512  CFDE FFE6          	movff	postinc2,postinc1
 15598  004516  CFDE FFE6          	movff	postinc2,postinc1
 15599                           
 15600                           ; BSR set to: 1
 15601                           ;ff.c: 3673: bcs = (DWORD)fs->csize * ((UINT)512);
 15602  00451A  EE20 F009          	lfsr	2,9
 15603  00451E  5131               	movf	f_open@fs& (0+255),w,b
 15604  004520  26D9               	addwf	fsr2l,f,c
 15605  004522  5132               	movf	(f_open@fs+1)& (0+255),w,b
 15606  004524  22DA               	addwfc	fsr2h,f,c
 15607  004526  CFDE F10F          	movff	postinc2,??_f_open
 15608  00452A  CFDD F110          	movff	postdec2,??_f_open+1
 15609  00452E  510F               	movf	??_f_open& (0+255),w,b
 15610  004530  6F11               	movwf	(??_f_open+2)& (0+255),b
 15611  004532  5110               	movf	(??_f_open+1)& (0+255),w,b
 15612  004534  6F12               	movwf	(??_f_open+3)& (0+255),b
 15613  004536  6B13               	clrf	(??_f_open+4)& (0+255),b
 15614  004538  6B14               	clrf	(??_f_open+5)& (0+255),b
 15615  00453A  0E09               	movlw	9
 15616  00453C                     u29205:
 15617  00453C  90D8               	bcf	status,0,c
 15618  00453E  3711               	rlcf	(??_f_open+2)& (0+255),f,b
 15619  004540  3712               	rlcf	(??_f_open+3)& (0+255),f,b
 15620  004542  3713               	rlcf	(??_f_open+4)& (0+255),f,b
 15621  004544  3714               	rlcf	(??_f_open+5)& (0+255),f,b
 15622  004546  2EE8               	decfsz	wreg,f,c
 15623  004548  D7F9               	goto	u29205
 15624  00454A  C111  F121         	movff	??_f_open+2,f_open@bcs
 15625  00454E  C112  F122         	movff	??_f_open+3,f_open@bcs+1
 15626  004552  C113  F123         	movff	??_f_open+4,f_open@bcs+2
 15627  004556  C114  F124         	movff	??_f_open+5,f_open@bcs+3
 15628                           
 15629                           ; BSR set to: 1
 15630                           ;ff.c: 3674: clst = fp->obj.sclust;
 15631  00455A  EE20 F006          	lfsr	2,6
 15632  00455E  510A               	movf	f_open@fp& (0+255),w,b
 15633  004560  26D9               	addwf	fsr2l,f,c
 15634  004562  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15635  004564  22DA               	addwfc	fsr2h,f,c
 15636  004566  CFDE F12D          	movff	postinc2,f_open@clst
 15637  00456A  CFDE F12E          	movff	postinc2,f_open@clst+1
 15638  00456E  CFDE F12F          	movff	postinc2,f_open@clst+2
 15639  004572  CFDE F130          	movff	postinc2,f_open@clst+3
 15640                           
 15641                           ; BSR set to: 1
 15642                           ;ff.c: 3675: for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 15643  004576  EE20 F00A          	lfsr	2,10
 15644  00457A  510A               	movf	f_open@fp& (0+255),w,b
 15645  00457C  26D9               	addwf	fsr2l,f,c
 15646  00457E  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15647  004580  22DA               	addwfc	fsr2h,f,c
 15648  004582  CFDE F129          	movff	postinc2,f_open@ofs
 15649  004586  CFDE F12A          	movff	postinc2,f_open@ofs+1
 15650  00458A  CFDE F12B          	movff	postinc2,f_open@ofs+2
 15651  00458E  CFDE F12C          	movff	postinc2,f_open@ofs+3
 15652  004592  D034               	goto	l25591
 15653  004594                     l25579:
 15654                           
 15655                           ; BSR set to: 1
 15656                           ;ff.c: 3676: clst = get_fat(&fp->obj, clst);
 15657  004594  C10A  F097         	movff	f_open@fp,get_fat@obj
 15658  004598  C10B  F098         	movff	f_open@fp+1,get_fat@obj+1
 15659  00459C  C12D  F099         	movff	f_open@clst,get_fat@clst
 15660  0045A0  C12E  F09A         	movff	f_open@clst+1,get_fat@clst+1
 15661  0045A4  C12F  F09B         	movff	f_open@clst+2,get_fat@clst+2
 15662  0045A8  C130  F09C         	movff	f_open@clst+3,get_fat@clst+3
 15663  0045AC  EC6C  F033         	call	_get_fat	;wreg free
 15664  0045B0  C097  F12D         	movff	?_get_fat,f_open@clst
 15665  0045B4  C098  F12E         	movff	?_get_fat+1,f_open@clst+1
 15666  0045B8  C099  F12F         	movff	?_get_fat+2,f_open@clst+2
 15667  0045BC  C09A  F130         	movff	?_get_fat+3,f_open@clst+3
 15668                           
 15669                           ; BSR set to: 0
 15670                           ;ff.c: 3677: if (clst <= 1) res = FR_INT_ERR;
 15671  0045C0  0101               	movlb	1	; () banked
 15672  0045C2  5130               	movf	(f_open@clst+3)& (0+255),w,b
 15673  0045C4  112F               	iorwf	(f_open@clst+2)& (0+255),w,b
 15674  0045C6  112E               	iorwf	(f_open@clst+1)& (0+255),w,b
 15675  0045C8  E106               	bnz	l25585
 15676  0045CA  0E02               	movlw	2
 15677  0045CC  5D2D               	subwf	f_open@clst& (0+255),w,b
 15678  0045CE  B0D8               	btfsc	status,0,c
 15679  0045D0  D002               	goto	l25585
 15680                           
 15681                           ; BSR set to: 1
 15682  0045D2  0E02               	movlw	2
 15683  0045D4  6F33               	movwf	f_open@res& (0+255),b
 15684  0045D6                     l25585:
 15685                           
 15686                           ; BSR set to: 1
 15687                           ;ff.c: 3678: if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 15688  0045D6  292D               	incf	f_open@clst& (0+255),w,b
 15689  0045D8  E109               	bnz	l25589
 15690  0045DA  292E               	incf	(f_open@clst+1)& (0+255),w,b
 15691  0045DC  E107               	bnz	l25589
 15692  0045DE  292F               	incf	(f_open@clst+2)& (0+255),w,b
 15693  0045E0  E105               	bnz	l25589
 15694  0045E2  2930               	incf	(f_open@clst+3)& (0+255),w,b
 15695  0045E4  A4D8               	btfss	status,2,c
 15696  0045E6  D002               	goto	l25589
 15697                           
 15698                           ; BSR set to: 1
 15699  0045E8  0E01               	movlw	1
 15700  0045EA  6F33               	movwf	f_open@res& (0+255),b
 15701  0045EC                     l25589:
 15702                           
 15703                           ; BSR set to: 1
 15704  0045EC  5121               	movf	f_open@bcs& (0+255),w,b
 15705  0045EE  5F29               	subwf	f_open@ofs& (0+255),f,b
 15706  0045F0  5122               	movf	(f_open@bcs+1)& (0+255),w,b
 15707  0045F2  5B2A               	subwfb	(f_open@ofs+1)& (0+255),f,b
 15708  0045F4  5123               	movf	(f_open@bcs+2)& (0+255),w,b
 15709  0045F6  5B2B               	subwfb	(f_open@ofs+2)& (0+255),f,b
 15710  0045F8  5124               	movf	(f_open@bcs+3)& (0+255),w,b
 15711  0045FA  5B2C               	subwfb	(f_open@ofs+3)& (0+255),f,b
 15712  0045FC                     l25591:
 15713                           
 15714                           ; BSR set to: 1
 15715  0045FC  5133               	movf	f_open@res& (0+255),w,b
 15716  0045FE  A4D8               	btfss	status,2,c
 15717  004600  D00A               	goto	u29240
 15718                           
 15719                           ; BSR set to: 1
 15720  004602  5129               	movf	f_open@ofs& (0+255),w,b
 15721  004604  5D21               	subwf	f_open@bcs& (0+255),w,b
 15722  004606  512A               	movf	(f_open@ofs+1)& (0+255),w,b
 15723  004608  5922               	subwfb	(f_open@bcs+1)& (0+255),w,b
 15724  00460A  512B               	movf	(f_open@ofs+2)& (0+255),w,b
 15725  00460C  5923               	subwfb	(f_open@bcs+2)& (0+255),w,b
 15726  00460E  512C               	movf	(f_open@ofs+3)& (0+255),w,b
 15727  004610  5924               	subwfb	(f_open@bcs+3)& (0+255),w,b
 15728  004612  A0D8               	btfss	status,0,c
 15729  004614  D7BF               	goto	l25579
 15730  004616                     u29240:
 15731                           
 15732                           ; BSR set to: 1
 15733                           ;ff.c: 3679: };ff.c: 3680: fp->clust = clst;
 15734  004616  EE20 F014          	lfsr	2,20
 15735  00461A  510A               	movf	f_open@fp& (0+255),w,b
 15736  00461C  26D9               	addwf	fsr2l,f,c
 15737  00461E  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15738  004620  22DA               	addwfc	fsr2h,f,c
 15739  004622  C12D  FFDE         	movff	f_open@clst,postinc2
 15740  004626  C12E  FFDE         	movff	f_open@clst+1,postinc2
 15741  00462A  C12F  FFDE         	movff	f_open@clst+2,postinc2
 15742  00462E  C130  FFDE         	movff	f_open@clst+3,postinc2
 15743                           
 15744                           ; BSR set to: 1
 15745                           ;ff.c: 3681: if (res == FR_OK && ofs % ((UINT)512)) {
 15746  004632  5133               	movf	f_open@res& (0+255),w,b
 15747  004634  A4D8               	btfss	status,2,c
 15748  004636  D05D               	goto	l25607
 15749                           
 15750                           ; BSR set to: 1
 15751  004638  0EFF               	movlw	255
 15752  00463A  1529               	andwf	f_open@ofs& (0+255),w,b
 15753  00463C  6F0F               	movwf	??_f_open& (0+255),b
 15754  00463E  0E01               	movlw	1
 15755  004640  152A               	andwf	(f_open@ofs+1)& (0+255),w,b
 15756  004642  6F10               	movwf	(??_f_open+1)& (0+255),b
 15757  004644  0E00               	movlw	0
 15758  004646  152B               	andwf	(f_open@ofs+2)& (0+255),w,b
 15759  004648  6F11               	movwf	(??_f_open+2)& (0+255),b
 15760  00464A  0E00               	movlw	0
 15761  00464C  152C               	andwf	(f_open@ofs+3)& (0+255),w,b
 15762  00464E  6F12               	movwf	(??_f_open+3)& (0+255),b
 15763  004650  510F               	movf	??_f_open& (0+255),w,b
 15764  004652  1110               	iorwf	(??_f_open+1)& (0+255),w,b
 15765  004654  1111               	iorwf	(??_f_open+2)& (0+255),w,b
 15766  004656  1112               	iorwf	(??_f_open+3)& (0+255),w,b
 15767  004658  B4D8               	btfsc	status,2,c
 15768  00465A  D04B               	goto	l25607
 15769                           
 15770                           ; BSR set to: 1
 15771                           ;ff.c: 3682: if ((sc = clst2sect(fs, clst)) == 0) {
 15772  00465C  C131  F01A         	movff	f_open@fs,clst2sect@fs
 15773  004660  C132  F01B         	movff	f_open@fs+1,clst2sect@fs+1
 15774  004664  C12D  F01C         	movff	f_open@clst,clst2sect@clst
 15775  004668  C12E  F01D         	movff	f_open@clst+1,clst2sect@clst+1
 15776  00466C  C12F  F01E         	movff	f_open@clst+2,clst2sect@clst+2
 15777  004670  C130  F01F         	movff	f_open@clst+3,clst2sect@clst+3
 15778  004674  EC94  F064         	call	_clst2sect	;wreg free
 15779  004678  C01A  F11B         	movff	?_clst2sect,f_open@sc
 15780  00467C  C01B  F11C         	movff	?_clst2sect+1,f_open@sc+1
 15781  004680  C01C  F11D         	movff	?_clst2sect+2,f_open@sc+2
 15782  004684  C01D  F11E         	movff	?_clst2sect+3,f_open@sc+3
 15783  004688  0101               	movlb	1	; () banked
 15784  00468A  511B               	movf	f_open@sc& (0+255),w,b
 15785  00468C  111C               	iorwf	(f_open@sc+1)& (0+255),w,b
 15786  00468E  111D               	iorwf	(f_open@sc+2)& (0+255),w,b
 15787  004690  111E               	iorwf	(f_open@sc+3)& (0+255),w,b
 15788  004692  A4D8               	btfss	status,2,c
 15789  004694  D003               	goto	l25605
 15790                           
 15791                           ; BSR set to: 1
 15792                           ;ff.c: 3683: res = FR_INT_ERR;
 15793  004696  0E02               	movlw	2
 15794  004698  6F33               	movwf	f_open@res& (0+255),b
 15795                           
 15796                           ;ff.c: 3684: } else {
 15797  00469A  D02B               	goto	l25607
 15798  00469C                     l25605:
 15799                           
 15800                           ; BSR set to: 1
 15801                           ;ff.c: 3685: fp->sect = sc + (DWORD)(ofs / ((UINT)512));
 15802  00469C  C129  F10F         	movff	f_open@ofs,??_f_open
 15803  0046A0  C12A  F110         	movff	f_open@ofs+1,??_f_open+1
 15804  0046A4  C12B  F111         	movff	f_open@ofs+2,??_f_open+2
 15805  0046A8  C12C  F112         	movff	f_open@ofs+3,??_f_open+3
 15806  0046AC  0E0A               	movlw	10
 15807  0046AE  D005               	goto	u29280
 15808  0046B0                     u29285:
 15809  0046B0  90D8               	bcf	status,0,c
 15810  0046B2  3312               	rrcf	(??_f_open+3)& (0+255),f,b
 15811  0046B4  3311               	rrcf	(??_f_open+2)& (0+255),f,b
 15812  0046B6  3310               	rrcf	(??_f_open+1)& (0+255),f,b
 15813  0046B8  330F               	rrcf	??_f_open& (0+255),f,b
 15814  0046BA                     u29280:
 15815  0046BA  2EE8               	decfsz	wreg,f,c
 15816  0046BC  D7F9               	goto	u29285
 15817  0046BE  511B               	movf	f_open@sc& (0+255),w,b
 15818  0046C0  250F               	addwf	??_f_open& (0+255),w,b
 15819  0046C2  6F13               	movwf	(??_f_open+4)& (0+255),b
 15820  0046C4  511C               	movf	(f_open@sc+1)& (0+255),w,b
 15821  0046C6  2110               	addwfc	(??_f_open+1)& (0+255),w,b
 15822  0046C8  6F14               	movwf	(??_f_open+5)& (0+255),b
 15823  0046CA  511D               	movf	(f_open@sc+2)& (0+255),w,b
 15824  0046CC  2111               	addwfc	(??_f_open+2)& (0+255),w,b
 15825  0046CE  6F15               	movwf	(??_f_open+6)& (0+255),b
 15826  0046D0  511E               	movf	(f_open@sc+3)& (0+255),w,b
 15827  0046D2  2112               	addwfc	(??_f_open+3)& (0+255),w,b
 15828  0046D4  6F16               	movwf	(??_f_open+7)& (0+255),b
 15829  0046D6  EE20 F018          	lfsr	2,24
 15830  0046DA  510A               	movf	f_open@fp& (0+255),w,b
 15831  0046DC  26D9               	addwf	fsr2l,f,c
 15832  0046DE  510B               	movf	(f_open@fp+1)& (0+255),w,b
 15833  0046E0  22DA               	addwfc	fsr2h,f,c
 15834  0046E2  C113  FFDE         	movff	??_f_open+4,postinc2
 15835  0046E6  C114  FFDE         	movff	??_f_open+5,postinc2
 15836  0046EA  C115  FFDE         	movff	??_f_open+6,postinc2
 15837  0046EE  C116  FFDE         	movff	??_f_open+7,postinc2
 15838  0046F2                     l25607:
 15839                           
 15840                           ; BSR set to: 1
 15841                           ;ff.c: 3696: };ff.c: 3698: if (res != FR_OK) fp->obj.fs = 0;
 15842  0046F2  5133               	movf	f_open@res& (0+255),w,b
 15843  0046F4  B4D8               	btfsc	status,2,c
 15844  0046F6  D008               	goto	l25611
 15845                           
 15846                           ; BSR set to: 1
 15847  0046F8  C10A  FFD9         	movff	f_open@fp,fsr2l
 15848  0046FC  C10B  FFDA         	movff	f_open@fp+1,fsr2h
 15849  004700  0E00               	movlw	0
 15850  004702  6EDE               	movwf	postinc2,c
 15851  004704  0E00               	movlw	0
 15852  004706  6EDD               	movwf	postdec2,c
 15853  004708                     l25611:
 15854                           
 15855                           ; BSR set to: 1
 15856                           ;ff.c: 3700: return res;
 15857  004708  5133               	movf	f_open@res& (0+255),w,b
 15858                           
 15859                           ; BSR set to: 1
 15860  00470A  0012               	return		;funcret
 15861  00470C                     __end_of_f_open:
 15862                           	callstack 0
 15863                           
 15864 ;; *************** function _remove_chain *****************
 15865 ;; Defined at:
 15866 ;;		line 1408 in file "mcc_generated_files/fatfs/ff.c"
 15867 ;; Parameters:    Size  Location     Type
 15868 ;;  obj             2   88[BANK0 ] PTR struct .
 15869 ;;		 -> f_open@dj(40), 
 15870 ;;  clst            4   90[BANK0 ] unsigned long 
 15871 ;;  pclst           4   94[BANK0 ] unsigned long 
 15872 ;; Auto vars:     Size  Location     Type
 15873 ;;  nxt             4  106[BANK0 ] unsigned long 
 15874 ;;  fs              2  111[BANK0 ] PTR struct .
 15875 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 15876 ;;  res             1  110[BANK0 ] enum E64
 15877 ;; Return value:  Size  Location     Type
 15878 ;;                  1    wreg      enum E64
 15879 ;; Registers used:
 15880 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 15881 ;; Tracked objects:
 15882 ;;		On entry : 3F/0
 15883 ;;		On exit  : 3F/0
 15884 ;;		Unchanged: 0/0
 15885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15886 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15887 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15888 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15889 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15890 ;;Total ram usage:       25 bytes
 15891 ;; Hardware stack levels used:    1
 15892 ;; Hardware stack levels required when called:   14
 15893 ;; This function calls:
 15894 ;;		_get_fat
 15895 ;;		_put_fat
 15896 ;; This function is called by:
 15897 ;;		_f_open
 15898 ;; This function uses a non-reentrant model
 15899 ;;
 15900                           
 15901                           	psect	text51
 15902  00A798                     __ptext51:
 15903                           	callstack 0
 15904  00A798                     _remove_chain:
 15905                           	callstack 14
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;ff.c: 1415: DWORD nxt;;ff.c: 1416: FATFS *fs = obj->fs;
 15909                           
 15910                           ; BSR set to: 0
 15911                           
 15912                           ; BSR set to: 1
 15913                           ;incstack = 0
 15914  00A798  C0B8  FFD9         	movff	remove_chain@obj,fsr2l
 15915  00A79C  C0B9  FFDA         	movff	remove_chain@obj+1,fsr2h
 15916  00A7A0  CFDE F0CF          	movff	postinc2,remove_chain@fs
 15917  00A7A4  CFDD F0D0          	movff	postdec2,remove_chain@fs+1
 15918                           
 15919                           ; BSR set to: 0
 15920                           ;ff.c: 1424: if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
 15921  00A7A8  51BD               	movf	(remove_chain@clst+3)& (0+255),w,b
 15922  00A7AA  11BC               	iorwf	(remove_chain@clst+2)& (0+255),w,b
 15923  00A7AC  11BB               	iorwf	(remove_chain@clst+1)& (0+255),w,b
 15924  00A7AE  E104               	bnz	u25120
 15925  00A7B0  0E02               	movlw	2
 15926  00A7B2  5DBA               	subwf	remove_chain@clst& (0+255),w,b
 15927  00A7B4  A0D8               	btfss	status,0,c
 15928  00A7B6  D010               	goto	u25130
 15929  00A7B8                     u25120:
 15930                           
 15931                           ; BSR set to: 0
 15932  00A7B8  EE20 F013          	lfsr	2,19
 15933  00A7BC  51CF               	movf	remove_chain@fs& (0+255),w,b
 15934  00A7BE  26D9               	addwf	fsr2l,f,c
 15935  00A7C0  51D0               	movf	(remove_chain@fs+1)& (0+255),w,b
 15936  00A7C2  22DA               	addwfc	fsr2h,f,c
 15937  00A7C4  50DE               	movf	postinc2,w,c
 15938  00A7C6  5DBA               	subwf	remove_chain@clst& (0+255),w,b
 15939  00A7C8  50DE               	movf	postinc2,w,c
 15940  00A7CA  59BB               	subwfb	(remove_chain@clst+1)& (0+255),w,b
 15941  00A7CC  50DE               	movf	postinc2,w,c
 15942  00A7CE  59BC               	subwfb	(remove_chain@clst+2)& (0+255),w,b
 15943  00A7D0  50DE               	movf	postinc2,w,c
 15944  00A7D2  59BD               	subwfb	(remove_chain@clst+3)& (0+255),w,b
 15945  00A7D4  A0D8               	btfss	status,0,c
 15946  00A7D6  D002               	goto	l22473
 15947  00A7D8                     u25130:
 15948                           
 15949                           ; BSR set to: 0
 15950  00A7D8  0E02               	movlw	2
 15951  00A7DA  0012               	return	
 15952  00A7DC                     l22473:
 15953                           
 15954                           ; BSR set to: 0
 15955                           ;ff.c: 1427: if (pclst != 0 && (!0 || fs->fs_type != 4 || obj->stat != 2)) {
 15956  00A7DC  51BE               	movf	remove_chain@pclst& (0+255),w,b
 15957  00A7DE  11BF               	iorwf	(remove_chain@pclst+1)& (0+255),w,b
 15958  00A7E0  11C0               	iorwf	(remove_chain@pclst+2)& (0+255),w,b
 15959  00A7E2  11C1               	iorwf	(remove_chain@pclst+3)& (0+255),w,b
 15960  00A7E4  B4D8               	btfsc	status,2,c
 15961  00A7E6  D01C               	goto	l22489
 15962                           
 15963                           ; BSR set to: 0
 15964                           ;ff.c: 1428: res = put_fat(fs, pclst, 0xFFFFFFFF);
 15965  00A7E8  C0CF  F097         	movff	remove_chain@fs,put_fat@fs
 15966  00A7EC  C0D0  F098         	movff	remove_chain@fs+1,put_fat@fs+1
 15967  00A7F0  C0BE  F099         	movff	remove_chain@pclst,put_fat@clst
 15968  00A7F4  C0BF  F09A         	movff	remove_chain@pclst+1,put_fat@clst+1
 15969  00A7F8  C0C0  F09B         	movff	remove_chain@pclst+2,put_fat@clst+2
 15970  00A7FC  C0C1  F09C         	movff	remove_chain@pclst+3,put_fat@clst+3
 15971  00A800  0EFF               	movlw	255
 15972  00A802  6F9D               	movwf	put_fat@val& (0+255),b
 15973  00A804  0EFF               	movlw	255
 15974  00A806  6F9E               	movwf	(put_fat@val+1)& (0+255),b
 15975  00A808  0EFF               	movlw	255
 15976  00A80A  6F9F               	movwf	(put_fat@val+2)& (0+255),b
 15977  00A80C  0EFF               	movlw	255
 15978  00A80E  6FA0               	movwf	(put_fat@val+3)& (0+255),b
 15979  00A810  EC58  F02D         	call	_put_fat	;wreg free
 15980  00A814  6FCE               	movwf	remove_chain@res& (0+255),b
 15981                           
 15982                           ; BSR set to: 0
 15983                           ;ff.c: 1429: if (res != FR_OK) return res;
 15984  00A816  51CE               	movf	remove_chain@res& (0+255),w,b
 15985  00A818  B4D8               	btfsc	status,2,c
 15986  00A81A  D002               	goto	l22489
 15987  00A81C                     u25150:
 15988                           
 15989                           ; BSR set to: 0
 15990  00A81C  51CE               	movf	remove_chain@res& (0+255),w,b
 15991  00A81E  0012               	return	
 15992  00A820                     l22489:
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;ff.c: 1434: nxt = get_fat(obj, clst);
 15996  00A820  C0B8  F097         	movff	remove_chain@obj,get_fat@obj
 15997  00A824  C0B9  F098         	movff	remove_chain@obj+1,get_fat@obj+1
 15998  00A828  C0BA  F099         	movff	remove_chain@clst,get_fat@clst
 15999  00A82C  C0BB  F09A         	movff	remove_chain@clst+1,get_fat@clst+1
 16000  00A830  C0BC  F09B         	movff	remove_chain@clst+2,get_fat@clst+2
 16001  00A834  C0BD  F09C         	movff	remove_chain@clst+3,get_fat@clst+3
 16002  00A838  EC6C  F033         	call	_get_fat	;wreg free
 16003  00A83C  C097  F0CA         	movff	?_get_fat,remove_chain@nxt
 16004  00A840  C098  F0CB         	movff	?_get_fat+1,remove_chain@nxt+1
 16005  00A844  C099  F0CC         	movff	?_get_fat+2,remove_chain@nxt+2
 16006  00A848  C09A  F0CD         	movff	?_get_fat+3,remove_chain@nxt+3
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;ff.c: 1435: if (nxt == 0) break;
 16010  00A84C  51CA               	movf	remove_chain@nxt& (0+255),w,b
 16011  00A84E  11CB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 16012  00A850  11CC               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
 16013  00A852  11CD               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
 16014  00A854  B4D8               	btfsc	status,2,c
 16015  00A856  D078               	goto	u25210
 16016                           
 16017                           ; BSR set to: 0
 16018                           ;ff.c: 1436: if (nxt == 1) return FR_INT_ERR;
 16019  00A858  05CA               	decf	remove_chain@nxt& (0+255),w,b
 16020  00A85A  11CB               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
 16021  00A85C  11CC               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
 16022  00A85E  11CD               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
 16023  00A860  B4D8               	btfsc	status,2,c
 16024  00A862  D7BA               	goto	u25130
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;ff.c: 1437: if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 16028  00A864  29CA               	incf	remove_chain@nxt& (0+255),w,b
 16029  00A866  E109               	bnz	l22509
 16030  00A868  29CB               	incf	(remove_chain@nxt+1)& (0+255),w,b
 16031  00A86A  E107               	bnz	l22509
 16032  00A86C  29CC               	incf	(remove_chain@nxt+2)& (0+255),w,b
 16033  00A86E  E105               	bnz	l22509
 16034  00A870  29CD               	incf	(remove_chain@nxt+3)& (0+255),w,b
 16035  00A872  A4D8               	btfss	status,2,c
 16036  00A874  D002               	goto	l22509
 16037                           
 16038                           ; BSR set to: 0
 16039  00A876  0E01               	movlw	1
 16040  00A878  0012               	return	
 16041  00A87A                     l22509:
 16042                           
 16043                           ; BSR set to: 0
 16044                           ;ff.c: 1439: res = put_fat(fs, clst, 0);
 16045  00A87A  C0CF  F097         	movff	remove_chain@fs,put_fat@fs
 16046  00A87E  C0D0  F098         	movff	remove_chain@fs+1,put_fat@fs+1
 16047  00A882  C0BA  F099         	movff	remove_chain@clst,put_fat@clst
 16048  00A886  C0BB  F09A         	movff	remove_chain@clst+1,put_fat@clst+1
 16049  00A88A  C0BC  F09B         	movff	remove_chain@clst+2,put_fat@clst+2
 16050  00A88E  C0BD  F09C         	movff	remove_chain@clst+3,put_fat@clst+3
 16051  00A892  0E00               	movlw	0
 16052  00A894  6F9D               	movwf	put_fat@val& (0+255),b
 16053  00A896  0E00               	movlw	0
 16054  00A898  6F9E               	movwf	(put_fat@val+1)& (0+255),b
 16055  00A89A  0E00               	movlw	0
 16056  00A89C  6F9F               	movwf	(put_fat@val+2)& (0+255),b
 16057  00A89E  0E00               	movlw	0
 16058  00A8A0  6FA0               	movwf	(put_fat@val+3)& (0+255),b
 16059  00A8A2  EC58  F02D         	call	_put_fat	;wreg free
 16060  00A8A6  6FCE               	movwf	remove_chain@res& (0+255),b
 16061                           
 16062                           ; BSR set to: 0
 16063                           ;ff.c: 1440: if (res != FR_OK) return res;
 16064  00A8A8  51CE               	movf	remove_chain@res& (0+255),w,b
 16065  00A8AA  A4D8               	btfss	status,2,c
 16066  00A8AC  D7B7               	goto	u25150
 16067                           
 16068                           ; BSR set to: 0
 16069                           ;ff.c: 1441: };ff.c: 1442: if (fs->free_clst < fs->n_fatent - 2) {
 16070  00A8AE  EE20 F013          	lfsr	2,19
 16071  00A8B2  51CF               	movf	remove_chain@fs& (0+255),w,b
 16072  00A8B4  26D9               	addwf	fsr2l,f,c
 16073  00A8B6  51D0               	movf	(remove_chain@fs+1)& (0+255),w,b
 16074  00A8B8  22DA               	addwfc	fsr2h,f,c
 16075  00A8BA  0EFE               	movlw	254
 16076  00A8BC  24DE               	addwf	postinc2,w,c
 16077  00A8BE  6FC2               	movwf	??_remove_chain& (0+255),b
 16078  00A8C0  0EFF               	movlw	255
 16079  00A8C2  20DE               	addwfc	postinc2,w,c
 16080  00A8C4  6FC3               	movwf	(??_remove_chain+1)& (0+255),b
 16081  00A8C6  0EFF               	movlw	255
 16082  00A8C8  20DE               	addwfc	postinc2,w,c
 16083  00A8CA  6FC4               	movwf	(??_remove_chain+2)& (0+255),b
 16084  00A8CC  0EFF               	movlw	255
 16085  00A8CE  20DE               	addwfc	postinc2,w,c
 16086  00A8D0  6FC5               	movwf	(??_remove_chain+3)& (0+255),b
 16087  00A8D2  EE20 F00F          	lfsr	2,15
 16088  00A8D6  51CF               	movf	remove_chain@fs& (0+255),w,b
 16089  00A8D8  26D9               	addwf	fsr2l,f,c
 16090  00A8DA  51D0               	movf	(remove_chain@fs+1)& (0+255),w,b
 16091  00A8DC  22DA               	addwfc	fsr2h,f,c
 16092  00A8DE  51C2               	movf	??_remove_chain& (0+255),w,b
 16093  00A8E0  5CDE               	subwf	postinc2,w,c
 16094  00A8E2  51C3               	movf	(??_remove_chain+1)& (0+255),w,b
 16095  00A8E4  58DE               	subwfb	postinc2,w,c
 16096  00A8E6  51C4               	movf	(??_remove_chain+2)& (0+255),w,b
 16097  00A8E8  58DE               	subwfb	postinc2,w,c
 16098  00A8EA  51C5               	movf	(??_remove_chain+3)& (0+255),w,b
 16099  00A8EC  58DE               	subwfb	postinc2,w,c
 16100  00A8EE  B0D8               	btfsc	status,0,c
 16101  00A8F0  D013               	goto	l22521
 16102                           
 16103                           ; BSR set to: 0
 16104                           ;ff.c: 1443: fs->free_clst++;
 16105  00A8F2  EE20 F00F          	lfsr	2,15
 16106  00A8F6  51CF               	movf	remove_chain@fs& (0+255),w,b
 16107  00A8F8  26D9               	addwf	fsr2l,f,c
 16108  00A8FA  51D0               	movf	(remove_chain@fs+1)& (0+255),w,b
 16109  00A8FC  22DA               	addwfc	fsr2h,f,c
 16110  00A8FE  2ADE               	incf	postinc2,f,c
 16111  00A900  0E00               	movlw	0
 16112  00A902  22DE               	addwfc	postinc2,f,c
 16113  00A904  22DE               	addwfc	postinc2,f,c
 16114  00A906  22DE               	addwfc	postinc2,f,c
 16115                           
 16116                           ;ff.c: 1444: fs->fsi_flag |= 1;
 16117  00A908  EE20 F004          	lfsr	2,4
 16118  00A90C  51CF               	movf	remove_chain@fs& (0+255),w,b
 16119  00A90E  26D9               	addwf	fsr2l,f,c
 16120  00A910  51D0               	movf	(remove_chain@fs+1)& (0+255),w,b
 16121  00A912  22DA               	addwfc	fsr2h,f,c
 16122  00A914  0E00               	movlw	0
 16123  00A916  80DB               	bsf	plusw2,0,c
 16124  00A918                     l22521:
 16125                           
 16126                           ; BSR set to: 0
 16127                           ;ff.c: 1445: };ff.c: 1464: clst = nxt;
 16128  00A918  C0CA  F0BA         	movff	remove_chain@nxt,remove_chain@clst
 16129  00A91C  C0CB  F0BB         	movff	remove_chain@nxt+1,remove_chain@clst+1
 16130  00A920  C0CC  F0BC         	movff	remove_chain@nxt+2,remove_chain@clst+2
 16131  00A924  C0CD  F0BD         	movff	remove_chain@nxt+3,remove_chain@clst+3
 16132                           
 16133                           ;ff.c: 1465: } while (clst < fs->n_fatent);
 16134  00A928  EE20 F013          	lfsr	2,19
 16135  00A92C  51CF               	movf	remove_chain@fs& (0+255),w,b
 16136  00A92E  26D9               	addwf	fsr2l,f,c
 16137  00A930  51D0               	movf	(remove_chain@fs+1)& (0+255),w,b
 16138  00A932  22DA               	addwfc	fsr2h,f,c
 16139  00A934  50DE               	movf	postinc2,w,c
 16140  00A936  5DBA               	subwf	remove_chain@clst& (0+255),w,b
 16141  00A938  50DE               	movf	postinc2,w,c
 16142  00A93A  59BB               	subwfb	(remove_chain@clst+1)& (0+255),w,b
 16143  00A93C  50DE               	movf	postinc2,w,c
 16144  00A93E  59BC               	subwfb	(remove_chain@clst+2)& (0+255),w,b
 16145  00A940  50DE               	movf	postinc2,w,c
 16146  00A942  59BD               	subwfb	(remove_chain@clst+3)& (0+255),w,b
 16147  00A944  A0D8               	btfss	status,0,c
 16148  00A946  D76C               	goto	l22489
 16149  00A948                     u25210:
 16150                           
 16151                           ; BSR set to: 0
 16152                           ;ff.c: 1493: return FR_OK;
 16153  00A948  0E00               	movlw	0
 16154                           
 16155                           ; BSR set to: 0
 16156  00A94A  0012               	return		;funcret
 16157  00A94C                     __end_of_remove_chain:
 16158                           	callstack 0
 16159                           
 16160 ;; *************** function _follow_path *****************
 16161 ;; Defined at:
 16162 ;;		line 3015 in file "mcc_generated_files/fatfs/ff.c"
 16163 ;; Parameters:    Size  Location     Type
 16164 ;;  dp              2  155[BANK0 ] PTR struct .
 16165 ;;		 -> f_open@dj(40), 
 16166 ;;  path            2  157[BANK0 ] PTR const unsigned char 
 16167 ;;		 -> STR_10(3), STR_8(12), STR_7(3), STR_3(3), 
 16168 ;;		 -> STR_2(10), STR_1(3), 
 16169 ;; Auto vars:     Size  Location     Type
 16170 ;;  fs              2    6[BANK1 ] PTR struct .
 16171 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 16172 ;;  res             1    9[BANK1 ] enum E64
 16173 ;;  ns              1    8[BANK1 ] unsigned char 
 16174 ;; Return value:  Size  Location     Type
 16175 ;;                  1    wreg      enum E64
 16176 ;; Registers used:
 16177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 16178 ;; Tracked objects:
 16179 ;;		On entry : 3F/0
 16180 ;;		On exit  : 3F/1
 16181 ;;		Unchanged: 0/0
 16182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16183 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16184 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16185 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16186 ;;      Totals:         0       4      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16187 ;;Total ram usage:       14 bytes
 16188 ;; Hardware stack levels used:    1
 16189 ;; Hardware stack levels required when called:   17
 16190 ;; This function calls:
 16191 ;;		_create_name
 16192 ;;		_dir_find
 16193 ;;		_dir_sdi
 16194 ;;		_ld_clust
 16195 ;; This function is called by:
 16196 ;;		_f_open
 16197 ;; This function uses a non-reentrant model
 16198 ;;
 16199                           
 16200                           	psect	text52
 16201  00AAC6                     __ptext52:
 16202                           	callstack 0
 16203  00AAC6                     _follow_path:
 16204                           	callstack 11
 16205                           
 16206                           ; BSR set to: 0
 16207                           ;ff.c: 3020: FRESULT res;;ff.c: 3021: BYTE ns;;ff.c: 3022: FATFS *fs = dp->obj.fs;
 16208                           
 16209                           ; BSR set to: 0
 16210                           ;incstack = 0
 16211  00AAC6  C0FB  FFD9         	movff	follow_path@dp,fsr2l
 16212  00AACA  C0FC  FFDA         	movff	follow_path@dp+1,fsr2h
 16213  00AACE  CFDE F106          	movff	postinc2,follow_path@fs
 16214  00AAD2  CFDD F107          	movff	postdec2,follow_path@fs+1
 16215                           
 16216                           ;ff.c: 3030: {;ff.c: 3031: while (*path == '/' || *path == '\\') path++;
 16217  00AAD6  D002               	goto	l22551
 16218  00AAD8                     l22549:
 16219                           
 16220                           ; BSR set to: 0
 16221  00AAD8  4BFD               	infsnz	follow_path@path& (0+255),f,b
 16222  00AADA  2BFE               	incf	(follow_path@path+1)& (0+255),f,b
 16223  00AADC                     l22551:
 16224                           
 16225                           ; BSR set to: 0
 16226  00AADC  C0FD  FFF6         	movff	follow_path@path,tblptrl
 16227  00AAE0  C0FE  FFF7         	movff	follow_path@path+1,tblptrh
 16228  00AAE4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16229  00AAE4  6AF8               	clrf	tblptru,c
 16230  00AAE6                     	endif
 16231  00AAE6                     	if	0	;tblptru may be non-zero
 16232  00AAE6                     	endif
 16233  00AAE6  0008               	tblrd		*
 16234  00AAE8  50F5               	movf	tablat,w,c
 16235  00AAEA  0A2F               	xorlw	47
 16236  00AAEC  B4D8               	btfsc	status,2,c
 16237  00AAEE  D7F4               	goto	l22549
 16238                           
 16239                           ; BSR set to: 0
 16240  00AAF0  C0FD  FFF6         	movff	follow_path@path,tblptrl
 16241  00AAF4  C0FE  FFF7         	movff	follow_path@path+1,tblptrh
 16242  00AAF8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16243  00AAF8  6AF8               	clrf	tblptru,c
 16244  00AAFA                     	endif
 16245  00AAFA                     	if	0	;tblptru may be non-zero
 16246  00AAFA                     	endif
 16247  00AAFA  0008               	tblrd		*
 16248  00AAFC  50F5               	movf	tablat,w,c
 16249  00AAFE  0A5C               	xorlw	92
 16250  00AB00  B4D8               	btfsc	status,2,c
 16251  00AB02  D7EA               	goto	l22549
 16252                           
 16253                           ; BSR set to: 0
 16254                           ;ff.c: 3032: dp->obj.sclust = 0;
 16255  00AB04  EE20 F006          	lfsr	2,6
 16256  00AB08  51FB               	movf	follow_path@dp& (0+255),w,b
 16257  00AB0A  26D9               	addwf	fsr2l,f,c
 16258  00AB0C  51FC               	movf	(follow_path@dp+1)& (0+255),w,b
 16259  00AB0E  22DA               	addwfc	fsr2h,f,c
 16260  00AB10  6ADE               	clrf	postinc2,c
 16261  00AB12  6ADE               	clrf	postinc2,c
 16262  00AB14  6ADE               	clrf	postinc2,c
 16263  00AB16  6ADD               	clrf	postdec2,c
 16264                           
 16265                           ; BSR set to: 0
 16266                           ;ff.c: 3033: };ff.c: 3051: if ((UINT)*path < ' ') {
 16267  00AB18  C0FD  FFF6         	movff	follow_path@path,tblptrl
 16268  00AB1C  C0FE  FFF7         	movff	follow_path@path+1,tblptrh
 16269  00AB20                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16270  00AB20  6AF8               	clrf	tblptru,c
 16271  00AB22                     	endif
 16272  00AB22                     	if	0	;tblptru may be non-zero
 16273  00AB22                     	endif
 16274  00AB22  0E20               	movlw	32
 16275  00AB24  0008               	tblrd		*
 16276  00AB26  60F5               	cpfslt	tablat,c
 16277  00AB28  D017               	goto	l22563
 16278                           
 16279                           ; BSR set to: 0
 16280                           ;ff.c: 3052: dp->fn[11] = 0x80;
 16281  00AB2A  EE20 F027          	lfsr	2,39
 16282  00AB2E  51FB               	movf	follow_path@dp& (0+255),w,b
 16283  00AB30  26D9               	addwf	fsr2l,f,c
 16284  00AB32  51FC               	movf	(follow_path@dp+1)& (0+255),w,b
 16285  00AB34  22DA               	addwfc	fsr2h,f,c
 16286  00AB36  0E80               	movlw	128
 16287  00AB38  6EDF               	movwf	indf2,c
 16288                           
 16289                           ; BSR set to: 0
 16290                           ;ff.c: 3053: res = dir_sdi(dp, 0);
 16291  00AB3A  C0FB  F0B2         	movff	follow_path@dp,dir_sdi@dp
 16292  00AB3E  C0FC  F0B3         	movff	follow_path@dp+1,dir_sdi@dp+1
 16293  00AB42  0E00               	movlw	0
 16294  00AB44  6FB4               	movwf	dir_sdi@ofs& (0+255),b
 16295  00AB46  0E00               	movlw	0
 16296  00AB48  6FB5               	movwf	(dir_sdi@ofs+1)& (0+255),b
 16297  00AB4A  0E00               	movlw	0
 16298  00AB4C  6FB6               	movwf	(dir_sdi@ofs+2)& (0+255),b
 16299  00AB4E  0E00               	movlw	0
 16300  00AB50  6FB7               	movwf	(dir_sdi@ofs+3)& (0+255),b
 16301  00AB52  ECBA  F040         	call	_dir_sdi	;wreg free
 16302  00AB56  D028               	goto	L10
 16303  00AB58                     l22563:
 16304                           
 16305                           ; BSR set to: 0
 16306                           ;ff.c: 3057: res = create_name(dp, &path);
 16307  00AB58  C0FB  F016         	movff	follow_path@dp,create_name@dp
 16308  00AB5C  C0FC  F017         	movff	follow_path@dp+1,create_name@dp+1
 16309  00AB60  0EFD               	movlw	low follow_path@path
 16310  00AB62  6E18               	movwf	create_name@path^0,c
 16311  00AB64  ECE8  F04A         	call	_create_name	;wreg free
 16312  00AB68  0101               	movlb	1	; () banked
 16313  00AB6A  6F09               	movwf	follow_path@res& (0+255),b
 16314                           
 16315                           ; BSR set to: 1
 16316                           ;ff.c: 3058: if (res != FR_OK) break;
 16317  00AB6C  5109               	movf	follow_path@res& (0+255),w,b
 16318  00AB6E  A4D8               	btfss	status,2,c
 16319  00AB70  D062               	goto	l22599
 16320                           
 16321                           ; BSR set to: 1
 16322                           ;ff.c: 3059: res = dir_find(dp);
 16323  00AB72  C0FB  F0F3         	movff	follow_path@dp,dir_find@dp
 16324  00AB76  C0FC  F0F4         	movff	follow_path@dp+1,dir_find@dp+1
 16325  00AB7A  EC5E  F059         	call	_dir_find	;wreg free
 16326  00AB7E  0101               	movlb	1	; () banked
 16327  00AB80  6F09               	movwf	follow_path@res& (0+255),b
 16328                           
 16329                           ; BSR set to: 1
 16330                           ;ff.c: 3060: ns = dp->fn[11];
 16331  00AB82  0100               	movlb	0	; () banked
 16332  00AB84  EE20 F027          	lfsr	2,39
 16333  00AB88  51FB               	movf	follow_path@dp& (0+255),w,b
 16334  00AB8A  26D9               	addwf	fsr2l,f,c
 16335  00AB8C  51FC               	movf	(follow_path@dp+1)& (0+255),w,b
 16336  00AB8E  22DA               	addwfc	fsr2h,f,c
 16337  00AB90  50DF               	movf	indf2,w,c
 16338  00AB92  0101               	movlb	1	; () banked
 16339  00AB94  6F08               	movwf	follow_path@ns& (0+255),b
 16340                           
 16341                           ; BSR set to: 1
 16342                           ;ff.c: 3061: if (res != FR_OK) {
 16343  00AB96  5109               	movf	follow_path@res& (0+255),w,b
 16344  00AB98  B4D8               	btfsc	status,2,c
 16345  00AB9A  D009               	goto	l505
 16346                           
 16347                           ; BSR set to: 1
 16348                           ;ff.c: 3062: if (res == FR_NO_FILE) {
 16349  00AB9C  0E04               	movlw	4
 16350  00AB9E  1909               	xorwf	follow_path@res& (0+255),w,b
 16351  00ABA0  B4D8               	btfsc	status,2,c
 16352                           
 16353                           ; BSR set to: 1
 16354                           ;ff.c: 3068: if (!(ns & 0x04)) res = FR_NO_PATH;
 16355  00ABA2  B508               	btfsc	follow_path@ns& (0+255),2,b
 16356  00ABA4  D048               	goto	l22599
 16357  00ABA6                     u25300:
 16358  00ABA6  0E05               	movlw	5
 16359  00ABA8                     L10:
 16360  00ABA8  0101               	movlb	1	; () banked
 16361  00ABAA  6F09               	movwf	follow_path@res& (0+255),b
 16362  00ABAC  D044               	goto	l22599
 16363  00ABAE                     l505:
 16364                           
 16365                           ; BSR set to: 1
 16366                           ;ff.c: 3072: };ff.c: 3073: if (ns & 0x04) break;
 16367  00ABAE  B508               	btfsc	follow_path@ns& (0+255),2,b
 16368  00ABB0  D042               	goto	l22599
 16369                           
 16370                           ; BSR set to: 1
 16371                           ;ff.c: 3075: if (!(dp->obj.attr & 0x10)) {
 16372  00ABB2  0100               	movlb	0	; () banked
 16373  00ABB4  EE20 F004          	lfsr	2,4
 16374  00ABB8  51FB               	movf	follow_path@dp& (0+255),w,b
 16375  00ABBA  26D9               	addwf	fsr2l,f,c
 16376  00ABBC  51FC               	movf	(follow_path@dp+1)& (0+255),w,b
 16377  00ABBE  22DA               	addwfc	fsr2h,f,c
 16378  00ABC0  A8DF               	btfss	indf2,4,c
 16379  00ABC2  D7F1               	goto	u25300
 16380                           
 16381                           ; BSR set to: 0
 16382                           ;ff.c: 3077: };ff.c: 3086: {;ff.c: 3087: dp->obj.sclust = ld_clust(fs, fs->win + dp->dpt
      +                          r % ((UINT)512));
 16383  00ABC4  C106  F015         	movff	follow_path@fs,ld_clust@fs
 16384  00ABC8  C107  F016         	movff	follow_path@fs+1,ld_clust@fs+1
 16385  00ABCC  0EFF               	movlw	255
 16386  00ABCE  0101               	movlb	1	; () banked
 16387  00ABD0  6F00               	movwf	??_follow_path& (0+255),b
 16388  00ABD2  0E01               	movlw	1
 16389  00ABD4  6F01               	movwf	(??_follow_path+1)& (0+255),b
 16390  00ABD6  0100               	movlb	0	; () banked
 16391  00ABD8  EE20 F00E          	lfsr	2,14
 16392  00ABDC  51FB               	movf	follow_path@dp& (0+255),w,b
 16393  00ABDE  26D9               	addwf	fsr2l,f,c
 16394  00ABE0  51FC               	movf	(follow_path@dp+1)& (0+255),w,b
 16395  00ABE2  22DA               	addwfc	fsr2h,f,c
 16396  00ABE4  CFDE F102          	movff	postinc2,??_follow_path+2
 16397  00ABE8  CFDD F103          	movff	postdec2,??_follow_path+3
 16398  00ABEC  0101               	movlb	1	; () banked
 16399  00ABEE  5100               	movf	??_follow_path& (0+255),w,b
 16400  00ABF0  1702               	andwf	(??_follow_path+2)& (0+255),f,b
 16401  00ABF2  5101               	movf	(??_follow_path+1)& (0+255),w,b
 16402  00ABF4  1703               	andwf	(??_follow_path+3)& (0+255),f,b
 16403  00ABF6  C106  F104         	movff	follow_path@fs,??_follow_path+4
 16404  00ABFA  C107  F105         	movff	follow_path@fs+1,??_follow_path+5
 16405  00ABFE  5102               	movf	(??_follow_path+2)& (0+255),w,b
 16406  00AC00  2704               	addwf	(??_follow_path+4)& (0+255),f,b
 16407  00AC02  5103               	movf	(??_follow_path+3)& (0+255),w,b
 16408  00AC04  2305               	addwfc	(??_follow_path+5)& (0+255),f,b
 16409  00AC06  0E2F               	movlw	47
 16410  00AC08  2504               	addwf	(??_follow_path+4)& (0+255),w,b
 16411  00AC0A  6E17               	movwf	ld_clust@dir^0,c
 16412  00AC0C  0E00               	movlw	0
 16413  00AC0E  2105               	addwfc	(??_follow_path+5)& (0+255),w,b
 16414  00AC10  6E18               	movwf	(ld_clust@dir+1)^0,c
 16415  00AC12  EC52  F06E         	call	_ld_clust	;wreg free
 16416  00AC16  0100               	movlb	0	; () banked
 16417  00AC18  EE20 F006          	lfsr	2,6
 16418  00AC1C  51FB               	movf	follow_path@dp& (0+255),w,b
 16419  00AC1E  26D9               	addwf	fsr2l,f,c
 16420  00AC20  51FC               	movf	(follow_path@dp+1)& (0+255),w,b
 16421  00AC22  22DA               	addwfc	fsr2h,f,c
 16422  00AC24  C015  FFDE         	movff	?_ld_clust,postinc2
 16423  00AC28  C016  FFDE         	movff	?_ld_clust+1,postinc2
 16424  00AC2C  C017  FFDE         	movff	?_ld_clust+2,postinc2
 16425  00AC30  C018  FFDE         	movff	?_ld_clust+3,postinc2
 16426  00AC34  D791               	goto	l22563
 16427  00AC36                     l22599:
 16428                           
 16429                           ; BSR set to: 1
 16430                           ;ff.c: 3090: };ff.c: 3092: return res;
 16431  00AC36  5109               	movf	follow_path@res& (0+255),w,b
 16432                           
 16433                           ; BSR set to: 1
 16434  00AC38  0012               	return		;funcret
 16435  00AC3A                     __end_of_follow_path:
 16436                           	callstack 0
 16437                           
 16438 ;; *************** function _ld_clust *****************
 16439 ;; Defined at:
 16440 ;;		line 1825 in file "mcc_generated_files/fatfs/ff.c"
 16441 ;; Parameters:    Size  Location     Type
 16442 ;;  fs              2   20[COMRAM] PTR struct .
 16443 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 16444 ;;  dir             2   22[COMRAM] PTR const unsigned char 
 16445 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 16446 ;;		 -> NULL(0), 
 16447 ;; Auto vars:     Size  Location     Type
 16448 ;;  cl              4   28[COMRAM] unsigned long 
 16449 ;; Return value:  Size  Location     Type
 16450 ;;                  4   20[COMRAM] unsigned long 
 16451 ;; Registers used:
 16452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16453 ;; Tracked objects:
 16454 ;;		On entry : 3F/1
 16455 ;;		On exit  : 0/0
 16456 ;;		Unchanged: 0/0
 16457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16458 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16459 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16460 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16461 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16462 ;;Total ram usage:       12 bytes
 16463 ;; Hardware stack levels used:    1
 16464 ;; Hardware stack levels required when called:    7
 16465 ;; This function calls:
 16466 ;;		_ld_word
 16467 ;; This function is called by:
 16468 ;;		_follow_path
 16469 ;;		_f_open
 16470 ;; This function uses a non-reentrant model
 16471 ;;
 16472                           
 16473                           	psect	text53
 16474  00DCA4                     __ptext53:
 16475                           	callstack 0
 16476  00DCA4                     _ld_clust:
 16477                           	callstack 21
 16478                           
 16479                           ; BSR set to: 1
 16480                           ;ff.c: 1830: DWORD cl;;ff.c: 1832: cl = ld_word(dir + 26);
 16481                           
 16482                           ; BSR set to: 1
 16483                           ;incstack = 0
 16484  00DCA4  0E1A               	movlw	26
 16485  00DCA6  2417               	addwf	ld_clust@dir^0,w,c
 16486  00DCA8  6E0E               	movwf	ld_word@ptr^0,c
 16487  00DCAA  0E00               	movlw	0
 16488  00DCAC  2018               	addwfc	(ld_clust@dir+1)^0,w,c
 16489  00DCAE  6E0F               	movwf	(ld_word@ptr+1)^0,c
 16490  00DCB0  ECB2  F076         	call	_ld_word	;wreg free
 16491  00DCB4  C00E  F01D         	movff	?_ld_word,ld_clust@cl
 16492  00DCB8  C00F  F01E         	movff	?_ld_word+1,ld_clust@cl+1
 16493  00DCBC  6A1F               	clrf	(ld_clust@cl+2)^0,c
 16494  00DCBE  6A20               	clrf	(ld_clust@cl+3)^0,c
 16495                           
 16496                           ;ff.c: 1833: if (fs->fs_type == 3) {
 16497  00DCC0  C015  FFD9         	movff	ld_clust@fs,fsr2l
 16498  00DCC4  C016  FFDA         	movff	ld_clust@fs+1,fsr2h
 16499  00DCC8  0E03               	movlw	3
 16500  00DCCA  18DE               	xorwf	postinc2,w,c
 16501  00DCCC  A4D8               	btfss	status,2,c
 16502  00DCCE  D01C               	goto	l21917
 16503                           
 16504                           ;ff.c: 1834: cl |= (DWORD)ld_word(dir + 20) << 16;
 16505  00DCD0  0E14               	movlw	20
 16506  00DCD2  2417               	addwf	ld_clust@dir^0,w,c
 16507  00DCD4  6E0E               	movwf	ld_word@ptr^0,c
 16508  00DCD6  0E00               	movlw	0
 16509  00DCD8  2018               	addwfc	(ld_clust@dir+1)^0,w,c
 16510  00DCDA  6E0F               	movwf	(ld_word@ptr+1)^0,c
 16511  00DCDC  ECB2  F076         	call	_ld_word	;wreg free
 16512  00DCE0  500E               	movf	?_ld_word^0,w,c
 16513  00DCE2  6E19               	movwf	??_ld_clust^0,c
 16514  00DCE4  500F               	movf	(?_ld_word+1)^0,w,c
 16515  00DCE6  6E1A               	movwf	(??_ld_clust+1)^0,c
 16516  00DCE8  6A1B               	clrf	(??_ld_clust+2)^0,c
 16517  00DCEA  6A1C               	clrf	(??_ld_clust+3)^0,c
 16518  00DCEC  C01A  F01C         	movff	??_ld_clust+1,??_ld_clust+3
 16519  00DCF0  C019  F01B         	movff	??_ld_clust,??_ld_clust+2
 16520  00DCF4  6A1A               	clrf	(??_ld_clust+1)^0,c
 16521  00DCF6  6A19               	clrf	??_ld_clust^0,c
 16522  00DCF8  5019               	movf	??_ld_clust^0,w,c
 16523  00DCFA  121D               	iorwf	ld_clust@cl^0,f,c
 16524  00DCFC  501A               	movf	(??_ld_clust+1)^0,w,c
 16525  00DCFE  121E               	iorwf	(ld_clust@cl+1)^0,f,c
 16526  00DD00  501B               	movf	(??_ld_clust+2)^0,w,c
 16527  00DD02  121F               	iorwf	(ld_clust@cl+2)^0,f,c
 16528  00DD04  501C               	movf	(??_ld_clust+3)^0,w,c
 16529  00DD06  1220               	iorwf	(ld_clust@cl+3)^0,f,c
 16530  00DD08                     l21917:
 16531                           
 16532                           ;ff.c: 1835: };ff.c: 1837: return cl;
 16533  00DD08  C01D  F015         	movff	ld_clust@cl,?_ld_clust
 16534  00DD0C  C01E  F016         	movff	ld_clust@cl+1,?_ld_clust+1
 16535  00DD10  C01F  F017         	movff	ld_clust@cl+2,?_ld_clust+2
 16536  00DD14  C020  F018         	movff	ld_clust@cl+3,?_ld_clust+3
 16537  00DD18  0012               	return		;funcret
 16538  00DD1A                     __end_of_ld_clust:
 16539                           	callstack 0
 16540                           
 16541 ;; *************** function _dir_find *****************
 16542 ;; Defined at:
 16543 ;;		line 2403 in file "mcc_generated_files/fatfs/ff.c"
 16544 ;; Parameters:    Size  Location     Type
 16545 ;;  dp              2  147[BANK0 ] PTR struct .
 16546 ;;		 -> f_open@dj(40), 
 16547 ;; Auto vars:     Size  Location     Type
 16548 ;;  fs              2  151[BANK0 ] PTR struct .
 16549 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 16550 ;;  res             1  154[BANK0 ] enum E64
 16551 ;;  c               1  153[BANK0 ] unsigned char 
 16552 ;; Return value:  Size  Location     Type
 16553 ;;                  1    wreg      enum E64
 16554 ;; Registers used:
 16555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 16556 ;; Tracked objects:
 16557 ;;		On entry : 3F/1
 16558 ;;		On exit  : 3F/0
 16559 ;;		Unchanged: 0/0
 16560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16561 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16562 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16563 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16564 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16565 ;;Total ram usage:        8 bytes
 16566 ;; Hardware stack levels used:    1
 16567 ;; Hardware stack levels required when called:   16
 16568 ;; This function calls:
 16569 ;;		_dir_next
 16570 ;;		_dir_sdi
 16571 ;;		_mem_cmp
 16572 ;;		_move_window
 16573 ;; This function is called by:
 16574 ;;		_follow_path
 16575 ;; This function uses a non-reentrant model
 16576 ;;
 16577                           
 16578                           	psect	text54
 16579  00B2BC                     __ptext54:
 16580                           	callstack 0
 16581  00B2BC                     _dir_find:
 16582                           	callstack 11
 16583                           
 16584                           ; BSR set to: 1
 16585                           ;ff.c: 2407: FRESULT res;;ff.c: 2408: FATFS *fs = dp->obj.fs;
 16586                           
 16587                           ;incstack = 0
 16588  00B2BC  C0F3  FFD9         	movff	dir_find@dp,fsr2l
 16589  00B2C0  C0F4  FFDA         	movff	dir_find@dp+1,fsr2h
 16590  00B2C4  CFDE F0F7          	movff	postinc2,dir_find@fs
 16591  00B2C8  CFDD F0F8          	movff	postdec2,dir_find@fs+1
 16592                           
 16593                           ; BSR set to: 1
 16594                           ;ff.c: 2409: BYTE c;;ff.c: 2414: res = dir_sdi(dp, 0);
 16595  00B2CC  C0F3  F0B2         	movff	dir_find@dp,dir_sdi@dp
 16596  00B2D0  C0F4  F0B3         	movff	dir_find@dp+1,dir_sdi@dp+1
 16597  00B2D4  0E00               	movlw	0
 16598  00B2D6  0100               	movlb	0	; () banked
 16599  00B2D8  6FB4               	movwf	dir_sdi@ofs& (0+255),b
 16600  00B2DA  0E00               	movlw	0
 16601  00B2DC  6FB5               	movwf	(dir_sdi@ofs+1)& (0+255),b
 16602  00B2DE  0E00               	movlw	0
 16603  00B2E0  6FB6               	movwf	(dir_sdi@ofs+2)& (0+255),b
 16604  00B2E2  0E00               	movlw	0
 16605  00B2E4  6FB7               	movwf	(dir_sdi@ofs+3)& (0+255),b
 16606  00B2E6  ECBA  F040         	call	_dir_sdi	;wreg free
 16607  00B2EA  6FFA               	movwf	dir_find@res& (0+255),b
 16608                           
 16609                           ; BSR set to: 0
 16610                           ;ff.c: 2415: if (res != FR_OK) return res;
 16611  00B2EC  51FA               	movf	dir_find@res& (0+255),w,b
 16612  00B2EE  B4D8               	btfsc	status,2,c
 16613  00B2F0  D003               	goto	l21937
 16614  00B2F2                     u24350:
 16615  00B2F2  0100               	movlb	0	; () banked
 16616  00B2F4  51FA               	movf	dir_find@res& (0+255),w,b
 16617  00B2F6  0012               	return	
 16618  00B2F8                     l21937:
 16619                           
 16620                           ; BSR set to: 0
 16621                           ;ff.c: 2441: res = move_window(fs, dp->sect);
 16622  00B2F8  C0F7  F08C         	movff	dir_find@fs,move_window@fs
 16623  00B2FC  C0F8  F08D         	movff	dir_find@fs+1,move_window@fs+1
 16624  00B300  EE20 F016          	lfsr	2,22
 16625  00B304  51F3               	movf	dir_find@dp& (0+255),w,b
 16626  00B306  26D9               	addwf	fsr2l,f,c
 16627  00B308  51F4               	movf	(dir_find@dp+1)& (0+255),w,b
 16628  00B30A  22DA               	addwfc	fsr2h,f,c
 16629  00B30C  CFDE F08E          	movff	postinc2,move_window@sector
 16630  00B310  CFDE F08F          	movff	postinc2,move_window@sector+1
 16631  00B314  CFDE F090          	movff	postinc2,move_window@sector+2
 16632  00B318  CFDE F091          	movff	postinc2,move_window@sector+3
 16633  00B31C  EC1B  F067         	call	_move_window	;wreg free
 16634  00B320  6FFA               	movwf	dir_find@res& (0+255),b
 16635                           
 16636                           ; BSR set to: 0
 16637                           ;ff.c: 2442: if (res != FR_OK) break;
 16638  00B322  51FA               	movf	dir_find@res& (0+255),w,b
 16639  00B324  A4D8               	btfss	status,2,c
 16640  00B326  D7E5               	goto	u24350
 16641                           
 16642                           ; BSR set to: 0
 16643                           ;ff.c: 2443: c = dp->dir[0];
 16644  00B328  EE20 F01A          	lfsr	2,26
 16645  00B32C  51F3               	movf	dir_find@dp& (0+255),w,b
 16646  00B32E  26D9               	addwf	fsr2l,f,c
 16647  00B330  51F4               	movf	(dir_find@dp+1)& (0+255),w,b
 16648  00B332  22DA               	addwfc	fsr2h,f,c
 16649  00B334  CFDE F0F5          	movff	postinc2,??_dir_find
 16650  00B338  CFDD F0F6          	movff	postdec2,??_dir_find+1
 16651  00B33C  C0F5  FFD9         	movff	??_dir_find,fsr2l
 16652  00B340  C0F6  FFDA         	movff	??_dir_find+1,fsr2h
 16653  00B344  50DF               	movf	indf2,w,c
 16654  00B346  6FF9               	movwf	dir_find@c& (0+255),b
 16655                           
 16656                           ; BSR set to: 0
 16657                           ;ff.c: 2444: if (c == 0) { res = FR_NO_FILE; break; }
 16658  00B348  51F9               	movf	dir_find@c& (0+255),w,b
 16659  00B34A  A4D8               	btfss	status,2,c
 16660  00B34C  D003               	goto	l21949
 16661                           
 16662                           ; BSR set to: 0
 16663  00B34E  0E04               	movlw	4
 16664  00B350  6FFA               	movwf	dir_find@res& (0+255),b
 16665  00B352  D7CF               	goto	u24350
 16666  00B354                     l21949:
 16667                           
 16668                           ; BSR set to: 0
 16669                           ;ff.c: 2467: dp->obj.attr = dp->dir[11] & 0x3F;
 16670  00B354  EE20 F004          	lfsr	2,4
 16671  00B358  51F3               	movf	dir_find@dp& (0+255),w,b
 16672  00B35A  26D9               	addwf	fsr2l,f,c
 16673  00B35C  51F4               	movf	(dir_find@dp+1)& (0+255),w,b
 16674  00B35E  22DA               	addwfc	fsr2h,f,c
 16675  00B360  EE10 F01A          	lfsr	1,26
 16676  00B364  51F3               	movf	dir_find@dp& (0+255),w,b
 16677  00B366  26E1               	addwf	fsr1l,f,c
 16678  00B368  51F4               	movf	(dir_find@dp+1)& (0+255),w,b
 16679  00B36A  22E2               	addwfc	fsr1h,f,c
 16680  00B36C  EE00 F00B          	lfsr	0,11
 16681  00B370  50E6               	movf	postinc1,w,c
 16682  00B372  26E9               	addwf	fsr0l,f,c
 16683  00B374  50E5               	movf	postdec1,w,c
 16684  00B376  22EA               	addwfc	fsr0h,f,c
 16685  00B378  50EF               	movf	indf0,w,c
 16686  00B37A  0B3F               	andlw	63
 16687  00B37C  6EDF               	movwf	indf2,c
 16688                           
 16689                           ; BSR set to: 0
 16690                           ;ff.c: 2468: if (!(dp->dir[11] & 0x08) && !mem_cmp(dp->dir, dp->fn, 11)) break;
 16691  00B37E  EE20 F01A          	lfsr	2,26
 16692  00B382  51F3               	movf	dir_find@dp& (0+255),w,b
 16693  00B384  26D9               	addwf	fsr2l,f,c
 16694  00B386  51F4               	movf	(dir_find@dp+1)& (0+255),w,b
 16695  00B388  22DA               	addwfc	fsr2h,f,c
 16696  00B38A  EE10 F00B          	lfsr	1,11
 16697  00B38E  50DE               	movf	postinc2,w,c
 16698  00B390  26E1               	addwf	fsr1l,f,c
 16699  00B392  50DD               	movf	postdec2,w,c
 16700  00B394  22E2               	addwfc	fsr1h,f,c
 16701  00B396  B6E7               	btfsc	indf1,3,c
 16702  00B398  D01A               	goto	l21957
 16703                           
 16704                           ; BSR set to: 0
 16705  00B39A  EE20 F01A          	lfsr	2,26
 16706  00B39E  51F3               	movf	dir_find@dp& (0+255),w,b
 16707  00B3A0  26D9               	addwf	fsr2l,f,c
 16708  00B3A2  51F4               	movf	(dir_find@dp+1)& (0+255),w,b
 16709  00B3A4  22DA               	addwfc	fsr2h,f,c
 16710  00B3A6  CFDE F00E          	movff	postinc2,mem_cmp@dst
 16711  00B3AA  CFDD F00F          	movff	postdec2,mem_cmp@dst+1
 16712  00B3AE  0E1C               	movlw	28
 16713  00B3B0  25F3               	addwf	dir_find@dp& (0+255),w,b
 16714  00B3B2  6E10               	movwf	mem_cmp@src^0,c
 16715  00B3B4  0E00               	movlw	0
 16716  00B3B6  21F4               	addwfc	(dir_find@dp+1)& (0+255),w,b
 16717  00B3B8  6E11               	movwf	(mem_cmp@src+1)^0,c
 16718  00B3BA  0E00               	movlw	0
 16719  00B3BC  6E13               	movwf	(mem_cmp@cnt+1)^0,c
 16720  00B3BE  0E0B               	movlw	11
 16721  00B3C0  6E12               	movwf	mem_cmp@cnt^0,c
 16722  00B3C2  EC8D  F06E         	call	_mem_cmp	;wreg free
 16723  00B3C6  500E               	movf	?_mem_cmp^0,w,c
 16724  00B3C8  100F               	iorwf	(?_mem_cmp+1)^0,w,c
 16725  00B3CA  B4D8               	btfsc	status,2,c
 16726  00B3CC  D792               	goto	u24350
 16727  00B3CE                     l21957:
 16728                           
 16729                           ;ff.c: 2470: res = dir_next(dp, 0);
 16730  00B3CE  C0F3  F0D5         	movff	dir_find@dp,dir_next@dp
 16731  00B3D2  C0F4  F0D6         	movff	dir_find@dp+1,dir_next@dp+1
 16732  00B3D6  0E00               	movlw	0
 16733  00B3D8  0100               	movlb	0	; () banked
 16734  00B3DA  6FD8               	movwf	(dir_next@stretch+1)& (0+255),b
 16735  00B3DC  0E00               	movlw	0
 16736  00B3DE  6FD7               	movwf	dir_next@stretch& (0+255),b
 16737  00B3E0  ECAC  F038         	call	_dir_next	;wreg free
 16738  00B3E4  6FFA               	movwf	dir_find@res& (0+255),b
 16739                           
 16740                           ; BSR set to: 0
 16741                           ;ff.c: 2471: } while (res == FR_OK);
 16742  00B3E6  51FA               	movf	dir_find@res& (0+255),w,b
 16743  00B3E8  A4D8               	btfss	status,2,c
 16744  00B3EA  D783               	goto	u24350
 16745  00B3EC  D785               	goto	l21937
 16746  00B3EE                     __end_of_dir_find:
 16747                           	callstack 0
 16748                           
 16749 ;; *************** function _create_name *****************
 16750 ;; Defined at:
 16751 ;;		line 2818 in file "mcc_generated_files/fatfs/ff.c"
 16752 ;; Parameters:    Size  Location     Type
 16753 ;;  dp              2   21[COMRAM] PTR struct .
 16754 ;;		 -> f_open@dj(40), 
 16755 ;;  path            1   23[COMRAM] PTR PTR const unsigned c
 16756 ;;		 -> follow_path@path(2), 
 16757 ;; Auto vars:     Size  Location     Type
 16758 ;;  i               2   39[COMRAM] unsigned int 
 16759 ;;  sfn             2   37[COMRAM] PTR unsigned char 
 16760 ;;		 -> dj.fn(12), f_open@dj(40), 
 16761 ;;  si              2   35[COMRAM] unsigned int 
 16762 ;;  p               2   33[COMRAM] PTR const unsigned char 
 16763 ;;		 -> STR_10(3), STR_8(12), STR_7(3), STR_3(3), 
 16764 ;;		 -> STR_2(10), STR_1(3), 
 16765 ;;  ni              2   31[COMRAM] unsigned int 
 16766 ;;  c               1   41[COMRAM] unsigned char 
 16767 ;;  d               1   30[COMRAM] unsigned char 
 16768 ;; Return value:  Size  Location     Type
 16769 ;;                  1    wreg      enum E64
 16770 ;; Registers used:
 16771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16772 ;; Tracked objects:
 16773 ;;		On entry : 3F/0
 16774 ;;		On exit  : 0/0
 16775 ;;		Unchanged: 0/0
 16776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16777 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16778 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16779 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16780 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16781 ;;Total ram usage:       21 bytes
 16782 ;; Hardware stack levels used:    1
 16783 ;; Hardware stack levels required when called:    7
 16784 ;; This function calls:
 16785 ;;		_chk_chr
 16786 ;;		_dbc_1st
 16787 ;;		_dbc_2nd
 16788 ;;		_mem_set
 16789 ;; This function is called by:
 16790 ;;		_follow_path
 16791 ;; This function uses a non-reentrant model
 16792 ;;
 16793                           
 16794                           	psect	text55
 16795  0095D0                     __ptext55:
 16796                           	callstack 0
 16797  0095D0                     _create_name:
 16798                           	callstack 20
 16799                           
 16800                           ; BSR set to: 0
 16801                           ;ff.c: 2945: BYTE c, d, *sfn;;ff.c: 2946: UINT ni, si, i;;ff.c: 2947: const char *p;;ff.
      +                          c: 2950: p = *path; sfn = dp->fn;
 16802                           
 16803                           ; BSR set to: 0
 16804                           ;incstack = 0
 16805  0095D0  5018               	movf	create_name@path^0,w,c
 16806  0095D2  6ED9               	movwf	fsr2l,c
 16807  0095D4  6ADA               	clrf	fsr2h,c
 16808  0095D6  CFDE F022          	movff	postinc2,create_name@p
 16809  0095DA  CFDD F023          	movff	postdec2,create_name@p+1
 16810                           
 16811                           ; BSR set to: 0
 16812  0095DE  0E1C               	movlw	28
 16813  0095E0  2416               	addwf	create_name@dp^0,w,c
 16814  0095E2  6E26               	movwf	create_name@sfn^0,c
 16815  0095E4  0E00               	movlw	0
 16816  0095E6  2017               	addwfc	(create_name@dp+1)^0,w,c
 16817  0095E8  6E27               	movwf	(create_name@sfn+1)^0,c
 16818                           
 16819                           ; BSR set to: 0
 16820                           ;ff.c: 2951: mem_set(sfn, ' ', 11);
 16821  0095EA  C026  F00E         	movff	create_name@sfn,mem_set@dst
 16822  0095EE  C027  F00F         	movff	create_name@sfn+1,mem_set@dst+1
 16823  0095F2  0E00               	movlw	0
 16824  0095F4  6E11               	movwf	(mem_set@val+1)^0,c
 16825  0095F6  0E20               	movlw	32
 16826  0095F8  6E10               	movwf	mem_set@val^0,c
 16827  0095FA  0E00               	movlw	0
 16828  0095FC  6E13               	movwf	(mem_set@cnt+1)^0,c
 16829  0095FE  0E0B               	movlw	11
 16830  009600  6E12               	movwf	mem_set@cnt^0,c
 16831  009602  EC9B  F078         	call	_mem_set	;wreg free
 16832                           
 16833                           ;ff.c: 2952: si = i = 0; ni = 8;
 16834  009606  0E00               	movlw	0
 16835  009608  6E29               	movwf	(create_name@i+1)^0,c
 16836  00960A  0E00               	movlw	0
 16837  00960C  6E28               	movwf	create_name@i^0,c
 16838  00960E  C028  F024         	movff	create_name@i,create_name@si
 16839  009612  C029  F025         	movff	create_name@i+1,create_name@si+1
 16840  009616  0E00               	movlw	0
 16841  009618  6E21               	movwf	(create_name@ni+1)^0,c
 16842  00961A  0E08               	movlw	8
 16843  00961C  6E20               	movwf	create_name@ni^0,c
 16844  00961E                     l21975:
 16845                           
 16846                           ;ff.c: 2967: c = (BYTE)p[si++];
 16847  00961E  5024               	movf	create_name@si^0,w,c
 16848  009620  2422               	addwf	create_name@p^0,w,c
 16849  009622  6E19               	movwf	??_create_name^0,c
 16850  009624  5025               	movf	(create_name@si+1)^0,w,c
 16851  009626  2023               	addwfc	(create_name@p+1)^0,w,c
 16852  009628  6E1A               	movwf	(??_create_name+1)^0,c
 16853  00962A  C019  FFF6         	movff	??_create_name,tblptrl
 16854  00962E  C01A  FFF7         	movff	??_create_name+1,tblptrh
 16855  009632                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16856  009632  6AF8               	clrf	tblptru,c
 16857  009634                     	endif
 16858  009634                     	if	0	;tblptru may be non-zero
 16859  009634                     	endif
 16860  009634  0008               	tblrd		*
 16861  009636  CFF5 F02A          	movff	tablat,create_name@c
 16862  00963A  4A24               	infsnz	create_name@si^0,f,c
 16863  00963C  2A25               	incf	(create_name@si+1)^0,f,c
 16864                           
 16865                           ;ff.c: 2968: if (c <= ' ') break;
 16866  00963E  0E21               	movlw	33
 16867  009640  602A               	cpfslt	create_name@c^0,c
 16868  009642  D001               	goto	l21983
 16869  009644  D0AC               	goto	l22043
 16870  009646                     l21983:
 16871                           
 16872                           ;ff.c: 2969: if (c == '/' || c == '\\') {
 16873  009646  0E2F               	movlw	47
 16874  009648  182A               	xorwf	create_name@c^0,w,c
 16875  00964A  B4D8               	btfsc	status,2,c
 16876  00964C  D007               	goto	l21989
 16877  00964E  0E5C               	movlw	92
 16878  009650  182A               	xorwf	create_name@c^0,w,c
 16879  009652  B4D8               	btfsc	status,2,c
 16880  009654  D003               	goto	l21989
 16881  009656  D023               	goto	l21993
 16882  009658                     l21987:
 16883  009658  4A24               	infsnz	create_name@si^0,f,c
 16884  00965A  2A25               	incf	(create_name@si+1)^0,f,c
 16885  00965C                     l21989:
 16886  00965C  5024               	movf	create_name@si^0,w,c
 16887  00965E  2422               	addwf	create_name@p^0,w,c
 16888  009660  6E19               	movwf	??_create_name^0,c
 16889  009662  5025               	movf	(create_name@si+1)^0,w,c
 16890  009664  2023               	addwfc	(create_name@p+1)^0,w,c
 16891  009666  6E1A               	movwf	(??_create_name+1)^0,c
 16892  009668  C019  FFF6         	movff	??_create_name,tblptrl
 16893  00966C  C01A  FFF7         	movff	??_create_name+1,tblptrh
 16894  009670                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16895  009670  6AF8               	clrf	tblptru,c
 16896  009672                     	endif
 16897  009672                     	if	0	;tblptru may be non-zero
 16898  009672                     	endif
 16899  009672  0008               	tblrd		*
 16900  009674  50F5               	movf	tablat,w,c
 16901  009676  0A2F               	xorlw	47
 16902  009678  B4D8               	btfsc	status,2,c
 16903  00967A  D7EE               	goto	l21987
 16904  00967C  5024               	movf	create_name@si^0,w,c
 16905  00967E  2422               	addwf	create_name@p^0,w,c
 16906  009680  6E19               	movwf	??_create_name^0,c
 16907  009682  5025               	movf	(create_name@si+1)^0,w,c
 16908  009684  2023               	addwfc	(create_name@p+1)^0,w,c
 16909  009686  6E1A               	movwf	(??_create_name+1)^0,c
 16910  009688  C019  FFF6         	movff	??_create_name,tblptrl
 16911  00968C  C01A  FFF7         	movff	??_create_name+1,tblptrh
 16912  009690                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16913  009690  6AF8               	clrf	tblptru,c
 16914  009692                     	endif
 16915  009692                     	if	0	;tblptru may be non-zero
 16916  009692                     	endif
 16917  009692  0008               	tblrd		*
 16918  009694  50F5               	movf	tablat,w,c
 16919  009696  0A5C               	xorlw	92
 16920  009698  A4D8               	btfss	status,2,c
 16921  00969A  D081               	goto	l22043
 16922  00969C  D7DD               	goto	l21987
 16923  00969E                     l21993:
 16924                           
 16925                           ;ff.c: 2972: };ff.c: 2973: if (c == '.' || i >= ni) {
 16926  00969E  0E2E               	movlw	46
 16927  0096A0  182A               	xorwf	create_name@c^0,w,c
 16928  0096A2  B4D8               	btfsc	status,2,c
 16929  0096A4  D006               	goto	u24470
 16930  0096A6  5020               	movf	create_name@ni^0,w,c
 16931  0096A8  5C28               	subwf	create_name@i^0,w,c
 16932  0096AA  5021               	movf	(create_name@ni+1)^0,w,c
 16933  0096AC  5829               	subwfb	(create_name@i+1)^0,w,c
 16934  0096AE  A0D8               	btfss	status,0,c
 16935  0096B0  D013               	goto	l22007
 16936  0096B2                     u24470:
 16937                           
 16938                           ;ff.c: 2974: if (ni == 11 || c != '.') return FR_INVALID_NAME;
 16939  0096B2  0E0B               	movlw	11
 16940  0096B4  1820               	xorwf	create_name@ni^0,w,c
 16941  0096B6  1021               	iorwf	(create_name@ni+1)^0,w,c
 16942  0096B8  B4D8               	btfsc	status,2,c
 16943  0096BA  D004               	goto	u24490
 16944  0096BC  0E2E               	movlw	46
 16945  0096BE  182A               	xorwf	create_name@c^0,w,c
 16946  0096C0  B4D8               	btfsc	status,2,c
 16947  0096C2  D002               	goto	l22005
 16948  0096C4                     u24490:
 16949  0096C4  0E06               	movlw	6
 16950  0096C6  0012               	return	
 16951  0096C8                     l22005:
 16952                           
 16953                           ;ff.c: 2975: i = 8; ni = 11;
 16954  0096C8  0E00               	movlw	0
 16955  0096CA  6E29               	movwf	(create_name@i+1)^0,c
 16956  0096CC  0E08               	movlw	8
 16957  0096CE  6E28               	movwf	create_name@i^0,c
 16958  0096D0  0E00               	movlw	0
 16959  0096D2  6E21               	movwf	(create_name@ni+1)^0,c
 16960  0096D4  0E0B               	movlw	11
 16961  0096D6  D7A2               	goto	L11
 16962  0096D8                     l22007:
 16963                           
 16964                           ;ff.c: 2977: };ff.c: 2987: if (dbc_1st(c)) {
 16965  0096D8  502A               	movf	create_name@c^0,w,c
 16966  0096DA  EC10  F070         	call	_dbc_1st
 16967  0096DE  500E               	movf	?_dbc_1st^0,w,c
 16968  0096E0  100F               	iorwf	(?_dbc_1st+1)^0,w,c
 16969  0096E2  B4D8               	btfsc	status,2,c
 16970  0096E4  D03C               	goto	l22027
 16971                           
 16972                           ;ff.c: 2988: d = (BYTE)p[si++];
 16973  0096E6  5024               	movf	create_name@si^0,w,c
 16974  0096E8  2422               	addwf	create_name@p^0,w,c
 16975  0096EA  6E19               	movwf	??_create_name^0,c
 16976  0096EC  5025               	movf	(create_name@si+1)^0,w,c
 16977  0096EE  2023               	addwfc	(create_name@p+1)^0,w,c
 16978  0096F0  6E1A               	movwf	(??_create_name+1)^0,c
 16979  0096F2  C019  FFF6         	movff	??_create_name,tblptrl
 16980  0096F6  C01A  FFF7         	movff	??_create_name+1,tblptrh
 16981  0096FA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16982  0096FA  6AF8               	clrf	tblptru,c
 16983  0096FC                     	endif
 16984  0096FC                     	if	0	;tblptru may be non-zero
 16985  0096FC                     	endif
 16986  0096FC  0008               	tblrd		*
 16987  0096FE  CFF5 F01F          	movff	tablat,create_name@d
 16988  009702  4A24               	infsnz	create_name@si^0,f,c
 16989  009704  2A25               	incf	(create_name@si+1)^0,f,c
 16990                           
 16991                           ;ff.c: 2989: if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;
 16992  009706  501F               	movf	create_name@d^0,w,c
 16993  009708  ECED  F06A         	call	_dbc_2nd
 16994  00970C  500E               	movf	?_dbc_2nd^0,w,c
 16995  00970E  100F               	iorwf	(?_dbc_2nd+1)^0,w,c
 16996  009710  B4D8               	btfsc	status,2,c
 16997  009712  D7D8               	goto	u24490
 16998  009714  0EFF               	movlw	255
 16999  009716  6E19               	movwf	??_create_name^0,c
 17000  009718  0EFF               	movlw	255
 17001  00971A  6E1A               	movwf	(??_create_name+1)^0,c
 17002  00971C  C020  F01B         	movff	create_name@ni,??_create_name+2
 17003  009720  C021  F01C         	movff	create_name@ni+1,??_create_name+3
 17004  009724  5019               	movf	??_create_name^0,w,c
 17005  009726  261B               	addwf	(??_create_name+2)^0,f,c
 17006  009728  501A               	movf	(??_create_name+1)^0,w,c
 17007  00972A  221C               	addwfc	(??_create_name+3)^0,f,c
 17008  00972C  501B               	movf	(??_create_name+2)^0,w,c
 17009  00972E  5C28               	subwf	create_name@i^0,w,c
 17010  009730  501C               	movf	(??_create_name+3)^0,w,c
 17011  009732  5829               	subwfb	(create_name@i+1)^0,w,c
 17012  009734  B0D8               	btfsc	status,0,c
 17013  009736  D7C6               	goto	u24490
 17014                           
 17015                           ;ff.c: 2990: sfn[i++] = c;
 17016  009738  5028               	movf	create_name@i^0,w,c
 17017  00973A  2426               	addwf	create_name@sfn^0,w,c
 17018  00973C  6ED9               	movwf	fsr2l,c
 17019  00973E  5029               	movf	(create_name@i+1)^0,w,c
 17020  009740  2027               	addwfc	(create_name@sfn+1)^0,w,c
 17021  009742  6EDA               	movwf	fsr2h,c
 17022  009744  C02A  FFDF         	movff	create_name@c,indf2
 17023  009748  4A28               	infsnz	create_name@i^0,f,c
 17024  00974A  2A29               	incf	(create_name@i+1)^0,f,c
 17025                           
 17026                           ;ff.c: 2991: sfn[i++] = d;
 17027  00974C  5028               	movf	create_name@i^0,w,c
 17028  00974E  2426               	addwf	create_name@sfn^0,w,c
 17029  009750  6ED9               	movwf	fsr2l,c
 17030  009752  5029               	movf	(create_name@i+1)^0,w,c
 17031  009754  2027               	addwfc	(create_name@sfn+1)^0,w,c
 17032  009756  6EDA               	movwf	fsr2h,c
 17033  009758  C01F  FFDF         	movff	create_name@d,indf2
 17034  00975C  D01D               	goto	l22041
 17035  00975E                     l22027:
 17036                           
 17037                           ;ff.c: 2993: if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;
 17038  00975E  0E98               	movlw	low STR_4
 17039  009760  6E0E               	movwf	chk_chr@str^0,c
 17040  009762  0EFF               	movlw	high STR_4
 17041  009764  6E0F               	movwf	(chk_chr@str+1)^0,c
 17042  009766  C02A  F010         	movff	create_name@c,chk_chr@chr
 17043  00976A  6A11               	clrf	(chk_chr@chr+1)^0,c
 17044  00976C  ECB7  F073         	call	_chk_chr	;wreg free
 17045  009770  500E               	movf	?_chk_chr^0,w,c
 17046  009772  100F               	iorwf	(?_chk_chr+1)^0,w,c
 17047  009774  A4D8               	btfss	status,2,c
 17048  009776  D7A6               	goto	u24490
 17049                           
 17050                           ;ff.c: 2994: if (((c) >= 'a' && (c) <= 'z')) c -= 0x20;
 17051  009778  0E60               	movlw	96
 17052  00977A  642A               	cpfsgt	create_name@c^0,c
 17053  00977C  D005               	goto	l22039
 17054  00977E  0E7B               	movlw	123
 17055  009780  602A               	cpfslt	create_name@c^0,c
 17056  009782  D002               	goto	l22039
 17057  009784  0E20               	movlw	32
 17058  009786  5E2A               	subwf	create_name@c^0,f,c
 17059  009788                     l22039:
 17060                           
 17061                           ;ff.c: 2995: sfn[i++] = c;
 17062  009788  5028               	movf	create_name@i^0,w,c
 17063  00978A  2426               	addwf	create_name@sfn^0,w,c
 17064  00978C  6ED9               	movwf	fsr2l,c
 17065  00978E  5029               	movf	(create_name@i+1)^0,w,c
 17066  009790  2027               	addwfc	(create_name@sfn+1)^0,w,c
 17067  009792  6EDA               	movwf	fsr2h,c
 17068  009794  C02A  FFDF         	movff	create_name@c,indf2
 17069  009798                     l22041:
 17070  009798  4A28               	infsnz	create_name@i^0,f,c
 17071  00979A  2A29               	incf	(create_name@i+1)^0,f,c
 17072  00979C  D740               	goto	l21975
 17073  00979E                     l22043:
 17074                           
 17075                           ;ff.c: 2998: *path = p + si;
 17076  00979E  5024               	movf	create_name@si^0,w,c
 17077  0097A0  2422               	addwf	create_name@p^0,w,c
 17078  0097A2  6E19               	movwf	??_create_name^0,c
 17079  0097A4  5025               	movf	(create_name@si+1)^0,w,c
 17080  0097A6  2023               	addwfc	(create_name@p+1)^0,w,c
 17081  0097A8  6E1A               	movwf	(??_create_name+1)^0,c
 17082  0097AA  5018               	movf	create_name@path^0,w,c
 17083  0097AC  6ED9               	movwf	fsr2l,c
 17084  0097AE  6ADA               	clrf	fsr2h,c
 17085  0097B0  C019  FFDE         	movff	??_create_name,postinc2
 17086  0097B4  C01A  FFDD         	movff	??_create_name+1,postdec2
 17087                           
 17088                           ;ff.c: 2999: if (i == 0) return FR_INVALID_NAME;
 17089  0097B8  5028               	movf	create_name@i^0,w,c
 17090  0097BA  1029               	iorwf	(create_name@i+1)^0,w,c
 17091  0097BC  B4D8               	btfsc	status,2,c
 17092  0097BE  D782               	goto	u24490
 17093                           
 17094                           ;ff.c: 3001: if (sfn[0] == 0xE5) sfn[0] = 0x05;
 17095  0097C0  C026  FFD9         	movff	create_name@sfn,fsr2l
 17096  0097C4  C027  FFDA         	movff	create_name@sfn+1,fsr2h
 17097  0097C8  0EE5               	movlw	229
 17098  0097CA  18DE               	xorwf	postinc2,w,c
 17099  0097CC  A4D8               	btfss	status,2,c
 17100  0097CE  D006               	goto	l22055
 17101  0097D0  C026  FFD9         	movff	create_name@sfn,fsr2l
 17102  0097D4  C027  FFDA         	movff	create_name@sfn+1,fsr2h
 17103  0097D8  0E05               	movlw	5
 17104  0097DA  6EDF               	movwf	indf2,c
 17105  0097DC                     l22055:
 17106                           
 17107                           ;ff.c: 3002: sfn[11] = (c <= ' ') ? 0x04 : 0;
 17108  0097DC  0E20               	movlw	32
 17109  0097DE  642A               	cpfsgt	create_name@c^0,c
 17110  0097E0  D004               	goto	l22059
 17111  0097E2  0E00               	movlw	0
 17112  0097E4  6E1E               	movwf	(_create_name$1054+1)^0,c
 17113  0097E6  0E00               	movlw	0
 17114  0097E8  D003               	goto	L12
 17115  0097EA                     l22059:
 17116  0097EA  0E00               	movlw	0
 17117  0097EC  6E1E               	movwf	(_create_name$1054+1)^0,c
 17118  0097EE  0E04               	movlw	4
 17119  0097F0                     L12:
 17120  0097F0  6E1D               	movwf	_create_name$1054^0,c
 17121  0097F2  EE20 F00B          	lfsr	2,11
 17122  0097F6  5026               	movf	create_name@sfn^0,w,c
 17123  0097F8  26D9               	addwf	fsr2l,f,c
 17124  0097FA  5027               	movf	(create_name@sfn+1)^0,w,c
 17125  0097FC  22DA               	addwfc	fsr2h,f,c
 17126  0097FE  C01D  FFDF         	movff	_create_name$1054,indf2
 17127                           
 17128                           ;ff.c: 3004: return FR_OK;
 17129  009802  0E00               	movlw	0
 17130  009804  0012               	return		;funcret
 17131  009806                     __end_of_create_name:
 17132                           	callstack 0
 17133                           
 17134 ;; *************** function _dbc_2nd *****************
 17135 ;; Defined at:
 17136 ;;		line 713 in file "mcc_generated_files/fatfs/ff.c"
 17137 ;; Parameters:    Size  Location     Type
 17138 ;;  c               1    wreg     unsigned char 
 17139 ;; Auto vars:     Size  Location     Type
 17140 ;;  c               1   15[COMRAM] unsigned char 
 17141 ;; Return value:  Size  Location     Type
 17142 ;;                  2   13[COMRAM] int 
 17143 ;; Registers used:
 17144 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 17145 ;; Tracked objects:
 17146 ;;		On entry : 0/0
 17147 ;;		On exit  : 0/0
 17148 ;;		Unchanged: 0/0
 17149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17150 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17153 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17154 ;;Total ram usage:        3 bytes
 17155 ;; Hardware stack levels used:    1
 17156 ;; Hardware stack levels required when called:    6
 17157 ;; This function calls:
 17158 ;;		Nothing
 17159 ;; This function is called by:
 17160 ;;		_create_name
 17161 ;; This function uses a non-reentrant model
 17162 ;;
 17163                           
 17164                           	psect	text56
 17165  00D5DA                     __ptext56:
 17166                           	callstack 0
 17167  00D5DA                     _dbc_2nd:
 17168                           	callstack 20
 17169                           
 17170                           ;incstack = 0
 17171                           ;dbc_2nd@c stored from wreg
 17172  00D5DA  6E10               	movwf	dbc_2nd@c^0,c
 17173                           
 17174                           ;ff.c: 722: if (c >= DbcTbl[4]) {
 17175  00D5DC  0EC7               	movlw	low (_DbcTbl+4)
 17176  00D5DE  6EF6               	movwf	tblptrl,c
 17177  00D5E0  0EFA               	movlw	high (_DbcTbl+4)
 17178  00D5E2  6EF7               	movwf	tblptrh,c
 17179  00D5E4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17180  00D5E4  6AF8               	clrf	tblptru,c
 17181  00D5E6                     	endif
 17182  00D5E6                     	if	0	;tblptru may be non-zero
 17183  00D5E6                     	endif
 17184  00D5E6  0009               	tblrd		*+
 17185  00D5E8  50F5               	movf	tablat,w,c
 17186  00D5EA  5C10               	subwf	dbc_2nd@c^0,w,c
 17187  00D5EC  A0D8               	btfss	status,0,c
 17188  00D5EE  D037               	goto	l20947
 17189                           
 17190                           ;ff.c: 723: if (c <= DbcTbl[5]) return 1;
 17191  00D5F0  0EC8               	movlw	low (_DbcTbl+5)
 17192  00D5F2  6EF6               	movwf	tblptrl,c
 17193  00D5F4  0EFA               	movlw	high (_DbcTbl+5)
 17194  00D5F6  6EF7               	movwf	tblptrh,c
 17195  00D5F8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17196  00D5F8  6AF8               	clrf	tblptru,c
 17197  00D5FA                     	endif
 17198  00D5FA                     	if	0	;tblptru may be non-zero
 17199  00D5FA                     	endif
 17200  00D5FA  5010               	movf	dbc_2nd@c^0,w,c
 17201  00D5FC  0009               	tblrd		*+
 17202  00D5FE  5CF5               	subwf	tablat,w,c
 17203  00D600  A0D8               	btfss	status,0,c
 17204  00D602  D005               	goto	l20931
 17205  00D604                     u22990:
 17206  00D604  0E00               	movlw	0
 17207  00D606  6E0F               	movwf	(?_dbc_2nd+1)^0,c
 17208  00D608  0E01               	movlw	1
 17209  00D60A  6E0E               	movwf	?_dbc_2nd^0,c
 17210  00D60C  0012               	return	
 17211  00D60E                     l20931:
 17212                           
 17213                           ;ff.c: 724: if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 17214  00D60E  0EC9               	movlw	low (_DbcTbl+6)
 17215  00D610  6EF6               	movwf	tblptrl,c
 17216  00D612  0EFA               	movlw	high (_DbcTbl+6)
 17217  00D614  6EF7               	movwf	tblptrh,c
 17218  00D616                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17219  00D616  6AF8               	clrf	tblptru,c
 17220  00D618                     	endif
 17221  00D618                     	if	0	;tblptru may be non-zero
 17222  00D618                     	endif
 17223  00D618  0009               	tblrd		*+
 17224  00D61A  50F5               	movf	tablat,w,c
 17225  00D61C  5C10               	subwf	dbc_2nd@c^0,w,c
 17226  00D61E  A0D8               	btfss	status,0,c
 17227  00D620  D00A               	goto	l20939
 17228  00D622  0ECA               	movlw	low (_DbcTbl+7)
 17229  00D624  6EF6               	movwf	tblptrl,c
 17230  00D626  0EFA               	movlw	high (_DbcTbl+7)
 17231  00D628  6EF7               	movwf	tblptrh,c
 17232  00D62A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17233  00D62A  6AF8               	clrf	tblptru,c
 17234  00D62C                     	endif
 17235  00D62C                     	if	0	;tblptru may be non-zero
 17236  00D62C                     	endif
 17237  00D62C  5010               	movf	dbc_2nd@c^0,w,c
 17238  00D62E  0009               	tblrd		*+
 17239  00D630  5CF5               	subwf	tablat,w,c
 17240  00D632  B0D8               	btfsc	status,0,c
 17241  00D634  D7E7               	goto	u22990
 17242  00D636                     l20939:
 17243                           
 17244                           ;ff.c: 725: if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 17245  00D636  0ECB               	movlw	low (_DbcTbl+8)
 17246  00D638  6EF6               	movwf	tblptrl,c
 17247  00D63A  0EFA               	movlw	high (_DbcTbl+8)
 17248  00D63C  6EF7               	movwf	tblptrh,c
 17249  00D63E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17250  00D63E  6AF8               	clrf	tblptru,c
 17251  00D640                     	endif
 17252  00D640                     	if	0	;tblptru may be non-zero
 17253  00D640                     	endif
 17254  00D640  0009               	tblrd		*+
 17255  00D642  50F5               	movf	tablat,w,c
 17256  00D644  5C10               	subwf	dbc_2nd@c^0,w,c
 17257  00D646  A0D8               	btfss	status,0,c
 17258  00D648  D00A               	goto	l20947
 17259  00D64A  0ECC               	movlw	low (_DbcTbl+9)
 17260  00D64C  6EF6               	movwf	tblptrl,c
 17261  00D64E  0EFA               	movlw	high (_DbcTbl+9)
 17262  00D650  6EF7               	movwf	tblptrh,c
 17263  00D652                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17264  00D652  6AF8               	clrf	tblptru,c
 17265  00D654                     	endif
 17266  00D654                     	if	0	;tblptru may be non-zero
 17267  00D654                     	endif
 17268  00D654  5010               	movf	dbc_2nd@c^0,w,c
 17269  00D656  0009               	tblrd		*+
 17270  00D658  5CF5               	subwf	tablat,w,c
 17271  00D65A  B0D8               	btfsc	status,0,c
 17272  00D65C  D7D3               	goto	u22990
 17273  00D65E                     l20947:
 17274                           
 17275                           ;ff.c: 726: };ff.c: 730: return 0;
 17276  00D65E  0E00               	movlw	0
 17277  00D660  6E0F               	movwf	(?_dbc_2nd+1)^0,c
 17278  00D662  0E00               	movlw	0
 17279  00D664  6E0E               	movwf	?_dbc_2nd^0,c
 17280  00D666  0012               	return		;funcret
 17281  00D668                     __end_of_dbc_2nd:
 17282                           	callstack 0
 17283                           
 17284 ;; *************** function _dbc_1st *****************
 17285 ;; Defined at:
 17286 ;;		line 693 in file "mcc_generated_files/fatfs/ff.c"
 17287 ;; Parameters:    Size  Location     Type
 17288 ;;  c               1    wreg     unsigned char 
 17289 ;; Auto vars:     Size  Location     Type
 17290 ;;  c               1   15[COMRAM] unsigned char 
 17291 ;; Return value:  Size  Location     Type
 17292 ;;                  2   13[COMRAM] int 
 17293 ;; Registers used:
 17294 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 17295 ;; Tracked objects:
 17296 ;;		On entry : 0/0
 17297 ;;		On exit  : 0/0
 17298 ;;		Unchanged: 0/0
 17299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17300 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17303 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17304 ;;Total ram usage:        3 bytes
 17305 ;; Hardware stack levels used:    1
 17306 ;; Hardware stack levels required when called:    6
 17307 ;; This function calls:
 17308 ;;		Nothing
 17309 ;; This function is called by:
 17310 ;;		_create_name
 17311 ;; This function uses a non-reentrant model
 17312 ;;
 17313                           
 17314                           	psect	text57
 17315  00E020                     __ptext57:
 17316                           	callstack 0
 17317  00E020                     _dbc_1st:
 17318                           	callstack 20
 17319                           
 17320                           ;incstack = 0
 17321                           ;dbc_1st@c stored from wreg
 17322  00E020  6E10               	movwf	dbc_1st@c^0,c
 17323                           
 17324                           ;ff.c: 701: if (c >= DbcTbl[0]) {
 17325  00E022  0EC3               	movlw	low _DbcTbl
 17326  00E024  6EF6               	movwf	tblptrl,c
 17327  00E026                     	if	1	;There is more than 1 active tblptr byte
 17328  00E026  0EFA               	movlw	high _DbcTbl
 17329  00E028  6EF7               	movwf	tblptrh,c
 17330  00E02A                     	endif
 17331  00E02A                     	if	1	;There are 3 active tblptr bytes
 17332  00E02A  0E00               	movlw	low (_DbcTbl shr (0+16))
 17333  00E02C  6EF8               	movwf	tblptru,c
 17334  00E02E                     	endif
 17335  00E02E  0009               	tblrd		*+
 17336  00E030  50F5               	movf	tablat,w,c
 17337  00E032  5C10               	subwf	dbc_1st@c^0,w,c
 17338  00E034  A0D8               	btfss	status,0,c
 17339  00E036  D023               	goto	l20919
 17340                           
 17341                           ;ff.c: 702: if (c <= DbcTbl[1]) return 1;
 17342  00E038  0EC4               	movlw	low (_DbcTbl+1)
 17343  00E03A  6EF6               	movwf	tblptrl,c
 17344  00E03C  0EFA               	movlw	high (_DbcTbl+1)
 17345  00E03E  6EF7               	movwf	tblptrh,c
 17346  00E040                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17347  00E040  6AF8               	clrf	tblptru,c
 17348  00E042                     	endif
 17349  00E042                     	if	0	;tblptru may be non-zero
 17350  00E042                     	endif
 17351  00E042  5010               	movf	dbc_1st@c^0,w,c
 17352  00E044  0009               	tblrd		*+
 17353  00E046  5CF5               	subwf	tablat,w,c
 17354  00E048  A0D8               	btfss	status,0,c
 17355  00E04A  D005               	goto	l20911
 17356  00E04C                     u22950:
 17357  00E04C  0E00               	movlw	0
 17358  00E04E  6E0F               	movwf	(?_dbc_1st+1)^0,c
 17359  00E050  0E01               	movlw	1
 17360  00E052  6E0E               	movwf	?_dbc_1st^0,c
 17361  00E054  0012               	return	
 17362  00E056                     l20911:
 17363                           
 17364                           ;ff.c: 703: if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 17365  00E056  0EC5               	movlw	low (_DbcTbl+2)
 17366  00E058  6EF6               	movwf	tblptrl,c
 17367  00E05A  0EFA               	movlw	high (_DbcTbl+2)
 17368  00E05C  6EF7               	movwf	tblptrh,c
 17369  00E05E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17370  00E05E  6AF8               	clrf	tblptru,c
 17371  00E060                     	endif
 17372  00E060                     	if	0	;tblptru may be non-zero
 17373  00E060                     	endif
 17374  00E060  0009               	tblrd		*+
 17375  00E062  50F5               	movf	tablat,w,c
 17376  00E064  5C10               	subwf	dbc_1st@c^0,w,c
 17377  00E066  A0D8               	btfss	status,0,c
 17378  00E068  D00A               	goto	l20919
 17379  00E06A  0EC6               	movlw	low (_DbcTbl+3)
 17380  00E06C  6EF6               	movwf	tblptrl,c
 17381  00E06E  0EFA               	movlw	high (_DbcTbl+3)
 17382  00E070  6EF7               	movwf	tblptrh,c
 17383  00E072                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17384  00E072  6AF8               	clrf	tblptru,c
 17385  00E074                     	endif
 17386  00E074                     	if	0	;tblptru may be non-zero
 17387  00E074                     	endif
 17388  00E074  5010               	movf	dbc_1st@c^0,w,c
 17389  00E076  0009               	tblrd		*+
 17390  00E078  5CF5               	subwf	tablat,w,c
 17391  00E07A  B0D8               	btfsc	status,0,c
 17392  00E07C  D7E7               	goto	u22950
 17393  00E07E                     l20919:
 17394                           
 17395                           ;ff.c: 704: };ff.c: 708: return 0;
 17396  00E07E  0E00               	movlw	0
 17397  00E080  6E0F               	movwf	(?_dbc_1st+1)^0,c
 17398  00E082  0E00               	movlw	0
 17399  00E084  6E0E               	movwf	?_dbc_1st^0,c
 17400  00E086  0012               	return		;funcret
 17401  00E088                     __end_of_dbc_1st:
 17402                           	callstack 0
 17403                           
 17404 ;; *************** function _chk_chr *****************
 17405 ;; Defined at:
 17406 ;;		line 685 in file "mcc_generated_files/fatfs/ff.c"
 17407 ;; Parameters:    Size  Location     Type
 17408 ;;  str             2   13[COMRAM] PTR const unsigned char 
 17409 ;;		 -> STR_4(15), 
 17410 ;;  chr             2   15[COMRAM] int 
 17411 ;; Auto vars:     Size  Location     Type
 17412 ;;		None
 17413 ;; Return value:  Size  Location     Type
 17414 ;;                  2   13[COMRAM] int 
 17415 ;; Registers used:
 17416 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 17417 ;; Tracked objects:
 17418 ;;		On entry : 0/0
 17419 ;;		On exit  : 0/0
 17420 ;;		Unchanged: 0/0
 17421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17422 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17424 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17425 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17426 ;;Total ram usage:        6 bytes
 17427 ;; Hardware stack levels used:    1
 17428 ;; Hardware stack levels required when called:    6
 17429 ;; This function calls:
 17430 ;;		Nothing
 17431 ;; This function is called by:
 17432 ;;		_create_name
 17433 ;; This function uses a non-reentrant model
 17434 ;;
 17435                           
 17436                           	psect	text58
 17437  00E76E                     __ptext58:
 17438                           	callstack 0
 17439  00E76E                     _chk_chr:
 17440                           	callstack 20
 17441                           
 17442                           ;ff.c: 687: while (*str && *str != chr) str++;
 17443                           
 17444                           ;incstack = 0
 17445  00E76E  D002               	goto	l20895
 17446  00E770                     l20893:
 17447  00E770  4A0E               	infsnz	chk_chr@str^0,f,c
 17448  00E772  2A0F               	incf	(chk_chr@str+1)^0,f,c
 17449  00E774                     l20895:
 17450  00E774  C00E  FFF6         	movff	chk_chr@str,tblptrl
 17451  00E778  C00F  FFF7         	movff	chk_chr@str+1,tblptrh
 17452  00E77C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17453  00E77C  6AF8               	clrf	tblptru,c
 17454  00E77E                     	endif
 17455  00E77E                     	if	0	;tblptru may be non-zero
 17456  00E77E                     	endif
 17457  00E77E  0008               	tblrd		*
 17458  00E780  50F5               	movf	tablat,w,c
 17459  00E782  0900               	iorlw	0
 17460  00E784  B4D8               	btfsc	status,2,c
 17461  00E786  D010               	goto	u22930
 17462  00E788  C00E  FFF6         	movff	chk_chr@str,tblptrl
 17463  00E78C  C00F  FFF7         	movff	chk_chr@str+1,tblptrh
 17464  00E790                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17465  00E790  6AF8               	clrf	tblptru,c
 17466  00E792                     	endif
 17467  00E792                     	if	0	;tblptru may be non-zero
 17468  00E792                     	endif
 17469  00E792  0008               	tblrd		*
 17470  00E794  50F5               	movf	tablat,w,c
 17471  00E796  6E12               	movwf	??_chk_chr^0,c
 17472  00E798  6A13               	clrf	(??_chk_chr+1)^0,c
 17473  00E79A  5010               	movf	chk_chr@chr^0,w,c
 17474  00E79C  1812               	xorwf	??_chk_chr^0,w,c
 17475  00E79E  E1E8               	bnz	l20893
 17476  00E7A0  5011               	movf	(chk_chr@chr+1)^0,w,c
 17477  00E7A2  1813               	xorwf	(??_chk_chr+1)^0,w,c
 17478  00E7A4  A4D8               	btfss	status,2,c
 17479  00E7A6  D7E4               	goto	l20893
 17480  00E7A8                     u22930:
 17481                           
 17482                           ;ff.c: 688: return *str;
 17483  00E7A8  C00E  FFF6         	movff	chk_chr@str,tblptrl
 17484  00E7AC  C00F  FFF7         	movff	chk_chr@str+1,tblptrh
 17485  00E7B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17486  00E7B0  6AF8               	clrf	tblptru,c
 17487  00E7B2                     	endif
 17488  00E7B2                     	if	0	;tblptru may be non-zero
 17489  00E7B2                     	endif
 17490  00E7B2  0008               	tblrd		*
 17491  00E7B4  50F5               	movf	tablat,w,c
 17492  00E7B6  6E0E               	movwf	?_chk_chr^0,c
 17493  00E7B8  6A0F               	clrf	(?_chk_chr+1)^0,c
 17494  00E7BA  0012               	return		;funcret
 17495  00E7BC                     __end_of_chk_chr:
 17496                           	callstack 0
 17497                           
 17498 ;; *************** function _dir_register *****************
 17499 ;; Defined at:
 17500 ;;		line 2484 in file "mcc_generated_files/fatfs/ff.c"
 17501 ;; Parameters:    Size  Location     Type
 17502 ;;  dp              2    0[BANK1 ] PTR struct .
 17503 ;;		 -> f_open@dj(40), 
 17504 ;; Auto vars:     Size  Location     Type
 17505 ;;  fs              2    2[BANK1 ] PTR struct .
 17506 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 17507 ;;  res             1    4[BANK1 ] enum E64
 17508 ;; Return value:  Size  Location     Type
 17509 ;;                  1    wreg      enum E64
 17510 ;; Registers used:
 17511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 17512 ;; Tracked objects:
 17513 ;;		On entry : 3F/1
 17514 ;;		On exit  : 3F/1
 17515 ;;		Unchanged: 0/0
 17516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17517 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17518 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17520 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17521 ;;Total ram usage:        5 bytes
 17522 ;; Hardware stack levels used:    1
 17523 ;; Hardware stack levels required when called:   17
 17524 ;; This function calls:
 17525 ;;		_dir_alloc
 17526 ;;		_mem_cpy
 17527 ;;		_mem_set
 17528 ;;		_move_window
 17529 ;; This function is called by:
 17530 ;;		_f_open
 17531 ;; This function uses a non-reentrant model
 17532 ;;
 17533                           
 17534                           	psect	text59
 17535  00C5FE                     __ptext59:
 17536                           	callstack 0
 17537  00C5FE                     _dir_register:
 17538                           	callstack 11
 17539                           
 17540                           ; BSR set to: 1
 17541                           ;ff.c: 2488: FRESULT res;;ff.c: 2489: FATFS *fs = dp->obj.fs;
 17542                           
 17543                           ;incstack = 0
 17544  00C5FE  C100  FFD9         	movff	dir_register@dp,fsr2l
 17545  00C602  C101  FFDA         	movff	dir_register@dp+1,fsr2h
 17546  00C606  CFDE F102          	movff	postinc2,dir_register@fs
 17547  00C60A  CFDD F103          	movff	postdec2,dir_register@fs+1
 17548                           
 17549                           ; BSR set to: 1
 17550                           ;ff.c: 2561: res = dir_alloc(dp, 1);
 17551  00C60E  C100  F0F3         	movff	dir_register@dp,dir_alloc@dp
 17552  00C612  C101  F0F4         	movff	dir_register@dp+1,dir_alloc@dp+1
 17553  00C616  0E00               	movlw	0
 17554  00C618  0100               	movlb	0	; () banked
 17555  00C61A  6FF6               	movwf	(dir_alloc@nent+1)& (0+255),b
 17556  00C61C  0E01               	movlw	1
 17557  00C61E  6FF5               	movwf	dir_alloc@nent& (0+255),b
 17558  00C620  EC27  F05D         	call	_dir_alloc	;wreg free
 17559  00C624  0101               	movlb	1	; () banked
 17560  00C626  6F04               	movwf	dir_register@res& (0+255),b
 17561                           
 17562                           ; BSR set to: 1
 17563                           ;ff.c: 2566: if (res == FR_OK) {
 17564  00C628  5104               	movf	dir_register@res& (0+255),w,b
 17565  00C62A  A4D8               	btfss	status,2,c
 17566  00C62C  D04D               	goto	l22543
 17567                           
 17568                           ; BSR set to: 1
 17569                           ;ff.c: 2567: res = move_window(fs, dp->sect);
 17570  00C62E  C102  F08C         	movff	dir_register@fs,move_window@fs
 17571  00C632  C103  F08D         	movff	dir_register@fs+1,move_window@fs+1
 17572  00C636  EE20 F016          	lfsr	2,22
 17573  00C63A  5100               	movf	dir_register@dp& (0+255),w,b
 17574  00C63C  26D9               	addwf	fsr2l,f,c
 17575  00C63E  5101               	movf	(dir_register@dp+1)& (0+255),w,b
 17576  00C640  22DA               	addwfc	fsr2h,f,c
 17577  00C642  CFDE F08E          	movff	postinc2,move_window@sector
 17578  00C646  CFDE F08F          	movff	postinc2,move_window@sector+1
 17579  00C64A  CFDE F090          	movff	postinc2,move_window@sector+2
 17580  00C64E  CFDE F091          	movff	postinc2,move_window@sector+3
 17581  00C652  EC1B  F067         	call	_move_window	;wreg free
 17582  00C656  0101               	movlb	1	; () banked
 17583  00C658  6F04               	movwf	dir_register@res& (0+255),b
 17584                           
 17585                           ; BSR set to: 1
 17586                           ;ff.c: 2568: if (res == FR_OK) {
 17587  00C65A  5104               	movf	dir_register@res& (0+255),w,b
 17588  00C65C  A4D8               	btfss	status,2,c
 17589  00C65E  D034               	goto	l22543
 17590                           
 17591                           ; BSR set to: 1
 17592                           ;ff.c: 2569: mem_set(dp->dir, 0, 32);
 17593  00C660  EE20 F01A          	lfsr	2,26
 17594  00C664  5100               	movf	dir_register@dp& (0+255),w,b
 17595  00C666  26D9               	addwf	fsr2l,f,c
 17596  00C668  5101               	movf	(dir_register@dp+1)& (0+255),w,b
 17597  00C66A  22DA               	addwfc	fsr2h,f,c
 17598  00C66C  CFDE F00E          	movff	postinc2,mem_set@dst
 17599  00C670  CFDD F00F          	movff	postdec2,mem_set@dst+1
 17600  00C674  0E00               	movlw	0
 17601  00C676  6E11               	movwf	(mem_set@val+1)^0,c
 17602  00C678  0E00               	movlw	0
 17603  00C67A  6E10               	movwf	mem_set@val^0,c
 17604  00C67C  0E00               	movlw	0
 17605  00C67E  6E13               	movwf	(mem_set@cnt+1)^0,c
 17606  00C680  0E20               	movlw	32
 17607  00C682  6E12               	movwf	mem_set@cnt^0,c
 17608  00C684  EC9B  F078         	call	_mem_set	;wreg free
 17609                           
 17610                           ;ff.c: 2570: mem_cpy(dp->dir + 0, dp->fn, 11);
 17611  00C688  0101               	movlb	1	; () banked
 17612  00C68A  EE20 F01A          	lfsr	2,26
 17613  00C68E  5100               	movf	dir_register@dp& (0+255),w,b
 17614  00C690  26D9               	addwf	fsr2l,f,c
 17615  00C692  5101               	movf	(dir_register@dp+1)& (0+255),w,b
 17616  00C694  22DA               	addwfc	fsr2h,f,c
 17617  00C696  CFDE F00E          	movff	postinc2,mem_cpy@dst
 17618  00C69A  CFDD F00F          	movff	postdec2,mem_cpy@dst+1
 17619  00C69E  0E1C               	movlw	28
 17620  00C6A0  2500               	addwf	dir_register@dp& (0+255),w,b
 17621  00C6A2  6E10               	movwf	mem_cpy@src^0,c
 17622  00C6A4  0E00               	movlw	0
 17623  00C6A6  2101               	addwfc	(dir_register@dp+1)& (0+255),w,b
 17624  00C6A8  6E11               	movwf	(mem_cpy@src+1)^0,c
 17625  00C6AA  0E00               	movlw	0
 17626  00C6AC  6E13               	movwf	(mem_cpy@cnt+1)^0,c
 17627  00C6AE  0E0B               	movlw	11
 17628  00C6B0  6E12               	movwf	mem_cpy@cnt^0,c
 17629  00C6B2  EC02  F076         	call	_mem_cpy	;wreg free
 17630                           
 17631                           ;ff.c: 2574: fs->wflag = 1;
 17632  00C6B6  0101               	movlb	1	; () banked
 17633  00C6B8  EE20 F003          	lfsr	2,3
 17634  00C6BC  5102               	movf	dir_register@fs& (0+255),w,b
 17635  00C6BE  26D9               	addwf	fsr2l,f,c
 17636  00C6C0  5103               	movf	(dir_register@fs+1)& (0+255),w,b
 17637  00C6C2  22DA               	addwfc	fsr2h,f,c
 17638  00C6C4  0E01               	movlw	1
 17639  00C6C6  6EDF               	movwf	indf2,c
 17640  00C6C8                     l22543:
 17641                           
 17642                           ; BSR set to: 1
 17643                           ;ff.c: 2575: };ff.c: 2576: };ff.c: 2578: return res;
 17644  00C6C8  5104               	movf	dir_register@res& (0+255),w,b
 17645                           
 17646                           ; BSR set to: 1
 17647  00C6CA  0012               	return		;funcret
 17648  00C6CC                     __end_of_dir_register:
 17649                           	callstack 0
 17650                           
 17651 ;; *************** function _mem_cpy *****************
 17652 ;; Defined at:
 17653 ;;		line 646 in file "mcc_generated_files/fatfs/ff.c"
 17654 ;; Parameters:    Size  Location     Type
 17655 ;;  dst             2   13[COMRAM] PTR void 
 17656 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 17657 ;;		 -> NULL(0), 
 17658 ;;  src             2   15[COMRAM] PTR const void 
 17659 ;;		 -> drive.win(512), drive.win(512), NormalProc@str(100), drive(559), 
 17660 ;;		 -> dj.fn(12), f_open@dj(40), drive@fatfs_demo$F369(559), FatFsDemo_Tasks@data(13), 
 17661 ;;		 -> NULL(0), 
 17662 ;;  cnt             2   17[COMRAM] unsigned int 
 17663 ;; Auto vars:     Size  Location     Type
 17664 ;;  s               2   21[COMRAM] PTR const unsigned char 
 17665 ;;		 -> drive.win(512), drive.win(512), NormalProc@str(100), drive(559), 
 17666 ;;		 -> dj.fn(12), f_open@dj(40), drive@fatfs_demo$F369(559), FatFsDemo_Tasks@data(13), 
 17667 ;;		 -> NULL(0), 
 17668 ;;  d               2   19[COMRAM] PTR unsigned char 
 17669 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 17670 ;;		 -> NULL(0), 
 17671 ;; Return value:  Size  Location     Type
 17672 ;;                  1    wreg      void 
 17673 ;; Registers used:
 17674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17675 ;; Tracked objects:
 17676 ;;		On entry : 3E/1
 17677 ;;		On exit  : 3E/0
 17678 ;;		Unchanged: 3E/0
 17679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17680 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17681 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17683 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17684 ;;Total ram usage:       10 bytes
 17685 ;; Hardware stack levels used:    1
 17686 ;; Hardware stack levels required when called:    6
 17687 ;; This function calls:
 17688 ;;		Nothing
 17689 ;; This function is called by:
 17690 ;;		_dir_register
 17691 ;;		_f_write
 17692 ;; This function uses a non-reentrant model
 17693 ;;
 17694                           
 17695                           	psect	text60
 17696  00EC04                     __ptext60:
 17697                           	callstack 0
 17698  00EC04                     _mem_cpy:
 17699                           	callstack 22
 17700                           
 17701                           ;ff.c: 648: BYTE *d = (BYTE*)dst;
 17702                           
 17703                           ; BSR set to: 1
 17704                           ;incstack = 0
 17705  00EC04  C00E  F014         	movff	mem_cpy@dst,mem_cpy@d
 17706  00EC08  C00F  F015         	movff	mem_cpy@dst+1,mem_cpy@d+1
 17707                           
 17708                           ;ff.c: 649: const BYTE *s = (const BYTE*)src;
 17709  00EC0C  C010  F016         	movff	mem_cpy@src,mem_cpy@s
 17710  00EC10  C011  F017         	movff	mem_cpy@src+1,mem_cpy@s+1
 17711  00EC14                     
 17712                           ;ff.c: 651: if (cnt != 0) {
 17713  00EC14  5012               	movf	mem_cpy@cnt^0,w,c
 17714  00EC16  1013               	iorwf	(mem_cpy@cnt+1)^0,w,c
 17715  00EC18  B4D8               	btfsc	status,2,c
 17716  00EC1A  0012               	return	
 17717                           
 17718                           ;ff.c: 653: *d++ = *s++;
 17719  00EC1C  C016  FFD9         	movff	mem_cpy@s,fsr2l
 17720  00EC20  C017  FFDA         	movff	mem_cpy@s+1,fsr2h
 17721  00EC24  C014  FFE1         	movff	mem_cpy@d,fsr1l
 17722  00EC28  C015  FFE2         	movff	mem_cpy@d+1,fsr1h
 17723  00EC2C  CFDF FFE7          	movff	indf2,indf1
 17724  00EC30  4A16               	infsnz	mem_cpy@s^0,f,c
 17725  00EC32  2A17               	incf	(mem_cpy@s+1)^0,f,c
 17726  00EC34  4A14               	infsnz	mem_cpy@d^0,f,c
 17727  00EC36  2A15               	incf	(mem_cpy@d+1)^0,f,c
 17728                           
 17729                           ;ff.c: 654: } while (--cnt);
 17730  00EC38  0612               	decf	mem_cpy@cnt^0,f,c
 17731  00EC3A  A0D8               	btfss	status,0,c
 17732  00EC3C  0613               	decf	(mem_cpy@cnt+1)^0,f,c
 17733  00EC3E  D7EA               	goto	L49
 17734  00EC40                     __end_of_mem_cpy:
 17735                           	callstack 0
 17736                           
 17737 ;; *************** function _dir_alloc *****************
 17738 ;; Defined at:
 17739 ;;		line 1783 in file "mcc_generated_files/fatfs/ff.c"
 17740 ;; Parameters:    Size  Location     Type
 17741 ;;  dp              2  147[BANK0 ] PTR struct .
 17742 ;;		 -> f_open@dj(40), 
 17743 ;;  nent            2  149[BANK0 ] unsigned int 
 17744 ;; Auto vars:     Size  Location     Type
 17745 ;;  n               2  156[BANK0 ] unsigned int 
 17746 ;;  fs              2  154[BANK0 ] PTR struct .
 17747 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 17748 ;;  res             1  158[BANK0 ] enum E64
 17749 ;; Return value:  Size  Location     Type
 17750 ;;                  1    wreg      enum E64
 17751 ;; Registers used:
 17752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 17753 ;; Tracked objects:
 17754 ;;		On entry : 3F/0
 17755 ;;		On exit  : 3F/0
 17756 ;;		Unchanged: 0/0
 17757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17758 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17759 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17760 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17761 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17762 ;;Total ram usage:       12 bytes
 17763 ;; Hardware stack levels used:    1
 17764 ;; Hardware stack levels required when called:   16
 17765 ;; This function calls:
 17766 ;;		_dir_next
 17767 ;;		_dir_sdi
 17768 ;;		_move_window
 17769 ;; This function is called by:
 17770 ;;		_dir_register
 17771 ;; This function uses a non-reentrant model
 17772 ;;
 17773                           
 17774                           	psect	text61
 17775  00BA4E                     __ptext61:
 17776                           	callstack 0
 17777  00BA4E                     _dir_alloc:
 17778                           	callstack 11
 17779                           
 17780                           ; BSR set to: 0
 17781                           ;ff.c: 1788: FRESULT res;;ff.c: 1789: UINT n;;ff.c: 1790: FATFS *fs = dp->obj.fs;
 17782                           
 17783                           ;incstack = 0
 17784  00BA4E  C0F3  FFD9         	movff	dir_alloc@dp,fsr2l
 17785  00BA52  C0F4  FFDA         	movff	dir_alloc@dp+1,fsr2h
 17786  00BA56  CFDE F0FA          	movff	postinc2,dir_alloc@fs
 17787  00BA5A  CFDD F0FB          	movff	postdec2,dir_alloc@fs+1
 17788                           
 17789                           ; BSR set to: 0
 17790                           ;ff.c: 1793: res = dir_sdi(dp, 0);
 17791  00BA5E  C0F3  F0B2         	movff	dir_alloc@dp,dir_sdi@dp
 17792  00BA62  C0F4  F0B3         	movff	dir_alloc@dp+1,dir_sdi@dp+1
 17793  00BA66  0E00               	movlw	0
 17794  00BA68  6FB4               	movwf	dir_sdi@ofs& (0+255),b
 17795  00BA6A  0E00               	movlw	0
 17796  00BA6C  6FB5               	movwf	(dir_sdi@ofs+1)& (0+255),b
 17797  00BA6E  0E00               	movlw	0
 17798  00BA70  6FB6               	movwf	(dir_sdi@ofs+2)& (0+255),b
 17799  00BA72  0E00               	movlw	0
 17800  00BA74  6FB7               	movwf	(dir_sdi@ofs+3)& (0+255),b
 17801  00BA76  ECBA  F040         	call	_dir_sdi	;wreg free
 17802  00BA7A  6FFE               	movwf	dir_alloc@res& (0+255),b
 17803                           
 17804                           ; BSR set to: 0
 17805                           ;ff.c: 1794: if (res == FR_OK) {
 17806  00BA7C  51FE               	movf	dir_alloc@res& (0+255),w,b
 17807  00BA7E  A4D8               	btfss	status,2,c
 17808  00BA80  D05B               	goto	u24310
 17809                           
 17810                           ; BSR set to: 0
 17811                           ;ff.c: 1795: n = 0;
 17812  00BA82  0E00               	movlw	0
 17813  00BA84  6FFD               	movwf	(dir_alloc@n+1)& (0+255),b
 17814  00BA86  0E00               	movlw	0
 17815  00BA88  6FFC               	movwf	dir_alloc@n& (0+255),b
 17816  00BA8A                     l21885:
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;ff.c: 1797: res = move_window(fs, dp->sect);
 17820  00BA8A  C0FA  F08C         	movff	dir_alloc@fs,move_window@fs
 17821  00BA8E  C0FB  F08D         	movff	dir_alloc@fs+1,move_window@fs+1
 17822  00BA92  EE20 F016          	lfsr	2,22
 17823  00BA96  51F3               	movf	dir_alloc@dp& (0+255),w,b
 17824  00BA98  26D9               	addwf	fsr2l,f,c
 17825  00BA9A  51F4               	movf	(dir_alloc@dp+1)& (0+255),w,b
 17826  00BA9C  22DA               	addwfc	fsr2h,f,c
 17827  00BA9E  CFDE F08E          	movff	postinc2,move_window@sector
 17828  00BAA2  CFDE F08F          	movff	postinc2,move_window@sector+1
 17829  00BAA6  CFDE F090          	movff	postinc2,move_window@sector+2
 17830  00BAAA  CFDE F091          	movff	postinc2,move_window@sector+3
 17831  00BAAE  EC1B  F067         	call	_move_window	;wreg free
 17832  00BAB2  6FFE               	movwf	dir_alloc@res& (0+255),b
 17833                           
 17834                           ; BSR set to: 0
 17835                           ;ff.c: 1798: if (res != FR_OK) break;
 17836  00BAB4  51FE               	movf	dir_alloc@res& (0+255),w,b
 17837  00BAB6  A4D8               	btfss	status,2,c
 17838  00BAB8  D03F               	goto	u24310
 17839                           
 17840                           ; BSR set to: 0
 17841                           ;ff.c: 1802: if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
 17842  00BABA  EE20 F01A          	lfsr	2,26
 17843  00BABE  51F3               	movf	dir_alloc@dp& (0+255),w,b
 17844  00BAC0  26D9               	addwf	fsr2l,f,c
 17845  00BAC2  51F4               	movf	(dir_alloc@dp+1)& (0+255),w,b
 17846  00BAC4  22DA               	addwfc	fsr2h,f,c
 17847  00BAC6  CFDE F0F7          	movff	postinc2,??_dir_alloc
 17848  00BACA  CFDD F0F8          	movff	postdec2,??_dir_alloc+1
 17849  00BACE  C0F7  FFD9         	movff	??_dir_alloc,fsr2l
 17850  00BAD2  C0F8  FFDA         	movff	??_dir_alloc+1,fsr2h
 17851  00BAD6  0EE5               	movlw	229
 17852  00BAD8  18DE               	xorwf	postinc2,w,c
 17853  00BADA  B4D8               	btfsc	status,2,c
 17854  00BADC  D011               	goto	u24290
 17855                           
 17856                           ; BSR set to: 0
 17857  00BADE  EE20 F01A          	lfsr	2,26
 17858  00BAE2  51F3               	movf	dir_alloc@dp& (0+255),w,b
 17859  00BAE4  26D9               	addwf	fsr2l,f,c
 17860  00BAE6  51F4               	movf	(dir_alloc@dp+1)& (0+255),w,b
 17861  00BAE8  22DA               	addwfc	fsr2h,f,c
 17862  00BAEA  CFDE F0F7          	movff	postinc2,??_dir_alloc
 17863  00BAEE  CFDD F0F8          	movff	postdec2,??_dir_alloc+1
 17864  00BAF2  C0F7  FFD9         	movff	??_dir_alloc,fsr2l
 17865  00BAF6  C0F8  FFDA         	movff	??_dir_alloc+1,fsr2h
 17866  00BAFA  50DF               	movf	indf2,w,c
 17867  00BAFC  A4D8               	btfss	status,2,c
 17868  00BAFE  D00A               	goto	l21899
 17869  00BB00                     u24290:
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;ff.c: 1804: if (++n == nent) break;
 17873  00BB00  4BFC               	infsnz	dir_alloc@n& (0+255),f,b
 17874  00BB02  2BFD               	incf	(dir_alloc@n+1)& (0+255),f,b
 17875  00BB04  51F5               	movf	dir_alloc@nent& (0+255),w,b
 17876  00BB06  19FC               	xorwf	dir_alloc@n& (0+255),w,b
 17877  00BB08  E109               	bnz	l21901
 17878  00BB0A  51F6               	movf	(dir_alloc@nent+1)& (0+255),w,b
 17879  00BB0C  19FD               	xorwf	(dir_alloc@n+1)& (0+255),w,b
 17880  00BB0E  B4D8               	btfsc	status,2,c
 17881  00BB10  D013               	goto	u24310
 17882  00BB12  D004               	goto	l21901
 17883  00BB14                     l21899:
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;ff.c: 1806: n = 0;
 17887  00BB14  0E00               	movlw	0
 17888  00BB16  6FFD               	movwf	(dir_alloc@n+1)& (0+255),b
 17889  00BB18  0E00               	movlw	0
 17890  00BB1A  6FFC               	movwf	dir_alloc@n& (0+255),b
 17891  00BB1C                     l21901:
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;ff.c: 1807: };ff.c: 1808: res = dir_next(dp, 1);
 17895  00BB1C  C0F3  F0D5         	movff	dir_alloc@dp,dir_next@dp
 17896  00BB20  C0F4  F0D6         	movff	dir_alloc@dp+1,dir_next@dp+1
 17897  00BB24  0E00               	movlw	0
 17898  00BB26  6FD8               	movwf	(dir_next@stretch+1)& (0+255),b
 17899  00BB28  0E01               	movlw	1
 17900  00BB2A  6FD7               	movwf	dir_next@stretch& (0+255),b
 17901  00BB2C  ECAC  F038         	call	_dir_next	;wreg free
 17902  00BB30  6FFE               	movwf	dir_alloc@res& (0+255),b
 17903                           
 17904                           ; BSR set to: 0
 17905                           ;ff.c: 1809: } while (res == FR_OK);
 17906  00BB32  51FE               	movf	dir_alloc@res& (0+255),w,b
 17907  00BB34  B4D8               	btfsc	status,2,c
 17908  00BB36  D7A9               	goto	l21885
 17909  00BB38                     u24310:
 17910                           
 17911                           ; BSR set to: 0
 17912                           ;ff.c: 1810: };ff.c: 1812: if (res == FR_NO_FILE) res = FR_DENIED;
 17913  00BB38  0E04               	movlw	4
 17914  00BB3A  19FE               	xorwf	dir_alloc@res& (0+255),w,b
 17915  00BB3C  A4D8               	btfss	status,2,c
 17916  00BB3E  D002               	goto	l439
 17917                           
 17918                           ; BSR set to: 0
 17919  00BB40  0E07               	movlw	7
 17920  00BB42  6FFE               	movwf	dir_alloc@res& (0+255),b
 17921  00BB44                     l439:
 17922                           
 17923                           ; BSR set to: 0
 17924                           ;ff.c: 1813: return res;
 17925  00BB44  51FE               	movf	dir_alloc@res& (0+255),w,b
 17926                           
 17927                           ; BSR set to: 0
 17928  00BB46  0012               	return		;funcret
 17929  00BB48                     __end_of_dir_alloc:
 17930                           	callstack 0
 17931                           
 17932 ;; *************** function _dir_sdi *****************
 17933 ;; Defined at:
 17934 ;;		line 1675 in file "mcc_generated_files/fatfs/ff.c"
 17935 ;; Parameters:    Size  Location     Type
 17936 ;;  dp              2   82[BANK0 ] PTR struct .
 17937 ;;		 -> f_open@dj(40), 
 17938 ;;  ofs             4   84[BANK0 ] unsigned long 
 17939 ;; Auto vars:     Size  Location     Type
 17940 ;;  clst            4  106[BANK0 ] unsigned long 
 17941 ;;  csz             4  102[BANK0 ] unsigned long 
 17942 ;;  fs              2  110[BANK0 ] PTR struct .
 17943 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 17944 ;; Return value:  Size  Location     Type
 17945 ;;                  1    wreg      enum E64
 17946 ;; Registers used:
 17947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 17948 ;; Tracked objects:
 17949 ;;		On entry : 3F/0
 17950 ;;		On exit  : 3F/0
 17951 ;;		Unchanged: 0/0
 17952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17953 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17955 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17956 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17957 ;;Total ram usage:       30 bytes
 17958 ;; Hardware stack levels used:    1
 17959 ;; Hardware stack levels required when called:   14
 17960 ;; This function calls:
 17961 ;;		_clst2sect
 17962 ;;		_get_fat
 17963 ;; This function is called by:
 17964 ;;		_dir_alloc
 17965 ;;		_dir_find
 17966 ;;		_follow_path
 17967 ;; This function uses a non-reentrant model
 17968 ;;
 17969                           
 17970                           	psect	text62
 17971  008174                     __ptext62:
 17972                           	callstack 0
 17973  008174                     _dir_sdi:
 17974                           	callstack 13
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;ff.c: 1680: DWORD csz, clst;;ff.c: 1681: FATFS *fs = dp->obj.fs;
 17978                           
 17979                           ; BSR set to: 0
 17980                           ;incstack = 0
 17981  008174  C0B2  FFD9         	movff	dir_sdi@dp,fsr2l
 17982  008178  C0B3  FFDA         	movff	dir_sdi@dp+1,fsr2h
 17983  00817C  CFDE F0CE          	movff	postinc2,dir_sdi@fs
 17984  008180  CFDD F0CF          	movff	postdec2,dir_sdi@fs+1
 17985                           
 17986                           ; BSR set to: 0
 17987                           
 17988                           ; BSR set to: 0
 17989                           
 17990                           ;ff.c: 1684: if (ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000) || ofs 
      +                          % 32) {
 17991  008184  51B7               	movf	(dir_sdi@ofs+3)& (0+255),w,b
 17992  008186  E10A               	bnz	l20973
 17993  008188  0E20               	movlw	32
 17994  00818A  5DB6               	subwf	(dir_sdi@ofs+2)& (0+255),w,b
 17995  00818C  B0D8               	btfsc	status,0,c
 17996  00818E  D006               	goto	u23050
 17997                           
 17998                           ; BSR set to: 0
 17999  008190  C0B4  F0B8         	movff	dir_sdi@ofs,??_dir_sdi
 18000  008194  0E1F               	movlw	31
 18001  008196  17B8               	andwf	??_dir_sdi& (0+255),f,b
 18002  008198  B4D8               	btfsc	status,2,c
 18003  00819A  D002               	goto	l20977
 18004  00819C                     u23050:
 18005  00819C                     l20973:
 18006                           
 18007                           ; BSR set to: 0
 18008                           ;ff.c: 1685: return FR_INT_ERR;
 18009  00819C  0E02               	movlw	2
 18010  00819E  0012               	return	
 18011  0081A0                     l20977:
 18012                           
 18013                           ; BSR set to: 0
 18014                           ;ff.c: 1686: };ff.c: 1687: dp->dptr = ofs;
 18015  0081A0  EE20 F00E          	lfsr	2,14
 18016  0081A4  51B2               	movf	dir_sdi@dp& (0+255),w,b
 18017  0081A6  26D9               	addwf	fsr2l,f,c
 18018  0081A8  51B3               	movf	(dir_sdi@dp+1)& (0+255),w,b
 18019  0081AA  22DA               	addwfc	fsr2h,f,c
 18020  0081AC  C0B4  FFDE         	movff	dir_sdi@ofs,postinc2
 18021  0081B0  C0B5  FFDE         	movff	dir_sdi@ofs+1,postinc2
 18022  0081B4  C0B6  FFDE         	movff	dir_sdi@ofs+2,postinc2
 18023  0081B8  C0B7  FFDE         	movff	dir_sdi@ofs+3,postinc2
 18024                           
 18025                           ;ff.c: 1688: clst = dp->obj.sclust;
 18026  0081BC  EE20 F006          	lfsr	2,6
 18027  0081C0  51B2               	movf	dir_sdi@dp& (0+255),w,b
 18028  0081C2  26D9               	addwf	fsr2l,f,c
 18029  0081C4  51B3               	movf	(dir_sdi@dp+1)& (0+255),w,b
 18030  0081C6  22DA               	addwfc	fsr2h,f,c
 18031  0081C8  CFDE F0CA          	movff	postinc2,dir_sdi@clst
 18032  0081CC  CFDE F0CB          	movff	postinc2,dir_sdi@clst+1
 18033  0081D0  CFDE F0CC          	movff	postinc2,dir_sdi@clst+2
 18034  0081D4  CFDE F0CD          	movff	postinc2,dir_sdi@clst+3
 18035                           
 18036                           ; BSR set to: 0
 18037                           ;ff.c: 1689: if (clst == 0 && fs->fs_type >= 3) {
 18038  0081D8  51CA               	movf	dir_sdi@clst& (0+255),w,b
 18039  0081DA  11CB               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
 18040  0081DC  11CC               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
 18041  0081DE  11CD               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
 18042  0081E0  A4D8               	btfss	status,2,c
 18043  0081E2  D015               	goto	l20987
 18044                           
 18045                           ; BSR set to: 0
 18046  0081E4  C0CE  FFD9         	movff	dir_sdi@fs,fsr2l
 18047  0081E8  C0CF  FFDA         	movff	dir_sdi@fs+1,fsr2h
 18048  0081EC  0E02               	movlw	2
 18049  0081EE  64DF               	cpfsgt	indf2,c
 18050  0081F0  D00E               	goto	l20987
 18051                           
 18052                           ; BSR set to: 0
 18053                           ;ff.c: 1690: clst = fs->dirbase;
 18054  0081F2  EE20 F023          	lfsr	2,35
 18055  0081F6  51CE               	movf	dir_sdi@fs& (0+255),w,b
 18056  0081F8  26D9               	addwf	fsr2l,f,c
 18057  0081FA  51CF               	movf	(dir_sdi@fs+1)& (0+255),w,b
 18058  0081FC  22DA               	addwfc	fsr2h,f,c
 18059  0081FE  CFDE F0CA          	movff	postinc2,dir_sdi@clst
 18060  008202  CFDE F0CB          	movff	postinc2,dir_sdi@clst+1
 18061  008206  CFDE F0CC          	movff	postinc2,dir_sdi@clst+2
 18062  00820A  CFDE F0CD          	movff	postinc2,dir_sdi@clst+3
 18063  00820E                     l20987:
 18064                           
 18065                           ; BSR set to: 0
 18066                           ;ff.c: 1692: };ff.c: 1694: if (clst == 0) {
 18067  00820E  51CA               	movf	dir_sdi@clst& (0+255),w,b
 18068  008210  11CB               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
 18069  008212  11CC               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
 18070  008214  11CD               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
 18071  008216  A4D8               	btfss	status,2,c
 18072  008218  D040               	goto	l20997
 18073                           
 18074                           ; BSR set to: 0
 18075                           ;ff.c: 1695: if (ofs / 32 >= fs->n_rootdir) return FR_INT_ERR;
 18076  00821A  EE20 F007          	lfsr	2,7
 18077  00821E  51CE               	movf	dir_sdi@fs& (0+255),w,b
 18078  008220  26D9               	addwf	fsr2l,f,c
 18079  008222  51CF               	movf	(dir_sdi@fs+1)& (0+255),w,b
 18080  008224  22DA               	addwfc	fsr2h,f,c
 18081  008226  CFDE F0B8          	movff	postinc2,??_dir_sdi
 18082  00822A  CFDD F0B9          	movff	postdec2,??_dir_sdi+1
 18083  00822E  51B8               	movf	??_dir_sdi& (0+255),w,b
 18084  008230  6FBA               	movwf	(??_dir_sdi+2)& (0+255),b
 18085  008232  51B9               	movf	(??_dir_sdi+1)& (0+255),w,b
 18086  008234  6FBB               	movwf	(??_dir_sdi+3)& (0+255),b
 18087  008236  6BBC               	clrf	(??_dir_sdi+4)& (0+255),b
 18088  008238  6BBD               	clrf	(??_dir_sdi+5)& (0+255),b
 18089  00823A  C0B4  F0BE         	movff	dir_sdi@ofs,??_dir_sdi+6
 18090  00823E  C0B5  F0BF         	movff	dir_sdi@ofs+1,??_dir_sdi+7
 18091  008242  C0B6  F0C0         	movff	dir_sdi@ofs+2,??_dir_sdi+8
 18092  008246  C0B7  F0C1         	movff	dir_sdi@ofs+3,??_dir_sdi+9
 18093  00824A  0E06               	movlw	6
 18094  00824C  D005               	goto	u23090
 18095  00824E                     u23095:
 18096  00824E  90D8               	bcf	status,0,c
 18097  008250  33C1               	rrcf	(??_dir_sdi+9)& (0+255),f,b
 18098  008252  33C0               	rrcf	(??_dir_sdi+8)& (0+255),f,b
 18099  008254  33BF               	rrcf	(??_dir_sdi+7)& (0+255),f,b
 18100  008256  33BE               	rrcf	(??_dir_sdi+6)& (0+255),f,b
 18101  008258                     u23090:
 18102  008258  2EE8               	decfsz	wreg,f,c
 18103  00825A  D7F9               	goto	u23095
 18104  00825C  51BA               	movf	(??_dir_sdi+2)& (0+255),w,b
 18105  00825E  5DBE               	subwf	(??_dir_sdi+6)& (0+255),w,b
 18106  008260  51BB               	movf	(??_dir_sdi+3)& (0+255),w,b
 18107  008262  59BF               	subwfb	(??_dir_sdi+7)& (0+255),w,b
 18108  008264  51BC               	movf	(??_dir_sdi+4)& (0+255),w,b
 18109  008266  59C0               	subwfb	(??_dir_sdi+8)& (0+255),w,b
 18110  008268  51BD               	movf	(??_dir_sdi+5)& (0+255),w,b
 18111  00826A  59C1               	subwfb	(??_dir_sdi+9)& (0+255),w,b
 18112  00826C  B0D8               	btfsc	status,0,c
 18113  00826E  D796               	goto	u23050
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;ff.c: 1696: dp->sect = fs->dirbase;
 18117  008270  EE20 F023          	lfsr	2,35
 18118  008274  51CE               	movf	dir_sdi@fs& (0+255),w,b
 18119  008276  26D9               	addwf	fsr2l,f,c
 18120  008278  51CF               	movf	(dir_sdi@fs+1)& (0+255),w,b
 18121  00827A  22DA               	addwfc	fsr2h,f,c
 18122  00827C  EE10 F016          	lfsr	1,22
 18123  008280  51B2               	movf	dir_sdi@dp& (0+255),w,b
 18124  008282  26E1               	addwf	fsr1l,f,c
 18125  008284  51B3               	movf	(dir_sdi@dp+1)& (0+255),w,b
 18126  008286  22E2               	addwfc	fsr1h,f,c
 18127  008288  CFDE FFE6          	movff	postinc2,postinc1
 18128  00828C  CFDE FFE6          	movff	postinc2,postinc1
 18129  008290  CFDE FFE6          	movff	postinc2,postinc1
 18130  008294  CFDE FFE6          	movff	postinc2,postinc1
 18131                           
 18132                           ;ff.c: 1698: } else {
 18133  008298  D089               	goto	l21019
 18134  00829A                     l20997:
 18135                           
 18136                           ; BSR set to: 0
 18137                           ;ff.c: 1699: csz = (DWORD)fs->csize * ((UINT)512);
 18138  00829A  EE20 F009          	lfsr	2,9
 18139  00829E  51CE               	movf	dir_sdi@fs& (0+255),w,b
 18140  0082A0  26D9               	addwf	fsr2l,f,c
 18141  0082A2  51CF               	movf	(dir_sdi@fs+1)& (0+255),w,b
 18142  0082A4  22DA               	addwfc	fsr2h,f,c
 18143  0082A6  CFDE F0B8          	movff	postinc2,??_dir_sdi
 18144  0082AA  CFDD F0B9          	movff	postdec2,??_dir_sdi+1
 18145  0082AE  51B8               	movf	??_dir_sdi& (0+255),w,b
 18146  0082B0  6FBA               	movwf	(??_dir_sdi+2)& (0+255),b
 18147  0082B2  51B9               	movf	(??_dir_sdi+1)& (0+255),w,b
 18148  0082B4  6FBB               	movwf	(??_dir_sdi+3)& (0+255),b
 18149  0082B6  6BBC               	clrf	(??_dir_sdi+4)& (0+255),b
 18150  0082B8  6BBD               	clrf	(??_dir_sdi+5)& (0+255),b
 18151  0082BA  0E09               	movlw	9
 18152  0082BC                     u23115:
 18153  0082BC  90D8               	bcf	status,0,c
 18154  0082BE  37BA               	rlcf	(??_dir_sdi+2)& (0+255),f,b
 18155  0082C0  37BB               	rlcf	(??_dir_sdi+3)& (0+255),f,b
 18156  0082C2  37BC               	rlcf	(??_dir_sdi+4)& (0+255),f,b
 18157  0082C4  37BD               	rlcf	(??_dir_sdi+5)& (0+255),f,b
 18158  0082C6  2EE8               	decfsz	wreg,f,c
 18159  0082C8  D7F9               	goto	u23115
 18160  0082CA  C0BA  F0C6         	movff	??_dir_sdi+2,dir_sdi@csz
 18161  0082CE  C0BB  F0C7         	movff	??_dir_sdi+3,dir_sdi@csz+1
 18162  0082D2  C0BC  F0C8         	movff	??_dir_sdi+4,dir_sdi@csz+2
 18163  0082D6  C0BD  F0C9         	movff	??_dir_sdi+5,dir_sdi@csz+3
 18164                           
 18165                           ;ff.c: 1700: while (ofs >= csz) {
 18166  0082DA  D041               	goto	l394
 18167  0082DC                     l20999:
 18168                           
 18169                           ; BSR set to: 0
 18170                           ;ff.c: 1701: clst = get_fat(&dp->obj, clst);
 18171  0082DC  C0B2  F097         	movff	dir_sdi@dp,get_fat@obj
 18172  0082E0  C0B3  F098         	movff	dir_sdi@dp+1,get_fat@obj+1
 18173  0082E4  C0CA  F099         	movff	dir_sdi@clst,get_fat@clst
 18174  0082E8  C0CB  F09A         	movff	dir_sdi@clst+1,get_fat@clst+1
 18175  0082EC  C0CC  F09B         	movff	dir_sdi@clst+2,get_fat@clst+2
 18176  0082F0  C0CD  F09C         	movff	dir_sdi@clst+3,get_fat@clst+3
 18177  0082F4  EC6C  F033         	call	_get_fat	;wreg free
 18178  0082F8  C097  F0CA         	movff	?_get_fat,dir_sdi@clst
 18179  0082FC  C098  F0CB         	movff	?_get_fat+1,dir_sdi@clst+1
 18180  008300  C099  F0CC         	movff	?_get_fat+2,dir_sdi@clst+2
 18181  008304  C09A  F0CD         	movff	?_get_fat+3,dir_sdi@clst+3
 18182                           
 18183                           ; BSR set to: 0
 18184                           ;ff.c: 1702: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 18185  008308  29CA               	incf	dir_sdi@clst& (0+255),w,b
 18186  00830A  E109               	bnz	l21007
 18187  00830C  29CB               	incf	(dir_sdi@clst+1)& (0+255),w,b
 18188  00830E  E107               	bnz	l21007
 18189  008310  29CC               	incf	(dir_sdi@clst+2)& (0+255),w,b
 18190  008312  E105               	bnz	l21007
 18191  008314  29CD               	incf	(dir_sdi@clst+3)& (0+255),w,b
 18192  008316  A4D8               	btfss	status,2,c
 18193  008318  D002               	goto	l21007
 18194                           
 18195                           ; BSR set to: 0
 18196  00831A  0E01               	movlw	1
 18197  00831C  0012               	return	
 18198  00831E                     l21007:
 18199                           
 18200                           ; BSR set to: 0
 18201                           ;ff.c: 1703: if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
 18202  00831E  51CD               	movf	(dir_sdi@clst+3)& (0+255),w,b
 18203  008320  11CC               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
 18204  008322  11CB               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
 18205  008324  E104               	bnz	u23130
 18206  008326  0E02               	movlw	2
 18207  008328  5DCA               	subwf	dir_sdi@clst& (0+255),w,b
 18208  00832A  A0D8               	btfss	status,0,c
 18209  00832C  D737               	goto	u23050
 18210  00832E                     u23130:
 18211                           
 18212                           ; BSR set to: 0
 18213  00832E  EE20 F013          	lfsr	2,19
 18214  008332  51CE               	movf	dir_sdi@fs& (0+255),w,b
 18215  008334  26D9               	addwf	fsr2l,f,c
 18216  008336  51CF               	movf	(dir_sdi@fs+1)& (0+255),w,b
 18217  008338  22DA               	addwfc	fsr2h,f,c
 18218  00833A  50DE               	movf	postinc2,w,c
 18219  00833C  5DCA               	subwf	dir_sdi@clst& (0+255),w,b
 18220  00833E  50DE               	movf	postinc2,w,c
 18221  008340  59CB               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
 18222  008342  50DE               	movf	postinc2,w,c
 18223  008344  59CC               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
 18224  008346  50DE               	movf	postinc2,w,c
 18225  008348  59CD               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
 18226  00834A  B0D8               	btfsc	status,0,c
 18227  00834C  D727               	goto	u23050
 18228                           
 18229                           ; BSR set to: 0
 18230                           ;ff.c: 1704: ofs -= csz;
 18231  00834E  51C6               	movf	dir_sdi@csz& (0+255),w,b
 18232  008350  5FB4               	subwf	dir_sdi@ofs& (0+255),f,b
 18233  008352  51C7               	movf	(dir_sdi@csz+1)& (0+255),w,b
 18234  008354  5BB5               	subwfb	(dir_sdi@ofs+1)& (0+255),f,b
 18235  008356  51C8               	movf	(dir_sdi@csz+2)& (0+255),w,b
 18236  008358  5BB6               	subwfb	(dir_sdi@ofs+2)& (0+255),f,b
 18237  00835A  51C9               	movf	(dir_sdi@csz+3)& (0+255),w,b
 18238  00835C  5BB7               	subwfb	(dir_sdi@ofs+3)& (0+255),f,b
 18239  00835E                     l394:
 18240                           
 18241                           ; BSR set to: 0
 18242  00835E  51C6               	movf	dir_sdi@csz& (0+255),w,b
 18243  008360  5DB4               	subwf	dir_sdi@ofs& (0+255),w,b
 18244  008362  51C7               	movf	(dir_sdi@csz+1)& (0+255),w,b
 18245  008364  59B5               	subwfb	(dir_sdi@ofs+1)& (0+255),w,b
 18246  008366  51C8               	movf	(dir_sdi@csz+2)& (0+255),w,b
 18247  008368  59B6               	subwfb	(dir_sdi@ofs+2)& (0+255),w,b
 18248  00836A  51C9               	movf	(dir_sdi@csz+3)& (0+255),w,b
 18249  00836C  59B7               	subwfb	(dir_sdi@ofs+3)& (0+255),w,b
 18250  00836E  B0D8               	btfsc	status,0,c
 18251  008370  D7B5               	goto	l20999
 18252                           
 18253                           ; BSR set to: 0
 18254                           ;ff.c: 1705: };ff.c: 1706: dp->sect = clst2sect(fs, clst);
 18255  008372  C0CE  F01A         	movff	dir_sdi@fs,clst2sect@fs
 18256  008376  C0CF  F01B         	movff	dir_sdi@fs+1,clst2sect@fs+1
 18257  00837A  C0CA  F01C         	movff	dir_sdi@clst,clst2sect@clst
 18258  00837E  C0CB  F01D         	movff	dir_sdi@clst+1,clst2sect@clst+1
 18259  008382  C0CC  F01E         	movff	dir_sdi@clst+2,clst2sect@clst+2
 18260  008386  C0CD  F01F         	movff	dir_sdi@clst+3,clst2sect@clst+3
 18261  00838A  EC94  F064         	call	_clst2sect	;wreg free
 18262  00838E  0100               	movlb	0	; () banked
 18263  008390  EE20 F016          	lfsr	2,22
 18264  008394  51B2               	movf	dir_sdi@dp& (0+255),w,b
 18265  008396  26D9               	addwf	fsr2l,f,c
 18266  008398  51B3               	movf	(dir_sdi@dp+1)& (0+255),w,b
 18267  00839A  22DA               	addwfc	fsr2h,f,c
 18268  00839C  C01A  FFDE         	movff	?_clst2sect,postinc2
 18269  0083A0  C01B  FFDE         	movff	?_clst2sect+1,postinc2
 18270  0083A4  C01C  FFDE         	movff	?_clst2sect+2,postinc2
 18271  0083A8  C01D  FFDE         	movff	?_clst2sect+3,postinc2
 18272  0083AC                     l21019:
 18273                           
 18274                           ; BSR set to: 0
 18275                           ;ff.c: 1707: };ff.c: 1708: dp->clust = clst;
 18276  0083AC  EE20 F012          	lfsr	2,18
 18277  0083B0  51B2               	movf	dir_sdi@dp& (0+255),w,b
 18278  0083B2  26D9               	addwf	fsr2l,f,c
 18279  0083B4  51B3               	movf	(dir_sdi@dp+1)& (0+255),w,b
 18280  0083B6  22DA               	addwfc	fsr2h,f,c
 18281  0083B8  C0CA  FFDE         	movff	dir_sdi@clst,postinc2
 18282  0083BC  C0CB  FFDE         	movff	dir_sdi@clst+1,postinc2
 18283  0083C0  C0CC  FFDE         	movff	dir_sdi@clst+2,postinc2
 18284  0083C4  C0CD  FFDE         	movff	dir_sdi@clst+3,postinc2
 18285                           
 18286                           ; BSR set to: 0
 18287                           ;ff.c: 1709: if (dp->sect == 0) return FR_INT_ERR;
 18288  0083C8  EE20 F016          	lfsr	2,22
 18289  0083CC  51B2               	movf	dir_sdi@dp& (0+255),w,b
 18290  0083CE  26D9               	addwf	fsr2l,f,c
 18291  0083D0  51B3               	movf	(dir_sdi@dp+1)& (0+255),w,b
 18292  0083D2  22DA               	addwfc	fsr2h,f,c
 18293  0083D4  50DE               	movf	postinc2,w,c
 18294  0083D6  10DE               	iorwf	postinc2,w,c
 18295  0083D8  10DE               	iorwf	postinc2,w,c
 18296  0083DA  10DE               	iorwf	postinc2,w,c
 18297  0083DC  B4D8               	btfsc	status,2,c
 18298  0083DE  D6DE               	goto	u23050
 18299                           
 18300                           ; BSR set to: 0
 18301                           ;ff.c: 1710: dp->sect += ofs / ((UINT)512);
 18302  0083E0  C0B4  F0B8         	movff	dir_sdi@ofs,??_dir_sdi
 18303  0083E4  C0B5  F0B9         	movff	dir_sdi@ofs+1,??_dir_sdi+1
 18304  0083E8  C0B6  F0BA         	movff	dir_sdi@ofs+2,??_dir_sdi+2
 18305  0083EC  C0B7  F0BB         	movff	dir_sdi@ofs+3,??_dir_sdi+3
 18306  0083F0  0E0A               	movlw	10
 18307  0083F2  D005               	goto	u23170
 18308  0083F4                     u23175:
 18309  0083F4  90D8               	bcf	status,0,c
 18310  0083F6  33BB               	rrcf	(??_dir_sdi+3)& (0+255),f,b
 18311  0083F8  33BA               	rrcf	(??_dir_sdi+2)& (0+255),f,b
 18312  0083FA  33B9               	rrcf	(??_dir_sdi+1)& (0+255),f,b
 18313  0083FC  33B8               	rrcf	??_dir_sdi& (0+255),f,b
 18314  0083FE                     u23170:
 18315  0083FE  2EE8               	decfsz	wreg,f,c
 18316  008400  D7F9               	goto	u23175
 18317  008402  EE20 F016          	lfsr	2,22
 18318  008406  51B2               	movf	dir_sdi@dp& (0+255),w,b
 18319  008408  26D9               	addwf	fsr2l,f,c
 18320  00840A  51B3               	movf	(dir_sdi@dp+1)& (0+255),w,b
 18321  00840C  22DA               	addwfc	fsr2h,f,c
 18322  00840E  51B8               	movf	??_dir_sdi& (0+255),w,b
 18323  008410  26DE               	addwf	postinc2,f,c
 18324  008412  51B9               	movf	(??_dir_sdi+1)& (0+255),w,b
 18325  008414  22DE               	addwfc	postinc2,f,c
 18326  008416  51BA               	movf	(??_dir_sdi+2)& (0+255),w,b
 18327  008418  22DE               	addwfc	postinc2,f,c
 18328  00841A  51BB               	movf	(??_dir_sdi+3)& (0+255),w,b
 18329  00841C  22DE               	addwfc	postinc2,f,c
 18330                           
 18331                           ;ff.c: 1711: dp->dir = fs->win + (ofs % ((UINT)512));
 18332  00841E  0EFF               	movlw	255
 18333  008420  6FB8               	movwf	??_dir_sdi& (0+255),b
 18334  008422  0E01               	movlw	1
 18335  008424  6FB9               	movwf	(??_dir_sdi+1)& (0+255),b
 18336  008426  C0B4  F0BA         	movff	dir_sdi@ofs,??_dir_sdi+2
 18337  00842A  C0B5  F0BB         	movff	dir_sdi@ofs+1,??_dir_sdi+3
 18338  00842E  51B8               	movf	??_dir_sdi& (0+255),w,b
 18339  008430  17BA               	andwf	(??_dir_sdi+2)& (0+255),f,b
 18340  008432  51B9               	movf	(??_dir_sdi+1)& (0+255),w,b
 18341  008434  17BB               	andwf	(??_dir_sdi+3)& (0+255),f,b
 18342  008436  C0CE  F0BC         	movff	dir_sdi@fs,??_dir_sdi+4
 18343  00843A  C0CF  F0BD         	movff	dir_sdi@fs+1,??_dir_sdi+5
 18344  00843E  51BA               	movf	(??_dir_sdi+2)& (0+255),w,b
 18345  008440  27BC               	addwf	(??_dir_sdi+4)& (0+255),f,b
 18346  008442  51BB               	movf	(??_dir_sdi+3)& (0+255),w,b
 18347  008444  23BD               	addwfc	(??_dir_sdi+5)& (0+255),f,b
 18348  008446  0E2F               	movlw	47
 18349  008448  27BC               	addwf	(??_dir_sdi+4)& (0+255),f,b
 18350  00844A  0E00               	movlw	0
 18351  00844C  23BD               	addwfc	(??_dir_sdi+5)& (0+255),f,b
 18352  00844E  EE20 F01A          	lfsr	2,26
 18353  008452  51B2               	movf	dir_sdi@dp& (0+255),w,b
 18354  008454  26D9               	addwf	fsr2l,f,c
 18355  008456  51B3               	movf	(dir_sdi@dp+1)& (0+255),w,b
 18356  008458  22DA               	addwfc	fsr2h,f,c
 18357  00845A  C0BC  FFDE         	movff	??_dir_sdi+4,postinc2
 18358  00845E  C0BD  FFDD         	movff	??_dir_sdi+5,postdec2
 18359                           
 18360                           ; BSR set to: 0
 18361                           ;ff.c: 1713: return FR_OK;
 18362  008462  0E00               	movlw	0
 18363                           
 18364                           ; BSR set to: 0
 18365  008464  0012               	return		;funcret
 18366  008466                     __end_of_dir_sdi:
 18367                           	callstack 0
 18368                           
 18369 ;; *************** function _dir_next *****************
 18370 ;; Defined at:
 18371 ;;		line 1723 in file "mcc_generated_files/fatfs/ff.c"
 18372 ;; Parameters:    Size  Location     Type
 18373 ;;  dp              2  117[BANK0 ] PTR struct .
 18374 ;;		 -> f_open@dj(40), 
 18375 ;;  stretch         2  119[BANK0 ] int 
 18376 ;; Auto vars:     Size  Location     Type
 18377 ;;  clst            4  143[BANK0 ] unsigned long 
 18378 ;;  ofs             4  137[BANK0 ] unsigned long 
 18379 ;;  fs              2  141[BANK0 ] PTR struct .
 18380 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 18381 ;; Return value:  Size  Location     Type
 18382 ;;                  1    wreg      enum E64
 18383 ;; Registers used:
 18384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 18385 ;; Tracked objects:
 18386 ;;		On entry : 3F/0
 18387 ;;		On exit  : 3F/0
 18388 ;;		Unchanged: 0/0
 18389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18391 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18392 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18393 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18394 ;;Total ram usage:       30 bytes
 18395 ;; Hardware stack levels used:    1
 18396 ;; Hardware stack levels required when called:   15
 18397 ;; This function calls:
 18398 ;;		_clst2sect
 18399 ;;		_create_chain
 18400 ;;		_dir_clear
 18401 ;;		_get_fat
 18402 ;; This function is called by:
 18403 ;;		_dir_alloc
 18404 ;;		_dir_find
 18405 ;; This function uses a non-reentrant model
 18406 ;;
 18407                           
 18408                           	psect	text63
 18409  007158                     __ptext63:
 18410                           	callstack 0
 18411  007158                     _dir_next:
 18412                           	callstack 11
 18413                           
 18414                           ; BSR set to: 0
 18415                           ;ff.c: 1728: DWORD ofs, clst;;ff.c: 1729: FATFS *fs = dp->obj.fs;
 18416                           
 18417                           ; BSR set to: 0
 18418                           ;incstack = 0
 18419  007158  C0D5  FFD9         	movff	dir_next@dp,fsr2l
 18420  00715C  C0D6  FFDA         	movff	dir_next@dp+1,fsr2h
 18421  007160  CFDE F0ED          	movff	postinc2,dir_next@fs
 18422  007164  CFDD F0EE          	movff	postdec2,dir_next@fs+1
 18423                           
 18424                           ; BSR set to: 0
 18425                           ;ff.c: 1732: ofs = dp->dptr + 32;
 18426  007168  EE20 F00E          	lfsr	2,14
 18427  00716C  51D5               	movf	dir_next@dp& (0+255),w,b
 18428  00716E  26D9               	addwf	fsr2l,f,c
 18429  007170  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18430  007172  22DA               	addwfc	fsr2h,f,c
 18431  007174  CFDE F0D9          	movff	postinc2,??_dir_next
 18432  007178  CFDE F0DA          	movff	postinc2,??_dir_next+1
 18433  00717C  CFDE F0DB          	movff	postinc2,??_dir_next+2
 18434  007180  CFDE F0DC          	movff	postinc2,??_dir_next+3
 18435  007184  0E20               	movlw	32
 18436  007186  25D9               	addwf	??_dir_next& (0+255),w,b
 18437  007188  6FE9               	movwf	dir_next@ofs& (0+255),b
 18438  00718A  0E00               	movlw	0
 18439  00718C  21DA               	addwfc	(??_dir_next+1)& (0+255),w,b
 18440  00718E  6FEA               	movwf	(dir_next@ofs+1)& (0+255),b
 18441  007190  0E00               	movlw	0
 18442  007192  21DB               	addwfc	(??_dir_next+2)& (0+255),w,b
 18443  007194  6FEB               	movwf	(dir_next@ofs+2)& (0+255),b
 18444  007196  0E00               	movlw	0
 18445  007198  21DC               	addwfc	(??_dir_next+3)& (0+255),w,b
 18446  00719A  6FEC               	movwf	(dir_next@ofs+3)& (0+255),b
 18447                           
 18448                           ; BSR set to: 0
 18449                           ;ff.c: 1733: if (dp->sect == 0 || ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 
      +                          0x200000)) return FR_NO_FILE;
 18450  00719C  EE20 F016          	lfsr	2,22
 18451  0071A0  51D5               	movf	dir_next@dp& (0+255),w,b
 18452  0071A2  26D9               	addwf	fsr2l,f,c
 18453  0071A4  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18454  0071A6  22DA               	addwfc	fsr2h,f,c
 18455  0071A8  50DE               	movf	postinc2,w,c
 18456  0071AA  10DE               	iorwf	postinc2,w,c
 18457  0071AC  10DE               	iorwf	postinc2,w,c
 18458  0071AE  10DE               	iorwf	postinc2,w,c
 18459  0071B0  B4D8               	btfsc	status,2,c
 18460  0071B2  D006               	goto	u23190
 18461                           
 18462                           ; BSR set to: 0
 18463                           
 18464                           ; BSR set to: 0
 18465  0071B4  51EC               	movf	(dir_next@ofs+3)& (0+255),w,b
 18466  0071B6  E104               	bnz	u23190
 18467  0071B8  0E20               	movlw	32
 18468  0071BA  5DEB               	subwf	(dir_next@ofs+2)& (0+255),w,b
 18469  0071BC  A0D8               	btfss	status,0,c
 18470  0071BE  D002               	goto	l21053
 18471  0071C0                     u23190:
 18472                           
 18473                           ; BSR set to: 0
 18474  0071C0  0E04               	movlw	4
 18475  0071C2  0012               	return	
 18476  0071C4                     l21053:
 18477                           
 18478                           ; BSR set to: 0
 18479                           ;ff.c: 1735: if (ofs % ((UINT)512) == 0) {
 18480  0071C4  0EFF               	movlw	255
 18481  0071C6  15E9               	andwf	dir_next@ofs& (0+255),w,b
 18482  0071C8  6FD9               	movwf	??_dir_next& (0+255),b
 18483  0071CA  0E01               	movlw	1
 18484  0071CC  15EA               	andwf	(dir_next@ofs+1)& (0+255),w,b
 18485  0071CE  6FDA               	movwf	(??_dir_next+1)& (0+255),b
 18486  0071D0  0E00               	movlw	0
 18487  0071D2  15EB               	andwf	(dir_next@ofs+2)& (0+255),w,b
 18488  0071D4  6FDB               	movwf	(??_dir_next+2)& (0+255),b
 18489  0071D6  0E00               	movlw	0
 18490  0071D8  15EC               	andwf	(dir_next@ofs+3)& (0+255),w,b
 18491  0071DA  6FDC               	movwf	(??_dir_next+3)& (0+255),b
 18492  0071DC  51D9               	movf	??_dir_next& (0+255),w,b
 18493  0071DE  11DA               	iorwf	(??_dir_next+1)& (0+255),w,b
 18494  0071E0  11DB               	iorwf	(??_dir_next+2)& (0+255),w,b
 18495  0071E2  11DC               	iorwf	(??_dir_next+3)& (0+255),w,b
 18496  0071E4  A4D8               	btfss	status,2,c
 18497  0071E6  D137               	goto	l21121
 18498                           
 18499                           ; BSR set to: 0
 18500                           ;ff.c: 1736: dp->sect++;
 18501  0071E8  EE20 F016          	lfsr	2,22
 18502  0071EC  51D5               	movf	dir_next@dp& (0+255),w,b
 18503  0071EE  26D9               	addwf	fsr2l,f,c
 18504  0071F0  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18505  0071F2  22DA               	addwfc	fsr2h,f,c
 18506  0071F4  2ADE               	incf	postinc2,f,c
 18507  0071F6  0E00               	movlw	0
 18508  0071F8  22DE               	addwfc	postinc2,f,c
 18509  0071FA  22DE               	addwfc	postinc2,f,c
 18510  0071FC  22DE               	addwfc	postinc2,f,c
 18511                           
 18512                           ;ff.c: 1738: if (dp->clust == 0) {
 18513  0071FE  EE20 F012          	lfsr	2,18
 18514  007202  51D5               	movf	dir_next@dp& (0+255),w,b
 18515  007204  26D9               	addwf	fsr2l,f,c
 18516  007206  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18517  007208  22DA               	addwfc	fsr2h,f,c
 18518  00720A  50DE               	movf	postinc2,w,c
 18519  00720C  10DE               	iorwf	postinc2,w,c
 18520  00720E  10DE               	iorwf	postinc2,w,c
 18521  007210  10DE               	iorwf	postinc2,w,c
 18522  007212  A4D8               	btfss	status,2,c
 18523  007214  D02C               	goto	l21065
 18524                           
 18525                           ; BSR set to: 0
 18526                           ;ff.c: 1739: if (ofs / 32 >= fs->n_rootdir) {
 18527  007216  EE20 F007          	lfsr	2,7
 18528  00721A  51ED               	movf	dir_next@fs& (0+255),w,b
 18529  00721C  26D9               	addwf	fsr2l,f,c
 18530  00721E  51EE               	movf	(dir_next@fs+1)& (0+255),w,b
 18531  007220  22DA               	addwfc	fsr2h,f,c
 18532  007222  CFDE F0D9          	movff	postinc2,??_dir_next
 18533  007226  CFDD F0DA          	movff	postdec2,??_dir_next+1
 18534  00722A  51D9               	movf	??_dir_next& (0+255),w,b
 18535  00722C  6FDB               	movwf	(??_dir_next+2)& (0+255),b
 18536  00722E  51DA               	movf	(??_dir_next+1)& (0+255),w,b
 18537  007230  6FDC               	movwf	(??_dir_next+3)& (0+255),b
 18538  007232  6BDD               	clrf	(??_dir_next+4)& (0+255),b
 18539  007234  6BDE               	clrf	(??_dir_next+5)& (0+255),b
 18540  007236  C0E9  F0DF         	movff	dir_next@ofs,??_dir_next+6
 18541  00723A  C0EA  F0E0         	movff	dir_next@ofs+1,??_dir_next+7
 18542  00723E  C0EB  F0E1         	movff	dir_next@ofs+2,??_dir_next+8
 18543  007242  C0EC  F0E2         	movff	dir_next@ofs+3,??_dir_next+9
 18544  007246  0E06               	movlw	6
 18545  007248  D005               	goto	u23220
 18546  00724A                     u23225:
 18547  00724A  90D8               	bcf	status,0,c
 18548  00724C  33E2               	rrcf	(??_dir_next+9)& (0+255),f,b
 18549  00724E  33E1               	rrcf	(??_dir_next+8)& (0+255),f,b
 18550  007250  33E0               	rrcf	(??_dir_next+7)& (0+255),f,b
 18551  007252  33DF               	rrcf	(??_dir_next+6)& (0+255),f,b
 18552  007254                     u23220:
 18553  007254  2EE8               	decfsz	wreg,f,c
 18554  007256  D7F9               	goto	u23225
 18555  007258  51DB               	movf	(??_dir_next+2)& (0+255),w,b
 18556  00725A  5DDF               	subwf	(??_dir_next+6)& (0+255),w,b
 18557  00725C  51DC               	movf	(??_dir_next+3)& (0+255),w,b
 18558  00725E  59E0               	subwfb	(??_dir_next+7)& (0+255),w,b
 18559  007260  51DD               	movf	(??_dir_next+4)& (0+255),w,b
 18560  007262  59E1               	subwfb	(??_dir_next+8)& (0+255),w,b
 18561  007264  51DE               	movf	(??_dir_next+5)& (0+255),w,b
 18562  007266  59E2               	subwfb	(??_dir_next+9)& (0+255),w,b
 18563  007268  A0D8               	btfss	status,0,c
 18564  00726A  D0F5               	goto	l21121
 18565  00726C  D07A               	goto	u23290
 18566  00726E                     l21065:
 18567                           
 18568                           ; BSR set to: 0
 18569                           ;ff.c: 1743: else {;ff.c: 1744: if ((ofs / ((UINT)512) & (fs->csize - 1)) == 0) {
 18570  00726E  0EFF               	movlw	255
 18571  007270  6FD9               	movwf	??_dir_next& (0+255),b
 18572  007272  0EFF               	movlw	255
 18573  007274  6FDA               	movwf	(??_dir_next+1)& (0+255),b
 18574  007276  EE20 F009          	lfsr	2,9
 18575  00727A  51ED               	movf	dir_next@fs& (0+255),w,b
 18576  00727C  26D9               	addwf	fsr2l,f,c
 18577  00727E  51EE               	movf	(dir_next@fs+1)& (0+255),w,b
 18578  007280  22DA               	addwfc	fsr2h,f,c
 18579  007282  CFDE F0DB          	movff	postinc2,??_dir_next+2
 18580  007286  CFDD F0DC          	movff	postdec2,??_dir_next+3
 18581  00728A  51D9               	movf	??_dir_next& (0+255),w,b
 18582  00728C  27DB               	addwf	(??_dir_next+2)& (0+255),f,b
 18583  00728E  51DA               	movf	(??_dir_next+1)& (0+255),w,b
 18584  007290  23DC               	addwfc	(??_dir_next+3)& (0+255),f,b
 18585  007292  C0E9  F0DD         	movff	dir_next@ofs,??_dir_next+4
 18586  007296  C0EA  F0DE         	movff	dir_next@ofs+1,??_dir_next+5
 18587  00729A  C0EB  F0DF         	movff	dir_next@ofs+2,??_dir_next+6
 18588  00729E  C0EC  F0E0         	movff	dir_next@ofs+3,??_dir_next+7
 18589  0072A2  0E0A               	movlw	10
 18590  0072A4  D005               	goto	u23240
 18591  0072A6                     u23245:
 18592  0072A6  90D8               	bcf	status,0,c
 18593  0072A8  33E0               	rrcf	(??_dir_next+7)& (0+255),f,b
 18594  0072AA  33DF               	rrcf	(??_dir_next+6)& (0+255),f,b
 18595  0072AC  33DE               	rrcf	(??_dir_next+5)& (0+255),f,b
 18596  0072AE  33DD               	rrcf	(??_dir_next+4)& (0+255),f,b
 18597  0072B0                     u23240:
 18598  0072B0  2EE8               	decfsz	wreg,f,c
 18599  0072B2  D7F9               	goto	u23245
 18600  0072B4  51DB               	movf	(??_dir_next+2)& (0+255),w,b
 18601  0072B6  15DD               	andwf	(??_dir_next+4)& (0+255),w,b
 18602  0072B8  6FE1               	movwf	(??_dir_next+8)& (0+255),b
 18603  0072BA  51DC               	movf	(??_dir_next+3)& (0+255),w,b
 18604  0072BC  15DE               	andwf	(??_dir_next+5)& (0+255),w,b
 18605  0072BE  6FE2               	movwf	(??_dir_next+9)& (0+255),b
 18606  0072C0  0E00               	movlw	0
 18607  0072C2  15DF               	andwf	(??_dir_next+6)& (0+255),w,b
 18608  0072C4  6FE3               	movwf	(??_dir_next+10)& (0+255),b
 18609  0072C6  0E00               	movlw	0
 18610  0072C8  15E0               	andwf	(??_dir_next+7)& (0+255),w,b
 18611  0072CA  6FE4               	movwf	(??_dir_next+11)& (0+255),b
 18612  0072CC  51E1               	movf	(??_dir_next+8)& (0+255),w,b
 18613  0072CE  11E2               	iorwf	(??_dir_next+9)& (0+255),w,b
 18614  0072D0  11E3               	iorwf	(??_dir_next+10)& (0+255),w,b
 18615  0072D2  11E4               	iorwf	(??_dir_next+11)& (0+255),w,b
 18616  0072D4  A4D8               	btfss	status,2,c
 18617  0072D6  D0BF               	goto	l21121
 18618                           
 18619                           ; BSR set to: 0
 18620                           ;ff.c: 1745: clst = get_fat(&dp->obj, dp->clust);
 18621  0072D8  C0D5  F097         	movff	dir_next@dp,get_fat@obj
 18622  0072DC  C0D6  F098         	movff	dir_next@dp+1,get_fat@obj+1
 18623  0072E0  EE20 F012          	lfsr	2,18
 18624  0072E4  51D5               	movf	dir_next@dp& (0+255),w,b
 18625  0072E6  26D9               	addwf	fsr2l,f,c
 18626  0072E8  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18627  0072EA  22DA               	addwfc	fsr2h,f,c
 18628  0072EC  CFDE F099          	movff	postinc2,get_fat@clst
 18629  0072F0  CFDE F09A          	movff	postinc2,get_fat@clst+1
 18630  0072F4  CFDE F09B          	movff	postinc2,get_fat@clst+2
 18631  0072F8  CFDE F09C          	movff	postinc2,get_fat@clst+3
 18632  0072FC  EC6C  F033         	call	_get_fat	;wreg free
 18633  007300  C097  F0EF         	movff	?_get_fat,dir_next@clst
 18634  007304  C098  F0F0         	movff	?_get_fat+1,dir_next@clst+1
 18635  007308  C099  F0F1         	movff	?_get_fat+2,dir_next@clst+2
 18636  00730C  C09A  F0F2         	movff	?_get_fat+3,dir_next@clst+3
 18637                           
 18638                           ; BSR set to: 0
 18639                           ;ff.c: 1746: if (clst <= 1) return FR_INT_ERR;
 18640  007310  51F2               	movf	(dir_next@clst+3)& (0+255),w,b
 18641  007312  11F1               	iorwf	(dir_next@clst+2)& (0+255),w,b
 18642  007314  11F0               	iorwf	(dir_next@clst+1)& (0+255),w,b
 18643  007316  E106               	bnz	l21075
 18644  007318  0E02               	movlw	2
 18645  00731A  5DEF               	subwf	dir_next@clst& (0+255),w,b
 18646  00731C  B0D8               	btfsc	status,0,c
 18647  00731E  D002               	goto	l21075
 18648  007320                     u23260:
 18649                           
 18650                           ; BSR set to: 0
 18651  007320  0E02               	movlw	2
 18652  007322  0012               	return	
 18653  007324                     l21075:
 18654                           
 18655                           ; BSR set to: 0
 18656                           ;ff.c: 1747: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 18657  007324  29EF               	incf	dir_next@clst& (0+255),w,b
 18658  007326  E109               	bnz	l21081
 18659  007328  29F0               	incf	(dir_next@clst+1)& (0+255),w,b
 18660  00732A  E107               	bnz	l21081
 18661  00732C  29F1               	incf	(dir_next@clst+2)& (0+255),w,b
 18662  00732E  E105               	bnz	l21081
 18663  007330  29F2               	incf	(dir_next@clst+3)& (0+255),w,b
 18664  007332  A4D8               	btfss	status,2,c
 18665  007334  D002               	goto	l21081
 18666  007336                     u23270:
 18667                           
 18668                           ; BSR set to: 0
 18669  007336  0E01               	movlw	1
 18670  007338  0012               	return	
 18671  00733A                     l21081:
 18672                           
 18673                           ; BSR set to: 0
 18674                           ;ff.c: 1748: if (clst >= fs->n_fatent) {
 18675  00733A  EE20 F013          	lfsr	2,19
 18676  00733E  51ED               	movf	dir_next@fs& (0+255),w,b
 18677  007340  26D9               	addwf	fsr2l,f,c
 18678  007342  51EE               	movf	(dir_next@fs+1)& (0+255),w,b
 18679  007344  22DA               	addwfc	fsr2h,f,c
 18680  007346  50DE               	movf	postinc2,w,c
 18681  007348  5DEF               	subwf	dir_next@clst& (0+255),w,b
 18682  00734A  50DE               	movf	postinc2,w,c
 18683  00734C  59F0               	subwfb	(dir_next@clst+1)& (0+255),w,b
 18684  00734E  50DE               	movf	postinc2,w,c
 18685  007350  59F1               	subwfb	(dir_next@clst+2)& (0+255),w,b
 18686  007352  50DE               	movf	postinc2,w,c
 18687  007354  59F2               	subwfb	(dir_next@clst+3)& (0+255),w,b
 18688  007356  A0D8               	btfss	status,0,c
 18689  007358  D053               	goto	l421
 18690                           
 18691                           ; BSR set to: 0
 18692                           ;ff.c: 1750: if (!stretch) {
 18693  00735A  51D7               	movf	dir_next@stretch& (0+255),w,b
 18694  00735C  11D8               	iorwf	(dir_next@stretch+1)& (0+255),w,b
 18695  00735E  A4D8               	btfss	status,2,c
 18696  007360  D00B               	goto	l21091
 18697  007362                     u23290:
 18698                           
 18699                           ; BSR set to: 0
 18700                           ;ff.c: 1751: dp->sect = 0; return FR_NO_FILE;
 18701  007362  EE20 F016          	lfsr	2,22
 18702  007366  51D5               	movf	dir_next@dp& (0+255),w,b
 18703  007368  26D9               	addwf	fsr2l,f,c
 18704  00736A  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18705  00736C  22DA               	addwfc	fsr2h,f,c
 18706  00736E  6ADE               	clrf	postinc2,c
 18707  007370  6ADE               	clrf	postinc2,c
 18708  007372  6ADE               	clrf	postinc2,c
 18709  007374  6ADD               	clrf	postdec2,c
 18710  007376  D724               	goto	u23190
 18711  007378                     l21091:
 18712                           
 18713                           ; BSR set to: 0
 18714                           ;ff.c: 1752: };ff.c: 1753: clst = create_chain(&dp->obj, dp->clust);
 18715  007378  C0D5  F0B8         	movff	dir_next@dp,create_chain@obj
 18716  00737C  C0D6  F0B9         	movff	dir_next@dp+1,create_chain@obj+1
 18717  007380  EE20 F012          	lfsr	2,18
 18718  007384  51D5               	movf	dir_next@dp& (0+255),w,b
 18719  007386  26D9               	addwf	fsr2l,f,c
 18720  007388  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18721  00738A  22DA               	addwfc	fsr2h,f,c
 18722  00738C  CFDE F0BA          	movff	postinc2,create_chain@clst
 18723  007390  CFDE F0BB          	movff	postinc2,create_chain@clst+1
 18724  007394  CFDE F0BC          	movff	postinc2,create_chain@clst+2
 18725  007398  CFDE F0BD          	movff	postinc2,create_chain@clst+3
 18726  00739C  EC19  F02B         	call	_create_chain	;wreg free
 18727  0073A0  C0B8  F0EF         	movff	?_create_chain,dir_next@clst
 18728  0073A4  C0B9  F0F0         	movff	?_create_chain+1,dir_next@clst+1
 18729  0073A8  C0BA  F0F1         	movff	?_create_chain+2,dir_next@clst+2
 18730  0073AC  C0BB  F0F2         	movff	?_create_chain+3,dir_next@clst+3
 18731                           
 18732                           ; BSR set to: 0
 18733                           ;ff.c: 1754: if (clst == 0) return FR_DENIED;
 18734  0073B0  51EF               	movf	dir_next@clst& (0+255),w,b
 18735  0073B2  11F0               	iorwf	(dir_next@clst+1)& (0+255),w,b
 18736  0073B4  11F1               	iorwf	(dir_next@clst+2)& (0+255),w,b
 18737  0073B6  11F2               	iorwf	(dir_next@clst+3)& (0+255),w,b
 18738  0073B8  A4D8               	btfss	status,2,c
 18739  0073BA  D002               	goto	l21099
 18740                           
 18741                           ; BSR set to: 0
 18742  0073BC  0E07               	movlw	7
 18743  0073BE  0012               	return	
 18744  0073C0                     l21099:
 18745                           
 18746                           ; BSR set to: 0
 18747                           ;ff.c: 1755: if (clst == 1) return FR_INT_ERR;
 18748  0073C0  05EF               	decf	dir_next@clst& (0+255),w,b
 18749  0073C2  11F0               	iorwf	(dir_next@clst+1)& (0+255),w,b
 18750  0073C4  11F1               	iorwf	(dir_next@clst+2)& (0+255),w,b
 18751  0073C6  11F2               	iorwf	(dir_next@clst+3)& (0+255),w,b
 18752  0073C8  B4D8               	btfsc	status,2,c
 18753  0073CA  D7AA               	goto	u23260
 18754                           
 18755                           ; BSR set to: 0
 18756                           ;ff.c: 1756: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 18757  0073CC  29EF               	incf	dir_next@clst& (0+255),w,b
 18758  0073CE  E107               	bnz	l21111
 18759  0073D0  29F0               	incf	(dir_next@clst+1)& (0+255),w,b
 18760  0073D2  E105               	bnz	l21111
 18761  0073D4  29F1               	incf	(dir_next@clst+2)& (0+255),w,b
 18762  0073D6  E103               	bnz	l21111
 18763  0073D8  29F2               	incf	(dir_next@clst+3)& (0+255),w,b
 18764  0073DA  B4D8               	btfsc	status,2,c
 18765  0073DC  D7AC               	goto	u23270
 18766  0073DE                     l21111:
 18767                           
 18768                           ; BSR set to: 0
 18769                           ;ff.c: 1757: if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;
 18770  0073DE  C0ED  F08C         	movff	dir_next@fs,dir_clear@fs
 18771  0073E2  C0EE  F08D         	movff	dir_next@fs+1,dir_clear@fs+1
 18772  0073E6  C0EF  F08E         	movff	dir_next@clst,dir_clear@clst
 18773  0073EA  C0F0  F08F         	movff	dir_next@clst+1,dir_clear@clst+1
 18774  0073EE  C0F1  F090         	movff	dir_next@clst+2,dir_clear@clst+2
 18775  0073F2  C0F2  F091         	movff	dir_next@clst+3,dir_clear@clst+3
 18776  0073F6  EC8C  F05A         	call	_dir_clear	;wreg free
 18777  0073FA  0900               	iorlw	0
 18778  0073FC  A4D8               	btfss	status,2,c
 18779  0073FE  D79B               	goto	u23270
 18780  007400                     l421:
 18781                           
 18782                           ; BSR set to: 0
 18783                           ;ff.c: 1763: };ff.c: 1764: dp->clust = clst;
 18784  007400  EE20 F012          	lfsr	2,18
 18785  007404  51D5               	movf	dir_next@dp& (0+255),w,b
 18786  007406  26D9               	addwf	fsr2l,f,c
 18787  007408  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18788  00740A  22DA               	addwfc	fsr2h,f,c
 18789  00740C  C0EF  FFDE         	movff	dir_next@clst,postinc2
 18790  007410  C0F0  FFDE         	movff	dir_next@clst+1,postinc2
 18791  007414  C0F1  FFDE         	movff	dir_next@clst+2,postinc2
 18792  007418  C0F2  FFDE         	movff	dir_next@clst+3,postinc2
 18793                           
 18794                           ; BSR set to: 0
 18795                           ;ff.c: 1765: dp->sect = clst2sect(fs, clst);
 18796  00741C  C0ED  F01A         	movff	dir_next@fs,clst2sect@fs
 18797  007420  C0EE  F01B         	movff	dir_next@fs+1,clst2sect@fs+1
 18798  007424  C0EF  F01C         	movff	dir_next@clst,clst2sect@clst
 18799  007428  C0F0  F01D         	movff	dir_next@clst+1,clst2sect@clst+1
 18800  00742C  C0F1  F01E         	movff	dir_next@clst+2,clst2sect@clst+2
 18801  007430  C0F2  F01F         	movff	dir_next@clst+3,clst2sect@clst+3
 18802  007434  EC94  F064         	call	_clst2sect	;wreg free
 18803  007438  0100               	movlb	0	; () banked
 18804  00743A  EE20 F016          	lfsr	2,22
 18805  00743E  51D5               	movf	dir_next@dp& (0+255),w,b
 18806  007440  26D9               	addwf	fsr2l,f,c
 18807  007442  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18808  007444  22DA               	addwfc	fsr2h,f,c
 18809  007446  C01A  FFDE         	movff	?_clst2sect,postinc2
 18810  00744A  C01B  FFDE         	movff	?_clst2sect+1,postinc2
 18811  00744E  C01C  FFDE         	movff	?_clst2sect+2,postinc2
 18812  007452  C01D  FFDE         	movff	?_clst2sect+3,postinc2
 18813  007456                     l21121:
 18814                           
 18815                           ; BSR set to: 0
 18816                           ;ff.c: 1766: };ff.c: 1767: };ff.c: 1768: };ff.c: 1769: dp->dptr = ofs;
 18817  007456  EE20 F00E          	lfsr	2,14
 18818  00745A  51D5               	movf	dir_next@dp& (0+255),w,b
 18819  00745C  26D9               	addwf	fsr2l,f,c
 18820  00745E  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18821  007460  22DA               	addwfc	fsr2h,f,c
 18822  007462  C0E9  FFDE         	movff	dir_next@ofs,postinc2
 18823  007466  C0EA  FFDE         	movff	dir_next@ofs+1,postinc2
 18824  00746A  C0EB  FFDE         	movff	dir_next@ofs+2,postinc2
 18825  00746E  C0EC  FFDE         	movff	dir_next@ofs+3,postinc2
 18826                           
 18827                           ; BSR set to: 0
 18828                           ;ff.c: 1770: dp->dir = fs->win + ofs % ((UINT)512);
 18829  007472  0EFF               	movlw	255
 18830  007474  6FD9               	movwf	??_dir_next& (0+255),b
 18831  007476  0E01               	movlw	1
 18832  007478  6FDA               	movwf	(??_dir_next+1)& (0+255),b
 18833  00747A  C0E9  F0DB         	movff	dir_next@ofs,??_dir_next+2
 18834  00747E  C0EA  F0DC         	movff	dir_next@ofs+1,??_dir_next+3
 18835  007482  51D9               	movf	??_dir_next& (0+255),w,b
 18836  007484  17DB               	andwf	(??_dir_next+2)& (0+255),f,b
 18837  007486  51DA               	movf	(??_dir_next+1)& (0+255),w,b
 18838  007488  17DC               	andwf	(??_dir_next+3)& (0+255),f,b
 18839  00748A  C0ED  F0DD         	movff	dir_next@fs,??_dir_next+4
 18840  00748E  C0EE  F0DE         	movff	dir_next@fs+1,??_dir_next+5
 18841  007492  51DB               	movf	(??_dir_next+2)& (0+255),w,b
 18842  007494  27DD               	addwf	(??_dir_next+4)& (0+255),f,b
 18843  007496  51DC               	movf	(??_dir_next+3)& (0+255),w,b
 18844  007498  23DE               	addwfc	(??_dir_next+5)& (0+255),f,b
 18845  00749A  0E2F               	movlw	47
 18846  00749C  27DD               	addwf	(??_dir_next+4)& (0+255),f,b
 18847  00749E  0E00               	movlw	0
 18848  0074A0  23DE               	addwfc	(??_dir_next+5)& (0+255),f,b
 18849  0074A2  EE20 F01A          	lfsr	2,26
 18850  0074A6  51D5               	movf	dir_next@dp& (0+255),w,b
 18851  0074A8  26D9               	addwf	fsr2l,f,c
 18852  0074AA  51D6               	movf	(dir_next@dp+1)& (0+255),w,b
 18853  0074AC  22DA               	addwfc	fsr2h,f,c
 18854  0074AE  C0DD  FFDE         	movff	??_dir_next+4,postinc2
 18855  0074B2  C0DE  FFDD         	movff	??_dir_next+5,postdec2
 18856                           
 18857                           ; BSR set to: 0
 18858                           ;ff.c: 1772: return FR_OK;
 18859  0074B6  0E00               	movlw	0
 18860                           
 18861                           ; BSR set to: 0
 18862  0074B8  0012               	return		;funcret
 18863  0074BA                     __end_of_dir_next:
 18864                           	callstack 0
 18865                           
 18866 ;; *************** function _dir_clear *****************
 18867 ;; Defined at:
 18868 ;;		line 1636 in file "mcc_generated_files/fatfs/ff.c"
 18869 ;; Parameters:    Size  Location     Type
 18870 ;;  fs              2   44[BANK0 ] PTR struct .
 18871 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 18872 ;;  clst            4   46[BANK0 ] unsigned long 
 18873 ;; Auto vars:     Size  Location     Type
 18874 ;;  sect            4   54[BANK0 ] unsigned long 
 18875 ;;  n               2   60[BANK0 ] unsigned int 
 18876 ;;  szb             2   58[BANK0 ] unsigned int 
 18877 ;;  ibuf            2   52[BANK0 ] PTR unsigned char 
 18878 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 18879 ;;		 -> NULL(0), 
 18880 ;; Return value:  Size  Location     Type
 18881 ;;                  1    wreg      enum E64
 18882 ;; Registers used:
 18883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 18884 ;; Tracked objects:
 18885 ;;		On entry : 3F/0
 18886 ;;		On exit  : 3F/0
 18887 ;;		Unchanged: 0/0
 18888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18889 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18890 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18891 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18892 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18893 ;;Total ram usage:       18 bytes
 18894 ;; Hardware stack levels used:    1
 18895 ;; Hardware stack levels required when called:   12
 18896 ;; This function calls:
 18897 ;;		_clst2sect
 18898 ;;		_disk_write
 18899 ;;		_mem_set
 18900 ;;		_sync_window
 18901 ;; This function is called by:
 18902 ;;		_dir_next
 18903 ;; This function uses a non-reentrant model
 18904 ;;
 18905                           
 18906                           	psect	text64
 18907  00B518                     __ptext64:
 18908                           	callstack 0
 18909  00B518                     _dir_clear:
 18910                           	callstack 13
 18911                           
 18912                           ; BSR set to: 0
 18913                           ;ff.c: 1641: DWORD sect;;ff.c: 1642: UINT n, szb;;ff.c: 1643: BYTE *ibuf;;ff.c: 1646: if
      +                           (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 18914                           
 18915                           ; BSR set to: 0
 18916                           ;incstack = 0
 18917  00B518  C08C  F079         	movff	dir_clear@fs,sync_window@fs
 18918  00B51C  C08D  F07A         	movff	dir_clear@fs+1,sync_window@fs+1
 18919  00B520  ECA6  F054         	call	_sync_window	;wreg free
 18920  00B524  0900               	iorlw	0
 18921  00B526  B4D8               	btfsc	status,2,c
 18922  00B528  D002               	goto	l20407
 18923                           
 18924                           ; BSR set to: 0
 18925  00B52A  0E01               	movlw	1
 18926  00B52C  0012               	return	
 18927  00B52E                     l20407:
 18928                           
 18929                           ; BSR set to: 0
 18930                           ;ff.c: 1647: sect = clst2sect(fs, clst);
 18931  00B52E  C08C  F01A         	movff	dir_clear@fs,clst2sect@fs
 18932  00B532  C08D  F01B         	movff	dir_clear@fs+1,clst2sect@fs+1
 18933  00B536  C08E  F01C         	movff	dir_clear@clst,clst2sect@clst
 18934  00B53A  C08F  F01D         	movff	dir_clear@clst+1,clst2sect@clst+1
 18935  00B53E  C090  F01E         	movff	dir_clear@clst+2,clst2sect@clst+2
 18936  00B542  C091  F01F         	movff	dir_clear@clst+3,clst2sect@clst+3
 18937  00B546  EC94  F064         	call	_clst2sect	;wreg free
 18938  00B54A  C01A  F096         	movff	?_clst2sect,dir_clear@sect
 18939  00B54E  C01B  F097         	movff	?_clst2sect+1,dir_clear@sect+1
 18940  00B552  C01C  F098         	movff	?_clst2sect+2,dir_clear@sect+2
 18941  00B556  C01D  F099         	movff	?_clst2sect+3,dir_clear@sect+3
 18942                           
 18943                           ;ff.c: 1648: fs->winsect = sect;
 18944  00B55A  0100               	movlb	0	; () banked
 18945  00B55C  EE20 F02B          	lfsr	2,43
 18946  00B560  518C               	movf	dir_clear@fs& (0+255),w,b
 18947  00B562  26D9               	addwf	fsr2l,f,c
 18948  00B564  518D               	movf	(dir_clear@fs+1)& (0+255),w,b
 18949  00B566  22DA               	addwfc	fsr2h,f,c
 18950  00B568  C096  FFDE         	movff	dir_clear@sect,postinc2
 18951  00B56C  C097  FFDE         	movff	dir_clear@sect+1,postinc2
 18952  00B570  C098  FFDE         	movff	dir_clear@sect+2,postinc2
 18953  00B574  C099  FFDE         	movff	dir_clear@sect+3,postinc2
 18954                           
 18955                           ; BSR set to: 0
 18956                           ;ff.c: 1649: mem_set(fs->win, 0, ((UINT)512));
 18957  00B578  0E2F               	movlw	47
 18958  00B57A  258C               	addwf	dir_clear@fs& (0+255),w,b
 18959  00B57C  6E0E               	movwf	mem_set@dst^0,c
 18960  00B57E  0E00               	movlw	0
 18961  00B580  218D               	addwfc	(dir_clear@fs+1)& (0+255),w,b
 18962  00B582  6E0F               	movwf	(mem_set@dst+1)^0,c
 18963  00B584  0E00               	movlw	0
 18964  00B586  6E11               	movwf	(mem_set@val+1)^0,c
 18965  00B588  0E00               	movlw	0
 18966  00B58A  6E10               	movwf	mem_set@val^0,c
 18967  00B58C  0E02               	movlw	2
 18968  00B58E  6E13               	movwf	(mem_set@cnt+1)^0,c
 18969  00B590  0E00               	movlw	0
 18970  00B592  6E12               	movwf	mem_set@cnt^0,c
 18971  00B594  EC9B  F078         	call	_mem_set	;wreg free
 18972                           
 18973                           ;ff.c: 1660: {;ff.c: 1661: ibuf = fs->win; szb = 1;
 18974  00B598  0E2F               	movlw	47
 18975  00B59A  0100               	movlb	0	; () banked
 18976  00B59C  258C               	addwf	dir_clear@fs& (0+255),w,b
 18977  00B59E  6F94               	movwf	dir_clear@ibuf& (0+255),b
 18978  00B5A0  0E00               	movlw	0
 18979  00B5A2  218D               	addwfc	(dir_clear@fs+1)& (0+255),w,b
 18980  00B5A4  6F95               	movwf	(dir_clear@ibuf+1)& (0+255),b
 18981                           
 18982                           ; BSR set to: 0
 18983  00B5A6  0E00               	movlw	0
 18984  00B5A8  6F9B               	movwf	(dir_clear@szb+1)& (0+255),b
 18985  00B5AA  0E01               	movlw	1
 18986  00B5AC  6F9A               	movwf	dir_clear@szb& (0+255),b
 18987                           
 18988                           ; BSR set to: 0
 18989                           ;ff.c: 1662: for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == R
      +                          ES_OK; n += szb) ;
 18990  00B5AE  0E00               	movlw	0
 18991  00B5B0  6F9D               	movwf	(dir_clear@n+1)& (0+255),b
 18992  00B5B2  0E00               	movlw	0
 18993  00B5B4  6F9C               	movwf	dir_clear@n& (0+255),b
 18994  00B5B6  D005               	goto	l20421
 18995  00B5B8                     l20419:
 18996  00B5B8  0100               	movlb	0	; () banked
 18997  00B5BA  519A               	movf	dir_clear@szb& (0+255),w,b
 18998  00B5BC  279C               	addwf	dir_clear@n& (0+255),f,b
 18999  00B5BE  519B               	movf	(dir_clear@szb+1)& (0+255),w,b
 19000  00B5C0  239D               	addwfc	(dir_clear@n+1)& (0+255),f,b
 19001  00B5C2                     l20421:
 19002                           
 19003                           ; BSR set to: 0
 19004  00B5C2  EE20 F009          	lfsr	2,9
 19005  00B5C6  518C               	movf	dir_clear@fs& (0+255),w,b
 19006  00B5C8  26D9               	addwf	fsr2l,f,c
 19007  00B5CA  518D               	movf	(dir_clear@fs+1)& (0+255),w,b
 19008  00B5CC  22DA               	addwfc	fsr2h,f,c
 19009  00B5CE  50DE               	movf	postinc2,w,c
 19010  00B5D0  5D9C               	subwf	dir_clear@n& (0+255),w,b
 19011  00B5D2  50DE               	movf	postinc2,w,c
 19012  00B5D4  599D               	subwfb	(dir_clear@n+1)& (0+255),w,b
 19013  00B5D6  B0D8               	btfsc	status,0,c
 19014  00B5D8  D020               	goto	u22410
 19015                           
 19016                           ; BSR set to: 0
 19017  00B5DA  C094  F071         	movff	dir_clear@ibuf,disk_write@buff
 19018  00B5DE  C095  F072         	movff	dir_clear@ibuf+1,disk_write@buff+1
 19019  00B5E2  519C               	movf	dir_clear@n& (0+255),w,b
 19020  00B5E4  2596               	addwf	dir_clear@sect& (0+255),w,b
 19021  00B5E6  6F73               	movwf	disk_write@sector& (0+255),b
 19022  00B5E8  519D               	movf	(dir_clear@n+1)& (0+255),w,b
 19023  00B5EA  2197               	addwfc	(dir_clear@sect+1)& (0+255),w,b
 19024  00B5EC  6F74               	movwf	(disk_write@sector+1)& (0+255),b
 19025  00B5EE  0E00               	movlw	0
 19026  00B5F0  2198               	addwfc	(dir_clear@sect+2)& (0+255),w,b
 19027  00B5F2  6F75               	movwf	(disk_write@sector+2)& (0+255),b
 19028  00B5F4  0E00               	movlw	0
 19029  00B5F6  2199               	addwfc	(dir_clear@sect+3)& (0+255),w,b
 19030  00B5F8  6F76               	movwf	(disk_write@sector+3)& (0+255),b
 19031  00B5FA  C09A  F077         	movff	dir_clear@szb,disk_write@count
 19032  00B5FE  C09B  F078         	movff	dir_clear@szb+1,disk_write@count+1
 19033  00B602  EE20 F001          	lfsr	2,1
 19034  00B606  518C               	movf	dir_clear@fs& (0+255),w,b
 19035  00B608  26D9               	addwf	fsr2l,f,c
 19036  00B60A  518D               	movf	(dir_clear@fs+1)& (0+255),w,b
 19037  00B60C  22DA               	addwfc	fsr2h,f,c
 19038  00B60E  50DF               	movf	indf2,w,c
 19039  00B610  EC51  F074         	call	_disk_write
 19040  00B614  0900               	iorlw	0
 19041  00B616  B4D8               	btfsc	status,2,c
 19042  00B618  D7CF               	goto	l20419
 19043  00B61A                     u22410:
 19044                           
 19045                           ;ff.c: 1663: };ff.c: 1664: return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 19046  00B61A  0100               	movlb	0	; () banked
 19047  00B61C  EE20 F009          	lfsr	2,9
 19048  00B620  518C               	movf	dir_clear@fs& (0+255),w,b
 19049  00B622  26D9               	addwf	fsr2l,f,c
 19050  00B624  518D               	movf	(dir_clear@fs+1)& (0+255),w,b
 19051  00B626  22DA               	addwfc	fsr2h,f,c
 19052  00B628  519C               	movf	dir_clear@n& (0+255),w,b
 19053  00B62A  18DE               	xorwf	postinc2,w,c
 19054  00B62C  E104               	bnz	u22421
 19055  00B62E  519D               	movf	(dir_clear@n+1)& (0+255),w,b
 19056  00B630  18DE               	xorwf	postinc2,w,c
 19057  00B632  B4D8               	btfsc	status,2,c
 19058  00B634  D002               	goto	u22420
 19059  00B636                     u22421:
 19060  00B636  0E01               	movlw	1
 19061  00B638  0012               	return	
 19062  00B63A                     u22420:
 19063  00B63A  0E00               	movlw	0
 19064                           
 19065                           ; BSR set to: 0
 19066  00B63C  0012               	return		;funcret
 19067  00B63E                     __end_of_dir_clear:
 19068                           	callstack 0
 19069                           
 19070 ;; *************** function _clst2sect *****************
 19071 ;; Defined at:
 19072 ;;		line 1124 in file "mcc_generated_files/fatfs/ff.c"
 19073 ;; Parameters:    Size  Location     Type
 19074 ;;  fs              2   25[COMRAM] PTR struct .
 19075 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 19076 ;;  clst            4   27[COMRAM] unsigned long 
 19077 ;; Auto vars:     Size  Location     Type
 19078 ;;		None
 19079 ;; Return value:  Size  Location     Type
 19080 ;;                  4   25[COMRAM] unsigned long 
 19081 ;; Registers used:
 19082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19083 ;; Tracked objects:
 19084 ;;		On entry : 3E/0
 19085 ;;		On exit  : 0/0
 19086 ;;		Unchanged: 0/0
 19087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19088 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19090 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19091 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19092 ;;Total ram usage:       12 bytes
 19093 ;; Hardware stack levels used:    1
 19094 ;; Hardware stack levels required when called:    7
 19095 ;; This function calls:
 19096 ;;		___lmul
 19097 ;; This function is called by:
 19098 ;;		_dir_clear
 19099 ;;		_dir_sdi
 19100 ;;		_dir_next
 19101 ;;		_f_open
 19102 ;;		_f_write
 19103 ;; This function uses a non-reentrant model
 19104 ;;
 19105                           
 19106                           	psect	text65
 19107  00C928                     __ptext65:
 19108                           	callstack 0
 19109  00C928                     _clst2sect:
 19110                           	callstack 21
 19111                           
 19112                           ;ff.c: 1129: clst -= 2;
 19113                           
 19114                           ; BSR set to: 0
 19115                           ;incstack = 0
 19116  00C928  0E02               	movlw	2
 19117  00C92A  5E1C               	subwf	clst2sect@clst^0,f,c
 19118  00C92C  0E00               	movlw	0
 19119  00C92E  5A1D               	subwfb	(clst2sect@clst+1)^0,f,c
 19120  00C930  5A1E               	subwfb	(clst2sect@clst+2)^0,f,c
 19121  00C932  5A1F               	subwfb	(clst2sect@clst+3)^0,f,c
 19122                           
 19123                           ;ff.c: 1130: if (clst >= fs->n_fatent - 2) return 0;
 19124  00C934  EE20 F013          	lfsr	2,19
 19125  00C938  501A               	movf	clst2sect@fs^0,w,c
 19126  00C93A  26D9               	addwf	fsr2l,f,c
 19127  00C93C  501B               	movf	(clst2sect@fs+1)^0,w,c
 19128  00C93E  22DA               	addwfc	fsr2h,f,c
 19129  00C940  0EFE               	movlw	254
 19130  00C942  24DE               	addwf	postinc2,w,c
 19131  00C944  6E20               	movwf	??_clst2sect^0,c
 19132  00C946  0EFF               	movlw	255
 19133  00C948  20DE               	addwfc	postinc2,w,c
 19134  00C94A  6E21               	movwf	(??_clst2sect+1)^0,c
 19135  00C94C  0EFF               	movlw	255
 19136  00C94E  20DE               	addwfc	postinc2,w,c
 19137  00C950  6E22               	movwf	(??_clst2sect+2)^0,c
 19138  00C952  0EFF               	movlw	255
 19139  00C954  20DE               	addwfc	postinc2,w,c
 19140  00C956  6E23               	movwf	(??_clst2sect+3)^0,c
 19141  00C958  5020               	movf	??_clst2sect^0,w,c
 19142  00C95A  5C1C               	subwf	clst2sect@clst^0,w,c
 19143  00C95C  5021               	movf	(??_clst2sect+1)^0,w,c
 19144  00C95E  581D               	subwfb	(clst2sect@clst+1)^0,w,c
 19145  00C960  5022               	movf	(??_clst2sect+2)^0,w,c
 19146  00C962  581E               	subwfb	(clst2sect@clst+2)^0,w,c
 19147  00C964  5023               	movf	(??_clst2sect+3)^0,w,c
 19148  00C966  581F               	subwfb	(clst2sect@clst+3)^0,w,c
 19149  00C968  A0D8               	btfss	status,0,c
 19150  00C96A  D009               	goto	l19881
 19151  00C96C  0E00               	movlw	0
 19152  00C96E  6E1A               	movwf	?_clst2sect^0,c
 19153  00C970  0E00               	movlw	0
 19154  00C972  6E1B               	movwf	(?_clst2sect+1)^0,c
 19155  00C974  0E00               	movlw	0
 19156  00C976  6E1C               	movwf	(?_clst2sect+2)^0,c
 19157  00C978  0E00               	movlw	0
 19158  00C97A  6E1D               	movwf	(?_clst2sect+3)^0,c
 19159  00C97C  0012               	return	
 19160  00C97E                     l19881:
 19161                           
 19162                           ;ff.c: 1131: return fs->database + fs->csize * clst;
 19163  00C97E  EE20 F027          	lfsr	2,39
 19164  00C982  501A               	movf	clst2sect@fs^0,w,c
 19165  00C984  26D9               	addwf	fsr2l,f,c
 19166  00C986  501B               	movf	(clst2sect@fs+1)^0,w,c
 19167  00C988  22DA               	addwfc	fsr2h,f,c
 19168  00C98A  CFDE F020          	movff	postinc2,??_clst2sect
 19169  00C98E  CFDE F021          	movff	postinc2,??_clst2sect+1
 19170  00C992  CFDE F022          	movff	postinc2,??_clst2sect+2
 19171  00C996  CFDE F023          	movff	postinc2,??_clst2sect+3
 19172  00C99A  EE20 F009          	lfsr	2,9
 19173  00C99E  501A               	movf	clst2sect@fs^0,w,c
 19174  00C9A0  26D9               	addwf	fsr2l,f,c
 19175  00C9A2  501B               	movf	(clst2sect@fs+1)^0,w,c
 19176  00C9A4  22DA               	addwfc	fsr2h,f,c
 19177  00C9A6  CFDE F024          	movff	postinc2,??_clst2sect+4
 19178  00C9AA  CFDD F025          	movff	postdec2,??_clst2sect+5
 19179  00C9AE  C024  F00E         	movff	??_clst2sect+4,___lmul@multiplier
 19180  00C9B2  C025  F00F         	movff	??_clst2sect+5,___lmul@multiplier+1
 19181  00C9B6  6A10               	clrf	(___lmul@multiplier+2)^0,c
 19182  00C9B8  6A11               	clrf	(___lmul@multiplier+3)^0,c
 19183  00C9BA  C01C  F012         	movff	clst2sect@clst,___lmul@multiplicand
 19184  00C9BE  C01D  F013         	movff	clst2sect@clst+1,___lmul@multiplicand+1
 19185  00C9C2  C01E  F014         	movff	clst2sect@clst+2,___lmul@multiplicand+2
 19186  00C9C6  C01F  F015         	movff	clst2sect@clst+3,___lmul@multiplicand+3
 19187  00C9CA  EC16  F072         	call	___lmul	;wreg free
 19188  00C9CE  5020               	movf	??_clst2sect^0,w,c
 19189  00C9D0  240E               	addwf	?___lmul^0,w,c
 19190  00C9D2  6E1A               	movwf	?_clst2sect^0,c
 19191  00C9D4  5021               	movf	(??_clst2sect+1)^0,w,c
 19192  00C9D6  200F               	addwfc	(?___lmul+1)^0,w,c
 19193  00C9D8  6E1B               	movwf	(?_clst2sect+1)^0,c
 19194  00C9DA  5022               	movf	(??_clst2sect+2)^0,w,c
 19195  00C9DC  2010               	addwfc	(?___lmul+2)^0,w,c
 19196  00C9DE  6E1C               	movwf	(?_clst2sect+2)^0,c
 19197  00C9E0  5023               	movf	(??_clst2sect+3)^0,w,c
 19198  00C9E2  2011               	addwfc	(?___lmul+3)^0,w,c
 19199  00C9E4  6E1D               	movwf	(?_clst2sect+3)^0,c
 19200  00C9E6  0012               	return		;funcret
 19201  00C9E8                     __end_of_clst2sect:
 19202                           	callstack 0
 19203                           
 19204 ;; *************** function _create_chain *****************
 19205 ;; Defined at:
 19206 ;;		line 1503 in file "mcc_generated_files/fatfs/ff.c"
 19207 ;; Parameters:    Size  Location     Type
 19208 ;;  obj             2   88[BANK0 ] PTR struct .
 19209 ;;		 -> file(34), f_open@dj(40), file@fatfs_demo$F388(34), 
 19210 ;;  clst            4   90[BANK0 ] unsigned long 
 19211 ;; Auto vars:     Size  Location     Type
 19212 ;;  cs              4  113[BANK0 ] unsigned long 
 19213 ;;  ncl             4  107[BANK0 ] unsigned long 
 19214 ;;  scl             4  103[BANK0 ] unsigned long 
 19215 ;;  fs              2  111[BANK0 ] PTR struct .
 19216 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 19217 ;;  res             1  102[BANK0 ] enum E64
 19218 ;; Return value:  Size  Location     Type
 19219 ;;                  4   88[BANK0 ] unsigned long 
 19220 ;; Registers used:
 19221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 19222 ;; Tracked objects:
 19223 ;;		On entry : 3F/0
 19224 ;;		On exit  : 3F/0
 19225 ;;		Unchanged: 0/0
 19226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19227 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19228 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19229 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19230 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19231 ;;Total ram usage:       29 bytes
 19232 ;; Hardware stack levels used:    1
 19233 ;; Hardware stack levels required when called:   14
 19234 ;; This function calls:
 19235 ;;		_get_fat
 19236 ;;		_put_fat
 19237 ;; This function is called by:
 19238 ;;		_dir_next
 19239 ;;		_f_write
 19240 ;; This function uses a non-reentrant model
 19241 ;;
 19242                           
 19243                           	psect	text66
 19244  005632                     __ptext66:
 19245                           	callstack 0
 19246  005632                     _create_chain:
 19247                           	callstack 14
 19248                           
 19249                           ; BSR set to: 0
 19250                           ;ff.c: 1508: DWORD cs, ncl, scl;;ff.c: 1509: FRESULT res;;ff.c: 1510: FATFS *fs = obj->f
      +                          s;
 19251                           
 19252                           ;incstack = 0
 19253  005632  C0B8  FFD9         	movff	create_chain@obj,fsr2l
 19254  005636  C0B9  FFDA         	movff	create_chain@obj+1,fsr2h
 19255  00563A  CFDE F0CF          	movff	postinc2,create_chain@fs
 19256  00563E  CFDD F0D0          	movff	postdec2,create_chain@fs+1
 19257                           
 19258                           ; BSR set to: 0
 19259                           ;ff.c: 1513: if (clst == 0) {
 19260  005642  51BA               	movf	create_chain@clst& (0+255),w,b
 19261  005644  11BB               	iorwf	(create_chain@clst+1)& (0+255),w,b
 19262  005646  11BC               	iorwf	(create_chain@clst+2)& (0+255),w,b
 19263  005648  11BD               	iorwf	(create_chain@clst+3)& (0+255),w,b
 19264  00564A  A4D8               	btfss	status,2,c
 19265  00564C  D02D               	goto	l20299
 19266                           
 19267                           ; BSR set to: 0
 19268                           ;ff.c: 1514: scl = fs->last_clst;
 19269  00564E  EE20 F00B          	lfsr	2,11
 19270  005652  51CF               	movf	create_chain@fs& (0+255),w,b
 19271  005654  26D9               	addwf	fsr2l,f,c
 19272  005656  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19273  005658  22DA               	addwfc	fsr2h,f,c
 19274  00565A  CFDE F0C7          	movff	postinc2,create_chain@scl
 19275  00565E  CFDE F0C8          	movff	postinc2,create_chain@scl+1
 19276  005662  CFDE F0C9          	movff	postinc2,create_chain@scl+2
 19277  005666  CFDE F0CA          	movff	postinc2,create_chain@scl+3
 19278                           
 19279                           ; BSR set to: 0
 19280                           ;ff.c: 1515: if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 19281  00566A  51C7               	movf	create_chain@scl& (0+255),w,b
 19282  00566C  11C8               	iorwf	(create_chain@scl+1)& (0+255),w,b
 19283  00566E  11C9               	iorwf	(create_chain@scl+2)& (0+255),w,b
 19284  005670  11CA               	iorwf	(create_chain@scl+3)& (0+255),w,b
 19285  005672  B4D8               	btfsc	status,2,c
 19286  005674  D010               	goto	u22150
 19287                           
 19288                           ; BSR set to: 0
 19289  005676  EE20 F013          	lfsr	2,19
 19290  00567A  51CF               	movf	create_chain@fs& (0+255),w,b
 19291  00567C  26D9               	addwf	fsr2l,f,c
 19292  00567E  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19293  005680  22DA               	addwfc	fsr2h,f,c
 19294  005682  50DE               	movf	postinc2,w,c
 19295  005684  5DC7               	subwf	create_chain@scl& (0+255),w,b
 19296  005686  50DE               	movf	postinc2,w,c
 19297  005688  59C8               	subwfb	(create_chain@scl+1)& (0+255),w,b
 19298  00568A  50DE               	movf	postinc2,w,c
 19299  00568C  59C9               	subwfb	(create_chain@scl+2)& (0+255),w,b
 19300  00568E  50DE               	movf	postinc2,w,c
 19301  005690  59CA               	subwfb	(create_chain@scl+3)& (0+255),w,b
 19302  005692  A0D8               	btfss	status,0,c
 19303  005694  D05A               	goto	l20315
 19304  005696                     u22150:
 19305                           
 19306                           ; BSR set to: 0
 19307  005696  0E01               	movlw	1
 19308  005698  6FC7               	movwf	create_chain@scl& (0+255),b
 19309  00569A  0E00               	movlw	0
 19310  00569C  6FC8               	movwf	(create_chain@scl+1)& (0+255),b
 19311  00569E  0E00               	movlw	0
 19312  0056A0  6FC9               	movwf	(create_chain@scl+2)& (0+255),b
 19313  0056A2  0E00               	movlw	0
 19314  0056A4  6FCA               	movwf	(create_chain@scl+3)& (0+255),b
 19315  0056A6  D051               	goto	l20315
 19316  0056A8                     l20299:
 19317                           
 19318                           ; BSR set to: 0
 19319                           ;ff.c: 1517: else {;ff.c: 1518: cs = get_fat(obj, clst);
 19320  0056A8  C0B8  F097         	movff	create_chain@obj,get_fat@obj
 19321  0056AC  C0B9  F098         	movff	create_chain@obj+1,get_fat@obj+1
 19322  0056B0  C0BA  F099         	movff	create_chain@clst,get_fat@clst
 19323  0056B4  C0BB  F09A         	movff	create_chain@clst+1,get_fat@clst+1
 19324  0056B8  C0BC  F09B         	movff	create_chain@clst+2,get_fat@clst+2
 19325  0056BC  C0BD  F09C         	movff	create_chain@clst+3,get_fat@clst+3
 19326  0056C0  EC6C  F033         	call	_get_fat	;wreg free
 19327  0056C4  C097  F0D1         	movff	?_get_fat,create_chain@cs
 19328  0056C8  C098  F0D2         	movff	?_get_fat+1,create_chain@cs+1
 19329  0056CC  C099  F0D3         	movff	?_get_fat+2,create_chain@cs+2
 19330  0056D0  C09A  F0D4         	movff	?_get_fat+3,create_chain@cs+3
 19331                           
 19332                           ; BSR set to: 0
 19333                           ;ff.c: 1519: if (cs < 2) return 1;
 19334  0056D4  51D4               	movf	(create_chain@cs+3)& (0+255),w,b
 19335  0056D6  11D3               	iorwf	(create_chain@cs+2)& (0+255),w,b
 19336  0056D8  11D2               	iorwf	(create_chain@cs+1)& (0+255),w,b
 19337  0056DA  E10D               	bnz	l20307
 19338  0056DC  0E02               	movlw	2
 19339  0056DE  5DD1               	subwf	create_chain@cs& (0+255),w,b
 19340  0056E0  B0D8               	btfsc	status,0,c
 19341  0056E2  D009               	goto	l20307
 19342                           
 19343                           ; BSR set to: 0
 19344  0056E4  0E01               	movlw	1
 19345  0056E6  6FB8               	movwf	?_create_chain& (0+255),b
 19346  0056E8  0E00               	movlw	0
 19347  0056EA  6FB9               	movwf	(?_create_chain+1)& (0+255),b
 19348  0056EC  0E00               	movlw	0
 19349  0056EE  6FBA               	movwf	(?_create_chain+2)& (0+255),b
 19350  0056F0  0E00               	movlw	0
 19351  0056F2  6FBB               	movwf	(?_create_chain+3)& (0+255),b
 19352  0056F4  0012               	return	
 19353  0056F6                     l20307:
 19354                           
 19355                           ; BSR set to: 0
 19356                           ;ff.c: 1520: if (cs == 0xFFFFFFFF) return cs;
 19357  0056F6  29D1               	incf	create_chain@cs& (0+255),w,b
 19358  0056F8  E110               	bnz	l20311
 19359  0056FA  29D2               	incf	(create_chain@cs+1)& (0+255),w,b
 19360  0056FC  E10E               	bnz	l20311
 19361  0056FE  29D3               	incf	(create_chain@cs+2)& (0+255),w,b
 19362  005700  E10C               	bnz	l20311
 19363  005702  29D4               	incf	(create_chain@cs+3)& (0+255),w,b
 19364  005704  A4D8               	btfss	status,2,c
 19365  005706  D009               	goto	l20311
 19366  005708                     u22170:
 19367                           
 19368                           ; BSR set to: 0
 19369  005708  C0D1  F0B8         	movff	create_chain@cs,?_create_chain
 19370  00570C  C0D2  F0B9         	movff	create_chain@cs+1,?_create_chain+1
 19371  005710  C0D3  F0BA         	movff	create_chain@cs+2,?_create_chain+2
 19372  005714  C0D4  F0BB         	movff	create_chain@cs+3,?_create_chain+3
 19373  005718  0012               	return	
 19374  00571A                     l20311:
 19375                           
 19376                           ; BSR set to: 0
 19377                           ;ff.c: 1521: if (cs < fs->n_fatent) return cs;
 19378  00571A  EE20 F013          	lfsr	2,19
 19379  00571E  51CF               	movf	create_chain@fs& (0+255),w,b
 19380  005720  26D9               	addwf	fsr2l,f,c
 19381  005722  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19382  005724  22DA               	addwfc	fsr2h,f,c
 19383  005726  50DE               	movf	postinc2,w,c
 19384  005728  5DD1               	subwf	create_chain@cs& (0+255),w,b
 19385  00572A  50DE               	movf	postinc2,w,c
 19386  00572C  59D2               	subwfb	(create_chain@cs+1)& (0+255),w,b
 19387  00572E  50DE               	movf	postinc2,w,c
 19388  005730  59D3               	subwfb	(create_chain@cs+2)& (0+255),w,b
 19389  005732  50DE               	movf	postinc2,w,c
 19390  005734  59D4               	subwfb	(create_chain@cs+3)& (0+255),w,b
 19391  005736  A0D8               	btfss	status,0,c
 19392  005738  D7E7               	goto	u22170
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;ff.c: 1522: scl = clst;
 19396  00573A  C0BA  F0C7         	movff	create_chain@clst,create_chain@scl
 19397  00573E  C0BB  F0C8         	movff	create_chain@clst+1,create_chain@scl+1
 19398  005742  C0BC  F0C9         	movff	create_chain@clst+2,create_chain@scl+2
 19399  005746  C0BD  F0CA         	movff	create_chain@clst+3,create_chain@scl+3
 19400  00574A                     l20315:
 19401                           
 19402                           ; BSR set to: 0
 19403                           ;ff.c: 1523: };ff.c: 1524: if (fs->free_clst == 0) return 0;
 19404  00574A  EE20 F00F          	lfsr	2,15
 19405  00574E  51CF               	movf	create_chain@fs& (0+255),w,b
 19406  005750  26D9               	addwf	fsr2l,f,c
 19407  005752  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19408  005754  22DA               	addwfc	fsr2h,f,c
 19409  005756  50DE               	movf	postinc2,w,c
 19410  005758  10DE               	iorwf	postinc2,w,c
 19411  00575A  10DE               	iorwf	postinc2,w,c
 19412  00575C  10DE               	iorwf	postinc2,w,c
 19413  00575E  A4D8               	btfss	status,2,c
 19414  005760  D009               	goto	l20321
 19415  005762                     u22190:
 19416                           
 19417                           ; BSR set to: 0
 19418  005762  0E00               	movlw	0
 19419  005764  6FB8               	movwf	?_create_chain& (0+255),b
 19420  005766  0E00               	movlw	0
 19421  005768  6FB9               	movwf	(?_create_chain+1)& (0+255),b
 19422  00576A  0E00               	movlw	0
 19423  00576C  6FBA               	movwf	(?_create_chain+2)& (0+255),b
 19424  00576E  0E00               	movlw	0
 19425  005770  6FBB               	movwf	(?_create_chain+3)& (0+255),b
 19426  005772  0012               	return	
 19427  005774                     l20321:
 19428                           
 19429                           ; BSR set to: 0
 19430                           ;ff.c: 1552: {;ff.c: 1553: ncl = 0;
 19431  005774  0E00               	movlw	0
 19432  005776  6FCB               	movwf	create_chain@ncl& (0+255),b
 19433  005778  0E00               	movlw	0
 19434  00577A  6FCC               	movwf	(create_chain@ncl+1)& (0+255),b
 19435  00577C  0E00               	movlw	0
 19436  00577E  6FCD               	movwf	(create_chain@ncl+2)& (0+255),b
 19437  005780  0E00               	movlw	0
 19438  005782  6FCE               	movwf	(create_chain@ncl+3)& (0+255),b
 19439                           
 19440                           ; BSR set to: 0
 19441                           ;ff.c: 1554: if (scl == clst) {
 19442  005784  51BA               	movf	create_chain@clst& (0+255),w,b
 19443  005786  19C7               	xorwf	create_chain@scl& (0+255),w,b
 19444  005788  E109               	bnz	u22201
 19445  00578A  51BB               	movf	(create_chain@clst+1)& (0+255),w,b
 19446  00578C  19C8               	xorwf	(create_chain@scl+1)& (0+255),w,b
 19447  00578E  E106               	bnz	u22201
 19448  005790  51BC               	movf	(create_chain@clst+2)& (0+255),w,b
 19449  005792  19C9               	xorwf	(create_chain@scl+2)& (0+255),w,b
 19450  005794  E103               	bnz	u22201
 19451  005796  51BD               	movf	(create_chain@clst+3)& (0+255),w,b
 19452  005798  19CA               	xorwf	(create_chain@scl+3)& (0+255),w,b
 19453  00579A  A4D8               	btfss	status,2,c
 19454  00579C                     u22201:
 19455  00579C  D085               	goto	l20349
 19456                           
 19457                           ; BSR set to: 0
 19458                           ;ff.c: 1555: ncl = scl + 1;
 19459  00579E  0E01               	movlw	1
 19460  0057A0  25C7               	addwf	create_chain@scl& (0+255),w,b
 19461  0057A2  6FCB               	movwf	create_chain@ncl& (0+255),b
 19462  0057A4  0E00               	movlw	0
 19463  0057A6  21C8               	addwfc	(create_chain@scl+1)& (0+255),w,b
 19464  0057A8  6FCC               	movwf	(create_chain@ncl+1)& (0+255),b
 19465  0057AA  0E00               	movlw	0
 19466  0057AC  21C9               	addwfc	(create_chain@scl+2)& (0+255),w,b
 19467  0057AE  6FCD               	movwf	(create_chain@ncl+2)& (0+255),b
 19468  0057B0  0E00               	movlw	0
 19469  0057B2  21CA               	addwfc	(create_chain@scl+3)& (0+255),w,b
 19470  0057B4  6FCE               	movwf	(create_chain@ncl+3)& (0+255),b
 19471                           
 19472                           ; BSR set to: 0
 19473                           ;ff.c: 1556: if (ncl >= fs->n_fatent) ncl = 2;
 19474  0057B6  EE20 F013          	lfsr	2,19
 19475  0057BA  51CF               	movf	create_chain@fs& (0+255),w,b
 19476  0057BC  26D9               	addwf	fsr2l,f,c
 19477  0057BE  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19478  0057C0  22DA               	addwfc	fsr2h,f,c
 19479  0057C2  50DE               	movf	postinc2,w,c
 19480  0057C4  5DCB               	subwf	create_chain@ncl& (0+255),w,b
 19481  0057C6  50DE               	movf	postinc2,w,c
 19482  0057C8  59CC               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 19483  0057CA  50DE               	movf	postinc2,w,c
 19484  0057CC  59CD               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 19485  0057CE  50DE               	movf	postinc2,w,c
 19486  0057D0  59CE               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 19487  0057D2  A0D8               	btfss	status,0,c
 19488  0057D4  D008               	goto	l20331
 19489                           
 19490                           ; BSR set to: 0
 19491  0057D6  0E02               	movlw	2
 19492  0057D8  6FCB               	movwf	create_chain@ncl& (0+255),b
 19493  0057DA  0E00               	movlw	0
 19494  0057DC  6FCC               	movwf	(create_chain@ncl+1)& (0+255),b
 19495  0057DE  0E00               	movlw	0
 19496  0057E0  6FCD               	movwf	(create_chain@ncl+2)& (0+255),b
 19497  0057E2  0E00               	movlw	0
 19498  0057E4  6FCE               	movwf	(create_chain@ncl+3)& (0+255),b
 19499  0057E6                     l20331:
 19500                           
 19501                           ; BSR set to: 0
 19502                           ;ff.c: 1557: cs = get_fat(obj, ncl);
 19503  0057E6  C0B8  F097         	movff	create_chain@obj,get_fat@obj
 19504  0057EA  C0B9  F098         	movff	create_chain@obj+1,get_fat@obj+1
 19505  0057EE  C0CB  F099         	movff	create_chain@ncl,get_fat@clst
 19506  0057F2  C0CC  F09A         	movff	create_chain@ncl+1,get_fat@clst+1
 19507  0057F6  C0CD  F09B         	movff	create_chain@ncl+2,get_fat@clst+2
 19508  0057FA  C0CE  F09C         	movff	create_chain@ncl+3,get_fat@clst+3
 19509  0057FE  EC6C  F033         	call	_get_fat	;wreg free
 19510  005802  C097  F0D1         	movff	?_get_fat,create_chain@cs
 19511  005806  C098  F0D2         	movff	?_get_fat+1,create_chain@cs+1
 19512  00580A  C099  F0D3         	movff	?_get_fat+2,create_chain@cs+2
 19513  00580E  C09A  F0D4         	movff	?_get_fat+3,create_chain@cs+3
 19514                           
 19515                           ; BSR set to: 0
 19516                           ;ff.c: 1558: if (cs == 1 || cs == 0xFFFFFFFF) return cs;
 19517  005812  05D1               	decf	create_chain@cs& (0+255),w,b
 19518  005814  11D2               	iorwf	(create_chain@cs+1)& (0+255),w,b
 19519  005816  11D3               	iorwf	(create_chain@cs+2)& (0+255),w,b
 19520  005818  11D4               	iorwf	(create_chain@cs+3)& (0+255),w,b
 19521  00581A  B4D8               	btfsc	status,2,c
 19522  00581C  D775               	goto	u22170
 19523                           
 19524                           ; BSR set to: 0
 19525  00581E  29D1               	incf	create_chain@cs& (0+255),w,b
 19526  005820  E107               	bnz	l20337
 19527  005822  29D2               	incf	(create_chain@cs+1)& (0+255),w,b
 19528  005824  E105               	bnz	l20337
 19529  005826  29D3               	incf	(create_chain@cs+2)& (0+255),w,b
 19530  005828  E103               	bnz	l20337
 19531  00582A  29D4               	incf	(create_chain@cs+3)& (0+255),w,b
 19532  00582C  B4D8               	btfsc	status,2,c
 19533  00582E  D76C               	goto	u22170
 19534  005830                     l20337:
 19535                           
 19536                           ; BSR set to: 0
 19537                           ;ff.c: 1559: if (cs != 0) {
 19538  005830  51D1               	movf	create_chain@cs& (0+255),w,b
 19539  005832  11D2               	iorwf	(create_chain@cs+1)& (0+255),w,b
 19540  005834  11D3               	iorwf	(create_chain@cs+2)& (0+255),w,b
 19541  005836  11D4               	iorwf	(create_chain@cs+3)& (0+255),w,b
 19542  005838  B4D8               	btfsc	status,2,c
 19543  00583A  D036               	goto	l20349
 19544                           
 19545                           ; BSR set to: 0
 19546                           ;ff.c: 1560: cs = fs->last_clst;
 19547  00583C  EE20 F00B          	lfsr	2,11
 19548  005840  51CF               	movf	create_chain@fs& (0+255),w,b
 19549  005842  26D9               	addwf	fsr2l,f,c
 19550  005844  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19551  005846  22DA               	addwfc	fsr2h,f,c
 19552  005848  CFDE F0D1          	movff	postinc2,create_chain@cs
 19553  00584C  CFDE F0D2          	movff	postinc2,create_chain@cs+1
 19554  005850  CFDE F0D3          	movff	postinc2,create_chain@cs+2
 19555  005854  CFDE F0D4          	movff	postinc2,create_chain@cs+3
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;ff.c: 1561: if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 19559  005858  51D4               	movf	(create_chain@cs+3)& (0+255),w,b
 19560  00585A  11D3               	iorwf	(create_chain@cs+2)& (0+255),w,b
 19561  00585C  11D2               	iorwf	(create_chain@cs+1)& (0+255),w,b
 19562  00585E  E104               	bnz	u22250
 19563  005860  0E02               	movlw	2
 19564  005862  5DD1               	subwf	create_chain@cs& (0+255),w,b
 19565  005864  A0D8               	btfss	status,0,c
 19566  005866  D018               	goto	l20347
 19567  005868                     u22250:
 19568                           
 19569                           ; BSR set to: 0
 19570  005868  EE20 F013          	lfsr	2,19
 19571  00586C  51CF               	movf	create_chain@fs& (0+255),w,b
 19572  00586E  26D9               	addwf	fsr2l,f,c
 19573  005870  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19574  005872  22DA               	addwfc	fsr2h,f,c
 19575  005874  50DE               	movf	postinc2,w,c
 19576  005876  5DD1               	subwf	create_chain@cs& (0+255),w,b
 19577  005878  50DE               	movf	postinc2,w,c
 19578  00587A  59D2               	subwfb	(create_chain@cs+1)& (0+255),w,b
 19579  00587C  50DE               	movf	postinc2,w,c
 19580  00587E  59D3               	subwfb	(create_chain@cs+2)& (0+255),w,b
 19581  005880  50DE               	movf	postinc2,w,c
 19582  005882  59D4               	subwfb	(create_chain@cs+3)& (0+255),w,b
 19583  005884  B0D8               	btfsc	status,0,c
 19584  005886  D008               	goto	l20347
 19585                           
 19586                           ; BSR set to: 0
 19587  005888  C0D1  F0C7         	movff	create_chain@cs,create_chain@scl
 19588  00588C  C0D2  F0C8         	movff	create_chain@cs+1,create_chain@scl+1
 19589  005890  C0D3  F0C9         	movff	create_chain@cs+2,create_chain@scl+2
 19590  005894  C0D4  F0CA         	movff	create_chain@cs+3,create_chain@scl+3
 19591  005898                     l20347:
 19592                           
 19593                           ; BSR set to: 0
 19594                           ;ff.c: 1562: ncl = 0;
 19595  005898  0E00               	movlw	0
 19596  00589A  6FCB               	movwf	create_chain@ncl& (0+255),b
 19597  00589C  0E00               	movlw	0
 19598  00589E  6FCC               	movwf	(create_chain@ncl+1)& (0+255),b
 19599  0058A0  0E00               	movlw	0
 19600  0058A2  6FCD               	movwf	(create_chain@ncl+2)& (0+255),b
 19601  0058A4  0E00               	movlw	0
 19602  0058A6  6FCE               	movwf	(create_chain@ncl+3)& (0+255),b
 19603  0058A8                     l20349:
 19604                           
 19605                           ; BSR set to: 0
 19606                           ;ff.c: 1563: };ff.c: 1564: };ff.c: 1565: if (ncl == 0) {
 19607  0058A8  51CB               	movf	create_chain@ncl& (0+255),w,b
 19608  0058AA  11CC               	iorwf	(create_chain@ncl+1)& (0+255),w,b
 19609  0058AC  11CD               	iorwf	(create_chain@ncl+2)& (0+255),w,b
 19610  0058AE  11CE               	iorwf	(create_chain@ncl+3)& (0+255),w,b
 19611  0058B0  A4D8               	btfss	status,2,c
 19612  0058B2  D067               	goto	l20381
 19613                           
 19614                           ; BSR set to: 0
 19615                           ;ff.c: 1566: ncl = scl;
 19616  0058B4  C0C7  F0CB         	movff	create_chain@scl,create_chain@ncl
 19617  0058B8  C0C8  F0CC         	movff	create_chain@scl+1,create_chain@ncl+1
 19618  0058BC  C0C9  F0CD         	movff	create_chain@scl+2,create_chain@ncl+2
 19619  0058C0  C0CA  F0CE         	movff	create_chain@scl+3,create_chain@ncl+3
 19620  0058C4                     l20353:
 19621                           
 19622                           ; BSR set to: 0
 19623                           ;ff.c: 1568: ncl++;
 19624  0058C4  0E01               	movlw	1
 19625  0058C6  27CB               	addwf	create_chain@ncl& (0+255),f,b
 19626  0058C8  0E00               	movlw	0
 19627  0058CA  23CC               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 19628  0058CC  23CD               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 19629  0058CE  23CE               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 19630                           
 19631                           ; BSR set to: 0
 19632                           ;ff.c: 1569: if (ncl >= fs->n_fatent) {
 19633  0058D0  EE20 F013          	lfsr	2,19
 19634  0058D4  51CF               	movf	create_chain@fs& (0+255),w,b
 19635  0058D6  26D9               	addwf	fsr2l,f,c
 19636  0058D8  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19637  0058DA  22DA               	addwfc	fsr2h,f,c
 19638  0058DC  50DE               	movf	postinc2,w,c
 19639  0058DE  5DCB               	subwf	create_chain@ncl& (0+255),w,b
 19640  0058E0  50DE               	movf	postinc2,w,c
 19641  0058E2  59CC               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 19642  0058E4  50DE               	movf	postinc2,w,c
 19643  0058E6  59CD               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 19644  0058E8  50DE               	movf	postinc2,w,c
 19645  0058EA  59CE               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 19646  0058EC  A0D8               	btfss	status,0,c
 19647  0058EE  D010               	goto	l20365
 19648                           
 19649                           ; BSR set to: 0
 19650                           ;ff.c: 1570: ncl = 2;
 19651  0058F0  0E02               	movlw	2
 19652  0058F2  6FCB               	movwf	create_chain@ncl& (0+255),b
 19653  0058F4  0E00               	movlw	0
 19654  0058F6  6FCC               	movwf	(create_chain@ncl+1)& (0+255),b
 19655  0058F8  0E00               	movlw	0
 19656  0058FA  6FCD               	movwf	(create_chain@ncl+2)& (0+255),b
 19657  0058FC  0E00               	movlw	0
 19658  0058FE  6FCE               	movwf	(create_chain@ncl+3)& (0+255),b
 19659                           
 19660                           ; BSR set to: 0
 19661                           ;ff.c: 1571: if (ncl > scl) return 0;
 19662  005900  51CA               	movf	(create_chain@scl+3)& (0+255),w,b
 19663  005902  11C9               	iorwf	(create_chain@scl+2)& (0+255),w,b
 19664  005904  11C8               	iorwf	(create_chain@scl+1)& (0+255),w,b
 19665  005906  E104               	bnz	l20365
 19666  005908  0E02               	movlw	2
 19667  00590A  5DC7               	subwf	create_chain@scl& (0+255),w,b
 19668  00590C  A0D8               	btfss	status,0,c
 19669  00590E  D729               	goto	u22190
 19670  005910                     l20365:
 19671                           
 19672                           ; BSR set to: 0
 19673                           ;ff.c: 1572: };ff.c: 1573: cs = get_fat(obj, ncl);
 19674  005910  C0B8  F097         	movff	create_chain@obj,get_fat@obj
 19675  005914  C0B9  F098         	movff	create_chain@obj+1,get_fat@obj+1
 19676  005918  C0CB  F099         	movff	create_chain@ncl,get_fat@clst
 19677  00591C  C0CC  F09A         	movff	create_chain@ncl+1,get_fat@clst+1
 19678  005920  C0CD  F09B         	movff	create_chain@ncl+2,get_fat@clst+2
 19679  005924  C0CE  F09C         	movff	create_chain@ncl+3,get_fat@clst+3
 19680  005928  EC6C  F033         	call	_get_fat	;wreg free
 19681  00592C  C097  F0D1         	movff	?_get_fat,create_chain@cs
 19682  005930  C098  F0D2         	movff	?_get_fat+1,create_chain@cs+1
 19683  005934  C099  F0D3         	movff	?_get_fat+2,create_chain@cs+2
 19684  005938  C09A  F0D4         	movff	?_get_fat+3,create_chain@cs+3
 19685                           
 19686                           ; BSR set to: 0
 19687                           ;ff.c: 1574: if (cs == 0) break;
 19688  00593C  51D1               	movf	create_chain@cs& (0+255),w,b
 19689  00593E  11D2               	iorwf	(create_chain@cs+1)& (0+255),w,b
 19690  005940  11D3               	iorwf	(create_chain@cs+2)& (0+255),w,b
 19691  005942  11D4               	iorwf	(create_chain@cs+3)& (0+255),w,b
 19692  005944  B4D8               	btfsc	status,2,c
 19693  005946  D01D               	goto	l20381
 19694                           
 19695                           ; BSR set to: 0
 19696                           ;ff.c: 1575: if (cs == 1 || cs == 0xFFFFFFFF) return cs;
 19697  005948  05D1               	decf	create_chain@cs& (0+255),w,b
 19698  00594A  11D2               	iorwf	(create_chain@cs+1)& (0+255),w,b
 19699  00594C  11D3               	iorwf	(create_chain@cs+2)& (0+255),w,b
 19700  00594E  11D4               	iorwf	(create_chain@cs+3)& (0+255),w,b
 19701  005950  B4D8               	btfsc	status,2,c
 19702  005952  D6DA               	goto	u22170
 19703                           
 19704                           ; BSR set to: 0
 19705  005954  29D1               	incf	create_chain@cs& (0+255),w,b
 19706  005956  E107               	bnz	l20375
 19707  005958  29D2               	incf	(create_chain@cs+1)& (0+255),w,b
 19708  00595A  E105               	bnz	l20375
 19709  00595C  29D3               	incf	(create_chain@cs+2)& (0+255),w,b
 19710  00595E  E103               	bnz	l20375
 19711  005960  29D4               	incf	(create_chain@cs+3)& (0+255),w,b
 19712  005962  B4D8               	btfsc	status,2,c
 19713  005964  D6D1               	goto	u22170
 19714  005966                     l20375:
 19715                           
 19716                           ; BSR set to: 0
 19717                           ;ff.c: 1576: if (ncl == scl) return 0;
 19718  005966  51C7               	movf	create_chain@scl& (0+255),w,b
 19719  005968  19CB               	xorwf	create_chain@ncl& (0+255),w,b
 19720  00596A  E1AC               	bnz	l20353
 19721  00596C  51C8               	movf	(create_chain@scl+1)& (0+255),w,b
 19722  00596E  19CC               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 19723  005970  E1A9               	bnz	l20353
 19724  005972  51C9               	movf	(create_chain@scl+2)& (0+255),w,b
 19725  005974  19CD               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 19726  005976  E1A6               	bnz	l20353
 19727  005978  51CA               	movf	(create_chain@scl+3)& (0+255),w,b
 19728  00597A  19CE               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 19729  00597C  B4D8               	btfsc	status,2,c
 19730  00597E  D6F1               	goto	u22190
 19731  005980  D7A1               	goto	l20353
 19732  005982                     l20381:
 19733                           
 19734                           ; BSR set to: 0
 19735                           ;ff.c: 1578: };ff.c: 1579: res = put_fat(fs, ncl, 0xFFFFFFFF);
 19736  005982  C0CF  F097         	movff	create_chain@fs,put_fat@fs
 19737  005986  C0D0  F098         	movff	create_chain@fs+1,put_fat@fs+1
 19738  00598A  C0CB  F099         	movff	create_chain@ncl,put_fat@clst
 19739  00598E  C0CC  F09A         	movff	create_chain@ncl+1,put_fat@clst+1
 19740  005992  C0CD  F09B         	movff	create_chain@ncl+2,put_fat@clst+2
 19741  005996  C0CE  F09C         	movff	create_chain@ncl+3,put_fat@clst+3
 19742  00599A  0EFF               	movlw	255
 19743  00599C  6F9D               	movwf	put_fat@val& (0+255),b
 19744  00599E  0EFF               	movlw	255
 19745  0059A0  6F9E               	movwf	(put_fat@val+1)& (0+255),b
 19746  0059A2  0EFF               	movlw	255
 19747  0059A4  6F9F               	movwf	(put_fat@val+2)& (0+255),b
 19748  0059A6  0EFF               	movlw	255
 19749  0059A8  6FA0               	movwf	(put_fat@val+3)& (0+255),b
 19750  0059AA  EC58  F02D         	call	_put_fat	;wreg free
 19751  0059AE  6FC6               	movwf	create_chain@res& (0+255),b
 19752                           
 19753                           ; BSR set to: 0
 19754                           ;ff.c: 1580: if (res == FR_OK && clst != 0) {
 19755  0059B0  51C6               	movf	create_chain@res& (0+255),w,b
 19756  0059B2  A4D8               	btfss	status,2,c
 19757  0059B4  D01D               	goto	l20389
 19758                           
 19759                           ; BSR set to: 0
 19760  0059B6  51BA               	movf	create_chain@clst& (0+255),w,b
 19761  0059B8  11BB               	iorwf	(create_chain@clst+1)& (0+255),w,b
 19762  0059BA  11BC               	iorwf	(create_chain@clst+2)& (0+255),w,b
 19763  0059BC  11BD               	iorwf	(create_chain@clst+3)& (0+255),w,b
 19764  0059BE  B4D8               	btfsc	status,2,c
 19765  0059C0  D017               	goto	l20389
 19766                           
 19767                           ; BSR set to: 0
 19768                           ;ff.c: 1581: res = put_fat(fs, clst, ncl);
 19769  0059C2  C0CF  F097         	movff	create_chain@fs,put_fat@fs
 19770  0059C6  C0D0  F098         	movff	create_chain@fs+1,put_fat@fs+1
 19771  0059CA  C0BA  F099         	movff	create_chain@clst,put_fat@clst
 19772  0059CE  C0BB  F09A         	movff	create_chain@clst+1,put_fat@clst+1
 19773  0059D2  C0BC  F09B         	movff	create_chain@clst+2,put_fat@clst+2
 19774  0059D6  C0BD  F09C         	movff	create_chain@clst+3,put_fat@clst+3
 19775  0059DA  C0CB  F09D         	movff	create_chain@ncl,put_fat@val
 19776  0059DE  C0CC  F09E         	movff	create_chain@ncl+1,put_fat@val+1
 19777  0059E2  C0CD  F09F         	movff	create_chain@ncl+2,put_fat@val+2
 19778  0059E6  C0CE  F0A0         	movff	create_chain@ncl+3,put_fat@val+3
 19779  0059EA  EC58  F02D         	call	_put_fat	;wreg free
 19780  0059EE  6FC6               	movwf	create_chain@res& (0+255),b
 19781  0059F0                     l20389:
 19782                           
 19783                           ; BSR set to: 0
 19784                           ;ff.c: 1582: };ff.c: 1583: };ff.c: 1585: if (res == FR_OK) {
 19785  0059F0  51C6               	movf	create_chain@res& (0+255),w,b
 19786  0059F2  A4D8               	btfss	status,2,c
 19787  0059F4  D044               	goto	l20397
 19788                           
 19789                           ; BSR set to: 0
 19790                           ;ff.c: 1586: fs->last_clst = ncl;
 19791  0059F6  EE20 F00B          	lfsr	2,11
 19792  0059FA  51CF               	movf	create_chain@fs& (0+255),w,b
 19793  0059FC  26D9               	addwf	fsr2l,f,c
 19794  0059FE  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19795  005A00  22DA               	addwfc	fsr2h,f,c
 19796  005A02  C0CB  FFDE         	movff	create_chain@ncl,postinc2
 19797  005A06  C0CC  FFDE         	movff	create_chain@ncl+1,postinc2
 19798  005A0A  C0CD  FFDE         	movff	create_chain@ncl+2,postinc2
 19799  005A0E  C0CE  FFDE         	movff	create_chain@ncl+3,postinc2
 19800                           
 19801                           ; BSR set to: 0
 19802                           ;ff.c: 1587: if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 19803  005A12  EE20 F00F          	lfsr	2,15
 19804  005A16  51CF               	movf	create_chain@fs& (0+255),w,b
 19805  005A18  26D9               	addwf	fsr2l,f,c
 19806  005A1A  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19807  005A1C  22DA               	addwfc	fsr2h,f,c
 19808  005A1E  EE10 F013          	lfsr	1,19
 19809  005A22  51CF               	movf	create_chain@fs& (0+255),w,b
 19810  005A24  26E1               	addwf	fsr1l,f,c
 19811  005A26  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19812  005A28  22E2               	addwfc	fsr1h,f,c
 19813  005A2A  0EFE               	movlw	254
 19814  005A2C  24E6               	addwf	postinc1,w,c
 19815  005A2E  6FC2               	movwf	(??_create_chain+4)& (0+255),b
 19816  005A30  0EFF               	movlw	255
 19817  005A32  20E6               	addwfc	postinc1,w,c
 19818  005A34  6FC3               	movwf	(??_create_chain+5)& (0+255),b
 19819  005A36  0EFF               	movlw	255
 19820  005A38  20E6               	addwfc	postinc1,w,c
 19821  005A3A  6FC4               	movwf	(??_create_chain+6)& (0+255),b
 19822  005A3C  0EFF               	movlw	255
 19823  005A3E  20E6               	addwfc	postinc1,w,c
 19824  005A40  6FC5               	movwf	(??_create_chain+7)& (0+255),b
 19825  005A42  50DE               	movf	postinc2,w,c
 19826  005A44  5DC2               	subwf	(??_create_chain+4)& (0+255),w,b
 19827  005A46  50DE               	movf	postinc2,w,c
 19828  005A48  59C3               	subwfb	(??_create_chain+5)& (0+255),w,b
 19829  005A4A  50DE               	movf	postinc2,w,c
 19830  005A4C  59C4               	subwfb	(??_create_chain+6)& (0+255),w,b
 19831  005A4E  50DE               	movf	postinc2,w,c
 19832  005A50  59C5               	subwfb	(??_create_chain+7)& (0+255),w,b
 19833  005A52  A0D8               	btfss	status,0,c
 19834  005A54  D00B               	goto	l362
 19835                           
 19836                           ; BSR set to: 0
 19837  005A56  EE20 F00F          	lfsr	2,15
 19838  005A5A  51CF               	movf	create_chain@fs& (0+255),w,b
 19839  005A5C  26D9               	addwf	fsr2l,f,c
 19840  005A5E  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19841  005A60  22DA               	addwfc	fsr2h,f,c
 19842  005A62  06DE               	decf	postinc2,f,c
 19843  005A64  0E00               	movlw	0
 19844  005A66  5ADE               	subwfb	postinc2,f,c
 19845  005A68  5ADE               	subwfb	postinc2,f,c
 19846  005A6A  5ADE               	subwfb	postinc2,f,c
 19847  005A6C                     l362:
 19848                           
 19849                           ; BSR set to: 0
 19850                           ;ff.c: 1588: fs->fsi_flag |= 1;
 19851  005A6C  EE20 F004          	lfsr	2,4
 19852  005A70  51CF               	movf	create_chain@fs& (0+255),w,b
 19853  005A72  26D9               	addwf	fsr2l,f,c
 19854  005A74  51D0               	movf	(create_chain@fs+1)& (0+255),w,b
 19855  005A76  22DA               	addwfc	fsr2h,f,c
 19856  005A78  0E00               	movlw	0
 19857  005A7A  80DB               	bsf	plusw2,0,c
 19858                           
 19859                           ;ff.c: 1589: } else {
 19860  005A7C  D010               	goto	l363
 19861  005A7E                     l20397:
 19862                           
 19863                           ; BSR set to: 0
 19864                           ;ff.c: 1590: ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 19865  005A7E  05C6               	decf	create_chain@res& (0+255),w,b
 19866  005A80  B4D8               	btfsc	status,2,c
 19867  005A82  D009               	goto	l365
 19868                           
 19869                           ; BSR set to: 0
 19870  005A84  0E01               	movlw	1
 19871  005A86  6FCB               	movwf	create_chain@ncl& (0+255),b
 19872  005A88  0E00               	movlw	0
 19873  005A8A  6FCC               	movwf	(create_chain@ncl+1)& (0+255),b
 19874  005A8C  0E00               	movlw	0
 19875  005A8E  6FCD               	movwf	(create_chain@ncl+2)& (0+255),b
 19876  005A90  0E00               	movlw	0
 19877  005A92  6FCE               	movwf	(create_chain@ncl+3)& (0+255),b
 19878  005A94  D004               	goto	l363
 19879  005A96                     l365:
 19880                           
 19881                           ; BSR set to: 0
 19882  005A96  69CB               	setf	create_chain@ncl& (0+255),b
 19883  005A98  69CC               	setf	(create_chain@ncl+1)& (0+255),b
 19884  005A9A  69CD               	setf	(create_chain@ncl+2)& (0+255),b
 19885  005A9C  69CE               	setf	(create_chain@ncl+3)& (0+255),b
 19886  005A9E                     l363:
 19887                           
 19888                           ; BSR set to: 0
 19889                           ;ff.c: 1591: };ff.c: 1593: return ncl;
 19890  005A9E  C0CB  F0B8         	movff	create_chain@ncl,?_create_chain
 19891  005AA2  C0CC  F0B9         	movff	create_chain@ncl+1,?_create_chain+1
 19892  005AA6  C0CD  F0BA         	movff	create_chain@ncl+2,?_create_chain+2
 19893  005AAA  C0CE  F0BB         	movff	create_chain@ncl+3,?_create_chain+3
 19894                           
 19895                           ; BSR set to: 0
 19896  005AAE  0012               	return		;funcret
 19897  005AB0                     __end_of_create_chain:
 19898                           	callstack 0
 19899                           
 19900 ;; *************** function _put_fat *****************
 19901 ;; Defined at:
 19902 ;;		line 1218 in file "mcc_generated_files/fatfs/ff.c"
 19903 ;; Parameters:    Size  Location     Type
 19904 ;;  fs              2   55[BANK0 ] PTR struct .
 19905 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 19906 ;;  clst            4   57[BANK0 ] unsigned long 
 19907 ;;  val             4   61[BANK0 ] unsigned long 
 19908 ;; Auto vars:     Size  Location     Type
 19909 ;;  bc              2   85[BANK0 ] unsigned int 
 19910 ;;  p               2   83[BANK0 ] PTR unsigned char 
 19911 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 19912 ;;		 -> NULL(0), 
 19913 ;;  res             1   87[BANK0 ] enum E64
 19914 ;; Return value:  Size  Location     Type
 19915 ;;                  1    wreg      enum E64
 19916 ;; Registers used:
 19917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 19918 ;; Tracked objects:
 19919 ;;		On entry : 3F/0
 19920 ;;		On exit  : 3F/0
 19921 ;;		Unchanged: 0/0
 19922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19923 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19924 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19925 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19926 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19927 ;;Total ram usage:       33 bytes
 19928 ;; Hardware stack levels used:    1
 19929 ;; Hardware stack levels required when called:   13
 19930 ;; This function calls:
 19931 ;;		_ld_dword
 19932 ;;		_move_window
 19933 ;;		_st_dword
 19934 ;;		_st_word
 19935 ;; This function is called by:
 19936 ;;		_remove_chain
 19937 ;;		_create_chain
 19938 ;; This function uses a non-reentrant model
 19939 ;;
 19940                           
 19941                           	psect	text67
 19942  005AB0                     __ptext67:
 19943                           	callstack 0
 19944  005AB0                     _put_fat:
 19945                           	callstack 14
 19946                           
 19947                           ; BSR set to: 0
 19948                           ;ff.c: 1224: UINT bc;;ff.c: 1225: BYTE *p;;ff.c: 1226: FRESULT res = FR_INT_ERR;
 19949                           
 19950                           ; BSR set to: 0
 19951                           ;incstack = 0
 19952  005AB0  0E02               	movlw	2
 19953  005AB2  6FB7               	movwf	put_fat@res& (0+255),b
 19954                           
 19955                           ; BSR set to: 0
 19956                           ;ff.c: 1229: if (clst >= 2 && clst < fs->n_fatent) {
 19957  005AB4  519C               	movf	(put_fat@clst+3)& (0+255),w,b
 19958  005AB6  119B               	iorwf	(put_fat@clst+2)& (0+255),w,b
 19959  005AB8  119A               	iorwf	(put_fat@clst+1)& (0+255),w,b
 19960  005ABA  E104               	bnz	u21610
 19961  005ABC  0E02               	movlw	2
 19962  005ABE  5D99               	subwf	put_fat@clst& (0+255),w,b
 19963  005AC0  A0D8               	btfss	status,0,c
 19964  005AC2  D219               	goto	l20005
 19965  005AC4                     u21610:
 19966                           
 19967                           ; BSR set to: 0
 19968  005AC4  EE20 F013          	lfsr	2,19
 19969  005AC8  5197               	movf	put_fat@fs& (0+255),w,b
 19970  005ACA  26D9               	addwf	fsr2l,f,c
 19971  005ACC  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 19972  005ACE  22DA               	addwfc	fsr2h,f,c
 19973  005AD0  50DE               	movf	postinc2,w,c
 19974  005AD2  5D99               	subwf	put_fat@clst& (0+255),w,b
 19975  005AD4  50DE               	movf	postinc2,w,c
 19976  005AD6  599A               	subwfb	(put_fat@clst+1)& (0+255),w,b
 19977  005AD8  50DE               	movf	postinc2,w,c
 19978  005ADA  599B               	subwfb	(put_fat@clst+2)& (0+255),w,b
 19979  005ADC  50DE               	movf	postinc2,w,c
 19980  005ADE  599C               	subwfb	(put_fat@clst+3)& (0+255),w,b
 19981  005AE0  A0D8               	btfss	status,0,c
 19982  005AE2  D1FB               	goto	l20003
 19983  005AE4  D208               	goto	l20005
 19984  005AE6                     l291:
 19985                           
 19986                           ; BSR set to: 0
 19987                           ;ff.c: 1232: bc = (UINT)clst; bc += bc / 2;
 19988  005AE6  C099  F0B5         	movff	put_fat@clst,put_fat@bc
 19989  005AEA  C09A  F0B6         	movff	put_fat@clst+1,put_fat@bc+1
 19990                           
 19991                           ; BSR set to: 0
 19992  005AEE  90D8               	bcf	status,0,c
 19993  005AF0  31B6               	rrcf	(put_fat@bc+1)& (0+255),w,b
 19994  005AF2  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 19995  005AF4  31B5               	rrcf	put_fat@bc& (0+255),w,b
 19996  005AF6  6FA1               	movwf	??_put_fat& (0+255),b
 19997  005AF8  51A1               	movf	??_put_fat& (0+255),w,b
 19998  005AFA  27B5               	addwf	put_fat@bc& (0+255),f,b
 19999  005AFC  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20000  005AFE  23B6               	addwfc	(put_fat@bc+1)& (0+255),f,b
 20001                           
 20002                           ; BSR set to: 0
 20003                           ;ff.c: 1233: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 20004  005B00  C097  F08C         	movff	put_fat@fs,move_window@fs
 20005  005B04  C098  F08D         	movff	put_fat@fs+1,move_window@fs+1
 20006  005B08  EE20 F01F          	lfsr	2,31
 20007  005B0C  5197               	movf	put_fat@fs& (0+255),w,b
 20008  005B0E  26D9               	addwf	fsr2l,f,c
 20009  005B10  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 20010  005B12  22DA               	addwfc	fsr2h,f,c
 20011  005B14  CFDE F0A1          	movff	postinc2,??_put_fat
 20012  005B18  CFDE F0A2          	movff	postinc2,??_put_fat+1
 20013  005B1C  CFDE F0A3          	movff	postinc2,??_put_fat+2
 20014  005B20  CFDE F0A4          	movff	postinc2,??_put_fat+3
 20015  005B24  C0B5  F0A5         	movff	put_fat@bc,??_put_fat+4
 20016  005B28  C0B6  F0A6         	movff	put_fat@bc+1,??_put_fat+5
 20017  005B2C  0E09               	movlw	9
 20018  005B2E  6FA7               	movwf	(??_put_fat+6)& (0+255),b
 20019  005B30                     u21635:
 20020  005B30  90D8               	bcf	status,0,c
 20021  005B32  33A6               	rrcf	(??_put_fat+5)& (0+255),f,b
 20022  005B34  33A5               	rrcf	(??_put_fat+4)& (0+255),f,b
 20023  005B36  2FA7               	decfsz	(??_put_fat+6)& (0+255),f,b
 20024  005B38  D7FB               	goto	u21635
 20025  005B3A  51A5               	movf	(??_put_fat+4)& (0+255),w,b
 20026  005B3C  25A1               	addwf	??_put_fat& (0+255),w,b
 20027  005B3E  6F8E               	movwf	move_window@sector& (0+255),b
 20028  005B40  51A6               	movf	(??_put_fat+5)& (0+255),w,b
 20029  005B42  21A2               	addwfc	(??_put_fat+1)& (0+255),w,b
 20030  005B44  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 20031  005B46  0E00               	movlw	0
 20032  005B48  21A3               	addwfc	(??_put_fat+2)& (0+255),w,b
 20033  005B4A  6F90               	movwf	(move_window@sector+2)& (0+255),b
 20034  005B4C  0E00               	movlw	0
 20035  005B4E  21A4               	addwfc	(??_put_fat+3)& (0+255),w,b
 20036  005B50  6F91               	movwf	(move_window@sector+3)& (0+255),b
 20037  005B52  EC1B  F067         	call	_move_window	;wreg free
 20038  005B56  6FB7               	movwf	put_fat@res& (0+255),b
 20039                           
 20040                           ; BSR set to: 0
 20041                           ;ff.c: 1234: if (res != FR_OK) break;
 20042  005B58  51B7               	movf	put_fat@res& (0+255),w,b
 20043  005B5A  A4D8               	btfss	status,2,c
 20044  005B5C  D1CC               	goto	l20005
 20045                           
 20046                           ; BSR set to: 0
 20047                           ;ff.c: 1235: p = fs->win + bc++ % ((UINT)512);
 20048  005B5E  0EFF               	movlw	255
 20049  005B60  6FA1               	movwf	??_put_fat& (0+255),b
 20050  005B62  0E01               	movlw	1
 20051  005B64  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 20052  005B66  C0B5  F0A3         	movff	put_fat@bc,??_put_fat+2
 20053  005B6A  C0B6  F0A4         	movff	put_fat@bc+1,??_put_fat+3
 20054  005B6E  51A1               	movf	??_put_fat& (0+255),w,b
 20055  005B70  17A3               	andwf	(??_put_fat+2)& (0+255),f,b
 20056  005B72  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20057  005B74  17A4               	andwf	(??_put_fat+3)& (0+255),f,b
 20058  005B76  C097  F0A5         	movff	put_fat@fs,??_put_fat+4
 20059  005B7A  C098  F0A6         	movff	put_fat@fs+1,??_put_fat+5
 20060  005B7E  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 20061  005B80  27A5               	addwf	(??_put_fat+4)& (0+255),f,b
 20062  005B82  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 20063  005B84  23A6               	addwfc	(??_put_fat+5)& (0+255),f,b
 20064  005B86  0E2F               	movlw	47
 20065  005B88  25A5               	addwf	(??_put_fat+4)& (0+255),w,b
 20066  005B8A  6FB3               	movwf	put_fat@p& (0+255),b
 20067  005B8C  0E00               	movlw	0
 20068  005B8E  21A6               	addwfc	(??_put_fat+5)& (0+255),w,b
 20069  005B90  6FB4               	movwf	(put_fat@p+1)& (0+255),b
 20070                           
 20071                           ; BSR set to: 0
 20072  005B92  4BB5               	infsnz	put_fat@bc& (0+255),f,b
 20073  005B94  2BB6               	incf	(put_fat@bc+1)& (0+255),f,b
 20074                           
 20075                           ; BSR set to: 0
 20076                           ;ff.c: 1236: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 20077  005B96  B199               	btfsc	put_fat@clst& (0+255),0,b
 20078  005B98  D004               	goto	l19957
 20079                           
 20080                           ; BSR set to: 0
 20081  005B9A  C09D  F0AF         	movff	put_fat@val,_put_fat$705
 20082  005B9E  6BB0               	clrf	(_put_fat$705+1)& (0+255),b
 20083  005BA0  D01A               	goto	l19959
 20084  005BA2                     l19957:
 20085                           
 20086                           ; BSR set to: 0
 20087  005BA2  519D               	movf	put_fat@val& (0+255),w,b
 20088  005BA4  6FA1               	movwf	??_put_fat& (0+255),b
 20089  005BA6  6BA2               	clrf	(??_put_fat+1)& (0+255),b
 20090  005BA8  3BA1               	swapf	??_put_fat& (0+255),f,b
 20091  005BAA  3BA2               	swapf	(??_put_fat+1)& (0+255),f,b
 20092  005BAC  0EF0               	movlw	240
 20093  005BAE  17A2               	andwf	(??_put_fat+1)& (0+255),f,b
 20094  005BB0  51A1               	movf	??_put_fat& (0+255),w,b
 20095  005BB2  0B0F               	andlw	15
 20096  005BB4  13A2               	iorwf	(??_put_fat+1)& (0+255),f,b
 20097  005BB6  0EF0               	movlw	240
 20098  005BB8  17A1               	andwf	??_put_fat& (0+255),f,b
 20099  005BBA  C0B3  FFD9         	movff	put_fat@p,fsr2l
 20100  005BBE  C0B4  FFDA         	movff	put_fat@p+1,fsr2h
 20101  005BC2  50DF               	movf	indf2,w,c
 20102  005BC4  0B0F               	andlw	15
 20103  005BC6  6FA3               	movwf	(??_put_fat+2)& (0+255),b
 20104  005BC8  6BA4               	clrf	(??_put_fat+3)& (0+255),b
 20105  005BCA  51A1               	movf	??_put_fat& (0+255),w,b
 20106  005BCC  11A3               	iorwf	(??_put_fat+2)& (0+255),w,b
 20107  005BCE  6FAF               	movwf	_put_fat$705& (0+255),b
 20108  005BD0  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20109  005BD2  11A4               	iorwf	(??_put_fat+3)& (0+255),w,b
 20110  005BD4  6FB0               	movwf	(_put_fat$705+1)& (0+255),b
 20111  005BD6                     l19959:
 20112                           
 20113                           ; BSR set to: 0
 20114  005BD6  C0B3  FFD9         	movff	put_fat@p,fsr2l
 20115  005BDA  C0B4  FFDA         	movff	put_fat@p+1,fsr2h
 20116  005BDE  C0AF  FFDF         	movff	_put_fat$705,indf2
 20117                           
 20118                           ; BSR set to: 0
 20119                           ;ff.c: 1237: fs->wflag = 1;
 20120  005BE2  EE20 F003          	lfsr	2,3
 20121  005BE6  5197               	movf	put_fat@fs& (0+255),w,b
 20122  005BE8  26D9               	addwf	fsr2l,f,c
 20123  005BEA  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 20124  005BEC  22DA               	addwfc	fsr2h,f,c
 20125  005BEE  0E01               	movlw	1
 20126  005BF0  6EDF               	movwf	indf2,c
 20127                           
 20128                           ; BSR set to: 0
 20129                           ;ff.c: 1238: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 20130  005BF2  C097  F08C         	movff	put_fat@fs,move_window@fs
 20131  005BF6  C098  F08D         	movff	put_fat@fs+1,move_window@fs+1
 20132  005BFA  EE20 F01F          	lfsr	2,31
 20133  005BFE  5197               	movf	put_fat@fs& (0+255),w,b
 20134  005C00  26D9               	addwf	fsr2l,f,c
 20135  005C02  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 20136  005C04  22DA               	addwfc	fsr2h,f,c
 20137  005C06  CFDE F0A1          	movff	postinc2,??_put_fat
 20138  005C0A  CFDE F0A2          	movff	postinc2,??_put_fat+1
 20139  005C0E  CFDE F0A3          	movff	postinc2,??_put_fat+2
 20140  005C12  CFDE F0A4          	movff	postinc2,??_put_fat+3
 20141  005C16  C0B5  F0A5         	movff	put_fat@bc,??_put_fat+4
 20142  005C1A  C0B6  F0A6         	movff	put_fat@bc+1,??_put_fat+5
 20143  005C1E  0E09               	movlw	9
 20144  005C20  6FA7               	movwf	(??_put_fat+6)& (0+255),b
 20145  005C22                     u21665:
 20146  005C22  90D8               	bcf	status,0,c
 20147  005C24  33A6               	rrcf	(??_put_fat+5)& (0+255),f,b
 20148  005C26  33A5               	rrcf	(??_put_fat+4)& (0+255),f,b
 20149  005C28  2FA7               	decfsz	(??_put_fat+6)& (0+255),f,b
 20150  005C2A  D7FB               	goto	u21665
 20151  005C2C  51A5               	movf	(??_put_fat+4)& (0+255),w,b
 20152  005C2E  25A1               	addwf	??_put_fat& (0+255),w,b
 20153  005C30  6F8E               	movwf	move_window@sector& (0+255),b
 20154  005C32  51A6               	movf	(??_put_fat+5)& (0+255),w,b
 20155  005C34  21A2               	addwfc	(??_put_fat+1)& (0+255),w,b
 20156  005C36  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 20157  005C38  0E00               	movlw	0
 20158  005C3A  21A3               	addwfc	(??_put_fat+2)& (0+255),w,b
 20159  005C3C  6F90               	movwf	(move_window@sector+2)& (0+255),b
 20160  005C3E  0E00               	movlw	0
 20161  005C40  21A4               	addwfc	(??_put_fat+3)& (0+255),w,b
 20162  005C42  6F91               	movwf	(move_window@sector+3)& (0+255),b
 20163  005C44  EC1B  F067         	call	_move_window	;wreg free
 20164  005C48  6FB7               	movwf	put_fat@res& (0+255),b
 20165                           
 20166                           ; BSR set to: 0
 20167                           ;ff.c: 1239: if (res != FR_OK) break;
 20168  005C4A  51B7               	movf	put_fat@res& (0+255),w,b
 20169  005C4C  A4D8               	btfss	status,2,c
 20170  005C4E  D153               	goto	l20005
 20171                           
 20172                           ; BSR set to: 0
 20173                           ;ff.c: 1240: p = fs->win + bc % ((UINT)512);
 20174  005C50  0EFF               	movlw	255
 20175  005C52  6FA1               	movwf	??_put_fat& (0+255),b
 20176  005C54  0E01               	movlw	1
 20177  005C56  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 20178  005C58  C0B5  F0A3         	movff	put_fat@bc,??_put_fat+2
 20179  005C5C  C0B6  F0A4         	movff	put_fat@bc+1,??_put_fat+3
 20180  005C60  51A1               	movf	??_put_fat& (0+255),w,b
 20181  005C62  17A3               	andwf	(??_put_fat+2)& (0+255),f,b
 20182  005C64  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20183  005C66  17A4               	andwf	(??_put_fat+3)& (0+255),f,b
 20184  005C68  C097  F0A5         	movff	put_fat@fs,??_put_fat+4
 20185  005C6C  C098  F0A6         	movff	put_fat@fs+1,??_put_fat+5
 20186  005C70  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 20187  005C72  27A5               	addwf	(??_put_fat+4)& (0+255),f,b
 20188  005C74  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 20189  005C76  23A6               	addwfc	(??_put_fat+5)& (0+255),f,b
 20190  005C78  0E2F               	movlw	47
 20191  005C7A  25A5               	addwf	(??_put_fat+4)& (0+255),w,b
 20192  005C7C  6FB3               	movwf	put_fat@p& (0+255),b
 20193  005C7E  0E00               	movlw	0
 20194  005C80  21A6               	addwfc	(??_put_fat+5)& (0+255),w,b
 20195  005C82  6FB4               	movwf	(put_fat@p+1)& (0+255),b
 20196                           
 20197                           ; BSR set to: 0
 20198                           ;ff.c: 1241: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0
      +                          F));
 20199  005C84  B199               	btfsc	put_fat@clst& (0+255),0,b
 20200  005C86  D00E               	goto	l19975
 20201                           
 20202                           ; BSR set to: 0
 20203  005C88  C09E  F0A1         	movff	put_fat@val+1,??_put_fat
 20204  005C8C  0E0F               	movlw	15
 20205  005C8E  17A1               	andwf	??_put_fat& (0+255),f,b
 20206  005C90  C0B3  FFD9         	movff	put_fat@p,fsr2l
 20207  005C94  C0B4  FFDA         	movff	put_fat@p+1,fsr2h
 20208  005C98  50DF               	movf	indf2,w,c
 20209  005C9A  0BF0               	andlw	240
 20210  005C9C  11A1               	iorwf	??_put_fat& (0+255),w,b
 20211  005C9E  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 20212  005CA0  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20213  005CA2  D012               	goto	L13
 20214  005CA4                     l19975:
 20215                           
 20216                           ; BSR set to: 0
 20217  005CA4  C09D  F0A1         	movff	put_fat@val,??_put_fat
 20218  005CA8  C09E  F0A2         	movff	put_fat@val+1,??_put_fat+1
 20219  005CAC  C09F  F0A3         	movff	put_fat@val+2,??_put_fat+2
 20220  005CB0  C0A0  F0A4         	movff	put_fat@val+3,??_put_fat+3
 20221  005CB4  0E05               	movlw	5
 20222  005CB6  D005               	goto	u21690
 20223  005CB8                     u21695:
 20224  005CB8  90D8               	bcf	status,0,c
 20225  005CBA  33A4               	rrcf	(??_put_fat+3)& (0+255),f,b
 20226  005CBC  33A3               	rrcf	(??_put_fat+2)& (0+255),f,b
 20227  005CBE  33A2               	rrcf	(??_put_fat+1)& (0+255),f,b
 20228  005CC0  33A1               	rrcf	??_put_fat& (0+255),f,b
 20229  005CC2                     u21690:
 20230  005CC2  2EE8               	decfsz	wreg,f,c
 20231  005CC4  D7F9               	goto	u21695
 20232  005CC6  51A1               	movf	??_put_fat& (0+255),w,b
 20233  005CC8                     L13:
 20234  005CC8  6FB1               	movwf	_put_fat$706& (0+255),b
 20235  005CCA  6BB2               	clrf	(_put_fat$706+1)& (0+255),b
 20236                           
 20237                           ; BSR set to: 0
 20238  005CCC  C0B3  FFD9         	movff	put_fat@p,fsr2l
 20239  005CD0  C0B4  FFDA         	movff	put_fat@p+1,fsr2h
 20240  005CD4  C0B1  FFDF         	movff	_put_fat$706,indf2
 20241  005CD8  D04F               	goto	L14
 20242  005CDA                     l19979:
 20243                           
 20244                           ; BSR set to: 0
 20245                           ;ff.c: 1246: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 20246  005CDA  C097  F08C         	movff	put_fat@fs,move_window@fs
 20247  005CDE  C098  F08D         	movff	put_fat@fs+1,move_window@fs+1
 20248  005CE2  EE20 F01F          	lfsr	2,31
 20249  005CE6  5197               	movf	put_fat@fs& (0+255),w,b
 20250  005CE8  26D9               	addwf	fsr2l,f,c
 20251  005CEA  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 20252  005CEC  22DA               	addwfc	fsr2h,f,c
 20253  005CEE  CFDE F0A1          	movff	postinc2,??_put_fat
 20254  005CF2  CFDE F0A2          	movff	postinc2,??_put_fat+1
 20255  005CF6  CFDE F0A3          	movff	postinc2,??_put_fat+2
 20256  005CFA  CFDE F0A4          	movff	postinc2,??_put_fat+3
 20257  005CFE  519A               	movf	(put_fat@clst+1)& (0+255),w,b
 20258  005D00  6FA5               	movwf	(??_put_fat+4)& (0+255),b
 20259  005D02  519B               	movf	(put_fat@clst+2)& (0+255),w,b
 20260  005D04  6FA6               	movwf	(??_put_fat+5)& (0+255),b
 20261  005D06  519C               	movf	(put_fat@clst+3)& (0+255),w,b
 20262  005D08  6FA7               	movwf	(??_put_fat+6)& (0+255),b
 20263  005D0A  6BA8               	clrf	(??_put_fat+7)& (0+255),b
 20264  005D0C  51A1               	movf	??_put_fat& (0+255),w,b
 20265  005D0E  25A5               	addwf	(??_put_fat+4)& (0+255),w,b
 20266  005D10  6F8E               	movwf	move_window@sector& (0+255),b
 20267  005D12  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20268  005D14  21A6               	addwfc	(??_put_fat+5)& (0+255),w,b
 20269  005D16  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 20270  005D18  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 20271  005D1A  21A7               	addwfc	(??_put_fat+6)& (0+255),w,b
 20272  005D1C  6F90               	movwf	(move_window@sector+2)& (0+255),b
 20273  005D1E  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 20274  005D20  21A8               	addwfc	(??_put_fat+7)& (0+255),w,b
 20275  005D22  6F91               	movwf	(move_window@sector+3)& (0+255),b
 20276  005D24  EC1B  F067         	call	_move_window	;wreg free
 20277  005D28  6FB7               	movwf	put_fat@res& (0+255),b
 20278                           
 20279                           ; BSR set to: 0
 20280                           ;ff.c: 1247: if (res != FR_OK) break;
 20281  005D2A  51B7               	movf	put_fat@res& (0+255),w,b
 20282  005D2C  A4D8               	btfss	status,2,c
 20283  005D2E  D0E3               	goto	l20005
 20284                           
 20285                           ; BSR set to: 0
 20286                           ;ff.c: 1248: st_word(fs->win + clst * 2 % ((UINT)512), (WORD)val);
 20287  005D30  0EFF               	movlw	255
 20288  005D32  6FA1               	movwf	??_put_fat& (0+255),b
 20289  005D34  0E01               	movlw	1
 20290  005D36  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 20291  005D38  C099  F0A3         	movff	put_fat@clst,??_put_fat+2
 20292  005D3C  C09A  F0A4         	movff	put_fat@clst+1,??_put_fat+3
 20293  005D40  90D8               	bcf	status,0,c
 20294  005D42  37A3               	rlcf	(??_put_fat+2)& (0+255),f,b
 20295  005D44  37A4               	rlcf	(??_put_fat+3)& (0+255),f,b
 20296  005D46  51A1               	movf	??_put_fat& (0+255),w,b
 20297  005D48  17A3               	andwf	(??_put_fat+2)& (0+255),f,b
 20298  005D4A  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20299  005D4C  17A4               	andwf	(??_put_fat+3)& (0+255),f,b
 20300  005D4E  C097  F0A5         	movff	put_fat@fs,??_put_fat+4
 20301  005D52  C098  F0A6         	movff	put_fat@fs+1,??_put_fat+5
 20302  005D56  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 20303  005D58  27A5               	addwf	(??_put_fat+4)& (0+255),f,b
 20304  005D5A  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 20305  005D5C  23A6               	addwfc	(??_put_fat+5)& (0+255),f,b
 20306  005D5E  0E2F               	movlw	47
 20307  005D60  25A5               	addwf	(??_put_fat+4)& (0+255),w,b
 20308  005D62  6E0E               	movwf	st_word@ptr^0,c
 20309  005D64  0E00               	movlw	0
 20310  005D66  21A6               	addwfc	(??_put_fat+5)& (0+255),w,b
 20311  005D68  6E0F               	movwf	(st_word@ptr+1)^0,c
 20312  005D6A  C09D  F010         	movff	put_fat@val,st_word@val
 20313  005D6E  C09E  F011         	movff	put_fat@val+1,st_word@val+1
 20314  005D72  ECAF  F078         	call	_st_word	;wreg free
 20315  005D76  D0AF               	goto	l19999
 20316  005D78                     L14:
 20317  005D78  EE20 F003          	lfsr	2,3
 20318  005D7C  5197               	movf	put_fat@fs& (0+255),w,b
 20319  005D7E  26D9               	addwf	fsr2l,f,c
 20320  005D80  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 20321  005D82  22DA               	addwfc	fsr2h,f,c
 20322  005D84  0E01               	movlw	1
 20323  005D86  6EDF               	movwf	indf2,c
 20324                           
 20325                           ;ff.c: 1250: break;
 20326  005D88  D0B6               	goto	l20005
 20327  005D8A                     l19989:
 20328                           
 20329                           ; BSR set to: 0
 20330                           ;ff.c: 1256: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 20331  005D8A  C097  F08C         	movff	put_fat@fs,move_window@fs
 20332  005D8E  C098  F08D         	movff	put_fat@fs+1,move_window@fs+1
 20333  005D92  EE20 F01F          	lfsr	2,31
 20334  005D96  5197               	movf	put_fat@fs& (0+255),w,b
 20335  005D98  26D9               	addwf	fsr2l,f,c
 20336  005D9A  5198               	movf	(put_fat@fs+1)& (0+255),w,b
 20337  005D9C  22DA               	addwfc	fsr2h,f,c
 20338  005D9E  CFDE F0A1          	movff	postinc2,??_put_fat
 20339  005DA2  CFDE F0A2          	movff	postinc2,??_put_fat+1
 20340  005DA6  CFDE F0A3          	movff	postinc2,??_put_fat+2
 20341  005DAA  CFDE F0A4          	movff	postinc2,??_put_fat+3
 20342  005DAE  C099  F0A5         	movff	put_fat@clst,??_put_fat+4
 20343  005DB2  C09A  F0A6         	movff	put_fat@clst+1,??_put_fat+5
 20344  005DB6  C09B  F0A7         	movff	put_fat@clst+2,??_put_fat+6
 20345  005DBA  C09C  F0A8         	movff	put_fat@clst+3,??_put_fat+7
 20346  005DBE  0E08               	movlw	8
 20347  005DC0  D005               	goto	u21710
 20348  005DC2                     u21715:
 20349  005DC2  90D8               	bcf	status,0,c
 20350  005DC4  33A8               	rrcf	(??_put_fat+7)& (0+255),f,b
 20351  005DC6  33A7               	rrcf	(??_put_fat+6)& (0+255),f,b
 20352  005DC8  33A6               	rrcf	(??_put_fat+5)& (0+255),f,b
 20353  005DCA  33A5               	rrcf	(??_put_fat+4)& (0+255),f,b
 20354  005DCC                     u21710:
 20355  005DCC  2EE8               	decfsz	wreg,f,c
 20356  005DCE  D7F9               	goto	u21715
 20357  005DD0  51A1               	movf	??_put_fat& (0+255),w,b
 20358  005DD2  25A5               	addwf	(??_put_fat+4)& (0+255),w,b
 20359  005DD4  6F8E               	movwf	move_window@sector& (0+255),b
 20360  005DD6  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20361  005DD8  21A6               	addwfc	(??_put_fat+5)& (0+255),w,b
 20362  005DDA  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 20363  005DDC  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 20364  005DDE  21A7               	addwfc	(??_put_fat+6)& (0+255),w,b
 20365  005DE0  6F90               	movwf	(move_window@sector+2)& (0+255),b
 20366  005DE2  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 20367  005DE4  21A8               	addwfc	(??_put_fat+7)& (0+255),w,b
 20368  005DE6  6F91               	movwf	(move_window@sector+3)& (0+255),b
 20369  005DE8  EC1B  F067         	call	_move_window	;wreg free
 20370  005DEC  6FB7               	movwf	put_fat@res& (0+255),b
 20371                           
 20372                           ; BSR set to: 0
 20373                           ;ff.c: 1257: if (res != FR_OK) break;
 20374  005DEE  51B7               	movf	put_fat@res& (0+255),w,b
 20375  005DF0  A4D8               	btfss	status,2,c
 20376  005DF2  D081               	goto	l20005
 20377                           
 20378                           ; BSR set to: 0
 20379                           ;ff.c: 1259: val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0x
      +                          F0000000);
 20380  005DF4  0EFF               	movlw	255
 20381  005DF6  6FA1               	movwf	??_put_fat& (0+255),b
 20382  005DF8  0E01               	movlw	1
 20383  005DFA  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 20384  005DFC  C099  F0A3         	movff	put_fat@clst,??_put_fat+2
 20385  005E00  C09A  F0A4         	movff	put_fat@clst+1,??_put_fat+3
 20386  005E04  90D8               	bcf	status,0,c
 20387  005E06  37A3               	rlcf	(??_put_fat+2)& (0+255),f,b
 20388  005E08  37A4               	rlcf	(??_put_fat+3)& (0+255),f,b
 20389  005E0A  90D8               	bcf	status,0,c
 20390  005E0C  37A3               	rlcf	(??_put_fat+2)& (0+255),f,b
 20391  005E0E  37A4               	rlcf	(??_put_fat+3)& (0+255),f,b
 20392  005E10  51A1               	movf	??_put_fat& (0+255),w,b
 20393  005E12  17A3               	andwf	(??_put_fat+2)& (0+255),f,b
 20394  005E14  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20395  005E16  17A4               	andwf	(??_put_fat+3)& (0+255),f,b
 20396  005E18  C097  F0A5         	movff	put_fat@fs,??_put_fat+4
 20397  005E1C  C098  F0A6         	movff	put_fat@fs+1,??_put_fat+5
 20398  005E20  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 20399  005E22  27A5               	addwf	(??_put_fat+4)& (0+255),f,b
 20400  005E24  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 20401  005E26  23A6               	addwfc	(??_put_fat+5)& (0+255),f,b
 20402  005E28  0E2F               	movlw	47
 20403  005E2A  25A5               	addwf	(??_put_fat+4)& (0+255),w,b
 20404  005E2C  6E0E               	movwf	ld_dword@ptr^0,c
 20405  005E2E  0E00               	movlw	0
 20406  005E30  21A6               	addwfc	(??_put_fat+5)& (0+255),w,b
 20407  005E32  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 20408  005E34  ECB4  F065         	call	_ld_dword	;wreg free
 20409  005E38  0E00               	movlw	0
 20410  005E3A  140E               	andwf	?_ld_dword^0,w,c
 20411  005E3C  0100               	movlb	0	; () banked
 20412  005E3E  6FA7               	movwf	(??_put_fat+6)& (0+255),b
 20413  005E40  0E00               	movlw	0
 20414  005E42  140F               	andwf	(?_ld_dword+1)^0,w,c
 20415  005E44  6FA8               	movwf	(??_put_fat+7)& (0+255),b
 20416  005E46  0E00               	movlw	0
 20417  005E48  1410               	andwf	(?_ld_dword+2)^0,w,c
 20418  005E4A  6FA9               	movwf	(??_put_fat+8)& (0+255),b
 20419  005E4C  0EF0               	movlw	240
 20420  005E4E  1411               	andwf	(?_ld_dword+3)^0,w,c
 20421  005E50  6FAA               	movwf	(??_put_fat+9)& (0+255),b
 20422  005E52  0EFF               	movlw	255
 20423  005E54  159D               	andwf	put_fat@val& (0+255),w,b
 20424  005E56  6FAB               	movwf	(??_put_fat+10)& (0+255),b
 20425  005E58  0EFF               	movlw	255
 20426  005E5A  159E               	andwf	(put_fat@val+1)& (0+255),w,b
 20427  005E5C  6FAC               	movwf	(??_put_fat+11)& (0+255),b
 20428  005E5E  0EFF               	movlw	255
 20429  005E60  159F               	andwf	(put_fat@val+2)& (0+255),w,b
 20430  005E62  6FAD               	movwf	(??_put_fat+12)& (0+255),b
 20431  005E64  0E0F               	movlw	15
 20432  005E66  15A0               	andwf	(put_fat@val+3)& (0+255),w,b
 20433  005E68  6FAE               	movwf	(??_put_fat+13)& (0+255),b
 20434  005E6A  51A7               	movf	(??_put_fat+6)& (0+255),w,b
 20435  005E6C  11AB               	iorwf	(??_put_fat+10)& (0+255),w,b
 20436  005E6E  6F9D               	movwf	put_fat@val& (0+255),b
 20437  005E70  51A8               	movf	(??_put_fat+7)& (0+255),w,b
 20438  005E72  11AC               	iorwf	(??_put_fat+11)& (0+255),w,b
 20439  005E74  6F9E               	movwf	(put_fat@val+1)& (0+255),b
 20440  005E76  51A9               	movf	(??_put_fat+8)& (0+255),w,b
 20441  005E78  11AD               	iorwf	(??_put_fat+12)& (0+255),w,b
 20442  005E7A  6F9F               	movwf	(put_fat@val+2)& (0+255),b
 20443  005E7C  51AA               	movf	(??_put_fat+9)& (0+255),w,b
 20444  005E7E  11AE               	iorwf	(??_put_fat+13)& (0+255),w,b
 20445  005E80  6FA0               	movwf	(put_fat@val+3)& (0+255),b
 20446                           
 20447                           ; BSR set to: 0
 20448                           ;ff.c: 1260: };ff.c: 1261: st_dword(fs->win + clst * 4 % ((UINT)512), val);
 20449  005E82  0EFF               	movlw	255
 20450  005E84  6FA1               	movwf	??_put_fat& (0+255),b
 20451  005E86  0E01               	movlw	1
 20452  005E88  6FA2               	movwf	(??_put_fat+1)& (0+255),b
 20453  005E8A  C099  F0A3         	movff	put_fat@clst,??_put_fat+2
 20454  005E8E  C09A  F0A4         	movff	put_fat@clst+1,??_put_fat+3
 20455  005E92  90D8               	bcf	status,0,c
 20456  005E94  37A3               	rlcf	(??_put_fat+2)& (0+255),f,b
 20457  005E96  37A4               	rlcf	(??_put_fat+3)& (0+255),f,b
 20458  005E98  90D8               	bcf	status,0,c
 20459  005E9A  37A3               	rlcf	(??_put_fat+2)& (0+255),f,b
 20460  005E9C  37A4               	rlcf	(??_put_fat+3)& (0+255),f,b
 20461  005E9E  51A1               	movf	??_put_fat& (0+255),w,b
 20462  005EA0  17A3               	andwf	(??_put_fat+2)& (0+255),f,b
 20463  005EA2  51A2               	movf	(??_put_fat+1)& (0+255),w,b
 20464  005EA4  17A4               	andwf	(??_put_fat+3)& (0+255),f,b
 20465  005EA6  C097  F0A5         	movff	put_fat@fs,??_put_fat+4
 20466  005EAA  C098  F0A6         	movff	put_fat@fs+1,??_put_fat+5
 20467  005EAE  51A3               	movf	(??_put_fat+2)& (0+255),w,b
 20468  005EB0  27A5               	addwf	(??_put_fat+4)& (0+255),f,b
 20469  005EB2  51A4               	movf	(??_put_fat+3)& (0+255),w,b
 20470  005EB4  23A6               	addwfc	(??_put_fat+5)& (0+255),f,b
 20471  005EB6  0E2F               	movlw	47
 20472  005EB8  25A5               	addwf	(??_put_fat+4)& (0+255),w,b
 20473  005EBA  6E24               	movwf	st_dword@ptr^0,c
 20474  005EBC  0E00               	movlw	0
 20475  005EBE  21A6               	addwfc	(??_put_fat+5)& (0+255),w,b
 20476  005EC0  6E25               	movwf	(st_dword@ptr+1)^0,c
 20477  005EC2  C09D  F026         	movff	put_fat@val,st_dword@val
 20478  005EC6  C09E  F027         	movff	put_fat@val+1,st_dword@val+1
 20479  005ECA  C09F  F028         	movff	put_fat@val+2,st_dword@val+2
 20480  005ECE  C0A0  F029         	movff	put_fat@val+3,st_dword@val+3
 20481  005ED2  EC6E  F06F         	call	_st_dword	;wreg free
 20482  005ED6                     l19999:
 20483                           
 20484                           ;ff.c: 1262: fs->wflag = 1;
 20485  005ED6  0100               	movlb	0	; () banked
 20486  005ED8  D74F               	goto	L14
 20487  005EDA                     l20003:
 20488                           
 20489                           ; BSR set to: 0
 20490  005EDA  C097  FFD9         	movff	put_fat@fs,fsr2l
 20491  005EDE  C098  FFDA         	movff	put_fat@fs+1,fsr2h
 20492  005EE2  50DF               	movf	indf2,w,c
 20493                           
 20494                           ; Switch size 1, requested type "simple"
 20495                           ; Number of cases is 3, Range of values is 1 to 3
 20496                           ; switch strategies available:
 20497                           ; Name         Instructions Cycles
 20498                           ; simple_byte           10     6 (average)
 20499                           ;	Chosen strategy is simple_byte
 20500  005EE4  0A01               	xorlw	1	; case 1
 20501  005EE6  B4D8               	btfsc	status,2,c
 20502  005EE8  D5FE               	goto	l291
 20503  005EEA  0A03               	xorlw	3	; case 2
 20504  005EEC  B4D8               	btfsc	status,2,c
 20505  005EEE  D6F5               	goto	l19979
 20506  005EF0  0A01               	xorlw	1	; case 3
 20507  005EF2  B4D8               	btfsc	status,2,c
 20508  005EF4  D74A               	goto	l19989
 20509  005EF6                     l20005:
 20510                           
 20511                           ; BSR set to: 0
 20512                           ;ff.c: 1265: };ff.c: 1266: return res;
 20513  005EF6  51B7               	movf	put_fat@res& (0+255),w,b
 20514                           
 20515                           ; BSR set to: 0
 20516  005EF8  0012               	return		;funcret
 20517  005EFA                     __end_of_put_fat:
 20518                           	callstack 0
 20519                           
 20520 ;; *************** function _get_fat *****************
 20521 ;; Defined at:
 20522 ;;		line 1141 in file "mcc_generated_files/fatfs/ff.c"
 20523 ;; Parameters:    Size  Location     Type
 20524 ;;  obj             2   55[BANK0 ] PTR struct .
 20525 ;;		 -> file(34), f_open@dj(40), file@fatfs_demo$F388(34), 
 20526 ;;  clst            4   57[BANK0 ] unsigned long 
 20527 ;; Auto vars:     Size  Location     Type
 20528 ;;  val             4   74[BANK0 ] unsigned long 
 20529 ;;  fs              2   80[BANK0 ] PTR struct .
 20530 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 20531 ;;  bc              2   78[BANK0 ] unsigned int 
 20532 ;;  wc              2   72[BANK0 ] unsigned int 
 20533 ;; Return value:  Size  Location     Type
 20534 ;;                  4   55[BANK0 ] unsigned long 
 20535 ;; Registers used:
 20536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 20537 ;; Tracked objects:
 20538 ;;		On entry : 3E/1
 20539 ;;		On exit  : 3F/0
 20540 ;;		Unchanged: 0/0
 20541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20542 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20543 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20544 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20545 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20546 ;;Total ram usage:       27 bytes
 20547 ;; Hardware stack levels used:    1
 20548 ;; Hardware stack levels required when called:   13
 20549 ;; This function calls:
 20550 ;;		_ld_dword
 20551 ;;		_ld_word
 20552 ;;		_move_window
 20553 ;; This function is called by:
 20554 ;;		_remove_chain
 20555 ;;		_create_chain
 20556 ;;		_dir_sdi
 20557 ;;		_dir_next
 20558 ;;		_f_open
 20559 ;; This function uses a non-reentrant model
 20560 ;;
 20561                           
 20562                           	psect	text68
 20563  0066D8                     __ptext68:
 20564                           	callstack 0
 20565  0066D8                     _get_fat:
 20566                           	callstack 14
 20567                           
 20568                           ;ff.c: 1146: UINT wc, bc;;ff.c: 1147: DWORD val;;ff.c: 1148: FATFS *fs = obj->fs;
 20569                           
 20570                           ; BSR set to: 0
 20571                           ;incstack = 0
 20572  0066D8  C097  FFD9         	movff	get_fat@obj,fsr2l
 20573  0066DC  C098  FFDA         	movff	get_fat@obj+1,fsr2h
 20574  0066E0  CFDE F0B0          	movff	postinc2,get_fat@fs
 20575  0066E4  CFDD F0B1          	movff	postdec2,get_fat@fs+1
 20576                           
 20577                           ;ff.c: 1151: if (clst < 2 || clst >= fs->n_fatent) {
 20578  0066E8  0100               	movlb	0	; () banked
 20579  0066EA  519C               	movf	(get_fat@clst+3)& (0+255),w,b
 20580  0066EC  119B               	iorwf	(get_fat@clst+2)& (0+255),w,b
 20581  0066EE  119A               	iorwf	(get_fat@clst+1)& (0+255),w,b
 20582  0066F0  E104               	bnz	u21500
 20583  0066F2  0E02               	movlw	2
 20584  0066F4  5D99               	subwf	get_fat@clst& (0+255),w,b
 20585  0066F6  A0D8               	btfss	status,0,c
 20586  0066F8  D010               	goto	u21510
 20587  0066FA                     u21500:
 20588                           
 20589                           ; BSR set to: 0
 20590  0066FA  EE20 F013          	lfsr	2,19
 20591  0066FE  51B0               	movf	get_fat@fs& (0+255),w,b
 20592  006700  26D9               	addwf	fsr2l,f,c
 20593  006702  51B1               	movf	(get_fat@fs+1)& (0+255),w,b
 20594  006704  22DA               	addwfc	fsr2h,f,c
 20595  006706  50DE               	movf	postinc2,w,c
 20596  006708  5D99               	subwf	get_fat@clst& (0+255),w,b
 20597  00670A  50DE               	movf	postinc2,w,c
 20598  00670C  599A               	subwfb	(get_fat@clst+1)& (0+255),w,b
 20599  00670E  50DE               	movf	postinc2,w,c
 20600  006710  599B               	subwfb	(get_fat@clst+2)& (0+255),w,b
 20601  006712  50DE               	movf	postinc2,w,c
 20602  006714  599C               	subwfb	(get_fat@clst+3)& (0+255),w,b
 20603  006716  A0D8               	btfss	status,0,c
 20604  006718  D008               	goto	l268
 20605  00671A                     u21510:
 20606                           
 20607                           ; BSR set to: 0
 20608                           ;ff.c: 1152: val = 1;
 20609  00671A  0E01               	movlw	1
 20610  00671C  6FAA               	movwf	get_fat@val& (0+255),b
 20611  00671E  0E00               	movlw	0
 20612  006720  6FAB               	movwf	(get_fat@val+1)& (0+255),b
 20613  006722  0E00               	movlw	0
 20614  006724  6FAC               	movwf	(get_fat@val+2)& (0+255),b
 20615  006726  0E00               	movlw	0
 20616  006728  D182               	goto	L15
 20617  00672A                     l268:
 20618                           
 20619                           ; BSR set to: 0
 20620                           ;ff.c: 1155: val = 0xFFFFFFFF;
 20621  00672A  69AA               	setf	get_fat@val& (0+255),b
 20622  00672C  69AB               	setf	(get_fat@val+1)& (0+255),b
 20623  00672E  69AC               	setf	(get_fat@val+2)& (0+255),b
 20624  006730  69AD               	setf	(get_fat@val+3)& (0+255),b
 20625                           
 20626                           ;ff.c: 1157: switch (fs->fs_type) {
 20627  006732  D17F               	goto	l19931
 20628  006734                     l273:
 20629                           
 20630                           ; BSR set to: 0
 20631                           ;ff.c: 1159: bc = (UINT)clst; bc += bc / 2;
 20632  006734  C099  F0AE         	movff	get_fat@clst,get_fat@bc
 20633  006738  C09A  F0AF         	movff	get_fat@clst+1,get_fat@bc+1
 20634                           
 20635                           ; BSR set to: 0
 20636  00673C  90D8               	bcf	status,0,c
 20637  00673E  31AF               	rrcf	(get_fat@bc+1)& (0+255),w,b
 20638  006740  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 20639  006742  31AE               	rrcf	get_fat@bc& (0+255),w,b
 20640  006744  6F9D               	movwf	??_get_fat& (0+255),b
 20641  006746  519D               	movf	??_get_fat& (0+255),w,b
 20642  006748  27AE               	addwf	get_fat@bc& (0+255),f,b
 20643  00674A  519E               	movf	(??_get_fat+1)& (0+255),w,b
 20644  00674C  23AF               	addwfc	(get_fat@bc+1)& (0+255),f,b
 20645                           
 20646                           ; BSR set to: 0
 20647                           ;ff.c: 1160: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 20648  00674E  C0B0  F08C         	movff	get_fat@fs,move_window@fs
 20649  006752  C0B1  F08D         	movff	get_fat@fs+1,move_window@fs+1
 20650  006756  EE20 F01F          	lfsr	2,31
 20651  00675A  51B0               	movf	get_fat@fs& (0+255),w,b
 20652  00675C  26D9               	addwf	fsr2l,f,c
 20653  00675E  51B1               	movf	(get_fat@fs+1)& (0+255),w,b
 20654  006760  22DA               	addwfc	fsr2h,f,c
 20655  006762  CFDE F09D          	movff	postinc2,??_get_fat
 20656  006766  CFDE F09E          	movff	postinc2,??_get_fat+1
 20657  00676A  CFDE F09F          	movff	postinc2,??_get_fat+2
 20658  00676E  CFDE F0A0          	movff	postinc2,??_get_fat+3
 20659  006772  C0AE  F0A1         	movff	get_fat@bc,??_get_fat+4
 20660  006776  C0AF  F0A2         	movff	get_fat@bc+1,??_get_fat+5
 20661  00677A  0E09               	movlw	9
 20662  00677C  6FA3               	movwf	(??_get_fat+6)& (0+255),b
 20663  00677E                     u21525:
 20664  00677E  90D8               	bcf	status,0,c
 20665  006780  33A2               	rrcf	(??_get_fat+5)& (0+255),f,b
 20666  006782  33A1               	rrcf	(??_get_fat+4)& (0+255),f,b
 20667  006784  2FA3               	decfsz	(??_get_fat+6)& (0+255),f,b
 20668  006786  D7FB               	goto	u21525
 20669  006788  51A1               	movf	(??_get_fat+4)& (0+255),w,b
 20670  00678A  259D               	addwf	??_get_fat& (0+255),w,b
 20671  00678C  6F8E               	movwf	move_window@sector& (0+255),b
 20672  00678E  51A2               	movf	(??_get_fat+5)& (0+255),w,b
 20673  006790  219E               	addwfc	(??_get_fat+1)& (0+255),w,b
 20674  006792  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 20675  006794  0E00               	movlw	0
 20676  006796  219F               	addwfc	(??_get_fat+2)& (0+255),w,b
 20677  006798  6F90               	movwf	(move_window@sector+2)& (0+255),b
 20678  00679A  0E00               	movlw	0
 20679  00679C  21A0               	addwfc	(??_get_fat+3)& (0+255),w,b
 20680  00679E  6F91               	movwf	(move_window@sector+3)& (0+255),b
 20681  0067A0  EC1B  F067         	call	_move_window	;wreg free
 20682  0067A4  0900               	iorlw	0
 20683  0067A6  A4D8               	btfss	status,2,c
 20684  0067A8  D153               	goto	l271
 20685                           
 20686                           ; BSR set to: 0
 20687                           ;ff.c: 1161: wc = fs->win[bc++ % ((UINT)512)];
 20688  0067AA  0EFF               	movlw	255
 20689  0067AC  6F9D               	movwf	??_get_fat& (0+255),b
 20690  0067AE  0E01               	movlw	1
 20691  0067B0  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 20692  0067B2  C0AE  F09F         	movff	get_fat@bc,??_get_fat+2
 20693  0067B6  C0AF  F0A0         	movff	get_fat@bc+1,??_get_fat+3
 20694  0067BA  519D               	movf	??_get_fat& (0+255),w,b
 20695  0067BC  179F               	andwf	(??_get_fat+2)& (0+255),f,b
 20696  0067BE  519E               	movf	(??_get_fat+1)& (0+255),w,b
 20697  0067C0  17A0               	andwf	(??_get_fat+3)& (0+255),f,b
 20698  0067C2  C0B0  F0A1         	movff	get_fat@fs,??_get_fat+4
 20699  0067C6  C0B1  F0A2         	movff	get_fat@fs+1,??_get_fat+5
 20700  0067CA  519F               	movf	(??_get_fat+2)& (0+255),w,b
 20701  0067CC  27A1               	addwf	(??_get_fat+4)& (0+255),f,b
 20702  0067CE  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 20703  0067D0  23A2               	addwfc	(??_get_fat+5)& (0+255),f,b
 20704  0067D2  0E2F               	movlw	47
 20705  0067D4  25A1               	addwf	(??_get_fat+4)& (0+255),w,b
 20706  0067D6  6ED9               	movwf	fsr2l,c
 20707  0067D8  0E00               	movlw	0
 20708  0067DA  21A2               	addwfc	(??_get_fat+5)& (0+255),w,b
 20709  0067DC  6EDA               	movwf	fsr2h,c
 20710  0067DE  50DF               	movf	indf2,w,c
 20711  0067E0  6FA3               	movwf	(??_get_fat+6)& (0+255),b
 20712  0067E2  51A3               	movf	(??_get_fat+6)& (0+255),w,b
 20713  0067E4  6FA8               	movwf	get_fat@wc& (0+255),b
 20714  0067E6  6BA9               	clrf	(get_fat@wc+1)& (0+255),b
 20715                           
 20716                           ; BSR set to: 0
 20717  0067E8  4BAE               	infsnz	get_fat@bc& (0+255),f,b
 20718  0067EA  2BAF               	incf	(get_fat@bc+1)& (0+255),f,b
 20719                           
 20720                           ; BSR set to: 0
 20721                           ;ff.c: 1162: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 20722  0067EC  C0B0  F08C         	movff	get_fat@fs,move_window@fs
 20723  0067F0  C0B1  F08D         	movff	get_fat@fs+1,move_window@fs+1
 20724  0067F4  EE20 F01F          	lfsr	2,31
 20725  0067F8  51B0               	movf	get_fat@fs& (0+255),w,b
 20726  0067FA  26D9               	addwf	fsr2l,f,c
 20727  0067FC  51B1               	movf	(get_fat@fs+1)& (0+255),w,b
 20728  0067FE  22DA               	addwfc	fsr2h,f,c
 20729  006800  CFDE F09D          	movff	postinc2,??_get_fat
 20730  006804  CFDE F09E          	movff	postinc2,??_get_fat+1
 20731  006808  CFDE F09F          	movff	postinc2,??_get_fat+2
 20732  00680C  CFDE F0A0          	movff	postinc2,??_get_fat+3
 20733  006810  C0AE  F0A1         	movff	get_fat@bc,??_get_fat+4
 20734  006814  C0AF  F0A2         	movff	get_fat@bc+1,??_get_fat+5
 20735  006818  0E09               	movlw	9
 20736  00681A  6FA3               	movwf	(??_get_fat+6)& (0+255),b
 20737  00681C                     u21545:
 20738  00681C  90D8               	bcf	status,0,c
 20739  00681E  33A2               	rrcf	(??_get_fat+5)& (0+255),f,b
 20740  006820  33A1               	rrcf	(??_get_fat+4)& (0+255),f,b
 20741  006822  2FA3               	decfsz	(??_get_fat+6)& (0+255),f,b
 20742  006824  D7FB               	goto	u21545
 20743  006826  51A1               	movf	(??_get_fat+4)& (0+255),w,b
 20744  006828  259D               	addwf	??_get_fat& (0+255),w,b
 20745  00682A  6F8E               	movwf	move_window@sector& (0+255),b
 20746  00682C  51A2               	movf	(??_get_fat+5)& (0+255),w,b
 20747  00682E  219E               	addwfc	(??_get_fat+1)& (0+255),w,b
 20748  006830  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 20749  006832  0E00               	movlw	0
 20750  006834  219F               	addwfc	(??_get_fat+2)& (0+255),w,b
 20751  006836  6F90               	movwf	(move_window@sector+2)& (0+255),b
 20752  006838  0E00               	movlw	0
 20753  00683A  21A0               	addwfc	(??_get_fat+3)& (0+255),w,b
 20754  00683C  6F91               	movwf	(move_window@sector+3)& (0+255),b
 20755  00683E  EC1B  F067         	call	_move_window	;wreg free
 20756  006842  0900               	iorlw	0
 20757  006844  A4D8               	btfss	status,2,c
 20758  006846  D104               	goto	l271
 20759                           
 20760                           ; BSR set to: 0
 20761                           ;ff.c: 1163: wc |= fs->win[bc % ((UINT)512)] << 8;
 20762  006848  0EFF               	movlw	255
 20763  00684A  6F9D               	movwf	??_get_fat& (0+255),b
 20764  00684C  0E01               	movlw	1
 20765  00684E  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 20766  006850  C0AE  F09F         	movff	get_fat@bc,??_get_fat+2
 20767  006854  C0AF  F0A0         	movff	get_fat@bc+1,??_get_fat+3
 20768  006858  519D               	movf	??_get_fat& (0+255),w,b
 20769  00685A  179F               	andwf	(??_get_fat+2)& (0+255),f,b
 20770  00685C  519E               	movf	(??_get_fat+1)& (0+255),w,b
 20771  00685E  17A0               	andwf	(??_get_fat+3)& (0+255),f,b
 20772  006860  C0B0  F0A1         	movff	get_fat@fs,??_get_fat+4
 20773  006864  C0B1  F0A2         	movff	get_fat@fs+1,??_get_fat+5
 20774  006868  519F               	movf	(??_get_fat+2)& (0+255),w,b
 20775  00686A  27A1               	addwf	(??_get_fat+4)& (0+255),f,b
 20776  00686C  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 20777  00686E  23A2               	addwfc	(??_get_fat+5)& (0+255),f,b
 20778  006870  0E2F               	movlw	47
 20779  006872  25A1               	addwf	(??_get_fat+4)& (0+255),w,b
 20780  006874  6ED9               	movwf	fsr2l,c
 20781  006876  0E00               	movlw	0
 20782  006878  21A2               	addwfc	(??_get_fat+5)& (0+255),w,b
 20783  00687A  6EDA               	movwf	fsr2h,c
 20784  00687C  50DF               	movf	indf2,w,c
 20785  00687E  6FA3               	movwf	(??_get_fat+6)& (0+255),b
 20786  006880  51A3               	movf	(??_get_fat+6)& (0+255),w,b
 20787  006882  6FA5               	movwf	(??_get_fat+8)& (0+255),b
 20788  006884  6BA4               	clrf	(??_get_fat+7)& (0+255),b
 20789  006886  51A4               	movf	(??_get_fat+7)& (0+255),w,b
 20790  006888  13A8               	iorwf	get_fat@wc& (0+255),f,b
 20791  00688A  51A5               	movf	(??_get_fat+8)& (0+255),w,b
 20792  00688C  13A9               	iorwf	(get_fat@wc+1)& (0+255),f,b
 20793                           
 20794                           ; BSR set to: 0
 20795                           ;ff.c: 1164: val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 20796  00688E  B199               	btfsc	get_fat@clst& (0+255),0,b
 20797  006890  D007               	goto	l19913
 20798                           
 20799                           ; BSR set to: 0
 20800  006892  0EFF               	movlw	255
 20801  006894  15A8               	andwf	get_fat@wc& (0+255),w,b
 20802  006896  6FA6               	movwf	_get_fat$677& (0+255),b
 20803  006898  0E0F               	movlw	15
 20804  00689A  15A9               	andwf	(get_fat@wc+1)& (0+255),w,b
 20805  00689C  6FA7               	movwf	(_get_fat$677+1)& (0+255),b
 20806  00689E  D00F               	goto	l19915
 20807  0068A0                     l19913:
 20808                           
 20809                           ; BSR set to: 0
 20810  0068A0  C0A8  F09D         	movff	get_fat@wc,??_get_fat
 20811  0068A4  C0A9  F09E         	movff	get_fat@wc+1,??_get_fat+1
 20812  0068A8  0E04               	movlw	4
 20813  0068AA  6F9F               	movwf	(??_get_fat+2)& (0+255),b
 20814  0068AC                     u21575:
 20815  0068AC  90D8               	bcf	status,0,c
 20816  0068AE  339E               	rrcf	(??_get_fat+1)& (0+255),f,b
 20817  0068B0  339D               	rrcf	??_get_fat& (0+255),f,b
 20818  0068B2  2F9F               	decfsz	(??_get_fat+2)& (0+255),f,b
 20819  0068B4  D7FB               	goto	u21575
 20820  0068B6  C09D  F0A6         	movff	??_get_fat,_get_fat$677
 20821  0068BA  C09E  F0A7         	movff	??_get_fat+1,_get_fat$677+1
 20822  0068BE                     l19915:
 20823                           
 20824                           ; BSR set to: 0
 20825  0068BE  C0A6  F0AA         	movff	_get_fat$677,get_fat@val
 20826  0068C2  C0A7  F0AB         	movff	_get_fat$677+1,get_fat@val+1
 20827  0068C6  D04E               	goto	L16
 20828  0068C8                     l19917:
 20829                           
 20830                           ; BSR set to: 0
 20831                           ;ff.c: 1168: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) bre
      +                          ak;
 20832  0068C8  C0B0  F08C         	movff	get_fat@fs,move_window@fs
 20833  0068CC  C0B1  F08D         	movff	get_fat@fs+1,move_window@fs+1
 20834  0068D0  EE20 F01F          	lfsr	2,31
 20835  0068D4  51B0               	movf	get_fat@fs& (0+255),w,b
 20836  0068D6  26D9               	addwf	fsr2l,f,c
 20837  0068D8  51B1               	movf	(get_fat@fs+1)& (0+255),w,b
 20838  0068DA  22DA               	addwfc	fsr2h,f,c
 20839  0068DC  CFDE F09D          	movff	postinc2,??_get_fat
 20840  0068E0  CFDE F09E          	movff	postinc2,??_get_fat+1
 20841  0068E4  CFDE F09F          	movff	postinc2,??_get_fat+2
 20842  0068E8  CFDE F0A0          	movff	postinc2,??_get_fat+3
 20843  0068EC  519A               	movf	(get_fat@clst+1)& (0+255),w,b
 20844  0068EE  6FA1               	movwf	(??_get_fat+4)& (0+255),b
 20845  0068F0  519B               	movf	(get_fat@clst+2)& (0+255),w,b
 20846  0068F2  6FA2               	movwf	(??_get_fat+5)& (0+255),b
 20847  0068F4  519C               	movf	(get_fat@clst+3)& (0+255),w,b
 20848  0068F6  6FA3               	movwf	(??_get_fat+6)& (0+255),b
 20849  0068F8  6BA4               	clrf	(??_get_fat+7)& (0+255),b
 20850  0068FA  519D               	movf	??_get_fat& (0+255),w,b
 20851  0068FC  25A1               	addwf	(??_get_fat+4)& (0+255),w,b
 20852  0068FE  6F8E               	movwf	move_window@sector& (0+255),b
 20853  006900  519E               	movf	(??_get_fat+1)& (0+255),w,b
 20854  006902  21A2               	addwfc	(??_get_fat+5)& (0+255),w,b
 20855  006904  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 20856  006906  519F               	movf	(??_get_fat+2)& (0+255),w,b
 20857  006908  21A3               	addwfc	(??_get_fat+6)& (0+255),w,b
 20858  00690A  6F90               	movwf	(move_window@sector+2)& (0+255),b
 20859  00690C  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 20860  00690E  21A4               	addwfc	(??_get_fat+7)& (0+255),w,b
 20861  006910  6F91               	movwf	(move_window@sector+3)& (0+255),b
 20862  006912  EC1B  F067         	call	_move_window	;wreg free
 20863  006916  0900               	iorlw	0
 20864  006918  A4D8               	btfss	status,2,c
 20865  00691A  D09A               	goto	l271
 20866                           
 20867                           ; BSR set to: 0
 20868                           ;ff.c: 1169: val = ld_word(fs->win + clst * 2 % ((UINT)512));
 20869  00691C  0EFF               	movlw	255
 20870  00691E  6F9D               	movwf	??_get_fat& (0+255),b
 20871  006920  0E01               	movlw	1
 20872  006922  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 20873  006924  C099  F09F         	movff	get_fat@clst,??_get_fat+2
 20874  006928  C09A  F0A0         	movff	get_fat@clst+1,??_get_fat+3
 20875  00692C  90D8               	bcf	status,0,c
 20876  00692E  379F               	rlcf	(??_get_fat+2)& (0+255),f,b
 20877  006930  37A0               	rlcf	(??_get_fat+3)& (0+255),f,b
 20878  006932  519D               	movf	??_get_fat& (0+255),w,b
 20879  006934  179F               	andwf	(??_get_fat+2)& (0+255),f,b
 20880  006936  519E               	movf	(??_get_fat+1)& (0+255),w,b
 20881  006938  17A0               	andwf	(??_get_fat+3)& (0+255),f,b
 20882  00693A  C0B0  F0A1         	movff	get_fat@fs,??_get_fat+4
 20883  00693E  C0B1  F0A2         	movff	get_fat@fs+1,??_get_fat+5
 20884  006942  519F               	movf	(??_get_fat+2)& (0+255),w,b
 20885  006944  27A1               	addwf	(??_get_fat+4)& (0+255),f,b
 20886  006946  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 20887  006948  23A2               	addwfc	(??_get_fat+5)& (0+255),f,b
 20888  00694A  0E2F               	movlw	47
 20889  00694C  25A1               	addwf	(??_get_fat+4)& (0+255),w,b
 20890  00694E  6E0E               	movwf	ld_word@ptr^0,c
 20891  006950  0E00               	movlw	0
 20892  006952  21A2               	addwfc	(??_get_fat+5)& (0+255),w,b
 20893  006954  6E0F               	movwf	(ld_word@ptr+1)^0,c
 20894  006956  ECB2  F076         	call	_ld_word	;wreg free
 20895  00695A  C00E  F0AA         	movff	?_ld_word,get_fat@val
 20896  00695E  C00F  F0AB         	movff	?_ld_word+1,get_fat@val+1
 20897  006962  0100               	movlb	0	; () banked
 20898  006964                     L16:
 20899  006964  6BAC               	clrf	(get_fat@val+2)& (0+255),b
 20900  006966  6BAD               	clrf	(get_fat@val+3)& (0+255),b
 20901                           
 20902                           ;ff.c: 1170: break;
 20903  006968  D073               	goto	l271
 20904  00696A                     l19923:
 20905                           
 20906                           ; BSR set to: 0
 20907                           ;ff.c: 1173: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) bre
      +                          ak;
 20908  00696A  C0B0  F08C         	movff	get_fat@fs,move_window@fs
 20909  00696E  C0B1  F08D         	movff	get_fat@fs+1,move_window@fs+1
 20910  006972  EE20 F01F          	lfsr	2,31
 20911  006976  51B0               	movf	get_fat@fs& (0+255),w,b
 20912  006978  26D9               	addwf	fsr2l,f,c
 20913  00697A  51B1               	movf	(get_fat@fs+1)& (0+255),w,b
 20914  00697C  22DA               	addwfc	fsr2h,f,c
 20915  00697E  CFDE F09D          	movff	postinc2,??_get_fat
 20916  006982  CFDE F09E          	movff	postinc2,??_get_fat+1
 20917  006986  CFDE F09F          	movff	postinc2,??_get_fat+2
 20918  00698A  CFDE F0A0          	movff	postinc2,??_get_fat+3
 20919  00698E  C099  F0A1         	movff	get_fat@clst,??_get_fat+4
 20920  006992  C09A  F0A2         	movff	get_fat@clst+1,??_get_fat+5
 20921  006996  C09B  F0A3         	movff	get_fat@clst+2,??_get_fat+6
 20922  00699A  C09C  F0A4         	movff	get_fat@clst+3,??_get_fat+7
 20923  00699E  0E08               	movlw	8
 20924  0069A0  D005               	goto	u21590
 20925  0069A2                     u21595:
 20926  0069A2  90D8               	bcf	status,0,c
 20927  0069A4  33A4               	rrcf	(??_get_fat+7)& (0+255),f,b
 20928  0069A6  33A3               	rrcf	(??_get_fat+6)& (0+255),f,b
 20929  0069A8  33A2               	rrcf	(??_get_fat+5)& (0+255),f,b
 20930  0069AA  33A1               	rrcf	(??_get_fat+4)& (0+255),f,b
 20931  0069AC                     u21590:
 20932  0069AC  2EE8               	decfsz	wreg,f,c
 20933  0069AE  D7F9               	goto	u21595
 20934  0069B0  519D               	movf	??_get_fat& (0+255),w,b
 20935  0069B2  25A1               	addwf	(??_get_fat+4)& (0+255),w,b
 20936  0069B4  6F8E               	movwf	move_window@sector& (0+255),b
 20937  0069B6  519E               	movf	(??_get_fat+1)& (0+255),w,b
 20938  0069B8  21A2               	addwfc	(??_get_fat+5)& (0+255),w,b
 20939  0069BA  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 20940  0069BC  519F               	movf	(??_get_fat+2)& (0+255),w,b
 20941  0069BE  21A3               	addwfc	(??_get_fat+6)& (0+255),w,b
 20942  0069C0  6F90               	movwf	(move_window@sector+2)& (0+255),b
 20943  0069C2  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 20944  0069C4  21A4               	addwfc	(??_get_fat+7)& (0+255),w,b
 20945  0069C6  6F91               	movwf	(move_window@sector+3)& (0+255),b
 20946  0069C8  EC1B  F067         	call	_move_window	;wreg free
 20947  0069CC  0900               	iorlw	0
 20948  0069CE  A4D8               	btfss	status,2,c
 20949  0069D0  D03F               	goto	l271
 20950                           
 20951                           ; BSR set to: 0
 20952                           ;ff.c: 1174: val = ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0x0FFFFFFF;
 20953  0069D2  0EFF               	movlw	255
 20954  0069D4  6F9D               	movwf	??_get_fat& (0+255),b
 20955  0069D6  0E01               	movlw	1
 20956  0069D8  6F9E               	movwf	(??_get_fat+1)& (0+255),b
 20957  0069DA  C099  F09F         	movff	get_fat@clst,??_get_fat+2
 20958  0069DE  C09A  F0A0         	movff	get_fat@clst+1,??_get_fat+3
 20959  0069E2  90D8               	bcf	status,0,c
 20960  0069E4  379F               	rlcf	(??_get_fat+2)& (0+255),f,b
 20961  0069E6  37A0               	rlcf	(??_get_fat+3)& (0+255),f,b
 20962  0069E8  90D8               	bcf	status,0,c
 20963  0069EA  379F               	rlcf	(??_get_fat+2)& (0+255),f,b
 20964  0069EC  37A0               	rlcf	(??_get_fat+3)& (0+255),f,b
 20965  0069EE  519D               	movf	??_get_fat& (0+255),w,b
 20966  0069F0  179F               	andwf	(??_get_fat+2)& (0+255),f,b
 20967  0069F2  519E               	movf	(??_get_fat+1)& (0+255),w,b
 20968  0069F4  17A0               	andwf	(??_get_fat+3)& (0+255),f,b
 20969  0069F6  C0B0  F0A1         	movff	get_fat@fs,??_get_fat+4
 20970  0069FA  C0B1  F0A2         	movff	get_fat@fs+1,??_get_fat+5
 20971  0069FE  519F               	movf	(??_get_fat+2)& (0+255),w,b
 20972  006A00  27A1               	addwf	(??_get_fat+4)& (0+255),f,b
 20973  006A02  51A0               	movf	(??_get_fat+3)& (0+255),w,b
 20974  006A04  23A2               	addwfc	(??_get_fat+5)& (0+255),f,b
 20975  006A06  0E2F               	movlw	47
 20976  006A08  25A1               	addwf	(??_get_fat+4)& (0+255),w,b
 20977  006A0A  6E0E               	movwf	ld_dword@ptr^0,c
 20978  006A0C  0E00               	movlw	0
 20979  006A0E  21A2               	addwfc	(??_get_fat+5)& (0+255),w,b
 20980  006A10  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 20981  006A12  ECB4  F065         	call	_ld_dword	;wreg free
 20982  006A16  0EFF               	movlw	255
 20983  006A18  140E               	andwf	?_ld_dword^0,w,c
 20984  006A1A  0100               	movlb	0	; () banked
 20985  006A1C  6FAA               	movwf	get_fat@val& (0+255),b
 20986  006A1E  0EFF               	movlw	255
 20987  006A20  140F               	andwf	(?_ld_dword+1)^0,w,c
 20988  006A22  6FAB               	movwf	(get_fat@val+1)& (0+255),b
 20989  006A24  0EFF               	movlw	255
 20990  006A26  1410               	andwf	(?_ld_dword+2)^0,w,c
 20991  006A28  6FAC               	movwf	(get_fat@val+2)& (0+255),b
 20992  006A2A  0E0F               	movlw	15
 20993  006A2C  1411               	andwf	(?_ld_dword+3)^0,w,c
 20994  006A2E                     L15:
 20995  006A2E  6FAD               	movwf	(get_fat@val+3)& (0+255),b
 20996                           
 20997                           ;ff.c: 1175: break;
 20998  006A30  D00F               	goto	l271
 20999  006A32                     l19931:
 21000                           
 21001                           ; BSR set to: 0
 21002  006A32  C0B0  FFD9         	movff	get_fat@fs,fsr2l
 21003  006A36  C0B1  FFDA         	movff	get_fat@fs+1,fsr2h
 21004  006A3A  50DF               	movf	indf2,w,c
 21005                           
 21006                           ; Switch size 1, requested type "simple"
 21007                           ; Number of cases is 3, Range of values is 1 to 3
 21008                           ; switch strategies available:
 21009                           ; Name         Instructions Cycles
 21010                           ; simple_byte           10     6 (average)
 21011                           ;	Chosen strategy is simple_byte
 21012  006A3C  0A01               	xorlw	1	; case 1
 21013  006A3E  B4D8               	btfsc	status,2,c
 21014  006A40  D679               	goto	l273
 21015  006A42  0A03               	xorlw	3	; case 2
 21016  006A44  B4D8               	btfsc	status,2,c
 21017  006A46  D740               	goto	l19917
 21018  006A48  0A01               	xorlw	1	; case 3
 21019  006A4A  B4D8               	btfsc	status,2,c
 21020  006A4C  D78E               	goto	l19923
 21021  006A4E  D665               	goto	u21510
 21022  006A50                     l271:
 21023                           
 21024                           ; BSR set to: 0
 21025                           ;ff.c: 1205: };ff.c: 1207: return val;
 21026  006A50  C0AA  F097         	movff	get_fat@val,?_get_fat
 21027  006A54  C0AB  F098         	movff	get_fat@val+1,?_get_fat+1
 21028  006A58  C0AC  F099         	movff	get_fat@val+2,?_get_fat+2
 21029  006A5C  C0AD  F09A         	movff	get_fat@val+3,?_get_fat+3
 21030                           
 21031                           ; BSR set to: 0
 21032  006A60  0012               	return		;funcret
 21033  006A62                     __end_of_get_fat:
 21034                           	callstack 0
 21035                           
 21036 ;; *************** function _f_mount *****************
 21037 ;; Defined at:
 21038 ;;		line 3472 in file "mcc_generated_files/fatfs/ff.c"
 21039 ;; Parameters:    Size  Location     Type
 21040 ;;  fs              2  133[BANK0 ] PTR struct .
 21041 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 21042 ;;  path            2  135[BANK0 ] PTR const unsigned char 
 21043 ;;		 -> STR_10(3), STR_8(12), STR_7(3), STR_3(3), 
 21044 ;;		 -> STR_2(10), STR_1(3), 
 21045 ;;  opt             1  137[BANK0 ] unsigned char 
 21046 ;; Auto vars:     Size  Location     Type
 21047 ;;  vol             2  143[BANK0 ] int 
 21048 ;;  rp              2  141[BANK0 ] PTR const unsigned char 
 21049 ;;		 -> STR_10(3), STR_8(12), STR_7(3), STR_3(3), 
 21050 ;;		 -> STR_2(10), STR_1(3), 
 21051 ;;  cfs             2  139[BANK0 ] PTR struct .
 21052 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 21053 ;;  res             1  138[BANK0 ] enum E64
 21054 ;; Return value:  Size  Location     Type
 21055 ;;                  1    wreg      enum E64
 21056 ;; Registers used:
 21057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 21058 ;; Tracked objects:
 21059 ;;		On entry : 3F/0
 21060 ;;		On exit  : 3F/0
 21061 ;;		Unchanged: 0/0
 21062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21063 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21064 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21066 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21067 ;;Total ram usage:       12 bytes
 21068 ;; Hardware stack levels used:    1
 21069 ;; Hardware stack levels required when called:   15
 21070 ;; This function calls:
 21071 ;;		_find_volume
 21072 ;;		_get_ldnumber
 21073 ;; This function is called by:
 21074 ;;		_NormalProc
 21075 ;; This function uses a non-reentrant model
 21076 ;;
 21077                           
 21078                           	psect	text69
 21079  00D2D8                     __ptext69:
 21080                           	callstack 0
 21081  00D2D8                     _f_mount:
 21082                           	callstack 14
 21083                           
 21084                           ; BSR set to: 0
 21085                           ;ff.c: 3478: FATFS *cfs;;ff.c: 3479: int vol;;ff.c: 3480: FRESULT res;;ff.c: 3481: const
      +                           TCHAR *rp = path;
 21086                           
 21087                           ; BSR set to: 0
 21088                           ;incstack = 0
 21089  00D2D8  C0E7  F0ED         	movff	f_mount@path,f_mount@rp
 21090  00D2DC  C0E8  F0EE         	movff	f_mount@path+1,f_mount@rp+1
 21091                           
 21092                           ; BSR set to: 0
 21093                           ;ff.c: 3485: vol = get_ldnumber(&rp);
 21094  00D2E0  0EED               	movlw	low f_mount@rp
 21095  00D2E2  6E0E               	movwf	get_ldnumber@path^0,c
 21096  00D2E4  6A0F               	clrf	(get_ldnumber@path+1)^0,c
 21097  00D2E6  EC1A  F05F         	call	_get_ldnumber	;wreg free
 21098  00D2EA  C00E  F0EF         	movff	?_get_ldnumber,f_mount@vol
 21099  00D2EE  C00F  F0F0         	movff	?_get_ldnumber+1,f_mount@vol+1
 21100                           
 21101                           ; BSR set to: 0
 21102                           ;ff.c: 3486: if (vol < 0) return FR_INVALID_DRIVE;
 21103  00D2F2  AFF0               	btfss	(f_mount@vol+1)& (0+255),7,b
 21104  00D2F4  D002               	goto	l25441
 21105                           
 21106                           ; BSR set to: 0
 21107  00D2F6  0E0B               	movlw	11
 21108  00D2F8  0012               	return	
 21109  00D2FA                     l25441:
 21110                           
 21111                           ; BSR set to: 0
 21112                           ;ff.c: 3487: cfs = FatFs[vol];
 21113  00D2FA  90D8               	bcf	status,0,c
 21114  00D2FC  35EF               	rlcf	f_mount@vol& (0+255),w,b
 21115  00D2FE  6ED9               	movwf	fsr2l,c
 21116  00D300  35F0               	rlcf	(f_mount@vol+1)& (0+255),w,b
 21117  00D302  6EDA               	movwf	fsr2h,c
 21118  00D304  0E9A               	movlw	low _FatFs
 21119  00D306  26D9               	addwf	fsr2l,f,c
 21120  00D308  0E03               	movlw	high _FatFs
 21121  00D30A  22DA               	addwfc	fsr2h,f,c
 21122  00D30C  CFDE F0EB          	movff	postinc2,f_mount@cfs
 21123  00D310  CFDD F0EC          	movff	postdec2,f_mount@cfs+1
 21124                           
 21125                           ; BSR set to: 0
 21126                           ;ff.c: 3489: if (cfs) {
 21127  00D314  51EB               	movf	f_mount@cfs& (0+255),w,b
 21128  00D316  11EC               	iorwf	(f_mount@cfs+1)& (0+255),w,b
 21129  00D318  B4D8               	btfsc	status,2,c
 21130  00D31A  D006               	goto	l25447
 21131                           
 21132                           ; BSR set to: 0
 21133                           ;ff.c: 3496: cfs->fs_type = 0;
 21134  00D31C  C0EB  FFD9         	movff	f_mount@cfs,fsr2l
 21135  00D320  C0EC  FFDA         	movff	f_mount@cfs+1,fsr2h
 21136  00D324  0E00               	movlw	0
 21137  00D326  6EDF               	movwf	indf2,c
 21138  00D328                     l25447:
 21139                           
 21140                           ; BSR set to: 0
 21141                           ;ff.c: 3497: };ff.c: 3499: if (fs) {
 21142  00D328  51E5               	movf	f_mount@fs& (0+255),w,b
 21143  00D32A  11E6               	iorwf	(f_mount@fs+1)& (0+255),w,b
 21144  00D32C  B4D8               	btfsc	status,2,c
 21145  00D32E  D006               	goto	l25451
 21146                           
 21147                           ; BSR set to: 0
 21148                           ;ff.c: 3500: fs->fs_type = 0;
 21149  00D330  C0E5  FFD9         	movff	f_mount@fs,fsr2l
 21150  00D334  C0E6  FFDA         	movff	f_mount@fs+1,fsr2h
 21151  00D338  0E00               	movlw	0
 21152  00D33A  6EDF               	movwf	indf2,c
 21153  00D33C                     l25451:
 21154                           
 21155                           ; BSR set to: 0
 21156                           ;ff.c: 3504: };ff.c: 3505: FatFs[vol] = fs;
 21157  00D33C  90D8               	bcf	status,0,c
 21158  00D33E  35EF               	rlcf	f_mount@vol& (0+255),w,b
 21159  00D340  6ED9               	movwf	fsr2l,c
 21160  00D342  35F0               	rlcf	(f_mount@vol+1)& (0+255),w,b
 21161  00D344  6EDA               	movwf	fsr2h,c
 21162  00D346  0E9A               	movlw	low _FatFs
 21163  00D348  26D9               	addwf	fsr2l,f,c
 21164  00D34A  0E03               	movlw	high _FatFs
 21165  00D34C  22DA               	addwfc	fsr2h,f,c
 21166  00D34E  C0E5  FFDE         	movff	f_mount@fs,postinc2
 21167  00D352  C0E6  FFDD         	movff	f_mount@fs+1,postdec2
 21168                           
 21169                           ; BSR set to: 0
 21170                           ;ff.c: 3507: if (opt == 0) return FR_OK;
 21171  00D356  51E9               	movf	f_mount@opt& (0+255),w,b
 21172  00D358  A4D8               	btfss	status,2,c
 21173  00D35A  D002               	goto	l25459
 21174                           
 21175                           ; BSR set to: 0
 21176  00D35C  0E00               	movlw	0
 21177  00D35E  0012               	return	
 21178  00D360                     l25459:
 21179                           
 21180                           ; BSR set to: 0
 21181                           ;ff.c: 3509: res = find_volume(&path, &fs, 0);
 21182  00D360  0EE7               	movlw	low f_mount@path
 21183  00D362  6F9E               	movwf	find_volume@path& (0+255),b
 21184  00D364  6B9F               	clrf	(find_volume@path+1)& (0+255),b
 21185  00D366  0EE5               	movlw	low f_mount@fs
 21186  00D368  6FA0               	movwf	find_volume@rfs& (0+255),b
 21187  00D36A  6BA1               	clrf	(find_volume@rfs+1)& (0+255),b
 21188  00D36C  0E00               	movlw	0
 21189  00D36E  6FA2               	movwf	find_volume@mode& (0+255),b
 21190  00D370  EC6A  F011         	call	_find_volume	;wreg free
 21191  00D374  0100               	movlb	0	; () banked
 21192  00D376  6FEA               	movwf	f_mount@res& (0+255),b
 21193                           
 21194                           ; BSR set to: 0
 21195                           ;ff.c: 3510: return res;
 21196  00D378  51EA               	movf	f_mount@res& (0+255),w,b
 21197                           
 21198                           ; BSR set to: 0
 21199  00D37A  0012               	return		;funcret
 21200  00D37C                     __end_of_f_mount:
 21201                           	callstack 0
 21202                           
 21203 ;; *************** function _find_volume *****************
 21204 ;; Defined at:
 21205 ;;		line 3203 in file "mcc_generated_files/fatfs/ff.c"
 21206 ;; Parameters:    Size  Location     Type
 21207 ;;  path            2   62[BANK0 ] PTR PTR const unsigned c
 21208 ;;		 -> f_open@path(2), f_mount@path(2), 
 21209 ;;  rfs             2   64[BANK0 ] PTR PTR struct .
 21210 ;;		 -> f_open@fs(2), f_mount@fs(2), 
 21211 ;;  mode            1   66[BANK0 ] unsigned char 
 21212 ;; Auto vars:     Size  Location     Type
 21213 ;;  br             16   75[BANK0 ] unsigned long [4]
 21214 ;;  bsect           4  124[BANK0 ] unsigned long 
 21215 ;;  fasize          4  120[BANK0 ] unsigned long 
 21216 ;;  nclst           4  116[BANK0 ] unsigned long 
 21217 ;;  tsect           4  111[BANK0 ] unsigned long 
 21218 ;;  sysect          4  103[BANK0 ] unsigned long 
 21219 ;;  szbfat          4   97[BANK0 ] unsigned long 
 21220 ;;  fs              2  131[BANK0 ] PTR struct .
 21221 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 21222 ;;  i               2  128[BANK0 ] unsigned int 
 21223 ;;  nrsv            2  109[BANK0 ] unsigned short 
 21224 ;;  vol             2  107[BANK0 ] int 
 21225 ;;  pt              2  101[BANK0 ] PTR unsigned char 
 21226 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 21227 ;;		 -> NULL(0), 
 21228 ;;  fmt             1  130[BANK0 ] unsigned char 
 21229 ;;  stat            1  115[BANK0 ] unsigned char 
 21230 ;; Return value:  Size  Location     Type
 21231 ;;                  1    wreg      enum E64
 21232 ;; Registers used:
 21233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 21234 ;; Tracked objects:
 21235 ;;		On entry : 3F/0
 21236 ;;		On exit  : 0/0
 21237 ;;		Unchanged: 0/0
 21238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21239 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21240 ;;      Locals:         0      58       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21241 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21242 ;;      Totals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21243 ;;Total ram usage:       71 bytes
 21244 ;; Hardware stack levels used:    1
 21245 ;; Hardware stack levels required when called:   14
 21246 ;; This function calls:
 21247 ;;		___lldiv
 21248 ;;		___lmul
 21249 ;;		_check_fs
 21250 ;;		_disk_initialize
 21251 ;;		_disk_status
 21252 ;;		_get_ldnumber
 21253 ;;		_ld_dword
 21254 ;;		_ld_word
 21255 ;;		_move_window
 21256 ;; This function is called by:
 21257 ;;		_f_mount
 21258 ;;		_f_open
 21259 ;; This function uses a non-reentrant model
 21260 ;;
 21261                           
 21262                           	psect	text70
 21263  0022D4                     __ptext70:
 21264                           	callstack 0
 21265  0022D4                     _find_volume:
 21266                           	callstack 14
 21267                           
 21268                           ; BSR set to: 0
 21269                           ;ff.c: 3209: BYTE fmt, *pt;;ff.c: 3210: int vol;;ff.c: 3211: DSTATUS stat;;ff.c: 3212: D
      +                          WORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 3213: WORD nrsv;;ff.c: 32
      +                          14: FATFS *fs;;ff.c: 3215: UINT i;;ff.c: 3219: *rfs = 0;
 21270                           
 21271                           ; BSR set to: 0
 21272                           ;incstack = 0
 21273  0022D4  C0A0  FFD9         	movff	find_volume@rfs,fsr2l
 21274  0022D8  C0A1  FFDA         	movff	find_volume@rfs+1,fsr2h
 21275  0022DC  0E00               	movlw	0
 21276  0022DE  6EDE               	movwf	postinc2,c
 21277  0022E0  0E00               	movlw	0
 21278  0022E2  6EDD               	movwf	postdec2,c
 21279                           
 21280                           ; BSR set to: 0
 21281                           ;ff.c: 3220: vol = get_ldnumber(path);
 21282  0022E4  C09E  F00E         	movff	find_volume@path,get_ldnumber@path
 21283  0022E8  C09F  F00F         	movff	find_volume@path+1,get_ldnumber@path+1
 21284  0022EC  EC1A  F05F         	call	_get_ldnumber	;wreg free
 21285  0022F0  C00E  F0CB         	movff	?_get_ldnumber,find_volume@vol
 21286  0022F4  C00F  F0CC         	movff	?_get_ldnumber+1,find_volume@vol+1
 21287                           
 21288                           ; BSR set to: 0
 21289                           ;ff.c: 3221: if (vol < 0) return FR_INVALID_DRIVE;
 21290  0022F8  AFCC               	btfss	(find_volume@vol+1)& (0+255),7,b
 21291  0022FA  D002               	goto	l25133
 21292                           
 21293                           ; BSR set to: 0
 21294  0022FC  0E0B               	movlw	11
 21295  0022FE  0012               	return	
 21296  002300                     l25133:
 21297                           
 21298                           ; BSR set to: 0
 21299                           ;ff.c: 3224: fs = FatFs[vol];
 21300  002300  90D8               	bcf	status,0,c
 21301  002302  35CB               	rlcf	find_volume@vol& (0+255),w,b
 21302  002304  6ED9               	movwf	fsr2l,c
 21303  002306  35CC               	rlcf	(find_volume@vol+1)& (0+255),w,b
 21304  002308  6EDA               	movwf	fsr2h,c
 21305  00230A  0E9A               	movlw	low _FatFs
 21306  00230C  26D9               	addwf	fsr2l,f,c
 21307  00230E  0E03               	movlw	high _FatFs
 21308  002310  22DA               	addwfc	fsr2h,f,c
 21309  002312  CFDE F0E3          	movff	postinc2,find_volume@fs
 21310  002316  CFDD F0E4          	movff	postdec2,find_volume@fs+1
 21311                           
 21312                           ; BSR set to: 0
 21313                           ;ff.c: 3225: if (!fs) return FR_NOT_ENABLED;
 21314  00231A  51E3               	movf	find_volume@fs& (0+255),w,b
 21315  00231C  11E4               	iorwf	(find_volume@fs+1)& (0+255),w,b
 21316  00231E  A4D8               	btfss	status,2,c
 21317  002320  D002               	goto	l25141
 21318                           
 21319                           ; BSR set to: 0
 21320  002322  0E0C               	movlw	12
 21321  002324  0012               	return	
 21322  002326                     l25141:
 21323                           
 21324                           ; BSR set to: 0
 21325                           ;ff.c: 3229: *rfs = fs;
 21326  002326  C0A0  FFD9         	movff	find_volume@rfs,fsr2l
 21327  00232A  C0A1  FFDA         	movff	find_volume@rfs+1,fsr2h
 21328  00232E  C0E3  FFDE         	movff	find_volume@fs,postinc2
 21329  002332  C0E4  FFDD         	movff	find_volume@fs+1,postdec2
 21330                           
 21331                           ; BSR set to: 0
 21332                           ;ff.c: 3231: mode &= (BYTE)~0x01;
 21333  002336  91A2               	bcf	find_volume@mode& (0+255),0,b
 21334                           
 21335                           ; BSR set to: 0
 21336                           ;ff.c: 3232: if (fs->fs_type != 0) {
 21337  002338  C0E3  FFD9         	movff	find_volume@fs,fsr2l
 21338  00233C  C0E4  FFDA         	movff	find_volume@fs+1,fsr2h
 21339  002340  50DF               	movf	indf2,w,c
 21340  002342  B4D8               	btfsc	status,2,c
 21341  002344  D015               	goto	l25163
 21342                           
 21343                           ; BSR set to: 0
 21344                           ;ff.c: 3233: stat = disk_status(fs->pdrv);
 21345  002346  EE20 F001          	lfsr	2,1
 21346  00234A  51E3               	movf	find_volume@fs& (0+255),w,b
 21347  00234C  26D9               	addwf	fsr2l,f,c
 21348  00234E  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21349  002350  22DA               	addwfc	fsr2h,f,c
 21350  002352  50DF               	movf	indf2,w,c
 21351  002354  EC20  F076         	call	_disk_status
 21352  002358  0100               	movlb	0	; () banked
 21353  00235A  6FD3               	movwf	find_volume@stat& (0+255),b
 21354                           
 21355                           ; BSR set to: 0
 21356                           ;ff.c: 3235: if (!0 && mode && (stat & 0x04)) {
 21357  00235C  B1D3               	btfsc	find_volume@stat& (0+255),0,b
 21358  00235E  D008               	goto	l25163
 21359                           
 21360                           ; BSR set to: 0
 21361  002360  51A2               	movf	find_volume@mode& (0+255),w,b
 21362  002362  A4D8               	btfss	status,2,c
 21363                           
 21364                           ; BSR set to: 0
 21365  002364  A5D3               	btfss	find_volume@stat& (0+255),2,b
 21366  002366  D002               	goto	l25159
 21367  002368                     u28480:
 21368                           
 21369                           ; BSR set to: 0
 21370                           ;ff.c: 3236: return FR_WRITE_PROTECTED;
 21371  002368  0E0A               	movlw	10
 21372  00236A  0012               	return	
 21373  00236C                     l25159:
 21374                           
 21375                           ; BSR set to: 0
 21376                           ;ff.c: 3237: };ff.c: 3238: return FR_OK;
 21377  00236C  0E00               	movlw	0
 21378  00236E  0012               	return	
 21379  002370                     l25163:
 21380                           
 21381                           ; BSR set to: 0
 21382                           ;ff.c: 3239: };ff.c: 3240: };ff.c: 3245: fs->fs_type = 0;
 21383  002370  C0E3  FFD9         	movff	find_volume@fs,fsr2l
 21384  002374  C0E4  FFDA         	movff	find_volume@fs+1,fsr2h
 21385  002378  0E00               	movlw	0
 21386  00237A  6EDF               	movwf	indf2,c
 21387                           
 21388                           ; BSR set to: 0
 21389                           ;ff.c: 3246: fs->pdrv = (BYTE)(vol);
 21390  00237C  EE20 F001          	lfsr	2,1
 21391  002380  51E3               	movf	find_volume@fs& (0+255),w,b
 21392  002382  26D9               	addwf	fsr2l,f,c
 21393  002384  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21394  002386  22DA               	addwfc	fsr2h,f,c
 21395  002388  C0CB  FFDF         	movff	find_volume@vol,indf2
 21396                           
 21397                           ; BSR set to: 0
 21398                           ;ff.c: 3247: stat = disk_initialize(fs->pdrv);
 21399  00238C  EE20 F001          	lfsr	2,1
 21400  002390  51E3               	movf	find_volume@fs& (0+255),w,b
 21401  002392  26D9               	addwf	fsr2l,f,c
 21402  002394  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21403  002396  22DA               	addwfc	fsr2h,f,c
 21404  002398  50DF               	movf	indf2,w,c
 21405  00239A  EC87  F078         	call	_disk_initialize
 21406  00239E  0100               	movlb	0	; () banked
 21407  0023A0  6FD3               	movwf	find_volume@stat& (0+255),b
 21408                           
 21409                           ; BSR set to: 0
 21410                           ;ff.c: 3248: if (stat & 0x01) {
 21411  0023A2  A1D3               	btfss	find_volume@stat& (0+255),0,b
 21412  0023A4  D002               	goto	l25175
 21413                           
 21414                           ; BSR set to: 0
 21415                           ;ff.c: 3249: return FR_NOT_READY;
 21416  0023A6  0E03               	movlw	3
 21417  0023A8  0012               	return	
 21418  0023AA                     l25175:
 21419                           
 21420                           ; BSR set to: 0
 21421  0023AA  51A2               	movf	find_volume@mode& (0+255),w,b
 21422  0023AC  B4D8               	btfsc	status,2,c
 21423  0023AE  D002               	goto	l25183
 21424                           
 21425                           ; BSR set to: 0
 21426  0023B0  B5D3               	btfsc	find_volume@stat& (0+255),2,b
 21427  0023B2  D7DA               	goto	u28480
 21428  0023B4                     l25183:
 21429                           
 21430                           ; BSR set to: 0
 21431                           ;ff.c: 3253: };ff.c: 3260: bsect = 0;
 21432  0023B4  0E00               	movlw	0
 21433  0023B6  6FDC               	movwf	find_volume@bsect& (0+255),b
 21434  0023B8  0E00               	movlw	0
 21435  0023BA  6FDD               	movwf	(find_volume@bsect+1)& (0+255),b
 21436  0023BC  0E00               	movlw	0
 21437  0023BE  6FDE               	movwf	(find_volume@bsect+2)& (0+255),b
 21438  0023C0  0E00               	movlw	0
 21439  0023C2  6FDF               	movwf	(find_volume@bsect+3)& (0+255),b
 21440                           
 21441                           ; BSR set to: 0
 21442                           ;ff.c: 3261: fmt = check_fs(fs, bsect);
 21443  0023C4  C0E3  F097         	movff	find_volume@fs,check_fs@fs
 21444  0023C8  C0E4  F098         	movff	find_volume@fs+1,check_fs@fs+1
 21445  0023CC  0E00               	movlw	0
 21446  0023CE  6F99               	movwf	check_fs@sect& (0+255),b
 21447  0023D0  0E00               	movlw	0
 21448  0023D2  6F9A               	movwf	(check_fs@sect+1)& (0+255),b
 21449  0023D4  0E00               	movlw	0
 21450  0023D6  6F9B               	movwf	(check_fs@sect+2)& (0+255),b
 21451  0023D8  0E00               	movlw	0
 21452  0023DA  6F9C               	movwf	(check_fs@sect+3)& (0+255),b
 21453  0023DC  EC1F  F05B         	call	_check_fs	;wreg free
 21454  0023E0  0100               	movlb	0	; () banked
 21455  0023E2  6FE2               	movwf	find_volume@fmt& (0+255),b
 21456                           
 21457                           ; BSR set to: 0
 21458                           ;ff.c: 3262: if (fmt == 2 || (fmt < 2 && 0 != 0)) {
 21459  0023E4  0E02               	movlw	2
 21460  0023E6  19E2               	xorwf	find_volume@fmt& (0+255),w,b
 21461  0023E8  A4D8               	btfss	status,2,c
 21462  0023EA  D09D               	goto	u28580
 21463                           
 21464                           ; BSR set to: 0
 21465                           ;ff.c: 3263: for (i = 0; i < 4; i++) {
 21466  0023EC  0E00               	movlw	0
 21467  0023EE  6FE1               	movwf	(find_volume@i+1)& (0+255),b
 21468  0023F0  0E00               	movlw	0
 21469  0023F2  6FE0               	movwf	find_volume@i& (0+255),b
 21470  0023F4                     l25195:
 21471                           
 21472                           ; BSR set to: 0
 21473  0023F4  51E1               	movf	(find_volume@i+1)& (0+255),w,b
 21474  0023F6  E153               	bnz	l25213
 21475  0023F8  0E04               	movlw	4
 21476  0023FA  5DE0               	subwf	find_volume@i& (0+255),w,b
 21477  0023FC  B0D8               	btfsc	status,0,c
 21478  0023FE  D04F               	goto	l25213
 21479                           
 21480                           ; BSR set to: 0
 21481                           ;ff.c: 3264: pt = fs->win + (446 + i * 16);
 21482  002400  C0E0  F0A3         	movff	find_volume@i,??_find_volume
 21483  002404  C0E1  F0A4         	movff	find_volume@i+1,??_find_volume+1
 21484  002408  3BA3               	swapf	??_find_volume& (0+255),f,b
 21485  00240A  3BA4               	swapf	(??_find_volume+1)& (0+255),f,b
 21486  00240C  0EF0               	movlw	240
 21487  00240E  17A4               	andwf	(??_find_volume+1)& (0+255),f,b
 21488  002410  51A3               	movf	??_find_volume& (0+255),w,b
 21489  002412  0B0F               	andlw	15
 21490  002414  13A4               	iorwf	(??_find_volume+1)& (0+255),f,b
 21491  002416  0EF0               	movlw	240
 21492  002418  17A3               	andwf	??_find_volume& (0+255),f,b
 21493  00241A  C0E3  F0A5         	movff	find_volume@fs,??_find_volume+2
 21494  00241E  C0E4  F0A6         	movff	find_volume@fs+1,??_find_volume+3
 21495  002422  51A3               	movf	??_find_volume& (0+255),w,b
 21496  002424  27A5               	addwf	(??_find_volume+2)& (0+255),f,b
 21497  002426  51A4               	movf	(??_find_volume+1)& (0+255),w,b
 21498  002428  23A6               	addwfc	(??_find_volume+3)& (0+255),f,b
 21499  00242A  0EED               	movlw	237
 21500  00242C  25A5               	addwf	(??_find_volume+2)& (0+255),w,b
 21501  00242E  6FC5               	movwf	find_volume@pt& (0+255),b
 21502  002430  0E01               	movlw	1
 21503  002432  21A6               	addwfc	(??_find_volume+3)& (0+255),w,b
 21504  002434  6FC6               	movwf	(find_volume@pt+1)& (0+255),b
 21505                           
 21506                           ; BSR set to: 0
 21507                           ;ff.c: 3265: br[i] = pt[4] ? ld_dword(pt + 8) : 0;
 21508  002436  EE20 F004          	lfsr	2,4
 21509  00243A  51C5               	movf	find_volume@pt& (0+255),w,b
 21510  00243C  26D9               	addwf	fsr2l,f,c
 21511  00243E  51C6               	movf	(find_volume@pt+1)& (0+255),w,b
 21512  002440  22DA               	addwfc	fsr2h,f,c
 21513  002442  50DF               	movf	indf2,w,c
 21514  002444  A4D8               	btfss	status,2,c
 21515  002446  D009               	goto	l25205
 21516                           
 21517                           ; BSR set to: 0
 21518  002448  0E00               	movlw	0
 21519  00244A  6FBB               	movwf	_find_volume$1181& (0+255),b
 21520  00244C  0E00               	movlw	0
 21521  00244E  6FBC               	movwf	(_find_volume$1181+1)& (0+255),b
 21522  002450  0E00               	movlw	0
 21523  002452  6FBD               	movwf	(_find_volume$1181+2)& (0+255),b
 21524  002454  0E00               	movlw	0
 21525  002456  6FBE               	movwf	(_find_volume$1181+3)& (0+255),b
 21526  002458  D010               	goto	l25207
 21527  00245A                     l25205:
 21528                           
 21529                           ; BSR set to: 0
 21530  00245A  0E08               	movlw	8
 21531  00245C  25C5               	addwf	find_volume@pt& (0+255),w,b
 21532  00245E  6E0E               	movwf	ld_dword@ptr^0,c
 21533  002460  0E00               	movlw	0
 21534  002462  21C6               	addwfc	(find_volume@pt+1)& (0+255),w,b
 21535  002464  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 21536  002466  ECB4  F065         	call	_ld_dword	;wreg free
 21537  00246A  C00E  F0BB         	movff	?_ld_dword,_find_volume$1181
 21538  00246E  C00F  F0BC         	movff	?_ld_dword+1,_find_volume$1181+1
 21539  002472  C010  F0BD         	movff	?_ld_dword+2,_find_volume$1181+2
 21540  002476  C011  F0BE         	movff	?_ld_dword+3,_find_volume$1181+3
 21541  00247A                     l25207:
 21542  00247A  0100               	movlb	0	; () banked
 21543  00247C  51E0               	movf	find_volume@i& (0+255),w,b
 21544  00247E  0D04               	mullw	4
 21545  002480  50F3               	movf	243,w,c
 21546  002482  0FAB               	addlw	low find_volume@br
 21547  002484  6ED9               	movwf	fsr2l,c
 21548  002486  6ADA               	clrf	fsr2h,c
 21549  002488  C0BB  FFDE         	movff	_find_volume$1181,postinc2
 21550  00248C  C0BC  FFDE         	movff	_find_volume$1181+1,postinc2
 21551  002490  C0BD  FFDE         	movff	_find_volume$1181+2,postinc2
 21552  002494  C0BE  FFDE         	movff	_find_volume$1181+3,postinc2
 21553                           
 21554                           ; BSR set to: 0
 21555  002498  4BE0               	infsnz	find_volume@i& (0+255),f,b
 21556  00249A  2BE1               	incf	(find_volume@i+1)& (0+255),f,b
 21557  00249C  D7AB               	goto	l25195
 21558  00249E                     l25213:
 21559                           
 21560                           ; BSR set to: 0
 21561                           ;ff.c: 3266: };ff.c: 3267: i = 0;
 21562  00249E  0E00               	movlw	0
 21563  0024A0  6FE1               	movwf	(find_volume@i+1)& (0+255),b
 21564  0024A2  0E00               	movlw	0
 21565  0024A4  6FE0               	movwf	find_volume@i& (0+255),b
 21566                           
 21567                           ; BSR set to: 0
 21568                           ;ff.c: 3268: if (i != 0) i--;
 21569  0024A6  51E0               	movf	find_volume@i& (0+255),w,b
 21570  0024A8  11E1               	iorwf	(find_volume@i+1)& (0+255),w,b
 21571  0024AA  B4D8               	btfsc	status,2,c
 21572  0024AC  D003               	goto	l25219
 21573                           
 21574                           ; BSR set to: 0
 21575  0024AE  07E0               	decf	find_volume@i& (0+255),f,b
 21576  0024B0  A0D8               	btfss	status,0,c
 21577  0024B2  07E1               	decf	(find_volume@i+1)& (0+255),f,b
 21578  0024B4                     l25219:
 21579                           
 21580                           ; BSR set to: 0
 21581                           ;ff.c: 3270: bsect = br[i];
 21582  0024B4  51E0               	movf	find_volume@i& (0+255),w,b
 21583  0024B6  0D04               	mullw	4
 21584  0024B8  50F3               	movf	243,w,c
 21585  0024BA  0FAB               	addlw	low find_volume@br
 21586  0024BC  6ED9               	movwf	fsr2l,c
 21587  0024BE  6ADA               	clrf	fsr2h,c
 21588  0024C0  CFDE F0DC          	movff	postinc2,find_volume@bsect
 21589  0024C4  CFDE F0DD          	movff	postinc2,find_volume@bsect+1
 21590  0024C8  CFDE F0DE          	movff	postinc2,find_volume@bsect+2
 21591  0024CC  CFDE F0DF          	movff	postinc2,find_volume@bsect+3
 21592                           
 21593                           ; BSR set to: 0
 21594                           ;ff.c: 3271: fmt = bsect ? check_fs(fs, bsect) : 3;
 21595  0024D0  51DC               	movf	find_volume@bsect& (0+255),w,b
 21596  0024D2  11DD               	iorwf	(find_volume@bsect+1)& (0+255),w,b
 21597  0024D4  11DE               	iorwf	(find_volume@bsect+2)& (0+255),w,b
 21598  0024D6  11DF               	iorwf	(find_volume@bsect+3)& (0+255),w,b
 21599  0024D8  A4D8               	btfss	status,2,c
 21600  0024DA  D005               	goto	l25225
 21601                           
 21602                           ; BSR set to: 0
 21603  0024DC  0E00               	movlw	0
 21604  0024DE  6FC0               	movwf	(_find_volume$1182+1)& (0+255),b
 21605  0024E0  0E03               	movlw	3
 21606  0024E2  6FBF               	movwf	_find_volume$1182& (0+255),b
 21607  0024E4  D013               	goto	l25227
 21608  0024E6                     l25225:
 21609                           
 21610                           ; BSR set to: 0
 21611  0024E6  C0E3  F097         	movff	find_volume@fs,check_fs@fs
 21612  0024EA  C0E4  F098         	movff	find_volume@fs+1,check_fs@fs+1
 21613  0024EE  C0DC  F099         	movff	find_volume@bsect,check_fs@sect
 21614  0024F2  C0DD  F09A         	movff	find_volume@bsect+1,check_fs@sect+1
 21615  0024F6  C0DE  F09B         	movff	find_volume@bsect+2,check_fs@sect+2
 21616  0024FA  C0DF  F09C         	movff	find_volume@bsect+3,check_fs@sect+3
 21617  0024FE  EC1F  F05B         	call	_check_fs	;wreg free
 21618  002502  0100               	movlb	0	; () banked
 21619  002504  6FA3               	movwf	??_find_volume& (0+255),b
 21620  002506  51A3               	movf	??_find_volume& (0+255),w,b
 21621  002508  6FBF               	movwf	_find_volume$1182& (0+255),b
 21622  00250A  6BC0               	clrf	(_find_volume$1182+1)& (0+255),b
 21623  00250C                     l25227:
 21624                           
 21625                           ; BSR set to: 0
 21626                           ;ff.c: 3272: } while (0 == 0 && fmt >= 2 && ++i < 4);
 21627  00250C  C0BF  F0E2         	movff	_find_volume$1182,find_volume@fmt
 21628                           
 21629                           ; BSR set to: 0
 21630  002510  0E01               	movlw	1
 21631  002512  65E2               	cpfsgt	find_volume@fmt& (0+255),b
 21632  002514  D008               	goto	u28580
 21633                           
 21634                           ; BSR set to: 0
 21635  002516  4BE0               	infsnz	find_volume@i& (0+255),f,b
 21636  002518  2BE1               	incf	(find_volume@i+1)& (0+255),f,b
 21637  00251A  51E1               	movf	(find_volume@i+1)& (0+255),w,b
 21638  00251C  E104               	bnz	u28580
 21639  00251E  0E04               	movlw	4
 21640  002520  5DE0               	subwf	find_volume@i& (0+255),w,b
 21641  002522  A0D8               	btfss	status,0,c
 21642  002524  D7C7               	goto	l25219
 21643  002526                     u28580:
 21644                           
 21645                           ; BSR set to: 0
 21646                           ;ff.c: 3273: };ff.c: 3274: if (fmt == 4) return FR_DISK_ERR;
 21647  002526  0E04               	movlw	4
 21648  002528  19E2               	xorwf	find_volume@fmt& (0+255),w,b
 21649  00252A  A4D8               	btfss	status,2,c
 21650  00252C  D002               	goto	l25239
 21651                           
 21652                           ; BSR set to: 0
 21653  00252E  0E01               	movlw	1
 21654  002530  0012               	return	
 21655  002532                     l25239:
 21656                           
 21657                           ; BSR set to: 0
 21658                           ;ff.c: 3275: if (fmt >= 2) return FR_NO_FILESYSTEM;
 21659  002532  0E01               	movlw	1
 21660  002534  65E2               	cpfsgt	find_volume@fmt& (0+255),b
 21661  002536  D002               	goto	l25245
 21662  002538                     u28600:
 21663  002538  0E0D               	movlw	13
 21664  00253A  0012               	return	
 21665  00253C                     l25245:
 21666                           
 21667                           ; BSR set to: 0
 21668                           ;ff.c: 3326: {;ff.c: 3327: if (ld_word(fs->win + 11) != ((UINT)512)) return FR_NO_FILESY
      +                          STEM;
 21669  00253C  0E3A               	movlw	58
 21670  00253E  25E3               	addwf	find_volume@fs& (0+255),w,b
 21671  002540  6E0E               	movwf	ld_word@ptr^0,c
 21672  002542  0E00               	movlw	0
 21673  002544  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 21674  002546  6E0F               	movwf	(ld_word@ptr+1)^0,c
 21675  002548  ECB2  F076         	call	_ld_word	;wreg free
 21676  00254C  0E02               	movlw	2
 21677  00254E  180F               	xorwf	(?_ld_word+1)^0,w,c
 21678  002550  100E               	iorwf	?_ld_word^0,w,c
 21679  002552  A4D8               	btfss	status,2,c
 21680  002554  D7F1               	goto	u28600
 21681                           
 21682                           ;ff.c: 3329: fasize = ld_word(fs->win + 22);
 21683  002556  0E45               	movlw	69
 21684  002558  0100               	movlb	0	; () banked
 21685  00255A  25E3               	addwf	find_volume@fs& (0+255),w,b
 21686  00255C  6E0E               	movwf	ld_word@ptr^0,c
 21687  00255E  0E00               	movlw	0
 21688  002560  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 21689  002562  6E0F               	movwf	(ld_word@ptr+1)^0,c
 21690  002564  ECB2  F076         	call	_ld_word	;wreg free
 21691  002568  C00E  F0D8         	movff	?_ld_word,find_volume@fasize
 21692  00256C  C00F  F0D9         	movff	?_ld_word+1,find_volume@fasize+1
 21693  002570  0100               	movlb	0	; () banked
 21694  002572  6BDA               	clrf	(find_volume@fasize+2)& (0+255),b
 21695  002574  6BDB               	clrf	(find_volume@fasize+3)& (0+255),b
 21696                           
 21697                           ; BSR set to: 0
 21698                           ;ff.c: 3330: if (fasize == 0) fasize = ld_dword(fs->win + 36);
 21699  002576  51D8               	movf	find_volume@fasize& (0+255),w,b
 21700  002578  11D9               	iorwf	(find_volume@fasize+1)& (0+255),w,b
 21701  00257A  11DA               	iorwf	(find_volume@fasize+2)& (0+255),w,b
 21702  00257C  11DB               	iorwf	(find_volume@fasize+3)& (0+255),w,b
 21703  00257E  A4D8               	btfss	status,2,c
 21704  002580  D010               	goto	l25257
 21705                           
 21706                           ; BSR set to: 0
 21707  002582  0E53               	movlw	83
 21708  002584  25E3               	addwf	find_volume@fs& (0+255),w,b
 21709  002586  6E0E               	movwf	ld_dword@ptr^0,c
 21710  002588  0E00               	movlw	0
 21711  00258A  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 21712  00258C  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 21713  00258E  ECB4  F065         	call	_ld_dword	;wreg free
 21714  002592  C00E  F0D8         	movff	?_ld_dword,find_volume@fasize
 21715  002596  C00F  F0D9         	movff	?_ld_dword+1,find_volume@fasize+1
 21716  00259A  C010  F0DA         	movff	?_ld_dword+2,find_volume@fasize+2
 21717  00259E  C011  F0DB         	movff	?_ld_dword+3,find_volume@fasize+3
 21718  0025A2                     l25257:
 21719                           
 21720                           ;ff.c: 3331: fs->fsize = fasize;
 21721  0025A2  0100               	movlb	0	; () banked
 21722  0025A4  EE20 F017          	lfsr	2,23
 21723  0025A8  51E3               	movf	find_volume@fs& (0+255),w,b
 21724  0025AA  26D9               	addwf	fsr2l,f,c
 21725  0025AC  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21726  0025AE  22DA               	addwfc	fsr2h,f,c
 21727  0025B0  C0D8  FFDE         	movff	find_volume@fasize,postinc2
 21728  0025B4  C0D9  FFDE         	movff	find_volume@fasize+1,postinc2
 21729  0025B8  C0DA  FFDE         	movff	find_volume@fasize+2,postinc2
 21730  0025BC  C0DB  FFDE         	movff	find_volume@fasize+3,postinc2
 21731                           
 21732                           ; BSR set to: 0
 21733                           ;ff.c: 3333: fs->n_fats = fs->win[16];
 21734  0025C0  EE20 F03F          	lfsr	2,63
 21735  0025C4  51E3               	movf	find_volume@fs& (0+255),w,b
 21736  0025C6  26D9               	addwf	fsr2l,f,c
 21737  0025C8  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21738  0025CA  22DA               	addwfc	fsr2h,f,c
 21739  0025CC  EE10 F002          	lfsr	1,2
 21740  0025D0  51E3               	movf	find_volume@fs& (0+255),w,b
 21741  0025D2  26E1               	addwf	fsr1l,f,c
 21742  0025D4  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21743  0025D6  22E2               	addwfc	fsr1h,f,c
 21744  0025D8  CFDF FFE7          	movff	indf2,indf1
 21745                           
 21746                           ; BSR set to: 0
 21747                           ;ff.c: 3334: if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;
 21748  0025DC  EE20 F002          	lfsr	2,2
 21749  0025E0  51E3               	movf	find_volume@fs& (0+255),w,b
 21750  0025E2  26D9               	addwf	fsr2l,f,c
 21751  0025E4  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21752  0025E6  22DA               	addwfc	fsr2h,f,c
 21753  0025E8  04DE               	decf	postinc2,w,c
 21754  0025EA  B4D8               	btfsc	status,2,c
 21755  0025EC  D00A               	goto	l25269
 21756                           
 21757                           ; BSR set to: 0
 21758  0025EE  EE20 F002          	lfsr	2,2
 21759  0025F2  51E3               	movf	find_volume@fs& (0+255),w,b
 21760  0025F4  26D9               	addwf	fsr2l,f,c
 21761  0025F6  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21762  0025F8  22DA               	addwfc	fsr2h,f,c
 21763  0025FA  0E02               	movlw	2
 21764  0025FC  18DE               	xorwf	postinc2,w,c
 21765  0025FE  A4D8               	btfss	status,2,c
 21766  002600  D79B               	goto	u28600
 21767  002602                     l25269:
 21768                           
 21769                           ; BSR set to: 0
 21770                           ;ff.c: 3335: fasize *= fs->n_fats;
 21771  002602  C0D8  F00E         	movff	find_volume@fasize,___lmul@multiplier
 21772  002606  C0D9  F00F         	movff	find_volume@fasize+1,___lmul@multiplier+1
 21773  00260A  C0DA  F010         	movff	find_volume@fasize+2,___lmul@multiplier+2
 21774  00260E  C0DB  F011         	movff	find_volume@fasize+3,___lmul@multiplier+3
 21775  002612  EE20 F002          	lfsr	2,2
 21776  002616  51E3               	movf	find_volume@fs& (0+255),w,b
 21777  002618  26D9               	addwf	fsr2l,f,c
 21778  00261A  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21779  00261C  22DA               	addwfc	fsr2h,f,c
 21780  00261E  50DF               	movf	indf2,w,c
 21781  002620  6FA3               	movwf	??_find_volume& (0+255),b
 21782  002622  51A3               	movf	??_find_volume& (0+255),w,b
 21783  002624  6E12               	movwf	___lmul@multiplicand^0,c
 21784  002626  6A13               	clrf	(___lmul@multiplicand+1)^0,c
 21785  002628  6A14               	clrf	(___lmul@multiplicand+2)^0,c
 21786  00262A  6A15               	clrf	(___lmul@multiplicand+3)^0,c
 21787  00262C  EC16  F072         	call	___lmul	;wreg free
 21788  002630  C00E  F0D8         	movff	?___lmul,find_volume@fasize
 21789  002634  C00F  F0D9         	movff	?___lmul+1,find_volume@fasize+1
 21790  002638  C010  F0DA         	movff	?___lmul+2,find_volume@fasize+2
 21791  00263C  C011  F0DB         	movff	?___lmul+3,find_volume@fasize+3
 21792                           
 21793                           ;ff.c: 3337: fs->csize = fs->win[13];
 21794  002640  0100               	movlb	0	; () banked
 21795  002642  EE20 F03C          	lfsr	2,60
 21796  002646  51E3               	movf	find_volume@fs& (0+255),w,b
 21797  002648  26D9               	addwf	fsr2l,f,c
 21798  00264A  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21799  00264C  22DA               	addwfc	fsr2h,f,c
 21800  00264E  50DF               	movf	indf2,w,c
 21801  002650  6FA3               	movwf	??_find_volume& (0+255),b
 21802  002652  6BA4               	clrf	(??_find_volume+1)& (0+255),b
 21803  002654  EE20 F009          	lfsr	2,9
 21804  002658  51E3               	movf	find_volume@fs& (0+255),w,b
 21805  00265A  26D9               	addwf	fsr2l,f,c
 21806  00265C  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21807  00265E  22DA               	addwfc	fsr2h,f,c
 21808  002660  C0A3  FFDE         	movff	??_find_volume,postinc2
 21809  002664  C0A4  FFDD         	movff	??_find_volume+1,postdec2
 21810                           
 21811                           ; BSR set to: 0
 21812                           ;ff.c: 3338: if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTE
      +                          M;
 21813  002668  EE20 F009          	lfsr	2,9
 21814  00266C  51E3               	movf	find_volume@fs& (0+255),w,b
 21815  00266E  26D9               	addwf	fsr2l,f,c
 21816  002670  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21817  002672  22DA               	addwfc	fsr2h,f,c
 21818  002674  50DE               	movf	postinc2,w,c
 21819  002676  10DE               	iorwf	postinc2,w,c
 21820  002678  B4D8               	btfsc	status,2,c
 21821  00267A  D75E               	goto	u28600
 21822                           
 21823                           ; BSR set to: 0
 21824  00267C  EE20 F009          	lfsr	2,9
 21825  002680  51E3               	movf	find_volume@fs& (0+255),w,b
 21826  002682  26D9               	addwf	fsr2l,f,c
 21827  002684  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21828  002686  22DA               	addwfc	fsr2h,f,c
 21829  002688  CFDE F0A3          	movff	postinc2,??_find_volume
 21830  00268C  CFDD F0A4          	movff	postdec2,??_find_volume+1
 21831  002690  0EFF               	movlw	255
 21832  002692  6FA5               	movwf	(??_find_volume+2)& (0+255),b
 21833  002694  0EFF               	movlw	255
 21834  002696  6FA6               	movwf	(??_find_volume+3)& (0+255),b
 21835  002698  EE20 F009          	lfsr	2,9
 21836  00269C  51E3               	movf	find_volume@fs& (0+255),w,b
 21837  00269E  26D9               	addwf	fsr2l,f,c
 21838  0026A0  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21839  0026A2  22DA               	addwfc	fsr2h,f,c
 21840  0026A4  CFDE F0A7          	movff	postinc2,??_find_volume+4
 21841  0026A8  CFDD F0A8          	movff	postdec2,??_find_volume+5
 21842  0026AC  51A5               	movf	(??_find_volume+2)& (0+255),w,b
 21843  0026AE  27A7               	addwf	(??_find_volume+4)& (0+255),f,b
 21844  0026B0  51A6               	movf	(??_find_volume+3)& (0+255),w,b
 21845  0026B2  23A8               	addwfc	(??_find_volume+5)& (0+255),f,b
 21846  0026B4  51A3               	movf	??_find_volume& (0+255),w,b
 21847  0026B6  17A7               	andwf	(??_find_volume+4)& (0+255),f,b
 21848  0026B8  51A4               	movf	(??_find_volume+1)& (0+255),w,b
 21849  0026BA  17A8               	andwf	(??_find_volume+5)& (0+255),f,b
 21850  0026BC  51A7               	movf	(??_find_volume+4)& (0+255),w,b
 21851  0026BE  11A8               	iorwf	(??_find_volume+5)& (0+255),w,b
 21852  0026C0  A4D8               	btfss	status,2,c
 21853  0026C2  D73A               	goto	u28600
 21854                           
 21855                           ; BSR set to: 0
 21856                           ;ff.c: 3340: fs->n_rootdir = ld_word(fs->win + 17);
 21857  0026C4  0E40               	movlw	64
 21858  0026C6  25E3               	addwf	find_volume@fs& (0+255),w,b
 21859  0026C8  6E0E               	movwf	ld_word@ptr^0,c
 21860  0026CA  0E00               	movlw	0
 21861  0026CC  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 21862  0026CE  6E0F               	movwf	(ld_word@ptr+1)^0,c
 21863  0026D0  ECB2  F076         	call	_ld_word	;wreg free
 21864  0026D4  0100               	movlb	0	; () banked
 21865  0026D6  EE20 F007          	lfsr	2,7
 21866  0026DA  51E3               	movf	find_volume@fs& (0+255),w,b
 21867  0026DC  26D9               	addwf	fsr2l,f,c
 21868  0026DE  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21869  0026E0  22DA               	addwfc	fsr2h,f,c
 21870  0026E2  C00E  FFDE         	movff	?_ld_word,postinc2
 21871  0026E6  C00F  FFDD         	movff	?_ld_word+1,postdec2
 21872                           
 21873                           ; BSR set to: 0
 21874                           ;ff.c: 3341: if (fs->n_rootdir % (((UINT)512) / 32)) return FR_NO_FILESYSTEM;
 21875  0026EA  EE20 F007          	lfsr	2,7
 21876  0026EE  51E3               	movf	find_volume@fs& (0+255),w,b
 21877  0026F0  26D9               	addwf	fsr2l,f,c
 21878  0026F2  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21879  0026F4  22DA               	addwfc	fsr2h,f,c
 21880  0026F6  50DF               	movf	indf2,w,c
 21881  0026F8  6FA3               	movwf	??_find_volume& (0+255),b
 21882  0026FA  0E0F               	movlw	15
 21883  0026FC  17A3               	andwf	??_find_volume& (0+255),f,b
 21884  0026FE  A4D8               	btfss	status,2,c
 21885  002700  D71B               	goto	u28600
 21886                           
 21887                           ; BSR set to: 0
 21888                           ;ff.c: 3343: tsect = ld_word(fs->win + 19);
 21889  002702  0E42               	movlw	66
 21890  002704  25E3               	addwf	find_volume@fs& (0+255),w,b
 21891  002706  6E0E               	movwf	ld_word@ptr^0,c
 21892  002708  0E00               	movlw	0
 21893  00270A  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 21894  00270C  6E0F               	movwf	(ld_word@ptr+1)^0,c
 21895  00270E  ECB2  F076         	call	_ld_word	;wreg free
 21896  002712  C00E  F0CF         	movff	?_ld_word,find_volume@tsect
 21897  002716  C00F  F0D0         	movff	?_ld_word+1,find_volume@tsect+1
 21898  00271A  0100               	movlb	0	; () banked
 21899  00271C  6BD1               	clrf	(find_volume@tsect+2)& (0+255),b
 21900  00271E  6BD2               	clrf	(find_volume@tsect+3)& (0+255),b
 21901                           
 21902                           ; BSR set to: 0
 21903                           ;ff.c: 3344: if (tsect == 0) tsect = ld_dword(fs->win + 32);
 21904  002720  51CF               	movf	find_volume@tsect& (0+255),w,b
 21905  002722  11D0               	iorwf	(find_volume@tsect+1)& (0+255),w,b
 21906  002724  11D1               	iorwf	(find_volume@tsect+2)& (0+255),w,b
 21907  002726  11D2               	iorwf	(find_volume@tsect+3)& (0+255),w,b
 21908  002728  A4D8               	btfss	status,2,c
 21909  00272A  D010               	goto	l577
 21910                           
 21911                           ; BSR set to: 0
 21912  00272C  0E4F               	movlw	79
 21913  00272E  25E3               	addwf	find_volume@fs& (0+255),w,b
 21914  002730  6E0E               	movwf	ld_dword@ptr^0,c
 21915  002732  0E00               	movlw	0
 21916  002734  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 21917  002736  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 21918  002738  ECB4  F065         	call	_ld_dword	;wreg free
 21919  00273C  C00E  F0CF         	movff	?_ld_dword,find_volume@tsect
 21920  002740  C00F  F0D0         	movff	?_ld_dword+1,find_volume@tsect+1
 21921  002744  C010  F0D1         	movff	?_ld_dword+2,find_volume@tsect+2
 21922  002748  C011  F0D2         	movff	?_ld_dword+3,find_volume@tsect+3
 21923  00274C                     l577:
 21924                           
 21925                           ;ff.c: 3346: nrsv = ld_word(fs->win + 14);
 21926  00274C  0E3D               	movlw	61
 21927  00274E  0100               	movlb	0	; () banked
 21928  002750  25E3               	addwf	find_volume@fs& (0+255),w,b
 21929  002752  6E0E               	movwf	ld_word@ptr^0,c
 21930  002754  0E00               	movlw	0
 21931  002756  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 21932  002758  6E0F               	movwf	(ld_word@ptr+1)^0,c
 21933  00275A  ECB2  F076         	call	_ld_word	;wreg free
 21934  00275E  C00E  F0CD         	movff	?_ld_word,find_volume@nrsv
 21935  002762  C00F  F0CE         	movff	?_ld_word+1,find_volume@nrsv+1
 21936                           
 21937                           ;ff.c: 3347: if (nrsv == 0) return FR_NO_FILESYSTEM;
 21938  002766  0100               	movlb	0	; () banked
 21939  002768  51CD               	movf	find_volume@nrsv& (0+255),w,b
 21940  00276A  11CE               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
 21941  00276C  B4D8               	btfsc	status,2,c
 21942  00276E  D6E4               	goto	u28600
 21943                           
 21944                           ; BSR set to: 0
 21945                           ;ff.c: 3350: sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
 21946  002770  EE20 F007          	lfsr	2,7
 21947  002774  51E3               	movf	find_volume@fs& (0+255),w,b
 21948  002776  26D9               	addwf	fsr2l,f,c
 21949  002778  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 21950  00277A  22DA               	addwfc	fsr2h,f,c
 21951  00277C  CFDE F0A3          	movff	postinc2,??_find_volume
 21952  002780  CFDD F0A4          	movff	postdec2,??_find_volume+1
 21953  002784  0E04               	movlw	4
 21954  002786  6FA5               	movwf	(??_find_volume+2)& (0+255),b
 21955  002788                     u28705:
 21956  002788  90D8               	bcf	status,0,c
 21957  00278A  33A4               	rrcf	(??_find_volume+1)& (0+255),f,b
 21958  00278C  33A3               	rrcf	??_find_volume& (0+255),f,b
 21959  00278E  2FA5               	decfsz	(??_find_volume+2)& (0+255),f,b
 21960  002790  D7FB               	goto	u28705
 21961  002792  51CD               	movf	find_volume@nrsv& (0+255),w,b
 21962  002794  25A3               	addwf	??_find_volume& (0+255),w,b
 21963  002796  6FA6               	movwf	(??_find_volume+3)& (0+255),b
 21964  002798  51CE               	movf	(find_volume@nrsv+1)& (0+255),w,b
 21965  00279A  21A4               	addwfc	(??_find_volume+1)& (0+255),w,b
 21966  00279C  6FA7               	movwf	(??_find_volume+4)& (0+255),b
 21967  00279E  6BA8               	clrf	(??_find_volume+5)& (0+255),b
 21968  0027A0  B0D8               	btfsc	status,0,c
 21969  0027A2  2BA8               	incf	(??_find_volume+5)& (0+255),f,b
 21970  0027A4  6BA9               	clrf	(??_find_volume+6)& (0+255),b
 21971  0027A6  51D8               	movf	find_volume@fasize& (0+255),w,b
 21972  0027A8  25A6               	addwf	(??_find_volume+3)& (0+255),w,b
 21973  0027AA  6FC7               	movwf	find_volume@sysect& (0+255),b
 21974  0027AC  51D9               	movf	(find_volume@fasize+1)& (0+255),w,b
 21975  0027AE  21A7               	addwfc	(??_find_volume+4)& (0+255),w,b
 21976  0027B0  6FC8               	movwf	(find_volume@sysect+1)& (0+255),b
 21977  0027B2  51DA               	movf	(find_volume@fasize+2)& (0+255),w,b
 21978  0027B4  21A8               	addwfc	(??_find_volume+5)& (0+255),w,b
 21979  0027B6  6FC9               	movwf	(find_volume@sysect+2)& (0+255),b
 21980  0027B8  51DB               	movf	(find_volume@fasize+3)& (0+255),w,b
 21981  0027BA  21A9               	addwfc	(??_find_volume+6)& (0+255),w,b
 21982  0027BC  6FCA               	movwf	(find_volume@sysect+3)& (0+255),b
 21983                           
 21984                           ; BSR set to: 0
 21985                           ;ff.c: 3351: if (tsect < sysect) return FR_NO_FILESYSTEM;
 21986  0027BE  51C7               	movf	find_volume@sysect& (0+255),w,b
 21987  0027C0  5DCF               	subwf	find_volume@tsect& (0+255),w,b
 21988  0027C2  51C8               	movf	(find_volume@sysect+1)& (0+255),w,b
 21989  0027C4  59D0               	subwfb	(find_volume@tsect+1)& (0+255),w,b
 21990  0027C6  51C9               	movf	(find_volume@sysect+2)& (0+255),w,b
 21991  0027C8  59D1               	subwfb	(find_volume@tsect+2)& (0+255),w,b
 21992  0027CA  51CA               	movf	(find_volume@sysect+3)& (0+255),w,b
 21993  0027CC  59D2               	subwfb	(find_volume@tsect+3)& (0+255),w,b
 21994  0027CE  A0D8               	btfss	status,0,c
 21995  0027D0  D6B3               	goto	u28600
 21996                           
 21997                           ; BSR set to: 0
 21998                           ;ff.c: 3352: nclst = (tsect - sysect) / fs->csize;
 21999  0027D2  51C7               	movf	find_volume@sysect& (0+255),w,b
 22000  0027D4  5DCF               	subwf	find_volume@tsect& (0+255),w,b
 22001  0027D6  6E0E               	movwf	___lldiv@dividend^0,c
 22002  0027D8  51C8               	movf	(find_volume@sysect+1)& (0+255),w,b
 22003  0027DA  59D0               	subwfb	(find_volume@tsect+1)& (0+255),w,b
 22004  0027DC  6E0F               	movwf	(___lldiv@dividend+1)^0,c
 22005  0027DE  51C9               	movf	(find_volume@sysect+2)& (0+255),w,b
 22006  0027E0  59D1               	subwfb	(find_volume@tsect+2)& (0+255),w,b
 22007  0027E2  6E10               	movwf	(___lldiv@dividend+2)^0,c
 22008  0027E4  51CA               	movf	(find_volume@sysect+3)& (0+255),w,b
 22009  0027E6  59D2               	subwfb	(find_volume@tsect+3)& (0+255),w,b
 22010  0027E8  6E11               	movwf	(___lldiv@dividend+3)^0,c
 22011  0027EA  EE20 F009          	lfsr	2,9
 22012  0027EE  51E3               	movf	find_volume@fs& (0+255),w,b
 22013  0027F0  26D9               	addwf	fsr2l,f,c
 22014  0027F2  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22015  0027F4  22DA               	addwfc	fsr2h,f,c
 22016  0027F6  CFDE F0A3          	movff	postinc2,??_find_volume
 22017  0027FA  CFDD F0A4          	movff	postdec2,??_find_volume+1
 22018  0027FE  C0A3  F012         	movff	??_find_volume,___lldiv@divisor
 22019  002802  C0A4  F013         	movff	??_find_volume+1,___lldiv@divisor+1
 22020  002806  6A14               	clrf	(___lldiv@divisor+2)^0,c
 22021  002808  6A15               	clrf	(___lldiv@divisor+3)^0,c
 22022  00280A  EC97  F06D         	call	___lldiv	;wreg free
 22023  00280E  C00E  F0D4         	movff	?___lldiv,find_volume@nclst
 22024  002812  C00F  F0D5         	movff	?___lldiv+1,find_volume@nclst+1
 22025  002816  C010  F0D6         	movff	?___lldiv+2,find_volume@nclst+2
 22026  00281A  C011  F0D7         	movff	?___lldiv+3,find_volume@nclst+3
 22027                           
 22028                           ; BSR set to: 0
 22029                           ;ff.c: 3353: if (nclst == 0) return FR_NO_FILESYSTEM;
 22030  00281E  51D4               	movf	find_volume@nclst& (0+255),w,b
 22031  002820  11D5               	iorwf	(find_volume@nclst+1)& (0+255),w,b
 22032  002822  11D6               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 22033  002824  11D7               	iorwf	(find_volume@nclst+3)& (0+255),w,b
 22034  002826  B4D8               	btfsc	status,2,c
 22035  002828  D687               	goto	u28600
 22036                           
 22037                           ; BSR set to: 0
 22038                           ;ff.c: 3354: fmt = 0;
 22039  00282A  0E00               	movlw	0
 22040  00282C  6FE2               	movwf	find_volume@fmt& (0+255),b
 22041                           
 22042                           ; BSR set to: 0
 22043                           ;ff.c: 3355: if (nclst <= 0x0FFFFFF5) fmt = 3;
 22044  00282E  0EF6               	movlw	246
 22045  002830  5DD4               	subwf	find_volume@nclst& (0+255),w,b
 22046  002832  0EFF               	movlw	255
 22047  002834  59D5               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 22048  002836  0EFF               	movlw	255
 22049  002838  59D6               	subwfb	(find_volume@nclst+2)& (0+255),w,b
 22050  00283A  0E0F               	movlw	15
 22051  00283C  59D7               	subwfb	(find_volume@nclst+3)& (0+255),w,b
 22052  00283E  B0D8               	btfsc	status,0,c
 22053  002840  D002               	goto	l25323
 22054                           
 22055                           ; BSR set to: 0
 22056  002842  0E03               	movlw	3
 22057  002844  6FE2               	movwf	find_volume@fmt& (0+255),b
 22058  002846                     l25323:
 22059                           
 22060                           ; BSR set to: 0
 22061                           ;ff.c: 3356: if (nclst <= 0xFFF5) fmt = 2;
 22062  002846  51D7               	movf	(find_volume@nclst+3)& (0+255),w,b
 22063  002848  11D6               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 22064  00284A  E108               	bnz	l25327
 22065  00284C  0EF6               	movlw	246
 22066  00284E  5DD4               	subwf	find_volume@nclst& (0+255),w,b
 22067  002850  0EFF               	movlw	255
 22068  002852  59D5               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 22069  002854  B0D8               	btfsc	status,0,c
 22070  002856  D002               	goto	l25327
 22071                           
 22072                           ; BSR set to: 0
 22073  002858  0E02               	movlw	2
 22074  00285A  6FE2               	movwf	find_volume@fmt& (0+255),b
 22075  00285C                     l25327:
 22076                           
 22077                           ; BSR set to: 0
 22078                           ;ff.c: 3357: if (nclst <= 0xFF5) fmt = 1;
 22079  00285C  51D7               	movf	(find_volume@nclst+3)& (0+255),w,b
 22080  00285E  11D6               	iorwf	(find_volume@nclst+2)& (0+255),w,b
 22081  002860  E108               	bnz	l583
 22082  002862  0EF6               	movlw	246
 22083  002864  5DD4               	subwf	find_volume@nclst& (0+255),w,b
 22084  002866  0E0F               	movlw	15
 22085  002868  59D5               	subwfb	(find_volume@nclst+1)& (0+255),w,b
 22086  00286A  B0D8               	btfsc	status,0,c
 22087  00286C  D002               	goto	l583
 22088                           
 22089                           ; BSR set to: 0
 22090  00286E  0E01               	movlw	1
 22091  002870  6FE2               	movwf	find_volume@fmt& (0+255),b
 22092  002872                     l583:
 22093                           
 22094                           ; BSR set to: 0
 22095                           ;ff.c: 3358: if (fmt == 0) return FR_NO_FILESYSTEM;
 22096  002872  51E2               	movf	find_volume@fmt& (0+255),w,b
 22097  002874  B4D8               	btfsc	status,2,c
 22098  002876  D660               	goto	u28600
 22099                           
 22100                           ; BSR set to: 0
 22101                           ;ff.c: 3361: fs->n_fatent = nclst + 2;
 22102  002878  0E02               	movlw	2
 22103  00287A  25D4               	addwf	find_volume@nclst& (0+255),w,b
 22104  00287C  6FA3               	movwf	??_find_volume& (0+255),b
 22105  00287E  0E00               	movlw	0
 22106  002880  21D5               	addwfc	(find_volume@nclst+1)& (0+255),w,b
 22107  002882  6FA4               	movwf	(??_find_volume+1)& (0+255),b
 22108  002884  0E00               	movlw	0
 22109  002886  21D6               	addwfc	(find_volume@nclst+2)& (0+255),w,b
 22110  002888  6FA5               	movwf	(??_find_volume+2)& (0+255),b
 22111  00288A  0E00               	movlw	0
 22112  00288C  21D7               	addwfc	(find_volume@nclst+3)& (0+255),w,b
 22113  00288E  6FA6               	movwf	(??_find_volume+3)& (0+255),b
 22114  002890  EE20 F013          	lfsr	2,19
 22115  002894  51E3               	movf	find_volume@fs& (0+255),w,b
 22116  002896  26D9               	addwf	fsr2l,f,c
 22117  002898  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22118  00289A  22DA               	addwfc	fsr2h,f,c
 22119  00289C  C0A3  FFDE         	movff	??_find_volume,postinc2
 22120  0028A0  C0A4  FFDE         	movff	??_find_volume+1,postinc2
 22121  0028A4  C0A5  FFDE         	movff	??_find_volume+2,postinc2
 22122  0028A8  C0A6  FFDE         	movff	??_find_volume+3,postinc2
 22123                           
 22124                           ;ff.c: 3362: fs->volbase = bsect;
 22125  0028AC  EE20 F01B          	lfsr	2,27
 22126  0028B0  51E3               	movf	find_volume@fs& (0+255),w,b
 22127  0028B2  26D9               	addwf	fsr2l,f,c
 22128  0028B4  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22129  0028B6  22DA               	addwfc	fsr2h,f,c
 22130  0028B8  C0DC  FFDE         	movff	find_volume@bsect,postinc2
 22131  0028BC  C0DD  FFDE         	movff	find_volume@bsect+1,postinc2
 22132  0028C0  C0DE  FFDE         	movff	find_volume@bsect+2,postinc2
 22133  0028C4  C0DF  FFDE         	movff	find_volume@bsect+3,postinc2
 22134                           
 22135                           ;ff.c: 3363: fs->fatbase = bsect + nrsv;
 22136  0028C8  51CD               	movf	find_volume@nrsv& (0+255),w,b
 22137  0028CA  25DC               	addwf	find_volume@bsect& (0+255),w,b
 22138  0028CC  6FA3               	movwf	??_find_volume& (0+255),b
 22139  0028CE  51CE               	movf	(find_volume@nrsv+1)& (0+255),w,b
 22140  0028D0  21DD               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 22141  0028D2  6FA4               	movwf	(??_find_volume+1)& (0+255),b
 22142  0028D4  0E00               	movlw	0
 22143  0028D6  21DE               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 22144  0028D8  6FA5               	movwf	(??_find_volume+2)& (0+255),b
 22145  0028DA  0E00               	movlw	0
 22146  0028DC  21DF               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 22147  0028DE  6FA6               	movwf	(??_find_volume+3)& (0+255),b
 22148  0028E0  EE20 F01F          	lfsr	2,31
 22149  0028E4  51E3               	movf	find_volume@fs& (0+255),w,b
 22150  0028E6  26D9               	addwf	fsr2l,f,c
 22151  0028E8  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22152  0028EA  22DA               	addwfc	fsr2h,f,c
 22153  0028EC  C0A3  FFDE         	movff	??_find_volume,postinc2
 22154  0028F0  C0A4  FFDE         	movff	??_find_volume+1,postinc2
 22155  0028F4  C0A5  FFDE         	movff	??_find_volume+2,postinc2
 22156  0028F8  C0A6  FFDE         	movff	??_find_volume+3,postinc2
 22157                           
 22158                           ;ff.c: 3364: fs->database = bsect + sysect;
 22159  0028FC  51C7               	movf	find_volume@sysect& (0+255),w,b
 22160  0028FE  25DC               	addwf	find_volume@bsect& (0+255),w,b
 22161  002900  6FA3               	movwf	??_find_volume& (0+255),b
 22162  002902  51C8               	movf	(find_volume@sysect+1)& (0+255),w,b
 22163  002904  21DD               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 22164  002906  6FA4               	movwf	(??_find_volume+1)& (0+255),b
 22165  002908  51C9               	movf	(find_volume@sysect+2)& (0+255),w,b
 22166  00290A  21DE               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 22167  00290C  6FA5               	movwf	(??_find_volume+2)& (0+255),b
 22168  00290E  51CA               	movf	(find_volume@sysect+3)& (0+255),w,b
 22169  002910  21DF               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 22170  002912  6FA6               	movwf	(??_find_volume+3)& (0+255),b
 22171  002914  EE20 F027          	lfsr	2,39
 22172  002918  51E3               	movf	find_volume@fs& (0+255),w,b
 22173  00291A  26D9               	addwf	fsr2l,f,c
 22174  00291C  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22175  00291E  22DA               	addwfc	fsr2h,f,c
 22176  002920  C0A3  FFDE         	movff	??_find_volume,postinc2
 22177  002924  C0A4  FFDE         	movff	??_find_volume+1,postinc2
 22178  002928  C0A5  FFDE         	movff	??_find_volume+2,postinc2
 22179  00292C  C0A6  FFDE         	movff	??_find_volume+3,postinc2
 22180                           
 22181                           ; BSR set to: 0
 22182                           ;ff.c: 3365: if (fmt == 3) {
 22183  002930  0E03               	movlw	3
 22184  002932  19E2               	xorwf	find_volume@fmt& (0+255),w,b
 22185  002934  A4D8               	btfss	status,2,c
 22186  002936  D04D               	goto	l25355
 22187                           
 22188                           ; BSR set to: 0
 22189                           ;ff.c: 3366: if (ld_word(fs->win + 42) != 0) return FR_NO_FILESYSTEM;
 22190  002938  0E59               	movlw	89
 22191  00293A  25E3               	addwf	find_volume@fs& (0+255),w,b
 22192  00293C  6E0E               	movwf	ld_word@ptr^0,c
 22193  00293E  0E00               	movlw	0
 22194  002940  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 22195  002942  6E0F               	movwf	(ld_word@ptr+1)^0,c
 22196  002944  ECB2  F076         	call	_ld_word	;wreg free
 22197  002948  500E               	movf	?_ld_word^0,w,c
 22198  00294A  100F               	iorwf	(?_ld_word+1)^0,w,c
 22199  00294C  A4D8               	btfss	status,2,c
 22200  00294E  D5F4               	goto	u28600
 22201                           
 22202                           ;ff.c: 3367: if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;
 22203  002950  0100               	movlb	0	; () banked
 22204  002952  EE20 F007          	lfsr	2,7
 22205  002956  51E3               	movf	find_volume@fs& (0+255),w,b
 22206  002958  26D9               	addwf	fsr2l,f,c
 22207  00295A  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22208  00295C  22DA               	addwfc	fsr2h,f,c
 22209  00295E  50DE               	movf	postinc2,w,c
 22210  002960  10DE               	iorwf	postinc2,w,c
 22211  002962  A4D8               	btfss	status,2,c
 22212  002964  D5E9               	goto	u28600
 22213                           
 22214                           ; BSR set to: 0
 22215                           ;ff.c: 3368: fs->dirbase = ld_dword(fs->win + 44);
 22216  002966  0E5B               	movlw	91
 22217  002968  25E3               	addwf	find_volume@fs& (0+255),w,b
 22218  00296A  6E0E               	movwf	ld_dword@ptr^0,c
 22219  00296C  0E00               	movlw	0
 22220  00296E  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 22221  002970  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 22222  002972  ECB4  F065         	call	_ld_dword	;wreg free
 22223  002976  0100               	movlb	0	; () banked
 22224  002978  EE20 F023          	lfsr	2,35
 22225  00297C  51E3               	movf	find_volume@fs& (0+255),w,b
 22226  00297E  26D9               	addwf	fsr2l,f,c
 22227  002980  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22228  002982  22DA               	addwfc	fsr2h,f,c
 22229  002984  C00E  FFDE         	movff	?_ld_dword,postinc2
 22230  002988  C00F  FFDE         	movff	?_ld_dword+1,postinc2
 22231  00298C  C010  FFDE         	movff	?_ld_dword+2,postinc2
 22232  002990  C011  FFDE         	movff	?_ld_dword+3,postinc2
 22233                           
 22234                           ; BSR set to: 0
 22235                           ;ff.c: 3369: szbfat = fs->n_fatent * 4;
 22236  002994  EE20 F013          	lfsr	2,19
 22237  002998  51E3               	movf	find_volume@fs& (0+255),w,b
 22238  00299A  26D9               	addwf	fsr2l,f,c
 22239  00299C  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22240  00299E  22DA               	addwfc	fsr2h,f,c
 22241  0029A0  CFDE F0A3          	movff	postinc2,??_find_volume
 22242  0029A4  CFDE F0A4          	movff	postinc2,??_find_volume+1
 22243  0029A8  CFDE F0A5          	movff	postinc2,??_find_volume+2
 22244  0029AC  CFDE F0A6          	movff	postinc2,??_find_volume+3
 22245  0029B0  0E02               	movlw	2
 22246  0029B2                     u28805:
 22247  0029B2  90D8               	bcf	status,0,c
 22248  0029B4  37A3               	rlcf	??_find_volume& (0+255),f,b
 22249  0029B6  37A4               	rlcf	(??_find_volume+1)& (0+255),f,b
 22250  0029B8  37A5               	rlcf	(??_find_volume+2)& (0+255),f,b
 22251  0029BA  37A6               	rlcf	(??_find_volume+3)& (0+255),f,b
 22252  0029BC  2EE8               	decfsz	wreg,f,c
 22253  0029BE  D7F9               	goto	u28805
 22254  0029C0  C0A3  F0C1         	movff	??_find_volume,find_volume@szbfat
 22255  0029C4  C0A4  F0C2         	movff	??_find_volume+1,find_volume@szbfat+1
 22256  0029C8  C0A5  F0C3         	movff	??_find_volume+2,find_volume@szbfat+2
 22257  0029CC  C0A6  F0C4         	movff	??_find_volume+3,find_volume@szbfat+3
 22258                           
 22259                           ;ff.c: 3370: } else {
 22260  0029D0  D091               	goto	l588
 22261  0029D2                     l25355:
 22262                           
 22263                           ; BSR set to: 0
 22264                           ;ff.c: 3371: if (fs->n_rootdir == 0) return FR_NO_FILESYSTEM;
 22265  0029D2  EE20 F007          	lfsr	2,7
 22266  0029D6  51E3               	movf	find_volume@fs& (0+255),w,b
 22267  0029D8  26D9               	addwf	fsr2l,f,c
 22268  0029DA  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22269  0029DC  22DA               	addwfc	fsr2h,f,c
 22270  0029DE  50DE               	movf	postinc2,w,c
 22271  0029E0  10DE               	iorwf	postinc2,w,c
 22272  0029E2  B4D8               	btfsc	status,2,c
 22273  0029E4  D5A9               	goto	u28600
 22274                           
 22275                           ; BSR set to: 0
 22276                           ;ff.c: 3372: fs->dirbase = fs->fatbase + fasize;
 22277  0029E6  EE20 F01F          	lfsr	2,31
 22278  0029EA  51E3               	movf	find_volume@fs& (0+255),w,b
 22279  0029EC  26D9               	addwf	fsr2l,f,c
 22280  0029EE  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22281  0029F0  22DA               	addwfc	fsr2h,f,c
 22282  0029F2  CFDE F0A3          	movff	postinc2,??_find_volume
 22283  0029F6  CFDE F0A4          	movff	postinc2,??_find_volume+1
 22284  0029FA  CFDE F0A5          	movff	postinc2,??_find_volume+2
 22285  0029FE  CFDE F0A6          	movff	postinc2,??_find_volume+3
 22286  002A02  51D8               	movf	find_volume@fasize& (0+255),w,b
 22287  002A04  25A3               	addwf	??_find_volume& (0+255),w,b
 22288  002A06  6FA7               	movwf	(??_find_volume+4)& (0+255),b
 22289  002A08  51D9               	movf	(find_volume@fasize+1)& (0+255),w,b
 22290  002A0A  21A4               	addwfc	(??_find_volume+1)& (0+255),w,b
 22291  002A0C  6FA8               	movwf	(??_find_volume+5)& (0+255),b
 22292  002A0E  51DA               	movf	(find_volume@fasize+2)& (0+255),w,b
 22293  002A10  21A5               	addwfc	(??_find_volume+2)& (0+255),w,b
 22294  002A12  6FA9               	movwf	(??_find_volume+6)& (0+255),b
 22295  002A14  51DB               	movf	(find_volume@fasize+3)& (0+255),w,b
 22296  002A16  21A6               	addwfc	(??_find_volume+3)& (0+255),w,b
 22297  002A18  6FAA               	movwf	(??_find_volume+7)& (0+255),b
 22298  002A1A  EE20 F023          	lfsr	2,35
 22299  002A1E  51E3               	movf	find_volume@fs& (0+255),w,b
 22300  002A20  26D9               	addwf	fsr2l,f,c
 22301  002A22  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22302  002A24  22DA               	addwfc	fsr2h,f,c
 22303  002A26  C0A7  FFDE         	movff	??_find_volume+4,postinc2
 22304  002A2A  C0A8  FFDE         	movff	??_find_volume+5,postinc2
 22305  002A2E  C0A9  FFDE         	movff	??_find_volume+6,postinc2
 22306  002A32  C0AA  FFDE         	movff	??_find_volume+7,postinc2
 22307                           
 22308                           ; BSR set to: 0
 22309                           ;ff.c: 3373: szbfat = (fmt == 2) ?;ff.c: 3374: fs->n_fatent * 2 : fs->n_fatent * 3 / 2 +
      +                           (fs->n_fatent & 1);
 22310  002A36  0E02               	movlw	2
 22311  002A38  19E2               	xorwf	find_volume@fmt& (0+255),w,b
 22312  002A3A  B4D8               	btfsc	status,2,c
 22313  002A3C  D044               	goto	l25367
 22314                           
 22315                           ; BSR set to: 0
 22316  002A3E  EE20 F013          	lfsr	2,19
 22317  002A42  51E3               	movf	find_volume@fs& (0+255),w,b
 22318  002A44  26D9               	addwf	fsr2l,f,c
 22319  002A46  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22320  002A48  22DA               	addwfc	fsr2h,f,c
 22321  002A4A  CFDE F0A3          	movff	postinc2,??_find_volume
 22322  002A4E  CFDE F0A4          	movff	postinc2,??_find_volume+1
 22323  002A52  CFDE F0A5          	movff	postinc2,??_find_volume+2
 22324  002A56  CFDE F0A6          	movff	postinc2,??_find_volume+3
 22325  002A5A  0E01               	movlw	1
 22326  002A5C  15A3               	andwf	??_find_volume& (0+255),w,b
 22327  002A5E  6FA7               	movwf	(??_find_volume+4)& (0+255),b
 22328  002A60  0E00               	movlw	0
 22329  002A62  15A4               	andwf	(??_find_volume+1)& (0+255),w,b
 22330  002A64  6FA8               	movwf	(??_find_volume+5)& (0+255),b
 22331  002A66  0E00               	movlw	0
 22332  002A68  15A5               	andwf	(??_find_volume+2)& (0+255),w,b
 22333  002A6A  6FA9               	movwf	(??_find_volume+6)& (0+255),b
 22334  002A6C  0E00               	movlw	0
 22335  002A6E  15A6               	andwf	(??_find_volume+3)& (0+255),w,b
 22336  002A70  6FAA               	movwf	(??_find_volume+7)& (0+255),b
 22337  002A72  EE20 F013          	lfsr	2,19
 22338  002A76  51E3               	movf	find_volume@fs& (0+255),w,b
 22339  002A78  26D9               	addwf	fsr2l,f,c
 22340  002A7A  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22341  002A7C  22DA               	addwfc	fsr2h,f,c
 22342  002A7E  CFDE F00E          	movff	postinc2,___lmul@multiplier
 22343  002A82  CFDE F00F          	movff	postinc2,___lmul@multiplier+1
 22344  002A86  CFDE F010          	movff	postinc2,___lmul@multiplier+2
 22345  002A8A  CFDE F011          	movff	postinc2,___lmul@multiplier+3
 22346  002A8E  0E03               	movlw	3
 22347  002A90  6E12               	movwf	___lmul@multiplicand^0,c
 22348  002A92  0E00               	movlw	0
 22349  002A94  6E13               	movwf	(___lmul@multiplicand+1)^0,c
 22350  002A96  0E00               	movlw	0
 22351  002A98  6E14               	movwf	(___lmul@multiplicand+2)^0,c
 22352  002A9A  0E00               	movlw	0
 22353  002A9C  6E15               	movwf	(___lmul@multiplicand+3)^0,c
 22354  002A9E  EC16  F072         	call	___lmul	;wreg free
 22355  002AA2  90D8               	bcf	status,0,c
 22356  002AA4  3211               	rrcf	(?___lmul+3)^0,f,c
 22357  002AA6  3210               	rrcf	(?___lmul+2)^0,f,c
 22358  002AA8  320F               	rrcf	(?___lmul+1)^0,f,c
 22359  002AAA  320E               	rrcf	?___lmul^0,f,c
 22360  002AAC  0100               	movlb	0	; () banked
 22361  002AAE  51A7               	movf	(??_find_volume+4)& (0+255),w,b
 22362  002AB0  240E               	addwf	?___lmul^0,w,c
 22363  002AB2  6FC1               	movwf	find_volume@szbfat& (0+255),b
 22364  002AB4  51A8               	movf	(??_find_volume+5)& (0+255),w,b
 22365  002AB6  200F               	addwfc	(?___lmul+1)^0,w,c
 22366  002AB8  6FC2               	movwf	(find_volume@szbfat+1)& (0+255),b
 22367  002ABA  51A9               	movf	(??_find_volume+6)& (0+255),w,b
 22368  002ABC  2010               	addwfc	(?___lmul+2)^0,w,c
 22369  002ABE  6FC3               	movwf	(find_volume@szbfat+2)& (0+255),b
 22370  002AC0  51AA               	movf	(??_find_volume+7)& (0+255),w,b
 22371  002AC2  2011               	addwfc	(?___lmul+3)^0,w,c
 22372  002AC4  D016               	goto	L17
 22373  002AC6                     l25367:
 22374                           
 22375                           ; BSR set to: 0
 22376  002AC6  EE20 F013          	lfsr	2,19
 22377  002ACA  51E3               	movf	find_volume@fs& (0+255),w,b
 22378  002ACC  26D9               	addwf	fsr2l,f,c
 22379  002ACE  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22380  002AD0  22DA               	addwfc	fsr2h,f,c
 22381  002AD2  CFDE F0A3          	movff	postinc2,??_find_volume
 22382  002AD6  CFDE F0A4          	movff	postinc2,??_find_volume+1
 22383  002ADA  CFDE F0A5          	movff	postinc2,??_find_volume+2
 22384  002ADE  CFDE F0A6          	movff	postinc2,??_find_volume+3
 22385  002AE2  90D8               	bcf	status,0,c
 22386  002AE4  35A3               	rlcf	??_find_volume& (0+255),w,b
 22387  002AE6  6FC1               	movwf	find_volume@szbfat& (0+255),b
 22388  002AE8  35A4               	rlcf	(??_find_volume+1)& (0+255),w,b
 22389  002AEA  6FC2               	movwf	(find_volume@szbfat+1)& (0+255),b
 22390  002AEC  35A5               	rlcf	(??_find_volume+2)& (0+255),w,b
 22391  002AEE  6FC3               	movwf	(find_volume@szbfat+2)& (0+255),b
 22392  002AF0  35A6               	rlcf	(??_find_volume+3)& (0+255),w,b
 22393  002AF2                     L17:
 22394  002AF2  6FC4               	movwf	(find_volume@szbfat+3)& (0+255),b
 22395  002AF4                     l588:
 22396                           
 22397                           ; BSR set to: 0
 22398                           ;ff.c: 3375: };ff.c: 3376: if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512)) r
      +                          eturn FR_NO_FILESYSTEM;
 22399  002AF4  0EFF               	movlw	255
 22400  002AF6  25C1               	addwf	find_volume@szbfat& (0+255),w,b
 22401  002AF8  6FA3               	movwf	??_find_volume& (0+255),b
 22402  002AFA  0E01               	movlw	1
 22403  002AFC  21C2               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
 22404  002AFE  6FA4               	movwf	(??_find_volume+1)& (0+255),b
 22405  002B00  0E00               	movlw	0
 22406  002B02  21C3               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
 22407  002B04  6FA5               	movwf	(??_find_volume+2)& (0+255),b
 22408  002B06  0E00               	movlw	0
 22409  002B08  21C4               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
 22410  002B0A  6FA6               	movwf	(??_find_volume+3)& (0+255),b
 22411  002B0C  0E0A               	movlw	10
 22412  002B0E  D005               	goto	u28830
 22413  002B10                     u28835:
 22414  002B10  90D8               	bcf	status,0,c
 22415  002B12  33A6               	rrcf	(??_find_volume+3)& (0+255),f,b
 22416  002B14  33A5               	rrcf	(??_find_volume+2)& (0+255),f,b
 22417  002B16  33A4               	rrcf	(??_find_volume+1)& (0+255),f,b
 22418  002B18  33A3               	rrcf	??_find_volume& (0+255),f,b
 22419  002B1A                     u28830:
 22420  002B1A  2EE8               	decfsz	wreg,f,c
 22421  002B1C  D7F9               	goto	u28835
 22422  002B1E  EE20 F017          	lfsr	2,23
 22423  002B22  51E3               	movf	find_volume@fs& (0+255),w,b
 22424  002B24  26D9               	addwf	fsr2l,f,c
 22425  002B26  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22426  002B28  22DA               	addwfc	fsr2h,f,c
 22427  002B2A  51A3               	movf	??_find_volume& (0+255),w,b
 22428  002B2C  5CDE               	subwf	postinc2,w,c
 22429  002B2E  51A4               	movf	(??_find_volume+1)& (0+255),w,b
 22430  002B30  58DE               	subwfb	postinc2,w,c
 22431  002B32  51A5               	movf	(??_find_volume+2)& (0+255),w,b
 22432  002B34  58DE               	subwfb	postinc2,w,c
 22433  002B36  51A6               	movf	(??_find_volume+3)& (0+255),w,b
 22434  002B38  58DE               	subwfb	postinc2,w,c
 22435  002B3A  A0D8               	btfss	status,0,c
 22436  002B3C  D4FD               	goto	u28600
 22437                           
 22438                           ; BSR set to: 0
 22439                           ;ff.c: 3380: fs->last_clst = fs->free_clst = 0xFFFFFFFF;
 22440  002B3E  EE20 F00F          	lfsr	2,15
 22441  002B42  51E3               	movf	find_volume@fs& (0+255),w,b
 22442  002B44  26D9               	addwf	fsr2l,f,c
 22443  002B46  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22444  002B48  22DA               	addwfc	fsr2h,f,c
 22445  002B4A  0EFF               	movlw	255
 22446  002B4C  6EDE               	movwf	postinc2,c
 22447  002B4E  0EFF               	movlw	255
 22448  002B50  6EDE               	movwf	postinc2,c
 22449  002B52  0EFF               	movlw	255
 22450  002B54  6EDE               	movwf	postinc2,c
 22451  002B56  0EFF               	movlw	255
 22452  002B58  6EDD               	movwf	postdec2,c
 22453  002B5A  52DD               	movf	postdec2,f,c
 22454  002B5C  52DD               	movf	postdec2,f,c
 22455  002B5E  EE10 F00B          	lfsr	1,11
 22456  002B62  51E3               	movf	find_volume@fs& (0+255),w,b
 22457  002B64  26E1               	addwf	fsr1l,f,c
 22458  002B66  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22459  002B68  22E2               	addwfc	fsr1h,f,c
 22460  002B6A  CFDE FFE6          	movff	postinc2,postinc1
 22461  002B6E  CFDE FFE6          	movff	postinc2,postinc1
 22462  002B72  CFDE FFE6          	movff	postinc2,postinc1
 22463  002B76  CFDE FFE6          	movff	postinc2,postinc1
 22464                           
 22465                           ; BSR set to: 0
 22466                           ;ff.c: 3381: fs->fsi_flag = 0x80;
 22467  002B7A  EE20 F004          	lfsr	2,4
 22468  002B7E  51E3               	movf	find_volume@fs& (0+255),w,b
 22469  002B80  26D9               	addwf	fsr2l,f,c
 22470  002B82  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22471  002B84  22DA               	addwfc	fsr2h,f,c
 22472  002B86  0E80               	movlw	128
 22473  002B88  6EDF               	movwf	indf2,c
 22474                           
 22475                           ; BSR set to: 0
 22476                           ;ff.c: 3383: if (fmt == 3;ff.c: 3384: && ld_word(fs->win + 48) == 1;ff.c: 3385: && move_
      +                          window(fs, bsect + 1) == FR_OK)
 22477  002B8A  0E03               	movlw	3
 22478  002B8C  19E2               	xorwf	find_volume@fmt& (0+255),w,b
 22479  002B8E  A4D8               	btfss	status,2,c
 22480  002B90  D094               	goto	l25393
 22481                           
 22482                           ; BSR set to: 0
 22483  002B92  0E5F               	movlw	95
 22484  002B94  25E3               	addwf	find_volume@fs& (0+255),w,b
 22485  002B96  6E0E               	movwf	ld_word@ptr^0,c
 22486  002B98  0E00               	movlw	0
 22487  002B9A  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 22488  002B9C  6E0F               	movwf	(ld_word@ptr+1)^0,c
 22489  002B9E  ECB2  F076         	call	_ld_word	;wreg free
 22490  002BA2  040E               	decf	?_ld_word^0,w,c
 22491  002BA4  100F               	iorwf	(?_ld_word+1)^0,w,c
 22492  002BA6  A4D8               	btfss	status,2,c
 22493  002BA8  D088               	goto	l25393
 22494  002BAA  C0E3  F08C         	movff	find_volume@fs,move_window@fs
 22495  002BAE  C0E4  F08D         	movff	find_volume@fs+1,move_window@fs+1
 22496  002BB2  0E01               	movlw	1
 22497  002BB4  0100               	movlb	0	; () banked
 22498  002BB6  25DC               	addwf	find_volume@bsect& (0+255),w,b
 22499  002BB8  6F8E               	movwf	move_window@sector& (0+255),b
 22500  002BBA  0E00               	movlw	0
 22501  002BBC  21DD               	addwfc	(find_volume@bsect+1)& (0+255),w,b
 22502  002BBE  6F8F               	movwf	(move_window@sector+1)& (0+255),b
 22503  002BC0  0E00               	movlw	0
 22504  002BC2  21DE               	addwfc	(find_volume@bsect+2)& (0+255),w,b
 22505  002BC4  6F90               	movwf	(move_window@sector+2)& (0+255),b
 22506  002BC6  0E00               	movlw	0
 22507  002BC8  21DF               	addwfc	(find_volume@bsect+3)& (0+255),w,b
 22508  002BCA  6F91               	movwf	(move_window@sector+3)& (0+255),b
 22509  002BCC  EC1B  F067         	call	_move_window	;wreg free
 22510  002BD0  0900               	iorlw	0
 22511  002BD2  A4D8               	btfss	status,2,c
 22512  002BD4  D072               	goto	l25393
 22513                           
 22514                           ; BSR set to: 0
 22515                           ;ff.c: 3386: {;ff.c: 3387: fs->fsi_flag = 0;
 22516  002BD6  EE20 F004          	lfsr	2,4
 22517  002BDA  51E3               	movf	find_volume@fs& (0+255),w,b
 22518  002BDC  26D9               	addwf	fsr2l,f,c
 22519  002BDE  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22520  002BE0  22DA               	addwfc	fsr2h,f,c
 22521  002BE2  0E00               	movlw	0
 22522  002BE4  6EDF               	movwf	indf2,c
 22523                           
 22524                           ; BSR set to: 0
 22525                           ;ff.c: 3388: if (ld_word(fs->win + 510) == 0xAA55;ff.c: 3389: && ld_dword(fs->win + 0) =
      +                          = 0x41615252;ff.c: 3390: && ld_dword(fs->win + 484) == 0x61417272)
 22526  002BE6  0E2D               	movlw	45
 22527  002BE8  25E3               	addwf	find_volume@fs& (0+255),w,b
 22528  002BEA  6E0E               	movwf	ld_word@ptr^0,c
 22529  002BEC  0E02               	movlw	2
 22530  002BEE  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 22531  002BF0  6E0F               	movwf	(ld_word@ptr+1)^0,c
 22532  002BF2  ECB2  F076         	call	_ld_word	;wreg free
 22533  002BF6  0E55               	movlw	85
 22534  002BF8  180E               	xorwf	?_ld_word^0,w,c
 22535  002BFA  E15F               	bnz	l25393
 22536  002BFC  0EAA               	movlw	170
 22537  002BFE  180F               	xorwf	(?_ld_word+1)^0,w,c
 22538  002C00  A4D8               	btfss	status,2,c
 22539  002C02  D05B               	goto	l25393
 22540  002C04  0E2F               	movlw	47
 22541  002C06  0100               	movlb	0	; () banked
 22542  002C08  25E3               	addwf	find_volume@fs& (0+255),w,b
 22543  002C0A  6E0E               	movwf	ld_dword@ptr^0,c
 22544  002C0C  0E00               	movlw	0
 22545  002C0E  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 22546  002C10  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 22547  002C12  ECB4  F065         	call	_ld_dword	;wreg free
 22548  002C16  0E52               	movlw	82
 22549  002C18  180E               	xorwf	?_ld_dword^0,w,c
 22550  002C1A  E14F               	bnz	l25393
 22551  002C1C  0E52               	movlw	82
 22552  002C1E  180F               	xorwf	(?_ld_dword+1)^0,w,c
 22553  002C20  E14C               	bnz	l25393
 22554  002C22  0E61               	movlw	97
 22555  002C24  1810               	xorwf	(?_ld_dword+2)^0,w,c
 22556  002C26  E149               	bnz	l25393
 22557  002C28  0E41               	movlw	65
 22558  002C2A  1811               	xorwf	(?_ld_dword+3)^0,w,c
 22559  002C2C  A4D8               	btfss	status,2,c
 22560  002C2E  D045               	goto	l25393
 22561  002C30  0E13               	movlw	19
 22562  002C32  0100               	movlb	0	; () banked
 22563  002C34  25E3               	addwf	find_volume@fs& (0+255),w,b
 22564  002C36  6E0E               	movwf	ld_dword@ptr^0,c
 22565  002C38  0E02               	movlw	2
 22566  002C3A  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 22567  002C3C  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 22568  002C3E  ECB4  F065         	call	_ld_dword	;wreg free
 22569  002C42  0E72               	movlw	114
 22570  002C44  180E               	xorwf	?_ld_dword^0,w,c
 22571  002C46  E139               	bnz	l25393
 22572  002C48  0E72               	movlw	114
 22573  002C4A  180F               	xorwf	(?_ld_dword+1)^0,w,c
 22574  002C4C  E136               	bnz	l25393
 22575  002C4E  0E41               	movlw	65
 22576  002C50  1810               	xorwf	(?_ld_dword+2)^0,w,c
 22577  002C52  E133               	bnz	l25393
 22578  002C54  0E61               	movlw	97
 22579  002C56  1811               	xorwf	(?_ld_dword+3)^0,w,c
 22580  002C58  A4D8               	btfss	status,2,c
 22581  002C5A  D02F               	goto	l25393
 22582                           
 22583                           ;ff.c: 3391: {;ff.c: 3393: fs->free_clst = ld_dword(fs->win + 488);
 22584  002C5C  0E17               	movlw	23
 22585  002C5E  0100               	movlb	0	; () banked
 22586  002C60  25E3               	addwf	find_volume@fs& (0+255),w,b
 22587  002C62  6E0E               	movwf	ld_dword@ptr^0,c
 22588  002C64  0E02               	movlw	2
 22589  002C66  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 22590  002C68  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 22591  002C6A  ECB4  F065         	call	_ld_dword	;wreg free
 22592  002C6E  0100               	movlb	0	; () banked
 22593  002C70  EE20 F00F          	lfsr	2,15
 22594  002C74  51E3               	movf	find_volume@fs& (0+255),w,b
 22595  002C76  26D9               	addwf	fsr2l,f,c
 22596  002C78  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22597  002C7A  22DA               	addwfc	fsr2h,f,c
 22598  002C7C  C00E  FFDE         	movff	?_ld_dword,postinc2
 22599  002C80  C00F  FFDE         	movff	?_ld_dword+1,postinc2
 22600  002C84  C010  FFDE         	movff	?_ld_dword+2,postinc2
 22601  002C88  C011  FFDE         	movff	?_ld_dword+3,postinc2
 22602                           
 22603                           ;ff.c: 3396: fs->last_clst = ld_dword(fs->win + 492);
 22604  002C8C  0E1B               	movlw	27
 22605  002C8E  25E3               	addwf	find_volume@fs& (0+255),w,b
 22606  002C90  6E0E               	movwf	ld_dword@ptr^0,c
 22607  002C92  0E02               	movlw	2
 22608  002C94  21E4               	addwfc	(find_volume@fs+1)& (0+255),w,b
 22609  002C96  6E0F               	movwf	(ld_dword@ptr+1)^0,c
 22610  002C98  ECB4  F065         	call	_ld_dword	;wreg free
 22611  002C9C  0100               	movlb	0	; () banked
 22612  002C9E  EE20 F00B          	lfsr	2,11
 22613  002CA2  51E3               	movf	find_volume@fs& (0+255),w,b
 22614  002CA4  26D9               	addwf	fsr2l,f,c
 22615  002CA6  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22616  002CA8  22DA               	addwfc	fsr2h,f,c
 22617  002CAA  C00E  FFDE         	movff	?_ld_dword,postinc2
 22618  002CAE  C00F  FFDE         	movff	?_ld_dword+1,postinc2
 22619  002CB2  C010  FFDE         	movff	?_ld_dword+2,postinc2
 22620  002CB6  C011  FFDE         	movff	?_ld_dword+3,postinc2
 22621  002CBA                     l25393:
 22622                           
 22623                           ;ff.c: 3398: };ff.c: 3399: };ff.c: 3402: };ff.c: 3404: fs->fs_type = fmt;
 22624  002CBA  C0E3  FFD9         	movff	find_volume@fs,fsr2l
 22625  002CBE  C0E4  FFDA         	movff	find_volume@fs+1,fsr2h
 22626  002CC2  C0E2  FFDF         	movff	find_volume@fmt,indf2
 22627                           
 22628                           ;ff.c: 3405: fs->id = ++Fsid;
 22629  002CC6  0103               	movlb	3	; () banked
 22630  002CC8  4B98               	infsnz	_Fsid& (0+255),f,b
 22631  002CCA  2B99               	incf	(_Fsid+1)& (0+255),f,b
 22632  002CCC  0100               	movlb	0	; () banked
 22633  002CCE  EE20 F005          	lfsr	2,5
 22634  002CD2  51E3               	movf	find_volume@fs& (0+255),w,b
 22635  002CD4  26D9               	addwf	fsr2l,f,c
 22636  002CD6  51E4               	movf	(find_volume@fs+1)& (0+255),w,b
 22637  002CD8  22DA               	addwfc	fsr2h,f,c
 22638  002CDA  C398  FFDE         	movff	_Fsid,postinc2
 22639  002CDE  C399  FFDD         	movff	_Fsid+1,postdec2
 22640  002CE2  EFB6  F011         	goto	l25159
 22641  002CE6                     __end_of_find_volume:
 22642                           	callstack 0
 22643                           
 22644 ;; *************** function _ld_dword *****************
 22645 ;; Defined at:
 22646 ;;		line 581 in file "mcc_generated_files/fatfs/ff.c"
 22647 ;; Parameters:    Size  Location     Type
 22648 ;;  ptr             2   13[COMRAM] PTR const unsigned char 
 22649 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 22650 ;;		 -> NULL(0), 
 22651 ;; Auto vars:     Size  Location     Type
 22652 ;;  rv              4   22[COMRAM] unsigned long 
 22653 ;; Return value:  Size  Location     Type
 22654 ;;                  4   13[COMRAM] unsigned long 
 22655 ;; Registers used:
 22656 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22657 ;; Tracked objects:
 22658 ;;		On entry : 3E/1
 22659 ;;		On exit  : 3E/0
 22660 ;;		Unchanged: 3E/0
 22661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22662 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22663 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22664 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22665 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22666 ;;Total ram usage:       13 bytes
 22667 ;; Hardware stack levels used:    1
 22668 ;; Hardware stack levels required when called:    6
 22669 ;; This function calls:
 22670 ;;		Nothing
 22671 ;; This function is called by:
 22672 ;;		_get_fat
 22673 ;;		_put_fat
 22674 ;;		_find_volume
 22675 ;;		_f_open
 22676 ;; This function uses a non-reentrant model
 22677 ;;
 22678                           
 22679                           	psect	text71
 22680  00CB68                     __ptext71:
 22681                           	callstack 0
 22682  00CB68                     _ld_dword:
 22683                           	callstack 20
 22684                           
 22685                           ;ff.c: 583: DWORD rv;;ff.c: 585: rv = ptr[3];
 22686                           
 22687                           ;incstack = 0
 22688  00CB68  EE20 F003          	lfsr	2,3
 22689  00CB6C  500E               	movf	ld_dword@ptr^0,w,c
 22690  00CB6E  26D9               	addwf	fsr2l,f,c
 22691  00CB70  500F               	movf	(ld_dword@ptr+1)^0,w,c
 22692  00CB72  22DA               	addwfc	fsr2h,f,c
 22693  00CB74  50DF               	movf	indf2,w,c
 22694  00CB76  6E12               	movwf	??_ld_dword^0,c
 22695  00CB78  5012               	movf	??_ld_dword^0,w,c
 22696  00CB7A  6E17               	movwf	ld_dword@rv^0,c
 22697  00CB7C  6A18               	clrf	(ld_dword@rv+1)^0,c
 22698  00CB7E  6A19               	clrf	(ld_dword@rv+2)^0,c
 22699  00CB80  6A1A               	clrf	(ld_dword@rv+3)^0,c
 22700                           
 22701                           ;ff.c: 586: rv = rv << 8 | ptr[2];
 22702  00CB82  EE20 F002          	lfsr	2,2
 22703  00CB86  500E               	movf	ld_dword@ptr^0,w,c
 22704  00CB88  26D9               	addwf	fsr2l,f,c
 22705  00CB8A  500F               	movf	(ld_dword@ptr+1)^0,w,c
 22706  00CB8C  22DA               	addwfc	fsr2h,f,c
 22707  00CB8E  50DF               	movf	indf2,w,c
 22708  00CB90  6E12               	movwf	??_ld_dword^0,c
 22709  00CB92  5012               	movf	??_ld_dword^0,w,c
 22710  00CB94  C017  F014         	movff	ld_dword@rv,??_ld_dword+2
 22711  00CB98  C018  F015         	movff	ld_dword@rv+1,??_ld_dword+3
 22712  00CB9C  C019  F016         	movff	ld_dword@rv+2,??_ld_dword+4
 22713  00CBA0  6A13               	clrf	(??_ld_dword+1)^0,c
 22714  00CBA2  1013               	iorwf	(??_ld_dword+1)^0,w,c
 22715  00CBA4  6E17               	movwf	ld_dword@rv^0,c
 22716  00CBA6  5014               	movf	(??_ld_dword+2)^0,w,c
 22717  00CBA8  6E18               	movwf	(ld_dword@rv+1)^0,c
 22718  00CBAA  5015               	movf	(??_ld_dword+3)^0,w,c
 22719  00CBAC  6E19               	movwf	(ld_dword@rv+2)^0,c
 22720  00CBAE  5016               	movf	(??_ld_dword+4)^0,w,c
 22721  00CBB0  6E1A               	movwf	(ld_dword@rv+3)^0,c
 22722                           
 22723                           ;ff.c: 587: rv = rv << 8 | ptr[1];
 22724  00CBB2  EE20 F001          	lfsr	2,1
 22725  00CBB6  500E               	movf	ld_dword@ptr^0,w,c
 22726  00CBB8  26D9               	addwf	fsr2l,f,c
 22727  00CBBA  500F               	movf	(ld_dword@ptr+1)^0,w,c
 22728  00CBBC  22DA               	addwfc	fsr2h,f,c
 22729  00CBBE  50DF               	movf	indf2,w,c
 22730  00CBC0  6E12               	movwf	??_ld_dword^0,c
 22731  00CBC2  5012               	movf	??_ld_dword^0,w,c
 22732  00CBC4  C017  F014         	movff	ld_dword@rv,??_ld_dword+2
 22733  00CBC8  C018  F015         	movff	ld_dword@rv+1,??_ld_dword+3
 22734  00CBCC  C019  F016         	movff	ld_dword@rv+2,??_ld_dword+4
 22735  00CBD0  6A13               	clrf	(??_ld_dword+1)^0,c
 22736  00CBD2  1013               	iorwf	(??_ld_dword+1)^0,w,c
 22737  00CBD4  6E17               	movwf	ld_dword@rv^0,c
 22738  00CBD6  5014               	movf	(??_ld_dword+2)^0,w,c
 22739  00CBD8  6E18               	movwf	(ld_dword@rv+1)^0,c
 22740  00CBDA  5015               	movf	(??_ld_dword+3)^0,w,c
 22741  00CBDC  6E19               	movwf	(ld_dword@rv+2)^0,c
 22742  00CBDE  5016               	movf	(??_ld_dword+4)^0,w,c
 22743  00CBE0  6E1A               	movwf	(ld_dword@rv+3)^0,c
 22744                           
 22745                           ;ff.c: 588: rv = rv << 8 | ptr[0];
 22746  00CBE2  C00E  FFD9         	movff	ld_dword@ptr,fsr2l
 22747  00CBE6  C00F  FFDA         	movff	ld_dword@ptr+1,fsr2h
 22748  00CBEA  50DF               	movf	indf2,w,c
 22749  00CBEC  6E12               	movwf	??_ld_dword^0,c
 22750  00CBEE  5012               	movf	??_ld_dword^0,w,c
 22751  00CBF0  C017  F014         	movff	ld_dword@rv,??_ld_dword+2
 22752  00CBF4  C018  F015         	movff	ld_dword@rv+1,??_ld_dword+3
 22753  00CBF8  C019  F016         	movff	ld_dword@rv+2,??_ld_dword+4
 22754  00CBFC  6A13               	clrf	(??_ld_dword+1)^0,c
 22755  00CBFE  1013               	iorwf	(??_ld_dword+1)^0,w,c
 22756  00CC00  6E17               	movwf	ld_dword@rv^0,c
 22757  00CC02  5014               	movf	(??_ld_dword+2)^0,w,c
 22758  00CC04  6E18               	movwf	(ld_dword@rv+1)^0,c
 22759  00CC06  5015               	movf	(??_ld_dword+3)^0,w,c
 22760  00CC08  6E19               	movwf	(ld_dword@rv+2)^0,c
 22761  00CC0A  5016               	movf	(??_ld_dword+4)^0,w,c
 22762  00CC0C  6E1A               	movwf	(ld_dword@rv+3)^0,c
 22763                           
 22764                           ;ff.c: 589: return rv;
 22765  00CC0E  C017  F00E         	movff	ld_dword@rv,?_ld_dword
 22766  00CC12  C018  F00F         	movff	ld_dword@rv+1,?_ld_dword+1
 22767  00CC16  C019  F010         	movff	ld_dword@rv+2,?_ld_dword+2
 22768  00CC1A  C01A  F011         	movff	ld_dword@rv+3,?_ld_dword+3
 22769  00CC1E  0012               	return		;funcret
 22770  00CC20                     __end_of_ld_dword:
 22771                           	callstack 0
 22772                           
 22773 ;; *************** function _get_ldnumber *****************
 22774 ;; Defined at:
 22775 ;;		line 3102 in file "mcc_generated_files/fatfs/ff.c"
 22776 ;; Parameters:    Size  Location     Type
 22777 ;;  path            2   13[COMRAM] PTR PTR const unsigned c
 22778 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
 22779 ;; Auto vars:     Size  Location     Type
 22780 ;;  tp              2   26[COMRAM] PTR const unsigned char 
 22781 ;;		 -> STR_10(3), STR_8(12), STR_7(3), STR_3(3), 
 22782 ;;		 -> STR_2(10), STR_1(3), 
 22783 ;;  vol             2   24[COMRAM] int 
 22784 ;;  tt              2   22[COMRAM] PTR const unsigned char 
 22785 ;;		 -> STR_10(3), STR_8(12), STR_7(3), STR_3(3), 
 22786 ;;		 -> STR_2(10), STR_1(3), 
 22787 ;;  i               2   19[COMRAM] int 
 22788 ;;  tc              1   21[COMRAM] unsigned char 
 22789 ;; Return value:  Size  Location     Type
 22790 ;;                  2   13[COMRAM] int 
 22791 ;; Registers used:
 22792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 22793 ;; Tracked objects:
 22794 ;;		On entry : 3F/0
 22795 ;;		On exit  : 3F/0
 22796 ;;		Unchanged: 3F/0
 22797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22798 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22799 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22801 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22802 ;;Total ram usage:       15 bytes
 22803 ;; Hardware stack levels used:    1
 22804 ;; Hardware stack levels required when called:    6
 22805 ;; This function calls:
 22806 ;;		Nothing
 22807 ;; This function is called by:
 22808 ;;		_find_volume
 22809 ;;		_f_mount
 22810 ;; This function uses a non-reentrant model
 22811 ;;
 22812                           
 22813                           	psect	text72
 22814  00BE34                     __ptext72:
 22815                           	callstack 0
 22816  00BE34                     _get_ldnumber:
 22817                           	callstack 21
 22818                           
 22819                           ; BSR set to: 0
 22820                           ;ff.c: 3106: const TCHAR *tp, *tt;;ff.c: 3107: TCHAR tc;;ff.c: 3108: int i, vol = -1;
 22821                           
 22822                           ;incstack = 0
 22823  00BE34  6819               	setf	get_ldnumber@vol^0,c
 22824  00BE36  681A               	setf	(get_ldnumber@vol+1)^0,c
 22825                           
 22826                           ; BSR set to: 0
 22827                           ;ff.c: 3114: tt = tp = *path;
 22828  00BE38  C00E  FFD9         	movff	get_ldnumber@path,fsr2l
 22829  00BE3C  C00F  FFDA         	movff	get_ldnumber@path+1,fsr2h
 22830  00BE40  CFDE F01B          	movff	postinc2,get_ldnumber@tp
 22831  00BE44  CFDD F01C          	movff	postdec2,get_ldnumber@tp+1
 22832  00BE48  C01B  F017         	movff	get_ldnumber@tp,get_ldnumber@tt
 22833  00BE4C  C01C  F018         	movff	get_ldnumber@tp+1,get_ldnumber@tt+1
 22834                           
 22835                           ; BSR set to: 0
 22836                           ;ff.c: 3115: if (!tp) return vol;
 22837  00BE50  501B               	movf	get_ldnumber@tp^0,w,c
 22838  00BE52  101C               	iorwf	(get_ldnumber@tp+1)^0,w,c
 22839  00BE54  A4D8               	btfss	status,2,c
 22840  00BE56  D003               	goto	l25061
 22841                           
 22842                           ; BSR set to: 0
 22843  00BE58  680E               	setf	?_get_ldnumber^0,c
 22844  00BE5A  680F               	setf	(?_get_ldnumber+1)^0,c
 22845  00BE5C  0012               	return	
 22846  00BE5E                     l25061:
 22847                           
 22848                           ; BSR set to: 0
 22849  00BE5E  C017  FFF6         	movff	get_ldnumber@tt,tblptrl
 22850  00BE62  C018  FFF7         	movff	get_ldnumber@tt+1,tblptrh
 22851  00BE66                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22852  00BE66  6AF8               	clrf	tblptru,c
 22853  00BE68                     	endif
 22854  00BE68                     	if	0	;tblptru may be non-zero
 22855  00BE68                     	endif
 22856  00BE68  0008               	tblrd		*
 22857  00BE6A  CFF5 F016          	movff	tablat,get_ldnumber@tc
 22858                           
 22859                           ; BSR set to: 0
 22860  00BE6E  4A17               	infsnz	get_ldnumber@tt^0,f,c
 22861  00BE70  2A18               	incf	(get_ldnumber@tt+1)^0,f,c
 22862                           
 22863                           ; BSR set to: 0
 22864                           
 22865                           ; BSR set to: 0
 22866  00BE72  0E20               	movlw	32
 22867  00BE74  6416               	cpfsgt	get_ldnumber@tc^0,c
 22868  00BE76  D004               	goto	u28310
 22869                           
 22870                           ; BSR set to: 0
 22871  00BE78  0E3A               	movlw	58
 22872  00BE7A  1816               	xorwf	get_ldnumber@tc^0,w,c
 22873  00BE7C  A4D8               	btfss	status,2,c
 22874  00BE7E  D7EF               	goto	l25061
 22875  00BE80                     u28310:
 22876                           
 22877                           ; BSR set to: 0
 22878                           ;ff.c: 3118: if (tc == ':') {
 22879  00BE80  0E3A               	movlw	58
 22880  00BE82  1816               	xorwf	get_ldnumber@tc^0,w,c
 22881  00BE84  A4D8               	btfss	status,2,c
 22882  00BE86  D049               	goto	l25095
 22883                           
 22884                           ; BSR set to: 0
 22885                           ;ff.c: 3119: i = 1;
 22886  00BE88  0E00               	movlw	0
 22887  00BE8A  6E15               	movwf	(get_ldnumber@i+1)^0,c
 22888  00BE8C  0E01               	movlw	1
 22889  00BE8E  6E14               	movwf	get_ldnumber@i^0,c
 22890                           
 22891                           ; BSR set to: 0
 22892                           ;ff.c: 3120: if (((*tp) >= '0' && (*tp) <= '9') && tp + 2 == tt) {
 22893  00BE90  C01B  FFF6         	movff	get_ldnumber@tp,tblptrl
 22894  00BE94  C01C  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 22895  00BE98                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22896  00BE98  6AF8               	clrf	tblptru,c
 22897  00BE9A                     	endif
 22898  00BE9A                     	if	0	;tblptru may be non-zero
 22899  00BE9A                     	endif
 22900  00BE9A  0E2F               	movlw	47
 22901  00BE9C  0008               	tblrd		*
 22902  00BE9E  64F5               	cpfsgt	tablat,c
 22903  00BEA0  D024               	goto	l25085
 22904                           
 22905                           ; BSR set to: 0
 22906  00BEA2  C01B  FFF6         	movff	get_ldnumber@tp,tblptrl
 22907  00BEA6  C01C  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 22908  00BEAA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22909  00BEAA  6AF8               	clrf	tblptru,c
 22910  00BEAC                     	endif
 22911  00BEAC                     	if	0	;tblptru may be non-zero
 22912  00BEAC                     	endif
 22913  00BEAC  0E3A               	movlw	58
 22914  00BEAE  0008               	tblrd		*
 22915  00BEB0  60F5               	cpfslt	tablat,c
 22916  00BEB2  D01B               	goto	l25085
 22917                           
 22918                           ; BSR set to: 0
 22919  00BEB4  0E02               	movlw	2
 22920  00BEB6  241B               	addwf	get_ldnumber@tp^0,w,c
 22921  00BEB8  6E10               	movwf	??_get_ldnumber^0,c
 22922  00BEBA  0E00               	movlw	0
 22923  00BEBC  201C               	addwfc	(get_ldnumber@tp+1)^0,w,c
 22924  00BEBE  6E11               	movwf	(??_get_ldnumber+1)^0,c
 22925  00BEC0  5017               	movf	get_ldnumber@tt^0,w,c
 22926  00BEC2  1810               	xorwf	??_get_ldnumber^0,w,c
 22927  00BEC4  E112               	bnz	l25085
 22928  00BEC6  5018               	movf	(get_ldnumber@tt+1)^0,w,c
 22929  00BEC8  1811               	xorwf	(??_get_ldnumber+1)^0,w,c
 22930  00BECA  A4D8               	btfss	status,2,c
 22931  00BECC  D00E               	goto	l25085
 22932                           
 22933                           ; BSR set to: 0
 22934                           ;ff.c: 3121: i = (int)*tp - '0';
 22935  00BECE  C01B  FFF6         	movff	get_ldnumber@tp,tblptrl
 22936  00BED2  C01C  FFF7         	movff	get_ldnumber@tp+1,tblptrh
 22937  00BED6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 22938  00BED6  6AF8               	clrf	tblptru,c
 22939  00BED8                     	endif
 22940  00BED8                     	if	0	;tblptru may be non-zero
 22941  00BED8                     	endif
 22942  00BED8  0008               	tblrd		*
 22943  00BEDA  CFF5 F010          	movff	tablat,??_get_ldnumber
 22944  00BEDE  0ED0               	movlw	208
 22945  00BEE0  2410               	addwf	??_get_ldnumber^0,w,c
 22946  00BEE2  6E14               	movwf	get_ldnumber@i^0,c
 22947  00BEE4  6A15               	clrf	(get_ldnumber@i+1)^0,c
 22948  00BEE6  0EFF               	movlw	255
 22949  00BEE8  2215               	addwfc	(get_ldnumber@i+1)^0,f,c
 22950  00BEEA                     l25085:
 22951                           
 22952                           ; BSR set to: 0
 22953                           ;ff.c: 3122: };ff.c: 3136: if (i < 1) {
 22954  00BEEA  BE15               	btfsc	(get_ldnumber@i+1)^0,7,c
 22955  00BEEC  D005               	goto	u28360
 22956  00BEEE  5015               	movf	(get_ldnumber@i+1)^0,w,c
 22957  00BEF0  E10F               	bnz	l25091
 22958  00BEF2  0414               	decf	get_ldnumber@i^0,w,c
 22959  00BEF4  B0D8               	btfsc	status,0,c
 22960  00BEF6  D00C               	goto	l25091
 22961  00BEF8                     u28360:
 22962                           
 22963                           ; BSR set to: 0
 22964                           ;ff.c: 3137: vol = i;
 22965  00BEF8  C014  F019         	movff	get_ldnumber@i,get_ldnumber@vol
 22966  00BEFC  C015  F01A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
 22967                           
 22968                           ; BSR set to: 0
 22969                           ;ff.c: 3138: *path = tt;
 22970  00BF00  C00E  FFD9         	movff	get_ldnumber@path,fsr2l
 22971  00BF04  C00F  FFDA         	movff	get_ldnumber@path+1,fsr2h
 22972  00BF08  C017  FFDE         	movff	get_ldnumber@tt,postinc2
 22973  00BF0C  C018  FFDD         	movff	get_ldnumber@tt+1,postdec2
 22974  00BF10                     l25091:
 22975                           
 22976                           ; BSR set to: 0
 22977                           ;ff.c: 3139: };ff.c: 3140: return vol;
 22978  00BF10  C019  F00E         	movff	get_ldnumber@vol,?_get_ldnumber
 22979  00BF14  C01A  F00F         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
 22980  00BF18  0012               	return	
 22981  00BF1A                     l25095:
 22982                           
 22983                           ; BSR set to: 0
 22984                           ;ff.c: 3166: return vol;
 22985                           
 22986                           ; BSR set to: 0
 22987  00BF1A  0E00               	movlw	0
 22988  00BF1C  6E0F               	movwf	(?_get_ldnumber+1)^0,c
 22989  00BF1E  0E00               	movlw	0
 22990  00BF20  6E0E               	movwf	?_get_ldnumber^0,c
 22991                           
 22992                           ; BSR set to: 0
 22993  00BF22  0012               	return		;funcret
 22994  00BF24                     __end_of_get_ldnumber:
 22995                           	callstack 0
 22996                           
 22997 ;; *************** function _disk_initialize *****************
 22998 ;; Defined at:
 22999 ;;		line 60 in file "mcc_generated_files/fatfs/diskio.c"
 23000 ;; Parameters:    Size  Location     Type
 23001 ;;  pdrv            1    wreg     unsigned char 
 23002 ;; Auto vars:     Size  Location     Type
 23003 ;;  pdrv            1   54[COMRAM] unsigned char 
 23004 ;;  stat            1   55[COMRAM] unsigned char 
 23005 ;; Return value:  Size  Location     Type
 23006 ;;                  1    wreg      unsigned char 
 23007 ;; Registers used:
 23008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23009 ;; Tracked objects:
 23010 ;;		On entry : 3F/0
 23011 ;;		On exit  : 0/0
 23012 ;;		Unchanged: 0/0
 23013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23015 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23017 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23018 ;;Total ram usage:        2 bytes
 23019 ;; Hardware stack levels used:    1
 23020 ;; Hardware stack levels required when called:    9
 23021 ;; This function calls:
 23022 ;;		_SD_SPI_MediaInitialize
 23023 ;; This function is called by:
 23024 ;;		_find_volume
 23025 ;; This function uses a non-reentrant model
 23026 ;;
 23027                           
 23028                           	psect	text73
 23029  00F10E                     __ptext73:
 23030                           	callstack 0
 23031  00F10E                     _disk_initialize:
 23032                           	callstack 18
 23033                           
 23034                           ; BSR set to: 0
 23035                           ;incstack = 0
 23036                           ;disk_initialize@pdrv stored from wreg
 23037  00F10E  6E37               	movwf	disk_initialize@pdrv^0,c
 23038                           
 23039                           ;diskio.c: 64: DSTATUS stat = 0x01;
 23040  00F110  0E01               	movlw	1
 23041  00F112  6E38               	movwf	disk_initialize@stat^0,c
 23042                           
 23043                           ;diskio.c: 66: switch (pdrv) {
 23044  00F114  D00A               	goto	l22161
 23045  00F116                     l22153:
 23046                           
 23047                           ;diskio.c: 68: if(SD_SPI_MediaInitialize() == 1)
 23048  00F116  EC41  F01A         	call	_SD_SPI_MediaInitialize	;wreg free
 23049  00F11A  06E8               	decf	wreg,f,c
 23050  00F11C  A4D8               	btfss	status,2,c
 23051  00F11E  D002               	goto	l22157
 23052                           
 23053                           ;diskio.c: 69: {;diskio.c: 70: stat = RES_OK;
 23054  00F120  0E00               	movlw	0
 23055  00F122  D001               	goto	L18
 23056  00F124                     l22157:
 23057                           
 23058                           ;diskio.c: 72: else;diskio.c: 73: {;diskio.c: 74: stat = RES_ERROR;
 23059  00F124  0E01               	movlw	1
 23060  00F126                     L18:
 23061  00F126  6E38               	movwf	disk_initialize@stat^0,c
 23062  00F128  D004               	goto	l22163
 23063  00F12A                     l22161:
 23064  00F12A  5037               	movf	disk_initialize@pdrv^0,w,c
 23065                           
 23066                           ; Switch size 1, requested type "simple"
 23067                           ; Number of cases is 1, Range of values is 0 to 0
 23068                           ; switch strategies available:
 23069                           ; Name         Instructions Cycles
 23070                           ; simple_byte            4     3 (average)
 23071                           ;	Chosen strategy is simple_byte
 23072  00F12C  0A00               	xorlw	0	; case 0
 23073  00F12E  B4D8               	btfsc	status,2,c
 23074  00F130  D7F2               	goto	l22153
 23075  00F132                     l22163:
 23076                           
 23077                           ;diskio.c: 81: return stat;
 23078  00F132  5038               	movf	disk_initialize@stat^0,w,c
 23079  00F134  0012               	return		;funcret
 23080  00F136                     __end_of_disk_initialize:
 23081                           	callstack 0
 23082                           
 23083 ;; *************** function _SD_SPI_MediaInitialize *****************
 23084 ;; Defined at:
 23085 ;;		line 494 in file "mcc_generated_files/sd_spi/sd_spi.c"
 23086 ;; Parameters:    Size  Location     Type
 23087 ;;		None
 23088 ;; Auto vars:     Size  Location     Type
 23089 ;;  CSDResponse    20    0[BANK0 ] unsigned char [20]
 23090 ;;  response        5   32[BANK0 ] struct .
 23091 ;;  c_size          4   28[BANK0 ] unsigned long 
 23092 ;;  timeout         2   37[BANK0 ] unsigned int 
 23093 ;;  count           1   27[BANK0 ] unsigned char 
 23094 ;;  block_len       1   26[BANK0 ] unsigned char 
 23095 ;;  index           1   25[BANK0 ] unsigned char 
 23096 ;;  c_size_mult     1   24[BANK0 ] unsigned char 
 23097 ;; Return value:  Size  Location     Type
 23098 ;;                  1    wreg      unsigned char 
 23099 ;; Registers used:
 23100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23101 ;; Tracked objects:
 23102 ;;		On entry : 0/0
 23103 ;;		On exit  : 0/0
 23104 ;;		Unchanged: 0/0
 23105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23107 ;;      Locals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23108 ;;      Temps:         11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23109 ;;      Totals:        11      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23110 ;;Total ram usage:       50 bytes
 23111 ;; Hardware stack levels used:    1
 23112 ;; Hardware stack levels required when called:    8
 23113 ;; This function calls:
 23114 ;;		_LCD8M_open
 23115 ;;		_SDFAST_open
 23116 ;;		_SDSLOW_open
 23117 ;;		_SD_SPI_DelayMilliseconds
 23118 ;;		_SD_SendCmd
 23119 ;;		_SPI1_Close
 23120 ;;		_SPI1_ExchangeByte
 23121 ;;		_Touch2M_open
 23122 ;;		___lmul
 23123 ;; This function is called by:
 23124 ;;		_disk_initialize
 23125 ;; This function uses a non-reentrant model
 23126 ;;
 23127                           
 23128                           	psect	text74
 23129  003482                     __ptext74:
 23130                           	callstack 0
 23131  003482                     _SD_SPI_MediaInitialize:
 23132                           	callstack 18
 23133                           
 23134                           ;sd_spi.c: 496: uint16_t timeout;;sd_spi.c: 497: SD_RESPONSE response;;sd_spi.c: 498: ui
      +                          nt8_t CSDResponse[20];;sd_spi.c: 499: uint8_t count, index;;sd_spi.c: 500: uint32_t c_si
      +                          ze;;sd_spi.c: 501: uint8_t c_size_mult;;sd_spi.c: 502: uint8_t block_len;;sd_spi.c: 504:
      +                           mediaInformation.state = SD_STATE_NOT_INITIALIZED;
 23135                           
 23136                           ;incstack = 0
 23137  003482  0E00               	movlw	0
 23138  003484  0103               	movlb	3	; () banked
 23139  003486  6FDA               	movwf	(_mediaInformation+3)& (0+255),b
 23140                           
 23141                           ;sd_spi.c: 505: mediaInformation.errorCode = MEDIA_NO_ERROR;
 23142  003488  0E00               	movlw	0
 23143  00348A  6FD7               	movwf	_mediaInformation& (0+255),b
 23144                           
 23145                           ;sd_spi.c: 506: mediaInformation.finalLBA = 0x00000000;
 23146  00348C  0E00               	movlw	0
 23147  00348E  6FDB               	movwf	(_mediaInformation+4)& (0+255),b
 23148  003490  0E00               	movlw	0
 23149  003492  6FDC               	movwf	(_mediaInformation+5)& (0+255),b
 23150  003494  0E00               	movlw	0
 23151  003496  6FDD               	movwf	(_mediaInformation+6)& (0+255),b
 23152  003498  0E00               	movlw	0
 23153  00349A  6FDE               	movwf	(_mediaInformation+7)& (0+255),b
 23154                           
 23155                           ;sd_spi.c: 507: mediaInformation.gSDMode = 0;
 23156  00349C  0E00               	movlw	0
 23157  00349E  6FDF               	movwf	(_mediaInformation+8)& (0+255),b
 23158                           
 23159                           ; BSR set to: 3
 23160  0034A0  8C89               	bsf	137,6,c	;volatile
 23161                           
 23162                           ; BSR set to: 3
 23163                           ;sd_spi.c: 513: if( spiMaster[SDSLOW].spiOpen() == 0 )
 23164  0034A2  0E49               	movlw	low (_spiMaster+42)
 23165  0034A4  6EF6               	movwf	tblptrl,c
 23166  0034A6  0EFA               	movlw	high (_spiMaster+42)
 23167  0034A8  6EF7               	movwf	tblptrh,c
 23168  0034AA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23169  0034AA  6AF8               	clrf	tblptru,c
 23170  0034AC                     	endif
 23171  0034AC                     	if	0	;tblptru may be non-zero
 23172  0034AC                     	endif
 23173  0034AC  0009               	tblrd		*+
 23174  0034AE  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 23175  0034B2  0009               	tblrd		*+
 23176  0034B4  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 23177  0034B8  D801               	call	u23418
 23178  0034BA  D009               	goto	u23419
 23179  0034BC                     u23418:
 23180  0034BC  0005               	push	
 23181  0034BE  6EFA               	movwf	pclath,c
 23182  0034C0  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 23183  0034C2  6EFD               	movwf	tosl,c
 23184  0034C4  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23185  0034C6  6EFE               	movwf	tosh,c
 23186  0034C8  6AFF               	clrf	tosu,c
 23187  0034CA  50FA               	movf	pclath,w,c
 23188  0034CC  0012               	return		;indir
 23189  0034CE                     u23419:
 23190  0034CE  0900               	iorlw	0
 23191  0034D0  A4D8               	btfss	status,2,c
 23192  0034D2  D002               	goto	l21171
 23193  0034D4                     u23420:
 23194                           
 23195                           ;sd_spi.c: 514: {;sd_spi.c: 515: return 0;
 23196  0034D4  0E00               	movlw	0
 23197  0034D6  0012               	return	
 23198  0034D8                     l21171:
 23199                           
 23200                           ;sd_spi.c: 516: };sd_spi.c: 523: SD_SPI_DelayMilliseconds(30u);
 23201  0034D8  0E1E               	movlw	30
 23202  0034DA  EC3D  F073         	call	_SD_SPI_DelayMilliseconds
 23203                           
 23204                           ;sd_spi.c: 526: timeout = 100;
 23205  0034DE  0E00               	movlw	0
 23206  0034E0  0100               	movlb	0	; () banked
 23207  0034E2  6F86               	movwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),b
 23208  0034E4  0E64               	movlw	100
 23209  0034E6  6F85               	movwf	SD_SPI_MediaInitialize@timeout& (0+255),b
 23210  0034E8                     l21175:
 23211                           
 23212                           ; BSR set to: 0
 23213  0034E8  8C89               	bsf	137,6,c	;volatile
 23214                           
 23215                           ; BSR set to: 0
 23216                           ;sd_spi.c: 534: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 23217  0034EA  0E23               	movlw	low (_spiMaster+4)
 23218  0034EC  6EF6               	movwf	tblptrl,c
 23219  0034EE  0EFA               	movlw	high (_spiMaster+4)
 23220  0034F0  6EF7               	movwf	tblptrh,c
 23221  0034F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23222  0034F2  6AF8               	clrf	tblptru,c
 23223  0034F4                     	endif
 23224  0034F4                     	if	0	;tblptru may be non-zero
 23225  0034F4                     	endif
 23226  0034F4  0009               	tblrd		*+
 23227  0034F6  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 23228  0034FA  0009               	tblrd		*+
 23229  0034FC  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 23230  003500  D801               	call	u23438
 23231  003502  D00A               	goto	u23439
 23232  003504                     u23438:
 23233  003504  0005               	push	
 23234  003506  6EFA               	movwf	pclath,c
 23235  003508  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 23236  00350A  6EFD               	movwf	tosl,c
 23237  00350C  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23238  00350E  6EFE               	movwf	tosh,c
 23239  003510  6AFF               	clrf	tosu,c
 23240  003512  50FA               	movf	pclath,w,c
 23241  003514  0EFF               	movlw	255
 23242  003516  0012               	return		;indir
 23243  003518                     u23439:
 23244  003518  9C89               	bcf	137,6,c	;volatile
 23245                           
 23246                           ;sd_spi.c: 539: timeout--;
 23247  00351A  0100               	movlb	0	; () banked
 23248  00351C  0785               	decf	SD_SPI_MediaInitialize@timeout& (0+255),f,b
 23249  00351E  A0D8               	btfss	status,0,c
 23250  003520  0786               	decf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),f,b
 23251                           
 23252                           ; BSR set to: 0
 23253                           ;sd_spi.c: 542: response = SD_SendCmd(SD_GO_IDLE_STATE, 0x0);
 23254  003522  0E00               	movlw	0
 23255  003524  6E15               	movwf	SD_SendCmd@address^0,c
 23256  003526  0E00               	movlw	0
 23257  003528  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23258  00352A  0E00               	movlw	0
 23259  00352C  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23260  00352E  0E00               	movlw	0
 23261  003530  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23262  003532  0E00               	movlw	0
 23263  003534  EC7D  F02F         	call	_SD_SendCmd
 23264  003538  EE20  F080         	lfsr	2,SD_SPI_MediaInitialize@response
 23265  00353C  0E04               	movlw	4
 23266  00353E                     u23441:
 23267  00353E  CFEB FFDB          	movff	plusw0,plusw2
 23268  003542  06E8               	decf	wreg,f,c
 23269  003544  E2FC               	bc	u23441
 23270                           
 23271                           ;sd_spi.c: 543: }while((response.r1._byte != 0x01) && (timeout != 0));
 23272  003546  0100               	movlb	0	; () banked
 23273  003548  0580               	decf	SD_SPI_MediaInitialize@response& (0+255),w,b
 23274  00354A  B4D8               	btfsc	status,2,c
 23275  00354C  D004               	goto	u23460
 23276                           
 23277                           ; BSR set to: 0
 23278  00354E  5185               	movf	SD_SPI_MediaInitialize@timeout& (0+255),w,b
 23279  003550  1186               	iorwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),w,b
 23280  003552  A4D8               	btfss	status,2,c
 23281  003554  D7C9               	goto	l21175
 23282  003556                     u23460:
 23283                           
 23284                           ; BSR set to: 0
 23285                           ;sd_spi.c: 552: if(timeout == 0)
 23286  003556  5185               	movf	SD_SPI_MediaInitialize@timeout& (0+255),w,b
 23287  003558  1186               	iorwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),w,b
 23288  00355A  A4D8               	btfss	status,2,c
 23289  00355C  D04F               	goto	l21213
 23290                           
 23291                           ; BSR set to: 0
 23292                           
 23293                           ;sd_spi.c: 553: {;sd_spi.c: 554: do { LATAbits.LATA6 = 1; } while(0);
 23294  00355E  8C89               	bsf	137,6,c	;volatile
 23295                           
 23296                           ; BSR set to: 0
 23297                           ;sd_spi.c: 555: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 23298  003560  0E23               	movlw	low (_spiMaster+4)
 23299  003562  6EF6               	movwf	tblptrl,c
 23300  003564  0EFA               	movlw	high (_spiMaster+4)
 23301  003566  6EF7               	movwf	tblptrh,c
 23302  003568                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23303  003568  6AF8               	clrf	tblptru,c
 23304  00356A                     	endif
 23305  00356A                     	if	0	;tblptru may be non-zero
 23306  00356A                     	endif
 23307  00356A  0009               	tblrd		*+
 23308  00356C  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 23309  003570  0009               	tblrd		*+
 23310  003572  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 23311  003576  D801               	call	u23488
 23312  003578  D00A               	goto	u23489
 23313  00357A                     u23488:
 23314  00357A  0005               	push	
 23315  00357C  6EFA               	movwf	pclath,c
 23316  00357E  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 23317  003580  6EFD               	movwf	tosl,c
 23318  003582  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23319  003584  6EFE               	movwf	tosh,c
 23320  003586  6AFF               	clrf	tosu,c
 23321  003588  50FA               	movf	pclath,w,c
 23322  00358A  0EFF               	movlw	255
 23323  00358C  0012               	return		;indir
 23324  00358E                     u23489:
 23325  00358E  9C89               	bcf	137,6,c	;volatile
 23326                           
 23327                           ;sd_spi.c: 562: (void)SD_SendCmd(SD_STOP_TRANSMISSION, 0x0);
 23328  003590  0E00               	movlw	0
 23329  003592  6E15               	movwf	SD_SendCmd@address^0,c
 23330  003594  0E00               	movlw	0
 23331  003596  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23332  003598  0E00               	movlw	0
 23333  00359A  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23334  00359C  0E00               	movlw	0
 23335  00359E  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23336  0035A0  0E05               	movlw	5
 23337  0035A2  EC7D  F02F         	call	_SD_SendCmd
 23338                           
 23339                           ;sd_spi.c: 564: response = SD_SendCmd(SD_GO_IDLE_STATE, 0x0);
 23340  0035A6  0E00               	movlw	0
 23341  0035A8  6E15               	movwf	SD_SendCmd@address^0,c
 23342  0035AA  0E00               	movlw	0
 23343  0035AC  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23344  0035AE  0E00               	movlw	0
 23345  0035B0  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23346  0035B2  0E00               	movlw	0
 23347  0035B4  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23348  0035B6  0E00               	movlw	0
 23349  0035B8  EC7D  F02F         	call	_SD_SendCmd
 23350  0035BC  EE20  F080         	lfsr	2,SD_SPI_MediaInitialize@response
 23351  0035C0  0E04               	movlw	4
 23352  0035C2                     u23491:
 23353  0035C2  CFEB FFDB          	movff	plusw0,plusw2
 23354  0035C6  06E8               	decf	wreg,f,c
 23355  0035C8  E2FC               	bc	u23491
 23356                           
 23357                           ;sd_spi.c: 565: if(response.r1._byte != 0x01)
 23358  0035CA  0100               	movlb	0	; () banked
 23359  0035CC  0580               	decf	SD_SPI_MediaInitialize@response& (0+255),w,b
 23360  0035CE  B4D8               	btfsc	status,2,c
 23361  0035D0  D015               	goto	l21213
 23362                           
 23363                           ; BSR set to: 0
 23364                           ;sd_spi.c: 566: {;sd_spi.c: 574: mediaInformation.errorCode = MEDIA_CANNOT_INITIALIZE;
 23365  0035D2  0E02               	movlw	2
 23366  0035D4  0103               	movlb	3	; () banked
 23367  0035D6  6FD7               	movwf	_mediaInformation& (0+255),b
 23368                           
 23369                           ; BSR set to: 3
 23370  0035D8  8C89               	bsf	137,6,c	;volatile
 23371                           
 23372                           ; BSR set to: 3
 23373                           ;sd_spi.c: 577: spiMaster[SDFAST].spiClose();
 23374  0035DA  0E1F               	movlw	low _spiMaster
 23375  0035DC  6EF6               	movwf	tblptrl,c
 23376  0035DE                     	if	1	;There is more than 1 active tblptr byte
 23377  0035DE  0EFA               	movlw	high _spiMaster
 23378  0035E0  6EF7               	movwf	tblptrh,c
 23379  0035E2                     	endif
 23380  0035E2                     	if	1	;There are 3 active tblptr bytes
 23381  0035E2  0E00               	movlw	low (_spiMaster shr (0+16))
 23382  0035E4  6EF8               	movwf	tblptru,c
 23383  0035E6                     	endif
 23384  0035E6  0009               	tblrd		*+
 23385  0035E8  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 23386  0035EC  0009               	tblrd		*+
 23387  0035EE  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 23388  0035F2  D801               	call	u23518
 23389  0035F4  D76F               	goto	u23420
 23390  0035F6                     u23518:
 23391  0035F6  0005               	push	
 23392  0035F8  6EFA               	movwf	pclath,c
 23393  0035FA  D290               	goto	L22
 23394  0035FC                     l21213:
 23395                           
 23396                           ; BSR set to: 0
 23397                           ;sd_spi.c: 587: };sd_spi.c: 597: response = SD_SendCmd(SD_SEND_IF_COND, 0x1AA);
 23398  0035FC  0EAA               	movlw	170
 23399  0035FE  6E15               	movwf	SD_SendCmd@address^0,c
 23400  003600  0E01               	movlw	1
 23401  003602  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23402  003604  0E00               	movlw	0
 23403  003606  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23404  003608  0E00               	movlw	0
 23405  00360A  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23406  00360C  0E02               	movlw	2
 23407  00360E  EC7D  F02F         	call	_SD_SendCmd
 23408  003612  EE20  F080         	lfsr	2,SD_SPI_MediaInitialize@response
 23409  003616  0E04               	movlw	4
 23410  003618                     u23521:
 23411  003618  CFEB FFDB          	movff	plusw0,plusw2
 23412  00361C  06E8               	decf	wreg,f,c
 23413  00361E  E2FC               	bc	u23521
 23414                           
 23415                           ;sd_spi.c: 598: if(((response.r7.bytewise.argument._returnVal & 0xFFF) == 0x1AA) && (!re
      +                          sponse.r7.bitwise.bits.ILLEGAL_CMD))
 23416  003620  EE20  F081         	lfsr	2,SD_SPI_MediaInitialize@response+1
 23417  003624  0EFF               	movlw	255
 23418  003626  14DE               	andwf	postinc2,w,c
 23419  003628  6E2C               	movwf	??_SD_SPI_MediaInitialize^0,c
 23420  00362A  0E0F               	movlw	15
 23421  00362C  14DE               	andwf	postinc2,w,c
 23422  00362E  6E2D               	movwf	(??_SD_SPI_MediaInitialize+1)^0,c
 23423  003630  0E00               	movlw	0
 23424  003632  14DE               	andwf	postinc2,w,c
 23425  003634  6E2E               	movwf	(??_SD_SPI_MediaInitialize+2)^0,c
 23426  003636  0E00               	movlw	0
 23427  003638  14DE               	andwf	postinc2,w,c
 23428  00363A  6E2F               	movwf	(??_SD_SPI_MediaInitialize+3)^0,c
 23429  00363C  0EAA               	movlw	170
 23430  00363E  182C               	xorwf	??_SD_SPI_MediaInitialize^0,w,c
 23431  003640  E163               	bnz	l21249
 23432  003642  042D               	decf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23433  003644  102E               	iorwf	(??_SD_SPI_MediaInitialize+2)^0,w,c
 23434  003646  102F               	iorwf	(??_SD_SPI_MediaInitialize+3)^0,w,c
 23435  003648  A4D8               	btfss	status,2,c
 23436  00364A  D05E               	goto	l21249
 23437  00364C  0100               	movlb	0	; () banked
 23438  00364E  B580               	btfsc	SD_SPI_MediaInitialize@response& (0+255),2,b
 23439  003650  D05B               	goto	l21249
 23440                           
 23441                           ; BSR set to: 0
 23442  003652  0E00               	movlw	0
 23443  003654  6E15               	movwf	SD_SendCmd@address^0,c
 23444  003656  0E00               	movlw	0
 23445  003658  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23446  00365A  0E00               	movlw	0
 23447  00365C  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23448  00365E  0E00               	movlw	0
 23449  003660  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23450  003662  0E10               	movlw	16
 23451  003664  EC7D  F02F         	call	_SD_SendCmd
 23452                           
 23453                           ;sd_spi.c: 616: for(timeout = 0; timeout < 0xFFFF; timeout++)
 23454  003668  0E00               	movlw	0
 23455  00366A  0100               	movlb	0	; () banked
 23456  00366C  6F86               	movwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),b
 23457  00366E  0E00               	movlw	0
 23458  003670  6F85               	movwf	SD_SPI_MediaInitialize@timeout& (0+255),b
 23459  003672                     l21227:
 23460                           
 23461                           ; BSR set to: 0
 23462                           ;sd_spi.c: 617: {;sd_spi.c: 619: (void)SD_SendCmd(SD_APP_CMD, 0x00000000);
 23463  003672  0E00               	movlw	0
 23464  003674  6E15               	movwf	SD_SendCmd@address^0,c
 23465  003676  0E00               	movlw	0
 23466  003678  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23467  00367A  0E00               	movlw	0
 23468  00367C  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23469  00367E  0E00               	movlw	0
 23470  003680  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23471  003682  0E0F               	movlw	15
 23472  003684  EC7D  F02F         	call	_SD_SendCmd
 23473                           
 23474                           ;sd_spi.c: 624: response = SD_SendCmd(SD_SD_SEND_OP_COND,0x40000000);
 23475  003688  0E00               	movlw	0
 23476  00368A  6E15               	movwf	SD_SendCmd@address^0,c
 23477  00368C  0E00               	movlw	0
 23478  00368E  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23479  003690  0E00               	movlw	0
 23480  003692  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23481  003694  0E40               	movlw	64
 23482  003696  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23483  003698  0E12               	movlw	18
 23484  00369A  EC7D  F02F         	call	_SD_SendCmd
 23485  00369E  EE20  F080         	lfsr	2,SD_SPI_MediaInitialize@response
 23486  0036A2  0E04               	movlw	4
 23487  0036A4                     u23551:
 23488  0036A4  CFEB FFDB          	movff	plusw0,plusw2
 23489  0036A8  06E8               	decf	wreg,f,c
 23490  0036AA  E2FC               	bc	u23551
 23491                           
 23492                           ;sd_spi.c: 630: if(response.r1._byte == 0)
 23493  0036AC  0100               	movlb	0	; () banked
 23494  0036AE  5180               	movf	SD_SPI_MediaInitialize@response& (0+255),w,b
 23495  0036B0  B4D8               	btfsc	status,2,c
 23496  0036B2  D007               	goto	u23570
 23497                           
 23498                           ; BSR set to: 0
 23499  0036B4  4B85               	infsnz	SD_SPI_MediaInitialize@timeout& (0+255),f,b
 23500  0036B6  2B86               	incf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),f,b
 23501                           
 23502                           ; BSR set to: 0
 23503  0036B8  2985               	incf	SD_SPI_MediaInitialize@timeout& (0+255),w,b
 23504  0036BA  E1DB               	bnz	l21227
 23505  0036BC  2986               	incf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),w,b
 23506  0036BE  A4D8               	btfss	status,2,c
 23507  0036C0  D7D8               	goto	l21227
 23508  0036C2                     u23570:
 23509                           
 23510                           ; BSR set to: 0
 23511                           ;sd_spi.c: 633: };sd_spi.c: 634: };sd_spi.c: 636: if(timeout >= 0xFFFF)
 23512  0036C2  2985               	incf	SD_SPI_MediaInitialize@timeout& (0+255),w,b
 23513  0036C4  E106               	bnz	l21241
 23514  0036C6  2986               	incf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),w,b
 23515  0036C8  A4D8               	btfss	status,2,c
 23516  0036CA  D003               	goto	l21241
 23517                           
 23518                           ; BSR set to: 0
 23519                           ;sd_spi.c: 637: {;sd_spi.c: 638: mediaInformation.errorCode = MEDIA_CANNOT_INITIALIZE;
 23520  0036CC  0E02               	movlw	2
 23521  0036CE  0103               	movlb	3	; () banked
 23522  0036D0  6FD7               	movwf	_mediaInformation& (0+255),b
 23523  0036D2                     l21241:
 23524                           
 23525                           ;sd_spi.c: 639: };sd_spi.c: 643: response = SD_SendCmd(SD_READ_OCR, 0x0);
 23526  0036D2  0E00               	movlw	0
 23527  0036D4  6E15               	movwf	SD_SendCmd@address^0,c
 23528  0036D6  0E00               	movlw	0
 23529  0036D8  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23530  0036DA  0E00               	movlw	0
 23531  0036DC  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23532  0036DE  0E00               	movlw	0
 23533  0036E0  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23534  0036E2  0E10               	movlw	16
 23535  0036E4  EC7D  F02F         	call	_SD_SendCmd
 23536  0036E8  EE20  F080         	lfsr	2,SD_SPI_MediaInitialize@response
 23537  0036EC  0E04               	movlw	4
 23538  0036EE                     u23591:
 23539  0036EE  CFEB FFDB          	movff	plusw0,plusw2
 23540  0036F2  06E8               	decf	wreg,f,c
 23541  0036F4  E2FC               	bc	u23591
 23542                           
 23543                           ;sd_spi.c: 647: if(response.r7.bytewise.argument._returnVal & 0x40000000)
 23544  0036F6  0100               	movlb	0	; () banked
 23545  0036F8  AD84               	btfss	(SD_SPI_MediaInitialize@response+4)& (0+255),6,b
 23546  0036FA  D002               	goto	l21247
 23547                           
 23548                           ; BSR set to: 0
 23549                           ;sd_spi.c: 648: {;sd_spi.c: 649: mediaInformation.gSDMode = 1;
 23550  0036FC  0E01               	movlw	1
 23551  0036FE  D001               	goto	L19
 23552  003700                     l21247:
 23553                           
 23554                           ; BSR set to: 0
 23555                           ;sd_spi.c: 651: else;sd_spi.c: 652: {;sd_spi.c: 653: mediaInformation.gSDMode = 0;
 23556  003700  0E00               	movlw	0
 23557  003702                     L19:
 23558  003702  0103               	movlb	3	; () banked
 23559  003704  6FDF               	movwf	(_mediaInformation+8)& (0+255),b
 23560  003706  D030               	goto	l997
 23561  003708                     l21249:
 23562                           
 23563                           ;sd_spi.c: 659: else;sd_spi.c: 660: {;sd_spi.c: 665: SD_SPI_DelayMilliseconds(1u);
 23564  003708  0E01               	movlw	1
 23565  00370A  EC3D  F073         	call	_SD_SPI_DelayMilliseconds
 23566  00370E  9C89               	bcf	137,6,c	;volatile
 23567                           
 23568                           ;sd_spi.c: 670: mediaInformation.gSDMode = 0;
 23569  003710  0E00               	movlw	0
 23570  003712  0103               	movlb	3	; () banked
 23571  003714  6FDF               	movwf	(_mediaInformation+8)& (0+255),b
 23572                           
 23573                           ; BSR set to: 3
 23574                           ;sd_spi.c: 672: timeout = 0x1FFF;
 23575  003716  0E1F               	movlw	31
 23576  003718  0100               	movlb	0	; () banked
 23577  00371A  6F86               	movwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),b
 23578  00371C  6985               	setf	SD_SPI_MediaInitialize@timeout& (0+255),b
 23579  00371E                     l21257:
 23580                           
 23581                           ; BSR set to: 0
 23582                           ;sd_spi.c: 674: {;sd_spi.c: 676: response = SD_SendCmd(SD_SEND_OP_COND, 0x00000000);
 23583  00371E  0E00               	movlw	0
 23584  003720  6E15               	movwf	SD_SendCmd@address^0,c
 23585  003722  0E00               	movlw	0
 23586  003724  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23587  003726  0E00               	movlw	0
 23588  003728  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23589  00372A  0E00               	movlw	0
 23590  00372C  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23591  00372E  0E01               	movlw	1
 23592  003730  EC7D  F02F         	call	_SD_SendCmd
 23593  003734  EE20  F080         	lfsr	2,SD_SPI_MediaInitialize@response
 23594  003738  0E04               	movlw	4
 23595  00373A                     u23611:
 23596  00373A  CFEB FFDB          	movff	plusw0,plusw2
 23597  00373E  06E8               	decf	wreg,f,c
 23598  003740  E2FC               	bc	u23611
 23599                           
 23600                           ;sd_spi.c: 677: timeout--;
 23601  003742  0100               	movlb	0	; () banked
 23602  003744  0785               	decf	SD_SPI_MediaInitialize@timeout& (0+255),f,b
 23603  003746  A0D8               	btfss	status,0,c
 23604  003748  0786               	decf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),f,b
 23605                           
 23606                           ; BSR set to: 0
 23607                           ;sd_spi.c: 678: }while((response.r1._byte != 0x00) && (timeout != 0));
 23608  00374A  5180               	movf	SD_SPI_MediaInitialize@response& (0+255),w,b
 23609  00374C  B4D8               	btfsc	status,2,c
 23610  00374E  D004               	goto	u23630
 23611                           
 23612                           ; BSR set to: 0
 23613  003750  5185               	movf	SD_SPI_MediaInitialize@timeout& (0+255),w,b
 23614  003752  1186               	iorwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),w,b
 23615  003754  A4D8               	btfss	status,2,c
 23616  003756  D7E3               	goto	l21257
 23617  003758                     u23630:
 23618                           
 23619                           ; BSR set to: 0
 23620                           ;sd_spi.c: 681: if(timeout == 0)
 23621  003758  5185               	movf	SD_SPI_MediaInitialize@timeout& (0+255),w,b
 23622  00375A  1186               	iorwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),w,b
 23623  00375C  A4D8               	btfss	status,2,c
 23624  00375E  D004               	goto	l997
 23625                           
 23626                           ; BSR set to: 0
 23627                           ;sd_spi.c: 682: {;sd_spi.c: 683: mediaInformation.errorCode = MEDIA_CANNOT_INITIALIZE;
 23628  003760  0E02               	movlw	2
 23629  003762  0103               	movlb	3	; () banked
 23630  003764  6FD7               	movwf	_mediaInformation& (0+255),b
 23631                           
 23632                           ; BSR set to: 3
 23633  003766  8C89               	bsf	137,6,c	;volatile
 23634  003768                     l997:
 23635  003768  8C89               	bsf	137,6,c	;volatile
 23636                           
 23637                           ;sd_spi.c: 698: spiMaster[SDFAST].spiClose();
 23638  00376A  0E1F               	movlw	low _spiMaster
 23639  00376C  6EF6               	movwf	tblptrl,c
 23640  00376E                     	if	1	;There is more than 1 active tblptr byte
 23641  00376E  0EFA               	movlw	high _spiMaster
 23642  003770  6EF7               	movwf	tblptrh,c
 23643  003772                     	endif
 23644  003772                     	if	1	;There are 3 active tblptr bytes
 23645  003772  0E00               	movlw	low (_spiMaster shr (0+16))
 23646  003774  6EF8               	movwf	tblptru,c
 23647  003776                     	endif
 23648  003776  0009               	tblrd		*+
 23649  003778  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 23650  00377C  0009               	tblrd		*+
 23651  00377E  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 23652  003782  D801               	call	u23658
 23653  003784  D009               	goto	u23659
 23654  003786                     u23658:
 23655  003786  0005               	push	
 23656  003788  6EFA               	movwf	pclath,c
 23657  00378A  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 23658  00378C  6EFD               	movwf	tosl,c
 23659  00378E  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23660  003790  6EFE               	movwf	tosh,c
 23661  003792  6AFF               	clrf	tosu,c
 23662  003794  50FA               	movf	pclath,w,c
 23663  003796  0012               	return		;indir
 23664  003798                     u23659:
 23665                           
 23666                           ;sd_spi.c: 699: if(spiMaster[SDFAST].spiOpen() == 0)
 23667  003798  0E21               	movlw	low (_spiMaster+2)
 23668  00379A  6EF6               	movwf	tblptrl,c
 23669  00379C  0EFA               	movlw	high (_spiMaster+2)
 23670  00379E  6EF7               	movwf	tblptrh,c
 23671  0037A0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23672  0037A0  6AF8               	clrf	tblptru,c
 23673  0037A2                     	endif
 23674  0037A2                     	if	0	;tblptru may be non-zero
 23675  0037A2                     	endif
 23676  0037A2  0009               	tblrd		*+
 23677  0037A4  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 23678  0037A8  0009               	tblrd		*+
 23679  0037AA  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 23680  0037AE  D801               	call	u23668
 23681  0037B0  D009               	goto	u23669
 23682  0037B2                     u23668:
 23683  0037B2  0005               	push	
 23684  0037B4  6EFA               	movwf	pclath,c
 23685  0037B6  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 23686  0037B8  6EFD               	movwf	tosl,c
 23687  0037BA  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23688  0037BC  6EFE               	movwf	tosh,c
 23689  0037BE  6AFF               	clrf	tosu,c
 23690  0037C0  50FA               	movf	pclath,w,c
 23691  0037C2  0012               	return		;indir
 23692  0037C4                     u23669:
 23693  0037C4  0900               	iorlw	0
 23694  0037C6  B4D8               	btfsc	status,2,c
 23695  0037C8  D685               	goto	u23420
 23696                           
 23697                           ;sd_spi.c: 702: };sd_spi.c: 704: do { LATAbits.LATA6 = 0; } while(0);
 23698  0037CA  9C89               	bcf	137,6,c	;volatile
 23699                           
 23700                           ;sd_spi.c: 707: timeout = (uint16_t)20;
 23701  0037CC  0E00               	movlw	0
 23702  0037CE  0100               	movlb	0	; () banked
 23703  0037D0  6F86               	movwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),b
 23704  0037D2  0E14               	movlw	20
 23705  0037D4  6F85               	movwf	SD_SPI_MediaInitialize@timeout& (0+255),b
 23706  0037D6                     l21281:
 23707                           
 23708                           ; BSR set to: 0
 23709                           ;sd_spi.c: 709: {;sd_spi.c: 711: response = SD_SendCmd(SD_SEND_CSD, 0x00);
 23710  0037D6  0E00               	movlw	0
 23711  0037D8  6E15               	movwf	SD_SendCmd@address^0,c
 23712  0037DA  0E00               	movlw	0
 23713  0037DC  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 23714  0037DE  0E00               	movlw	0
 23715  0037E0  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 23716  0037E2  0E00               	movlw	0
 23717  0037E4  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 23718  0037E6  0E03               	movlw	3
 23719  0037E8  EC7D  F02F         	call	_SD_SendCmd
 23720  0037EC  EE20  F080         	lfsr	2,SD_SPI_MediaInitialize@response
 23721  0037F0  0E04               	movlw	4
 23722  0037F2                     u23681:
 23723  0037F2  CFEB FFDB          	movff	plusw0,plusw2
 23724  0037F6  06E8               	decf	wreg,f,c
 23725  0037F8  E2FC               	bc	u23681
 23726                           
 23727                           ;sd_spi.c: 712: timeout--;
 23728  0037FA  0100               	movlb	0	; () banked
 23729  0037FC  0785               	decf	SD_SPI_MediaInitialize@timeout& (0+255),f,b
 23730  0037FE  A0D8               	btfss	status,0,c
 23731  003800  0786               	decf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),f,b
 23732                           
 23733                           ; BSR set to: 0
 23734                           ;sd_spi.c: 713: }while((response.r1._byte != 0x00) && (timeout != 0));
 23735  003802  5180               	movf	SD_SPI_MediaInitialize@response& (0+255),w,b
 23736  003804  B4D8               	btfsc	status,2,c
 23737  003806  D004               	goto	u23700
 23738                           
 23739                           ; BSR set to: 0
 23740  003808  5185               	movf	SD_SPI_MediaInitialize@timeout& (0+255),w,b
 23741  00380A  1186               	iorwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),w,b
 23742  00380C  A4D8               	btfss	status,2,c
 23743  00380E  D7E3               	goto	l21281
 23744  003810                     u23700:
 23745                           
 23746                           ; BSR set to: 0
 23747                           ;sd_spi.c: 715: if(timeout == 0x00)
 23748  003810  5185               	movf	SD_SPI_MediaInitialize@timeout& (0+255),w,b
 23749  003812  1186               	iorwf	(SD_SPI_MediaInitialize@timeout+1)& (0+255),w,b
 23750  003814  A4D8               	btfss	status,2,c
 23751  003816  D015               	goto	l21301
 23752                           
 23753                           ; BSR set to: 0
 23754                           ;sd_spi.c: 716: {;sd_spi.c: 718: mediaInformation.errorCode = MEDIA_CANNOT_INITIALIZE;
 23755  003818  0E02               	movlw	2
 23756  00381A  0103               	movlb	3	; () banked
 23757  00381C  6FD7               	movwf	_mediaInformation& (0+255),b
 23758                           
 23759                           ; BSR set to: 3
 23760  00381E  8C89               	bsf	137,6,c	;volatile
 23761                           
 23762                           ; BSR set to: 3
 23763                           ;sd_spi.c: 721: spiMaster[SDFAST].spiClose();
 23764  003820  0E1F               	movlw	low _spiMaster
 23765  003822  6EF6               	movwf	tblptrl,c
 23766  003824                     	if	1	;There is more than 1 active tblptr byte
 23767  003824  0EFA               	movlw	high _spiMaster
 23768  003826  6EF7               	movwf	tblptrh,c
 23769  003828                     	endif
 23770  003828                     	if	1	;There are 3 active tblptr bytes
 23771  003828  0E00               	movlw	low (_spiMaster shr (0+16))
 23772  00382A  6EF8               	movwf	tblptru,c
 23773  00382C                     	endif
 23774  00382C  0009               	tblrd		*+
 23775  00382E  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 23776  003832  0009               	tblrd		*+
 23777  003834  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 23778  003838  D801               	call	u23728
 23779  00383A  D64C               	goto	u23420
 23780  00383C                     u23728:
 23781  00383C  0005               	push	
 23782  00383E  6EFA               	movwf	pclath,c
 23783  003840  D16D               	goto	L22
 23784  003842                     l21301:
 23785                           
 23786                           ; BSR set to: 0
 23787                           ;sd_spi.c: 723: };sd_spi.c: 728: index = 0;
 23788  003842  0E00               	movlw	0
 23789  003844  6F79               	movwf	SD_SPI_MediaInitialize@index& (0+255),b
 23790                           
 23791                           ;sd_spi.c: 729: for (count = 0; count < 20u; count ++)
 23792  003846  0E00               	movlw	0
 23793  003848  6F7B               	movwf	SD_SPI_MediaInitialize@count& (0+255),b
 23794  00384A                     l21307:
 23795                           
 23796                           ; BSR set to: 0
 23797                           ;sd_spi.c: 730: {;sd_spi.c: 731: CSDResponse[index] = spiMaster[SDFAST].exchangeByte(0xF
      +                          F);
 23798  00384A  5179               	movf	SD_SPI_MediaInitialize@index& (0+255),w,b
 23799  00384C  0F60               	addlw	low SD_SPI_MediaInitialize@CSDResponse
 23800  00384E  6ED9               	movwf	fsr2l,c
 23801  003850  6ADA               	clrf	fsr2h,c
 23802  003852  0E23               	movlw	low (_spiMaster+4)
 23803  003854  6EF6               	movwf	tblptrl,c
 23804  003856  0EFA               	movlw	high (_spiMaster+4)
 23805  003858  6EF7               	movwf	tblptrh,c
 23806  00385A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23807  00385A  6AF8               	clrf	tblptru,c
 23808  00385C                     	endif
 23809  00385C                     	if	0	;tblptru may be non-zero
 23810  00385C                     	endif
 23811  00385C  0009               	tblrd		*+
 23812  00385E  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 23813  003862  0009               	tblrd		*+
 23814  003864  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 23815  003868  D801               	call	u23738
 23816  00386A  D00A               	goto	u23739
 23817  00386C                     u23738:
 23818  00386C  0005               	push	
 23819  00386E  6EFA               	movwf	pclath,c
 23820  003870  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 23821  003872  6EFD               	movwf	tosl,c
 23822  003874  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23823  003876  6EFE               	movwf	tosh,c
 23824  003878  6AFF               	clrf	tosu,c
 23825  00387A  50FA               	movf	pclath,w,c
 23826  00387C  0EFF               	movlw	255
 23827  00387E  0012               	return		;indir
 23828  003880                     u23739:
 23829  003880  6EDF               	movwf	indf2,c
 23830                           
 23831                           ;sd_spi.c: 732: index++;
 23832  003882  0100               	movlb	0	; () banked
 23833  003884  2B79               	incf	SD_SPI_MediaInitialize@index& (0+255),f,b
 23834                           
 23835                           ; BSR set to: 0
 23836                           ;sd_spi.c: 735: if((count == 0) && (CSDResponse[0] == SD_TOKEN_START))
 23837  003886  517B               	movf	SD_SPI_MediaInitialize@count& (0+255),w,b
 23838  003888  A4D8               	btfss	status,2,c
 23839  00388A  D006               	goto	l21317
 23840                           
 23841                           ; BSR set to: 0
 23842  00388C  0EFE               	movlw	254
 23843  00388E  1960               	xorwf	SD_SPI_MediaInitialize@CSDResponse& (0+255),w,b
 23844  003890  A4D8               	btfss	status,2,c
 23845  003892  D002               	goto	l21317
 23846                           
 23847                           ; BSR set to: 0
 23848                           ;sd_spi.c: 736: {;sd_spi.c: 738: index = 0;
 23849  003894  0E00               	movlw	0
 23850  003896  6F79               	movwf	SD_SPI_MediaInitialize@index& (0+255),b
 23851  003898                     l21317:
 23852                           
 23853                           ; BSR set to: 0
 23854  003898  2B7B               	incf	SD_SPI_MediaInitialize@count& (0+255),f,b
 23855                           
 23856                           ; BSR set to: 0
 23857  00389A  0E13               	movlw	19
 23858  00389C  657B               	cpfsgt	SD_SPI_MediaInitialize@count& (0+255),b
 23859  00389E  D7D5               	goto	l21307
 23860                           
 23861                           ; BSR set to: 0
 23862                           ;sd_spi.c: 739: };sd_spi.c: 740: };sd_spi.c: 762: mediaInformation.sectorSize = 512u;
 23863  0038A0  0E02               	movlw	2
 23864  0038A2  0103               	movlb	3	; () banked
 23865  0038A4  6FD9               	movwf	(_mediaInformation+2)& (0+255),b
 23866  0038A6  0E00               	movlw	0
 23867  0038A8  6FD8               	movwf	(_mediaInformation+1)& (0+255),b
 23868                           
 23869                           ; BSR set to: 3
 23870                           ;sd_spi.c: 768: if(CSDResponse[0] & 0xC0)
 23871  0038AA  C060  F02C         	movff	SD_SPI_MediaInitialize@CSDResponse,??_SD_SPI_MediaInitialize
 23872  0038AE  0EC0               	movlw	192
 23873  0038B0  162C               	andwf	??_SD_SPI_MediaInitialize^0,f,c
 23874  0038B2  B4D8               	btfsc	status,2,c
 23875  0038B4  D045               	goto	l21327
 23876                           
 23877                           ; BSR set to: 3
 23878                           ;sd_spi.c: 769: {;sd_spi.c: 774: c_size = (((uint32_t)CSDResponse[7] & 0x3F) << 16) | ((
      +                          uint16_t)CSDResponse[8] << 8) | CSDResponse[9];
 23879  0038B6  0100               	movlb	0	; () banked
 23880  0038B8  5168               	movf	(SD_SPI_MediaInitialize@CSDResponse+8)& (0+255),w,b
 23881  0038BA  6E2D               	movwf	(??_SD_SPI_MediaInitialize+1)^0,c
 23882  0038BC  6A2C               	clrf	??_SD_SPI_MediaInitialize^0,c
 23883  0038BE  C067  F02E         	movff	SD_SPI_MediaInitialize@CSDResponse+7,??_SD_SPI_MediaInitialize+2
 23884  0038C2  0E3F               	movlw	63
 23885  0038C4  162E               	andwf	(??_SD_SPI_MediaInitialize+2)^0,f,c
 23886  0038C6  C02E  F02F         	movff	??_SD_SPI_MediaInitialize+2,??_SD_SPI_MediaInitialize+3
 23887  0038CA  6A30               	clrf	(??_SD_SPI_MediaInitialize+4)^0,c
 23888  0038CC  6A31               	clrf	(??_SD_SPI_MediaInitialize+5)^0,c
 23889  0038CE  6A32               	clrf	(??_SD_SPI_MediaInitialize+6)^0,c
 23890  0038D0  C030  F032         	movff	??_SD_SPI_MediaInitialize+4,??_SD_SPI_MediaInitialize+6
 23891  0038D4  C02F  F031         	movff	??_SD_SPI_MediaInitialize+3,??_SD_SPI_MediaInitialize+5
 23892  0038D8  6A30               	clrf	(??_SD_SPI_MediaInitialize+4)^0,c
 23893  0038DA  6A2F               	clrf	(??_SD_SPI_MediaInitialize+3)^0,c
 23894  0038DC  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 23895  0038DE  102F               	iorwf	(??_SD_SPI_MediaInitialize+3)^0,w,c
 23896  0038E0  6E33               	movwf	(??_SD_SPI_MediaInitialize+7)^0,c
 23897  0038E2  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23898  0038E4  1030               	iorwf	(??_SD_SPI_MediaInitialize+4)^0,w,c
 23899  0038E6  6E34               	movwf	(??_SD_SPI_MediaInitialize+8)^0,c
 23900  0038E8  0E00               	movlw	0
 23901  0038EA  1031               	iorwf	(??_SD_SPI_MediaInitialize+5)^0,w,c
 23902  0038EC  6E35               	movwf	(??_SD_SPI_MediaInitialize+9)^0,c
 23903  0038EE  0E00               	movlw	0
 23904  0038F0  1032               	iorwf	(??_SD_SPI_MediaInitialize+6)^0,w,c
 23905  0038F2  6E36               	movwf	(??_SD_SPI_MediaInitialize+10)^0,c
 23906  0038F4  5169               	movf	(SD_SPI_MediaInitialize@CSDResponse+9)& (0+255),w,b
 23907  0038F6  1033               	iorwf	(??_SD_SPI_MediaInitialize+7)^0,w,c
 23908  0038F8  6F7C               	movwf	SD_SPI_MediaInitialize@c_size& (0+255),b
 23909  0038FA  5034               	movf	(??_SD_SPI_MediaInitialize+8)^0,w,c
 23910  0038FC  6F7D               	movwf	(SD_SPI_MediaInitialize@c_size+1)& (0+255),b
 23911  0038FE  5035               	movf	(??_SD_SPI_MediaInitialize+9)^0,w,c
 23912  003900  6F7E               	movwf	(SD_SPI_MediaInitialize@c_size+2)& (0+255),b
 23913  003902  5036               	movf	(??_SD_SPI_MediaInitialize+10)^0,w,c
 23914  003904  6F7F               	movwf	(SD_SPI_MediaInitialize@c_size+3)& (0+255),b
 23915                           
 23916                           ;sd_spi.c: 776: mediaInformation.finalLBA = ((uint32_t)(c_size + 1) * (uint16_t)(1024u))
      +                           - 1;
 23917  003906  C07C  F02C         	movff	SD_SPI_MediaInitialize@c_size,??_SD_SPI_MediaInitialize
 23918  00390A  C07D  F02D         	movff	SD_SPI_MediaInitialize@c_size+1,??_SD_SPI_MediaInitialize+1
 23919  00390E  C07E  F02E         	movff	SD_SPI_MediaInitialize@c_size+2,??_SD_SPI_MediaInitialize+2
 23920  003912  C07F  F02F         	movff	SD_SPI_MediaInitialize@c_size+3,??_SD_SPI_MediaInitialize+3
 23921  003916  0E0A               	movlw	10
 23922  003918                     u23785:
 23923  003918  90D8               	bcf	status,0,c
 23924  00391A  362C               	rlcf	??_SD_SPI_MediaInitialize^0,f,c
 23925  00391C  362D               	rlcf	(??_SD_SPI_MediaInitialize+1)^0,f,c
 23926  00391E  362E               	rlcf	(??_SD_SPI_MediaInitialize+2)^0,f,c
 23927  003920  362F               	rlcf	(??_SD_SPI_MediaInitialize+3)^0,f,c
 23928  003922  2EE8               	decfsz	wreg,f,c
 23929  003924  D7F9               	goto	u23785
 23930  003926  0EFF               	movlw	255
 23931  003928  242C               	addwf	??_SD_SPI_MediaInitialize^0,w,c
 23932  00392A  0103               	movlb	3	; () banked
 23933  00392C  6FDB               	movwf	(_mediaInformation+4)& (0+255),b
 23934  00392E  0E03               	movlw	3
 23935  003930  202D               	addwfc	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23936  003932  6FDC               	movwf	(_mediaInformation+5)& (0+255),b
 23937  003934  0E00               	movlw	0
 23938  003936  202E               	addwfc	(??_SD_SPI_MediaInitialize+2)^0,w,c
 23939  003938  6FDD               	movwf	(_mediaInformation+6)& (0+255),b
 23940  00393A  0E00               	movlw	0
 23941  00393C  202F               	addwfc	(??_SD_SPI_MediaInitialize+3)^0,w,c
 23942  00393E  D0A9               	goto	L20
 23943  003940                     l21327:
 23944                           
 23945                           ; BSR set to: 3
 23946                           ;sd_spi.c: 778: else;sd_spi.c: 779: {;sd_spi.c: 783: c_size = ((uint32_t)CSDResponse[6] 
      +                          << 16) | ((uint16_t)CSDResponse[7] << 8) | CSDResponse[8];
 23947  003940  0100               	movlb	0	; () banked
 23948  003942  5167               	movf	(SD_SPI_MediaInitialize@CSDResponse+7)& (0+255),w,b
 23949  003944  6E2D               	movwf	(??_SD_SPI_MediaInitialize+1)^0,c
 23950  003946  6A2C               	clrf	??_SD_SPI_MediaInitialize^0,c
 23951  003948  C066  F02E         	movff	SD_SPI_MediaInitialize@CSDResponse+6,??_SD_SPI_MediaInitialize+2
 23952  00394C  6A2F               	clrf	(??_SD_SPI_MediaInitialize+3)^0,c
 23953  00394E  6A30               	clrf	(??_SD_SPI_MediaInitialize+4)^0,c
 23954  003950  6A31               	clrf	(??_SD_SPI_MediaInitialize+5)^0,c
 23955  003952  C02F  F031         	movff	??_SD_SPI_MediaInitialize+3,??_SD_SPI_MediaInitialize+5
 23956  003956  C02E  F030         	movff	??_SD_SPI_MediaInitialize+2,??_SD_SPI_MediaInitialize+4
 23957  00395A  6A2F               	clrf	(??_SD_SPI_MediaInitialize+3)^0,c
 23958  00395C  6A2E               	clrf	(??_SD_SPI_MediaInitialize+2)^0,c
 23959  00395E  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 23960  003960  102E               	iorwf	(??_SD_SPI_MediaInitialize+2)^0,w,c
 23961  003962  6E32               	movwf	(??_SD_SPI_MediaInitialize+6)^0,c
 23962  003964  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 23963  003966  102F               	iorwf	(??_SD_SPI_MediaInitialize+3)^0,w,c
 23964  003968  6E33               	movwf	(??_SD_SPI_MediaInitialize+7)^0,c
 23965  00396A  0E00               	movlw	0
 23966  00396C  1030               	iorwf	(??_SD_SPI_MediaInitialize+4)^0,w,c
 23967  00396E  6E34               	movwf	(??_SD_SPI_MediaInitialize+8)^0,c
 23968  003970  0E00               	movlw	0
 23969  003972  1031               	iorwf	(??_SD_SPI_MediaInitialize+5)^0,w,c
 23970  003974  6E35               	movwf	(??_SD_SPI_MediaInitialize+9)^0,c
 23971  003976  5168               	movf	(SD_SPI_MediaInitialize@CSDResponse+8)& (0+255),w,b
 23972  003978  1032               	iorwf	(??_SD_SPI_MediaInitialize+6)^0,w,c
 23973  00397A  6F7C               	movwf	SD_SPI_MediaInitialize@c_size& (0+255),b
 23974  00397C  5033               	movf	(??_SD_SPI_MediaInitialize+7)^0,w,c
 23975  00397E  6F7D               	movwf	(SD_SPI_MediaInitialize@c_size+1)& (0+255),b
 23976  003980  5034               	movf	(??_SD_SPI_MediaInitialize+8)^0,w,c
 23977  003982  6F7E               	movwf	(SD_SPI_MediaInitialize@c_size+2)& (0+255),b
 23978  003984  5035               	movf	(??_SD_SPI_MediaInitialize+9)^0,w,c
 23979  003986  6F7F               	movwf	(SD_SPI_MediaInitialize@c_size+3)& (0+255),b
 23980                           
 23981                           ;sd_spi.c: 784: c_size &= 0x0003FFC0;
 23982  003988  0EC0               	movlw	192
 23983  00398A  177C               	andwf	SD_SPI_MediaInitialize@c_size& (0+255),f,b
 23984  00398C  0EFF               	movlw	255
 23985  00398E  177D               	andwf	(SD_SPI_MediaInitialize@c_size+1)& (0+255),f,b
 23986  003990  0E03               	movlw	3
 23987  003992  177E               	andwf	(SD_SPI_MediaInitialize@c_size+2)& (0+255),f,b
 23988  003994  0E00               	movlw	0
 23989  003996  177F               	andwf	(SD_SPI_MediaInitialize@c_size+3)& (0+255),f,b
 23990                           
 23991                           ;sd_spi.c: 785: c_size = c_size >> 6;
 23992  003998  C07C  F02C         	movff	SD_SPI_MediaInitialize@c_size,??_SD_SPI_MediaInitialize
 23993  00399C  C07D  F02D         	movff	SD_SPI_MediaInitialize@c_size+1,??_SD_SPI_MediaInitialize+1
 23994  0039A0  C07E  F02E         	movff	SD_SPI_MediaInitialize@c_size+2,??_SD_SPI_MediaInitialize+2
 23995  0039A4  C07F  F02F         	movff	SD_SPI_MediaInitialize@c_size+3,??_SD_SPI_MediaInitialize+3
 23996  0039A8  0E07               	movlw	7
 23997  0039AA  D005               	goto	u23790
 23998  0039AC                     u23795:
 23999  0039AC  90D8               	bcf	status,0,c
 24000  0039AE  322F               	rrcf	(??_SD_SPI_MediaInitialize+3)^0,f,c
 24001  0039B0  322E               	rrcf	(??_SD_SPI_MediaInitialize+2)^0,f,c
 24002  0039B2  322D               	rrcf	(??_SD_SPI_MediaInitialize+1)^0,f,c
 24003  0039B4  322C               	rrcf	??_SD_SPI_MediaInitialize^0,f,c
 24004  0039B6                     u23790:
 24005  0039B6  2EE8               	decfsz	wreg,f,c
 24006  0039B8  D7F9               	goto	u23795
 24007  0039BA  C02C  F07C         	movff	??_SD_SPI_MediaInitialize,SD_SPI_MediaInitialize@c_size
 24008  0039BE  C02D  F07D         	movff	??_SD_SPI_MediaInitialize+1,SD_SPI_MediaInitialize@c_size+1
 24009  0039C2  C02E  F07E         	movff	??_SD_SPI_MediaInitialize+2,SD_SPI_MediaInitialize@c_size+2
 24010  0039C6  C02F  F07F         	movff	??_SD_SPI_MediaInitialize+3,SD_SPI_MediaInitialize@c_size+3
 24011                           
 24012                           ;sd_spi.c: 788: c_size_mult = ((uint16_t)((CSDResponse[9] & 0x03) << 1)) | ((uint16_t)((
      +                          CSDResponse[10] & 0x80) >> 7));
 24013  0039CA  C069  F02C         	movff	SD_SPI_MediaInitialize@CSDResponse+9,??_SD_SPI_MediaInitialize
 24014  0039CE  0E03               	movlw	3
 24015  0039D0  162C               	andwf	??_SD_SPI_MediaInitialize^0,f,c
 24016  0039D2  6A2D               	clrf	(??_SD_SPI_MediaInitialize+1)^0,c
 24017  0039D4  AF6A               	btfss	(SD_SPI_MediaInitialize@CSDResponse+10)& (0+255),7,b
 24018  0039D6  D001               	bra	u23805
 24019  0039D8  2A2D               	incf	(??_SD_SPI_MediaInitialize+1)^0,f,c
 24020  0039DA                     u23805:
 24021  0039DA  302D               	rrcf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 24022  0039DC  342C               	rlcf	??_SD_SPI_MediaInitialize^0,w,c
 24023  0039DE  6F78               	movwf	SD_SPI_MediaInitialize@c_size_mult& (0+255),b
 24024                           
 24025                           ;sd_spi.c: 791: block_len = CSDResponse[5] & 0x0F;
 24026  0039E0  5165               	movf	(SD_SPI_MediaInitialize@CSDResponse+5)& (0+255),w,b
 24027  0039E2  0B0F               	andlw	15
 24028  0039E4  6F7A               	movwf	SD_SPI_MediaInitialize@block_len& (0+255),b
 24029                           
 24030                           ;sd_spi.c: 793: block_len = 1 << (block_len - 9);
 24031  0039E6  C07A  F02C         	movff	SD_SPI_MediaInitialize@block_len,??_SD_SPI_MediaInitialize
 24032  0039EA  0EF7               	movlw	-9
 24033  0039EC  262C               	addwf	??_SD_SPI_MediaInitialize^0,f,c
 24034  0039EE  0E01               	movlw	1
 24035  0039F0  6E2D               	movwf	(??_SD_SPI_MediaInitialize+1)^0,c
 24036  0039F2  2A2C               	incf	??_SD_SPI_MediaInitialize^0,f,c
 24037  0039F4  D002               	goto	u23814
 24038  0039F6                     u23815:
 24039  0039F6  90D8               	bcf	status,0,c
 24040  0039F8  362D               	rlcf	(??_SD_SPI_MediaInitialize+1)^0,f,c
 24041  0039FA                     u23814:
 24042  0039FA  2E2C               	decfsz	??_SD_SPI_MediaInitialize^0,f,c
 24043  0039FC  D7FC               	goto	u23815
 24044  0039FE  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 24045  003A00  0100               	movlb	0	; () banked
 24046  003A02  6F7A               	movwf	SD_SPI_MediaInitialize@block_len& (0+255),b
 24047                           
 24048                           ; BSR set to: 0
 24049                           ;sd_spi.c: 798: mediaInformation.finalLBA = ((uint32_t)(c_size + 1) * (uint16_t)((uint16
      +                          _t)1 << (c_size_mult + 2)) * block_len) - 1;
 24050  003A04  0E01               	movlw	1
 24051  003A06  257C               	addwf	SD_SPI_MediaInitialize@c_size& (0+255),w,b
 24052  003A08  6E0E               	movwf	___lmul@multiplier^0,c
 24053  003A0A  0E00               	movlw	0
 24054  003A0C  217D               	addwfc	(SD_SPI_MediaInitialize@c_size+1)& (0+255),w,b
 24055  003A0E  6E0F               	movwf	(___lmul@multiplier+1)^0,c
 24056  003A10  0E00               	movlw	0
 24057  003A12  217E               	addwfc	(SD_SPI_MediaInitialize@c_size+2)& (0+255),w,b
 24058  003A14  6E10               	movwf	(___lmul@multiplier+2)^0,c
 24059  003A16  0E00               	movlw	0
 24060  003A18  217F               	addwfc	(SD_SPI_MediaInitialize@c_size+3)& (0+255),w,b
 24061  003A1A  6E11               	movwf	(___lmul@multiplier+3)^0,c
 24062  003A1C  C078  F02C         	movff	SD_SPI_MediaInitialize@c_size_mult,??_SD_SPI_MediaInitialize
 24063  003A20  0E02               	movlw	2
 24064  003A22  262C               	addwf	??_SD_SPI_MediaInitialize^0,f,c
 24065  003A24  0E01               	movlw	1
 24066  003A26  6E2D               	movwf	(??_SD_SPI_MediaInitialize+1)^0,c
 24067  003A28  0E00               	movlw	0
 24068  003A2A  6E2E               	movwf	(??_SD_SPI_MediaInitialize+2)^0,c
 24069  003A2C  2A2C               	incf	??_SD_SPI_MediaInitialize^0,f,c
 24070  003A2E  D003               	goto	u23824
 24071  003A30                     u23825:
 24072  003A30  90D8               	bcf	status,0,c
 24073  003A32  362D               	rlcf	(??_SD_SPI_MediaInitialize+1)^0,f,c
 24074  003A34  362E               	rlcf	(??_SD_SPI_MediaInitialize+2)^0,f,c
 24075  003A36                     u23824:
 24076  003A36  2E2C               	decfsz	??_SD_SPI_MediaInitialize^0,f,c
 24077  003A38  D7FB               	goto	u23825
 24078  003A3A  C02D  F012         	movff	??_SD_SPI_MediaInitialize+1,___lmul@multiplicand
 24079  003A3E  C02E  F013         	movff	??_SD_SPI_MediaInitialize+2,___lmul@multiplicand+1
 24080  003A42  6A14               	clrf	(___lmul@multiplicand+2)^0,c
 24081  003A44  6A15               	clrf	(___lmul@multiplicand+3)^0,c
 24082  003A46  EC16  F072         	call	___lmul
 24083  003A4A  C00E  F074         	movff	?___lmul,_SD_SPI_MediaInitialize$8864
 24084  003A4E  C00F  F075         	movff	?___lmul+1,_SD_SPI_MediaInitialize$8864+1
 24085  003A52  C010  F076         	movff	?___lmul+2,_SD_SPI_MediaInitialize$8864+2
 24086  003A56  C011  F077         	movff	?___lmul+3,_SD_SPI_MediaInitialize$8864+3
 24087                           
 24088                           ;sd_spi.c: 798: mediaInformation.finalLBA = ((uint32_t)(c_size + 1) * (uint16_t)((uint16
      +                          _t)1 << (c_size_mult + 2)) * block_len) - 1;
 24089  003A5A  C074  F00E         	movff	_SD_SPI_MediaInitialize$8864,___lmul@multiplier
 24090  003A5E  C075  F00F         	movff	_SD_SPI_MediaInitialize$8864+1,___lmul@multiplier+1
 24091  003A62  C076  F010         	movff	_SD_SPI_MediaInitialize$8864+2,___lmul@multiplier+2
 24092  003A66  C077  F011         	movff	_SD_SPI_MediaInitialize$8864+3,___lmul@multiplier+3
 24093  003A6A  0100               	movlb	0	; () banked
 24094  003A6C  517A               	movf	SD_SPI_MediaInitialize@block_len& (0+255),w,b
 24095  003A6E  6E12               	movwf	___lmul@multiplicand^0,c
 24096  003A70  6A13               	clrf	(___lmul@multiplicand+1)^0,c
 24097  003A72  6A14               	clrf	(___lmul@multiplicand+2)^0,c
 24098  003A74  6A15               	clrf	(___lmul@multiplicand+3)^0,c
 24099  003A76  EC16  F072         	call	___lmul	;wreg free
 24100  003A7A  0EFF               	movlw	255
 24101  003A7C  240E               	addwf	?___lmul^0,w,c
 24102  003A7E  0103               	movlb	3	; () banked
 24103  003A80  6FDB               	movwf	(_mediaInformation+4)& (0+255),b
 24104  003A82  0EFF               	movlw	255
 24105  003A84  200F               	addwfc	(?___lmul+1)^0,w,c
 24106  003A86  6FDC               	movwf	(_mediaInformation+5)& (0+255),b
 24107  003A88  0EFF               	movlw	255
 24108  003A8A  2010               	addwfc	(?___lmul+2)^0,w,c
 24109  003A8C  6FDD               	movwf	(_mediaInformation+6)& (0+255),b
 24110  003A8E  0EFF               	movlw	255
 24111  003A90  2011               	addwfc	(?___lmul+3)^0,w,c
 24112  003A92                     L20:
 24113  003A92  6FDE               	movwf	(_mediaInformation+7)& (0+255),b
 24114                           
 24115                           ; BSR set to: 3
 24116                           ;sd_spi.c: 799: };sd_spi.c: 804: (void)SD_SendCmd(SD_CRC_ON_OFF, 0x0);
 24117  003A94  0E00               	movlw	0
 24118  003A96  6E15               	movwf	SD_SendCmd@address^0,c
 24119  003A98  0E00               	movlw	0
 24120  003A9A  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 24121  003A9C  0E00               	movlw	0
 24122  003A9E  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 24123  003AA0  0E00               	movlw	0
 24124  003AA2  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 24125  003AA4  0E11               	movlw	17
 24126  003AA6  EC7D  F02F         	call	_SD_SendCmd
 24127                           
 24128                           ;sd_spi.c: 807: (void)SD_SendCmd(SD_SET_BLOCK_LENGTH , mediaInformation.sectorSize);
 24129  003AAA  C3D8  F015         	movff	_mediaInformation+1,SD_SendCmd@address
 24130  003AAE  C3D9  F016         	movff	_mediaInformation+2,SD_SendCmd@address+1
 24131  003AB2  6A17               	clrf	(SD_SendCmd@address+2)^0,c
 24132  003AB4  6A18               	clrf	(SD_SendCmd@address+3)^0,c
 24133  003AB6  0E07               	movlw	7
 24134  003AB8  EC7D  F02F         	call	_SD_SendCmd
 24135  003ABC  8C89               	bsf	137,6,c	;volatile
 24136                           
 24137                           ;sd_spi.c: 813: if(mediaInformation.errorCode == MEDIA_NO_ERROR)
 24138  003ABE  0103               	movlb	3	; () banked
 24139  003AC0  51D7               	movf	_mediaInformation& (0+255),w,b
 24140  003AC2  A4D8               	btfss	status,2,c
 24141  003AC4  D01B               	goto	l21349
 24142                           
 24143                           ; BSR set to: 3
 24144                           ;sd_spi.c: 814: {;sd_spi.c: 815: mediaInformation.state = SD_STATE_READY_FOR_COMMAND;
 24145  003AC6  0E01               	movlw	1
 24146  003AC8  6FDA               	movwf	(_mediaInformation+3)& (0+255),b
 24147                           
 24148                           ; BSR set to: 3
 24149                           ;sd_spi.c: 816: spiMaster[SDFAST].spiClose();
 24150  003ACA  0E1F               	movlw	low _spiMaster
 24151  003ACC  6EF6               	movwf	tblptrl,c
 24152  003ACE                     	if	1	;There is more than 1 active tblptr byte
 24153  003ACE  0EFA               	movlw	high _spiMaster
 24154  003AD0  6EF7               	movwf	tblptrh,c
 24155  003AD2                     	endif
 24156  003AD2                     	if	1	;There are 3 active tblptr bytes
 24157  003AD2  0E00               	movlw	low (_spiMaster shr (0+16))
 24158  003AD4  6EF8               	movwf	tblptru,c
 24159  003AD6                     	endif
 24160  003AD6  0009               	tblrd		*+
 24161  003AD8  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 24162  003ADC  0009               	tblrd		*+
 24163  003ADE  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 24164  003AE2  D801               	call	u23848
 24165  003AE4  D009               	goto	u23849
 24166  003AE6                     u23848:
 24167  003AE6  0005               	push	
 24168  003AE8  6EFA               	movwf	pclath,c
 24169  003AEA  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 24170  003AEC  6EFD               	movwf	tosl,c
 24171  003AEE  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 24172  003AF0  6EFE               	movwf	tosh,c
 24173  003AF2  6AFF               	clrf	tosu,c
 24174  003AF4  50FA               	movf	pclath,w,c
 24175  003AF6  0012               	return		;indir
 24176  003AF8                     u23849:
 24177                           
 24178                           ;sd_spi.c: 817: return 1;
 24179  003AF8  0E01               	movlw	1
 24180  003AFA  0012               	return	
 24181  003AFC                     l21349:
 24182                           
 24183                           ; BSR set to: 3
 24184                           ;sd_spi.c: 818: };sd_spi.c: 820: spiMaster[SDFAST].spiClose();
 24185  003AFC  0E1F               	movlw	low _spiMaster
 24186  003AFE  6EF6               	movwf	tblptrl,c
 24187  003B00                     	if	1	;There is more than 1 active tblptr byte
 24188  003B00  0EFA               	movlw	high _spiMaster
 24189  003B02  6EF7               	movwf	tblptrh,c
 24190  003B04                     	endif
 24191  003B04                     	if	1	;There are 3 active tblptr bytes
 24192  003B04  0E00               	movlw	low (_spiMaster shr (0+16))
 24193  003B06  6EF8               	movwf	tblptru,c
 24194  003B08                     	endif
 24195  003B08  0009               	tblrd		*+
 24196  003B0A  CFF5 F02C          	movff	tablat,??_SD_SPI_MediaInitialize
 24197  003B0E  0009               	tblrd		*+
 24198  003B10  CFF5 F02D          	movff	tablat,??_SD_SPI_MediaInitialize+1
 24199  003B14  D801               	call	u23858
 24200  003B16  D4DE               	goto	u23420
 24201  003B18                     u23858:
 24202  003B18  0005               	push	
 24203  003B1A  6EFA               	movwf	pclath,c
 24204  003B1C                     L22:
 24205  003B1C  502C               	movf	??_SD_SPI_MediaInitialize^0,w,c
 24206  003B1E  6EFD               	movwf	tosl,c
 24207  003B20  502D               	movf	(??_SD_SPI_MediaInitialize+1)^0,w,c
 24208  003B22  6EFE               	movwf	tosh,c
 24209  003B24  6AFF               	clrf	tosu,c
 24210  003B26  50FA               	movf	pclath,w,c
 24211  003B28  0012               	return		;indir
 24212  003B2A                     __end_of_SD_SPI_MediaInitialize:
 24213                           	callstack 0
 24214                           
 24215 ;; *************** function _SD_SPI_DelayMilliseconds *****************
 24216 ;; Defined at:
 24217 ;;		line 483 in file "mcc_generated_files/sd_spi/sd_spi.c"
 24218 ;; Parameters:    Size  Location     Type
 24219 ;;  milliseconds    1    wreg     unsigned char 
 24220 ;; Auto vars:     Size  Location     Type
 24221 ;;  milliseconds    1   16[COMRAM] unsigned char 
 24222 ;;  timeout         2   17[COMRAM] unsigned int 
 24223 ;; Return value:  Size  Location     Type
 24224 ;;                  1    wreg      void 
 24225 ;; Registers used:
 24226 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24227 ;; Tracked objects:
 24228 ;;		On entry : 0/3
 24229 ;;		On exit  : 0/0
 24230 ;;		Unchanged: 0/0
 24231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24233 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24234 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24235 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24236 ;;Total ram usage:        5 bytes
 24237 ;; Hardware stack levels used:    1
 24238 ;; Hardware stack levels required when called:    7
 24239 ;; This function calls:
 24240 ;;		_SPI1_ExchangeByte
 24241 ;; This function is called by:
 24242 ;;		_SD_SPI_MediaInitialize
 24243 ;; This function uses a non-reentrant model
 24244 ;;
 24245                           
 24246                           	psect	text75
 24247  00E67A                     __ptext75:
 24248                           	callstack 0
 24249  00E67A                     _SD_SPI_DelayMilliseconds:
 24250                           	callstack 18
 24251                           
 24252                           ;incstack = 0
 24253                           ;SD_SPI_DelayMilliseconds@milliseconds stored from wreg
 24254  00E67A  6E11               	movwf	SD_SPI_DelayMilliseconds@milliseconds^0,c
 24255                           
 24256                           ;sd_spi.c: 485: uint16_t timeout = 50u * milliseconds;
 24257  00E67C  5011               	movf	SD_SPI_DelayMilliseconds@milliseconds^0,w,c
 24258  00E67E  0D32               	mullw	50
 24259  00E680  CFF3 F012          	movff	prodl,SD_SPI_DelayMilliseconds@timeout
 24260  00E684  CFF4 F013          	movff	prodh,SD_SPI_DelayMilliseconds@timeout+1
 24261  00E688  8C89               	bsf	137,6,c	;volatile
 24262  00E68A  D017               	goto	u22469
 24263  00E68C                     l20441:
 24264                           
 24265                           ;sd_spi.c: 489: {;sd_spi.c: 490: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 24266  00E68C  0E23               	movlw	low (_spiMaster+4)
 24267  00E68E  6EF6               	movwf	tblptrl,c
 24268  00E690  0EFA               	movlw	high (_spiMaster+4)
 24269  00E692  6EF7               	movwf	tblptrh,c
 24270  00E694                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24271  00E694  6AF8               	clrf	tblptru,c
 24272  00E696                     	endif
 24273  00E696                     	if	0	;tblptru may be non-zero
 24274  00E696                     	endif
 24275  00E696  0009               	tblrd		*+
 24276  00E698  CFF5 F00F          	movff	tablat,??_SD_SPI_DelayMilliseconds
 24277  00E69C  0009               	tblrd		*+
 24278  00E69E  CFF5 F010          	movff	tablat,??_SD_SPI_DelayMilliseconds+1
 24279  00E6A2  D801               	call	u22468
 24280  00E6A4  D00A               	goto	u22469
 24281  00E6A6                     u22468:
 24282  00E6A6  0005               	push	
 24283  00E6A8  6EFA               	movwf	pclath,c
 24284  00E6AA  500F               	movf	??_SD_SPI_DelayMilliseconds^0,w,c
 24285  00E6AC  6EFD               	movwf	tosl,c
 24286  00E6AE  5010               	movf	(??_SD_SPI_DelayMilliseconds+1)^0,w,c
 24287  00E6B0  6EFE               	movwf	tosh,c
 24288  00E6B2  6AFF               	clrf	tosu,c
 24289  00E6B4  50FA               	movf	pclath,w,c
 24290  00E6B6  0EFF               	movlw	255
 24291  00E6B8  0012               	return		;indir
 24292  00E6BA                     u22469:
 24293  00E6BA  0612               	decf	SD_SPI_DelayMilliseconds@timeout^0,f,c
 24294  00E6BC  A0D8               	btfss	status,0,c
 24295  00E6BE  0613               	decf	(SD_SPI_DelayMilliseconds@timeout+1)^0,f,c
 24296  00E6C0  2812               	incf	SD_SPI_DelayMilliseconds@timeout^0,w,c
 24297  00E6C2  E1E4               	bnz	l20441
 24298  00E6C4  2813               	incf	(SD_SPI_DelayMilliseconds@timeout+1)^0,w,c
 24299  00E6C6  B4D8               	btfsc	status,2,c
 24300  00E6C8  0012               	return	
 24301  00E6CA  D7E0               	goto	l20441
 24302  00E6CC                     __end_of_SD_SPI_DelayMilliseconds:
 24303                           	callstack 0
 24304                           
 24305 ;; *************** function _check_fs *****************
 24306 ;; Defined at:
 24307 ;;		line 3176 in file "mcc_generated_files/fatfs/ff.c"
 24308 ;; Parameters:    Size  Location     Type
 24309 ;;  fs              2   55[BANK0 ] PTR struct .
 24310 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 24311 ;;  sect            4   57[BANK0 ] unsigned long 
 24312 ;; Auto vars:     Size  Location     Type
 24313 ;;		None
 24314 ;; Return value:  Size  Location     Type
 24315 ;;                  1    wreg      unsigned char 
 24316 ;; Registers used:
 24317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24318 ;; Tracked objects:
 24319 ;;		On entry : 3F/0
 24320 ;;		On exit  : 0/0
 24321 ;;		Unchanged: 0/0
 24322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24323 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24326 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24327 ;;Total ram usage:        7 bytes
 24328 ;; Hardware stack levels used:    1
 24329 ;; Hardware stack levels required when called:   13
 24330 ;; This function calls:
 24331 ;;		_ld_word
 24332 ;;		_mem_cmp
 24333 ;;		_move_window
 24334 ;; This function is called by:
 24335 ;;		_find_volume
 24336 ;; This function uses a non-reentrant model
 24337 ;;
 24338                           
 24339                           	psect	text76
 24340  00B63E                     __ptext76:
 24341                           	callstack 0
 24342  00B63E                     _check_fs:
 24343                           	callstack 14
 24344                           
 24345                           ; BSR set to: 0
 24346                           ;ff.c: 3181: fs->wflag = 0; fs->winsect = 0xFFFFFFFF;
 24347                           
 24348                           ;incstack = 0
 24349  00B63E  EE20 F003          	lfsr	2,3
 24350  00B642  5197               	movf	check_fs@fs& (0+255),w,b
 24351  00B644  26D9               	addwf	fsr2l,f,c
 24352  00B646  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 24353  00B648  22DA               	addwfc	fsr2h,f,c
 24354  00B64A  0E00               	movlw	0
 24355  00B64C  6EDF               	movwf	indf2,c
 24356  00B64E  EE20 F02B          	lfsr	2,43
 24357  00B652  5197               	movf	check_fs@fs& (0+255),w,b
 24358  00B654  26D9               	addwf	fsr2l,f,c
 24359  00B656  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 24360  00B658  22DA               	addwfc	fsr2h,f,c
 24361  00B65A  0EFF               	movlw	255
 24362  00B65C  6EDE               	movwf	postinc2,c
 24363  00B65E  0EFF               	movlw	255
 24364  00B660  6EDE               	movwf	postinc2,c
 24365  00B662  0EFF               	movlw	255
 24366  00B664  6EDE               	movwf	postinc2,c
 24367  00B666  0EFF               	movlw	255
 24368  00B668  6EDD               	movwf	postdec2,c
 24369                           
 24370                           ; BSR set to: 0
 24371                           ;ff.c: 3182: if (move_window(fs, sect) != FR_OK) return 4;
 24372  00B66A  C097  F08C         	movff	check_fs@fs,move_window@fs
 24373  00B66E  C098  F08D         	movff	check_fs@fs+1,move_window@fs+1
 24374  00B672  C099  F08E         	movff	check_fs@sect,move_window@sector
 24375  00B676  C09A  F08F         	movff	check_fs@sect+1,move_window@sector+1
 24376  00B67A  C09B  F090         	movff	check_fs@sect+2,move_window@sector+2
 24377  00B67E  C09C  F091         	movff	check_fs@sect+3,move_window@sector+3
 24378  00B682  EC1B  F067         	call	_move_window
 24379  00B686  0900               	iorlw	0
 24380  00B688  B4D8               	btfsc	status,2,c
 24381  00B68A  D002               	goto	l22123
 24382                           
 24383                           ; BSR set to: 0
 24384  00B68C  0E04               	movlw	4
 24385  00B68E  0012               	return	
 24386  00B690                     l22123:
 24387                           
 24388                           ; BSR set to: 0
 24389                           ;ff.c: 3184: if (ld_word(fs->win + 510) != 0xAA55) return 3;
 24390  00B690  0E2D               	movlw	45
 24391  00B692  2597               	addwf	check_fs@fs& (0+255),w,b
 24392  00B694  6E0E               	movwf	ld_word@ptr^0,c
 24393  00B696  0E02               	movlw	2
 24394  00B698  2198               	addwfc	(check_fs@fs+1)& (0+255),w,b
 24395  00B69A  6E0F               	movwf	(ld_word@ptr+1)^0,c
 24396  00B69C  ECB2  F076         	call	_ld_word	;wreg free
 24397  00B6A0  0E55               	movlw	85
 24398  00B6A2  180E               	xorwf	?_ld_word^0,w,c
 24399  00B6A4  E104               	bnz	u24680
 24400  00B6A6  0EAA               	movlw	170
 24401  00B6A8  180F               	xorwf	(?_ld_word+1)^0,w,c
 24402  00B6AA  B4D8               	btfsc	status,2,c
 24403  00B6AC  D002               	goto	l22129
 24404  00B6AE                     u24680:
 24405  00B6AE  0E03               	movlw	3
 24406  00B6B0  0012               	return	
 24407  00B6B2                     l22129:
 24408                           
 24409                           ;ff.c: 3189: if (fs->win[0] == 0xE9 || fs->win[0] == 0xEB || fs->win[0] == 0xE8) {
 24410  00B6B2  0100               	movlb	0	; () banked
 24411  00B6B4  EE20 F02F          	lfsr	2,47
 24412  00B6B8  5197               	movf	check_fs@fs& (0+255),w,b
 24413  00B6BA  26D9               	addwf	fsr2l,f,c
 24414  00B6BC  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 24415  00B6BE  22DA               	addwfc	fsr2h,f,c
 24416  00B6C0  0EE9               	movlw	233
 24417  00B6C2  18DE               	xorwf	postinc2,w,c
 24418  00B6C4  B4D8               	btfsc	status,2,c
 24419  00B6C6  D014               	goto	u24710
 24420                           
 24421                           ; BSR set to: 0
 24422  00B6C8  EE20 F02F          	lfsr	2,47
 24423  00B6CC  5197               	movf	check_fs@fs& (0+255),w,b
 24424  00B6CE  26D9               	addwf	fsr2l,f,c
 24425  00B6D0  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 24426  00B6D2  22DA               	addwfc	fsr2h,f,c
 24427  00B6D4  0EEB               	movlw	235
 24428  00B6D6  18DE               	xorwf	postinc2,w,c
 24429  00B6D8  B4D8               	btfsc	status,2,c
 24430  00B6DA  D00A               	goto	u24710
 24431                           
 24432                           ; BSR set to: 0
 24433  00B6DC  EE20 F02F          	lfsr	2,47
 24434  00B6E0  5197               	movf	check_fs@fs& (0+255),w,b
 24435  00B6E2  26D9               	addwf	fsr2l,f,c
 24436  00B6E4  5198               	movf	(check_fs@fs+1)& (0+255),w,b
 24437  00B6E6  22DA               	addwfc	fsr2h,f,c
 24438  00B6E8  0EE8               	movlw	232
 24439  00B6EA  18DE               	xorwf	postinc2,w,c
 24440  00B6EC  A4D8               	btfss	status,2,c
 24441  00B6EE  D02B               	goto	l22147
 24442  00B6F0                     u24710:
 24443                           
 24444                           ; BSR set to: 0
 24445                           ;ff.c: 3190: if (!mem_cmp(fs->win + 54, "FAT", 3)) return 0;
 24446  00B6F0  0E65               	movlw	101
 24447  00B6F2  2597               	addwf	check_fs@fs& (0+255),w,b
 24448  00B6F4  6E0E               	movwf	mem_cmp@dst^0,c
 24449  00B6F6  0E00               	movlw	0
 24450  00B6F8  2198               	addwfc	(check_fs@fs+1)& (0+255),w,b
 24451  00B6FA  6E0F               	movwf	(mem_cmp@dst+1)^0,c
 24452  00B6FC  0EEB               	movlw	low STR_5
 24453  00B6FE  6E10               	movwf	mem_cmp@src^0,c
 24454  00B700  0EFF               	movlw	high STR_5
 24455  00B702  6E11               	movwf	(mem_cmp@src+1)^0,c
 24456  00B704  0E00               	movlw	0
 24457  00B706  6E13               	movwf	(mem_cmp@cnt+1)^0,c
 24458  00B708  0E03               	movlw	3
 24459  00B70A  6E12               	movwf	mem_cmp@cnt^0,c
 24460  00B70C  EC8D  F06E         	call	_mem_cmp	;wreg free
 24461  00B710  500E               	movf	?_mem_cmp^0,w,c
 24462  00B712  100F               	iorwf	(?_mem_cmp+1)^0,w,c
 24463  00B714  A4D8               	btfss	status,2,c
 24464  00B716  D002               	goto	l22141
 24465  00B718                     u24720:
 24466  00B718  0E00               	movlw	0
 24467  00B71A  0012               	return	
 24468  00B71C                     l22141:
 24469                           
 24470                           ;ff.c: 3191: if (!mem_cmp(fs->win + 82, "FAT32", 5)) return 0;
 24471  00B71C  0E81               	movlw	129
 24472  00B71E  0100               	movlb	0	; () banked
 24473  00B720  2597               	addwf	check_fs@fs& (0+255),w,b
 24474  00B722  6E0E               	movwf	mem_cmp@dst^0,c
 24475  00B724  0E00               	movlw	0
 24476  00B726  2198               	addwfc	(check_fs@fs+1)& (0+255),w,b
 24477  00B728  6E0F               	movwf	(mem_cmp@dst+1)^0,c
 24478  00B72A  0EE1               	movlw	low STR_6
 24479  00B72C  6E10               	movwf	mem_cmp@src^0,c
 24480  00B72E  0EFF               	movlw	high STR_6
 24481  00B730  6E11               	movwf	(mem_cmp@src+1)^0,c
 24482  00B732  0E00               	movlw	0
 24483  00B734  6E13               	movwf	(mem_cmp@cnt+1)^0,c
 24484  00B736  0E05               	movlw	5
 24485  00B738  6E12               	movwf	mem_cmp@cnt^0,c
 24486  00B73A  EC8D  F06E         	call	_mem_cmp	;wreg free
 24487  00B73E  500E               	movf	?_mem_cmp^0,w,c
 24488  00B740  100F               	iorwf	(?_mem_cmp+1)^0,w,c
 24489  00B742  B4D8               	btfsc	status,2,c
 24490  00B744  D7E9               	goto	u24720
 24491  00B746                     l22147:
 24492                           
 24493                           ;ff.c: 3192: };ff.c: 3193: return 2;
 24494  00B746  0E02               	movlw	2
 24495  00B748  0012               	return		;funcret
 24496  00B74A                     __end_of_check_fs:
 24497                           	callstack 0
 24498                           
 24499 ;; *************** function _mem_cmp *****************
 24500 ;; Defined at:
 24501 ;;		line 671 in file "mcc_generated_files/fatfs/ff.c"
 24502 ;; Parameters:    Size  Location     Type
 24503 ;;  dst             2   13[COMRAM] PTR const void 
 24504 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 24505 ;;		 -> NULL(0), 
 24506 ;;  src             2   15[COMRAM] PTR const void 
 24507 ;;		 -> dj.fn(12), f_open@dj(40), STR_6(6), STR_5(4), 
 24508 ;;  cnt             2   17[COMRAM] unsigned int 
 24509 ;; Auto vars:     Size  Location     Type
 24510 ;;  r               2   25[COMRAM] int 
 24511 ;;  s               2   23[COMRAM] PTR const unsigned char 
 24512 ;;		 -> dj.fn(12), f_open@dj(40), STR_6(6), STR_5(4), 
 24513 ;;  d               2   21[COMRAM] PTR const unsigned char 
 24514 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 24515 ;;		 -> NULL(0), 
 24516 ;; Return value:  Size  Location     Type
 24517 ;;                  2   13[COMRAM] int 
 24518 ;; Registers used:
 24519 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 24520 ;; Tracked objects:
 24521 ;;		On entry : 3F/0
 24522 ;;		On exit  : 0/0
 24523 ;;		Unchanged: 0/0
 24524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24525 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24526 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24527 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24528 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24529 ;;Total ram usage:       14 bytes
 24530 ;; Hardware stack levels used:    1
 24531 ;; Hardware stack levels required when called:    6
 24532 ;; This function calls:
 24533 ;;		Nothing
 24534 ;; This function is called by:
 24535 ;;		_dir_find
 24536 ;;		_check_fs
 24537 ;; This function uses a non-reentrant model
 24538 ;;
 24539                           
 24540                           	psect	text77
 24541  00DD1A                     __ptext77:
 24542                           	callstack 0
 24543  00DD1A                     _mem_cmp:
 24544                           	callstack 20
 24545                           
 24546                           ; BSR set to: 0
 24547                           ;ff.c: 673: const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 24548                           
 24549                           ;incstack = 0
 24550  00DD1A  C00E  F016         	movff	mem_cmp@dst,mem_cmp@d
 24551  00DD1E  C00F  F017         	movff	mem_cmp@dst+1,mem_cmp@d+1
 24552  00DD22  C010  F018         	movff	mem_cmp@src,mem_cmp@s
 24553  00DD26  C011  F019         	movff	mem_cmp@src+1,mem_cmp@s+1
 24554  00DD2A                     
 24555                           ;ff.c: 677: r = *d++ - *s++;
 24556                           
 24557                           ; BSR set to: 0
 24558  00DD2A  C016  FFD9         	movff	mem_cmp@d,fsr2l
 24559  00DD2E  C017  FFDA         	movff	mem_cmp@d+1,fsr2h
 24560  00DD32  50DF               	movf	indf2,w,c
 24561  00DD34  6E14               	movwf	??_mem_cmp^0,c
 24562  00DD36  C018  FFF6         	movff	mem_cmp@s,tblptrl
 24563  00DD3A  C019  FFF7         	movff	mem_cmp@s+1,tblptrh
 24564  00DD3E  0E00               	movlw	low (__mediumconst shr (0+16))
 24565  00DD40  6EF8               	movwf	tblptru,c
 24566  00DD42  0E0F               	movlw	(high __ramtop+-1)
 24567  00DD44  64F7               	cpfsgt	tblptrh,c
 24568  00DD46  D003               	bra	u22897
 24569  00DD48  0008               	tblrd		*
 24570  00DD4A  50F5               	movf	tablat,w,c
 24571  00DD4C  D005               	bra	u22890
 24572  00DD4E                     u22897:
 24573  00DD4E  CFF6 FFE9          	movff	tblptrl,fsr0l
 24574  00DD52  CFF7 FFEA          	movff	tblptrh,fsr0h
 24575  00DD56  50EF               	movf	indf0,w,c
 24576  00DD58                     u22890:
 24577  00DD58  6E15               	movwf	(??_mem_cmp+1)^0,c
 24578  00DD5A  5015               	movf	(??_mem_cmp+1)^0,w,c
 24579  00DD5C  5C14               	subwf	??_mem_cmp^0,w,c
 24580  00DD5E  6E1A               	movwf	mem_cmp@r^0,c
 24581  00DD60  6A1B               	clrf	(mem_cmp@r+1)^0,c
 24582  00DD62  A0D8               	btfss	status,0,c
 24583  00DD64  061B               	decf	(mem_cmp@r+1)^0,f,c
 24584  00DD66  4A18               	infsnz	mem_cmp@s^0,f,c
 24585  00DD68  2A19               	incf	(mem_cmp@s+1)^0,f,c
 24586  00DD6A  4A16               	infsnz	mem_cmp@d^0,f,c
 24587  00DD6C  2A17               	incf	(mem_cmp@d+1)^0,f,c
 24588                           
 24589                           ;ff.c: 678: } while (--cnt && r == 0);
 24590  00DD6E  0612               	decf	mem_cmp@cnt^0,f,c
 24591  00DD70  A0D8               	btfss	status,0,c
 24592  00DD72  0613               	decf	(mem_cmp@cnt+1)^0,f,c
 24593  00DD74  5012               	movf	mem_cmp@cnt^0,w,c
 24594  00DD76  1013               	iorwf	(mem_cmp@cnt+1)^0,w,c
 24595  00DD78  B4D8               	btfsc	status,2,c
 24596  00DD7A  D004               	goto	u22910
 24597  00DD7C  501A               	movf	mem_cmp@r^0,w,c
 24598  00DD7E  101B               	iorwf	(mem_cmp@r+1)^0,w,c
 24599  00DD80  B4D8               	btfsc	status,2,c
 24600  00DD82  D7D3               	goto	l20879
 24601  00DD84                     u22910:
 24602                           
 24603                           ;ff.c: 680: return r;
 24604  00DD84  C01A  F00E         	movff	mem_cmp@r,?_mem_cmp
 24605  00DD88  C01B  F00F         	movff	mem_cmp@r+1,?_mem_cmp+1
 24606  00DD8C  0012               	return		;funcret
 24607  00DD8E                     __end_of_mem_cmp:
 24608                           	callstack 0
 24609                           
 24610 ;; *************** function _ld_word *****************
 24611 ;; Defined at:
 24612 ;;		line 572 in file "mcc_generated_files/fatfs/ff.c"
 24613 ;; Parameters:    Size  Location     Type
 24614 ;;  ptr             2   13[COMRAM] PTR const unsigned char 
 24615 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 24616 ;;		 -> NULL(0), 
 24617 ;; Auto vars:     Size  Location     Type
 24618 ;;  rv              2   18[COMRAM] unsigned short 
 24619 ;; Return value:  Size  Location     Type
 24620 ;;                  2   13[COMRAM] unsigned short 
 24621 ;; Registers used:
 24622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24623 ;; Tracked objects:
 24624 ;;		On entry : 0/1
 24625 ;;		On exit  : 0/0
 24626 ;;		Unchanged: 0/0
 24627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24628 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24629 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24630 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24631 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24632 ;;Total ram usage:        7 bytes
 24633 ;; Hardware stack levels used:    1
 24634 ;; Hardware stack levels required when called:    6
 24635 ;; This function calls:
 24636 ;;		Nothing
 24637 ;; This function is called by:
 24638 ;;		_get_fat
 24639 ;;		_ld_clust
 24640 ;;		_check_fs
 24641 ;;		_find_volume
 24642 ;; This function uses a non-reentrant model
 24643 ;;
 24644                           
 24645                           	psect	text78
 24646  00ED64                     __ptext78:
 24647                           	callstack 0
 24648  00ED64                     _ld_word:
 24649                           	callstack 20
 24650                           
 24651                           ;ff.c: 574: WORD rv;;ff.c: 576: rv = ptr[1];
 24652                           
 24653                           ;incstack = 0
 24654  00ED64  EE20 F001          	lfsr	2,1
 24655  00ED68  500E               	movf	ld_word@ptr^0,w,c
 24656  00ED6A  26D9               	addwf	fsr2l,f,c
 24657  00ED6C  500F               	movf	(ld_word@ptr+1)^0,w,c
 24658  00ED6E  22DA               	addwfc	fsr2h,f,c
 24659  00ED70  50DF               	movf	indf2,w,c
 24660  00ED72  6E10               	movwf	??_ld_word^0,c
 24661  00ED74  5010               	movf	??_ld_word^0,w,c
 24662  00ED76  6E13               	movwf	ld_word@rv^0,c
 24663  00ED78  6A14               	clrf	(ld_word@rv+1)^0,c
 24664                           
 24665                           ;ff.c: 577: rv = rv << 8 | ptr[0];
 24666  00ED7A  C00E  FFD9         	movff	ld_word@ptr,fsr2l
 24667  00ED7E  C00F  FFDA         	movff	ld_word@ptr+1,fsr2h
 24668  00ED82  50DF               	movf	indf2,w,c
 24669  00ED84  6E10               	movwf	??_ld_word^0,c
 24670  00ED86  5013               	movf	ld_word@rv^0,w,c
 24671  00ED88  6E11               	movwf	(??_ld_word+1)^0,c
 24672  00ED8A  5010               	movf	??_ld_word^0,w,c
 24673  00ED8C  6E13               	movwf	ld_word@rv^0,c
 24674  00ED8E  C011  F014         	movff	??_ld_word+1,ld_word@rv+1
 24675                           
 24676                           ;ff.c: 578: return rv;
 24677  00ED92  C013  F00E         	movff	ld_word@rv,?_ld_word
 24678  00ED96  C014  F00F         	movff	ld_word@rv+1,?_ld_word+1
 24679  00ED9A  0012               	return		;funcret
 24680  00ED9C                     __end_of_ld_word:
 24681                           	callstack 0
 24682                           
 24683 ;; *************** function ___lldiv *****************
 24684 ;; Defined at:
 24685 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\__lldiv.c"
 24686 ;; Parameters:    Size  Location     Type
 24687 ;;  dividend        4   13[COMRAM] unsigned long 
 24688 ;;  divisor         4   17[COMRAM] unsigned long 
 24689 ;; Auto vars:     Size  Location     Type
 24690 ;;  quotient        4   21[COMRAM] unsigned long 
 24691 ;;  counter         1   25[COMRAM] unsigned char 
 24692 ;; Return value:  Size  Location     Type
 24693 ;;                  4   13[COMRAM] unsigned long 
 24694 ;; Registers used:
 24695 ;;		wreg, status,2, status,0
 24696 ;; Tracked objects:
 24697 ;;		On entry : 3F/0
 24698 ;;		On exit  : 3F/0
 24699 ;;		Unchanged: 3F/0
 24700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24701 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24702 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24704 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24705 ;;Total ram usage:       13 bytes
 24706 ;; Hardware stack levels used:    1
 24707 ;; Hardware stack levels required when called:    6
 24708 ;; This function calls:
 24709 ;;		Nothing
 24710 ;; This function is called by:
 24711 ;;		_find_volume
 24712 ;; This function uses a non-reentrant model
 24713 ;;
 24714                           
 24715                           	psect	text79
 24716  00DB2E                     __ptext79:
 24717                           	callstack 0
 24718  00DB2E                     ___lldiv:
 24719                           	callstack 21
 24720                           
 24721                           ; BSR set to: 0
 24722                           
 24723                           ;incstack = 0
 24724  00DB2E  0E00               	movlw	0
 24725  00DB30  6E16               	movwf	___lldiv@quotient^0,c
 24726  00DB32  0E00               	movlw	0
 24727  00DB34  6E17               	movwf	(___lldiv@quotient+1)^0,c
 24728  00DB36  0E00               	movlw	0
 24729  00DB38  6E18               	movwf	(___lldiv@quotient+2)^0,c
 24730  00DB3A  0E00               	movlw	0
 24731  00DB3C  6E19               	movwf	(___lldiv@quotient+3)^0,c
 24732                           
 24733                           ; BSR set to: 0
 24734  00DB3E  5012               	movf	___lldiv@divisor^0,w,c
 24735  00DB40  1013               	iorwf	(___lldiv@divisor+1)^0,w,c
 24736  00DB42  1014               	iorwf	(___lldiv@divisor+2)^0,w,c
 24737  00DB44  1015               	iorwf	(___lldiv@divisor+3)^0,w,c
 24738  00DB46  B4D8               	btfsc	status,2,c
 24739  00DB48  D02A               	goto	l3674
 24740                           
 24741                           ; BSR set to: 0
 24742  00DB4A  0E01               	movlw	1
 24743  00DB4C  6E1A               	movwf	___lldiv@counter^0,c
 24744  00DB4E  D006               	goto	l22337
 24745  00DB50                     l22335:
 24746                           
 24747                           ; BSR set to: 0
 24748  00DB50  90D8               	bcf	status,0,c
 24749  00DB52  3612               	rlcf	___lldiv@divisor^0,f,c
 24750  00DB54  3613               	rlcf	(___lldiv@divisor+1)^0,f,c
 24751  00DB56  3614               	rlcf	(___lldiv@divisor+2)^0,f,c
 24752  00DB58  3615               	rlcf	(___lldiv@divisor+3)^0,f,c
 24753  00DB5A  2A1A               	incf	___lldiv@counter^0,f,c
 24754  00DB5C                     l22337:
 24755                           
 24756                           ; BSR set to: 0
 24757  00DB5C  AE15               	btfss	(___lldiv@divisor+3)^0,7,c
 24758  00DB5E  D7F8               	goto	l22335
 24759  00DB60                     u24960:
 24760                           
 24761                           ; BSR set to: 0
 24762  00DB60  90D8               	bcf	status,0,c
 24763  00DB62  3616               	rlcf	___lldiv@quotient^0,f,c
 24764  00DB64  3617               	rlcf	(___lldiv@quotient+1)^0,f,c
 24765  00DB66  3618               	rlcf	(___lldiv@quotient+2)^0,f,c
 24766  00DB68  3619               	rlcf	(___lldiv@quotient+3)^0,f,c
 24767                           
 24768                           ; BSR set to: 0
 24769  00DB6A  5012               	movf	___lldiv@divisor^0,w,c
 24770  00DB6C  5C0E               	subwf	___lldiv@dividend^0,w,c
 24771  00DB6E  5013               	movf	(___lldiv@divisor+1)^0,w,c
 24772  00DB70  580F               	subwfb	(___lldiv@dividend+1)^0,w,c
 24773  00DB72  5014               	movf	(___lldiv@divisor+2)^0,w,c
 24774  00DB74  5810               	subwfb	(___lldiv@dividend+2)^0,w,c
 24775  00DB76  5015               	movf	(___lldiv@divisor+3)^0,w,c
 24776  00DB78  5811               	subwfb	(___lldiv@dividend+3)^0,w,c
 24777  00DB7A  A0D8               	btfss	status,0,c
 24778  00DB7C  D009               	goto	l22347
 24779                           
 24780                           ; BSR set to: 0
 24781  00DB7E  5012               	movf	___lldiv@divisor^0,w,c
 24782  00DB80  5E0E               	subwf	___lldiv@dividend^0,f,c
 24783  00DB82  5013               	movf	(___lldiv@divisor+1)^0,w,c
 24784  00DB84  5A0F               	subwfb	(___lldiv@dividend+1)^0,f,c
 24785  00DB86  5014               	movf	(___lldiv@divisor+2)^0,w,c
 24786  00DB88  5A10               	subwfb	(___lldiv@dividend+2)^0,f,c
 24787  00DB8A  5015               	movf	(___lldiv@divisor+3)^0,w,c
 24788  00DB8C  5A11               	subwfb	(___lldiv@dividend+3)^0,f,c
 24789                           
 24790                           ; BSR set to: 0
 24791  00DB8E  8016               	bsf	___lldiv@quotient^0,0,c
 24792  00DB90                     l22347:
 24793                           
 24794                           ; BSR set to: 0
 24795  00DB90  90D8               	bcf	status,0,c
 24796  00DB92  3215               	rrcf	(___lldiv@divisor+3)^0,f,c
 24797  00DB94  3214               	rrcf	(___lldiv@divisor+2)^0,f,c
 24798  00DB96  3213               	rrcf	(___lldiv@divisor+1)^0,f,c
 24799  00DB98  3212               	rrcf	___lldiv@divisor^0,f,c
 24800                           
 24801                           ; BSR set to: 0
 24802  00DB9A  2E1A               	decfsz	___lldiv@counter^0,f,c
 24803  00DB9C  D7E1               	goto	u24960
 24804  00DB9E                     l3674:
 24805                           
 24806                           ; BSR set to: 0
 24807  00DB9E  C016  F00E         	movff	___lldiv@quotient,?___lldiv
 24808  00DBA2  C017  F00F         	movff	___lldiv@quotient+1,?___lldiv+1
 24809  00DBA6  C018  F010         	movff	___lldiv@quotient+2,?___lldiv+2
 24810  00DBAA  C019  F011         	movff	___lldiv@quotient+3,?___lldiv+3
 24811                           
 24812                           ; BSR set to: 0
 24813  00DBAE  0012               	return		;funcret
 24814  00DBB0                     __end_of___lldiv:
 24815                           	callstack 0
 24816                           
 24817 ;; *************** function _f_close *****************
 24818 ;; Defined at:
 24819 ;;		line 4012 in file "mcc_generated_files/fatfs/ff.c"
 24820 ;; Parameters:    Size  Location     Type
 24821 ;;  fp              2   66[BANK0 ] PTR struct .
 24822 ;;		 -> file(34), file@fatfs_demo$F388(34), 
 24823 ;; Auto vars:     Size  Location     Type
 24824 ;;  fs              2   68[BANK0 ] PTR struct .
 24825 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 24826 ;;  res             1   70[BANK0 ] enum E64
 24827 ;; Return value:  Size  Location     Type
 24828 ;;                  1    wreg      enum E64
 24829 ;; Registers used:
 24830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24831 ;; Tracked objects:
 24832 ;;		On entry : 3F/0
 24833 ;;		On exit  : 3F/0
 24834 ;;		Unchanged: 0/0
 24835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24836 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24837 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24839 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24840 ;;Total ram usage:        5 bytes
 24841 ;; Hardware stack levels used:    1
 24842 ;; Hardware stack levels required when called:   14
 24843 ;; This function calls:
 24844 ;;		_f_sync
 24845 ;;		_validate
 24846 ;; This function is called by:
 24847 ;;		_NormalProc
 24848 ;; This function uses a non-reentrant model
 24849 ;;
 24850                           
 24851                           	psect	text80
 24852  00EA00                     __ptext80:
 24853                           	callstack 0
 24854  00EA00                     _f_close:
 24855                           	callstack 15
 24856                           
 24857                           ; BSR set to: 0
 24858                           ;ff.c: 4016: FRESULT res;;ff.c: 4017: FATFS *fs;;ff.c: 4020: res = f_sync(fp);
 24859                           
 24860                           ; BSR set to: 0
 24861                           ;incstack = 0
 24862  00EA00  C0A2  F097         	movff	f_close@fp,f_sync@fp
 24863  00EA04  C0A3  F098         	movff	f_close@fp+1,f_sync@fp+1
 24864  00EA08  EC1D  F056         	call	_f_sync	;wreg free
 24865  00EA0C  6FA6               	movwf	f_close@res& (0+255),b
 24866                           
 24867                           ; BSR set to: 0
 24868                           ;ff.c: 4021: if (res == FR_OK)
 24869  00EA0E  51A6               	movf	f_close@res& (0+255),w,b
 24870  00EA10  A4D8               	btfss	status,2,c
 24871  00EA12  0012               	return	
 24872                           
 24873                           ; BSR set to: 0
 24874                           ;ff.c: 4023: {;ff.c: 4024: res = validate(&fp->obj, &fs);
 24875  00EA14  C0A2  F010         	movff	f_close@fp,validate@obj
 24876  00EA18  C0A3  F011         	movff	f_close@fp+1,validate@obj+1
 24877  00EA1C  0EA4               	movlw	low f_close@fs
 24878  00EA1E  6E12               	movwf	validate@rfs^0,c
 24879  00EA20  6A13               	clrf	(validate@rfs+1)^0,c
 24880  00EA22  ECF4  F064         	call	_validate	;wreg free
 24881  00EA26  0100               	movlb	0	; () banked
 24882  00EA28  6FA6               	movwf	f_close@res& (0+255),b
 24883                           
 24884                           ; BSR set to: 0
 24885                           ;ff.c: 4025: if (res == FR_OK) {
 24886  00EA2A  51A6               	movf	f_close@res& (0+255),w,b
 24887  00EA2C  A4D8               	btfss	status,2,c
 24888  00EA2E  0012               	return	
 24889                           
 24890                           ; BSR set to: 0
 24891                           ;ff.c: 4030: fp->obj.fs = 0;
 24892  00EA30  C0A2  FFD9         	movff	f_close@fp,fsr2l
 24893  00EA34  C0A3  FFDA         	movff	f_close@fp+1,fsr2h
 24894  00EA38  0E00               	movlw	0
 24895  00EA3A  6EDE               	movwf	postinc2,c
 24896  00EA3C  0E00               	movlw	0
 24897  00EA3E  6EDD               	movwf	postdec2,c
 24898                           
 24899                           ; BSR set to: 0
 24900  00EA40  0012               	return		;funcret
 24901  00EA42                     __end_of_f_close:
 24902                           	callstack 0
 24903                           
 24904 ;; *************** function _f_sync *****************
 24905 ;; Defined at:
 24906 ;;		line 3931 in file "mcc_generated_files/fatfs/ff.c"
 24907 ;; Parameters:    Size  Location     Type
 24908 ;;  fp              2   55[BANK0 ] PTR struct .
 24909 ;;		 -> file(34), file@fatfs_demo$F388(34), 
 24910 ;; Auto vars:     Size  Location     Type
 24911 ;;  tm              4   57[BANK0 ] unsigned long 
 24912 ;;  dir             2   64[BANK0 ] PTR unsigned char 
 24913 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 24914 ;;  fs              2   62[BANK0 ] PTR struct .
 24915 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 24916 ;;  res             1   61[BANK0 ] enum E64
 24917 ;; Return value:  Size  Location     Type
 24918 ;;                  1    wreg      enum E64
 24919 ;; Registers used:
 24920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 24921 ;; Tracked objects:
 24922 ;;		On entry : 3F/0
 24923 ;;		On exit  : 3F/0
 24924 ;;		Unchanged: 0/0
 24925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24926 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24927 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24929 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24930 ;;Total ram usage:       11 bytes
 24931 ;; Hardware stack levels used:    1
 24932 ;; Hardware stack levels required when called:   13
 24933 ;; This function calls:
 24934 ;;		_get_fattime
 24935 ;;		_move_window
 24936 ;;		_st_clust
 24937 ;;		_st_dword
 24938 ;;		_st_word
 24939 ;;		_sync_fs
 24940 ;;		_validate
 24941 ;; This function is called by:
 24942 ;;		_f_close
 24943 ;; This function uses a non-reentrant model
 24944 ;;
 24945                           
 24946                           	psect	text81
 24947  00AC3A                     __ptext81:
 24948                           	callstack 0
 24949  00AC3A                     _f_sync:
 24950                           	callstack 15
 24951                           
 24952                           ; BSR set to: 0
 24953                           ;ff.c: 3935: FRESULT res;;ff.c: 3936: FATFS *fs;;ff.c: 3937: DWORD tm;;ff.c: 3938: BYTE 
      +                          *dir;;ff.c: 3941: res = validate(&fp->obj, &fs);
 24954                           
 24955                           ; BSR set to: 0
 24956                           ;incstack = 0
 24957  00AC3A  C097  F010         	movff	f_sync@fp,validate@obj
 24958  00AC3E  C098  F011         	movff	f_sync@fp+1,validate@obj+1
 24959  00AC42  0E9E               	movlw	low f_sync@fs
 24960  00AC44  6E12               	movwf	validate@rfs^0,c
 24961  00AC46  6A13               	clrf	(validate@rfs+1)^0,c
 24962  00AC48  ECF4  F064         	call	_validate	;wreg free
 24963  00AC4C  0100               	movlb	0	; () banked
 24964  00AC4E  6F9D               	movwf	f_sync@res& (0+255),b
 24965                           
 24966                           ; BSR set to: 0
 24967                           ;ff.c: 3942: if (res == FR_OK) {
 24968  00AC50  519D               	movf	f_sync@res& (0+255),w,b
 24969  00AC52  A4D8               	btfss	status,2,c
 24970  00AC54  D0A6               	goto	l25427
 24971                           
 24972                           ; BSR set to: 0
 24973                           ;ff.c: 3943: if (fp->flag & 0x40) {
 24974  00AC56  EE20 F00E          	lfsr	2,14
 24975  00AC5A  5197               	movf	f_sync@fp& (0+255),w,b
 24976  00AC5C  26D9               	addwf	fsr2l,f,c
 24977  00AC5E  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 24978  00AC60  22DA               	addwfc	fsr2h,f,c
 24979  00AC62  ACDF               	btfss	indf2,6,c
 24980  00AC64  D09E               	goto	l25427
 24981                           
 24982                           ; BSR set to: 0
 24983                           ;ff.c: 3951: tm = get_fattime();
 24984  00AC66  ECD8  F070         	call	_get_fattime	;wreg free
 24985  00AC6A  C01F  F099         	movff	?_get_fattime,f_sync@tm
 24986  00AC6E  C020  F09A         	movff	?_get_fattime+1,f_sync@tm+1
 24987  00AC72  C021  F09B         	movff	?_get_fattime+2,f_sync@tm+2
 24988  00AC76  C022  F09C         	movff	?_get_fattime+3,f_sync@tm+3
 24989                           
 24990                           ;ff.c: 3983: {;ff.c: 3984: res = move_window(fs, fp->dir_sect);
 24991  00AC7A  C09E  F08C         	movff	f_sync@fs,move_window@fs
 24992  00AC7E  C09F  F08D         	movff	f_sync@fs+1,move_window@fs+1
 24993  00AC82  0100               	movlb	0	; () banked
 24994  00AC84  EE20 F01C          	lfsr	2,28
 24995  00AC88  5197               	movf	f_sync@fp& (0+255),w,b
 24996  00AC8A  26D9               	addwf	fsr2l,f,c
 24997  00AC8C  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 24998  00AC8E  22DA               	addwfc	fsr2h,f,c
 24999  00AC90  CFDE F08E          	movff	postinc2,move_window@sector
 25000  00AC94  CFDE F08F          	movff	postinc2,move_window@sector+1
 25001  00AC98  CFDE F090          	movff	postinc2,move_window@sector+2
 25002  00AC9C  CFDE F091          	movff	postinc2,move_window@sector+3
 25003  00ACA0  EC1B  F067         	call	_move_window	;wreg free
 25004  00ACA4  6F9D               	movwf	f_sync@res& (0+255),b
 25005                           
 25006                           ; BSR set to: 0
 25007                           ;ff.c: 3985: if (res == FR_OK) {
 25008  00ACA6  519D               	movf	f_sync@res& (0+255),w,b
 25009  00ACA8  A4D8               	btfss	status,2,c
 25010  00ACAA  D07B               	goto	l25427
 25011                           
 25012                           ; BSR set to: 0
 25013                           ;ff.c: 3986: dir = fp->dir_ptr;
 25014  00ACAC  EE20 F020          	lfsr	2,32
 25015  00ACB0  5197               	movf	f_sync@fp& (0+255),w,b
 25016  00ACB2  26D9               	addwf	fsr2l,f,c
 25017  00ACB4  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 25018  00ACB6  22DA               	addwfc	fsr2h,f,c
 25019  00ACB8  CFDE F0A0          	movff	postinc2,f_sync@dir
 25020  00ACBC  CFDD F0A1          	movff	postdec2,f_sync@dir+1
 25021                           
 25022                           ;ff.c: 3987: dir[11] |= 0x20;
 25023  00ACC0  EE20 F00B          	lfsr	2,11
 25024  00ACC4  51A0               	movf	f_sync@dir& (0+255),w,b
 25025  00ACC6  26D9               	addwf	fsr2l,f,c
 25026  00ACC8  51A1               	movf	(f_sync@dir+1)& (0+255),w,b
 25027  00ACCA  22DA               	addwfc	fsr2h,f,c
 25028  00ACCC  0E00               	movlw	0
 25029  00ACCE  8ADB               	bsf	plusw2,5,c
 25030                           
 25031                           ; BSR set to: 0
 25032                           ;ff.c: 3988: st_clust(fp->obj.fs, dir, fp->obj.sclust);
 25033  00ACD0  C097  FFD9         	movff	f_sync@fp,fsr2l
 25034  00ACD4  C098  FFDA         	movff	f_sync@fp+1,fsr2h
 25035  00ACD8  CFDE F012          	movff	postinc2,st_clust@fs
 25036  00ACDC  CFDD F013          	movff	postdec2,st_clust@fs+1
 25037  00ACE0  C0A0  F014         	movff	f_sync@dir,st_clust@dir
 25038  00ACE4  C0A1  F015         	movff	f_sync@dir+1,st_clust@dir+1
 25039  00ACE8  EE20 F006          	lfsr	2,6
 25040  00ACEC  5197               	movf	f_sync@fp& (0+255),w,b
 25041  00ACEE  26D9               	addwf	fsr2l,f,c
 25042  00ACF0  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 25043  00ACF2  22DA               	addwfc	fsr2h,f,c
 25044  00ACF4  CFDE F016          	movff	postinc2,st_clust@cl
 25045  00ACF8  CFDE F017          	movff	postinc2,st_clust@cl+1
 25046  00ACFC  CFDE F018          	movff	postinc2,st_clust@cl+2
 25047  00AD00  CFDE F019          	movff	postinc2,st_clust@cl+3
 25048  00AD04  EC21  F075         	call	_st_clust	;wreg free
 25049                           
 25050                           ;ff.c: 3989: st_dword(dir + 28, (DWORD)fp->obj.objsize);
 25051  00AD08  0E1C               	movlw	28
 25052  00AD0A  0100               	movlb	0	; () banked
 25053  00AD0C  25A0               	addwf	f_sync@dir& (0+255),w,b
 25054  00AD0E  6E24               	movwf	st_dword@ptr^0,c
 25055  00AD10  0E00               	movlw	0
 25056  00AD12  21A1               	addwfc	(f_sync@dir+1)& (0+255),w,b
 25057  00AD14  6E25               	movwf	(st_dword@ptr+1)^0,c
 25058  00AD16  EE20 F00A          	lfsr	2,10
 25059  00AD1A  5197               	movf	f_sync@fp& (0+255),w,b
 25060  00AD1C  26D9               	addwf	fsr2l,f,c
 25061  00AD1E  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 25062  00AD20  22DA               	addwfc	fsr2h,f,c
 25063  00AD22  CFDE F026          	movff	postinc2,st_dword@val
 25064  00AD26  CFDE F027          	movff	postinc2,st_dword@val+1
 25065  00AD2A  CFDE F028          	movff	postinc2,st_dword@val+2
 25066  00AD2E  CFDE F029          	movff	postinc2,st_dword@val+3
 25067  00AD32  EC6E  F06F         	call	_st_dword	;wreg free
 25068                           
 25069                           ;ff.c: 3990: st_dword(dir + 22, tm);
 25070  00AD36  0E16               	movlw	22
 25071  00AD38  0100               	movlb	0	; () banked
 25072  00AD3A  25A0               	addwf	f_sync@dir& (0+255),w,b
 25073  00AD3C  6E24               	movwf	st_dword@ptr^0,c
 25074  00AD3E  0E00               	movlw	0
 25075  00AD40  21A1               	addwfc	(f_sync@dir+1)& (0+255),w,b
 25076  00AD42  6E25               	movwf	(st_dword@ptr+1)^0,c
 25077  00AD44  C099  F026         	movff	f_sync@tm,st_dword@val
 25078  00AD48  C09A  F027         	movff	f_sync@tm+1,st_dword@val+1
 25079  00AD4C  C09B  F028         	movff	f_sync@tm+2,st_dword@val+2
 25080  00AD50  C09C  F029         	movff	f_sync@tm+3,st_dword@val+3
 25081  00AD54  EC6E  F06F         	call	_st_dword	;wreg free
 25082                           
 25083                           ;ff.c: 3991: st_word(dir + 18, 0);
 25084  00AD58  0E12               	movlw	18
 25085  00AD5A  0100               	movlb	0	; () banked
 25086  00AD5C  25A0               	addwf	f_sync@dir& (0+255),w,b
 25087  00AD5E  6E0E               	movwf	st_word@ptr^0,c
 25088  00AD60  0E00               	movlw	0
 25089  00AD62  21A1               	addwfc	(f_sync@dir+1)& (0+255),w,b
 25090  00AD64  6E0F               	movwf	(st_word@ptr+1)^0,c
 25091  00AD66  0E00               	movlw	0
 25092  00AD68  6E11               	movwf	(st_word@val+1)^0,c
 25093  00AD6A  0E00               	movlw	0
 25094  00AD6C  6E10               	movwf	st_word@val^0,c
 25095  00AD6E  ECAF  F078         	call	_st_word	;wreg free
 25096                           
 25097                           ;ff.c: 3992: fs->wflag = 1;
 25098  00AD72  0100               	movlb	0	; () banked
 25099  00AD74  EE20 F003          	lfsr	2,3
 25100  00AD78  519E               	movf	f_sync@fs& (0+255),w,b
 25101  00AD7A  26D9               	addwf	fsr2l,f,c
 25102  00AD7C  519F               	movf	(f_sync@fs+1)& (0+255),w,b
 25103  00AD7E  22DA               	addwfc	fsr2h,f,c
 25104  00AD80  0E01               	movlw	1
 25105  00AD82  6EDF               	movwf	indf2,c
 25106                           
 25107                           ; BSR set to: 0
 25108                           ;ff.c: 3993: res = sync_fs(fs);
 25109  00AD84  C09E  F08C         	movff	f_sync@fs,sync_fs@fs
 25110  00AD88  C09F  F08D         	movff	f_sync@fs+1,sync_fs@fs+1
 25111  00AD8C  EC1A  F050         	call	_sync_fs	;wreg free
 25112  00AD90  6F9D               	movwf	f_sync@res& (0+255),b
 25113                           
 25114                           ; BSR set to: 0
 25115                           ;ff.c: 3994: fp->flag &= (BYTE)~0x40;
 25116  00AD92  EE20 F00E          	lfsr	2,14
 25117  00AD96  5197               	movf	f_sync@fp& (0+255),w,b
 25118  00AD98  26D9               	addwf	fsr2l,f,c
 25119  00AD9A  5198               	movf	(f_sync@fp+1)& (0+255),w,b
 25120  00AD9C  22DA               	addwfc	fsr2h,f,c
 25121  00AD9E  0EBF               	movlw	191
 25122  00ADA0  16DF               	andwf	indf2,f,c
 25123  00ADA2                     l25427:
 25124                           
 25125                           ; BSR set to: 0
 25126                           ;ff.c: 3995: };ff.c: 3996: };ff.c: 3997: };ff.c: 3998: };ff.c: 4000: return res;
 25127  00ADA2  519D               	movf	f_sync@res& (0+255),w,b
 25128                           
 25129                           ; BSR set to: 0
 25130  00ADA4  0012               	return		;funcret
 25131  00ADA6                     __end_of_f_sync:
 25132                           	callstack 0
 25133                           
 25134 ;; *************** function _validate *****************
 25135 ;; Defined at:
 25136 ;;		line 3428 in file "mcc_generated_files/fatfs/ff.c"
 25137 ;; Parameters:    Size  Location     Type
 25138 ;;  obj             2   15[COMRAM] PTR struct .
 25139 ;;		 -> file(34), file@fatfs_demo$F388(34), 
 25140 ;;  rfs             2   17[COMRAM] PTR PTR struct .
 25141 ;;		 -> f_lseek@fs(2), f_close@fs(2), f_sync@fs(2), f_write@fs(2), 
 25142 ;;		 -> f_read@fs(2), 
 25143 ;; Auto vars:     Size  Location     Type
 25144 ;;  res             1   25[COMRAM] enum E64
 25145 ;; Return value:  Size  Location     Type
 25146 ;;                  1    wreg      enum E64
 25147 ;; Registers used:
 25148 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 25149 ;; Tracked objects:
 25150 ;;		On entry : 3F/0
 25151 ;;		On exit  : 0/0
 25152 ;;		Unchanged: 0/0
 25153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25154 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25155 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25156 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25157 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25158 ;;Total ram usage:       11 bytes
 25159 ;; Hardware stack levels used:    1
 25160 ;; Hardware stack levels required when called:    8
 25161 ;; This function calls:
 25162 ;;		_disk_status
 25163 ;; This function is called by:
 25164 ;;		_f_write
 25165 ;;		_f_sync
 25166 ;;		_f_close
 25167 ;; This function uses a non-reentrant model
 25168 ;;
 25169                           
 25170                           	psect	text82
 25171  00C9E8                     __ptext82:
 25172                           	callstack 0
 25173  00C9E8                     _validate:
 25174                           	callstack 20
 25175                           
 25176                           ; BSR set to: 0
 25177                           ;ff.c: 3433: FRESULT res = FR_INVALID_OBJECT;
 25178                           
 25179                           ; BSR set to: 0
 25180                           ;incstack = 0
 25181  00C9E8  0E09               	movlw	9
 25182  00C9EA  6E1A               	movwf	validate@res^0,c
 25183                           
 25184                           ; BSR set to: 0
 25185                           ;ff.c: 3436: if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {
 25186  00C9EC  5010               	movf	validate@obj^0,w,c
 25187  00C9EE  1011               	iorwf	(validate@obj+1)^0,w,c
 25188  00C9F0  B4D8               	btfsc	status,2,c
 25189  00C9F2  D040               	goto	l599
 25190                           
 25191                           ; BSR set to: 0
 25192  00C9F4  C010  FFD9         	movff	validate@obj,fsr2l
 25193  00C9F8  C011  FFDA         	movff	validate@obj+1,fsr2h
 25194  00C9FC  50DE               	movf	postinc2,w,c
 25195  00C9FE  10DE               	iorwf	postinc2,w,c
 25196  00CA00  B4D8               	btfsc	status,2,c
 25197  00CA02  D038               	goto	l599
 25198                           
 25199                           ; BSR set to: 0
 25200  00CA04  C010  FFD9         	movff	validate@obj,fsr2l
 25201  00CA08  C011  FFDA         	movff	validate@obj+1,fsr2h
 25202  00CA0C  CFDE F014          	movff	postinc2,??_validate
 25203  00CA10  CFDD F015          	movff	postdec2,??_validate+1
 25204  00CA14  C014  FFD9         	movff	??_validate,fsr2l
 25205  00CA18  C015  FFDA         	movff	??_validate+1,fsr2h
 25206  00CA1C  50DF               	movf	indf2,w,c
 25207  00CA1E  B4D8               	btfsc	status,2,c
 25208  00CA20  D029               	goto	l599
 25209                           
 25210                           ; BSR set to: 0
 25211  00CA22  C010  FFD9         	movff	validate@obj,fsr2l
 25212  00CA26  C011  FFDA         	movff	validate@obj+1,fsr2h
 25213  00CA2A  EE10 F005          	lfsr	1,5
 25214  00CA2E  50DE               	movf	postinc2,w,c
 25215  00CA30  26E1               	addwf	fsr1l,f,c
 25216  00CA32  50DD               	movf	postdec2,w,c
 25217  00CA34  22E2               	addwfc	fsr1h,f,c
 25218  00CA36  EE20 F002          	lfsr	2,2
 25219  00CA3A  5010               	movf	validate@obj^0,w,c
 25220  00CA3C  26D9               	addwf	fsr2l,f,c
 25221  00CA3E  5011               	movf	(validate@obj+1)^0,w,c
 25222  00CA40  22DA               	addwfc	fsr2h,f,c
 25223  00CA42  50E6               	movf	postinc1,w,c
 25224  00CA44  18DE               	xorwf	postinc2,w,c
 25225  00CA46  E116               	bnz	l599
 25226  00CA48  50E6               	movf	postinc1,w,c
 25227  00CA4A  18DE               	xorwf	postinc2,w,c
 25228  00CA4C  A4D8               	btfss	status,2,c
 25229  00CA4E  D012               	goto	l599
 25230                           
 25231                           ; BSR set to: 0
 25232                           ;ff.c: 3448: if (!(disk_status(obj->fs->pdrv) & 0x01)) {
 25233  00CA50  C010  FFD9         	movff	validate@obj,fsr2l
 25234  00CA54  C011  FFDA         	movff	validate@obj+1,fsr2h
 25235  00CA58  EE10 F001          	lfsr	1,1
 25236  00CA5C  50DE               	movf	postinc2,w,c
 25237  00CA5E  26E1               	addwf	fsr1l,f,c
 25238  00CA60  50DD               	movf	postdec2,w,c
 25239  00CA62  22E2               	addwfc	fsr1h,f,c
 25240  00CA64  50E7               	movf	indf1,w,c
 25241  00CA66  EC20  F076         	call	_disk_status
 25242  00CA6A  6E14               	movwf	??_validate^0,c
 25243  00CA6C  B014               	btfsc	??_validate^0,0,c
 25244  00CA6E  D002               	goto	l599
 25245                           
 25246                           ;ff.c: 3449: res = FR_OK;
 25247  00CA70  0E00               	movlw	0
 25248  00CA72  6E1A               	movwf	validate@res^0,c
 25249  00CA74                     l599:
 25250                           
 25251                           ;ff.c: 3450: };ff.c: 3452: };ff.c: 3453: *rfs = (res == FR_OK) ? obj->fs : 0;
 25252  00CA74  501A               	movf	validate@res^0,w,c
 25253  00CA76  B4D8               	btfsc	status,2,c
 25254  00CA78  D005               	goto	l25117
 25255  00CA7A  0E00               	movlw	0
 25256  00CA7C  6E18               	movwf	_validate$1212^0,c
 25257  00CA7E  0E00               	movlw	0
 25258  00CA80  6E19               	movwf	(_validate$1212+1)^0,c
 25259  00CA82  D008               	goto	l604
 25260  00CA84                     l25117:
 25261  00CA84  C010  FFD9         	movff	validate@obj,fsr2l
 25262  00CA88  C011  FFDA         	movff	validate@obj+1,fsr2h
 25263  00CA8C  CFDE F018          	movff	postinc2,_validate$1212
 25264  00CA90  CFDD F019          	movff	postdec2,_validate$1212+1
 25265  00CA94                     l604:
 25266  00CA94  C012  FFD9         	movff	validate@rfs,fsr2l
 25267  00CA98  C013  FFDA         	movff	validate@rfs+1,fsr2h
 25268  00CA9C  C018  FFDE         	movff	_validate$1212,postinc2
 25269  00CAA0  C019  FFDD         	movff	_validate$1212+1,postdec2
 25270                           
 25271                           ;ff.c: 3454: return res;
 25272  00CAA4  501A               	movf	validate@res^0,w,c
 25273  00CAA6  0012               	return		;funcret
 25274  00CAA8                     __end_of_validate:
 25275                           	callstack 0
 25276                           
 25277 ;; *************** function _disk_status *****************
 25278 ;; Defined at:
 25279 ;;		line 23 in file "mcc_generated_files/fatfs/diskio.c"
 25280 ;; Parameters:    Size  Location     Type
 25281 ;;  pdrv            1    wreg     unsigned char 
 25282 ;; Auto vars:     Size  Location     Type
 25283 ;;  pdrv            1   13[COMRAM] unsigned char 
 25284 ;;  stat            1   14[COMRAM] unsigned char 
 25285 ;; Return value:  Size  Location     Type
 25286 ;;                  1    wreg      unsigned char 
 25287 ;; Registers used:
 25288 ;;		wreg, status,2, status,0, cstack
 25289 ;; Tracked objects:
 25290 ;;		On entry : 3F/0
 25291 ;;		On exit  : 0/0
 25292 ;;		Unchanged: 0/0
 25293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25295 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25297 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25298 ;;Total ram usage:        2 bytes
 25299 ;; Hardware stack levels used:    1
 25300 ;; Hardware stack levels required when called:    7
 25301 ;; This function calls:
 25302 ;;		_SD_SPI_IsMediaInitialized
 25303 ;;		_SD_SPI_IsMediaPresent
 25304 ;;		_SD_SPI_IsWriteProtected
 25305 ;; This function is called by:
 25306 ;;		_find_volume
 25307 ;;		_validate
 25308 ;; This function uses a non-reentrant model
 25309 ;;
 25310                           
 25311                           	psect	text83
 25312  00EC40                     __ptext83:
 25313                           	callstack 0
 25314  00EC40                     _disk_status:
 25315                           	callstack 20
 25316                           
 25317                           ;incstack = 0
 25318                           ;disk_status@pdrv stored from wreg
 25319  00EC40  6E0E               	movwf	disk_status@pdrv^0,c
 25320                           
 25321                           ;diskio.c: 27: DSTATUS stat = 0x01;
 25322  00EC42  0E01               	movlw	1
 25323  00EC44  6E0F               	movwf	disk_status@stat^0,c
 25324                           
 25325                           ;diskio.c: 29: switch (pdrv) {
 25326  00EC46  D014               	goto	l21145
 25327  00EC48                     l21131:
 25328                           
 25329                           ;diskio.c: 32: if ( SD_SPI_IsMediaPresent() == 0)
 25330  00EC48  ECFD  F07B         	call	_SD_SPI_IsMediaPresent	;wreg free
 25331  00EC4C  0900               	iorlw	0
 25332  00EC4E  A4D8               	btfss	status,2,c
 25333  00EC50  D003               	goto	l21135
 25334                           
 25335                           ;diskio.c: 33: {;diskio.c: 34: stat = 0x02;
 25336  00EC52  0E02               	movlw	2
 25337  00EC54  6E0F               	movwf	disk_status@stat^0,c
 25338                           
 25339                           ;diskio.c: 35: }
 25340  00EC56  D005               	goto	l21139
 25341  00EC58                     l21135:
 25342                           
 25343                           ;diskio.c: 36: else if ( SD_SPI_IsMediaInitialized() == 1)
 25344  00EC58  EC05  F07B         	call	_SD_SPI_IsMediaInitialized	;wreg free
 25345  00EC5C  06E8               	decf	wreg,f,c
 25346  00EC5E  B4D8               	btfsc	status,2,c
 25347                           
 25348                           ; BSR set to: 3
 25349                           ;diskio.c: 37: {;diskio.c: 38: stat &= ~0x01;
 25350  00EC60  900F               	bcf	disk_status@stat^0,0,c
 25351  00EC62                     l21139:
 25352                           
 25353                           ;diskio.c: 39: };diskio.c: 41: if ( SD_SPI_IsWriteProtected() == 1)
 25354  00EC62  ECFB  F07B         	call	_SD_SPI_IsWriteProtected	;wreg free
 25355  00EC66  06E8               	decf	wreg,f,c
 25356  00EC68  A4D8               	btfss	status,2,c
 25357  00EC6A  D006               	goto	l21147
 25358                           
 25359                           ;diskio.c: 42: {;diskio.c: 43: stat |= 0x04;
 25360  00EC6C  840F               	bsf	disk_status@stat^0,2,c
 25361  00EC6E  D004               	goto	l21147
 25362  00EC70                     l21145:
 25363  00EC70  500E               	movf	disk_status@pdrv^0,w,c
 25364                           
 25365                           ; Switch size 1, requested type "simple"
 25366                           ; Number of cases is 1, Range of values is 0 to 0
 25367                           ; switch strategies available:
 25368                           ; Name         Instructions Cycles
 25369                           ; simple_byte            4     3 (average)
 25370                           ;	Chosen strategy is simple_byte
 25371  00EC72  0A00               	xorlw	0	; case 0
 25372  00EC74  B4D8               	btfsc	status,2,c
 25373  00EC76  D7E8               	goto	l21131
 25374  00EC78                     l21147:
 25375                           
 25376                           ;diskio.c: 51: return stat;
 25377  00EC78  500F               	movf	disk_status@stat^0,w,c
 25378  00EC7A  0012               	return		;funcret
 25379  00EC7C                     __end_of_disk_status:
 25380                           	callstack 0
 25381                           
 25382 ;; *************** function _SD_SPI_IsWriteProtected *****************
 25383 ;; Defined at:
 25384 ;;		line 475 in file "mcc_generated_files/sd_spi/sd_spi.c"
 25385 ;; Parameters:    Size  Location     Type
 25386 ;;		None
 25387 ;; Auto vars:     Size  Location     Type
 25388 ;;		None
 25389 ;; Return value:  Size  Location     Type
 25390 ;;                  1    wreg      unsigned char 
 25391 ;; Registers used:
 25392 ;;		wreg
 25393 ;; Tracked objects:
 25394 ;;		On entry : 0/0
 25395 ;;		On exit  : 0/0
 25396 ;;		Unchanged: 0/0
 25397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25402 ;;Total ram usage:        0 bytes
 25403 ;; Hardware stack levels used:    1
 25404 ;; Hardware stack levels required when called:    6
 25405 ;; This function calls:
 25406 ;;		Nothing
 25407 ;; This function is called by:
 25408 ;;		_disk_status
 25409 ;; This function uses a non-reentrant model
 25410 ;;
 25411                           
 25412                           	psect	text84
 25413  00F7F6                     __ptext84:
 25414                           	callstack 0
 25415  00F7F6                     _SD_SPI_IsWriteProtected:
 25416                           	callstack 20
 25417                           
 25418                           ;sd_spi.c: 477: return 0 ? 1 : 0;
 25419                           
 25420                           ;incstack = 0
 25421  00F7F6  0E00               	movlw	0
 25422  00F7F8  0012               	return		;funcret
 25423  00F7FA                     __end_of_SD_SPI_IsWriteProtected:
 25424                           	callstack 0
 25425                           
 25426 ;; *************** function _SD_SPI_IsMediaPresent *****************
 25427 ;; Defined at:
 25428 ;;		line 367 in file "mcc_generated_files/sd_spi/sd_spi.c"
 25429 ;; Parameters:    Size  Location     Type
 25430 ;;		None
 25431 ;; Auto vars:     Size  Location     Type
 25432 ;;		None
 25433 ;; Return value:  Size  Location     Type
 25434 ;;                  1    wreg      unsigned char 
 25435 ;; Registers used:
 25436 ;;		wreg
 25437 ;; Tracked objects:
 25438 ;;		On entry : 0/0
 25439 ;;		On exit  : 0/0
 25440 ;;		Unchanged: 0/0
 25441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25446 ;;Total ram usage:        0 bytes
 25447 ;; Hardware stack levels used:    1
 25448 ;; Hardware stack levels required when called:    6
 25449 ;; This function calls:
 25450 ;;		Nothing
 25451 ;; This function is called by:
 25452 ;;		_disk_status
 25453 ;; This function uses a non-reentrant model
 25454 ;;
 25455                           
 25456                           	psect	text85
 25457  00F7FA                     __ptext85:
 25458                           	callstack 0
 25459  00F7FA                     _SD_SPI_IsMediaPresent:
 25460                           	callstack 20
 25461                           
 25462                           ;sd_spi.c: 369: return 1 ? 1: 0;
 25463                           
 25464                           ;incstack = 0
 25465  00F7FA  0E01               	movlw	1
 25466  00F7FC  0012               	return		;funcret
 25467  00F7FE                     __end_of_SD_SPI_IsMediaPresent:
 25468                           	callstack 0
 25469                           
 25470 ;; *************** function _SD_SPI_IsMediaInitialized *****************
 25471 ;; Defined at:
 25472 ;;		line 470 in file "mcc_generated_files/sd_spi/sd_spi.c"
 25473 ;; Parameters:    Size  Location     Type
 25474 ;;		None
 25475 ;; Auto vars:     Size  Location     Type
 25476 ;;		None
 25477 ;; Return value:  Size  Location     Type
 25478 ;;                  1    wreg      unsigned char 
 25479 ;; Registers used:
 25480 ;;		wreg, status,2
 25481 ;; Tracked objects:
 25482 ;;		On entry : 0/0
 25483 ;;		On exit  : 3F/3
 25484 ;;		Unchanged: 0/0
 25485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25490 ;;Total ram usage:        0 bytes
 25491 ;; Hardware stack levels used:    1
 25492 ;; Hardware stack levels required when called:    6
 25493 ;; This function calls:
 25494 ;;		Nothing
 25495 ;; This function is called by:
 25496 ;;		_disk_status
 25497 ;; This function uses a non-reentrant model
 25498 ;;
 25499                           
 25500                           	psect	text86
 25501  00F60A                     __ptext86:
 25502                           	callstack 0
 25503  00F60A                     _SD_SPI_IsMediaInitialized:
 25504                           	callstack 20
 25505                           
 25506                           ;sd_spi.c: 472: return (mediaInformation.state != SD_STATE_NOT_INITIALIZED);
 25507                           
 25508                           ;incstack = 0
 25509  00F60A  0103               	movlb	3	; () banked
 25510  00F60C  51DA               	movf	(_mediaInformation+3)& (0+255),w,b
 25511  00F60E  B4D8               	btfsc	status,2,c
 25512  00F610  D002               	goto	u22440
 25513  00F612  0E01               	movlw	1
 25514  00F614  0012               	return	
 25515  00F616                     u22440:
 25516  00F616  0E00               	movlw	0
 25517                           
 25518                           ; BSR set to: 3
 25519  00F618  0012               	return		;funcret
 25520  00F61A                     __end_of_SD_SPI_IsMediaInitialized:
 25521                           	callstack 0
 25522                           
 25523 ;; *************** function _sync_fs *****************
 25524 ;; Defined at:
 25525 ;;		line 1087 in file "mcc_generated_files/fatfs/ff.c"
 25526 ;; Parameters:    Size  Location     Type
 25527 ;;  fs              2   44[BANK0 ] PTR struct .
 25528 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 25529 ;; Auto vars:     Size  Location     Type
 25530 ;;  res             1   54[BANK0 ] enum E64
 25531 ;; Return value:  Size  Location     Type
 25532 ;;                  1    wreg      enum E64
 25533 ;; Registers used:
 25534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25535 ;; Tracked objects:
 25536 ;;		On entry : 3F/0
 25537 ;;		On exit  : 3F/0
 25538 ;;		Unchanged: 0/0
 25539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25540 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25542 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25543 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25544 ;;Total ram usage:       11 bytes
 25545 ;; Hardware stack levels used:    1
 25546 ;; Hardware stack levels required when called:   12
 25547 ;; This function calls:
 25548 ;;		_disk_ioctl
 25549 ;;		_disk_write
 25550 ;;		_mem_set
 25551 ;;		_st_dword
 25552 ;;		_st_word
 25553 ;;		_sync_window
 25554 ;; This function is called by:
 25555 ;;		_f_sync
 25556 ;; This function uses a non-reentrant model
 25557 ;;
 25558                           
 25559                           	psect	text87
 25560  00A034                     __ptext87:
 25561                           	callstack 0
 25562  00A034                     _sync_fs:
 25563                           	callstack 15
 25564                           
 25565                           ; BSR set to: 0
 25566                           ;ff.c: 1091: FRESULT res;;ff.c: 1094: res = sync_window(fs);
 25567                           
 25568                           ; BSR set to: 3
 25569                           ;incstack = 0
 25570  00A034  C08C  F079         	movff	sync_fs@fs,sync_window@fs
 25571  00A038  C08D  F07A         	movff	sync_fs@fs+1,sync_window@fs+1
 25572  00A03C  ECA6  F054         	call	_sync_window	;wreg free
 25573  00A040  6F96               	movwf	sync_fs@res& (0+255),b
 25574                           
 25575                           ; BSR set to: 0
 25576                           ;ff.c: 1095: if (res == FR_OK) {
 25577  00A042  5196               	movf	sync_fs@res& (0+255),w,b
 25578  00A044  A4D8               	btfss	status,2,c
 25579  00A046  D0E6               	goto	l258
 25580                           
 25581                           ; BSR set to: 0
 25582                           ;ff.c: 1096: if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 25583  00A048  C08C  FFD9         	movff	sync_fs@fs,fsr2l
 25584  00A04C  C08D  FFDA         	movff	sync_fs@fs+1,fsr2h
 25585  00A050  0E03               	movlw	3
 25586  00A052  18DE               	xorwf	postinc2,w,c
 25587  00A054  A4D8               	btfss	status,2,c
 25588  00A056  D0C9               	goto	l21871
 25589                           
 25590                           ; BSR set to: 0
 25591  00A058  EE20 F004          	lfsr	2,4
 25592  00A05C  518C               	movf	sync_fs@fs& (0+255),w,b
 25593  00A05E  26D9               	addwf	fsr2l,f,c
 25594  00A060  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 25595  00A062  22DA               	addwfc	fsr2h,f,c
 25596  00A064  04DE               	decf	postinc2,w,c
 25597  00A066  A4D8               	btfss	status,2,c
 25598  00A068  D0C0               	goto	l21871
 25599                           
 25600                           ; BSR set to: 0
 25601                           ;ff.c: 1098: mem_set(fs->win, 0, ((UINT)512));
 25602  00A06A  0E2F               	movlw	47
 25603  00A06C  258C               	addwf	sync_fs@fs& (0+255),w,b
 25604  00A06E  6E0E               	movwf	mem_set@dst^0,c
 25605  00A070  0E00               	movlw	0
 25606  00A072  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 25607  00A074  6E0F               	movwf	(mem_set@dst+1)^0,c
 25608  00A076  0E00               	movlw	0
 25609  00A078  6E11               	movwf	(mem_set@val+1)^0,c
 25610  00A07A  0E00               	movlw	0
 25611  00A07C  6E10               	movwf	mem_set@val^0,c
 25612  00A07E  0E02               	movlw	2
 25613  00A080  6E13               	movwf	(mem_set@cnt+1)^0,c
 25614  00A082  0E00               	movlw	0
 25615  00A084  6E12               	movwf	mem_set@cnt^0,c
 25616  00A086  EC9B  F078         	call	_mem_set	;wreg free
 25617                           
 25618                           ;ff.c: 1099: st_word(fs->win + 510, 0xAA55);
 25619  00A08A  0E2D               	movlw	45
 25620  00A08C  0100               	movlb	0	; () banked
 25621  00A08E  258C               	addwf	sync_fs@fs& (0+255),w,b
 25622  00A090  6E0E               	movwf	st_word@ptr^0,c
 25623  00A092  0E02               	movlw	2
 25624  00A094  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 25625  00A096  6E0F               	movwf	(st_word@ptr+1)^0,c
 25626  00A098  0EAA               	movlw	170
 25627  00A09A  6E11               	movwf	(st_word@val+1)^0,c
 25628  00A09C  0E55               	movlw	85
 25629  00A09E  6E10               	movwf	st_word@val^0,c
 25630  00A0A0  ECAF  F078         	call	_st_word	;wreg free
 25631                           
 25632                           ;ff.c: 1100: st_dword(fs->win + 0, 0x41615252);
 25633  00A0A4  0E2F               	movlw	47
 25634  00A0A6  0100               	movlb	0	; () banked
 25635  00A0A8  258C               	addwf	sync_fs@fs& (0+255),w,b
 25636  00A0AA  6E24               	movwf	st_dword@ptr^0,c
 25637  00A0AC  0E00               	movlw	0
 25638  00A0AE  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 25639  00A0B0  6E25               	movwf	(st_dword@ptr+1)^0,c
 25640  00A0B2  0E52               	movlw	82
 25641  00A0B4  6E26               	movwf	st_dword@val^0,c
 25642  00A0B6  0E52               	movlw	82
 25643  00A0B8  6E27               	movwf	(st_dword@val+1)^0,c
 25644  00A0BA  0E61               	movlw	97
 25645  00A0BC  6E28               	movwf	(st_dword@val+2)^0,c
 25646  00A0BE  0E41               	movlw	65
 25647  00A0C0  6E29               	movwf	(st_dword@val+3)^0,c
 25648  00A0C2  EC6E  F06F         	call	_st_dword	;wreg free
 25649                           
 25650                           ;ff.c: 1101: st_dword(fs->win + 484, 0x61417272);
 25651  00A0C6  0E13               	movlw	19
 25652  00A0C8  0100               	movlb	0	; () banked
 25653  00A0CA  258C               	addwf	sync_fs@fs& (0+255),w,b
 25654  00A0CC  6E24               	movwf	st_dword@ptr^0,c
 25655  00A0CE  0E02               	movlw	2
 25656  00A0D0  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 25657  00A0D2  6E25               	movwf	(st_dword@ptr+1)^0,c
 25658  00A0D4  0E72               	movlw	114
 25659  00A0D6  6E26               	movwf	st_dword@val^0,c
 25660  00A0D8  0E72               	movlw	114
 25661  00A0DA  6E27               	movwf	(st_dword@val+1)^0,c
 25662  00A0DC  0E41               	movlw	65
 25663  00A0DE  6E28               	movwf	(st_dword@val+2)^0,c
 25664  00A0E0  0E61               	movlw	97
 25665  00A0E2  6E29               	movwf	(st_dword@val+3)^0,c
 25666  00A0E4  EC6E  F06F         	call	_st_dword	;wreg free
 25667                           
 25668                           ;ff.c: 1102: st_dword(fs->win + 488, fs->free_clst);
 25669  00A0E8  0E17               	movlw	23
 25670  00A0EA  0100               	movlb	0	; () banked
 25671  00A0EC  258C               	addwf	sync_fs@fs& (0+255),w,b
 25672  00A0EE  6E24               	movwf	st_dword@ptr^0,c
 25673  00A0F0  0E02               	movlw	2
 25674  00A0F2  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 25675  00A0F4  6E25               	movwf	(st_dword@ptr+1)^0,c
 25676  00A0F6  EE20 F00F          	lfsr	2,15
 25677  00A0FA  518C               	movf	sync_fs@fs& (0+255),w,b
 25678  00A0FC  26D9               	addwf	fsr2l,f,c
 25679  00A0FE  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 25680  00A100  22DA               	addwfc	fsr2h,f,c
 25681  00A102  CFDE F026          	movff	postinc2,st_dword@val
 25682  00A106  CFDE F027          	movff	postinc2,st_dword@val+1
 25683  00A10A  CFDE F028          	movff	postinc2,st_dword@val+2
 25684  00A10E  CFDE F029          	movff	postinc2,st_dword@val+3
 25685  00A112  EC6E  F06F         	call	_st_dword	;wreg free
 25686                           
 25687                           ;ff.c: 1103: st_dword(fs->win + 492, fs->last_clst);
 25688  00A116  0E1B               	movlw	27
 25689  00A118  0100               	movlb	0	; () banked
 25690  00A11A  258C               	addwf	sync_fs@fs& (0+255),w,b
 25691  00A11C  6E24               	movwf	st_dword@ptr^0,c
 25692  00A11E  0E02               	movlw	2
 25693  00A120  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 25694  00A122  6E25               	movwf	(st_dword@ptr+1)^0,c
 25695  00A124  EE20 F00B          	lfsr	2,11
 25696  00A128  518C               	movf	sync_fs@fs& (0+255),w,b
 25697  00A12A  26D9               	addwf	fsr2l,f,c
 25698  00A12C  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 25699  00A12E  22DA               	addwfc	fsr2h,f,c
 25700  00A130  CFDE F026          	movff	postinc2,st_dword@val
 25701  00A134  CFDE F027          	movff	postinc2,st_dword@val+1
 25702  00A138  CFDE F028          	movff	postinc2,st_dword@val+2
 25703  00A13C  CFDE F029          	movff	postinc2,st_dword@val+3
 25704  00A140  EC6E  F06F         	call	_st_dword	;wreg free
 25705                           
 25706                           ;ff.c: 1105: fs->winsect = fs->volbase + 1;
 25707  00A144  0100               	movlb	0	; () banked
 25708  00A146  EE20 F01B          	lfsr	2,27
 25709  00A14A  518C               	movf	sync_fs@fs& (0+255),w,b
 25710  00A14C  26D9               	addwf	fsr2l,f,c
 25711  00A14E  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 25712  00A150  22DA               	addwfc	fsr2h,f,c
 25713  00A152  CFDE F08E          	movff	postinc2,??_sync_fs
 25714  00A156  CFDE F08F          	movff	postinc2,??_sync_fs+1
 25715  00A15A  CFDE F090          	movff	postinc2,??_sync_fs+2
 25716  00A15E  CFDE F091          	movff	postinc2,??_sync_fs+3
 25717  00A162  0E01               	movlw	1
 25718  00A164  258E               	addwf	??_sync_fs& (0+255),w,b
 25719  00A166  6F92               	movwf	(??_sync_fs+4)& (0+255),b
 25720  00A168  0E00               	movlw	0
 25721  00A16A  218F               	addwfc	(??_sync_fs+1)& (0+255),w,b
 25722  00A16C  6F93               	movwf	(??_sync_fs+5)& (0+255),b
 25723  00A16E  0E00               	movlw	0
 25724  00A170  2190               	addwfc	(??_sync_fs+2)& (0+255),w,b
 25725  00A172  6F94               	movwf	(??_sync_fs+6)& (0+255),b
 25726  00A174  0E00               	movlw	0
 25727  00A176  2191               	addwfc	(??_sync_fs+3)& (0+255),w,b
 25728  00A178  6F95               	movwf	(??_sync_fs+7)& (0+255),b
 25729  00A17A  EE20 F02B          	lfsr	2,43
 25730  00A17E  518C               	movf	sync_fs@fs& (0+255),w,b
 25731  00A180  26D9               	addwf	fsr2l,f,c
 25732  00A182  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 25733  00A184  22DA               	addwfc	fsr2h,f,c
 25734  00A186  C092  FFDE         	movff	??_sync_fs+4,postinc2
 25735  00A18A  C093  FFDE         	movff	??_sync_fs+5,postinc2
 25736  00A18E  C094  FFDE         	movff	??_sync_fs+6,postinc2
 25737  00A192  C095  FFDE         	movff	??_sync_fs+7,postinc2
 25738                           
 25739                           ; BSR set to: 0
 25740                           ;ff.c: 1106: disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 25741  00A196  0E2F               	movlw	47
 25742  00A198  258C               	addwf	sync_fs@fs& (0+255),w,b
 25743  00A19A  6F71               	movwf	disk_write@buff& (0+255),b
 25744  00A19C  0E00               	movlw	0
 25745  00A19E  218D               	addwfc	(sync_fs@fs+1)& (0+255),w,b
 25746  00A1A0  6F72               	movwf	(disk_write@buff+1)& (0+255),b
 25747  00A1A2  EE20 F02B          	lfsr	2,43
 25748  00A1A6  518C               	movf	sync_fs@fs& (0+255),w,b
 25749  00A1A8  26D9               	addwf	fsr2l,f,c
 25750  00A1AA  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 25751  00A1AC  22DA               	addwfc	fsr2h,f,c
 25752  00A1AE  CFDE F073          	movff	postinc2,disk_write@sector
 25753  00A1B2  CFDE F074          	movff	postinc2,disk_write@sector+1
 25754  00A1B6  CFDE F075          	movff	postinc2,disk_write@sector+2
 25755  00A1BA  CFDE F076          	movff	postinc2,disk_write@sector+3
 25756  00A1BE  0E00               	movlw	0
 25757  00A1C0  6F78               	movwf	(disk_write@count+1)& (0+255),b
 25758  00A1C2  0E01               	movlw	1
 25759  00A1C4  6F77               	movwf	disk_write@count& (0+255),b
 25760  00A1C6  EE20 F001          	lfsr	2,1
 25761  00A1CA  518C               	movf	sync_fs@fs& (0+255),w,b
 25762  00A1CC  26D9               	addwf	fsr2l,f,c
 25763  00A1CE  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 25764  00A1D0  22DA               	addwfc	fsr2h,f,c
 25765  00A1D2  50DF               	movf	indf2,w,c
 25766  00A1D4  EC51  F074         	call	_disk_write
 25767                           
 25768                           ;ff.c: 1107: fs->fsi_flag = 0;
 25769  00A1D8  0100               	movlb	0	; () banked
 25770  00A1DA  EE20 F004          	lfsr	2,4
 25771  00A1DE  518C               	movf	sync_fs@fs& (0+255),w,b
 25772  00A1E0  26D9               	addwf	fsr2l,f,c
 25773  00A1E2  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 25774  00A1E4  22DA               	addwfc	fsr2h,f,c
 25775  00A1E6  0E00               	movlw	0
 25776  00A1E8  6EDF               	movwf	indf2,c
 25777  00A1EA                     l21871:
 25778                           
 25779                           ; BSR set to: 0
 25780                           ;ff.c: 1108: };ff.c: 1110: if (disk_ioctl(fs->pdrv, 0, 0) != RES_OK) res = FR_DISK_ERR;
 25781  00A1EA  0E00               	movlw	0
 25782  00A1EC  6E0E               	movwf	disk_ioctl@cmd^0,c
 25783  00A1EE  0E00               	movlw	0
 25784  00A1F0  6E0F               	movwf	disk_ioctl@buff^0,c
 25785  00A1F2  0E00               	movlw	0
 25786  00A1F4  6E10               	movwf	(disk_ioctl@buff+1)^0,c
 25787  00A1F6  EE20 F001          	lfsr	2,1
 25788  00A1FA  518C               	movf	sync_fs@fs& (0+255),w,b
 25789  00A1FC  26D9               	addwf	fsr2l,f,c
 25790  00A1FE  518D               	movf	(sync_fs@fs+1)& (0+255),w,b
 25791  00A200  22DA               	addwfc	fsr2h,f,c
 25792  00A202  50DF               	movf	indf2,w,c
 25793  00A204  ECA3  F07A         	call	_disk_ioctl
 25794  00A208  0900               	iorlw	0
 25795  00A20A  B4D8               	btfsc	status,2,c
 25796  00A20C  D003               	goto	l258
 25797  00A20E  0E01               	movlw	1
 25798  00A210  0100               	movlb	0	; () banked
 25799  00A212  6F96               	movwf	sync_fs@res& (0+255),b
 25800  00A214                     l258:
 25801                           
 25802                           ;ff.c: 1111: };ff.c: 1113: return res;
 25803  00A214  0100               	movlb	0	; () banked
 25804  00A216  5196               	movf	sync_fs@res& (0+255),w,b
 25805                           
 25806                           ; BSR set to: 0
 25807  00A218  0012               	return		;funcret
 25808  00A21A                     __end_of_sync_fs:
 25809                           	callstack 0
 25810                           
 25811 ;; *************** function _st_dword *****************
 25812 ;; Defined at:
 25813 ;;		line 616 in file "mcc_generated_files/fatfs/ff.c"
 25814 ;; Parameters:    Size  Location     Type
 25815 ;;  ptr             2   35[COMRAM] PTR unsigned char 
 25816 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 25817 ;;		 -> NULL(0), 
 25818 ;;  val             4   37[COMRAM] unsigned long 
 25819 ;; Auto vars:     Size  Location     Type
 25820 ;;		None
 25821 ;; Return value:  Size  Location     Type
 25822 ;;                  1    wreg      void 
 25823 ;; Registers used:
 25824 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25825 ;; Tracked objects:
 25826 ;;		On entry : 0/1
 25827 ;;		On exit  : 0/0
 25828 ;;		Unchanged: 0/0
 25829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25830 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25833 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25834 ;;Total ram usage:        6 bytes
 25835 ;; Hardware stack levels used:    1
 25836 ;; Hardware stack levels required when called:    6
 25837 ;; This function calls:
 25838 ;;		Nothing
 25839 ;; This function is called by:
 25840 ;;		_sync_fs
 25841 ;;		_put_fat
 25842 ;;		_f_open
 25843 ;;		_f_sync
 25844 ;; This function uses a non-reentrant model
 25845 ;;
 25846                           
 25847                           	psect	text88
 25848  00DEDC                     __ptext88:
 25849                           	callstack 0
 25850  00DEDC                     _st_dword:
 25851                           	callstack 20
 25852                           
 25853                           ;ff.c: 618: *ptr++ = (BYTE)val; val >>= 8;
 25854                           
 25855                           ; BSR set to: 0
 25856                           ;incstack = 0
 25857  00DEDC  C024  FFD9         	movff	st_dword@ptr,fsr2l
 25858  00DEE0  C025  FFDA         	movff	st_dword@ptr+1,fsr2h
 25859  00DEE4  C026  FFDF         	movff	st_dword@val,indf2
 25860  00DEE8  4A24               	infsnz	st_dword@ptr^0,f,c
 25861  00DEEA  2A25               	incf	(st_dword@ptr+1)^0,f,c
 25862  00DEEC  5027               	movf	(st_dword@val+1)^0,w,c
 25863  00DEEE  6E26               	movwf	st_dword@val^0,c
 25864  00DEF0  5028               	movf	(st_dword@val+2)^0,w,c
 25865  00DEF2  6E27               	movwf	(st_dword@val+1)^0,c
 25866  00DEF4  5029               	movf	(st_dword@val+3)^0,w,c
 25867  00DEF6  6E28               	movwf	(st_dword@val+2)^0,c
 25868  00DEF8  6A29               	clrf	(st_dword@val+3)^0,c
 25869                           
 25870                           ;ff.c: 619: *ptr++ = (BYTE)val; val >>= 8;
 25871  00DEFA  C024  FFD9         	movff	st_dword@ptr,fsr2l
 25872  00DEFE  C025  FFDA         	movff	st_dword@ptr+1,fsr2h
 25873  00DF02  C026  FFDF         	movff	st_dword@val,indf2
 25874  00DF06  4A24               	infsnz	st_dword@ptr^0,f,c
 25875  00DF08  2A25               	incf	(st_dword@ptr+1)^0,f,c
 25876  00DF0A  5027               	movf	(st_dword@val+1)^0,w,c
 25877  00DF0C  6E26               	movwf	st_dword@val^0,c
 25878  00DF0E  5028               	movf	(st_dword@val+2)^0,w,c
 25879  00DF10  6E27               	movwf	(st_dword@val+1)^0,c
 25880  00DF12  5029               	movf	(st_dword@val+3)^0,w,c
 25881  00DF14  6E28               	movwf	(st_dword@val+2)^0,c
 25882  00DF16  6A29               	clrf	(st_dword@val+3)^0,c
 25883                           
 25884                           ;ff.c: 620: *ptr++ = (BYTE)val; val >>= 8;
 25885  00DF18  C024  FFD9         	movff	st_dword@ptr,fsr2l
 25886  00DF1C  C025  FFDA         	movff	st_dword@ptr+1,fsr2h
 25887  00DF20  C026  FFDF         	movff	st_dword@val,indf2
 25888  00DF24  4A24               	infsnz	st_dword@ptr^0,f,c
 25889  00DF26  2A25               	incf	(st_dword@ptr+1)^0,f,c
 25890  00DF28  5027               	movf	(st_dword@val+1)^0,w,c
 25891  00DF2A  6E26               	movwf	st_dword@val^0,c
 25892  00DF2C  5028               	movf	(st_dword@val+2)^0,w,c
 25893  00DF2E  6E27               	movwf	(st_dword@val+1)^0,c
 25894  00DF30  5029               	movf	(st_dword@val+3)^0,w,c
 25895  00DF32  6E28               	movwf	(st_dword@val+2)^0,c
 25896  00DF34  6A29               	clrf	(st_dword@val+3)^0,c
 25897                           
 25898                           ;ff.c: 621: *ptr++ = (BYTE)val;
 25899  00DF36  C024  FFD9         	movff	st_dword@ptr,fsr2l
 25900  00DF3A  C025  FFDA         	movff	st_dword@ptr+1,fsr2h
 25901  00DF3E  C026  FFDF         	movff	st_dword@val,indf2
 25902  00DF42  4A24               	infsnz	st_dword@ptr^0,f,c
 25903  00DF44  2A25               	incf	(st_dword@ptr+1)^0,f,c
 25904  00DF46  0012               	return		;funcret
 25905  00DF48                     __end_of_st_dword:
 25906                           	callstack 0
 25907                           
 25908 ;; *************** function _mem_set *****************
 25909 ;; Defined at:
 25910 ;;		line 660 in file "mcc_generated_files/fatfs/ff.c"
 25911 ;; Parameters:    Size  Location     Type
 25912 ;;  dst             2   13[COMRAM] PTR void 
 25913 ;;		 -> drive(559), dj.fn(12), f_open@dj(40), drive@fatfs_demo$F369(559), 
 25914 ;;		 -> NULL(0), 
 25915 ;;  val             2   15[COMRAM] int 
 25916 ;;  cnt             2   17[COMRAM] unsigned int 
 25917 ;; Auto vars:     Size  Location     Type
 25918 ;;  d               2   19[COMRAM] PTR unsigned char 
 25919 ;;		 -> drive(559), dj.fn(12), f_open@dj(40), drive@fatfs_demo$F369(559), 
 25920 ;;		 -> NULL(0), 
 25921 ;; Return value:  Size  Location     Type
 25922 ;;                  1    wreg      void 
 25923 ;; Registers used:
 25924 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25925 ;; Tracked objects:
 25926 ;;		On entry : 3E/0
 25927 ;;		On exit  : 3E/0
 25928 ;;		Unchanged: 3E/0
 25929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25930 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25931 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25933 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25934 ;;Total ram usage:        8 bytes
 25935 ;; Hardware stack levels used:    1
 25936 ;; Hardware stack levels required when called:    6
 25937 ;; This function calls:
 25938 ;;		Nothing
 25939 ;; This function is called by:
 25940 ;;		_sync_fs
 25941 ;;		_dir_clear
 25942 ;;		_dir_register
 25943 ;;		_create_name
 25944 ;; This function uses a non-reentrant model
 25945 ;;
 25946                           
 25947                           	psect	text89
 25948  00F136                     __ptext89:
 25949                           	callstack 0
 25950  00F136                     _mem_set:
 25951                           	callstack 18
 25952                           
 25953                           ;ff.c: 662: BYTE *d = (BYTE*)dst;
 25954                           
 25955                           ;incstack = 0
 25956  00F136  C00E  F014         	movff	mem_set@dst,mem_set@d
 25957  00F13A  C00F  F015         	movff	mem_set@dst+1,mem_set@d+1
 25958  00F13E                     l19867:
 25959                           
 25960                           ;ff.c: 665: *d++ = (BYTE)val;
 25961  00F13E  C014  FFD9         	movff	mem_set@d,fsr2l
 25962  00F142  C015  FFDA         	movff	mem_set@d+1,fsr2h
 25963  00F146  C010  FFDF         	movff	mem_set@val,indf2
 25964  00F14A  4A14               	infsnz	mem_set@d^0,f,c
 25965  00F14C  2A15               	incf	(mem_set@d+1)^0,f,c
 25966                           
 25967                           ;ff.c: 666: } while (--cnt);
 25968  00F14E  0612               	decf	mem_set@cnt^0,f,c
 25969  00F150  A0D8               	btfss	status,0,c
 25970  00F152  0613               	decf	(mem_set@cnt+1)^0,f,c
 25971  00F154  5012               	movf	mem_set@cnt^0,w,c
 25972  00F156  1013               	iorwf	(mem_set@cnt+1)^0,w,c
 25973  00F158  B4D8               	btfsc	status,2,c
 25974  00F15A  0012               	return	
 25975  00F15C  D7F0               	goto	l19867
 25976  00F15E                     __end_of_mem_set:
 25977                           	callstack 0
 25978                           
 25979 ;; *************** function _disk_ioctl *****************
 25980 ;; Defined at:
 25981 ;;		line 158 in file "mcc_generated_files/fatfs/diskio.c"
 25982 ;; Parameters:    Size  Location     Type
 25983 ;;  pdrv            1    wreg     unsigned char 
 25984 ;;  cmd             1   13[COMRAM] unsigned char 
 25985 ;;  buff            2   14[COMRAM] PTR void 
 25986 ;;		 -> NULL(0), 
 25987 ;; Auto vars:     Size  Location     Type
 25988 ;;  pdrv            1   16[COMRAM] unsigned char 
 25989 ;;  res             1    0        enum E10
 25990 ;; Return value:  Size  Location     Type
 25991 ;;                  1    wreg      enum E203
 25992 ;; Registers used:
 25993 ;;		wreg, status,2, status,0
 25994 ;; Tracked objects:
 25995 ;;		On entry : 3F/0
 25996 ;;		On exit  : 0/0
 25997 ;;		Unchanged: 0/0
 25998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25999 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26000 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26002 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26003 ;;Total ram usage:        5 bytes
 26004 ;; Hardware stack levels used:    1
 26005 ;; Hardware stack levels required when called:    6
 26006 ;; This function calls:
 26007 ;;		Nothing
 26008 ;; This function is called by:
 26009 ;;		_sync_fs
 26010 ;; This function uses a non-reentrant model
 26011 ;;
 26012                           
 26013                           	psect	text90
 26014  00F546                     __ptext90:
 26015                           	callstack 0
 26016  00F546                     _disk_ioctl:
 26017                           	callstack 20
 26018                           
 26019                           ;incstack = 0
 26020                           ;disk_ioctl@pdrv stored from wreg
 26021  00F546  6E11               	movwf	disk_ioctl@pdrv^0,c
 26022                           
 26023                           ;diskio.c: 166: switch (pdrv) {
 26024  00F548  D002               	goto	l20955
 26025  00F54A                     l874:
 26026                           
 26027                           ;diskio.c: 168: return res;
 26028  00F54A  0E00               	movlw	0
 26029  00F54C  0012               	return	
 26030  00F54E                     l20955:
 26031  00F54E  5011               	movf	disk_ioctl@pdrv^0,w,c
 26032                           
 26033                           ; Switch size 1, requested type "simple"
 26034                           ; Number of cases is 1, Range of values is 0 to 0
 26035                           ; switch strategies available:
 26036                           ; Name         Instructions Cycles
 26037                           ; simple_byte            4     3 (average)
 26038                           ;	Chosen strategy is simple_byte
 26039  00F550  0A00               	xorlw	0	; case 0
 26040  00F552  B4D8               	btfsc	status,2,c
 26041  00F554  D7FA               	goto	l874
 26042                           
 26043                           ;diskio.c: 174: return RES_PARERR;
 26044  00F556  0E04               	movlw	4
 26045  00F558  0012               	return		;funcret
 26046  00F55A                     __end_of_disk_ioctl:
 26047                           	callstack 0
 26048                           
 26049 ;; *************** function _st_clust *****************
 26050 ;; Defined at:
 26051 ;;		line 1842 in file "mcc_generated_files/fatfs/ff.c"
 26052 ;; Parameters:    Size  Location     Type
 26053 ;;  fs              2   17[COMRAM] PTR struct .
 26054 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 26055 ;;  dir             2   19[COMRAM] PTR unsigned char 
 26056 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 26057 ;;  cl              4   21[COMRAM] unsigned long 
 26058 ;; Auto vars:     Size  Location     Type
 26059 ;;		None
 26060 ;; Return value:  Size  Location     Type
 26061 ;;                  1    wreg      void 
 26062 ;; Registers used:
 26063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26064 ;; Tracked objects:
 26065 ;;		On entry : 3E/1
 26066 ;;		On exit  : 0/0
 26067 ;;		Unchanged: 0/0
 26068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26069 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26071 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26072 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26073 ;;Total ram usage:        9 bytes
 26074 ;; Hardware stack levels used:    1
 26075 ;; Hardware stack levels required when called:    7
 26076 ;; This function calls:
 26077 ;;		_st_word
 26078 ;; This function is called by:
 26079 ;;		_f_open
 26080 ;;		_f_sync
 26081 ;; This function uses a non-reentrant model
 26082 ;;
 26083                           
 26084                           	psect	text91
 26085  00EA42                     __ptext91:
 26086                           	callstack 0
 26087  00EA42                     _st_clust:
 26088                           	callstack 21
 26089                           
 26090                           ;ff.c: 1848: st_word(dir + 26, (WORD)cl);
 26091                           
 26092                           ;incstack = 0
 26093  00EA42  0E1A               	movlw	26
 26094  00EA44  2414               	addwf	st_clust@dir^0,w,c
 26095  00EA46  6E0E               	movwf	st_word@ptr^0,c
 26096  00EA48  0E00               	movlw	0
 26097  00EA4A  2015               	addwfc	(st_clust@dir+1)^0,w,c
 26098  00EA4C  6E0F               	movwf	(st_word@ptr+1)^0,c
 26099  00EA4E  C016  F010         	movff	st_clust@cl,st_word@val
 26100  00EA52  C017  F011         	movff	st_clust@cl+1,st_word@val+1
 26101  00EA56  ECAF  F078         	call	_st_word	;wreg free
 26102                           
 26103                           ;ff.c: 1849: if (fs->fs_type == 3) {
 26104  00EA5A  C012  FFD9         	movff	st_clust@fs,fsr2l
 26105  00EA5E  C013  FFDA         	movff	st_clust@fs+1,fsr2h
 26106  00EA62  0E03               	movlw	3
 26107  00EA64  18DE               	xorwf	postinc2,w,c
 26108  00EA66  A4D8               	btfss	status,2,c
 26109  00EA68  0012               	return	
 26110                           
 26111                           ;ff.c: 1850: st_word(dir + 20, (WORD)(cl >> 16));
 26112  00EA6A  0E14               	movlw	20
 26113  00EA6C  2414               	addwf	st_clust@dir^0,w,c
 26114  00EA6E  6E0E               	movwf	st_word@ptr^0,c
 26115  00EA70  0E00               	movlw	0
 26116  00EA72  2015               	addwfc	(st_clust@dir+1)^0,w,c
 26117  00EA74  6E0F               	movwf	(st_word@ptr+1)^0,c
 26118  00EA76  C018  F010         	movff	st_clust@cl+2,st_word@val
 26119  00EA7A  C019  F011         	movff	st_clust@cl+3,st_word@val+1
 26120  00EA7E  ECAF  F078         	call	_st_word	;wreg free
 26121  00EA82  0012               	return		;funcret
 26122  00EA84                     __end_of_st_clust:
 26123                           	callstack 0
 26124                           
 26125 ;; *************** function _st_word *****************
 26126 ;; Defined at:
 26127 ;;		line 610 in file "mcc_generated_files/fatfs/ff.c"
 26128 ;; Parameters:    Size  Location     Type
 26129 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 26130 ;;		 -> drive.win(512), drive.win(512), drive(559), drive@fatfs_demo$F369(559), 
 26131 ;;		 -> NULL(0), 
 26132 ;;  val             2   15[COMRAM] unsigned short 
 26133 ;; Auto vars:     Size  Location     Type
 26134 ;;		None
 26135 ;; Return value:  Size  Location     Type
 26136 ;;                  1    wreg      void 
 26137 ;; Registers used:
 26138 ;;		fsr2l, fsr2h, status,2, status,0
 26139 ;; Tracked objects:
 26140 ;;		On entry : 0/0
 26141 ;;		On exit  : 0/0
 26142 ;;		Unchanged: 0/0
 26143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26144 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26147 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26148 ;;Total ram usage:        4 bytes
 26149 ;; Hardware stack levels used:    1
 26150 ;; Hardware stack levels required when called:    6
 26151 ;; This function calls:
 26152 ;;		Nothing
 26153 ;; This function is called by:
 26154 ;;		_sync_fs
 26155 ;;		_put_fat
 26156 ;;		_st_clust
 26157 ;;		_f_sync
 26158 ;; This function uses a non-reentrant model
 26159 ;;
 26160                           
 26161                           	psect	text92
 26162  00F15E                     __ptext92:
 26163                           	callstack 0
 26164  00F15E                     _st_word:
 26165                           	callstack 20
 26166                           
 26167                           ;ff.c: 612: *ptr++ = (BYTE)val; val >>= 8;
 26168                           
 26169                           ;incstack = 0
 26170  00F15E  C00E  FFD9         	movff	st_word@ptr,fsr2l
 26171  00F162  C00F  FFDA         	movff	st_word@ptr+1,fsr2h
 26172  00F166  C010  FFDF         	movff	st_word@val,indf2
 26173  00F16A  4A0E               	infsnz	st_word@ptr^0,f,c
 26174  00F16C  2A0F               	incf	(st_word@ptr+1)^0,f,c
 26175  00F16E  C011  F010         	movff	st_word@val+1,st_word@val
 26176  00F172  6A11               	clrf	(st_word@val+1)^0,c
 26177                           
 26178                           ;ff.c: 613: *ptr++ = (BYTE)val;
 26179  00F174  C00E  FFD9         	movff	st_word@ptr,fsr2l
 26180  00F178  C00F  FFDA         	movff	st_word@ptr+1,fsr2h
 26181  00F17C  C010  FFDF         	movff	st_word@val,indf2
 26182  00F180  4A0E               	infsnz	st_word@ptr^0,f,c
 26183  00F182  2A0F               	incf	(st_word@ptr+1)^0,f,c
 26184  00F184  0012               	return		;funcret
 26185  00F186                     __end_of_st_word:
 26186                           	callstack 0
 26187                           
 26188 ;; *************** function _move_window *****************
 26189 ;; Defined at:
 26190 ;;		line 1056 in file "mcc_generated_files/fatfs/ff.c"
 26191 ;; Parameters:    Size  Location     Type
 26192 ;;  fs              2   44[BANK0 ] PTR struct .
 26193 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 26194 ;;  sector          4   46[BANK0 ] unsigned long 
 26195 ;; Auto vars:     Size  Location     Type
 26196 ;;  res             1   54[BANK0 ] enum E64
 26197 ;; Return value:  Size  Location     Type
 26198 ;;                  1    wreg      enum E64
 26199 ;; Registers used:
 26200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26201 ;; Tracked objects:
 26202 ;;		On entry : 3E/0
 26203 ;;		On exit  : 3F/0
 26204 ;;		Unchanged: 0/0
 26205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26206 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26208 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26209 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26210 ;;Total ram usage:       11 bytes
 26211 ;; Hardware stack levels used:    1
 26212 ;; Hardware stack levels required when called:   12
 26213 ;; This function calls:
 26214 ;;		_disk_read
 26215 ;;		_sync_window
 26216 ;; This function is called by:
 26217 ;;		_get_fat
 26218 ;;		_put_fat
 26219 ;;		_dir_alloc
 26220 ;;		_dir_find
 26221 ;;		_dir_register
 26222 ;;		_check_fs
 26223 ;;		_find_volume
 26224 ;;		_f_open
 26225 ;;		_f_write
 26226 ;;		_f_sync
 26227 ;; This function uses a non-reentrant model
 26228 ;;
 26229                           
 26230                           	psect	text93
 26231  00CE36                     __ptext93:
 26232                           	callstack 0
 26233  00CE36                     _move_window:
 26234                           	callstack 16
 26235                           
 26236                           ;ff.c: 1061: FRESULT res = FR_OK;
 26237                           
 26238                           ;incstack = 0
 26239  00CE36  0E00               	movlw	0
 26240  00CE38  0100               	movlb	0	; () banked
 26241  00CE3A  6F96               	movwf	move_window@res& (0+255),b
 26242                           
 26243                           ; BSR set to: 0
 26244                           ;ff.c: 1064: if (sector != fs->winsect) {
 26245  00CE3C  EE20 F02B          	lfsr	2,43
 26246  00CE40  518C               	movf	move_window@fs& (0+255),w,b
 26247  00CE42  26D9               	addwf	fsr2l,f,c
 26248  00CE44  518D               	movf	(move_window@fs+1)& (0+255),w,b
 26249  00CE46  22DA               	addwfc	fsr2h,f,c
 26250  00CE48  518E               	movf	move_window@sector& (0+255),w,b
 26251  00CE4A  18DE               	xorwf	postinc2,w,c
 26252  00CE4C  E10A               	bnz	u20760
 26253  00CE4E  518F               	movf	(move_window@sector+1)& (0+255),w,b
 26254  00CE50  18DE               	xorwf	postinc2,w,c
 26255  00CE52  E107               	bnz	u20760
 26256  00CE54  5190               	movf	(move_window@sector+2)& (0+255),w,b
 26257  00CE56  18DE               	xorwf	postinc2,w,c
 26258  00CE58  E104               	bnz	u20760
 26259  00CE5A  5191               	movf	(move_window@sector+3)& (0+255),w,b
 26260  00CE5C  18DE               	xorwf	postinc2,w,c
 26261  00CE5E  B4D8               	btfsc	status,2,c
 26262  00CE60  D03E               	goto	l19403
 26263  00CE62                     u20760:
 26264                           
 26265                           ; BSR set to: 0
 26266                           ;ff.c: 1066: res = sync_window(fs);
 26267  00CE62  C08C  F079         	movff	move_window@fs,sync_window@fs
 26268  00CE66  C08D  F07A         	movff	move_window@fs+1,sync_window@fs+1
 26269  00CE6A  ECA6  F054         	call	_sync_window	;wreg free
 26270  00CE6E  6F96               	movwf	move_window@res& (0+255),b
 26271                           
 26272                           ; BSR set to: 0
 26273                           ;ff.c: 1068: if (res == FR_OK) {
 26274  00CE70  5196               	movf	move_window@res& (0+255),w,b
 26275  00CE72  A4D8               	btfss	status,2,c
 26276  00CE74  D034               	goto	l19403
 26277                           
 26278                           ; BSR set to: 0
 26279                           ;ff.c: 1069: if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 26280  00CE76  0E2F               	movlw	47
 26281  00CE78  258C               	addwf	move_window@fs& (0+255),w,b
 26282  00CE7A  6F71               	movwf	disk_read@buff& (0+255),b
 26283  00CE7C  0E00               	movlw	0
 26284  00CE7E  218D               	addwfc	(move_window@fs+1)& (0+255),w,b
 26285  00CE80  6F72               	movwf	(disk_read@buff+1)& (0+255),b
 26286  00CE82  C08E  F073         	movff	move_window@sector,disk_read@sector
 26287  00CE86  C08F  F074         	movff	move_window@sector+1,disk_read@sector+1
 26288  00CE8A  C090  F075         	movff	move_window@sector+2,disk_read@sector+2
 26289  00CE8E  C091  F076         	movff	move_window@sector+3,disk_read@sector+3
 26290  00CE92  0E00               	movlw	0
 26291  00CE94  6F78               	movwf	(disk_read@count+1)& (0+255),b
 26292  00CE96  0E01               	movlw	1
 26293  00CE98  6F77               	movwf	disk_read@count& (0+255),b
 26294  00CE9A  EE20 F001          	lfsr	2,1
 26295  00CE9E  518C               	movf	move_window@fs& (0+255),w,b
 26296  00CEA0  26D9               	addwf	fsr2l,f,c
 26297  00CEA2  518D               	movf	(move_window@fs+1)& (0+255),w,b
 26298  00CEA4  22DA               	addwfc	fsr2h,f,c
 26299  00CEA6  50DF               	movf	indf2,w,c
 26300  00CEA8  EC75  F074         	call	_disk_read
 26301  00CEAC  0900               	iorlw	0
 26302  00CEAE  B4D8               	btfsc	status,2,c
 26303  00CEB0  D007               	goto	l19401
 26304                           
 26305                           ;ff.c: 1070: sector = 0xFFFFFFFF;
 26306  00CEB2  0100               	movlb	0	; () banked
 26307  00CEB4  698E               	setf	move_window@sector& (0+255),b
 26308  00CEB6  698F               	setf	(move_window@sector+1)& (0+255),b
 26309  00CEB8  6990               	setf	(move_window@sector+2)& (0+255),b
 26310  00CEBA  6991               	setf	(move_window@sector+3)& (0+255),b
 26311                           
 26312                           ; BSR set to: 0
 26313                           ;ff.c: 1071: res = FR_DISK_ERR;
 26314  00CEBC  0E01               	movlw	1
 26315  00CEBE  6F96               	movwf	move_window@res& (0+255),b
 26316  00CEC0                     l19401:
 26317                           
 26318                           ;ff.c: 1072: };ff.c: 1073: fs->winsect = sector;
 26319  00CEC0  0100               	movlb	0	; () banked
 26320  00CEC2  EE20 F02B          	lfsr	2,43
 26321  00CEC6  518C               	movf	move_window@fs& (0+255),w,b
 26322  00CEC8  26D9               	addwf	fsr2l,f,c
 26323  00CECA  518D               	movf	(move_window@fs+1)& (0+255),w,b
 26324  00CECC  22DA               	addwfc	fsr2h,f,c
 26325  00CECE  C08E  FFDE         	movff	move_window@sector,postinc2
 26326  00CED2  C08F  FFDE         	movff	move_window@sector+1,postinc2
 26327  00CED6  C090  FFDE         	movff	move_window@sector+2,postinc2
 26328  00CEDA  C091  FFDE         	movff	move_window@sector+3,postinc2
 26329  00CEDE                     l19403:
 26330                           
 26331                           ; BSR set to: 0
 26332                           ;ff.c: 1074: };ff.c: 1075: };ff.c: 1076: return res;
 26333  00CEDE  5196               	movf	move_window@res& (0+255),w,b
 26334                           
 26335                           ; BSR set to: 0
 26336  00CEE0  0012               	return		;funcret
 26337  00CEE2                     __end_of_move_window:
 26338                           	callstack 0
 26339                           
 26340 ;; *************** function _sync_window *****************
 26341 ;; Defined at:
 26342 ;;		line 1034 in file "mcc_generated_files/fatfs/ff.c"
 26343 ;; Parameters:    Size  Location     Type
 26344 ;;  fs              2   25[BANK0 ] PTR struct .
 26345 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 26346 ;; Auto vars:     Size  Location     Type
 26347 ;;  res             1   43[BANK0 ] enum E64
 26348 ;; Return value:  Size  Location     Type
 26349 ;;                  1    wreg      enum E64
 26350 ;; Registers used:
 26351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26352 ;; Tracked objects:
 26353 ;;		On entry : 3E/1
 26354 ;;		On exit  : 3F/0
 26355 ;;		Unchanged: 0/0
 26356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26357 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26359 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26360 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26361 ;;Total ram usage:       19 bytes
 26362 ;; Hardware stack levels used:    1
 26363 ;; Hardware stack levels required when called:   11
 26364 ;; This function calls:
 26365 ;;		_disk_write
 26366 ;; This function is called by:
 26367 ;;		_move_window
 26368 ;;		_sync_fs
 26369 ;;		_dir_clear
 26370 ;;		_f_write
 26371 ;; This function uses a non-reentrant model
 26372 ;;
 26373                           
 26374                           	psect	text94
 26375  00A94C                     __ptext94:
 26376                           	callstack 0
 26377  00A94C                     _sync_window:
 26378                           	callstack 17
 26379                           
 26380                           ;ff.c: 1038: FRESULT res = FR_OK;
 26381                           
 26382                           ; BSR set to: 0
 26383                           ;incstack = 0
 26384  00A94C  0E00               	movlw	0
 26385  00A94E  0100               	movlb	0	; () banked
 26386  00A950  6F8B               	movwf	sync_window@res& (0+255),b
 26387                           
 26388                           ; BSR set to: 0
 26389                           ;ff.c: 1041: if (fs->wflag) {
 26390  00A952  EE20 F003          	lfsr	2,3
 26391  00A956  5179               	movf	sync_window@fs& (0+255),w,b
 26392  00A958  26D9               	addwf	fsr2l,f,c
 26393  00A95A  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26394  00A95C  22DA               	addwfc	fsr2h,f,c
 26395  00A95E  50DF               	movf	indf2,w,c
 26396  00A960  B4D8               	btfsc	status,2,c
 26397  00A962  D0AE               	goto	l244
 26398                           
 26399                           ; BSR set to: 0
 26400                           ;ff.c: 1042: if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {
 26401  00A964  0E2F               	movlw	47
 26402  00A966  2579               	addwf	sync_window@fs& (0+255),w,b
 26403  00A968  6F71               	movwf	disk_write@buff& (0+255),b
 26404  00A96A  0E00               	movlw	0
 26405  00A96C  217A               	addwfc	(sync_window@fs+1)& (0+255),w,b
 26406  00A96E  6F72               	movwf	(disk_write@buff+1)& (0+255),b
 26407  00A970  EE20 F02B          	lfsr	2,43
 26408  00A974  5179               	movf	sync_window@fs& (0+255),w,b
 26409  00A976  26D9               	addwf	fsr2l,f,c
 26410  00A978  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26411  00A97A  22DA               	addwfc	fsr2h,f,c
 26412  00A97C  CFDE F073          	movff	postinc2,disk_write@sector
 26413  00A980  CFDE F074          	movff	postinc2,disk_write@sector+1
 26414  00A984  CFDE F075          	movff	postinc2,disk_write@sector+2
 26415  00A988  CFDE F076          	movff	postinc2,disk_write@sector+3
 26416  00A98C  0E00               	movlw	0
 26417  00A98E  6F78               	movwf	(disk_write@count+1)& (0+255),b
 26418  00A990  0E01               	movlw	1
 26419  00A992  6F77               	movwf	disk_write@count& (0+255),b
 26420  00A994  EE20 F001          	lfsr	2,1
 26421  00A998  5179               	movf	sync_window@fs& (0+255),w,b
 26422  00A99A  26D9               	addwf	fsr2l,f,c
 26423  00A99C  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26424  00A99E  22DA               	addwfc	fsr2h,f,c
 26425  00A9A0  50DF               	movf	indf2,w,c
 26426  00A9A2  EC51  F074         	call	_disk_write
 26427  00A9A6  0900               	iorlw	0
 26428  00A9A8  A4D8               	btfss	status,2,c
 26429  00A9AA  D087               	goto	l19161
 26430                           
 26431                           ;ff.c: 1043: fs->wflag = 0;
 26432  00A9AC  0100               	movlb	0	; () banked
 26433  00A9AE  EE20 F003          	lfsr	2,3
 26434  00A9B2  5179               	movf	sync_window@fs& (0+255),w,b
 26435  00A9B4  26D9               	addwf	fsr2l,f,c
 26436  00A9B6  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26437  00A9B8  22DA               	addwfc	fsr2h,f,c
 26438  00A9BA  0E00               	movlw	0
 26439  00A9BC  6EDF               	movwf	indf2,c
 26440                           
 26441                           ; BSR set to: 0
 26442                           ;ff.c: 1044: if (fs->winsect - fs->fatbase < fs->fsize) {
 26443  00A9BE  EE20 F017          	lfsr	2,23
 26444  00A9C2  5179               	movf	sync_window@fs& (0+255),w,b
 26445  00A9C4  26D9               	addwf	fsr2l,f,c
 26446  00A9C6  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26447  00A9C8  22DA               	addwfc	fsr2h,f,c
 26448  00A9CA  EE10 F01F          	lfsr	1,31
 26449  00A9CE  5179               	movf	sync_window@fs& (0+255),w,b
 26450  00A9D0  26E1               	addwf	fsr1l,f,c
 26451  00A9D2  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26452  00A9D4  22E2               	addwfc	fsr1h,f,c
 26453  00A9D6  CFE6 F07F          	movff	postinc1,??_sync_window+4
 26454  00A9DA  CFE6 F080          	movff	postinc1,??_sync_window+5
 26455  00A9DE  CFE6 F081          	movff	postinc1,??_sync_window+6
 26456  00A9E2  CFE6 F082          	movff	postinc1,??_sync_window+7
 26457  00A9E6  EE10 F02B          	lfsr	1,43
 26458  00A9EA  5179               	movf	sync_window@fs& (0+255),w,b
 26459  00A9EC  26E1               	addwf	fsr1l,f,c
 26460  00A9EE  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26461  00A9F0  22E2               	addwfc	fsr1h,f,c
 26462  00A9F2  CFE6 F083          	movff	postinc1,??_sync_window+8
 26463  00A9F6  CFE6 F084          	movff	postinc1,??_sync_window+9
 26464  00A9FA  CFE6 F085          	movff	postinc1,??_sync_window+10
 26465  00A9FE  CFE6 F086          	movff	postinc1,??_sync_window+11
 26466  00AA02  517F               	movf	(??_sync_window+4)& (0+255),w,b
 26467  00AA04  5D83               	subwf	(??_sync_window+8)& (0+255),w,b
 26468  00AA06  6F87               	movwf	(??_sync_window+12)& (0+255),b
 26469  00AA08  5180               	movf	(??_sync_window+5)& (0+255),w,b
 26470  00AA0A  5984               	subwfb	(??_sync_window+9)& (0+255),w,b
 26471  00AA0C  6F88               	movwf	(??_sync_window+13)& (0+255),b
 26472  00AA0E  5181               	movf	(??_sync_window+6)& (0+255),w,b
 26473  00AA10  5985               	subwfb	(??_sync_window+10)& (0+255),w,b
 26474  00AA12  6F89               	movwf	(??_sync_window+14)& (0+255),b
 26475  00AA14  5182               	movf	(??_sync_window+7)& (0+255),w,b
 26476  00AA16  5986               	subwfb	(??_sync_window+11)& (0+255),w,b
 26477  00AA18  6F8A               	movwf	(??_sync_window+15)& (0+255),b
 26478  00AA1A  50DE               	movf	postinc2,w,c
 26479  00AA1C  5D87               	subwf	(??_sync_window+12)& (0+255),w,b
 26480  00AA1E  50DE               	movf	postinc2,w,c
 26481  00AA20  5988               	subwfb	(??_sync_window+13)& (0+255),w,b
 26482  00AA22  50DE               	movf	postinc2,w,c
 26483  00AA24  5989               	subwfb	(??_sync_window+14)& (0+255),w,b
 26484  00AA26  50DE               	movf	postinc2,w,c
 26485  00AA28  598A               	subwfb	(??_sync_window+15)& (0+255),w,b
 26486  00AA2A  B0D8               	btfsc	status,0,c
 26487  00AA2C  D049               	goto	l244
 26488                           
 26489                           ; BSR set to: 0
 26490                           ;ff.c: 1045: if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize,
      +                           1);
 26491  00AA2E  EE20 F002          	lfsr	2,2
 26492  00AA32  5179               	movf	sync_window@fs& (0+255),w,b
 26493  00AA34  26D9               	addwf	fsr2l,f,c
 26494  00AA36  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26495  00AA38  22DA               	addwfc	fsr2h,f,c
 26496  00AA3A  0E02               	movlw	2
 26497  00AA3C  18DE               	xorwf	postinc2,w,c
 26498  00AA3E  A4D8               	btfss	status,2,c
 26499  00AA40  D03F               	goto	l244
 26500                           
 26501                           ; BSR set to: 0
 26502  00AA42  0E2F               	movlw	47
 26503  00AA44  2579               	addwf	sync_window@fs& (0+255),w,b
 26504  00AA46  6F71               	movwf	disk_write@buff& (0+255),b
 26505  00AA48  0E00               	movlw	0
 26506  00AA4A  217A               	addwfc	(sync_window@fs+1)& (0+255),w,b
 26507  00AA4C  6F72               	movwf	(disk_write@buff+1)& (0+255),b
 26508  00AA4E  EE20 F017          	lfsr	2,23
 26509  00AA52  5179               	movf	sync_window@fs& (0+255),w,b
 26510  00AA54  26D9               	addwf	fsr2l,f,c
 26511  00AA56  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26512  00AA58  22DA               	addwfc	fsr2h,f,c
 26513  00AA5A  CFDE F07B          	movff	postinc2,??_sync_window
 26514  00AA5E  CFDE F07C          	movff	postinc2,??_sync_window+1
 26515  00AA62  CFDE F07D          	movff	postinc2,??_sync_window+2
 26516  00AA66  CFDE F07E          	movff	postinc2,??_sync_window+3
 26517  00AA6A  EE20 F02B          	lfsr	2,43
 26518  00AA6E  5179               	movf	sync_window@fs& (0+255),w,b
 26519  00AA70  26D9               	addwf	fsr2l,f,c
 26520  00AA72  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26521  00AA74  22DA               	addwfc	fsr2h,f,c
 26522  00AA76  CFDE F07F          	movff	postinc2,??_sync_window+4
 26523  00AA7A  CFDE F080          	movff	postinc2,??_sync_window+5
 26524  00AA7E  CFDE F081          	movff	postinc2,??_sync_window+6
 26525  00AA82  CFDE F082          	movff	postinc2,??_sync_window+7
 26526  00AA86  517B               	movf	??_sync_window& (0+255),w,b
 26527  00AA88  257F               	addwf	(??_sync_window+4)& (0+255),w,b
 26528  00AA8A  6F73               	movwf	disk_write@sector& (0+255),b
 26529  00AA8C  517C               	movf	(??_sync_window+1)& (0+255),w,b
 26530  00AA8E  2180               	addwfc	(??_sync_window+5)& (0+255),w,b
 26531  00AA90  6F74               	movwf	(disk_write@sector+1)& (0+255),b
 26532  00AA92  517D               	movf	(??_sync_window+2)& (0+255),w,b
 26533  00AA94  2181               	addwfc	(??_sync_window+6)& (0+255),w,b
 26534  00AA96  6F75               	movwf	(disk_write@sector+2)& (0+255),b
 26535  00AA98  517E               	movf	(??_sync_window+3)& (0+255),w,b
 26536  00AA9A  2182               	addwfc	(??_sync_window+7)& (0+255),w,b
 26537  00AA9C  6F76               	movwf	(disk_write@sector+3)& (0+255),b
 26538  00AA9E  0E00               	movlw	0
 26539  00AAA0  6F78               	movwf	(disk_write@count+1)& (0+255),b
 26540  00AAA2  0E01               	movlw	1
 26541  00AAA4  6F77               	movwf	disk_write@count& (0+255),b
 26542  00AAA6  EE20 F001          	lfsr	2,1
 26543  00AAAA  5179               	movf	sync_window@fs& (0+255),w,b
 26544  00AAAC  26D9               	addwf	fsr2l,f,c
 26545  00AAAE  517A               	movf	(sync_window@fs+1)& (0+255),w,b
 26546  00AAB0  22DA               	addwfc	fsr2h,f,c
 26547  00AAB2  50DF               	movf	indf2,w,c
 26548  00AAB4  EC51  F074         	call	_disk_write
 26549  00AAB8  D003               	goto	l244
 26550  00AABA                     l19161:
 26551                           
 26552                           ;ff.c: 1048: res = FR_DISK_ERR;
 26553  00AABA  0E01               	movlw	1
 26554  00AABC  0100               	movlb	0	; () banked
 26555  00AABE  6F8B               	movwf	sync_window@res& (0+255),b
 26556  00AAC0                     l244:
 26557                           
 26558                           ;ff.c: 1049: };ff.c: 1050: };ff.c: 1051: return res;
 26559  00AAC0  0100               	movlb	0	; () banked
 26560  00AAC2  518B               	movf	sync_window@res& (0+255),w,b
 26561                           
 26562                           ; BSR set to: 0
 26563  00AAC4  0012               	return		;funcret
 26564  00AAC6                     __end_of_sync_window:
 26565                           	callstack 0
 26566                           
 26567 ;; *************** function _disk_write *****************
 26568 ;; Defined at:
 26569 ;;		line 124 in file "mcc_generated_files/fatfs/diskio.c"
 26570 ;; Parameters:    Size  Location     Type
 26571 ;;  pdrv            1    wreg     unsigned char 
 26572 ;;  buff            2   17[BANK0 ] PTR const unsigned char 
 26573 ;;		 -> drive.win(512), drive.win(512), NormalProc@str(100), drive(559), 
 26574 ;;		 -> drive@fatfs_demo$F369(559), FatFsDemo_Tasks@data(13), NULL(0), 
 26575 ;;  sector          4   19[BANK0 ] unsigned long 
 26576 ;;  count           2   23[BANK0 ] unsigned int 
 26577 ;; Auto vars:     Size  Location     Type
 26578 ;;  pdrv            1   67[COMRAM] unsigned char 
 26579 ;;  res             1   68[COMRAM] enum E10
 26580 ;; Return value:  Size  Location     Type
 26581 ;;                  1    wreg      enum E203
 26582 ;; Registers used:
 26583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26584 ;; Tracked objects:
 26585 ;;		On entry : 3E/1
 26586 ;;		On exit  : 0/0
 26587 ;;		Unchanged: 0/0
 26588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26589 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26592 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26593 ;;Total ram usage:       10 bytes
 26594 ;; Hardware stack levels used:    1
 26595 ;; Hardware stack levels required when called:   10
 26596 ;; This function calls:
 26597 ;;		_SD_SPI_SectorWrite
 26598 ;; This function is called by:
 26599 ;;		_sync_window
 26600 ;;		_sync_fs
 26601 ;;		_dir_clear
 26602 ;;		_f_write
 26603 ;; This function uses a non-reentrant model
 26604 ;;
 26605                           
 26606                           	psect	text95
 26607  00E8A2                     __ptext95:
 26608                           	callstack 0
 26609  00E8A2                     _disk_write:
 26610                           	callstack 17
 26611                           
 26612                           ; BSR set to: 0
 26613                           ;incstack = 0
 26614                           ;disk_write@pdrv stored from wreg
 26615  00E8A2  6E44               	movwf	disk_write@pdrv^0,c
 26616                           
 26617                           ;diskio.c: 131: DRESULT res = RES_PARERR;
 26618  00E8A4  0E04               	movlw	4
 26619  00E8A6  6E45               	movwf	disk_write@res^0,c
 26620                           
 26621                           ;diskio.c: 133: switch (pdrv) {
 26622  00E8A8  D01A               	goto	l19007
 26623  00E8AA                     l18999:
 26624                           
 26625                           ;diskio.c: 135: if(SD_SPI_SectorWrite(sector, buff, count) == 1)
 26626  00E8AA  C073  F03A         	movff	disk_write@sector,SD_SPI_SectorWrite@sector_address
 26627  00E8AE  C074  F03B         	movff	disk_write@sector+1,SD_SPI_SectorWrite@sector_address+1
 26628  00E8B2  C075  F03C         	movff	disk_write@sector+2,SD_SPI_SectorWrite@sector_address+2
 26629  00E8B6  C076  F03D         	movff	disk_write@sector+3,SD_SPI_SectorWrite@sector_address+3
 26630  00E8BA  C071  F03E         	movff	disk_write@buff,SD_SPI_SectorWrite@buffer
 26631  00E8BE  C072  F03F         	movff	disk_write@buff+1,SD_SPI_SectorWrite@buffer+1
 26632  00E8C2  C077  F040         	movff	disk_write@count,SD_SPI_SectorWrite@sector_count
 26633  00E8C6  C078  F041         	movff	disk_write@count+1,SD_SPI_SectorWrite@sector_count+1
 26634  00E8CA  ECA5  F05B         	call	_SD_SPI_SectorWrite	;wreg free
 26635  00E8CE  06E8               	decf	wreg,f,c
 26636  00E8D0  A4D8               	btfss	status,2,c
 26637  00E8D2  D002               	goto	l19003
 26638                           
 26639                           ;diskio.c: 136: {;diskio.c: 137: res = RES_OK;
 26640  00E8D4  0E00               	movlw	0
 26641  00E8D6  D001               	goto	L23
 26642  00E8D8                     l19003:
 26643                           
 26644                           ;diskio.c: 139: else;diskio.c: 140: {;diskio.c: 141: res = RES_ERROR;
 26645  00E8D8  0E01               	movlw	1
 26646  00E8DA                     L23:
 26647  00E8DA  6E45               	movwf	disk_write@res^0,c
 26648  00E8DC  D004               	goto	l19009
 26649  00E8DE                     l19007:
 26650  00E8DE  5044               	movf	disk_write@pdrv^0,w,c
 26651                           
 26652                           ; Switch size 1, requested type "simple"
 26653                           ; Number of cases is 1, Range of values is 0 to 0
 26654                           ; switch strategies available:
 26655                           ; Name         Instructions Cycles
 26656                           ; simple_byte            4     3 (average)
 26657                           ;	Chosen strategy is simple_byte
 26658  00E8E0  0A00               	xorlw	0	; case 0
 26659  00E8E2  B4D8               	btfsc	status,2,c
 26660  00E8E4  D7E2               	goto	l18999
 26661  00E8E6                     l19009:
 26662                           
 26663                           ;diskio.c: 149: return res;
 26664  00E8E6  5045               	movf	disk_write@res^0,w,c
 26665  00E8E8  0012               	return		;funcret
 26666  00E8EA                     __end_of_disk_write:
 26667                           	callstack 0
 26668                           
 26669 ;; *************** function _SD_SPI_SectorWrite *****************
 26670 ;; Defined at:
 26671 ;;		line 426 in file "mcc_generated_files/sd_spi/sd_spi.c"
 26672 ;; Parameters:    Size  Location     Type
 26673 ;;  sector_addre    4   57[COMRAM] unsigned long 
 26674 ;;  buffer          2   61[COMRAM] PTR const unsigned char 
 26675 ;;		 -> drive.win(512), drive.win(512), NormalProc@str(100), drive(559), 
 26676 ;;		 -> drive@fatfs_demo$F369(559), FatFsDemo_Tasks@data(13), NULL(0), 
 26677 ;;  sector_count    2   63[COMRAM] unsigned int 
 26678 ;; Auto vars:     Size  Location     Type
 26679 ;;  info           13    4[BANK0 ] struct SD_ASYNC_IO
 26680 ;;  i               2    2[BANK0 ] unsigned int 
 26681 ;;  status          1    1[BANK0 ] unsigned char 
 26682 ;;  result          1    0[BANK0 ] unsigned char 
 26683 ;; Return value:  Size  Location     Type
 26684 ;;                  1    wreg      unsigned char 
 26685 ;; Registers used:
 26686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26687 ;; Tracked objects:
 26688 ;;		On entry : 0/1
 26689 ;;		On exit  : 0/0
 26690 ;;		Unchanged: 0/0
 26691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26692 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26693 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26694 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26695 ;;      Totals:        10      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26696 ;;Total ram usage:       27 bytes
 26697 ;; Hardware stack levels used:    1
 26698 ;; Hardware stack levels required when called:    9
 26699 ;; This function calls:
 26700 ;;		_LCD8M_open
 26701 ;;		_SDFAST_open
 26702 ;;		_SDSLOW_open
 26703 ;;		_SD_SPI_AsyncWriteTasks
 26704 ;;		_SPI1_Close
 26705 ;;		_Touch2M_open
 26706 ;; This function is called by:
 26707 ;;		_disk_write
 26708 ;; This function uses a non-reentrant model
 26709 ;;
 26710                           
 26711                           	psect	text96
 26712  00B74A                     __ptext96:
 26713                           	callstack 0
 26714  00B74A                     _SD_SPI_SectorWrite:
 26715                           	callstack 17
 26716                           
 26717                           ;sd_spi.c: 428: struct SD_ASYNC_IO info;;sd_spi.c: 429: uint8_t status;;sd_spi.c: 430: b
      +                          ool result = 0;
 26718                           
 26719                           ;incstack = 0
 26720  00B74A  0E00               	movlw	0
 26721  00B74C  0100               	movlb	0	; () banked
 26722  00B74E  6F60               	movwf	SD_SPI_SectorWrite@result& (0+255),b
 26723                           
 26724                           ;sd_spi.c: 431: uint16_t i;;sd_spi.c: 433: for(i=0; i<sector_count; i++)
 26725  00B750  0E00               	movlw	0
 26726  00B752  6F63               	movwf	(SD_SPI_SectorWrite@i+1)& (0+255),b
 26727  00B754  0E00               	movlw	0
 26728  00B756  6F62               	movwf	SD_SPI_SectorWrite@i& (0+255),b
 26729  00B758  D071               	goto	l18791
 26730  00B75A                     l18763:
 26731                           
 26732                           ; BSR set to: 0
 26733                           ;sd_spi.c: 434: {;sd_spi.c: 436: info.wNumBytes = 1 << 9;
 26734  00B75A  0E02               	movlw	2
 26735  00B75C  6F65               	movwf	(SD_SPI_SectorWrite@info+1)& (0+255),b
 26736  00B75E  0E00               	movlw	0
 26737  00B760  6F64               	movwf	SD_SPI_SectorWrite@info& (0+255),b
 26738                           
 26739                           ;sd_spi.c: 437: info.dwBytesRemaining = 1 << 9;
 26740  00B762  0E00               	movlw	0
 26741  00B764  6F66               	movwf	(SD_SPI_SectorWrite@info+2)& (0+255),b
 26742  00B766  0E02               	movlw	2
 26743  00B768  6F67               	movwf	(SD_SPI_SectorWrite@info+3)& (0+255),b
 26744  00B76A  0E00               	movlw	0
 26745  00B76C  6F68               	movwf	(SD_SPI_SectorWrite@info+4)& (0+255),b
 26746  00B76E  0E00               	movlw	0
 26747  00B770  6F69               	movwf	(SD_SPI_SectorWrite@info+5)& (0+255),b
 26748                           
 26749                           ; BSR set to: 0
 26750                           ;sd_spi.c: 438: info.pBuffer = (uint8_t*)buffer + (i << 9);
 26751  00B772  C062  F042         	movff	SD_SPI_SectorWrite@i,??_SD_SPI_SectorWrite
 26752  00B776  C063  F043         	movff	SD_SPI_SectorWrite@i+1,??_SD_SPI_SectorWrite+1
 26753  00B77A  0E09               	movlw	9
 26754  00B77C                     u20015:
 26755  00B77C  90D8               	bcf	status,0,c
 26756  00B77E  3642               	rlcf	??_SD_SPI_SectorWrite^0,f,c
 26757  00B780  3643               	rlcf	(??_SD_SPI_SectorWrite+1)^0,f,c
 26758  00B782  2EE8               	decfsz	wreg,f,c
 26759  00B784  D7FB               	goto	u20015
 26760  00B786  5042               	movf	??_SD_SPI_SectorWrite^0,w,c
 26761  00B788  243E               	addwf	SD_SPI_SectorWrite@buffer^0,w,c
 26762  00B78A  6F6A               	movwf	(SD_SPI_SectorWrite@info+6)& (0+255),b
 26763  00B78C  5043               	movf	(??_SD_SPI_SectorWrite+1)^0,w,c
 26764  00B78E  203F               	addwfc	(SD_SPI_SectorWrite@buffer+1)^0,w,c
 26765  00B790  6F6B               	movwf	(SD_SPI_SectorWrite@info+7)& (0+255),b
 26766                           
 26767                           ; BSR set to: 0
 26768                           ;sd_spi.c: 439: info.dwAddress = sector_address + i;
 26769  00B792  5162               	movf	SD_SPI_SectorWrite@i& (0+255),w,b
 26770  00B794  243A               	addwf	SD_SPI_SectorWrite@sector_address^0,w,c
 26771  00B796  6F6C               	movwf	(SD_SPI_SectorWrite@info+8)& (0+255),b
 26772  00B798  5163               	movf	(SD_SPI_SectorWrite@i+1)& (0+255),w,b
 26773  00B79A  203B               	addwfc	(SD_SPI_SectorWrite@sector_address+1)^0,w,c
 26774  00B79C  6F6D               	movwf	(SD_SPI_SectorWrite@info+9)& (0+255),b
 26775  00B79E  0E00               	movlw	0
 26776  00B7A0  203C               	addwfc	(SD_SPI_SectorWrite@sector_address+2)^0,w,c
 26777  00B7A2  6F6E               	movwf	(SD_SPI_SectorWrite@info+10)& (0+255),b
 26778  00B7A4  0E00               	movlw	0
 26779  00B7A6  203D               	addwfc	(SD_SPI_SectorWrite@sector_address+3)^0,w,c
 26780  00B7A8  6F6F               	movwf	(SD_SPI_SectorWrite@info+11)& (0+255),b
 26781                           
 26782                           ;sd_spi.c: 440: info.bStateVariable = 0x01;
 26783  00B7AA  0E01               	movlw	1
 26784  00B7AC  6F70               	movwf	(SD_SPI_SectorWrite@info+12)& (0+255),b
 26785                           
 26786                           ; BSR set to: 0
 26787                           ;sd_spi.c: 442: if( spiMaster[SDFAST].spiOpen() == 0 )
 26788  00B7AE  0E21               	movlw	low (_spiMaster+2)
 26789  00B7B0  6EF6               	movwf	tblptrl,c
 26790  00B7B2  0EFA               	movlw	high (_spiMaster+2)
 26791  00B7B4  6EF7               	movwf	tblptrh,c
 26792  00B7B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 26793  00B7B6  6AF8               	clrf	tblptru,c
 26794  00B7B8                     	endif
 26795  00B7B8                     	if	0	;tblptru may be non-zero
 26796  00B7B8                     	endif
 26797  00B7B8  0009               	tblrd		*+
 26798  00B7BA  CFF5 F042          	movff	tablat,??_SD_SPI_SectorWrite
 26799  00B7BE  0009               	tblrd		*+
 26800  00B7C0  CFF5 F043          	movff	tablat,??_SD_SPI_SectorWrite+1
 26801  00B7C4  D801               	call	u20028
 26802  00B7C6  D009               	goto	u20029
 26803  00B7C8                     u20028:
 26804  00B7C8  0005               	push	
 26805  00B7CA  6EFA               	movwf	pclath,c
 26806  00B7CC  5042               	movf	??_SD_SPI_SectorWrite^0,w,c
 26807  00B7CE  6EFD               	movwf	tosl,c
 26808  00B7D0  5043               	movf	(??_SD_SPI_SectorWrite+1)^0,w,c
 26809  00B7D2  6EFE               	movwf	tosh,c
 26810  00B7D4  6AFF               	clrf	tosu,c
 26811  00B7D6  50FA               	movf	pclath,w,c
 26812  00B7D8  0012               	return		;indir
 26813  00B7DA                     u20029:
 26814  00B7DA  0900               	iorlw	0
 26815  00B7DC  A4D8               	btfss	status,2,c
 26816  00B7DE  D002               	goto	l930
 26817                           
 26818                           ;sd_spi.c: 443: {;sd_spi.c: 444: return 0;
 26819  00B7E0  0E00               	movlw	0
 26820  00B7E2  0012               	return	
 26821  00B7E4                     l930:
 26822  00B7E4  9C89               	bcf	137,6,c	;volatile
 26823  00B7E6                     l18775:
 26824                           
 26825                           ;sd_spi.c: 449: {;sd_spi.c: 450: status = SD_SPI_AsyncWriteTasks(&info);
 26826  00B7E6  0E64               	movlw	low SD_SPI_SectorWrite@info
 26827  00B7E8  6E2C               	movwf	SD_SPI_AsyncWriteTasks@info^0,c
 26828  00B7EA  EC86  F023         	call	_SD_SPI_AsyncWriteTasks	;wreg free
 26829  00B7EE  0100               	movlb	0	; () banked
 26830  00B7F0  6F61               	movwf	SD_SPI_SectorWrite@status& (0+255),b
 26831                           
 26832                           ; BSR set to: 0
 26833                           ;sd_spi.c: 451: if(status == 0x00)
 26834  00B7F2  5161               	movf	SD_SPI_SectorWrite@status& (0+255),w,b
 26835  00B7F4  A4D8               	btfss	status,2,c
 26836  00B7F6  D002               	goto	l18783
 26837                           
 26838                           ; BSR set to: 0
 26839                           ;sd_spi.c: 452: {;sd_spi.c: 453: result = 1;
 26840  00B7F8  0E01               	movlw	1
 26841  00B7FA  D004               	goto	L24
 26842  00B7FC                     l18783:
 26843                           
 26844                           ; BSR set to: 0
 26845                           ;sd_spi.c: 456: else if(status == 0xFF)
 26846  00B7FC  2961               	incf	SD_SPI_SectorWrite@status& (0+255),w,b
 26847  00B7FE  A4D8               	btfss	status,2,c
 26848  00B800  D7F2               	goto	l18775
 26849                           
 26850                           ; BSR set to: 0
 26851                           ;sd_spi.c: 457: {;sd_spi.c: 458: result = 0;
 26852  00B802  0E00               	movlw	0
 26853  00B804                     L24:
 26854  00B804  6F60               	movwf	SD_SPI_SectorWrite@result& (0+255),b
 26855                           
 26856                           ; BSR set to: 0
 26857                           
 26858                           ;sd_spi.c: 460: };sd_spi.c: 461: };sd_spi.c: 463: do { LATAbits.LATA6 = 1; } while(0);
 26859  00B806  8C89               	bsf	137,6,c	;volatile
 26860                           
 26861                           ; BSR set to: 0
 26862                           ;sd_spi.c: 464: spiMaster[SDFAST].spiClose();
 26863  00B808  0E1F               	movlw	low _spiMaster
 26864  00B80A  6EF6               	movwf	tblptrl,c
 26865  00B80C                     	if	1	;There is more than 1 active tblptr byte
 26866  00B80C  0EFA               	movlw	high _spiMaster
 26867  00B80E  6EF7               	movwf	tblptrh,c
 26868  00B810                     	endif
 26869  00B810                     	if	1	;There are 3 active tblptr bytes
 26870  00B810  0E00               	movlw	low (_spiMaster shr (0+16))
 26871  00B812  6EF8               	movwf	tblptru,c
 26872  00B814                     	endif
 26873  00B814  0009               	tblrd		*+
 26874  00B816  CFF5 F042          	movff	tablat,??_SD_SPI_SectorWrite
 26875  00B81A  0009               	tblrd		*+
 26876  00B81C  CFF5 F043          	movff	tablat,??_SD_SPI_SectorWrite+1
 26877  00B820  D801               	call	u20068
 26878  00B822  D009               	goto	u20069
 26879  00B824                     u20068:
 26880  00B824  0005               	push	
 26881  00B826  6EFA               	movwf	pclath,c
 26882  00B828  5042               	movf	??_SD_SPI_SectorWrite^0,w,c
 26883  00B82A  6EFD               	movwf	tosl,c
 26884  00B82C  5043               	movf	(??_SD_SPI_SectorWrite+1)^0,w,c
 26885  00B82E  6EFE               	movwf	tosh,c
 26886  00B830  6AFF               	clrf	tosu,c
 26887  00B832  50FA               	movf	pclath,w,c
 26888  00B834  0012               	return		;indir
 26889  00B836                     u20069:
 26890  00B836  0100               	movlb	0	; () banked
 26891  00B838  4B62               	infsnz	SD_SPI_SectorWrite@i& (0+255),f,b
 26892  00B83A  2B63               	incf	(SD_SPI_SectorWrite@i+1)& (0+255),f,b
 26893  00B83C                     l18791:
 26894                           
 26895                           ; BSR set to: 0
 26896  00B83C  5040               	movf	SD_SPI_SectorWrite@sector_count^0,w,c
 26897  00B83E  5D62               	subwf	SD_SPI_SectorWrite@i& (0+255),w,b
 26898  00B840  5041               	movf	(SD_SPI_SectorWrite@sector_count+1)^0,w,c
 26899  00B842  5963               	subwfb	(SD_SPI_SectorWrite@i+1)& (0+255),w,b
 26900  00B844  A0D8               	btfss	status,0,c
 26901  00B846  D789               	goto	l18763
 26902                           
 26903                           ; BSR set to: 0
 26904                           ;sd_spi.c: 465: };sd_spi.c: 467: return result;
 26905  00B848  5160               	movf	SD_SPI_SectorWrite@result& (0+255),w,b
 26906  00B84A  0012               	return		;funcret
 26907  00B84C                     __end_of_SD_SPI_SectorWrite:
 26908                           	callstack 0
 26909                           
 26910 ;; *************** function _SD_SPI_AsyncWriteTasks *****************
 26911 ;; Defined at:
 26912 ;;		line 1000 in file "mcc_generated_files/sd_spi/sd_spi.c"
 26913 ;; Parameters:    Size  Location     Type
 26914 ;;  info            1   43[COMRAM] PTR struct SD_ASYNC_IO
 26915 ;;		 -> SD_SPI_SectorWrite@info(13), 
 26916 ;; Auto vars:     Size  Location     Type
 26917 ;;  response        5   48[COMRAM] struct .
 26918 ;;  preEraseBloc    4   53[COMRAM] unsigned long 
 26919 ;; Return value:  Size  Location     Type
 26920 ;;                  1    wreg      unsigned char 
 26921 ;; Registers used:
 26922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 26923 ;; Tracked objects:
 26924 ;;		On entry : 0/0
 26925 ;;		On exit  : 0/0
 26926 ;;		Unchanged: 0/0
 26927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26928 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26929 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26930 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26931 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26932 ;;Total ram usage:       14 bytes
 26933 ;; Hardware stack levels used:    1
 26934 ;; Hardware stack levels required when called:    8
 26935 ;; This function calls:
 26936 ;;		_SD_SendCmd
 26937 ;;		_SPI1_ExchangeBlock
 26938 ;;		_SPI1_ExchangeByte
 26939 ;; This function is called by:
 26940 ;;		_SD_SPI_SectorWrite
 26941 ;; This function uses a non-reentrant model
 26942 ;;
 26943                           
 26944                           	psect	text97
 26945  00470C                     __ptext97:
 26946                           	callstack 0
 26947  00470C                     _SD_SPI_AsyncWriteTasks:
 26948                           	callstack 17
 26949                           
 26950                           ;sd_spi.c: 1002: static uint8_t data_byte;;sd_spi.c: 1003: static uint16_t blockCounter;
      +                          ;sd_spi.c: 1004: static uint32_t WriteTimeout;;sd_spi.c: 1005: static uint8_t command;;s
      +                          d_spi.c: 1006: uint32_t preEraseBlockCount;;sd_spi.c: 1007: SD_RESPONSE response;;sd_spi
      +                          .c: 1010: switch(info->bStateVariable)
 26951                           
 26952                           ;incstack = 0
 26953  00470C  D298               	goto	l18745
 26954  00470E                     l18559:
 26955                           
 26956                           ;sd_spi.c: 1013: return 0x00;
 26957  00470E  0E00               	movlw	0
 26958  004710  0012               	return	
 26959  004712                     l18563:
 26960                           
 26961                           ;sd_spi.c: 1017: mediaInformation.state = SD_STATE_BUSY;
 26962  004712  0E02               	movlw	2
 26963  004714  0103               	movlb	3	; () banked
 26964  004716  6FDA               	movwf	(_mediaInformation+3)& (0+255),b
 26965                           
 26966                           ;sd_spi.c: 1018: blockCounter = 512u;
 26967  004718  0E02               	movlw	2
 26968  00471A  6F95               	movwf	(SD_SPI_AsyncWriteTasks@blockCounter+1)& (0+255),b
 26969  00471C  0E00               	movlw	0
 26970  00471E  6F94               	movwf	SD_SPI_AsyncWriteTasks@blockCounter& (0+255),b
 26971                           
 26972                           ; BSR set to: 3
 26973                           ;sd_spi.c: 1023: ioInfo = *info;
 26974  004720  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 26975  004722  6ED9               	movwf	fsr2l,c
 26976  004724  6ADA               	clrf	fsr2h,c
 26977  004726  EE13  F000         	lfsr	1,_ioInfo
 26978  00472A  0E0C               	movlw	12
 26979  00472C                     u19661:
 26980  00472C  CFDB FFE3          	movff	plusw2,plusw1
 26981  004730  06E8               	decf	wreg,f,c
 26982  004732  E2FC               	bc	u19661
 26983                           
 26984                           ; BSR set to: 3
 26985                           ;sd_spi.c: 1027: if(ioInfo.dwBytesRemaining <= 512u)
 26986  004734  5105               	movf	(_ioInfo+5)& (0+255),w,b
 26987  004736  1104               	iorwf	(_ioInfo+4)& (0+255),w,b
 26988  004738  E109               	bnz	l18571
 26989  00473A  0502               	decf	(_ioInfo+2)& (0+255),w,b
 26990  00473C  0E02               	movlw	2
 26991  00473E  5903               	subwfb	(_ioInfo+3)& (0+255),w,b
 26992  004740  B0D8               	btfsc	status,0,c
 26993  004742  D004               	goto	l18571
 26994                           
 26995                           ; BSR set to: 3
 26996                           ;sd_spi.c: 1028: {;sd_spi.c: 1029: command = SD_WRITE_SINGLE_BLOCK;
 26997  004744  0E0A               	movlw	10
 26998  004746  0102               	movlb	2	; () banked
 26999  004748  6FE5               	movwf	SD_SPI_AsyncWriteTasks@command& (0+255),b
 27000                           
 27001                           ;sd_spi.c: 1030: }
 27002  00474A  D048               	goto	l18585
 27003  00474C                     l18571:
 27004                           
 27005                           ; BSR set to: 3
 27006                           ;sd_spi.c: 1031: else;sd_spi.c: 1032: {;sd_spi.c: 1033: command = SD_WRITE_MULTI_BLOCK;
 27007  00474C  0E0B               	movlw	11
 27008  00474E  0102               	movlb	2	; () banked
 27009  004750  6FE5               	movwf	SD_SPI_AsyncWriteTasks@command& (0+255),b
 27010                           
 27011                           ; BSR set to: 2
 27012                           ;sd_spi.c: 1036: preEraseBlockCount = (ioInfo.dwBytesRemaining >> 9);
 27013  004752  C302  F02D         	movff	_ioInfo+2,??_SD_SPI_AsyncWriteTasks
 27014  004756  C303  F02E         	movff	_ioInfo+3,??_SD_SPI_AsyncWriteTasks+1
 27015  00475A  C304  F02F         	movff	_ioInfo+4,??_SD_SPI_AsyncWriteTasks+2
 27016  00475E  C305  F030         	movff	_ioInfo+5,??_SD_SPI_AsyncWriteTasks+3
 27017  004762  0E0A               	movlw	10
 27018  004764  D005               	goto	u19680
 27019  004766                     u19685:
 27020  004766  90D8               	bcf	status,0,c
 27021  004768  3230               	rrcf	(??_SD_SPI_AsyncWriteTasks+3)^0,f,c
 27022  00476A  322F               	rrcf	(??_SD_SPI_AsyncWriteTasks+2)^0,f,c
 27023  00476C  322E               	rrcf	(??_SD_SPI_AsyncWriteTasks+1)^0,f,c
 27024  00476E  322D               	rrcf	??_SD_SPI_AsyncWriteTasks^0,f,c
 27025  004770                     u19680:
 27026  004770  2EE8               	decfsz	wreg,f,c
 27027  004772  D7F9               	goto	u19685
 27028  004774  C02D  F036         	movff	??_SD_SPI_AsyncWriteTasks,SD_SPI_AsyncWriteTasks@preEraseBlockCount
 27029  004778  C02E  F037         	movff	??_SD_SPI_AsyncWriteTasks+1,SD_SPI_AsyncWriteTasks@preEraseBlockCount+1
 27030  00477C  C02F  F038         	movff	??_SD_SPI_AsyncWriteTasks+2,SD_SPI_AsyncWriteTasks@preEraseBlockCount+2
 27031  004780  C030  F039         	movff	??_SD_SPI_AsyncWriteTasks+3,SD_SPI_AsyncWriteTasks@preEraseBlockCount+3
 27032                           
 27033                           ; BSR set to: 2
 27034                           ;sd_spi.c: 1038: if(preEraseBlockCount == 0)
 27035  004784  5036               	movf	SD_SPI_AsyncWriteTasks@preEraseBlockCount^0,w,c
 27036  004786  1037               	iorwf	(SD_SPI_AsyncWriteTasks@preEraseBlockCount+1)^0,w,c
 27037  004788  1038               	iorwf	(SD_SPI_AsyncWriteTasks@preEraseBlockCount+2)^0,w,c
 27038  00478A  1039               	iorwf	(SD_SPI_AsyncWriteTasks@preEraseBlockCount+3)^0,w,c
 27039  00478C  A4D8               	btfss	status,2,c
 27040  00478E  D006               	goto	l18579
 27041                           
 27042                           ; BSR set to: 2
 27043                           ;sd_spi.c: 1039: {;sd_spi.c: 1040: preEraseBlockCount++;
 27044  004790  0E01               	movlw	1
 27045  004792  2636               	addwf	SD_SPI_AsyncWriteTasks@preEraseBlockCount^0,f,c
 27046  004794  0E00               	movlw	0
 27047  004796  2237               	addwfc	(SD_SPI_AsyncWriteTasks@preEraseBlockCount+1)^0,f,c
 27048  004798  2238               	addwfc	(SD_SPI_AsyncWriteTasks@preEraseBlockCount+2)^0,f,c
 27049  00479A  2239               	addwfc	(SD_SPI_AsyncWriteTasks@preEraseBlockCount+3)^0,f,c
 27050  00479C                     l18579:
 27051                           
 27052                           ; BSR set to: 2
 27053                           ;sd_spi.c: 1041: };sd_spi.c: 1046: response = SD_SendCmd(SD_APP_CMD, 0x00000000);
 27054  00479C  0E00               	movlw	0
 27055  00479E  6E15               	movwf	SD_SendCmd@address^0,c
 27056  0047A0  0E00               	movlw	0
 27057  0047A2  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 27058  0047A4  0E00               	movlw	0
 27059  0047A6  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 27060  0047A8  0E00               	movlw	0
 27061  0047AA  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 27062  0047AC  0E0F               	movlw	15
 27063  0047AE  EC7D  F02F         	call	_SD_SendCmd
 27064  0047B2  EE20  F031         	lfsr	2,SD_SPI_AsyncWriteTasks@response
 27065  0047B6  0E04               	movlw	4
 27066  0047B8                     u19701:
 27067  0047B8  CFEB FFDB          	movff	plusw0,plusw2
 27068  0047BC  06E8               	decf	wreg,f,c
 27069  0047BE  E2FC               	bc	u19701
 27070                           
 27071                           ;sd_spi.c: 1047: if(response.r1._byte == 0x00)
 27072  0047C0  5031               	movf	SD_SPI_AsyncWriteTasks@response^0,w,c
 27073  0047C2  A4D8               	btfss	status,2,c
 27074  0047C4  D00B               	goto	l18585
 27075                           
 27076                           ;sd_spi.c: 1048: {;sd_spi.c: 1049: SD_SendCmd(SD_SET_WRITE_BLOCK_ERASE_COUNT , preEraseB
      +                          lockCount);
 27077  0047C6  C036  F015         	movff	SD_SPI_AsyncWriteTasks@preEraseBlockCount,SD_SendCmd@address
 27078  0047CA  C037  F016         	movff	SD_SPI_AsyncWriteTasks@preEraseBlockCount+1,SD_SendCmd@address+1
 27079  0047CE  C038  F017         	movff	SD_SPI_AsyncWriteTasks@preEraseBlockCount+2,SD_SendCmd@address+2
 27080  0047D2  C039  F018         	movff	SD_SPI_AsyncWriteTasks@preEraseBlockCount+3,SD_SendCmd@address+3
 27081  0047D6  0E13               	movlw	19
 27082  0047D8  EC7D  F02F         	call	_SD_SendCmd
 27083  0047DC                     l18585:
 27084                           
 27085                           ;sd_spi.c: 1050: };sd_spi.c: 1051: };sd_spi.c: 1058: if (mediaInformation.gSDMode == 0)
 27086  0047DC  0103               	movlb	3	; () banked
 27087  0047DE  51DF               	movf	(_mediaInformation+8)& (0+255),w,b
 27088  0047E0  A4D8               	btfss	status,2,c
 27089  0047E2  D008               	goto	l18589
 27090                           
 27091                           ; BSR set to: 3
 27092                           ;sd_spi.c: 1059: {;sd_spi.c: 1060: ioInfo.dwAddress <<= 9;
 27093  0047E4  0E09               	movlw	9
 27094  0047E6                     u19735:
 27095  0047E6  90D8               	bcf	status,0,c
 27096  0047E8  3708               	rlcf	(_ioInfo+8)& (0+255),f,b
 27097  0047EA  3709               	rlcf	(_ioInfo+9)& (0+255),f,b
 27098  0047EC  370A               	rlcf	(_ioInfo+10)& (0+255),f,b
 27099  0047EE  370B               	rlcf	(_ioInfo+11)& (0+255),f,b
 27100  0047F0  2EE8               	decfsz	wreg,f,c
 27101  0047F2  D7F9               	goto	u19735
 27102  0047F4                     l18589:
 27103                           
 27104                           ; BSR set to: 3
 27105                           ;sd_spi.c: 1061: };sd_spi.c: 1065: response = SD_SendCmd(command, ioInfo.dwAddress);
 27106  0047F4  C308  F015         	movff	_ioInfo+8,SD_SendCmd@address
 27107  0047F8  C309  F016         	movff	_ioInfo+9,SD_SendCmd@address+1
 27108  0047FC  C30A  F017         	movff	_ioInfo+10,SD_SendCmd@address+2
 27109  004800  C30B  F018         	movff	_ioInfo+11,SD_SendCmd@address+3
 27110  004804  0102               	movlb	2	; () banked
 27111  004806  51E5               	movf	SD_SPI_AsyncWriteTasks@command& (0+255),w,b
 27112  004808  EC7D  F02F         	call	_SD_SendCmd
 27113  00480C  EE20  F031         	lfsr	2,SD_SPI_AsyncWriteTasks@response
 27114  004810  0E04               	movlw	4
 27115  004812                     u19741:
 27116  004812  CFEB FFDB          	movff	plusw0,plusw2
 27117  004816  06E8               	decf	wreg,f,c
 27118  004818  E2FC               	bc	u19741
 27119                           
 27120                           ;sd_spi.c: 1068: if(response.r1._byte != 0x00)
 27121  00481A  5031               	movf	SD_SPI_AsyncWriteTasks@response^0,w,c
 27122  00481C  B4D8               	btfsc	status,2,c
 27123  00481E  D009               	goto	l18601
 27124                           
 27125                           ;sd_spi.c: 1069: {;sd_spi.c: 1071: info->bStateVariable = 0xFF;
 27126  004820  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27127  004822  6ED9               	movwf	fsr2l,c
 27128  004824  6ADA               	clrf	fsr2h,c
 27129  004826  0E0C               	movlw	12
 27130  004828  26D9               	addwf	fsr2l,f,c
 27131  00482A  0EFF               	movlw	255
 27132  00482C  6EDF               	movwf	indf2,c
 27133  00482E                     l18595:
 27134                           
 27135                           ;sd_spi.c: 1072: return 0xFF;
 27136  00482E  0EFF               	movlw	255
 27137  004830  0012               	return	
 27138  004832                     l18601:
 27139                           
 27140                           ;sd_spi.c: 1074: else;sd_spi.c: 1075: {;sd_spi.c: 1077: info->bStateVariable = 0x02;
 27141  004832  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27142  004834  6ED9               	movwf	fsr2l,c
 27143  004836  6ADA               	clrf	fsr2h,c
 27144  004838  0E0C               	movlw	12
 27145  00483A  26D9               	addwf	fsr2l,f,c
 27146  00483C  0E02               	movlw	2
 27147  00483E  6EDF               	movwf	indf2,c
 27148  004840                     l18603:
 27149                           
 27150                           ;sd_spi.c: 1078: };sd_spi.c: 1079: return 0x02;
 27151  004840  0E02               	movlw	2
 27152  004842  0012               	return	
 27153  004844                     l18607:
 27154                           
 27155                           ;sd_spi.c: 1084: if(blockCounter == 512u)
 27156  004844  0E02               	movlw	2
 27157  004846  0103               	movlb	3	; () banked
 27158  004848  1995               	xorwf	(SD_SPI_AsyncWriteTasks@blockCounter+1)& (0+255),w,b
 27159  00484A  1194               	iorwf	SD_SPI_AsyncWriteTasks@blockCounter& (0+255),w,b
 27160  00484C  A4D8               	btfss	status,2,c
 27161  00484E  D033               	goto	u19799
 27162                           
 27163                           ; BSR set to: 3
 27164                           ;sd_spi.c: 1085: {;sd_spi.c: 1087: if(command == SD_WRITE_MULTI_BLOCK)
 27165  004850  0E0B               	movlw	11
 27166  004852  0102               	movlb	2	; () banked
 27167  004854  19E5               	xorwf	SD_SPI_AsyncWriteTasks@command& (0+255),w,b
 27168  004856  A4D8               	btfss	status,2,c
 27169  004858  D017               	goto	l18613
 27170                           
 27171                           ; BSR set to: 2
 27172                           ;sd_spi.c: 1088: {;sd_spi.c: 1089: (void)spiMaster[SDFAST].exchangeByte(SD_TOKEN_START_M
      +                          ULTI_BLOCK);
 27173  00485A  0E23               	movlw	low (_spiMaster+4)
 27174  00485C  6EF6               	movwf	tblptrl,c
 27175  00485E  0EFA               	movlw	high (_spiMaster+4)
 27176  004860  6EF7               	movwf	tblptrh,c
 27177  004862                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27178  004862  6AF8               	clrf	tblptru,c
 27179  004864                     	endif
 27180  004864                     	if	0	;tblptru may be non-zero
 27181  004864                     	endif
 27182  004864  0009               	tblrd		*+
 27183  004866  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27184  00486A  0009               	tblrd		*+
 27185  00486C  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27186  004870  D801               	call	u19788
 27187  004872  D021               	goto	u19799
 27188  004874                     u19788:
 27189  004874  0005               	push	
 27190  004876  6EFA               	movwf	pclath,c
 27191  004878  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27192  00487A  6EFD               	movwf	tosl,c
 27193  00487C  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27194  00487E  6EFE               	movwf	tosh,c
 27195  004880  6AFF               	clrf	tosu,c
 27196  004882  50FA               	movf	pclath,w,c
 27197  004884  0EFC               	movlw	252
 27198  004886  0012               	return		;indir
 27199  004888                     l18613:
 27200                           
 27201                           ; BSR set to: 2
 27202                           ;sd_spi.c: 1091: else;sd_spi.c: 1092: {;sd_spi.c: 1094: (void)spiMaster[SDFAST].exchange
      +                          Byte(SD_TOKEN_START);
 27203  004888  0E23               	movlw	low (_spiMaster+4)
 27204  00488A  6EF6               	movwf	tblptrl,c
 27205  00488C  0EFA               	movlw	high (_spiMaster+4)
 27206  00488E  6EF7               	movwf	tblptrh,c
 27207  004890                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27208  004890  6AF8               	clrf	tblptru,c
 27209  004892                     	endif
 27210  004892                     	if	0	;tblptru may be non-zero
 27211  004892                     	endif
 27212  004892  0009               	tblrd		*+
 27213  004894  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27214  004898  0009               	tblrd		*+
 27215  00489A  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27216  00489E  D801               	call	u19798
 27217  0048A0  D00A               	goto	u19799
 27218  0048A2                     u19798:
 27219  0048A2  0005               	push	
 27220  0048A4  6EFA               	movwf	pclath,c
 27221  0048A6  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27222  0048A8  6EFD               	movwf	tosl,c
 27223  0048AA  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27224  0048AC  6EFE               	movwf	tosh,c
 27225  0048AE  6AFF               	clrf	tosu,c
 27226  0048B0  50FA               	movf	pclath,w,c
 27227  0048B2  0EFE               	movlw	254
 27228  0048B4  0012               	return		;indir
 27229  0048B6                     u19799:
 27230                           
 27231                           ;sd_spi.c: 1095: };sd_spi.c: 1096: };sd_spi.c: 1100: ioInfo.wNumBytes = info->wNumBytes;
 27232  0048B6  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27233  0048B8  6ED9               	movwf	fsr2l,c
 27234  0048BA  6ADA               	clrf	fsr2h,c
 27235  0048BC  CFDE F300          	movff	postinc2,_ioInfo
 27236  0048C0  CFDD F301          	movff	postdec2,_ioInfo+1
 27237                           
 27238                           ;sd_spi.c: 1101: ioInfo.pBuffer = info->pBuffer;
 27239  0048C4  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27240  0048C6  6ED9               	movwf	fsr2l,c
 27241  0048C8  6ADA               	clrf	fsr2h,c
 27242  0048CA  0E06               	movlw	6
 27243  0048CC  26D9               	addwf	fsr2l,f,c
 27244  0048CE  CFDE F306          	movff	postinc2,_ioInfo+6
 27245  0048D2  CFDD F307          	movff	postdec2,_ioInfo+7
 27246                           
 27247                           ;sd_spi.c: 1104: ioInfo.dwBytesRemaining -= ioInfo.wNumBytes;
 27248  0048D6  0103               	movlb	3	; () banked
 27249  0048D8  5100               	movf	_ioInfo& (0+255),w,b
 27250  0048DA  6E2D               	movwf	??_SD_SPI_AsyncWriteTasks^0,c
 27251  0048DC  5101               	movf	(_ioInfo+1)& (0+255),w,b
 27252  0048DE  6E2E               	movwf	(??_SD_SPI_AsyncWriteTasks+1)^0,c
 27253  0048E0  6A2F               	clrf	(??_SD_SPI_AsyncWriteTasks+2)^0,c
 27254  0048E2  6A30               	clrf	(??_SD_SPI_AsyncWriteTasks+3)^0,c
 27255  0048E4  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27256  0048E6  5F02               	subwf	(_ioInfo+2)& (0+255),f,b
 27257  0048E8  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27258  0048EA  5B03               	subwfb	(_ioInfo+3)& (0+255),f,b
 27259  0048EC  502F               	movf	(??_SD_SPI_AsyncWriteTasks+2)^0,w,c
 27260  0048EE  5B04               	subwfb	(_ioInfo+4)& (0+255),f,b
 27261  0048F0  5030               	movf	(??_SD_SPI_AsyncWriteTasks+3)^0,w,c
 27262  0048F2  5B05               	subwfb	(_ioInfo+5)& (0+255),f,b
 27263                           
 27264                           ; BSR set to: 3
 27265                           ;sd_spi.c: 1105: blockCounter -= ioInfo.wNumBytes;
 27266  0048F4  5100               	movf	_ioInfo& (0+255),w,b
 27267  0048F6  5F94               	subwf	SD_SPI_AsyncWriteTasks@blockCounter& (0+255),f,b
 27268  0048F8  5101               	movf	(_ioInfo+1)& (0+255),w,b
 27269  0048FA  5B95               	subwfb	(SD_SPI_AsyncWriteTasks@blockCounter+1)& (0+255),f,b
 27270                           
 27271                           ; BSR set to: 3
 27272                           ;sd_spi.c: 1107: spiMaster[SDFAST].exchangeBlock(ioInfo.pBuffer, ioInfo.wNumBytes);
 27273  0048FC  C306  F00E         	movff	_ioInfo+6,SPI1_ExchangeBlock@block
 27274  004900  C307  F00F         	movff	_ioInfo+7,SPI1_ExchangeBlock@block+1
 27275  004904  C300  F010         	movff	_ioInfo,SPI1_ExchangeBlock@blockSize
 27276  004908  C301  F011         	movff	_ioInfo+1,SPI1_ExchangeBlock@blockSize+1
 27277  00490C  0E25               	movlw	low (_spiMaster+6)
 27278  00490E  6EF6               	movwf	tblptrl,c
 27279  004910  0EFA               	movlw	high (_spiMaster+6)
 27280  004912  6EF7               	movwf	tblptrh,c
 27281  004914                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27282  004914  6AF8               	clrf	tblptru,c
 27283  004916                     	endif
 27284  004916                     	if	0	;tblptru may be non-zero
 27285  004916                     	endif
 27286  004916  0009               	tblrd		*+
 27287  004918  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27288  00491C  0009               	tblrd		*+
 27289  00491E  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27290  004922  D801               	call	u19808
 27291  004924  D009               	goto	u19809
 27292  004926                     u19808:
 27293  004926  0005               	push	
 27294  004928  6EFA               	movwf	pclath,c
 27295  00492A  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27296  00492C  6EFD               	movwf	tosl,c
 27297  00492E  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27298  004930  6EFE               	movwf	tosh,c
 27299  004932  6AFF               	clrf	tosu,c
 27300  004934  50FA               	movf	pclath,w,c
 27301  004936  0012               	return		;indir
 27302  004938                     u19809:
 27303                           
 27304                           ; BSR set to: 3
 27305                           ;sd_spi.c: 1111: if(blockCounter == 0)
 27306  004938  5194               	movf	SD_SPI_AsyncWriteTasks@blockCounter& (0+255),w,b
 27307  00493A  1195               	iorwf	(SD_SPI_AsyncWriteTasks@blockCounter+1)& (0+255),w,b
 27308  00493C  A4D8               	btfss	status,2,c
 27309  00493E  D780               	goto	l18603
 27310                           
 27311                           ; BSR set to: 3
 27312                           ;sd_spi.c: 1112: {;sd_spi.c: 1113: blockCounter = 512u;
 27313  004940  0E02               	movlw	2
 27314  004942  6F95               	movwf	(SD_SPI_AsyncWriteTasks@blockCounter+1)& (0+255),b
 27315  004944  0E00               	movlw	0
 27316  004946  6F94               	movwf	SD_SPI_AsyncWriteTasks@blockCounter& (0+255),b
 27317                           
 27318                           ; BSR set to: 3
 27319                           ;sd_spi.c: 1116: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 27320  004948  0E23               	movlw	low (_spiMaster+4)
 27321  00494A  6EF6               	movwf	tblptrl,c
 27322  00494C  0EFA               	movlw	high (_spiMaster+4)
 27323  00494E  6EF7               	movwf	tblptrh,c
 27324  004950                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27325  004950  6AF8               	clrf	tblptru,c
 27326  004952                     	endif
 27327  004952                     	if	0	;tblptru may be non-zero
 27328  004952                     	endif
 27329  004952  0009               	tblrd		*+
 27330  004954  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27331  004958  0009               	tblrd		*+
 27332  00495A  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27333  00495E  D801               	call	u19828
 27334  004960  D00A               	goto	u19829
 27335  004962                     u19828:
 27336  004962  0005               	push	
 27337  004964  6EFA               	movwf	pclath,c
 27338  004966  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27339  004968  6EFD               	movwf	tosl,c
 27340  00496A  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27341  00496C  6EFE               	movwf	tosh,c
 27342  00496E  6AFF               	clrf	tosu,c
 27343  004970  50FA               	movf	pclath,w,c
 27344  004972  0EFF               	movlw	255
 27345  004974  0012               	return		;indir
 27346  004976                     u19829:
 27347                           
 27348                           ;sd_spi.c: 1117: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 27349  004976  0E23               	movlw	low (_spiMaster+4)
 27350  004978  6EF6               	movwf	tblptrl,c
 27351  00497A  0EFA               	movlw	high (_spiMaster+4)
 27352  00497C  6EF7               	movwf	tblptrh,c
 27353  00497E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27354  00497E  6AF8               	clrf	tblptru,c
 27355  004980                     	endif
 27356  004980                     	if	0	;tblptru may be non-zero
 27357  004980                     	endif
 27358  004980  0009               	tblrd		*+
 27359  004982  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27360  004986  0009               	tblrd		*+
 27361  004988  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27362  00498C  D801               	call	u19838
 27363  00498E  D00A               	goto	u19839
 27364  004990                     u19838:
 27365  004990  0005               	push	
 27366  004992  6EFA               	movwf	pclath,c
 27367  004994  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27368  004996  6EFD               	movwf	tosl,c
 27369  004998  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27370  00499A  6EFE               	movwf	tosh,c
 27371  00499C  6AFF               	clrf	tosu,c
 27372  00499E  50FA               	movf	pclath,w,c
 27373  0049A0  0EFF               	movlw	255
 27374  0049A2  0012               	return		;indir
 27375  0049A4                     u19839:
 27376                           
 27377                           ;sd_spi.c: 1121: if((spiMaster[SDFAST].exchangeByte(0xFF) & 0x1F) != SD_TOKEN_DATA_ACCEP
      +                          TED)
 27378  0049A4  0E23               	movlw	low (_spiMaster+4)
 27379  0049A6  6EF6               	movwf	tblptrl,c
 27380  0049A8  0EFA               	movlw	high (_spiMaster+4)
 27381  0049AA  6EF7               	movwf	tblptrh,c
 27382  0049AC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27383  0049AC  6AF8               	clrf	tblptru,c
 27384  0049AE                     	endif
 27385  0049AE                     	if	0	;tblptru may be non-zero
 27386  0049AE                     	endif
 27387  0049AE  0009               	tblrd		*+
 27388  0049B0  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27389  0049B4  0009               	tblrd		*+
 27390  0049B6  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27391  0049BA  D801               	call	u19848
 27392  0049BC  D00A               	goto	u19849
 27393  0049BE                     u19848:
 27394  0049BE  0005               	push	
 27395  0049C0  6EFA               	movwf	pclath,c
 27396  0049C2  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27397  0049C4  6EFD               	movwf	tosl,c
 27398  0049C6  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27399  0049C8  6EFE               	movwf	tosh,c
 27400  0049CA  6AFF               	clrf	tosu,c
 27401  0049CC  50FA               	movf	pclath,w,c
 27402  0049CE  0EFF               	movlw	255
 27403  0049D0  0012               	return		;indir
 27404  0049D2                     u19849:
 27405  0049D2  0B1F               	andlw	31
 27406  0049D4  0A05               	xorlw	5
 27407  0049D6  B4D8               	btfsc	status,2,c
 27408  0049D8  D009               	goto	l18641
 27409  0049DA                     u19850:
 27410                           
 27411                           ;sd_spi.c: 1122: {;sd_spi.c: 1125: info->bStateVariable = 0xFE;
 27412  0049DA  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27413  0049DC  6ED9               	movwf	fsr2l,c
 27414  0049DE  6ADA               	clrf	fsr2h,c
 27415  0049E0  0E0C               	movlw	12
 27416  0049E2  26D9               	addwf	fsr2l,f,c
 27417  0049E4  0EFE               	movlw	254
 27418  0049E6                     L25:
 27419  0049E6  6EDF               	movwf	indf2,c
 27420  0049E8                     l18637:
 27421                           
 27422                           ;sd_spi.c: 1126: return 0x03;
 27423  0049E8  0E03               	movlw	3
 27424  0049EA  0012               	return	
 27425  0049EC                     l18641:
 27426                           
 27427                           ;sd_spi.c: 1127: };sd_spi.c: 1132: info->bStateVariable = 0x03;
 27428  0049EC  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27429  0049EE  6ED9               	movwf	fsr2l,c
 27430  0049F0  6ADA               	clrf	fsr2h,c
 27431  0049F2  0E0C               	movlw	12
 27432  0049F4  26D9               	addwf	fsr2l,f,c
 27433  0049F6  0E03               	movlw	3
 27434  0049F8  6EDF               	movwf	indf2,c
 27435                           
 27436                           ;sd_spi.c: 1133: WriteTimeout = (uint32_t)0xA0000;
 27437  0049FA  0E00               	movlw	0
 27438  0049FC  0103               	movlb	3	; () banked
 27439  0049FE  6F61               	movwf	SD_SPI_AsyncWriteTasks@WriteTimeout& (0+255),b
 27440  004A00  0E00               	movlw	0
 27441  004A02  6F62               	movwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+1)& (0+255),b
 27442  004A04  0E0A               	movlw	10
 27443  004A06  6F63               	movwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+2)& (0+255),b
 27444  004A08  0E00               	movlw	0
 27445  004A0A  6F64               	movwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+3)& (0+255),b
 27446  004A0C  D7ED               	goto	l18637
 27447  004A0E                     l18653:
 27448                           
 27449                           ;sd_spi.c: 1142: if(WriteTimeout != 0)
 27450  004A0E  0103               	movlb	3	; () banked
 27451  004A10  5161               	movf	SD_SPI_AsyncWriteTasks@WriteTimeout& (0+255),w,b
 27452  004A12  1162               	iorwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+1)& (0+255),w,b
 27453  004A14  1163               	iorwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+2)& (0+255),w,b
 27454  004A16  1164               	iorwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+3)& (0+255),w,b
 27455  004A18  B4D8               	btfsc	status,2,c
 27456  004A1A  D7DF               	goto	u19850
 27457                           
 27458                           ; BSR set to: 3
 27459                           ;sd_spi.c: 1143: {;sd_spi.c: 1144: WriteTimeout--;
 27460  004A1C  0761               	decf	SD_SPI_AsyncWriteTasks@WriteTimeout& (0+255),f,b
 27461  004A1E  0E00               	movlw	0
 27462  004A20  5B62               	subwfb	(SD_SPI_AsyncWriteTasks@WriteTimeout+1)& (0+255),f,b
 27463  004A22  5B63               	subwfb	(SD_SPI_AsyncWriteTasks@WriteTimeout+2)& (0+255),f,b
 27464  004A24  5B64               	subwfb	(SD_SPI_AsyncWriteTasks@WriteTimeout+3)& (0+255),f,b
 27465                           
 27466                           ; BSR set to: 3
 27467                           ;sd_spi.c: 1145: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 27468  004A26  0E23               	movlw	low (_spiMaster+4)
 27469  004A28  6EF6               	movwf	tblptrl,c
 27470  004A2A  0EFA               	movlw	high (_spiMaster+4)
 27471  004A2C  6EF7               	movwf	tblptrh,c
 27472  004A2E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27473  004A2E  6AF8               	clrf	tblptru,c
 27474  004A30                     	endif
 27475  004A30                     	if	0	;tblptru may be non-zero
 27476  004A30                     	endif
 27477  004A30  0009               	tblrd		*+
 27478  004A32  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27479  004A36  0009               	tblrd		*+
 27480  004A38  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27481  004A3C  D801               	call	u19878
 27482  004A3E  D00A               	goto	u19879
 27483  004A40                     u19878:
 27484  004A40  0005               	push	
 27485  004A42  6EFA               	movwf	pclath,c
 27486  004A44  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27487  004A46  6EFD               	movwf	tosl,c
 27488  004A48  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27489  004A4A  6EFE               	movwf	tosh,c
 27490  004A4C  6AFF               	clrf	tosu,c
 27491  004A4E  50FA               	movf	pclath,w,c
 27492  004A50  0EFF               	movlw	255
 27493  004A52  0012               	return		;indir
 27494  004A54                     u19879:
 27495                           
 27496                           ;sd_spi.c: 1146: data_byte = spiMaster[SDFAST].exchangeByte(0xFF);
 27497  004A54  0E23               	movlw	low (_spiMaster+4)
 27498  004A56  6EF6               	movwf	tblptrl,c
 27499  004A58  0EFA               	movlw	high (_spiMaster+4)
 27500  004A5A  6EF7               	movwf	tblptrh,c
 27501  004A5C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27502  004A5C  6AF8               	clrf	tblptru,c
 27503  004A5E                     	endif
 27504  004A5E                     	if	0	;tblptru may be non-zero
 27505  004A5E                     	endif
 27506  004A5E  0009               	tblrd		*+
 27507  004A60  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27508  004A64  0009               	tblrd		*+
 27509  004A66  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27510  004A6A  D801               	call	u19888
 27511  004A6C  D00A               	goto	u19889
 27512  004A6E                     u19888:
 27513  004A6E  0005               	push	
 27514  004A70  6EFA               	movwf	pclath,c
 27515  004A72  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27516  004A74  6EFD               	movwf	tosl,c
 27517  004A76  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27518  004A78  6EFE               	movwf	tosh,c
 27519  004A7A  6AFF               	clrf	tosu,c
 27520  004A7C  50FA               	movf	pclath,w,c
 27521  004A7E  0EFF               	movlw	255
 27522  004A80  0012               	return		;indir
 27523  004A82                     u19889:
 27524  004A82  0103               	movlb	3	; () banked
 27525  004A84  6FA7               	movwf	SD_SPI_AsyncWriteTasks@data_byte& (0+255),b
 27526                           
 27527                           ; BSR set to: 3
 27528                           ;sd_spi.c: 1147: if(data_byte != 0x00)
 27529  004A86  51A7               	movf	SD_SPI_AsyncWriteTasks@data_byte& (0+255),w,b
 27530  004A88  B4D8               	btfsc	status,2,c
 27531  004A8A  D7AE               	goto	l18637
 27532                           
 27533                           ; BSR set to: 3
 27534                           ;sd_spi.c: 1148: {;sd_spi.c: 1152: if(ioInfo.dwBytesRemaining == 0)
 27535  004A8C  5102               	movf	(_ioInfo+2)& (0+255),w,b
 27536  004A8E  1103               	iorwf	(_ioInfo+3)& (0+255),w,b
 27537  004A90  1104               	iorwf	(_ioInfo+4)& (0+255),w,b
 27538  004A92  1105               	iorwf	(_ioInfo+5)& (0+255),w,b
 27539  004A94  A4D8               	btfss	status,2,c
 27540  004A96  D6CD               	goto	l18601
 27541                           
 27542                           ; BSR set to: 3
 27543                           ;sd_spi.c: 1153: {;sd_spi.c: 1154: WriteTimeout = (uint32_t)0xA0000;
 27544  004A98  0E00               	movlw	0
 27545  004A9A  6F61               	movwf	SD_SPI_AsyncWriteTasks@WriteTimeout& (0+255),b
 27546  004A9C  0E00               	movlw	0
 27547  004A9E  6F62               	movwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+1)& (0+255),b
 27548  004AA0  0E0A               	movlw	10
 27549  004AA2  6F63               	movwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+2)& (0+255),b
 27550  004AA4  0E00               	movlw	0
 27551  004AA6  6F64               	movwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+3)& (0+255),b
 27552                           
 27553                           ; BSR set to: 3
 27554                           ;sd_spi.c: 1155: if(command == SD_WRITE_MULTI_BLOCK)
 27555  004AA8  0E0B               	movlw	11
 27556  004AAA  0102               	movlb	2	; () banked
 27557  004AAC  19E5               	xorwf	SD_SPI_AsyncWriteTasks@command& (0+255),w,b
 27558  004AAE  A4D8               	btfss	status,2,c
 27559  004AB0  D035               	goto	l1087
 27560                           
 27561                           ; BSR set to: 2
 27562                           ;sd_spi.c: 1156: {;sd_spi.c: 1158: (void)spiMaster[SDFAST].exchangeByte(SD_TOKEN_STOP_TR
      +                          ANSMISSION);
 27563  004AB2  0E23               	movlw	low (_spiMaster+4)
 27564  004AB4  6EF6               	movwf	tblptrl,c
 27565  004AB6  0EFA               	movlw	high (_spiMaster+4)
 27566  004AB8  6EF7               	movwf	tblptrh,c
 27567  004ABA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27568  004ABA  6AF8               	clrf	tblptru,c
 27569  004ABC                     	endif
 27570  004ABC                     	if	0	;tblptru may be non-zero
 27571  004ABC                     	endif
 27572  004ABC  0009               	tblrd		*+
 27573  004ABE  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27574  004AC2  0009               	tblrd		*+
 27575  004AC4  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27576  004AC8  D801               	call	u19928
 27577  004ACA  D00A               	goto	u19929
 27578  004ACC                     u19928:
 27579  004ACC  0005               	push	
 27580  004ACE  6EFA               	movwf	pclath,c
 27581  004AD0  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27582  004AD2  6EFD               	movwf	tosl,c
 27583  004AD4  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27584  004AD6  6EFE               	movwf	tosh,c
 27585  004AD8  6AFF               	clrf	tosu,c
 27586  004ADA  50FA               	movf	pclath,w,c
 27587  004ADC  0EFD               	movlw	253
 27588  004ADE  0012               	return		;indir
 27589  004AE0                     u19929:
 27590                           
 27591                           ;sd_spi.c: 1165: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 27592  004AE0  0E23               	movlw	low (_spiMaster+4)
 27593  004AE2  6EF6               	movwf	tblptrl,c
 27594  004AE4  0EFA               	movlw	high (_spiMaster+4)
 27595  004AE6  6EF7               	movwf	tblptrh,c
 27596  004AE8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27597  004AE8  6AF8               	clrf	tblptru,c
 27598  004AEA                     	endif
 27599  004AEA                     	if	0	;tblptru may be non-zero
 27600  004AEA                     	endif
 27601  004AEA  0009               	tblrd		*+
 27602  004AEC  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27603  004AF0  0009               	tblrd		*+
 27604  004AF2  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27605  004AF6  D801               	call	u19938
 27606  004AF8  D00A               	goto	u19939
 27607  004AFA                     u19938:
 27608  004AFA  0005               	push	
 27609  004AFC  6EFA               	movwf	pclath,c
 27610  004AFE  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27611  004B00  6EFD               	movwf	tosl,c
 27612  004B02  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27613  004B04  6EFE               	movwf	tosh,c
 27614  004B06  6AFF               	clrf	tosu,c
 27615  004B08  50FA               	movf	pclath,w,c
 27616  004B0A  0EFF               	movlw	255
 27617  004B0C  0012               	return		;indir
 27618  004B0E                     u19939:
 27619                           
 27620                           ;sd_spi.c: 1168: info->bStateVariable = 0x04;
 27621  004B0E  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27622  004B10  6ED9               	movwf	fsr2l,c
 27623  004B12  6ADA               	clrf	fsr2h,c
 27624  004B14  0E0C               	movlw	12
 27625  004B16  26D9               	addwf	fsr2l,f,c
 27626  004B18  0E04               	movlw	4
 27627  004B1A  D765               	goto	L25
 27628  004B1C                     l1087:
 27629                           
 27630                           ; BSR set to: 2
 27631  004B1C  8C89               	bsf	137,6,c	;volatile
 27632                           
 27633                           ; BSR set to: 2
 27634                           ;sd_spi.c: 1177: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 27635  004B1E  0E23               	movlw	low (_spiMaster+4)
 27636  004B20  6EF6               	movwf	tblptrl,c
 27637  004B22  0EFA               	movlw	high (_spiMaster+4)
 27638  004B24  6EF7               	movwf	tblptrh,c
 27639  004B26                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27640  004B26  6AF8               	clrf	tblptru,c
 27641  004B28                     	endif
 27642  004B28                     	if	0	;tblptru may be non-zero
 27643  004B28                     	endif
 27644  004B28  0009               	tblrd		*+
 27645  004B2A  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27646  004B2E  0009               	tblrd		*+
 27647  004B30  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27648  004B34  D801               	call	u19948
 27649  004B36  D00A               	goto	u19949
 27650  004B38                     u19948:
 27651  004B38  0005               	push	
 27652  004B3A  6EFA               	movwf	pclath,c
 27653  004B3C  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27654  004B3E  6EFD               	movwf	tosl,c
 27655  004B40  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27656  004B42  6EFE               	movwf	tosh,c
 27657  004B44  6AFF               	clrf	tosu,c
 27658  004B46  50FA               	movf	pclath,w,c
 27659  004B48  0EFF               	movlw	255
 27660  004B4A  0012               	return		;indir
 27661  004B4C                     u19949:
 27662                           
 27663                           ;sd_spi.c: 1178: info->bStateVariable = 0x00;
 27664  004B4C  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27665  004B4E  6ED9               	movwf	fsr2l,c
 27666  004B50  6ADA               	clrf	fsr2h,c
 27667  004B52  0E0C               	movlw	12
 27668  004B54  26D9               	addwf	fsr2l,f,c
 27669  004B56  0E00               	movlw	0
 27670  004B58  6EDF               	movwf	indf2,c
 27671                           
 27672                           ;sd_spi.c: 1179: mediaInformation.state = SD_STATE_READY_FOR_COMMAND;
 27673  004B5A  0E01               	movlw	1
 27674  004B5C  0103               	movlb	3	; () banked
 27675  004B5E  6FDA               	movwf	(_mediaInformation+3)& (0+255),b
 27676  004B60  D5D6               	goto	l18559
 27677  004B62                     l18707:
 27678                           
 27679                           ;sd_spi.c: 1207: if(WriteTimeout != 0)
 27680  004B62  0103               	movlb	3	; () banked
 27681  004B64  5161               	movf	SD_SPI_AsyncWriteTasks@WriteTimeout& (0+255),w,b
 27682  004B66  1162               	iorwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+1)& (0+255),w,b
 27683  004B68  1163               	iorwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+2)& (0+255),w,b
 27684  004B6A  1164               	iorwf	(SD_SPI_AsyncWriteTasks@WriteTimeout+3)& (0+255),w,b
 27685  004B6C  B4D8               	btfsc	status,2,c
 27686  004B6E  D039               	goto	l18729
 27687                           
 27688                           ; BSR set to: 3
 27689                           ;sd_spi.c: 1208: {;sd_spi.c: 1209: WriteTimeout--;
 27690  004B70  0761               	decf	SD_SPI_AsyncWriteTasks@WriteTimeout& (0+255),f,b
 27691  004B72  0E00               	movlw	0
 27692  004B74  5B62               	subwfb	(SD_SPI_AsyncWriteTasks@WriteTimeout+1)& (0+255),f,b
 27693  004B76  5B63               	subwfb	(SD_SPI_AsyncWriteTasks@WriteTimeout+2)& (0+255),f,b
 27694  004B78  5B64               	subwfb	(SD_SPI_AsyncWriteTasks@WriteTimeout+3)& (0+255),f,b
 27695                           
 27696                           ; BSR set to: 3
 27697                           ;sd_spi.c: 1210: data_byte = spiMaster[SDFAST].exchangeByte(0xFF);
 27698  004B7A  0E23               	movlw	low (_spiMaster+4)
 27699  004B7C  6EF6               	movwf	tblptrl,c
 27700  004B7E  0EFA               	movlw	high (_spiMaster+4)
 27701  004B80  6EF7               	movwf	tblptrh,c
 27702  004B82                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27703  004B82  6AF8               	clrf	tblptru,c
 27704  004B84                     	endif
 27705  004B84                     	if	0	;tblptru may be non-zero
 27706  004B84                     	endif
 27707  004B84  0009               	tblrd		*+
 27708  004B86  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27709  004B8A  0009               	tblrd		*+
 27710  004B8C  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27711  004B90  D801               	call	u19968
 27712  004B92  D00A               	goto	u19969
 27713  004B94                     u19968:
 27714  004B94  0005               	push	
 27715  004B96  6EFA               	movwf	pclath,c
 27716  004B98  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27717  004B9A  6EFD               	movwf	tosl,c
 27718  004B9C  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27719  004B9E  6EFE               	movwf	tosh,c
 27720  004BA0  6AFF               	clrf	tosu,c
 27721  004BA2  50FA               	movf	pclath,w,c
 27722  004BA4  0EFF               	movlw	255
 27723  004BA6  0012               	return		;indir
 27724  004BA8                     u19969:
 27725  004BA8  0103               	movlb	3	; () banked
 27726  004BAA  6FA7               	movwf	SD_SPI_AsyncWriteTasks@data_byte& (0+255),b
 27727                           
 27728                           ; BSR set to: 3
 27729                           ;sd_spi.c: 1212: if(data_byte != 0x00)
 27730  004BAC  51A7               	movf	SD_SPI_AsyncWriteTasks@data_byte& (0+255),w,b
 27731  004BAE  B4D8               	btfsc	status,2,c
 27732  004BB0  D71B               	goto	l18637
 27733                           
 27734                           ; BSR set to: 3
 27735                           
 27736                           ;sd_spi.c: 1213: {;sd_spi.c: 1221: do { LATAbits.LATA6 = 1; } while(0);
 27737  004BB2  8C89               	bsf	137,6,c	;volatile
 27738                           
 27739                           ; BSR set to: 3
 27740                           ;sd_spi.c: 1222: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 27741  004BB4  0E23               	movlw	low (_spiMaster+4)
 27742  004BB6  6EF6               	movwf	tblptrl,c
 27743  004BB8  0EFA               	movlw	high (_spiMaster+4)
 27744  004BBA  6EF7               	movwf	tblptrh,c
 27745  004BBC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27746  004BBC  6AF8               	clrf	tblptru,c
 27747  004BBE                     	endif
 27748  004BBE                     	if	0	;tblptru may be non-zero
 27749  004BBE                     	endif
 27750  004BBE  0009               	tblrd		*+
 27751  004BC0  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27752  004BC4  0009               	tblrd		*+
 27753  004BC6  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27754  004BCA  D801               	call	u19988
 27755  004BCC  D7BF               	goto	u19949
 27756  004BCE                     u19988:
 27757  004BCE  0005               	push	
 27758  004BD0  6EFA               	movwf	pclath,c
 27759  004BD2  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27760  004BD4  6EFD               	movwf	tosl,c
 27761  004BD6  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27762  004BD8  6EFE               	movwf	tosh,c
 27763  004BDA  6AFF               	clrf	tosu,c
 27764  004BDC  50FA               	movf	pclath,w,c
 27765  004BDE  0EFF               	movlw	255
 27766  004BE0  0012               	return		;indir
 27767  004BE2                     l18729:
 27768                           
 27769                           ;sd_spi.c: 1234: (void)SD_SendCmd(SD_STOP_TRANSMISSION, 0x00000000);
 27770  004BE2  0E00               	movlw	0
 27771  004BE4  6E15               	movwf	SD_SendCmd@address^0,c
 27772  004BE6  0E00               	movlw	0
 27773  004BE8  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 27774  004BEA  0E00               	movlw	0
 27775  004BEC  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 27776  004BEE  0E00               	movlw	0
 27777  004BF0  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 27778  004BF2  0E05               	movlw	5
 27779  004BF4  EC7D  F02F         	call	_SD_SendCmd
 27780  004BF8  8C89               	bsf	137,6,c	;volatile
 27781                           
 27782                           ;sd_spi.c: 1236: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 27783  004BFA  0E23               	movlw	low (_spiMaster+4)
 27784  004BFC  6EF6               	movwf	tblptrl,c
 27785  004BFE  0EFA               	movlw	high (_spiMaster+4)
 27786  004C00  6EF7               	movwf	tblptrh,c
 27787  004C02                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27788  004C02  6AF8               	clrf	tblptru,c
 27789  004C04                     	endif
 27790  004C04                     	if	0	;tblptru may be non-zero
 27791  004C04                     	endif
 27792  004C04  0009               	tblrd		*+
 27793  004C06  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncWriteTasks
 27794  004C0A  0009               	tblrd		*+
 27795  004C0C  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncWriteTasks+1
 27796  004C10  D801               	call	u19998
 27797  004C12  D00A               	goto	u19999
 27798  004C14                     u19998:
 27799  004C14  0005               	push	
 27800  004C16  6EFA               	movwf	pclath,c
 27801  004C18  502D               	movf	??_SD_SPI_AsyncWriteTasks^0,w,c
 27802  004C1A  6EFD               	movwf	tosl,c
 27803  004C1C  502E               	movf	(??_SD_SPI_AsyncWriteTasks+1)^0,w,c
 27804  004C1E  6EFE               	movwf	tosh,c
 27805  004C20  6AFF               	clrf	tosu,c
 27806  004C22  50FA               	movf	pclath,w,c
 27807  004C24  0EFF               	movlw	255
 27808  004C26  0012               	return		;indir
 27809  004C28                     u19999:
 27810                           
 27811                           ;sd_spi.c: 1237: info->bStateVariable = 0xFF;
 27812  004C28  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27813  004C2A  6ED9               	movwf	fsr2l,c
 27814  004C2C  6ADA               	clrf	fsr2h,c
 27815  004C2E  0E0C               	movlw	12
 27816  004C30  26D9               	addwf	fsr2l,f,c
 27817  004C32  0EFF               	movlw	255
 27818  004C34  6EDF               	movwf	indf2,c
 27819  004C36                     l18737:
 27820                           
 27821                           ;sd_spi.c: 1241: mediaInformation.state = SD_STATE_READY_FOR_COMMAND;
 27822  004C36  0E01               	movlw	1
 27823  004C38  0103               	movlb	3	; () banked
 27824  004C3A  6FDA               	movwf	(_mediaInformation+3)& (0+255),b
 27825  004C3C  D5F8               	goto	l18595
 27826  004C3E                     l18745:
 27827  004C3E  502C               	movf	SD_SPI_AsyncWriteTasks@info^0,w,c
 27828  004C40  6ED9               	movwf	fsr2l,c
 27829  004C42  6ADA               	clrf	fsr2h,c
 27830  004C44  0E0C               	movlw	12
 27831  004C46  26D9               	addwf	fsr2l,f,c
 27832  004C48  50DF               	movf	indf2,w,c
 27833                           
 27834                           ; Switch size 1, requested type "simple"
 27835                           ; Number of cases is 6, Range of values is 0 to 254
 27836                           ; switch strategies available:
 27837                           ; Name         Instructions Cycles
 27838                           ; simple_byte           19    10 (average)
 27839                           ;	Chosen strategy is simple_byte
 27840  004C4A  0A00               	xorlw	0	; case 0
 27841  004C4C  B4D8               	btfsc	status,2,c
 27842  004C4E  D55F               	goto	l18559
 27843  004C50  0A01               	xorlw	1	; case 1
 27844  004C52  B4D8               	btfsc	status,2,c
 27845  004C54  D55E               	goto	l18563
 27846  004C56  0A03               	xorlw	3	; case 2
 27847  004C58  B4D8               	btfsc	status,2,c
 27848  004C5A  D5F4               	goto	l18607
 27849  004C5C  0A01               	xorlw	1	; case 3
 27850  004C5E  B4D8               	btfsc	status,2,c
 27851  004C60  D6D6               	goto	l18653
 27852  004C62  0A07               	xorlw	7	; case 4
 27853  004C64  B4D8               	btfsc	status,2,c
 27854  004C66  D77D               	goto	l18707
 27855  004C68  0AFA               	xorlw	250	; case 254
 27856  004C6A  B4D8               	btfsc	status,2,c
 27857  004C6C  D7BA               	goto	l18729
 27858  004C6E  D7E3               	goto	l18737
 27859  004C70                     __end_of_SD_SPI_AsyncWriteTasks:
 27860                           	callstack 0
 27861                           
 27862 ;; *************** function _disk_read *****************
 27863 ;; Defined at:
 27864 ;;		line 90 in file "mcc_generated_files/fatfs/diskio.c"
 27865 ;; Parameters:    Size  Location     Type
 27866 ;;  pdrv            1    wreg     unsigned char 
 27867 ;;  buff            2   17[BANK0 ] PTR unsigned char 
 27868 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 27869 ;;  sector          4   19[BANK0 ] unsigned long 
 27870 ;;  count           2   23[BANK0 ] unsigned int 
 27871 ;; Auto vars:     Size  Location     Type
 27872 ;;  pdrv            1   64[COMRAM] unsigned char 
 27873 ;;  res             1   65[COMRAM] enum E10
 27874 ;; Return value:  Size  Location     Type
 27875 ;;                  1    wreg      enum E203
 27876 ;; Registers used:
 27877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 27878 ;; Tracked objects:
 27879 ;;		On entry : 3F/0
 27880 ;;		On exit  : 0/0
 27881 ;;		Unchanged: 0/0
 27882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27883 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27884 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27886 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27887 ;;Total ram usage:       10 bytes
 27888 ;; Hardware stack levels used:    1
 27889 ;; Hardware stack levels required when called:   10
 27890 ;; This function calls:
 27891 ;;		_SD_SPI_SectorRead
 27892 ;; This function is called by:
 27893 ;;		_move_window
 27894 ;; This function uses a non-reentrant model
 27895 ;;
 27896                           
 27897                           	psect	text98
 27898  00E8EA                     __ptext98:
 27899                           	callstack 0
 27900  00E8EA                     _disk_read:
 27901                           	callstack 17
 27902                           
 27903                           ;incstack = 0
 27904                           ;disk_read@pdrv stored from wreg
 27905  00E8EA  6E41               	movwf	disk_read@pdrv^0,c
 27906                           
 27907                           ;diskio.c: 97: DRESULT res = RES_PARERR;
 27908  00E8EC  0E04               	movlw	4
 27909  00E8EE  6E42               	movwf	disk_read@res^0,c
 27910                           
 27911                           ;diskio.c: 99: switch (pdrv) {
 27912  00E8F0  D01A               	goto	l19175
 27913  00E8F2                     l19167:
 27914                           
 27915                           ;diskio.c: 101: if(SD_SPI_SectorRead(sector, buff, count) == 1)
 27916  00E8F2  C073  F037         	movff	disk_read@sector,SD_SPI_SectorRead@sector_address
 27917  00E8F6  C074  F038         	movff	disk_read@sector+1,SD_SPI_SectorRead@sector_address+1
 27918  00E8FA  C075  F039         	movff	disk_read@sector+2,SD_SPI_SectorRead@sector_address+2
 27919  00E8FE  C076  F03A         	movff	disk_read@sector+3,SD_SPI_SectorRead@sector_address+3
 27920  00E902  C071  F03B         	movff	disk_read@buff,SD_SPI_SectorRead@buffer
 27921  00E906  C072  F03C         	movff	disk_read@buff+1,SD_SPI_SectorRead@buffer+1
 27922  00E90A  C077  F03D         	movff	disk_read@count,SD_SPI_SectorRead@sector_count
 27923  00E90E  C078  F03E         	movff	disk_read@count+1,SD_SPI_SectorRead@sector_count+1
 27924  00E912  EC26  F05C         	call	_SD_SPI_SectorRead
 27925  00E916  06E8               	decf	wreg,f,c
 27926  00E918  A4D8               	btfss	status,2,c
 27927  00E91A  D002               	goto	l19171
 27928                           
 27929                           ;diskio.c: 102: {;diskio.c: 103: res = RES_OK;
 27930  00E91C  0E00               	movlw	0
 27931  00E91E  D001               	goto	L26
 27932  00E920                     l19171:
 27933                           
 27934                           ;diskio.c: 105: else;diskio.c: 106: {;diskio.c: 107: res = RES_ERROR;
 27935  00E920  0E01               	movlw	1
 27936  00E922                     L26:
 27937  00E922  6E42               	movwf	disk_read@res^0,c
 27938  00E924  D004               	goto	l19177
 27939  00E926                     l19175:
 27940  00E926  5041               	movf	disk_read@pdrv^0,w,c
 27941                           
 27942                           ; Switch size 1, requested type "simple"
 27943                           ; Number of cases is 1, Range of values is 0 to 0
 27944                           ; switch strategies available:
 27945                           ; Name         Instructions Cycles
 27946                           ; simple_byte            4     3 (average)
 27947                           ;	Chosen strategy is simple_byte
 27948  00E928  0A00               	xorlw	0	; case 0
 27949  00E92A  B4D8               	btfsc	status,2,c
 27950  00E92C  D7E2               	goto	l19167
 27951  00E92E                     l19177:
 27952                           
 27953                           ;diskio.c: 115: return res;
 27954  00E92E  5042               	movf	disk_read@res^0,w,c
 27955  00E930  0012               	return		;funcret
 27956  00E932                     __end_of_disk_read:
 27957                           	callstack 0
 27958                           
 27959 ;; *************** function _SD_SPI_SectorRead *****************
 27960 ;; Defined at:
 27961 ;;		line 382 in file "mcc_generated_files/sd_spi/sd_spi.c"
 27962 ;; Parameters:    Size  Location     Type
 27963 ;;  sector_addre    4   54[COMRAM] unsigned long 
 27964 ;;  buffer          2   58[COMRAM] PTR unsigned char 
 27965 ;;		 -> drive(559), drive@fatfs_demo$F369(559), NULL(0), 
 27966 ;;  sector_count    2   60[COMRAM] unsigned int 
 27967 ;; Auto vars:     Size  Location     Type
 27968 ;;  info           13    4[BANK0 ] struct SD_ASYNC_IO
 27969 ;;  i               2    2[BANK0 ] unsigned int 
 27970 ;;  status          1    1[BANK0 ] unsigned char 
 27971 ;;  result          1    0[BANK0 ] unsigned char 
 27972 ;; Return value:  Size  Location     Type
 27973 ;;                  1    wreg      unsigned char 
 27974 ;; Registers used:
 27975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 27976 ;; Tracked objects:
 27977 ;;		On entry : 0/0
 27978 ;;		On exit  : 0/0
 27979 ;;		Unchanged: 0/0
 27980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27981 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27982 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27983 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27984 ;;      Totals:        10      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27985 ;;Total ram usage:       27 bytes
 27986 ;; Hardware stack levels used:    1
 27987 ;; Hardware stack levels required when called:    9
 27988 ;; This function calls:
 27989 ;;		_LCD8M_open
 27990 ;;		_SDFAST_open
 27991 ;;		_SDSLOW_open
 27992 ;;		_SD_SPI_AsyncReadTasks
 27993 ;;		_SPI1_Close
 27994 ;;		_Touch2M_open
 27995 ;; This function is called by:
 27996 ;;		_disk_read
 27997 ;; This function uses a non-reentrant model
 27998 ;;
 27999                           
 28000                           	psect	text99
 28001  00B84C                     __ptext99:
 28002                           	callstack 0
 28003  00B84C                     _SD_SPI_SectorRead:
 28004                           	callstack 17
 28005                           
 28006                           ;sd_spi.c: 384: struct SD_ASYNC_IO info;;sd_spi.c: 385: uint8_t status;;sd_spi.c: 386: b
      +                          ool result = 0;
 28007                           
 28008                           ;incstack = 0
 28009  00B84C  0E00               	movlw	0
 28010  00B84E  0100               	movlb	0	; () banked
 28011  00B850  6F60               	movwf	SD_SPI_SectorRead@result& (0+255),b
 28012                           
 28013                           ;sd_spi.c: 387: uint16_t i;;sd_spi.c: 389: for(i=0; i<sector_count; i++)
 28014  00B852  0E00               	movlw	0
 28015  00B854  6F63               	movwf	(SD_SPI_SectorRead@i+1)& (0+255),b
 28016  00B856  0E00               	movlw	0
 28017  00B858  6F62               	movwf	SD_SPI_SectorRead@i& (0+255),b
 28018  00B85A  D071               	goto	l19043
 28019  00B85C                     l19015:
 28020                           
 28021                           ; BSR set to: 0
 28022                           ;sd_spi.c: 390: {;sd_spi.c: 392: info.wNumBytes = 1 << 9;
 28023  00B85C  0E02               	movlw	2
 28024  00B85E  6F65               	movwf	(SD_SPI_SectorRead@info+1)& (0+255),b
 28025  00B860  0E00               	movlw	0
 28026  00B862  6F64               	movwf	SD_SPI_SectorRead@info& (0+255),b
 28027                           
 28028                           ;sd_spi.c: 393: info.dwBytesRemaining = 1 << 9;
 28029  00B864  0E00               	movlw	0
 28030  00B866  6F66               	movwf	(SD_SPI_SectorRead@info+2)& (0+255),b
 28031  00B868  0E02               	movlw	2
 28032  00B86A  6F67               	movwf	(SD_SPI_SectorRead@info+3)& (0+255),b
 28033  00B86C  0E00               	movlw	0
 28034  00B86E  6F68               	movwf	(SD_SPI_SectorRead@info+4)& (0+255),b
 28035  00B870  0E00               	movlw	0
 28036  00B872  6F69               	movwf	(SD_SPI_SectorRead@info+5)& (0+255),b
 28037                           
 28038                           ; BSR set to: 0
 28039                           ;sd_spi.c: 394: info.pBuffer = buffer + (i << 9);
 28040  00B874  C062  F03F         	movff	SD_SPI_SectorRead@i,??_SD_SPI_SectorRead
 28041  00B878  C063  F040         	movff	SD_SPI_SectorRead@i+1,??_SD_SPI_SectorRead+1
 28042  00B87C  0E09               	movlw	9
 28043  00B87E                     u20365:
 28044  00B87E  90D8               	bcf	status,0,c
 28045  00B880  363F               	rlcf	??_SD_SPI_SectorRead^0,f,c
 28046  00B882  3640               	rlcf	(??_SD_SPI_SectorRead+1)^0,f,c
 28047  00B884  2EE8               	decfsz	wreg,f,c
 28048  00B886  D7FB               	goto	u20365
 28049  00B888  503F               	movf	??_SD_SPI_SectorRead^0,w,c
 28050  00B88A  243B               	addwf	SD_SPI_SectorRead@buffer^0,w,c
 28051  00B88C  6F6A               	movwf	(SD_SPI_SectorRead@info+6)& (0+255),b
 28052  00B88E  5040               	movf	(??_SD_SPI_SectorRead+1)^0,w,c
 28053  00B890  203C               	addwfc	(SD_SPI_SectorRead@buffer+1)^0,w,c
 28054  00B892  6F6B               	movwf	(SD_SPI_SectorRead@info+7)& (0+255),b
 28055                           
 28056                           ; BSR set to: 0
 28057                           ;sd_spi.c: 395: info.dwAddress = sector_address + i;
 28058  00B894  5162               	movf	SD_SPI_SectorRead@i& (0+255),w,b
 28059  00B896  2437               	addwf	SD_SPI_SectorRead@sector_address^0,w,c
 28060  00B898  6F6C               	movwf	(SD_SPI_SectorRead@info+8)& (0+255),b
 28061  00B89A  5163               	movf	(SD_SPI_SectorRead@i+1)& (0+255),w,b
 28062  00B89C  2038               	addwfc	(SD_SPI_SectorRead@sector_address+1)^0,w,c
 28063  00B89E  6F6D               	movwf	(SD_SPI_SectorRead@info+9)& (0+255),b
 28064  00B8A0  0E00               	movlw	0
 28065  00B8A2  2039               	addwfc	(SD_SPI_SectorRead@sector_address+2)^0,w,c
 28066  00B8A4  6F6E               	movwf	(SD_SPI_SectorRead@info+10)& (0+255),b
 28067  00B8A6  0E00               	movlw	0
 28068  00B8A8  203A               	addwfc	(SD_SPI_SectorRead@sector_address+3)^0,w,c
 28069  00B8AA  6F6F               	movwf	(SD_SPI_SectorRead@info+11)& (0+255),b
 28070                           
 28071                           ;sd_spi.c: 396: info.bStateVariable = 0x01;
 28072  00B8AC  0E01               	movlw	1
 28073  00B8AE  6F70               	movwf	(SD_SPI_SectorRead@info+12)& (0+255),b
 28074                           
 28075                           ; BSR set to: 0
 28076                           ;sd_spi.c: 398: if( spiMaster[SDFAST].spiOpen() == 0 )
 28077  00B8B0  0E21               	movlw	low (_spiMaster+2)
 28078  00B8B2  6EF6               	movwf	tblptrl,c
 28079  00B8B4  0EFA               	movlw	high (_spiMaster+2)
 28080  00B8B6  6EF7               	movwf	tblptrh,c
 28081  00B8B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28082  00B8B8  6AF8               	clrf	tblptru,c
 28083  00B8BA                     	endif
 28084  00B8BA                     	if	0	;tblptru may be non-zero
 28085  00B8BA                     	endif
 28086  00B8BA  0009               	tblrd		*+
 28087  00B8BC  CFF5 F03F          	movff	tablat,??_SD_SPI_SectorRead
 28088  00B8C0  0009               	tblrd		*+
 28089  00B8C2  CFF5 F040          	movff	tablat,??_SD_SPI_SectorRead+1
 28090  00B8C6  D801               	call	u20378
 28091  00B8C8  D009               	goto	u20379
 28092  00B8CA                     u20378:
 28093  00B8CA  0005               	push	
 28094  00B8CC  6EFA               	movwf	pclath,c
 28095  00B8CE  503F               	movf	??_SD_SPI_SectorRead^0,w,c
 28096  00B8D0  6EFD               	movwf	tosl,c
 28097  00B8D2  5040               	movf	(??_SD_SPI_SectorRead+1)^0,w,c
 28098  00B8D4  6EFE               	movwf	tosh,c
 28099  00B8D6  6AFF               	clrf	tosu,c
 28100  00B8D8  50FA               	movf	pclath,w,c
 28101  00B8DA  0012               	return		;indir
 28102  00B8DC                     u20379:
 28103  00B8DC  0900               	iorlw	0
 28104  00B8DE  A4D8               	btfss	status,2,c
 28105  00B8E0  D002               	goto	l913
 28106                           
 28107                           ;sd_spi.c: 399: {;sd_spi.c: 400: return 0;
 28108  00B8E2  0E00               	movlw	0
 28109  00B8E4  0012               	return	
 28110  00B8E6                     l913:
 28111  00B8E6  9C89               	bcf	137,6,c	;volatile
 28112  00B8E8                     l19027:
 28113                           
 28114                           ;sd_spi.c: 405: {;sd_spi.c: 406: status = SD_SPI_AsyncReadTasks(&info);
 28115  00B8E8  0E64               	movlw	low SD_SPI_SectorRead@info
 28116  00B8EA  6E2C               	movwf	SD_SPI_AsyncReadTasks@info^0,c
 28117  00B8EC  EC5D  F03A         	call	_SD_SPI_AsyncReadTasks	;wreg free
 28118  00B8F0  0100               	movlb	0	; () banked
 28119  00B8F2  6F61               	movwf	SD_SPI_SectorRead@status& (0+255),b
 28120                           
 28121                           ; BSR set to: 0
 28122                           ;sd_spi.c: 407: if(status == 0x00)
 28123  00B8F4  5161               	movf	SD_SPI_SectorRead@status& (0+255),w,b
 28124  00B8F6  A4D8               	btfss	status,2,c
 28125  00B8F8  D002               	goto	l19035
 28126                           
 28127                           ; BSR set to: 0
 28128                           ;sd_spi.c: 408: {;sd_spi.c: 409: result = 1;
 28129  00B8FA  0E01               	movlw	1
 28130  00B8FC  D004               	goto	L27
 28131  00B8FE                     l19035:
 28132                           
 28133                           ; BSR set to: 0
 28134                           ;sd_spi.c: 412: else if(status == 0xFF)
 28135  00B8FE  2961               	incf	SD_SPI_SectorRead@status& (0+255),w,b
 28136  00B900  A4D8               	btfss	status,2,c
 28137  00B902  D7F2               	goto	l19027
 28138                           
 28139                           ; BSR set to: 0
 28140                           ;sd_spi.c: 413: {;sd_spi.c: 414: result = 0;
 28141  00B904  0E00               	movlw	0
 28142  00B906                     L27:
 28143  00B906  6F60               	movwf	SD_SPI_SectorRead@result& (0+255),b
 28144                           
 28145                           ; BSR set to: 0
 28146                           
 28147                           ;sd_spi.c: 416: };sd_spi.c: 417: };sd_spi.c: 419: do { LATAbits.LATA6 = 1; } while(0);
 28148  00B908  8C89               	bsf	137,6,c	;volatile
 28149                           
 28150                           ; BSR set to: 0
 28151                           ;sd_spi.c: 420: spiMaster[SDFAST].spiClose();
 28152  00B90A  0E1F               	movlw	low _spiMaster
 28153  00B90C  6EF6               	movwf	tblptrl,c
 28154  00B90E                     	if	1	;There is more than 1 active tblptr byte
 28155  00B90E  0EFA               	movlw	high _spiMaster
 28156  00B910  6EF7               	movwf	tblptrh,c
 28157  00B912                     	endif
 28158  00B912                     	if	1	;There are 3 active tblptr bytes
 28159  00B912  0E00               	movlw	low (_spiMaster shr (0+16))
 28160  00B914  6EF8               	movwf	tblptru,c
 28161  00B916                     	endif
 28162  00B916  0009               	tblrd		*+
 28163  00B918  CFF5 F03F          	movff	tablat,??_SD_SPI_SectorRead
 28164  00B91C  0009               	tblrd		*+
 28165  00B91E  CFF5 F040          	movff	tablat,??_SD_SPI_SectorRead+1
 28166  00B922  D801               	call	u20418
 28167  00B924  D009               	goto	u20419
 28168  00B926                     u20418:
 28169  00B926  0005               	push	
 28170  00B928  6EFA               	movwf	pclath,c
 28171  00B92A  503F               	movf	??_SD_SPI_SectorRead^0,w,c
 28172  00B92C  6EFD               	movwf	tosl,c
 28173  00B92E  5040               	movf	(??_SD_SPI_SectorRead+1)^0,w,c
 28174  00B930  6EFE               	movwf	tosh,c
 28175  00B932  6AFF               	clrf	tosu,c
 28176  00B934  50FA               	movf	pclath,w,c
 28177  00B936  0012               	return		;indir
 28178  00B938                     u20419:
 28179  00B938  0100               	movlb	0	; () banked
 28180  00B93A  4B62               	infsnz	SD_SPI_SectorRead@i& (0+255),f,b
 28181  00B93C  2B63               	incf	(SD_SPI_SectorRead@i+1)& (0+255),f,b
 28182  00B93E                     l19043:
 28183                           
 28184                           ; BSR set to: 0
 28185  00B93E  503D               	movf	SD_SPI_SectorRead@sector_count^0,w,c
 28186  00B940  5D62               	subwf	SD_SPI_SectorRead@i& (0+255),w,b
 28187  00B942  503E               	movf	(SD_SPI_SectorRead@sector_count+1)^0,w,c
 28188  00B944  5963               	subwfb	(SD_SPI_SectorRead@i+1)& (0+255),w,b
 28189  00B946  A0D8               	btfss	status,0,c
 28190  00B948  D789               	goto	l19015
 28191                           
 28192                           ; BSR set to: 0
 28193                           ;sd_spi.c: 421: };sd_spi.c: 423: return result;
 28194  00B94A  5160               	movf	SD_SPI_SectorRead@result& (0+255),w,b
 28195  00B94C  0012               	return		;funcret
 28196  00B94E                     __end_of_SD_SPI_SectorRead:
 28197                           	callstack 0
 28198                           
 28199 ;; *************** function _SD_SPI_AsyncReadTasks *****************
 28200 ;; Defined at:
 28201 ;;		line 824 in file "mcc_generated_files/sd_spi/sd_spi.c"
 28202 ;; Parameters:    Size  Location     Type
 28203 ;;  info            1   43[COMRAM] PTR struct SD_ASYNC_IO
 28204 ;;		 -> SD_SPI_SectorRead@info(13), 
 28205 ;; Auto vars:     Size  Location     Type
 28206 ;;  response        5   48[COMRAM] struct .
 28207 ;;  bData           1   53[COMRAM] unsigned char 
 28208 ;; Return value:  Size  Location     Type
 28209 ;;                  1    wreg      unsigned char 
 28210 ;; Registers used:
 28211 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 28212 ;; Tracked objects:
 28213 ;;		On entry : 0/0
 28214 ;;		On exit  : 0/0
 28215 ;;		Unchanged: 0/0
 28216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28217 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28218 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28219 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28220 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28221 ;;Total ram usage:       11 bytes
 28222 ;; Hardware stack levels used:    1
 28223 ;; Hardware stack levels required when called:    8
 28224 ;; This function calls:
 28225 ;;		_SD_SendCmd
 28226 ;;		_SPI1_ExchangeBlock
 28227 ;;		_SPI1_ExchangeByte
 28228 ;;		_memset
 28229 ;; This function is called by:
 28230 ;;		_SD_SPI_SectorRead
 28231 ;; This function uses a non-reentrant model
 28232 ;;
 28233                           
 28234                           	psect	text100
 28235  0074BA                     __ptext100:
 28236                           	callstack 0
 28237  0074BA                     _SD_SPI_AsyncReadTasks:
 28238                           	callstack 17
 28239                           
 28240                           ;sd_spi.c: 826: uint8_t bData;;sd_spi.c: 827: SD_RESPONSE response;;sd_spi.c: 828: stati
      +                          c uint16_t blockCounter;;sd_spi.c: 829: static uint32_t longTimeoutCounter;;sd_spi.c: 83
      +                          0: static bool SingleBlockRead;;sd_spi.c: 833: switch(info->bStateVariable)
 28241                           
 28242                           ;incstack = 0
 28243  0074BA  D198               	goto	l18935
 28244  0074BC                     l18799:
 28245                           
 28246                           ;sd_spi.c: 836: return 0x00;
 28247  0074BC  0E00               	movlw	0
 28248  0074BE  0012               	return	
 28249  0074C0                     l18803:
 28250                           
 28251                           ;sd_spi.c: 841: mediaInformation.state = SD_STATE_BUSY;
 28252  0074C0  0E02               	movlw	2
 28253  0074C2  0103               	movlb	3	; () banked
 28254  0074C4  6FDA               	movwf	(_mediaInformation+3)& (0+255),b
 28255                           
 28256                           ;sd_spi.c: 842: blockCounter = 512u;
 28257  0074C6  0E02               	movlw	2
 28258  0074C8  6F97               	movwf	(SD_SPI_AsyncReadTasks@blockCounter+1)& (0+255),b
 28259  0074CA  0E00               	movlw	0
 28260  0074CC  6F96               	movwf	SD_SPI_AsyncReadTasks@blockCounter& (0+255),b
 28261                           
 28262                           ; BSR set to: 3
 28263                           ;sd_spi.c: 843: ioInfo = *info;
 28264  0074CE  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28265  0074D0  6ED9               	movwf	fsr2l,c
 28266  0074D2  6ADA               	clrf	fsr2h,c
 28267  0074D4  EE13  F000         	lfsr	1,_ioInfo
 28268  0074D8  0E0C               	movlw	12
 28269  0074DA                     u20081:
 28270  0074DA  CFDB FFE3          	movff	plusw2,plusw1
 28271  0074DE  06E8               	decf	wreg,f,c
 28272  0074E0  E2FC               	bc	u20081
 28273                           
 28274                           ; BSR set to: 3
 28275                           ;sd_spi.c: 849: if (mediaInformation.gSDMode == 0)
 28276  0074E2  51DF               	movf	(_mediaInformation+8)& (0+255),w,b
 28277  0074E4  A4D8               	btfss	status,2,c
 28278  0074E6  D008               	goto	l1029
 28279                           
 28280                           ; BSR set to: 3
 28281                           ;sd_spi.c: 850: {;sd_spi.c: 851: ioInfo.dwAddress <<= 9;
 28282  0074E8  0E09               	movlw	9
 28283  0074EA                     u20105:
 28284  0074EA  90D8               	bcf	status,0,c
 28285  0074EC  3708               	rlcf	(_ioInfo+8)& (0+255),f,b
 28286  0074EE  3709               	rlcf	(_ioInfo+9)& (0+255),f,b
 28287  0074F0  370A               	rlcf	(_ioInfo+10)& (0+255),f,b
 28288  0074F2  370B               	rlcf	(_ioInfo+11)& (0+255),f,b
 28289  0074F4  2EE8               	decfsz	wreg,f,c
 28290  0074F6  D7F9               	goto	u20105
 28291  0074F8                     l1029:
 28292                           
 28293                           ; BSR set to: 3
 28294                           ;sd_spi.c: 852: };sd_spi.c: 853: if(ioInfo.dwBytesRemaining <= 512u)
 28295  0074F8  5105               	movf	(_ioInfo+5)& (0+255),w,b
 28296  0074FA  1104               	iorwf	(_ioInfo+4)& (0+255),w,b
 28297  0074FC  E11A               	bnz	l18815
 28298  0074FE  0502               	decf	(_ioInfo+2)& (0+255),w,b
 28299  007500  0E02               	movlw	2
 28300  007502  5903               	subwfb	(_ioInfo+3)& (0+255),w,b
 28301  007504  B0D8               	btfsc	status,0,c
 28302  007506  D015               	goto	l18815
 28303                           
 28304                           ; BSR set to: 3
 28305                           ;sd_spi.c: 854: {;sd_spi.c: 855: SingleBlockRead = 1;
 28306  007508  0E01               	movlw	1
 28307  00750A  6FA8               	movwf	SD_SPI_AsyncReadTasks@SingleBlockRead& (0+255),b
 28308                           
 28309                           ; BSR set to: 3
 28310                           ;sd_spi.c: 856: response = SD_SendCmd(SD_READ_SINGLE_BLOCK, ioInfo.dwAddress);
 28311  00750C  C308  F015         	movff	_ioInfo+8,SD_SendCmd@address
 28312  007510  C309  F016         	movff	_ioInfo+9,SD_SendCmd@address+1
 28313  007514  C30A  F017         	movff	_ioInfo+10,SD_SendCmd@address+2
 28314  007518  C30B  F018         	movff	_ioInfo+11,SD_SendCmd@address+3
 28315  00751C  0E08               	movlw	8
 28316  00751E  EC7D  F02F         	call	_SD_SendCmd
 28317  007522  EE20  F031         	lfsr	2,SD_SPI_AsyncReadTasks@response
 28318  007526  0E04               	movlw	4
 28319  007528                     u20121:
 28320  007528  CFEB FFDB          	movff	plusw0,plusw2
 28321  00752C  06E8               	decf	wreg,f,c
 28322  00752E  E2FC               	bc	u20121
 28323                           
 28324                           ;sd_spi.c: 857: }
 28325  007530  D014               	goto	l18819
 28326  007532                     l18815:
 28327                           
 28328                           ; BSR set to: 3
 28329                           ;sd_spi.c: 858: else;sd_spi.c: 859: {;sd_spi.c: 860: SingleBlockRead = 0;
 28330  007532  0E00               	movlw	0
 28331  007534  6FA8               	movwf	SD_SPI_AsyncReadTasks@SingleBlockRead& (0+255),b
 28332                           
 28333                           ; BSR set to: 3
 28334                           ;sd_spi.c: 861: response = SD_SendCmd(SD_READ_MULTI_BLOCK, ioInfo.dwAddress);
 28335  007536  C308  F015         	movff	_ioInfo+8,SD_SendCmd@address
 28336  00753A  C309  F016         	movff	_ioInfo+9,SD_SendCmd@address+1
 28337  00753E  C30A  F017         	movff	_ioInfo+10,SD_SendCmd@address+2
 28338  007542  C30B  F018         	movff	_ioInfo+11,SD_SendCmd@address+3
 28339  007546  0E09               	movlw	9
 28340  007548  EC7D  F02F         	call	_SD_SendCmd
 28341  00754C  EE20  F031         	lfsr	2,SD_SPI_AsyncReadTasks@response
 28342  007550  0E04               	movlw	4
 28343  007552                     u20131:
 28344  007552  CFEB FFDB          	movff	plusw0,plusw2
 28345  007556  06E8               	decf	wreg,f,c
 28346  007558  E2FC               	bc	u20131
 28347  00755A                     l18819:
 28348                           
 28349                           ;sd_spi.c: 862: };sd_spi.c: 868: if(response.r1._byte != 0x00)
 28350  00755A  5031               	movf	SD_SPI_AsyncReadTasks@response^0,w,c
 28351  00755C  B4D8               	btfsc	status,2,c
 28352  00755E  D009               	goto	l18827
 28353  007560                     u20140:
 28354                           
 28355                           ;sd_spi.c: 869: {;sd_spi.c: 871: info->bStateVariable = 0xFE;
 28356  007560  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28357  007562  6ED9               	movwf	fsr2l,c
 28358  007564  6ADA               	clrf	fsr2h,c
 28359  007566  0E0C               	movlw	12
 28360  007568  26D9               	addwf	fsr2l,f,c
 28361  00756A  0EFE               	movlw	254
 28362  00756C                     L28:
 28363  00756C  6EDF               	movwf	indf2,c
 28364  00756E                     l18823:
 28365                           
 28366                           ;sd_spi.c: 872: return 0x01;
 28367  00756E  0E01               	movlw	1
 28368  007570  0012               	return	
 28369  007572                     l18827:
 28370                           
 28371                           ;sd_spi.c: 873: };sd_spi.c: 878: longTimeoutCounter = (uint32_t)0x40000;
 28372  007572  0E00               	movlw	0
 28373  007574  0103               	movlb	3	; () banked
 28374  007576  6F65               	movwf	SD_SPI_AsyncReadTasks@longTimeoutCounter& (0+255),b
 28375  007578  0E00               	movlw	0
 28376  00757A  6F66               	movwf	(SD_SPI_AsyncReadTasks@longTimeoutCounter+1)& (0+255),b
 28377  00757C  0E04               	movlw	4
 28378  00757E  6F67               	movwf	(SD_SPI_AsyncReadTasks@longTimeoutCounter+2)& (0+255),b
 28379  007580  0E00               	movlw	0
 28380  007582  6F68               	movwf	(SD_SPI_AsyncReadTasks@longTimeoutCounter+3)& (0+255),b
 28381                           
 28382                           ; BSR set to: 3
 28383                           ;sd_spi.c: 879: info->bStateVariable = 0x03;
 28384  007584  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28385  007586  6ED9               	movwf	fsr2l,c
 28386  007588  6ADA               	clrf	fsr2h,c
 28387  00758A  0E0C               	movlw	12
 28388  00758C  26D9               	addwf	fsr2l,f,c
 28389  00758E  0E03               	movlw	3
 28390  007590  D7ED               	goto	L28
 28391  007592                     l18835:
 28392                           
 28393                           ;sd_spi.c: 887: if(longTimeoutCounter != 0x00000000)
 28394  007592  0103               	movlb	3	; () banked
 28395  007594  5165               	movf	SD_SPI_AsyncReadTasks@longTimeoutCounter& (0+255),w,b
 28396  007596  1166               	iorwf	(SD_SPI_AsyncReadTasks@longTimeoutCounter+1)& (0+255),w,b
 28397  007598  1167               	iorwf	(SD_SPI_AsyncReadTasks@longTimeoutCounter+2)& (0+255),w,b
 28398  00759A  1168               	iorwf	(SD_SPI_AsyncReadTasks@longTimeoutCounter+3)& (0+255),w,b
 28399  00759C  B4D8               	btfsc	status,2,c
 28400  00759E  D7E0               	goto	u20140
 28401                           
 28402                           ; BSR set to: 3
 28403                           ;sd_spi.c: 888: {;sd_spi.c: 889: longTimeoutCounter--;
 28404  0075A0  0765               	decf	SD_SPI_AsyncReadTasks@longTimeoutCounter& (0+255),f,b
 28405  0075A2  0E00               	movlw	0
 28406  0075A4  5B66               	subwfb	(SD_SPI_AsyncReadTasks@longTimeoutCounter+1)& (0+255),f,b
 28407  0075A6  5B67               	subwfb	(SD_SPI_AsyncReadTasks@longTimeoutCounter+2)& (0+255),f,b
 28408  0075A8  5B68               	subwfb	(SD_SPI_AsyncReadTasks@longTimeoutCounter+3)& (0+255),f,b
 28409                           
 28410                           ; BSR set to: 3
 28411                           ;sd_spi.c: 890: bData = spiMaster[SDFAST].exchangeByte(0xFF);
 28412  0075AA  0E23               	movlw	low (_spiMaster+4)
 28413  0075AC  6EF6               	movwf	tblptrl,c
 28414  0075AE  0EFA               	movlw	high (_spiMaster+4)
 28415  0075B0  6EF7               	movwf	tblptrh,c
 28416  0075B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28417  0075B2  6AF8               	clrf	tblptru,c
 28418  0075B4                     	endif
 28419  0075B4                     	if	0	;tblptru may be non-zero
 28420  0075B4                     	endif
 28421  0075B4  0009               	tblrd		*+
 28422  0075B6  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncReadTasks
 28423  0075BA  0009               	tblrd		*+
 28424  0075BC  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncReadTasks+1
 28425  0075C0  D801               	call	u20168
 28426  0075C2  D00A               	goto	u20169
 28427  0075C4                     u20168:
 28428  0075C4  0005               	push	
 28429  0075C6  6EFA               	movwf	pclath,c
 28430  0075C8  502D               	movf	??_SD_SPI_AsyncReadTasks^0,w,c
 28431  0075CA  6EFD               	movwf	tosl,c
 28432  0075CC  502E               	movf	(??_SD_SPI_AsyncReadTasks+1)^0,w,c
 28433  0075CE  6EFE               	movwf	tosh,c
 28434  0075D0  6AFF               	clrf	tosu,c
 28435  0075D2  50FA               	movf	pclath,w,c
 28436  0075D4  0EFF               	movlw	255
 28437  0075D6  0012               	return		;indir
 28438  0075D8                     u20169:
 28439  0075D8  6E36               	movwf	SD_SPI_AsyncReadTasks@bData^0,c
 28440                           
 28441                           ;sd_spi.c: 892: if(bData != SD_TOKEN_FLOATING_BUS)
 28442  0075DA  2836               	incf	SD_SPI_AsyncReadTasks@bData^0,w,c
 28443  0075DC  B4D8               	btfsc	status,2,c
 28444  0075DE  D7C7               	goto	l18823
 28445                           
 28446                           ;sd_spi.c: 893: {;sd_spi.c: 894: if(bData == SD_TOKEN_START)
 28447  0075E0  0EFE               	movlw	254
 28448  0075E2  1836               	xorwf	SD_SPI_AsyncReadTasks@bData^0,w,c
 28449  0075E4  A4D8               	btfss	status,2,c
 28450  0075E6  D7BC               	goto	u20140
 28451                           
 28452                           ;sd_spi.c: 895: {;sd_spi.c: 898: info->bStateVariable = 0x02;
 28453  0075E8  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28454  0075EA  6ED9               	movwf	fsr2l,c
 28455  0075EC  6ADA               	clrf	fsr2h,c
 28456  0075EE  0E0C               	movlw	12
 28457  0075F0  26D9               	addwf	fsr2l,f,c
 28458  0075F2  0E02               	movlw	2
 28459  0075F4  6EDF               	movwf	indf2,c
 28460  0075F6                     l18847:
 28461                           
 28462                           ;sd_spi.c: 899: return 0x02;
 28463  0075F6  0E02               	movlw	2
 28464  0075F8  0012               	return	
 28465  0075FA                     l18869:
 28466                           
 28467                           ;sd_spi.c: 928: if(ioInfo.dwBytesRemaining != 0x00000000)
 28468  0075FA  0103               	movlb	3	; () banked
 28469  0075FC  5102               	movf	(_ioInfo+2)& (0+255),w,b
 28470  0075FE  1103               	iorwf	(_ioInfo+3)& (0+255),w,b
 28471  007600  1104               	iorwf	(_ioInfo+4)& (0+255),w,b
 28472  007602  1105               	iorwf	(_ioInfo+5)& (0+255),w,b
 28473  007604  B4D8               	btfsc	status,2,c
 28474  007606  D092               	goto	l18903
 28475                           
 28476                           ; BSR set to: 3
 28477                           ;sd_spi.c: 929: {;sd_spi.c: 932: ioInfo.wNumBytes = info->wNumBytes;
 28478  007608  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28479  00760A  6ED9               	movwf	fsr2l,c
 28480  00760C  6ADA               	clrf	fsr2h,c
 28481  00760E  CFDE F300          	movff	postinc2,_ioInfo
 28482  007612  CFDD F301          	movff	postdec2,_ioInfo+1
 28483                           
 28484                           ; BSR set to: 3
 28485                           ;sd_spi.c: 933: ioInfo.pBuffer = info->pBuffer;
 28486  007616  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28487  007618  6ED9               	movwf	fsr2l,c
 28488  00761A  6ADA               	clrf	fsr2h,c
 28489  00761C  0E06               	movlw	6
 28490  00761E  26D9               	addwf	fsr2l,f,c
 28491  007620  CFDE F306          	movff	postinc2,_ioInfo+6
 28492  007624  CFDD F307          	movff	postdec2,_ioInfo+7
 28493                           
 28494                           ; BSR set to: 3
 28495                           ;sd_spi.c: 936: ioInfo.dwBytesRemaining -= ioInfo.wNumBytes;
 28496  007628  5100               	movf	_ioInfo& (0+255),w,b
 28497  00762A  6E2D               	movwf	??_SD_SPI_AsyncReadTasks^0,c
 28498  00762C  5101               	movf	(_ioInfo+1)& (0+255),w,b
 28499  00762E  6E2E               	movwf	(??_SD_SPI_AsyncReadTasks+1)^0,c
 28500  007630  6A2F               	clrf	(??_SD_SPI_AsyncReadTasks+2)^0,c
 28501  007632  6A30               	clrf	(??_SD_SPI_AsyncReadTasks+3)^0,c
 28502  007634  502D               	movf	??_SD_SPI_AsyncReadTasks^0,w,c
 28503  007636  5F02               	subwf	(_ioInfo+2)& (0+255),f,b
 28504  007638  502E               	movf	(??_SD_SPI_AsyncReadTasks+1)^0,w,c
 28505  00763A  5B03               	subwfb	(_ioInfo+3)& (0+255),f,b
 28506  00763C  502F               	movf	(??_SD_SPI_AsyncReadTasks+2)^0,w,c
 28507  00763E  5B04               	subwfb	(_ioInfo+4)& (0+255),f,b
 28508  007640  5030               	movf	(??_SD_SPI_AsyncReadTasks+3)^0,w,c
 28509  007642  5B05               	subwfb	(_ioInfo+5)& (0+255),f,b
 28510                           
 28511                           ; BSR set to: 3
 28512                           ;sd_spi.c: 937: blockCounter -= ioInfo.wNumBytes;
 28513  007644  5100               	movf	_ioInfo& (0+255),w,b
 28514  007646  5F96               	subwf	SD_SPI_AsyncReadTasks@blockCounter& (0+255),f,b
 28515  007648  5101               	movf	(_ioInfo+1)& (0+255),w,b
 28516  00764A  5B97               	subwfb	(SD_SPI_AsyncReadTasks@blockCounter+1)& (0+255),f,b
 28517                           
 28518                           ; BSR set to: 3
 28519                           ;sd_spi.c: 941: (void)memset(ioInfo.pBuffer, 0xFF, ioInfo.wNumBytes);
 28520  00764C  C306  F00E         	movff	_ioInfo+6,memset@p1
 28521  007650  C307  F00F         	movff	_ioInfo+7,memset@p1+1
 28522  007654  0E00               	movlw	0
 28523  007656  6E11               	movwf	(memset@c+1)^0,c
 28524  007658  6810               	setf	memset@c^0,c
 28525  00765A  C300  F012         	movff	_ioInfo,memset@n
 28526  00765E  C301  F013         	movff	_ioInfo+1,memset@n+1
 28527  007662  ECAD  F077         	call	_memset
 28528                           
 28529                           ; BSR set to: 3
 28530                           ;sd_spi.c: 942: spiMaster[SDFAST].exchangeBlock(ioInfo.pBuffer, ioInfo.wNumBytes);
 28531  007666  C306  F00E         	movff	_ioInfo+6,SPI1_ExchangeBlock@block
 28532  00766A  C307  F00F         	movff	_ioInfo+7,SPI1_ExchangeBlock@block+1
 28533  00766E  C300  F010         	movff	_ioInfo,SPI1_ExchangeBlock@blockSize
 28534  007672  C301  F011         	movff	_ioInfo+1,SPI1_ExchangeBlock@blockSize+1
 28535  007676  0E25               	movlw	low (_spiMaster+6)
 28536  007678  6EF6               	movwf	tblptrl,c
 28537  00767A  0EFA               	movlw	high (_spiMaster+6)
 28538  00767C  6EF7               	movwf	tblptrh,c
 28539  00767E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28540  00767E  6AF8               	clrf	tblptru,c
 28541  007680                     	endif
 28542  007680                     	if	0	;tblptru may be non-zero
 28543  007680                     	endif
 28544  007680  0009               	tblrd		*+
 28545  007682  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncReadTasks
 28546  007686  0009               	tblrd		*+
 28547  007688  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncReadTasks+1
 28548  00768C  D801               	call	u20208
 28549  00768E  D009               	goto	u20209
 28550  007690                     u20208:
 28551  007690  0005               	push	
 28552  007692  6EFA               	movwf	pclath,c
 28553  007694  502D               	movf	??_SD_SPI_AsyncReadTasks^0,w,c
 28554  007696  6EFD               	movwf	tosl,c
 28555  007698  502E               	movf	(??_SD_SPI_AsyncReadTasks+1)^0,w,c
 28556  00769A  6EFE               	movwf	tosh,c
 28557  00769C  6AFF               	clrf	tosu,c
 28558  00769E  50FA               	movf	pclath,w,c
 28559  0076A0  0012               	return		;indir
 28560  0076A2                     u20209:
 28561                           
 28562                           ; BSR set to: 3
 28563                           ;sd_spi.c: 947: if(blockCounter == 0)
 28564  0076A2  5196               	movf	SD_SPI_AsyncReadTasks@blockCounter& (0+255),w,b
 28565  0076A4  1197               	iorwf	(SD_SPI_AsyncReadTasks@blockCounter+1)& (0+255),w,b
 28566  0076A6  A4D8               	btfss	status,2,c
 28567  0076A8  D7A6               	goto	l18847
 28568                           
 28569                           ; BSR set to: 3
 28570                           ;sd_spi.c: 948: {;sd_spi.c: 950: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 28571  0076AA  0E23               	movlw	low (_spiMaster+4)
 28572  0076AC  6EF6               	movwf	tblptrl,c
 28573  0076AE  0EFA               	movlw	high (_spiMaster+4)
 28574  0076B0  6EF7               	movwf	tblptrh,c
 28575  0076B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28576  0076B2  6AF8               	clrf	tblptru,c
 28577  0076B4                     	endif
 28578  0076B4                     	if	0	;tblptru may be non-zero
 28579  0076B4                     	endif
 28580  0076B4  0009               	tblrd		*+
 28581  0076B6  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncReadTasks
 28582  0076BA  0009               	tblrd		*+
 28583  0076BC  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncReadTasks+1
 28584  0076C0  D801               	call	u20228
 28585  0076C2  D00A               	goto	u20229
 28586  0076C4                     u20228:
 28587  0076C4  0005               	push	
 28588  0076C6  6EFA               	movwf	pclath,c
 28589  0076C8  502D               	movf	??_SD_SPI_AsyncReadTasks^0,w,c
 28590  0076CA  6EFD               	movwf	tosl,c
 28591  0076CC  502E               	movf	(??_SD_SPI_AsyncReadTasks+1)^0,w,c
 28592  0076CE  6EFE               	movwf	tosh,c
 28593  0076D0  6AFF               	clrf	tosu,c
 28594  0076D2  50FA               	movf	pclath,w,c
 28595  0076D4  0EFF               	movlw	255
 28596  0076D6  0012               	return		;indir
 28597  0076D8                     u20229:
 28598                           
 28599                           ;sd_spi.c: 951: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 28600  0076D8  0E23               	movlw	low (_spiMaster+4)
 28601  0076DA  6EF6               	movwf	tblptrl,c
 28602  0076DC  0EFA               	movlw	high (_spiMaster+4)
 28603  0076DE  6EF7               	movwf	tblptrh,c
 28604  0076E0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28605  0076E0  6AF8               	clrf	tblptru,c
 28606  0076E2                     	endif
 28607  0076E2                     	if	0	;tblptru may be non-zero
 28608  0076E2                     	endif
 28609  0076E2  0009               	tblrd		*+
 28610  0076E4  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncReadTasks
 28611  0076E8  0009               	tblrd		*+
 28612  0076EA  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncReadTasks+1
 28613  0076EE  D801               	call	u20238
 28614  0076F0  D00A               	goto	u20239
 28615  0076F2                     u20238:
 28616  0076F2  0005               	push	
 28617  0076F4  6EFA               	movwf	pclath,c
 28618  0076F6  502D               	movf	??_SD_SPI_AsyncReadTasks^0,w,c
 28619  0076F8  6EFD               	movwf	tosl,c
 28620  0076FA  502E               	movf	(??_SD_SPI_AsyncReadTasks+1)^0,w,c
 28621  0076FC  6EFE               	movwf	tosh,c
 28622  0076FE  6AFF               	clrf	tosu,c
 28623  007700  50FA               	movf	pclath,w,c
 28624  007702  0EFF               	movlw	255
 28625  007704  0012               	return		;indir
 28626  007706                     u20239:
 28627                           
 28628                           ;sd_spi.c: 957: if(ioInfo.dwBytesRemaining != 0x00000000)
 28629  007706  0103               	movlb	3	; () banked
 28630  007708  5102               	movf	(_ioInfo+2)& (0+255),w,b
 28631  00770A  1103               	iorwf	(_ioInfo+3)& (0+255),w,b
 28632  00770C  1104               	iorwf	(_ioInfo+4)& (0+255),w,b
 28633  00770E  1105               	iorwf	(_ioInfo+5)& (0+255),w,b
 28634  007710  B4D8               	btfsc	status,2,c
 28635  007712  D007               	goto	l18891
 28636                           
 28637                           ; BSR set to: 3
 28638                           ;sd_spi.c: 958: {;sd_spi.c: 959: info->bStateVariable = 0x03;
 28639  007714  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28640  007716  6ED9               	movwf	fsr2l,c
 28641  007718  6ADA               	clrf	fsr2h,c
 28642  00771A  0E0C               	movlw	12
 28643  00771C  26D9               	addwf	fsr2l,f,c
 28644  00771E  0E03               	movlw	3
 28645  007720  6EDF               	movwf	indf2,c
 28646  007722                     l18891:
 28647                           
 28648                           ; BSR set to: 3
 28649                           ;sd_spi.c: 960: };sd_spi.c: 961: blockCounter = 512u;
 28650  007722  0E02               	movlw	2
 28651  007724  6F97               	movwf	(SD_SPI_AsyncReadTasks@blockCounter+1)& (0+255),b
 28652  007726  0E00               	movlw	0
 28653  007728  6F96               	movwf	SD_SPI_AsyncReadTasks@blockCounter& (0+255),b
 28654  00772A  D721               	goto	l18823
 28655  00772C                     l18903:
 28656                           
 28657                           ; BSR set to: 3
 28658                           ;sd_spi.c: 967: else;sd_spi.c: 968: {;sd_spi.c: 973: if(SingleBlockRead == 0)
 28659  00772C  51A8               	movf	SD_SPI_AsyncReadTasks@SingleBlockRead& (0+255),w,b
 28660  00772E  A4D8               	btfss	status,2,c
 28661  007730  D00B               	goto	l18907
 28662                           
 28663                           ; BSR set to: 3
 28664                           ;sd_spi.c: 974: {;sd_spi.c: 975: (void)SD_SendCmd(SD_STOP_TRANSMISSION, 0x00000000);
 28665  007732  0E00               	movlw	0
 28666  007734  6E15               	movwf	SD_SendCmd@address^0,c
 28667  007736  0E00               	movlw	0
 28668  007738  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 28669  00773A  0E00               	movlw	0
 28670  00773C  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 28671  00773E  0E00               	movlw	0
 28672  007740  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 28673  007742  0E05               	movlw	5
 28674  007744  EC7D  F02F         	call	_SD_SendCmd
 28675  007748                     l18907:
 28676  007748  8C89               	bsf	137,6,c	;volatile
 28677                           
 28678                           ;sd_spi.c: 978: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 28679  00774A  0E23               	movlw	low (_spiMaster+4)
 28680  00774C  6EF6               	movwf	tblptrl,c
 28681  00774E  0EFA               	movlw	high (_spiMaster+4)
 28682  007750  6EF7               	movwf	tblptrh,c
 28683  007752                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28684  007752  6AF8               	clrf	tblptru,c
 28685  007754                     	endif
 28686  007754                     	if	0	;tblptru may be non-zero
 28687  007754                     	endif
 28688  007754  0009               	tblrd		*+
 28689  007756  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncReadTasks
 28690  00775A  0009               	tblrd		*+
 28691  00775C  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncReadTasks+1
 28692  007760  D801               	call	u20268
 28693  007762  D00A               	goto	u20269
 28694  007764                     u20268:
 28695  007764  0005               	push	
 28696  007766  6EFA               	movwf	pclath,c
 28697  007768  502D               	movf	??_SD_SPI_AsyncReadTasks^0,w,c
 28698  00776A  6EFD               	movwf	tosl,c
 28699  00776C  502E               	movf	(??_SD_SPI_AsyncReadTasks+1)^0,w,c
 28700  00776E  6EFE               	movwf	tosh,c
 28701  007770  6AFF               	clrf	tosu,c
 28702  007772  50FA               	movf	pclath,w,c
 28703  007774  0EFF               	movlw	255
 28704  007776  0012               	return		;indir
 28705  007778                     u20269:
 28706                           
 28707                           ;sd_spi.c: 979: info->bStateVariable = 0x00;
 28708  007778  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28709  00777A  6ED9               	movwf	fsr2l,c
 28710  00777C  6ADA               	clrf	fsr2h,c
 28711  00777E  0E0C               	movlw	12
 28712  007780  26D9               	addwf	fsr2l,f,c
 28713  007782  0E00               	movlw	0
 28714  007784  6EDF               	movwf	indf2,c
 28715                           
 28716                           ;sd_spi.c: 980: mediaInformation.state = SD_STATE_READY_FOR_COMMAND;
 28717  007786  0E01               	movlw	1
 28718  007788  0103               	movlb	3	; () banked
 28719  00778A  6FDA               	movwf	(_mediaInformation+3)& (0+255),b
 28720  00778C  D697               	goto	l18799
 28721  00778E                     l18919:
 28722                           
 28723                           ;sd_spi.c: 985: info->bStateVariable = 0xFF;
 28724  00778E  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28725  007790  6ED9               	movwf	fsr2l,c
 28726  007792  6ADA               	clrf	fsr2h,c
 28727  007794  0E0C               	movlw	12
 28728  007796  26D9               	addwf	fsr2l,f,c
 28729  007798  0EFF               	movlw	255
 28730  00779A  6EDF               	movwf	indf2,c
 28731  00779C  0E00               	movlw	0
 28732  00779E  6E15               	movwf	SD_SendCmd@address^0,c
 28733  0077A0  0E00               	movlw	0
 28734  0077A2  6E16               	movwf	(SD_SendCmd@address+1)^0,c
 28735  0077A4  0E00               	movlw	0
 28736  0077A6  6E17               	movwf	(SD_SendCmd@address+2)^0,c
 28737  0077A8  0E00               	movlw	0
 28738  0077AA  6E18               	movwf	(SD_SendCmd@address+3)^0,c
 28739  0077AC  0E05               	movlw	5
 28740  0077AE  EC7D  F02F         	call	_SD_SendCmd
 28741  0077B2                     l18923:
 28742  0077B2  8C89               	bsf	137,6,c	;volatile
 28743                           
 28744                           ;sd_spi.c: 993: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 28745  0077B4  0E23               	movlw	low (_spiMaster+4)
 28746  0077B6  6EF6               	movwf	tblptrl,c
 28747  0077B8  0EFA               	movlw	high (_spiMaster+4)
 28748  0077BA  6EF7               	movwf	tblptrh,c
 28749  0077BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28750  0077BC  6AF8               	clrf	tblptru,c
 28751  0077BE                     	endif
 28752  0077BE                     	if	0	;tblptru may be non-zero
 28753  0077BE                     	endif
 28754  0077BE  0009               	tblrd		*+
 28755  0077C0  CFF5 F02D          	movff	tablat,??_SD_SPI_AsyncReadTasks
 28756  0077C4  0009               	tblrd		*+
 28757  0077C6  CFF5 F02E          	movff	tablat,??_SD_SPI_AsyncReadTasks+1
 28758  0077CA  D801               	call	u20278
 28759  0077CC  D00A               	goto	u20279
 28760  0077CE                     u20278:
 28761  0077CE  0005               	push	
 28762  0077D0  6EFA               	movwf	pclath,c
 28763  0077D2  502D               	movf	??_SD_SPI_AsyncReadTasks^0,w,c
 28764  0077D4  6EFD               	movwf	tosl,c
 28765  0077D6  502E               	movf	(??_SD_SPI_AsyncReadTasks+1)^0,w,c
 28766  0077D8  6EFE               	movwf	tosh,c
 28767  0077DA  6AFF               	clrf	tosu,c
 28768  0077DC  50FA               	movf	pclath,w,c
 28769  0077DE  0EFF               	movlw	255
 28770  0077E0  0012               	return		;indir
 28771  0077E2                     u20279:
 28772                           
 28773                           ;sd_spi.c: 994: mediaInformation.state = SD_STATE_READY_FOR_COMMAND;
 28774  0077E2  0E01               	movlw	1
 28775  0077E4  0103               	movlb	3	; () banked
 28776  0077E6  6FDA               	movwf	(_mediaInformation+3)& (0+255),b
 28777                           
 28778                           ; BSR set to: 3
 28779                           ;sd_spi.c: 995: return 0xFF;
 28780  0077E8  0EFF               	movlw	255
 28781  0077EA  0012               	return	
 28782  0077EC                     l18935:
 28783  0077EC  502C               	movf	SD_SPI_AsyncReadTasks@info^0,w,c
 28784  0077EE  6ED9               	movwf	fsr2l,c
 28785  0077F0  6ADA               	clrf	fsr2h,c
 28786  0077F2  0E0C               	movlw	12
 28787  0077F4  26D9               	addwf	fsr2l,f,c
 28788  0077F6  50DF               	movf	indf2,w,c
 28789                           
 28790                           ; Switch size 1, requested type "simple"
 28791                           ; Number of cases is 6, Range of values is 0 to 255
 28792                           ; switch strategies available:
 28793                           ; Name         Instructions Cycles
 28794                           ; simple_byte           19    10 (average)
 28795                           ;	Chosen strategy is simple_byte
 28796  0077F8  0A00               	xorlw	0	; case 0
 28797  0077FA  B4D8               	btfsc	status,2,c
 28798  0077FC  D65F               	goto	l18799
 28799  0077FE  0A01               	xorlw	1	; case 1
 28800  007800  B4D8               	btfsc	status,2,c
 28801  007802  D65E               	goto	l18803
 28802  007804  0A03               	xorlw	3	; case 2
 28803  007806  B4D8               	btfsc	status,2,c
 28804  007808  D6F8               	goto	l18869
 28805  00780A  0A01               	xorlw	1	; case 3
 28806  00780C  B4D8               	btfsc	status,2,c
 28807  00780E  D6C1               	goto	l18835
 28808  007810  0AFD               	xorlw	253	; case 254
 28809  007812  B4D8               	btfsc	status,2,c
 28810  007814  D7BC               	goto	l18919
 28811  007816  0A01               	xorlw	1	; case 255
 28812  007818  D7CC               	goto	l18923
 28813  00781A                     __end_of_SD_SPI_AsyncReadTasks:
 28814                           	callstack 0
 28815                           
 28816 ;; *************** function _memset *****************
 28817 ;; Defined at:
 28818 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\memset.c"
 28819 ;; Parameters:    Size  Location     Type
 28820 ;;  p1              2   13[COMRAM] PTR void 
 28821 ;;		 -> drive.win(512), drive.win(512), NormalProc@str(100), drive(559), 
 28822 ;;		 -> drive@fatfs_demo$F369(559), FatFsDemo_Tasks@data(13), NULL(0), 
 28823 ;;  c               2   15[COMRAM] int 
 28824 ;;  n               2   17[COMRAM] unsigned int 
 28825 ;; Auto vars:     Size  Location     Type
 28826 ;;  p               2   19[COMRAM] PTR unsigned char 
 28827 ;;		 -> drive.win(512), drive.win(512), NormalProc@str(100), drive(559), 
 28828 ;;		 -> drive@fatfs_demo$F369(559), FatFsDemo_Tasks@data(13), NULL(0), 
 28829 ;; Return value:  Size  Location     Type
 28830 ;;                  2   13[COMRAM] PTR void 
 28831 ;; Registers used:
 28832 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28833 ;; Tracked objects:
 28834 ;;		On entry : 3F/3
 28835 ;;		On exit  : 3F/3
 28836 ;;		Unchanged: 3E/0
 28837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28838 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28839 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28841 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28842 ;;Total ram usage:        8 bytes
 28843 ;; Hardware stack levels used:    1
 28844 ;; Hardware stack levels required when called:    6
 28845 ;; This function calls:
 28846 ;;		Nothing
 28847 ;; This function is called by:
 28848 ;;		_SD_SPI_AsyncReadTasks
 28849 ;; This function uses a non-reentrant model
 28850 ;;
 28851                           
 28852                           	psect	text101
 28853  00EF5A                     __ptext101:
 28854                           	callstack 0
 28855  00EF5A                     _memset:
 28856                           	callstack 18
 28857                           
 28858                           ; BSR set to: 3
 28859                           
 28860                           ;incstack = 0
 28861  00EF5A  C00E  F014         	movff	memset@p1,memset@p
 28862  00EF5E  C00F  F015         	movff	memset@p1+1,memset@p+1
 28863  00EF62  D008               	goto	l18753
 28864  00EF64                     l18749:
 28865                           
 28866                           ; BSR set to: 3
 28867  00EF64  C014  FFD9         	movff	memset@p,fsr2l
 28868  00EF68  C015  FFDA         	movff	memset@p+1,fsr2h
 28869  00EF6C  C010  FFDF         	movff	memset@c,indf2
 28870                           
 28871                           ; BSR set to: 3
 28872  00EF70  4A14               	infsnz	memset@p^0,f,c
 28873  00EF72  2A15               	incf	(memset@p+1)^0,f,c
 28874  00EF74                     l18753:
 28875                           
 28876                           ; BSR set to: 3
 28877  00EF74  0612               	decf	memset@n^0,f,c
 28878  00EF76  A0D8               	btfss	status,0,c
 28879  00EF78  0613               	decf	(memset@n+1)^0,f,c
 28880  00EF7A  2812               	incf	memset@n^0,w,c
 28881  00EF7C  E1F3               	bnz	l18749
 28882  00EF7E  2813               	incf	(memset@n+1)^0,w,c
 28883  00EF80  B4D8               	btfsc	status,2,c
 28884  00EF82  0012               	return	
 28885  00EF84  D7EF               	goto	l18749
 28886  00EF86                     __end_of_memset:
 28887                           	callstack 0
 28888                           
 28889 ;; *************** function _SPI1_ExchangeBlock *****************
 28890 ;; Defined at:
 28891 ;;		line 104 in file "mcc_generated_files/spi1.c"
 28892 ;; Parameters:    Size  Location     Type
 28893 ;;  block           2   13[COMRAM] PTR void 
 28894 ;;		 -> drive.win(512), drive.win(512), NormalProc@str(100), drive(559), 
 28895 ;;		 -> drive@fatfs_demo$F369(559), FatFsDemo_Tasks@data(13), NULL(0), 
 28896 ;;  blockSize       2   15[COMRAM] unsigned int 
 28897 ;; Auto vars:     Size  Location     Type
 28898 ;;  data            2   17[COMRAM] PTR unsigned char 
 28899 ;;		 -> drive.win(512), drive.win(512), NormalProc@str(100), drive(559), 
 28900 ;;		 -> drive@fatfs_demo$F369(559), FatFsDemo_Tasks@data(13), NULL(0), 
 28901 ;; Return value:  Size  Location     Type
 28902 ;;                  1    wreg      void 
 28903 ;; Registers used:
 28904 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28905 ;; Tracked objects:
 28906 ;;		On entry : 3F/3
 28907 ;;		On exit  : 3F/3
 28908 ;;		Unchanged: 3E/0
 28909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28910 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28911 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28913 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28914 ;;Total ram usage:        6 bytes
 28915 ;; Hardware stack levels used:    1
 28916 ;; Hardware stack levels required when called:    6
 28917 ;; This function calls:
 28918 ;;		Nothing
 28919 ;; This function is called by:
 28920 ;;		_SD_SPI_AsyncWriteTasks
 28921 ;;		_SD_SPI_AsyncReadTasks
 28922 ;; This function uses a non-reentrant model
 28923 ;;
 28924                           
 28925                           	psect	text102
 28926  00EBC6                     __ptext102:
 28927                           	callstack 0
 28928  00EBC6                     _SPI1_ExchangeBlock:
 28929                           	callstack 18
 28930                           
 28931                           ; BSR set to: 3
 28932                           ;spi1.c: 106: uint8_t *data = block;
 28933                           
 28934                           ; BSR set to: 3
 28935                           ;incstack = 0
 28936  00EBC6  C00E  F012         	movff	SPI1_ExchangeBlock@block,SPI1_ExchangeBlock@data
 28937  00EBCA  C00F  F013         	movff	SPI1_ExchangeBlock@block+1,SPI1_ExchangeBlock@data+1
 28938                           
 28939                           ;spi1.c: 107: while(blockSize--)
 28940  00EBCE  D011               	goto	l18529
 28941  00EBD0                     l18523:
 28942                           
 28943                           ; BSR set to: 3
 28944                           ;spi1.c: 108: {;spi1.c: 109: SSP1BUF = *data;
 28945  00EBD0  C012  FFD9         	movff	SPI1_ExchangeBlock@data,fsr2l
 28946  00EBD4  C013  FFDA         	movff	SPI1_ExchangeBlock@data+1,fsr2h
 28947  00EBD8  50DF               	movf	indf2,w,c
 28948  00EBDA  6EC9               	movwf	201,c	;volatile
 28949  00EBDC                     l1890:
 28950                           
 28951                           ; BSR set to: 3
 28952  00EBDC  A69E               	btfss	158,3,c	;volatile
 28953  00EBDE  D7FE               	goto	l1890
 28954                           
 28955                           ; BSR set to: 3
 28956                           ;spi1.c: 111: PIR1bits.SSP1IF = 0;
 28957  00EBE0  969E               	bcf	158,3,c	;volatile
 28958                           
 28959                           ; BSR set to: 3
 28960                           ;spi1.c: 112: *data++ = SSP1BUF;
 28961  00EBE2  C012  FFD9         	movff	SPI1_ExchangeBlock@data,fsr2l
 28962  00EBE6  C013  FFDA         	movff	SPI1_ExchangeBlock@data+1,fsr2h
 28963  00EBEA  CFC9 FFDF          	movff	4041,indf2	;volatile
 28964                           
 28965                           ; BSR set to: 3
 28966  00EBEE  4A12               	infsnz	SPI1_ExchangeBlock@data^0,f,c
 28967  00EBF0  2A13               	incf	(SPI1_ExchangeBlock@data+1)^0,f,c
 28968  00EBF2                     l18529:
 28969                           
 28970                           ; BSR set to: 3
 28971  00EBF2  0610               	decf	SPI1_ExchangeBlock@blockSize^0,f,c
 28972  00EBF4  A0D8               	btfss	status,0,c
 28973  00EBF6  0611               	decf	(SPI1_ExchangeBlock@blockSize+1)^0,f,c
 28974  00EBF8  2810               	incf	SPI1_ExchangeBlock@blockSize^0,w,c
 28975  00EBFA  E1EA               	bnz	l18523
 28976  00EBFC  2811               	incf	(SPI1_ExchangeBlock@blockSize+1)^0,w,c
 28977  00EBFE  B4D8               	btfsc	status,2,c
 28978  00EC00  0012               	return	
 28979  00EC02  D7E6               	goto	l18523
 28980  00EC04                     __end_of_SPI1_ExchangeBlock:
 28981                           	callstack 0
 28982                           
 28983 ;; *************** function _SD_SendCmd *****************
 28984 ;; Defined at:
 28985 ;;		line 1246 in file "mcc_generated_files/sd_spi/sd_spi.c"
 28986 ;; Parameters:    Size  Location     Type
 28987 ;;  cmd             1    wreg     unsigned char 
 28988 ;;  address         4   20[COMRAM] unsigned long 
 28989 ;; Auto vars:     Size  Location     Type
 28990 ;;  cmd             1   37[COMRAM] unsigned char 
 28991 ;;  response        5   38[COMRAM] struct .
 28992 ;;  address_byte    4   31[COMRAM] unsigned char [4]
 28993 ;;  longTimeout     4   27[COMRAM] unsigned long 
 28994 ;;  timeout         2   35[COMRAM] unsigned int 
 28995 ;; Return value:  Size  Location     Type
 28996 ;;                  5   20[COMRAM] struct .
 28997 ;; Registers used:
 28998 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28999 ;; Tracked objects:
 29000 ;;		On entry : 0/0
 29001 ;;		On exit  : 0/0
 29002 ;;		Unchanged: 0/0
 29003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29004 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29005 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29007 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29008 ;;Total ram usage:       23 bytes
 29009 ;; Hardware stack levels used:    1
 29010 ;; Hardware stack levels required when called:    7
 29011 ;; This function calls:
 29012 ;;		_SPI1_ExchangeByte
 29013 ;;		_memcpy
 29014 ;; This function is called by:
 29015 ;;		_SD_SPI_MediaInitialize
 29016 ;;		_SD_SPI_AsyncReadTasks
 29017 ;;		_SD_SPI_AsyncWriteTasks
 29018 ;; This function uses a non-reentrant model
 29019 ;;
 29020                           
 29021                           	psect	text103
 29022  005EFA                     __ptext103:
 29023                           	callstack 0
 29024  005EFA                     _SD_SendCmd:
 29025                           	callstack 17
 29026                           
 29027                           ; BSR set to: 3
 29028                           ;incstack = 0
 29029                           ;SD_SendCmd@cmd stored from wreg
 29030  005EFA  6E26               	movwf	SD_SendCmd@cmd^0,c
 29031                           
 29032                           ;sd_spi.c: 1248: SD_RESPONSE response;;sd_spi.c: 1249: uint16_t timeout;;sd_spi.c: 1250:
      +                           uint32_t longTimeout;;sd_spi.c: 1251: uint8_t address_bytes[4];;sd_spi.c: 1253: do { LA
      +                          TAbits.LATA6 = 0; } while(0);
 29033  005EFC  9C89               	bcf	137,6,c	;volatile
 29034                           
 29035                           ;sd_spi.c: 1255: (void)memcpy(address_bytes, &address, sizeof(address));
 29036  005EFE  0E20               	movlw	low SD_SendCmd@address_bytes
 29037  005F00  6E0E               	movwf	memcpy@d1^0,c
 29038  005F02  0E15               	movlw	low SD_SendCmd@address
 29039  005F04  6E0F               	movwf	memcpy@s1^0,c
 29040  005F06  0E00               	movlw	0
 29041  005F08  6E11               	movwf	(memcpy@n+1)^0,c
 29042  005F0A  0E04               	movlw	4
 29043  005F0C  6E10               	movwf	memcpy@n^0,c
 29044  005F0E  EC04  F077         	call	_memcpy
 29045                           
 29046                           ;sd_spi.c: 1257: (void)spiMaster[SDFAST].exchangeByte(sdmmc_cmdtable[cmd].CmdCode | (1<<
      +                          6));
 29047  005F12  0E23               	movlw	low (_spiMaster+4)
 29048  005F14  6EF6               	movwf	tblptrl,c
 29049  005F16  0EFA               	movlw	high (_spiMaster+4)
 29050  005F18  6EF7               	movwf	tblptrh,c
 29051  005F1A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29052  005F1A  6AF8               	clrf	tblptru,c
 29053  005F1C                     	endif
 29054  005F1C                     	if	0	;tblptru may be non-zero
 29055  005F1C                     	endif
 29056  005F1C  0009               	tblrd		*+
 29057  005F1E  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29058  005F22  0009               	tblrd		*+
 29059  005F24  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29060  005F28  D801               	call	u19398
 29061  005F2A  D017               	goto	u19399
 29062  005F2C                     u19398:
 29063  005F2C  0005               	push	
 29064  005F2E  6EFA               	movwf	pclath,c
 29065  005F30  501A               	movf	??_SD_SendCmd^0,w,c
 29066  005F32  6EFD               	movwf	tosl,c
 29067  005F34  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29068  005F36  6EFE               	movwf	tosh,c
 29069  005F38  6AFF               	clrf	tosu,c
 29070  005F3A  50FA               	movf	pclath,w,c
 29071  005F3C  5026               	movf	SD_SendCmd@cmd^0,w,c
 29072  005F3E  0D04               	mullw	4
 29073  005F40  0ECF               	movlw	low _sdmmc_cmdtable
 29074  005F42  24F3               	addwf	243,w,c
 29075  005F44  6EF6               	movwf	tblptrl,c
 29076  005F46  0EF9               	movlw	high _sdmmc_cmdtable
 29077  005F48  20F4               	addwfc	244,w,c
 29078  005F4A  6EF7               	movwf	tblptrh,c
 29079  005F4C                     	if	1	;There are 3 active tblptr bytes
 29080  005F4C  6AF8               	clrf	tblptru,c
 29081  005F4E  0E00               	movlw	low (__mediumconst shr (0+16))
 29082  005F50  22F8               	addwfc	tblptru,f,c
 29083  005F52                     	endif
 29084  005F52  0008               	tblrd		*
 29085  005F54  50F5               	movf	tablat,w,c
 29086  005F56  0940               	iorlw	64
 29087  005F58  0012               	return		;indir
 29088  005F5A                     u19399:
 29089                           
 29090                           ;sd_spi.c: 1259: (void)spiMaster[SDFAST].exchangeByte(address_bytes[3]);
 29091  005F5A  0E23               	movlw	low (_spiMaster+4)
 29092  005F5C  6EF6               	movwf	tblptrl,c
 29093  005F5E  0EFA               	movlw	high (_spiMaster+4)
 29094  005F60  6EF7               	movwf	tblptrh,c
 29095  005F62                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29096  005F62  6AF8               	clrf	tblptru,c
 29097  005F64                     	endif
 29098  005F64                     	if	0	;tblptru may be non-zero
 29099  005F64                     	endif
 29100  005F64  0009               	tblrd		*+
 29101  005F66  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29102  005F6A  0009               	tblrd		*+
 29103  005F6C  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29104  005F70  D801               	call	u19408
 29105  005F72  D00A               	goto	u19409
 29106  005F74                     u19408:
 29107  005F74  0005               	push	
 29108  005F76  6EFA               	movwf	pclath,c
 29109  005F78  501A               	movf	??_SD_SendCmd^0,w,c
 29110  005F7A  6EFD               	movwf	tosl,c
 29111  005F7C  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29112  005F7E  6EFE               	movwf	tosh,c
 29113  005F80  6AFF               	clrf	tosu,c
 29114  005F82  50FA               	movf	pclath,w,c
 29115  005F84  5023               	movf	(SD_SendCmd@address_bytes+3)^0,w,c
 29116  005F86  0012               	return		;indir
 29117  005F88                     u19409:
 29118                           
 29119                           ;sd_spi.c: 1260: (void)spiMaster[SDFAST].exchangeByte(address_bytes[2]);
 29120  005F88  0E23               	movlw	low (_spiMaster+4)
 29121  005F8A  6EF6               	movwf	tblptrl,c
 29122  005F8C  0EFA               	movlw	high (_spiMaster+4)
 29123  005F8E  6EF7               	movwf	tblptrh,c
 29124  005F90                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29125  005F90  6AF8               	clrf	tblptru,c
 29126  005F92                     	endif
 29127  005F92                     	if	0	;tblptru may be non-zero
 29128  005F92                     	endif
 29129  005F92  0009               	tblrd		*+
 29130  005F94  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29131  005F98  0009               	tblrd		*+
 29132  005F9A  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29133  005F9E  D801               	call	u19418
 29134  005FA0  D00A               	goto	u19419
 29135  005FA2                     u19418:
 29136  005FA2  0005               	push	
 29137  005FA4  6EFA               	movwf	pclath,c
 29138  005FA6  501A               	movf	??_SD_SendCmd^0,w,c
 29139  005FA8  6EFD               	movwf	tosl,c
 29140  005FAA  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29141  005FAC  6EFE               	movwf	tosh,c
 29142  005FAE  6AFF               	clrf	tosu,c
 29143  005FB0  50FA               	movf	pclath,w,c
 29144  005FB2  5022               	movf	(SD_SendCmd@address_bytes+2)^0,w,c
 29145  005FB4  0012               	return		;indir
 29146  005FB6                     u19419:
 29147                           
 29148                           ;sd_spi.c: 1261: (void)spiMaster[SDFAST].exchangeByte(address_bytes[1]);
 29149  005FB6  0E23               	movlw	low (_spiMaster+4)
 29150  005FB8  6EF6               	movwf	tblptrl,c
 29151  005FBA  0EFA               	movlw	high (_spiMaster+4)
 29152  005FBC  6EF7               	movwf	tblptrh,c
 29153  005FBE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29154  005FBE  6AF8               	clrf	tblptru,c
 29155  005FC0                     	endif
 29156  005FC0                     	if	0	;tblptru may be non-zero
 29157  005FC0                     	endif
 29158  005FC0  0009               	tblrd		*+
 29159  005FC2  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29160  005FC6  0009               	tblrd		*+
 29161  005FC8  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29162  005FCC  D801               	call	u19428
 29163  005FCE  D00A               	goto	u19429
 29164  005FD0                     u19428:
 29165  005FD0  0005               	push	
 29166  005FD2  6EFA               	movwf	pclath,c
 29167  005FD4  501A               	movf	??_SD_SendCmd^0,w,c
 29168  005FD6  6EFD               	movwf	tosl,c
 29169  005FD8  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29170  005FDA  6EFE               	movwf	tosh,c
 29171  005FDC  6AFF               	clrf	tosu,c
 29172  005FDE  50FA               	movf	pclath,w,c
 29173  005FE0  5021               	movf	(SD_SendCmd@address_bytes+1)^0,w,c
 29174  005FE2  0012               	return		;indir
 29175  005FE4                     u19429:
 29176                           
 29177                           ;sd_spi.c: 1262: (void)spiMaster[SDFAST].exchangeByte(address_bytes[0]);
 29178  005FE4  0E23               	movlw	low (_spiMaster+4)
 29179  005FE6  6EF6               	movwf	tblptrl,c
 29180  005FE8  0EFA               	movlw	high (_spiMaster+4)
 29181  005FEA  6EF7               	movwf	tblptrh,c
 29182  005FEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29183  005FEC  6AF8               	clrf	tblptru,c
 29184  005FEE                     	endif
 29185  005FEE                     	if	0	;tblptru may be non-zero
 29186  005FEE                     	endif
 29187  005FEE  0009               	tblrd		*+
 29188  005FF0  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29189  005FF4  0009               	tblrd		*+
 29190  005FF6  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29191  005FFA  D801               	call	u19438
 29192  005FFC  D00A               	goto	u19439
 29193  005FFE                     u19438:
 29194  005FFE  0005               	push	
 29195  006000  6EFA               	movwf	pclath,c
 29196  006002  501A               	movf	??_SD_SendCmd^0,w,c
 29197  006004  6EFD               	movwf	tosl,c
 29198  006006  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29199  006008  6EFE               	movwf	tosh,c
 29200  00600A  6AFF               	clrf	tosu,c
 29201  00600C  50FA               	movf	pclath,w,c
 29202  00600E  5020               	movf	SD_SendCmd@address_bytes^0,w,c
 29203  006010  0012               	return		;indir
 29204  006012                     u19439:
 29205                           
 29206                           ;sd_spi.c: 1264: (void)spiMaster[SDFAST].exchangeByte(sdmmc_cmdtable[cmd].CRC);
 29207  006012  0E23               	movlw	low (_spiMaster+4)
 29208  006014  6EF6               	movwf	tblptrl,c
 29209  006016  0EFA               	movlw	high (_spiMaster+4)
 29210  006018  6EF7               	movwf	tblptrh,c
 29211  00601A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29212  00601A  6AF8               	clrf	tblptru,c
 29213  00601C                     	endif
 29214  00601C                     	if	0	;tblptru may be non-zero
 29215  00601C                     	endif
 29216  00601C  0009               	tblrd		*+
 29217  00601E  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29218  006022  0009               	tblrd		*+
 29219  006024  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29220  006028  D801               	call	u19448
 29221  00602A  D01A               	goto	u19449
 29222  00602C                     u19448:
 29223  00602C  0005               	push	
 29224  00602E  6EFA               	movwf	pclath,c
 29225  006030  501A               	movf	??_SD_SendCmd^0,w,c
 29226  006032  6EFD               	movwf	tosl,c
 29227  006034  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29228  006036  6EFE               	movwf	tosh,c
 29229  006038  6AFF               	clrf	tosu,c
 29230  00603A  50FA               	movf	pclath,w,c
 29231  00603C  5026               	movf	SD_SendCmd@cmd^0,w,c
 29232  00603E  0D04               	mullw	4
 29233  006040  0E01               	movlw	1
 29234  006042  26F3               	addwf	243,f,c
 29235  006044  0E00               	movlw	0
 29236  006046  22F4               	addwfc	244,f,c
 29237  006048  0ECF               	movlw	low _sdmmc_cmdtable
 29238  00604A  24F3               	addwf	243,w,c
 29239  00604C  6EF6               	movwf	tblptrl,c
 29240  00604E  0EF9               	movlw	high _sdmmc_cmdtable
 29241  006050  20F4               	addwfc	244,w,c
 29242  006052  6EF7               	movwf	tblptrh,c
 29243  006054                     	if	1	;There are 3 active tblptr bytes
 29244  006054  6AF8               	clrf	tblptru,c
 29245  006056  0E00               	movlw	low (__mediumconst shr (0+16))
 29246  006058  22F8               	addwfc	tblptru,f,c
 29247  00605A                     	endif
 29248  00605A  0008               	tblrd		*
 29249  00605C  50F5               	movf	tablat,w,c
 29250  00605E  0012               	return		;indir
 29251  006060                     u19449:
 29252                           
 29253                           ;sd_spi.c: 1269: if(cmd == SD_STOP_TRANSMISSION)
 29254  006060  0E05               	movlw	5
 29255  006062  1826               	xorwf	SD_SendCmd@cmd^0,w,c
 29256  006064  A4D8               	btfss	status,2,c
 29257  006066  D017               	goto	u19469
 29258                           
 29259                           ;sd_spi.c: 1270: {;sd_spi.c: 1271: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 29260  006068  0E23               	movlw	low (_spiMaster+4)
 29261  00606A  6EF6               	movwf	tblptrl,c
 29262  00606C  0EFA               	movlw	high (_spiMaster+4)
 29263  00606E  6EF7               	movwf	tblptrh,c
 29264  006070                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29265  006070  6AF8               	clrf	tblptru,c
 29266  006072                     	endif
 29267  006072                     	if	0	;tblptru may be non-zero
 29268  006072                     	endif
 29269  006072  0009               	tblrd		*+
 29270  006074  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29271  006078  0009               	tblrd		*+
 29272  00607A  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29273  00607E  D801               	call	u19468
 29274  006080  D00A               	goto	u19469
 29275  006082                     u19468:
 29276  006082  0005               	push	
 29277  006084  6EFA               	movwf	pclath,c
 29278  006086  501A               	movf	??_SD_SendCmd^0,w,c
 29279  006088  6EFD               	movwf	tosl,c
 29280  00608A  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29281  00608C  6EFE               	movwf	tosh,c
 29282  00608E  6AFF               	clrf	tosu,c
 29283  006090  50FA               	movf	pclath,w,c
 29284  006092  0EFF               	movlw	255
 29285  006094  0012               	return		;indir
 29286  006096                     u19469:
 29287                           
 29288                           ;sd_spi.c: 1272: };sd_spi.c: 1277: timeout = (uint16_t)20;
 29289  006096  0E00               	movlw	0
 29290  006098  6E25               	movwf	(SD_SendCmd@timeout+1)^0,c
 29291  00609A  0E14               	movlw	20
 29292  00609C  6E24               	movwf	SD_SendCmd@timeout^0,c
 29293  00609E                     l18483:
 29294                           
 29295                           ;sd_spi.c: 1279: {;sd_spi.c: 1280: response.r1._byte = spiMaster[SDFAST].exchangeByte(0x
      +                          FF);
 29296  00609E  0E23               	movlw	low (_spiMaster+4)
 29297  0060A0  6EF6               	movwf	tblptrl,c
 29298  0060A2  0EFA               	movlw	high (_spiMaster+4)
 29299  0060A4  6EF7               	movwf	tblptrh,c
 29300  0060A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29301  0060A6  6AF8               	clrf	tblptru,c
 29302  0060A8                     	endif
 29303  0060A8                     	if	0	;tblptru may be non-zero
 29304  0060A8                     	endif
 29305  0060A8  0009               	tblrd		*+
 29306  0060AA  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29307  0060AE  0009               	tblrd		*+
 29308  0060B0  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29309  0060B4  D801               	call	u19478
 29310  0060B6  D00A               	goto	u19479
 29311  0060B8                     u19478:
 29312  0060B8  0005               	push	
 29313  0060BA  6EFA               	movwf	pclath,c
 29314  0060BC  501A               	movf	??_SD_SendCmd^0,w,c
 29315  0060BE  6EFD               	movwf	tosl,c
 29316  0060C0  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29317  0060C2  6EFE               	movwf	tosh,c
 29318  0060C4  6AFF               	clrf	tosu,c
 29319  0060C6  50FA               	movf	pclath,w,c
 29320  0060C8  0EFF               	movlw	255
 29321  0060CA  0012               	return		;indir
 29322  0060CC                     u19479:
 29323  0060CC  6E27               	movwf	SD_SendCmd@response^0,c
 29324                           
 29325                           ;sd_spi.c: 1281: timeout--;
 29326  0060CE  0624               	decf	SD_SendCmd@timeout^0,f,c
 29327  0060D0  A0D8               	btfss	status,0,c
 29328  0060D2  0625               	decf	(SD_SendCmd@timeout+1)^0,f,c
 29329                           
 29330                           ;sd_spi.c: 1282: }while((response.r1._byte == SD_TOKEN_FLOATING_BUS) && (timeout != 0));
 29331  0060D4  2827               	incf	SD_SendCmd@response^0,w,c
 29332  0060D6  A4D8               	btfss	status,2,c
 29333  0060D8  D004               	goto	u19490
 29334  0060DA  5024               	movf	SD_SendCmd@timeout^0,w,c
 29335  0060DC  1025               	iorwf	(SD_SendCmd@timeout+1)^0,w,c
 29336  0060DE  A4D8               	btfss	status,2,c
 29337  0060E0  D7DE               	goto	l18483
 29338  0060E2                     u19490:
 29339                           
 29340                           ;sd_spi.c: 1285: if(sdmmc_cmdtable[cmd].responsetype == SD_RESPONSE_R2)
 29341  0060E2  5026               	movf	SD_SendCmd@cmd^0,w,c
 29342  0060E4  0D04               	mullw	4
 29343  0060E6  0E02               	movlw	2
 29344  0060E8  26F3               	addwf	243,f,c
 29345  0060EA  0E00               	movlw	0
 29346  0060EC  22F4               	addwfc	244,f,c
 29347  0060EE  0ECF               	movlw	low _sdmmc_cmdtable
 29348  0060F0  24F3               	addwf	243,w,c
 29349  0060F2  6EF6               	movwf	tblptrl,c
 29350  0060F4  0EF9               	movlw	high _sdmmc_cmdtable
 29351  0060F6  20F4               	addwfc	244,w,c
 29352  0060F8  6EF7               	movwf	tblptrh,c
 29353  0060FA                     	if	1	;There are 3 active tblptr bytes
 29354  0060FA  6AF8               	clrf	tblptru,c
 29355  0060FC  0E00               	movlw	low (__mediumconst shr (0+16))
 29356  0060FE  22F8               	addwfc	tblptru,f,c
 29357  006100                     	endif
 29358  006100  0008               	tblrd		*
 29359  006102  50F5               	movf	tablat,w,c
 29360  006104  0A02               	xorlw	2
 29361  006106  A4D8               	btfss	status,2,c
 29362  006108  D019               	goto	l18497
 29363                           
 29364                           ;sd_spi.c: 1286: {;sd_spi.c: 1287: response.r2._byte1 = response.r1._byte;
 29365  00610A  C027  F028         	movff	SD_SendCmd@response,SD_SendCmd@response+1
 29366                           
 29367                           ;sd_spi.c: 1288: response.r2._byte0 = spiMaster[SDFAST].exchangeByte(0xFF);
 29368  00610E  0E23               	movlw	low (_spiMaster+4)
 29369  006110  6EF6               	movwf	tblptrl,c
 29370  006112  0EFA               	movlw	high (_spiMaster+4)
 29371  006114  6EF7               	movwf	tblptrh,c
 29372  006116                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29373  006116  6AF8               	clrf	tblptru,c
 29374  006118                     	endif
 29375  006118                     	if	0	;tblptru may be non-zero
 29376  006118                     	endif
 29377  006118  0009               	tblrd		*+
 29378  00611A  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29379  00611E  0009               	tblrd		*+
 29380  006120  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29381  006124  D801               	call	u19518
 29382  006126  D04D               	goto	L29
 29383  006128                     u19518:
 29384  006128  0005               	push	
 29385  00612A  6EFA               	movwf	pclath,c
 29386  00612C  501A               	movf	??_SD_SendCmd^0,w,c
 29387  00612E  6EFD               	movwf	tosl,c
 29388  006130  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29389  006132  6EFE               	movwf	tosh,c
 29390  006134  6AFF               	clrf	tosu,c
 29391  006136  50FA               	movf	pclath,w,c
 29392  006138  0EFF               	movlw	255
 29393  00613A  0012               	return		;indir
 29394  00613C                     l18497:
 29395                           
 29396                           ;sd_spi.c: 1290: else if(sdmmc_cmdtable[cmd].responsetype == SD_RESPONSE_R1b)
 29397  00613C  5026               	movf	SD_SendCmd@cmd^0,w,c
 29398  00613E  0D04               	mullw	4
 29399  006140  0E02               	movlw	2
 29400  006142  26F3               	addwf	243,f,c
 29401  006144  0E00               	movlw	0
 29402  006146  22F4               	addwfc	244,f,c
 29403  006148  0ECF               	movlw	low _sdmmc_cmdtable
 29404  00614A  24F3               	addwf	243,w,c
 29405  00614C  6EF6               	movwf	tblptrl,c
 29406  00614E  0EF9               	movlw	high _sdmmc_cmdtable
 29407  006150  20F4               	addwfc	244,w,c
 29408  006152  6EF7               	movwf	tblptrh,c
 29409  006154                     	if	1	;There are 3 active tblptr bytes
 29410  006154  6AF8               	clrf	tblptru,c
 29411  006156  0E00               	movlw	low (__mediumconst shr (0+16))
 29412  006158  22F8               	addwfc	tblptru,f,c
 29413  00615A                     	endif
 29414  00615A  0008               	tblrd		*
 29415  00615C  50F5               	movf	tablat,w,c
 29416  00615E  06E8               	decf	wreg,f,c
 29417  006160  A4D8               	btfss	status,2,c
 29418  006162  D031               	goto	l18511
 29419                           
 29420                           ;sd_spi.c: 1291: {;sd_spi.c: 1299: longTimeout = (uint32_t)0xA0000;
 29421  006164  0E00               	movlw	0
 29422  006166  6E1C               	movwf	SD_SendCmd@longTimeout^0,c
 29423  006168  0E00               	movlw	0
 29424  00616A  6E1D               	movwf	(SD_SendCmd@longTimeout+1)^0,c
 29425  00616C  0E0A               	movlw	10
 29426  00616E  6E1E               	movwf	(SD_SendCmd@longTimeout+2)^0,c
 29427  006170  0E00               	movlw	0
 29428  006172  6E1F               	movwf	(SD_SendCmd@longTimeout+3)^0,c
 29429  006174                     l18501:
 29430                           
 29431                           ;sd_spi.c: 1301: {;sd_spi.c: 1302: response.r1._byte = spiMaster[SDFAST].exchangeByte(0x
      +                          FF);
 29432  006174  0E23               	movlw	low (_spiMaster+4)
 29433  006176  6EF6               	movwf	tblptrl,c
 29434  006178  0EFA               	movlw	high (_spiMaster+4)
 29435  00617A  6EF7               	movwf	tblptrh,c
 29436  00617C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29437  00617C  6AF8               	clrf	tblptru,c
 29438  00617E                     	endif
 29439  00617E                     	if	0	;tblptru may be non-zero
 29440  00617E                     	endif
 29441  00617E  0009               	tblrd		*+
 29442  006180  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29443  006184  0009               	tblrd		*+
 29444  006186  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29445  00618A  D801               	call	u19538
 29446  00618C  D00A               	goto	u19539
 29447  00618E                     u19538:
 29448  00618E  0005               	push	
 29449  006190  6EFA               	movwf	pclath,c
 29450  006192  501A               	movf	??_SD_SendCmd^0,w,c
 29451  006194  6EFD               	movwf	tosl,c
 29452  006196  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29453  006198  6EFE               	movwf	tosh,c
 29454  00619A  6AFF               	clrf	tosu,c
 29455  00619C  50FA               	movf	pclath,w,c
 29456  00619E  0EFF               	movlw	255
 29457  0061A0  0012               	return		;indir
 29458  0061A2                     u19539:
 29459  0061A2  6E27               	movwf	SD_SendCmd@response^0,c
 29460                           
 29461                           ;sd_spi.c: 1303: longTimeout--;
 29462  0061A4  061C               	decf	SD_SendCmd@longTimeout^0,f,c
 29463  0061A6  0E00               	movlw	0
 29464  0061A8  5A1D               	subwfb	(SD_SendCmd@longTimeout+1)^0,f,c
 29465  0061AA  5A1E               	subwfb	(SD_SendCmd@longTimeout+2)^0,f,c
 29466  0061AC  5A1F               	subwfb	(SD_SendCmd@longTimeout+3)^0,f,c
 29467                           
 29468                           ;sd_spi.c: 1304: }while((response.r1._byte == 0x00) && (longTimeout != 0));
 29469  0061AE  5027               	movf	SD_SendCmd@response^0,w,c
 29470  0061B0  A4D8               	btfss	status,2,c
 29471  0061B2  D006               	goto	u19550
 29472  0061B4  501C               	movf	SD_SendCmd@longTimeout^0,w,c
 29473  0061B6  101D               	iorwf	(SD_SendCmd@longTimeout+1)^0,w,c
 29474  0061B8  101E               	iorwf	(SD_SendCmd@longTimeout+2)^0,w,c
 29475  0061BA  101F               	iorwf	(SD_SendCmd@longTimeout+3)^0,w,c
 29476  0061BC  A4D8               	btfss	status,2,c
 29477  0061BE  D7DA               	goto	l18501
 29478  0061C0                     u19550:
 29479                           
 29480                           ;sd_spi.c: 1306: response.r1._byte = 0x00;
 29481  0061C0  0E00               	movlw	0
 29482  0061C2                     L29:
 29483  0061C2  6E27               	movwf	SD_SendCmd@response^0,c
 29484                           
 29485                           ;sd_spi.c: 1307: }
 29486  0061C4  D074               	goto	l1111
 29487  0061C6                     l18511:
 29488                           
 29489                           ;sd_spi.c: 1308: else if (sdmmc_cmdtable[cmd].responsetype == SD_RESPONSE_R7)
 29490  0061C6  5026               	movf	SD_SendCmd@cmd^0,w,c
 29491  0061C8  0D04               	mullw	4
 29492  0061CA  0E02               	movlw	2
 29493  0061CC  26F3               	addwf	243,f,c
 29494  0061CE  0E00               	movlw	0
 29495  0061D0  22F4               	addwfc	244,f,c
 29496  0061D2  0ECF               	movlw	low _sdmmc_cmdtable
 29497  0061D4  24F3               	addwf	243,w,c
 29498  0061D6  6EF6               	movwf	tblptrl,c
 29499  0061D8  0EF9               	movlw	high _sdmmc_cmdtable
 29500  0061DA  20F4               	addwfc	244,w,c
 29501  0061DC  6EF7               	movwf	tblptrh,c
 29502  0061DE                     	if	1	;There are 3 active tblptr bytes
 29503  0061DE  6AF8               	clrf	tblptru,c
 29504  0061E0  0E00               	movlw	low (__mediumconst shr (0+16))
 29505  0061E2  22F8               	addwfc	tblptru,f,c
 29506  0061E4                     	endif
 29507  0061E4  0008               	tblrd		*
 29508  0061E6  50F5               	movf	tablat,w,c
 29509  0061E8  0A04               	xorlw	4
 29510  0061EA  A4D8               	btfss	status,2,c
 29511  0061EC  D060               	goto	l1111
 29512                           
 29513                           ;sd_spi.c: 1309: {;sd_spi.c: 1315: response.r7.bytewise.argument._byte3 = spiMaster[SDFA
      +                          ST].exchangeByte(0xFF);
 29514  0061EE  0E23               	movlw	low (_spiMaster+4)
 29515  0061F0  6EF6               	movwf	tblptrl,c
 29516  0061F2  0EFA               	movlw	high (_spiMaster+4)
 29517  0061F4  6EF7               	movwf	tblptrh,c
 29518  0061F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29519  0061F6  6AF8               	clrf	tblptru,c
 29520  0061F8                     	endif
 29521  0061F8                     	if	0	;tblptru may be non-zero
 29522  0061F8                     	endif
 29523  0061F8  0009               	tblrd		*+
 29524  0061FA  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29525  0061FE  0009               	tblrd		*+
 29526  006200  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29527  006204  D801               	call	u19578
 29528  006206  D00A               	goto	u19579
 29529  006208                     u19578:
 29530  006208  0005               	push	
 29531  00620A  6EFA               	movwf	pclath,c
 29532  00620C  501A               	movf	??_SD_SendCmd^0,w,c
 29533  00620E  6EFD               	movwf	tosl,c
 29534  006210  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29535  006212  6EFE               	movwf	tosh,c
 29536  006214  6AFF               	clrf	tosu,c
 29537  006216  50FA               	movf	pclath,w,c
 29538  006218  0EFF               	movlw	255
 29539  00621A  0012               	return		;indir
 29540  00621C                     u19579:
 29541  00621C  6E2B               	movwf	(SD_SendCmd@response+4)^0,c
 29542                           
 29543                           ;sd_spi.c: 1316: response.r7.bytewise.argument._byte2 = spiMaster[SDFAST].exchangeByte(0
      +                          xFF);
 29544  00621E  0E23               	movlw	low (_spiMaster+4)
 29545  006220  6EF6               	movwf	tblptrl,c
 29546  006222  0EFA               	movlw	high (_spiMaster+4)
 29547  006224  6EF7               	movwf	tblptrh,c
 29548  006226                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29549  006226  6AF8               	clrf	tblptru,c
 29550  006228                     	endif
 29551  006228                     	if	0	;tblptru may be non-zero
 29552  006228                     	endif
 29553  006228  0009               	tblrd		*+
 29554  00622A  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29555  00622E  0009               	tblrd		*+
 29556  006230  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29557  006234  D801               	call	u19588
 29558  006236  D00A               	goto	u19589
 29559  006238                     u19588:
 29560  006238  0005               	push	
 29561  00623A  6EFA               	movwf	pclath,c
 29562  00623C  501A               	movf	??_SD_SendCmd^0,w,c
 29563  00623E  6EFD               	movwf	tosl,c
 29564  006240  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29565  006242  6EFE               	movwf	tosh,c
 29566  006244  6AFF               	clrf	tosu,c
 29567  006246  50FA               	movf	pclath,w,c
 29568  006248  0EFF               	movlw	255
 29569  00624A  0012               	return		;indir
 29570  00624C                     u19589:
 29571  00624C  6E2A               	movwf	(SD_SendCmd@response+3)^0,c
 29572                           
 29573                           ;sd_spi.c: 1317: response.r7.bytewise.argument._byte1 = spiMaster[SDFAST].exchangeByte(0
      +                          xFF);
 29574  00624E  0E23               	movlw	low (_spiMaster+4)
 29575  006250  6EF6               	movwf	tblptrl,c
 29576  006252  0EFA               	movlw	high (_spiMaster+4)
 29577  006254  6EF7               	movwf	tblptrh,c
 29578  006256                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29579  006256  6AF8               	clrf	tblptru,c
 29580  006258                     	endif
 29581  006258                     	if	0	;tblptru may be non-zero
 29582  006258                     	endif
 29583  006258  0009               	tblrd		*+
 29584  00625A  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29585  00625E  0009               	tblrd		*+
 29586  006260  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29587  006264  D801               	call	u19598
 29588  006266  D00A               	goto	u19599
 29589  006268                     u19598:
 29590  006268  0005               	push	
 29591  00626A  6EFA               	movwf	pclath,c
 29592  00626C  501A               	movf	??_SD_SendCmd^0,w,c
 29593  00626E  6EFD               	movwf	tosl,c
 29594  006270  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29595  006272  6EFE               	movwf	tosh,c
 29596  006274  6AFF               	clrf	tosu,c
 29597  006276  50FA               	movf	pclath,w,c
 29598  006278  0EFF               	movlw	255
 29599  00627A  0012               	return		;indir
 29600  00627C                     u19599:
 29601  00627C  6E29               	movwf	(SD_SendCmd@response+2)^0,c
 29602                           
 29603                           ;sd_spi.c: 1318: response.r7.bytewise.argument._byte0 = spiMaster[SDFAST].exchangeByte(0
      +                          xFF);
 29604  00627E  0E23               	movlw	low (_spiMaster+4)
 29605  006280  6EF6               	movwf	tblptrl,c
 29606  006282  0EFA               	movlw	high (_spiMaster+4)
 29607  006284  6EF7               	movwf	tblptrh,c
 29608  006286                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29609  006286  6AF8               	clrf	tblptru,c
 29610  006288                     	endif
 29611  006288                     	if	0	;tblptru may be non-zero
 29612  006288                     	endif
 29613  006288  0009               	tblrd		*+
 29614  00628A  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29615  00628E  0009               	tblrd		*+
 29616  006290  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29617  006294  D801               	call	u19608
 29618  006296  D00A               	goto	u19609
 29619  006298                     u19608:
 29620  006298  0005               	push	
 29621  00629A  6EFA               	movwf	pclath,c
 29622  00629C  501A               	movf	??_SD_SendCmd^0,w,c
 29623  00629E  6EFD               	movwf	tosl,c
 29624  0062A0  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29625  0062A2  6EFE               	movwf	tosh,c
 29626  0062A4  6AFF               	clrf	tosu,c
 29627  0062A6  50FA               	movf	pclath,w,c
 29628  0062A8  0EFF               	movlw	255
 29629  0062AA  0012               	return		;indir
 29630  0062AC                     u19609:
 29631  0062AC  6E28               	movwf	(SD_SendCmd@response+1)^0,c
 29632  0062AE                     l1111:
 29633                           
 29634                           ;sd_spi.c: 1319: };sd_spi.c: 1324: (void)spiMaster[SDFAST].exchangeByte(0xFF);
 29635  0062AE  0E23               	movlw	low (_spiMaster+4)
 29636  0062B0  6EF6               	movwf	tblptrl,c
 29637  0062B2  0EFA               	movlw	high (_spiMaster+4)
 29638  0062B4  6EF7               	movwf	tblptrh,c
 29639  0062B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 29640  0062B6  6AF8               	clrf	tblptru,c
 29641  0062B8                     	endif
 29642  0062B8                     	if	0	;tblptru may be non-zero
 29643  0062B8                     	endif
 29644  0062B8  0009               	tblrd		*+
 29645  0062BA  CFF5 F01A          	movff	tablat,??_SD_SendCmd
 29646  0062BE  0009               	tblrd		*+
 29647  0062C0  CFF5 F01B          	movff	tablat,??_SD_SendCmd+1
 29648  0062C4  D801               	call	u19618
 29649  0062C6  D00A               	goto	u19619
 29650  0062C8                     u19618:
 29651  0062C8  0005               	push	
 29652  0062CA  6EFA               	movwf	pclath,c
 29653  0062CC  501A               	movf	??_SD_SendCmd^0,w,c
 29654  0062CE  6EFD               	movwf	tosl,c
 29655  0062D0  501B               	movf	(??_SD_SendCmd+1)^0,w,c
 29656  0062D2  6EFE               	movwf	tosh,c
 29657  0062D4  6AFF               	clrf	tosu,c
 29658  0062D6  50FA               	movf	pclath,w,c
 29659  0062D8  0EFF               	movlw	255
 29660  0062DA  0012               	return		;indir
 29661  0062DC                     u19619:
 29662                           
 29663                           ;sd_spi.c: 1327: if( sdmmc_cmdtable[cmd].moreDataExpected == 0 )
 29664  0062DC  5026               	movf	SD_SendCmd@cmd^0,w,c
 29665  0062DE  0D04               	mullw	4
 29666  0062E0  0E03               	movlw	3
 29667  0062E2  26F3               	addwf	243,f,c
 29668  0062E4  0E00               	movlw	0
 29669  0062E6  22F4               	addwfc	244,f,c
 29670  0062E8  0ECF               	movlw	low _sdmmc_cmdtable
 29671  0062EA  24F3               	addwf	243,w,c
 29672  0062EC  6EF6               	movwf	tblptrl,c
 29673  0062EE  0EF9               	movlw	high _sdmmc_cmdtable
 29674  0062F0  20F4               	addwfc	244,w,c
 29675  0062F2  6EF7               	movwf	tblptrh,c
 29676  0062F4                     	if	1	;There are 3 active tblptr bytes
 29677  0062F4  6AF8               	clrf	tblptru,c
 29678  0062F6  0E00               	movlw	low (__mediumconst shr (0+16))
 29679  0062F8  22F8               	addwfc	tblptru,f,c
 29680  0062FA                     	endif
 29681  0062FA  0008               	tblrd		*
 29682  0062FC  50F5               	movf	tablat,w,c
 29683  0062FE  0900               	iorlw	0
 29684  006300  B4D8               	btfsc	status,2,c
 29685                           
 29686                           ;sd_spi.c: 1328: {;sd_spi.c: 1329: do { LATAbits.LATA6 = 1; } while(0);
 29687  006302  8C89               	bsf	137,6,c	;volatile
 29688                           
 29689                           ;sd_spi.c: 1330: };sd_spi.c: 1332: return(response);
 29690  006304  EE20  F027         	lfsr	2,SD_SendCmd@response
 29691  006308  EE00  F015         	lfsr	0,?_SD_SendCmd
 29692  00630C  0E04               	movlw	4
 29693  00630E                     u19631:
 29694  00630E  CFDB FFEB          	movff	plusw2,plusw0
 29695  006312  06E8               	decf	wreg,f,c
 29696  006314  E2FC               	bc	u19631
 29697  006316  0012               	return		;funcret
 29698  006318                     __end_of_SD_SendCmd:
 29699                           	callstack 0
 29700                           
 29701 ;; *************** function _memcpy *****************
 29702 ;; Defined at:
 29703 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\memcpy.c"
 29704 ;; Parameters:    Size  Location     Type
 29705 ;;  d1              1   13[COMRAM] PTR void 
 29706 ;;		 -> SD_SendCmd@address_bytes(4), 
 29707 ;;  s1              1   14[COMRAM] PTR const void 
 29708 ;;		 -> SD_SendCmd@address(4), 
 29709 ;;  n               2   15[COMRAM] unsigned int 
 29710 ;; Auto vars:     Size  Location     Type
 29711 ;;  s               1   19[COMRAM] PTR const unsigned char 
 29712 ;;		 -> SD_SendCmd@address(4), 
 29713 ;;  d               1   18[COMRAM] PTR unsigned char 
 29714 ;;		 -> SD_SendCmd@address_bytes(4), 
 29715 ;;  tmp             1   17[COMRAM] unsigned char 
 29716 ;; Return value:  Size  Location     Type
 29717 ;;                  1    wreg      PTR void 
 29718 ;; Registers used:
 29719 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29720 ;; Tracked objects:
 29721 ;;		On entry : 0/0
 29722 ;;		On exit  : 0/0
 29723 ;;		Unchanged: 0/0
 29724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29725 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29726 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29728 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29729 ;;Total ram usage:        7 bytes
 29730 ;; Hardware stack levels used:    1
 29731 ;; Hardware stack levels required when called:    6
 29732 ;; This function calls:
 29733 ;;		Nothing
 29734 ;; This function is called by:
 29735 ;;		_SD_SendCmd
 29736 ;; This function uses a non-reentrant model
 29737 ;;
 29738                           
 29739                           	psect	text104
 29740  00EE08                     __ptext104:
 29741                           	callstack 0
 29742  00EE08                     _memcpy:
 29743                           	callstack 17
 29744                           
 29745                           ;incstack = 0
 29746  00EE08  C00F  F014         	movff	memcpy@s1,memcpy@s
 29747  00EE0C  C00E  F013         	movff	memcpy@d1,memcpy@d
 29748  00EE10  D00C               	goto	l18443
 29749  00EE12                     l18437:
 29750  00EE12  5014               	movf	memcpy@s^0,w,c
 29751  00EE14  6ED9               	movwf	fsr2l,c
 29752  00EE16  6ADA               	clrf	fsr2h,c
 29753  00EE18  50DF               	movf	indf2,w,c
 29754  00EE1A  6E12               	movwf	memcpy@tmp^0,c
 29755  00EE1C  2A14               	incf	memcpy@s^0,f,c
 29756  00EE1E  5013               	movf	memcpy@d^0,w,c
 29757  00EE20  6ED9               	movwf	fsr2l,c
 29758  00EE22  6ADA               	clrf	fsr2h,c
 29759  00EE24  C012  FFDF         	movff	memcpy@tmp,indf2
 29760  00EE28  2A13               	incf	memcpy@d^0,f,c
 29761  00EE2A                     l18443:
 29762  00EE2A  0610               	decf	memcpy@n^0,f,c
 29763  00EE2C  A0D8               	btfss	status,0,c
 29764  00EE2E  0611               	decf	(memcpy@n+1)^0,f,c
 29765  00EE30  2810               	incf	memcpy@n^0,w,c
 29766  00EE32  E1EF               	bnz	l18437
 29767  00EE34  2811               	incf	(memcpy@n+1)^0,w,c
 29768  00EE36  B4D8               	btfsc	status,2,c
 29769  00EE38  0012               	return	
 29770  00EE3A  D7EB               	goto	l18437
 29771  00EE3C                     __end_of_memcpy:
 29772                           	callstack 0
 29773                           
 29774 ;; *************** function _get_fattime *****************
 29775 ;; Defined at:
 29776 ;;		line 80 in file "mcc_generated_files/fatfs/ff_time.c"
 29777 ;; Parameters:    Size  Location     Type
 29778 ;;		None
 29779 ;; Auto vars:     Size  Location     Type
 29780 ;;		None
 29781 ;; Return value:  Size  Location     Type
 29782 ;;                  4   30[COMRAM] unsigned long 
 29783 ;; Registers used:
 29784 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 29785 ;; Tracked objects:
 29786 ;;		On entry : 3E/1
 29787 ;;		On exit  : 0/0
 29788 ;;		Unchanged: 0/0
 29789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29790 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29792 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29793 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29794 ;;Total ram usage:        5 bytes
 29795 ;; Hardware stack levels used:    1
 29796 ;; Hardware stack levels required when called:    7
 29797 ;; This function calls:
 29798 ;;		_Bcd2Hex
 29799 ;;		_decimalToFatTime
 29800 ;; This function is called by:
 29801 ;;		_f_open
 29802 ;;		_f_sync
 29803 ;; This function uses a non-reentrant model
 29804 ;;
 29805                           
 29806                           	psect	text105
 29807  00E1B0                     __ptext105:
 29808                           	callstack 0
 29809  00E1B0                     _get_fattime:
 29810                           	callstack 21
 29811                           
 29812                           ;ff_time.c: 83: return decimalToFatTime(2000+Bcd2Hex(DateTime[6]), Bcd2Hex(DateTime[5]),
      +                           Bcd2Hex(DateTime[4]), Bcd2Hex(DateTime[2]), Bcd2Hex(DateTime[1]), Bcd2Hex(DateTime[0]))
      +                          ;
 29813                           
 29814                           ;incstack = 0
 29815  00E1B0  0102               	movlb	2	; () banked
 29816  00E1B2  51FC               	movf	(_DateTime+6)& (0+255),w,b
 29817  00E1B4  EC84  F07A         	call	_Bcd2Hex
 29818  00E1B8  6E23               	movwf	??_get_fattime^0,c
 29819  00E1BA  0ED0               	movlw	208
 29820  00E1BC  2423               	addwf	??_get_fattime^0,w,c
 29821  00E1BE  6E10               	movwf	decimalToFatTime@year^0,c
 29822  00E1C0  6A11               	clrf	(decimalToFatTime@year+1)^0,c
 29823  00E1C2  0E07               	movlw	7
 29824  00E1C4  2211               	addwfc	(decimalToFatTime@year+1)^0,f,c
 29825  00E1C6  0102               	movlb	2	; () banked
 29826  00E1C8  51FB               	movf	(_DateTime+5)& (0+255),w,b
 29827  00E1CA  EC84  F07A         	call	_Bcd2Hex
 29828  00E1CE  6E12               	movwf	decimalToFatTime@month^0,c
 29829  00E1D0  0102               	movlb	2	; () banked
 29830  00E1D2  51FA               	movf	(_DateTime+4)& (0+255),w,b
 29831  00E1D4  EC84  F07A         	call	_Bcd2Hex
 29832  00E1D8  6E13               	movwf	decimalToFatTime@day^0,c
 29833  00E1DA  0102               	movlb	2	; () banked
 29834  00E1DC  51F8               	movf	(_DateTime+2)& (0+255),w,b
 29835  00E1DE  EC84  F07A         	call	_Bcd2Hex
 29836  00E1E2  6E14               	movwf	decimalToFatTime@hour^0,c
 29837  00E1E4  0102               	movlb	2	; () banked
 29838  00E1E6  51F7               	movf	(_DateTime+1)& (0+255),w,b
 29839  00E1E8  EC84  F07A         	call	_Bcd2Hex
 29840  00E1EC  6E15               	movwf	decimalToFatTime@minute^0,c
 29841  00E1EE  0102               	movlb	2	; () banked
 29842  00E1F0  51F6               	movf	_DateTime& (0+255),w,b
 29843  00E1F2  EC84  F07A         	call	_Bcd2Hex
 29844  00E1F6  6E16               	movwf	decimalToFatTime@seconds^0,c
 29845  00E1F8  EC9E  F05E         	call	_decimalToFatTime	;wreg free
 29846  00E1FC  C010  F01F         	movff	?_decimalToFatTime,?_get_fattime
 29847  00E200  C011  F020         	movff	?_decimalToFatTime+1,?_get_fattime+1
 29848  00E204  C012  F021         	movff	?_decimalToFatTime+2,?_get_fattime+2
 29849  00E208  C013  F022         	movff	?_decimalToFatTime+3,?_get_fattime+3
 29850  00E20C  0012               	return		;funcret
 29851  00E20E                     __end_of_get_fattime:
 29852                           	callstack 0
 29853                           
 29854 ;; *************** function _decimalToFatTime *****************
 29855 ;; Defined at:
 29856 ;;		line 66 in file "mcc_generated_files/fatfs/ff_time.c"
 29857 ;; Parameters:    Size  Location     Type
 29858 ;;  year            2   15[COMRAM] unsigned int 
 29859 ;;  month           1   17[COMRAM] unsigned char 
 29860 ;;  day             1   18[COMRAM] unsigned char 
 29861 ;;  hour            1   19[COMRAM] unsigned char 
 29862 ;;  minute          1   20[COMRAM] unsigned char 
 29863 ;;  seconds         1   21[COMRAM] unsigned char 
 29864 ;; Auto vars:     Size  Location     Type
 29865 ;;  fatTime         4   26[COMRAM] unsigned long 
 29866 ;; Return value:  Size  Location     Type
 29867 ;;                  4   15[COMRAM] unsigned long 
 29868 ;; Registers used:
 29869 ;;		wreg, status,2, status,0
 29870 ;; Tracked objects:
 29871 ;;		On entry : 0/2
 29872 ;;		On exit  : 0/0
 29873 ;;		Unchanged: 0/0
 29874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29875 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29876 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29877 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29878 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29879 ;;Total ram usage:       15 bytes
 29880 ;; Hardware stack levels used:    1
 29881 ;; Hardware stack levels required when called:    6
 29882 ;; This function calls:
 29883 ;;		Nothing
 29884 ;; This function is called by:
 29885 ;;		_get_fattime
 29886 ;; This function uses a non-reentrant model
 29887 ;;
 29888                           
 29889                           	psect	text106
 29890  00BD3C                     __ptext106:
 29891                           	callstack 0
 29892  00BD3C                     _decimalToFatTime:
 29893                           	callstack 21
 29894                           
 29895                           ;ff_time.c: 68: DWORD fatTime;;ff_time.c: 70: fatTime = (seconds >> 1);
 29896                           
 29897                           ;incstack = 0
 29898  00BD3C  C016  F017         	movff	decimalToFatTime@seconds,??_decimalToFatTime
 29899  00BD40  90D8               	bcf	status,0,c
 29900  00BD42  3217               	rrcf	??_decimalToFatTime^0,f,c
 29901  00BD44  5017               	movf	??_decimalToFatTime^0,w,c
 29902  00BD46  6E1B               	movwf	decimalToFatTime@fatTime^0,c
 29903  00BD48  6A1C               	clrf	(decimalToFatTime@fatTime+1)^0,c
 29904  00BD4A  6A1D               	clrf	(decimalToFatTime@fatTime+2)^0,c
 29905  00BD4C  6A1E               	clrf	(decimalToFatTime@fatTime+3)^0,c
 29906                           
 29907                           ;ff_time.c: 71: fatTime |= ( ((DWORD)minute) << 5 );
 29908  00BD4E  C015  F017         	movff	decimalToFatTime@minute,??_decimalToFatTime
 29909  00BD52  6A18               	clrf	(??_decimalToFatTime+1)^0,c
 29910  00BD54  6A19               	clrf	(??_decimalToFatTime+2)^0,c
 29911  00BD56  6A1A               	clrf	(??_decimalToFatTime+3)^0,c
 29912  00BD58  0E05               	movlw	5
 29913  00BD5A                     u23375:
 29914  00BD5A  90D8               	bcf	status,0,c
 29915  00BD5C  3617               	rlcf	??_decimalToFatTime^0,f,c
 29916  00BD5E  3618               	rlcf	(??_decimalToFatTime+1)^0,f,c
 29917  00BD60  3619               	rlcf	(??_decimalToFatTime+2)^0,f,c
 29918  00BD62  361A               	rlcf	(??_decimalToFatTime+3)^0,f,c
 29919  00BD64  2EE8               	decfsz	wreg,f,c
 29920  00BD66  D7F9               	goto	u23375
 29921  00BD68  5017               	movf	??_decimalToFatTime^0,w,c
 29922  00BD6A  121B               	iorwf	decimalToFatTime@fatTime^0,f,c
 29923  00BD6C  5018               	movf	(??_decimalToFatTime+1)^0,w,c
 29924  00BD6E  121C               	iorwf	(decimalToFatTime@fatTime+1)^0,f,c
 29925  00BD70  5019               	movf	(??_decimalToFatTime+2)^0,w,c
 29926  00BD72  121D               	iorwf	(decimalToFatTime@fatTime+2)^0,f,c
 29927  00BD74  501A               	movf	(??_decimalToFatTime+3)^0,w,c
 29928  00BD76  121E               	iorwf	(decimalToFatTime@fatTime+3)^0,f,c
 29929                           
 29930                           ;ff_time.c: 72: fatTime |= ( ((DWORD)hour) << 11 );
 29931  00BD78  C014  F017         	movff	decimalToFatTime@hour,??_decimalToFatTime
 29932  00BD7C  6A18               	clrf	(??_decimalToFatTime+1)^0,c
 29933  00BD7E  6A19               	clrf	(??_decimalToFatTime+2)^0,c
 29934  00BD80  6A1A               	clrf	(??_decimalToFatTime+3)^0,c
 29935  00BD82  0E0B               	movlw	11
 29936  00BD84                     u23385:
 29937  00BD84  90D8               	bcf	status,0,c
 29938  00BD86  3617               	rlcf	??_decimalToFatTime^0,f,c
 29939  00BD88  3618               	rlcf	(??_decimalToFatTime+1)^0,f,c
 29940  00BD8A  3619               	rlcf	(??_decimalToFatTime+2)^0,f,c
 29941  00BD8C  361A               	rlcf	(??_decimalToFatTime+3)^0,f,c
 29942  00BD8E  2EE8               	decfsz	wreg,f,c
 29943  00BD90  D7F9               	goto	u23385
 29944  00BD92  5017               	movf	??_decimalToFatTime^0,w,c
 29945  00BD94  121B               	iorwf	decimalToFatTime@fatTime^0,f,c
 29946  00BD96  5018               	movf	(??_decimalToFatTime+1)^0,w,c
 29947  00BD98  121C               	iorwf	(decimalToFatTime@fatTime+1)^0,f,c
 29948  00BD9A  5019               	movf	(??_decimalToFatTime+2)^0,w,c
 29949  00BD9C  121D               	iorwf	(decimalToFatTime@fatTime+2)^0,f,c
 29950  00BD9E  501A               	movf	(??_decimalToFatTime+3)^0,w,c
 29951  00BDA0  121E               	iorwf	(decimalToFatTime@fatTime+3)^0,f,c
 29952                           
 29953                           ;ff_time.c: 73: fatTime |= ( ((DWORD)day) << 16 );
 29954  00BDA2  C013  F017         	movff	decimalToFatTime@day,??_decimalToFatTime
 29955  00BDA6  6A18               	clrf	(??_decimalToFatTime+1)^0,c
 29956  00BDA8  6A19               	clrf	(??_decimalToFatTime+2)^0,c
 29957  00BDAA  6A1A               	clrf	(??_decimalToFatTime+3)^0,c
 29958  00BDAC  C018  F01A         	movff	??_decimalToFatTime+1,??_decimalToFatTime+3
 29959  00BDB0  C017  F019         	movff	??_decimalToFatTime,??_decimalToFatTime+2
 29960  00BDB4  6A18               	clrf	(??_decimalToFatTime+1)^0,c
 29961  00BDB6  6A17               	clrf	??_decimalToFatTime^0,c
 29962  00BDB8  5017               	movf	??_decimalToFatTime^0,w,c
 29963  00BDBA  121B               	iorwf	decimalToFatTime@fatTime^0,f,c
 29964  00BDBC  5018               	movf	(??_decimalToFatTime+1)^0,w,c
 29965  00BDBE  121C               	iorwf	(decimalToFatTime@fatTime+1)^0,f,c
 29966  00BDC0  5019               	movf	(??_decimalToFatTime+2)^0,w,c
 29967  00BDC2  121D               	iorwf	(decimalToFatTime@fatTime+2)^0,f,c
 29968  00BDC4  501A               	movf	(??_decimalToFatTime+3)^0,w,c
 29969  00BDC6  121E               	iorwf	(decimalToFatTime@fatTime+3)^0,f,c
 29970                           
 29971                           ;ff_time.c: 74: fatTime |= ( ((DWORD)month) << 21 );
 29972  00BDC8  C012  F017         	movff	decimalToFatTime@month,??_decimalToFatTime
 29973  00BDCC  6A18               	clrf	(??_decimalToFatTime+1)^0,c
 29974  00BDCE  6A19               	clrf	(??_decimalToFatTime+2)^0,c
 29975  00BDD0  6A1A               	clrf	(??_decimalToFatTime+3)^0,c
 29976  00BDD2  0E15               	movlw	21
 29977  00BDD4                     u23395:
 29978  00BDD4  90D8               	bcf	status,0,c
 29979  00BDD6  3617               	rlcf	??_decimalToFatTime^0,f,c
 29980  00BDD8  3618               	rlcf	(??_decimalToFatTime+1)^0,f,c
 29981  00BDDA  3619               	rlcf	(??_decimalToFatTime+2)^0,f,c
 29982  00BDDC  361A               	rlcf	(??_decimalToFatTime+3)^0,f,c
 29983  00BDDE  2EE8               	decfsz	wreg,f,c
 29984  00BDE0  D7F9               	goto	u23395
 29985  00BDE2  5017               	movf	??_decimalToFatTime^0,w,c
 29986  00BDE4  121B               	iorwf	decimalToFatTime@fatTime^0,f,c
 29987  00BDE6  5018               	movf	(??_decimalToFatTime+1)^0,w,c
 29988  00BDE8  121C               	iorwf	(decimalToFatTime@fatTime+1)^0,f,c
 29989  00BDEA  5019               	movf	(??_decimalToFatTime+2)^0,w,c
 29990  00BDEC  121D               	iorwf	(decimalToFatTime@fatTime+2)^0,f,c
 29991  00BDEE  501A               	movf	(??_decimalToFatTime+3)^0,w,c
 29992  00BDF0  121E               	iorwf	(decimalToFatTime@fatTime+3)^0,f,c
 29993                           
 29994                           ;ff_time.c: 75: fatTime |= ( ((DWORD)(year - 1980)) << 25 );
 29995  00BDF2  0E44               	movlw	68
 29996  00BDF4  2410               	addwf	decimalToFatTime@year^0,w,c
 29997  00BDF6  6E17               	movwf	??_decimalToFatTime^0,c
 29998  00BDF8  0EF8               	movlw	248
 29999  00BDFA  2011               	addwfc	(decimalToFatTime@year+1)^0,w,c
 30000  00BDFC  6E18               	movwf	(??_decimalToFatTime+1)^0,c
 30001  00BDFE  6A19               	clrf	(??_decimalToFatTime+2)^0,c
 30002  00BE00  6A1A               	clrf	(??_decimalToFatTime+3)^0,c
 30003  00BE02  0E19               	movlw	25
 30004  00BE04                     u23405:
 30005  00BE04  90D8               	bcf	status,0,c
 30006  00BE06  3617               	rlcf	??_decimalToFatTime^0,f,c
 30007  00BE08  3618               	rlcf	(??_decimalToFatTime+1)^0,f,c
 30008  00BE0A  3619               	rlcf	(??_decimalToFatTime+2)^0,f,c
 30009  00BE0C  361A               	rlcf	(??_decimalToFatTime+3)^0,f,c
 30010  00BE0E  2EE8               	decfsz	wreg,f,c
 30011  00BE10  D7F9               	goto	u23405
 30012  00BE12  5017               	movf	??_decimalToFatTime^0,w,c
 30013  00BE14  121B               	iorwf	decimalToFatTime@fatTime^0,f,c
 30014  00BE16  5018               	movf	(??_decimalToFatTime+1)^0,w,c
 30015  00BE18  121C               	iorwf	(decimalToFatTime@fatTime+1)^0,f,c
 30016  00BE1A  5019               	movf	(??_decimalToFatTime+2)^0,w,c
 30017  00BE1C  121D               	iorwf	(decimalToFatTime@fatTime+2)^0,f,c
 30018  00BE1E  501A               	movf	(??_decimalToFatTime+3)^0,w,c
 30019  00BE20  121E               	iorwf	(decimalToFatTime@fatTime+3)^0,f,c
 30020                           
 30021                           ;ff_time.c: 77: return fatTime;
 30022  00BE22  C01B  F010         	movff	decimalToFatTime@fatTime,?_decimalToFatTime
 30023  00BE26  C01C  F011         	movff	decimalToFatTime@fatTime+1,?_decimalToFatTime+1
 30024  00BE2A  C01D  F012         	movff	decimalToFatTime@fatTime+2,?_decimalToFatTime+2
 30025  00BE2E  C01E  F013         	movff	decimalToFatTime@fatTime+3,?_decimalToFatTime+3
 30026  00BE32  0012               	return		;funcret
 30027  00BE34                     __end_of_decimalToFatTime:
 30028                           	callstack 0
 30029                           
 30030 ;; *************** function _drawTempHumidity *****************
 30031 ;; Defined at:
 30032 ;;		line 828 in file "Draw.c"
 30033 ;; Parameters:    Size  Location     Type
 30034 ;;  mode            1    wreg     unsigned char 
 30035 ;;  temp            2   65[COMRAM] int 
 30036 ;;  humidity        2   67[COMRAM] int 
 30037 ;; Auto vars:     Size  Location     Type
 30038 ;;  mode            1  130[BANK0 ] unsigned char 
 30039 ;;  str2           50   80[BANK0 ] unsigned char [50]
 30040 ;;  str1           50   30[BANK0 ] unsigned char [50]
 30041 ;; Return value:  Size  Location     Type
 30042 ;;                  1    wreg      void 
 30043 ;; Registers used:
 30044 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30045 ;; Tracked objects:
 30046 ;;		On entry : 3F/2
 30047 ;;		On exit  : 0/0
 30048 ;;		Unchanged: 0/0
 30049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30051 ;;      Locals:         0     101       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30053 ;;      Totals:         4     101       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30054 ;;Total ram usage:      105 bytes
 30055 ;; Hardware stack levels used:    1
 30056 ;; Hardware stack levels required when called:   15
 30057 ;; This function calls:
 30058 ;;		___awdiv
 30059 ;;		___awmod
 30060 ;;		_display_drawChars
 30061 ;;		_sprintf
 30062 ;; This function is called by:
 30063 ;;		_NormalProc
 30064 ;; This function uses a non-reentrant model
 30065 ;;
 30066                           
 30067                           	psect	text107
 30068  00B050                     __ptext107:
 30069                           	callstack 0
 30070  00B050                     _drawTempHumidity:
 30071                           	callstack 14
 30072                           
 30073                           ;incstack = 0
 30074                           ;drawTempHumidity@mode stored from wreg
 30075  00B050  0100               	movlb	0	; () banked
 30076  00B052  6FE2               	movwf	drawTempHumidity@mode& (0+255),b
 30077                           
 30078                           ;Draw.c: 829: char str1[50];;Draw.c: 830: char str2[50];;Draw.c: 832: sprintf(str1, "%2d
      +                          .%1d\x87", temp / 10, temp % 10);
 30079  00B054  0E7E               	movlw	low drawTempHumidity@str1
 30080  00B056  6E2A               	movwf	sprintf@sp^0,c
 30081  00B058  6A2B               	clrf	(sprintf@sp+1)^0,c
 30082  00B05A  0EBD               	movlw	low STR_32
 30083  00B05C  6E2C               	movwf	sprintf@f^0,c
 30084  00B05E  0EFF               	movlw	high STR_32
 30085  00B060  6E2D               	movwf	(sprintf@f+1)^0,c
 30086  00B062  C042  F00E         	movff	drawTempHumidity@temp,___awdiv@dividend
 30087  00B066  C043  F00F         	movff	drawTempHumidity@temp+1,___awdiv@dividend+1
 30088  00B06A  0E00               	movlw	0
 30089  00B06C  6E11               	movwf	(___awdiv@divisor+1)^0,c
 30090  00B06E  0E0A               	movlw	10
 30091  00B070  6E10               	movwf	___awdiv@divisor^0,c
 30092  00B072  ECD1  F06C         	call	___awdiv	;wreg free
 30093  00B076  C00E  F02E         	movff	?___awdiv,?_sprintf+4
 30094  00B07A  C00F  F02F         	movff	?___awdiv+1,?_sprintf+5
 30095  00B07E  C042  F00E         	movff	drawTempHumidity@temp,___awmod@dividend
 30096  00B082  C043  F00F         	movff	drawTempHumidity@temp+1,___awmod@dividend+1
 30097  00B086  0E00               	movlw	0
 30098  00B088  6E11               	movwf	(___awmod@divisor+1)^0,c
 30099  00B08A  0E0A               	movlw	10
 30100  00B08C  6E10               	movwf	___awmod@divisor^0,c
 30101  00B08E  ECC7  F06E         	call	___awmod	;wreg free
 30102  00B092  C00E  F030         	movff	?___awmod,?_sprintf+6
 30103  00B096  C00F  F031         	movff	?___awmod+1,?_sprintf+7
 30104  00B09A  ECD0  F028         	call	_sprintf	;wreg free
 30105                           
 30106                           ;Draw.c: 833: sprintf(str2, "%2d%%", humidity / 10);
 30107  00B09E  0EB0               	movlw	low drawTempHumidity@str2
 30108  00B0A0  6E2A               	movwf	sprintf@sp^0,c
 30109  00B0A2  6A2B               	clrf	(sprintf@sp+1)^0,c
 30110  00B0A4  0EDB               	movlw	low STR_33
 30111  00B0A6  6E2C               	movwf	sprintf@f^0,c
 30112  00B0A8  0EFF               	movlw	high STR_33
 30113  00B0AA  6E2D               	movwf	(sprintf@f+1)^0,c
 30114  00B0AC  C044  F00E         	movff	drawTempHumidity@humidity,___awdiv@dividend
 30115  00B0B0  C045  F00F         	movff	drawTempHumidity@humidity+1,___awdiv@dividend+1
 30116  00B0B4  0E00               	movlw	0
 30117  00B0B6  6E11               	movwf	(___awdiv@divisor+1)^0,c
 30118  00B0B8  0E0A               	movlw	10
 30119  00B0BA  6E10               	movwf	___awdiv@divisor^0,c
 30120  00B0BC  ECD1  F06C         	call	___awdiv	;wreg free
 30121  00B0C0  C00E  F02E         	movff	?___awdiv,?_sprintf+4
 30122  00B0C4  C00F  F02F         	movff	?___awdiv+1,?_sprintf+5
 30123  00B0C8  ECD0  F028         	call	_sprintf	;wreg free
 30124                           
 30125                           ;Draw.c: 834: display_drawChars(RTemp[mode].x, RTemp[mode].y, str1, 0xFFFF, 0x0000, RTem
      +                          p[mode].font);
 30126  00B0CC  51E2               	movf	drawTempHumidity@mode& (0+255),w,b
 30127  00B0CE  0D0A               	mullw	10
 30128  00B0D0  0E5A               	movlw	low _RTemp
 30129  00B0D2  24F3               	addwf	243,w,c
 30130  00B0D4  6ED9               	movwf	fsr2l,c
 30131  00B0D6  0E05               	movlw	high _RTemp
 30132  00B0D8  20F4               	addwfc	prodh,w,c
 30133  00B0DA  6EDA               	movwf	fsr2h,c
 30134  00B0DC  CFDE F06A          	movff	postinc2,display_drawChars@x
 30135  00B0E0  CFDD F06B          	movff	postdec2,display_drawChars@x+1
 30136  00B0E4  51E2               	movf	drawTempHumidity@mode& (0+255),w,b
 30137  00B0E6  0D0A               	mullw	10
 30138  00B0E8  0E5C               	movlw	low (_RTemp+2)
 30139  00B0EA  24F3               	addwf	243,w,c
 30140  00B0EC  6ED9               	movwf	fsr2l,c
 30141  00B0EE  0E05               	movlw	high (_RTemp+2)
 30142  00B0F0  20F4               	addwfc	prodh,w,c
 30143  00B0F2  6EDA               	movwf	fsr2h,c
 30144  00B0F4  CFDE F06C          	movff	postinc2,display_drawChars@y
 30145  00B0F8  CFDD F06D          	movff	postdec2,display_drawChars@y+1
 30146  00B0FC  0E7E               	movlw	low drawTempHumidity@str1
 30147  00B0FE  6F6E               	movwf	display_drawChars@s& (0+255),b
 30148  00B100  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 30149  00B102  0EFF               	movlw	255
 30150  00B104  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
 30151  00B106  6970               	setf	display_drawChars@color& (0+255),b
 30152  00B108  0E00               	movlw	0
 30153  00B10A  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
 30154  00B10C  0E00               	movlw	0
 30155  00B10E  6F72               	movwf	display_drawChars@bg& (0+255),b
 30156  00B110  51E2               	movf	drawTempHumidity@mode& (0+255),w,b
 30157  00B112  0D0A               	mullw	10
 30158  00B114  0E62               	movlw	low (_RTemp+8)
 30159  00B116  24F3               	addwf	243,w,c
 30160  00B118  6ED9               	movwf	fsr2l,c
 30161  00B11A  0E05               	movlw	high (_RTemp+8)
 30162  00B11C  20F4               	addwfc	prodh,w,c
 30163  00B11E  6EDA               	movwf	fsr2h,c
 30164  00B120  50DF               	movf	indf2,w,c
 30165  00B122  6F74               	movwf	display_drawChars@size& (0+255),b
 30166  00B124  EC13  F06D         	call	_display_drawChars	;wreg free
 30167                           
 30168                           ;Draw.c: 835: display_drawChars(RHumidity[mode].x, RHumidity[mode].y, str2, 0xFFFF, 0x00
      +                          00, RHumidity[mode].font);
 30169  00B128  0100               	movlb	0	; () banked
 30170  00B12A  51E2               	movf	drawTempHumidity@mode& (0+255),w,b
 30171  00B12C  0D0A               	mullw	10
 30172  00B12E  0E3C               	movlw	low _RHumidity
 30173  00B130  24F3               	addwf	243,w,c
 30174  00B132  6ED9               	movwf	fsr2l,c
 30175  00B134  0E05               	movlw	high _RHumidity
 30176  00B136  20F4               	addwfc	prodh,w,c
 30177  00B138  6EDA               	movwf	fsr2h,c
 30178  00B13A  CFDE F06A          	movff	postinc2,display_drawChars@x
 30179  00B13E  CFDD F06B          	movff	postdec2,display_drawChars@x+1
 30180  00B142  51E2               	movf	drawTempHumidity@mode& (0+255),w,b
 30181  00B144  0D0A               	mullw	10
 30182  00B146  0E3E               	movlw	low (_RHumidity+2)
 30183  00B148  24F3               	addwf	243,w,c
 30184  00B14A  6ED9               	movwf	fsr2l,c
 30185  00B14C  0E05               	movlw	high (_RHumidity+2)
 30186  00B14E  20F4               	addwfc	prodh,w,c
 30187  00B150  6EDA               	movwf	fsr2h,c
 30188  00B152  CFDE F06C          	movff	postinc2,display_drawChars@y
 30189  00B156  CFDD F06D          	movff	postdec2,display_drawChars@y+1
 30190  00B15A  0EB0               	movlw	low drawTempHumidity@str2
 30191  00B15C  6F6E               	movwf	display_drawChars@s& (0+255),b
 30192  00B15E  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 30193  00B160  0EFF               	movlw	255
 30194  00B162  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
 30195  00B164  6970               	setf	display_drawChars@color& (0+255),b
 30196  00B166  0E00               	movlw	0
 30197  00B168  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
 30198  00B16A  0E00               	movlw	0
 30199  00B16C  6F72               	movwf	display_drawChars@bg& (0+255),b
 30200  00B16E  51E2               	movf	drawTempHumidity@mode& (0+255),w,b
 30201  00B170  0D0A               	mullw	10
 30202  00B172  0E44               	movlw	low (_RHumidity+8)
 30203  00B174  24F3               	addwf	243,w,c
 30204  00B176  6ED9               	movwf	fsr2l,c
 30205  00B178  0E05               	movlw	high (_RHumidity+8)
 30206  00B17A  20F4               	addwfc	prodh,w,c
 30207  00B17C  6EDA               	movwf	fsr2h,c
 30208  00B17E  50DF               	movf	indf2,w,c
 30209  00B180  6F74               	movwf	display_drawChars@size& (0+255),b
 30210  00B182  EC13  F06D         	call	_display_drawChars	;wreg free
 30211  00B186  0012               	return		;funcret
 30212  00B188                     __end_of_drawTempHumidity:
 30213                           	callstack 0
 30214                           
 30215 ;; *************** function _drawDateTime *****************
 30216 ;; Defined at:
 30217 ;;		line 819 in file "Draw.c"
 30218 ;; Parameters:    Size  Location     Type
 30219 ;;  mode            1    wreg     unsigned char 
 30220 ;;  datetime        2   87[BANK0 ] PTR unsigned char 
 30221 ;;		 -> DateTime(7), 
 30222 ;; Auto vars:     Size  Location     Type
 30223 ;;  mode            1  247[BANK1 ] unsigned char 
 30224 ;;  str           100  147[BANK1 ] unsigned char [100]
 30225 ;; Return value:  Size  Location     Type
 30226 ;;                  1    wreg      void 
 30227 ;; Registers used:
 30228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30229 ;; Tracked objects:
 30230 ;;		On entry : 3F/2
 30231 ;;		On exit  : 3C/0
 30232 ;;		Unchanged: 0/0
 30233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30235 ;;      Locals:         0       0     101       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30236 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30237 ;;      Totals:         0       6     101       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30238 ;;Total ram usage:      107 bytes
 30239 ;; Hardware stack levels used:    1
 30240 ;; Hardware stack levels required when called:   17
 30241 ;; This function calls:
 30242 ;;		_display_drawChars
 30243 ;;		_drawTime
 30244 ;;		_sprintf
 30245 ;; This function is called by:
 30246 ;;		_NormalProc
 30247 ;; This function uses a non-reentrant model
 30248 ;;
 30249                           
 30250                           	psect	text108
 30251  00BB48                     __ptext108:
 30252                           	callstack 0
 30253  00BB48                     _drawDateTime:
 30254                           	callstack 12
 30255                           
 30256                           ;incstack = 0
 30257                           ;drawDateTime@mode stored from wreg
 30258  00BB48  0101               	movlb	1	; () banked
 30259  00BB4A  6FF7               	movwf	drawDateTime@mode& (0+255),b
 30260                           
 30261                           ;Draw.c: 820: char str[100];;Draw.c: 823: sprintf(str, "20%02x/%02x/%02x(%c)", datetime[
      +                          6], datetime[5], datetime[4], 0x80+datetime[3]);
 30262  00BB4C  0E93               	movlw	low drawDateTime@str
 30263  00BB4E  6E2A               	movwf	sprintf@sp^0,c
 30264  00BB50  0E01               	movlw	high drawDateTime@str
 30265  00BB52  6E2B               	movwf	(sprintf@sp+1)^0,c
 30266  00BB54  0E2C               	movlw	low STR_11
 30267  00BB56  6E2C               	movwf	sprintf@f^0,c
 30268  00BB58  0EFF               	movlw	high STR_11
 30269  00BB5A  6E2D               	movwf	(sprintf@f+1)^0,c
 30270  00BB5C  0100               	movlb	0	; () banked
 30271  00BB5E  EE20 F006          	lfsr	2,6
 30272  00BB62  51B7               	movf	drawDateTime@datetime& (0+255),w,b
 30273  00BB64  26D9               	addwf	fsr2l,f,c
 30274  00BB66  51B8               	movf	(drawDateTime@datetime+1)& (0+255),w,b
 30275  00BB68  22DA               	addwfc	fsr2h,f,c
 30276  00BB6A  50DF               	movf	indf2,w,c
 30277  00BB6C  6FB9               	movwf	??_drawDateTime& (0+255),b
 30278  00BB6E  51B9               	movf	??_drawDateTime& (0+255),w,b
 30279  00BB70  6E2E               	movwf	(?_sprintf+4)^0,c
 30280  00BB72  6A2F               	clrf	(?_sprintf+5)^0,c
 30281  00BB74  EE20 F005          	lfsr	2,5
 30282  00BB78  51B7               	movf	drawDateTime@datetime& (0+255),w,b
 30283  00BB7A  26D9               	addwf	fsr2l,f,c
 30284  00BB7C  51B8               	movf	(drawDateTime@datetime+1)& (0+255),w,b
 30285  00BB7E  22DA               	addwfc	fsr2h,f,c
 30286  00BB80  50DF               	movf	indf2,w,c
 30287  00BB82  6FBA               	movwf	(??_drawDateTime+1)& (0+255),b
 30288  00BB84  51BA               	movf	(??_drawDateTime+1)& (0+255),w,b
 30289  00BB86  6E30               	movwf	(?_sprintf+6)^0,c
 30290  00BB88  6A31               	clrf	(?_sprintf+7)^0,c
 30291  00BB8A  EE20 F004          	lfsr	2,4
 30292  00BB8E  51B7               	movf	drawDateTime@datetime& (0+255),w,b
 30293  00BB90  26D9               	addwf	fsr2l,f,c
 30294  00BB92  51B8               	movf	(drawDateTime@datetime+1)& (0+255),w,b
 30295  00BB94  22DA               	addwfc	fsr2h,f,c
 30296  00BB96  50DF               	movf	indf2,w,c
 30297  00BB98  6FBB               	movwf	(??_drawDateTime+2)& (0+255),b
 30298  00BB9A  51BB               	movf	(??_drawDateTime+2)& (0+255),w,b
 30299  00BB9C  6E32               	movwf	(?_sprintf+8)^0,c
 30300  00BB9E  6A33               	clrf	(?_sprintf+9)^0,c
 30301  00BBA0  EE20 F003          	lfsr	2,3
 30302  00BBA4  51B7               	movf	drawDateTime@datetime& (0+255),w,b
 30303  00BBA6  26D9               	addwf	fsr2l,f,c
 30304  00BBA8  51B8               	movf	(drawDateTime@datetime+1)& (0+255),w,b
 30305  00BBAA  22DA               	addwfc	fsr2h,f,c
 30306  00BBAC  50DF               	movf	indf2,w,c
 30307  00BBAE  6FBC               	movwf	(??_drawDateTime+3)& (0+255),b
 30308  00BBB0  0E80               	movlw	128
 30309  00BBB2  25BC               	addwf	(??_drawDateTime+3)& (0+255),w,b
 30310  00BBB4  6E34               	movwf	(?_sprintf+10)^0,c
 30311  00BBB6  6A35               	clrf	(?_sprintf+11)^0,c
 30312  00BBB8  0E00               	movlw	0
 30313  00BBBA  2235               	addwfc	(?_sprintf+11)^0,f,c
 30314  00BBBC  ECD0  F028         	call	_sprintf	;wreg free
 30315                           
 30316                           ;Draw.c: 824: display_drawChars(RDate[mode].x, RDate[mode].y, str, 0xFFFF, 0x0000, RDate
      +                          [mode].font);
 30317  00BBC0  0101               	movlb	1	; () banked
 30318  00BBC2  51F7               	movf	drawDateTime@mode& (0+255),w,b
 30319  00BBC4  0D0A               	mullw	10
 30320  00BBC6  0E82               	movlw	low _RDate
 30321  00BBC8  24F3               	addwf	243,w,c
 30322  00BBCA  6ED9               	movwf	fsr2l,c
 30323  00BBCC  0E04               	movlw	high _RDate
 30324  00BBCE  20F4               	addwfc	prodh,w,c
 30325  00BBD0  6EDA               	movwf	fsr2h,c
 30326  00BBD2  CFDE F06A          	movff	postinc2,display_drawChars@x
 30327  00BBD6  CFDD F06B          	movff	postdec2,display_drawChars@x+1
 30328  00BBDA  51F7               	movf	drawDateTime@mode& (0+255),w,b
 30329  00BBDC  0D0A               	mullw	10
 30330  00BBDE  0E84               	movlw	low (_RDate+2)
 30331  00BBE0  24F3               	addwf	243,w,c
 30332  00BBE2  6ED9               	movwf	fsr2l,c
 30333  00BBE4  0E04               	movlw	high (_RDate+2)
 30334  00BBE6  20F4               	addwfc	prodh,w,c
 30335  00BBE8  6EDA               	movwf	fsr2h,c
 30336  00BBEA  CFDE F06C          	movff	postinc2,display_drawChars@y
 30337  00BBEE  CFDD F06D          	movff	postdec2,display_drawChars@y+1
 30338  00BBF2  0E93               	movlw	low drawDateTime@str
 30339  00BBF4  0100               	movlb	0	; () banked
 30340  00BBF6  6F6E               	movwf	display_drawChars@s& (0+255),b
 30341  00BBF8  0E01               	movlw	high drawDateTime@str
 30342  00BBFA  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
 30343  00BBFC  0EFF               	movlw	255
 30344  00BBFE  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
 30345  00BC00  6970               	setf	display_drawChars@color& (0+255),b
 30346  00BC02  0E00               	movlw	0
 30347  00BC04  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
 30348  00BC06  0E00               	movlw	0
 30349  00BC08  6F72               	movwf	display_drawChars@bg& (0+255),b
 30350  00BC0A  0101               	movlb	1	; () banked
 30351  00BC0C  51F7               	movf	drawDateTime@mode& (0+255),w,b
 30352  00BC0E  0D0A               	mullw	10
 30353  00BC10  0E8A               	movlw	low (_RDate+8)
 30354  00BC12  24F3               	addwf	243,w,c
 30355  00BC14  6ED9               	movwf	fsr2l,c
 30356  00BC16  0E04               	movlw	high (_RDate+8)
 30357  00BC18  20F4               	addwfc	prodh,w,c
 30358  00BC1A  6EDA               	movwf	fsr2h,c
 30359  00BC1C  50DF               	movf	indf2,w,c
 30360  00BC1E  0100               	movlb	0	; () banked
 30361  00BC20  6F74               	movwf	display_drawChars@size& (0+255),b
 30362  00BC22  EC13  F06D         	call	_display_drawChars	;wreg free
 30363                           
 30364                           ;Draw.c: 825: drawTime(mode, datetime, 0x0400);
 30365  00BC26  C0B7  F0B2         	movff	drawDateTime@datetime,drawTime@datetime
 30366  00BC2A  C0B8  F0B3         	movff	drawDateTime@datetime+1,drawTime@datetime+1
 30367  00BC2E  0E04               	movlw	4
 30368  00BC30  0100               	movlb	0	; () banked
 30369  00BC32  6FB5               	movwf	(drawTime@color+1)& (0+255),b
 30370  00BC34  0E00               	movlw	0
 30371  00BC36  6FB4               	movwf	drawTime@color& (0+255),b
 30372  00BC38  0101               	movlb	1	; () banked
 30373  00BC3A  51F7               	movf	drawDateTime@mode& (0+255),w,b
 30374  00BC3C  ECC1  F061         	call	_drawTime
 30375  00BC40  0012               	return		;funcret
 30376  00BC42                     __end_of_drawDateTime:
 30377                           	callstack 0
 30378                           
 30379 ;; *************** function _drawTime *****************
 30380 ;; Defined at:
 30381 ;;		line 808 in file "Draw.c"
 30382 ;; Parameters:    Size  Location     Type
 30383 ;;  mode            1    wreg     unsigned char 
 30384 ;;  datetime        2   82[BANK0 ] PTR unsigned char 
 30385 ;;		 -> TmpTime(7), DateTime(7), 
 30386 ;;  color           2   84[BANK0 ] unsigned int 
 30387 ;; Auto vars:     Size  Location     Type
 30388 ;;  mode            1   86[BANK0 ] unsigned char 
 30389 ;;  str           100    0        unsigned char [100]
 30390 ;; Return value:  Size  Location     Type
 30391 ;;                  1    wreg      void 
 30392 ;; Registers used:
 30393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30394 ;; Tracked objects:
 30395 ;;		On entry : 3C/2
 30396 ;;		On exit  : 3C/0
 30397 ;;		Unchanged: 0/0
 30398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30402 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30403 ;;Total ram usage:        5 bytes
 30404 ;; Hardware stack levels used:    1
 30405 ;; Hardware stack levels required when called:   16
 30406 ;; This function calls:
 30407 ;;		_DispTime
 30408 ;;		_DrawAnalogClock
 30409 ;; This function is called by:
 30410 ;;		_DrawSetBox
 30411 ;;		_SettingProc
 30412 ;;		_drawDateTime
 30413 ;; This function uses a non-reentrant model
 30414 ;;
 30415                           
 30416                           	psect	text109
 30417  00C382                     __ptext109:
 30418                           	callstack 0
 30419  00C382                     _drawTime:
 30420                           	callstack 13
 30421                           
 30422                           ;incstack = 0
 30423                           ;drawTime@mode stored from wreg
 30424  00C382  0100               	movlb	0	; () banked
 30425  00C384  6FB6               	movwf	drawTime@mode& (0+255),b
 30426                           
 30427                           ;Draw.c: 809: char str[100];;Draw.c: 811: if (mode == 0x02) {
 30428  00C386  0E02               	movlw	2
 30429  00C388  0100               	movlb	0	; () banked
 30430  00C38A  19B6               	xorwf	drawTime@mode& (0+255),w,b
 30431  00C38C  A4D8               	btfss	status,2,c
 30432  00C38E  D02E               	goto	l22211
 30433                           
 30434                           ; BSR set to: 0
 30435                           ;Draw.c: 813: DrawAnalogClock(mode, datetime, RTime[mode].x, RTime[mode].y, RTime[mode].
      +                          xw, color);
 30436  00C390  C0B2  F088         	movff	drawTime@datetime,DrawAnalogClock@datetime
 30437  00C394  C0B3  F089         	movff	drawTime@datetime+1,DrawAnalogClock@datetime+1
 30438  00C398  51B6               	movf	drawTime@mode& (0+255),w,b
 30439  00C39A  0D0A               	mullw	10
 30440  00C39C  0EA0               	movlw	low _RTime
 30441  00C39E  24F3               	addwf	243,w,c
 30442  00C3A0  6ED9               	movwf	fsr2l,c
 30443  00C3A2  0E04               	movlw	high _RTime
 30444  00C3A4  20F4               	addwfc	prodh,w,c
 30445  00C3A6  6EDA               	movwf	fsr2h,c
 30446  00C3A8  CFDE F08A          	movff	postinc2,DrawAnalogClock@xx
 30447  00C3AC  CFDD F08B          	movff	postdec2,DrawAnalogClock@xx+1
 30448  00C3B0  51B6               	movf	drawTime@mode& (0+255),w,b
 30449  00C3B2  0D0A               	mullw	10
 30450  00C3B4  0EA2               	movlw	low (_RTime+2)
 30451  00C3B6  24F3               	addwf	243,w,c
 30452  00C3B8  6ED9               	movwf	fsr2l,c
 30453  00C3BA  0E04               	movlw	high (_RTime+2)
 30454  00C3BC  20F4               	addwfc	prodh,w,c
 30455  00C3BE  6EDA               	movwf	fsr2h,c
 30456  00C3C0  CFDE F08C          	movff	postinc2,DrawAnalogClock@yy
 30457  00C3C4  CFDD F08D          	movff	postdec2,DrawAnalogClock@yy+1
 30458  00C3C8  51B6               	movf	drawTime@mode& (0+255),w,b
 30459  00C3CA  0D0A               	mullw	10
 30460  00C3CC  0EA4               	movlw	low (_RTime+4)
 30461  00C3CE  24F3               	addwf	243,w,c
 30462  00C3D0  6ED9               	movwf	fsr2l,c
 30463  00C3D2  0E04               	movlw	high (_RTime+4)
 30464  00C3D4  20F4               	addwfc	prodh,w,c
 30465  00C3D6  6EDA               	movwf	fsr2h,c
 30466  00C3D8  50DF               	movf	indf2,w,c
 30467  00C3DA  6F8E               	movwf	DrawAnalogClock@size& (0+255),b
 30468  00C3DC  C0B4  F08F         	movff	drawTime@color,DrawAnalogClock@color
 30469  00C3E0  C0B5  F090         	movff	drawTime@color+1,DrawAnalogClock@color+1
 30470  00C3E4  51B6               	movf	drawTime@mode& (0+255),w,b
 30471  00C3E6  EC4F  F000         	call	_DrawAnalogClock
 30472                           
 30473                           ;Draw.c: 814: } else {
 30474  00C3EA  0012               	return	
 30475  00C3EC                     l22211:
 30476                           
 30477                           ; BSR set to: 0
 30478                           ;Draw.c: 815: DispTime(RTime[mode].mode, datetime, RTime[mode].x, RTime[mode].y, RTime[m
      +                          ode].font, color);
 30479  00C3EC  C0B2  F09E         	movff	drawTime@datetime,DispTime@datetime
 30480  00C3F0  C0B3  F09F         	movff	drawTime@datetime+1,DispTime@datetime+1
 30481  00C3F4  51B6               	movf	drawTime@mode& (0+255),w,b
 30482  00C3F6  0D0A               	mullw	10
 30483  00C3F8  0EA0               	movlw	low _RTime
 30484  00C3FA  24F3               	addwf	243,w,c
 30485  00C3FC  6ED9               	movwf	fsr2l,c
 30486  00C3FE  0E04               	movlw	high _RTime
 30487  00C400  20F4               	addwfc	prodh,w,c
 30488  00C402  6EDA               	movwf	fsr2h,c
 30489  00C404  CFDE F0A0          	movff	postinc2,DispTime@x
 30490  00C408  CFDD F0A1          	movff	postdec2,DispTime@x+1
 30491  00C40C  51B6               	movf	drawTime@mode& (0+255),w,b
 30492  00C40E  0D0A               	mullw	10
 30493  00C410  0EA2               	movlw	low (_RTime+2)
 30494  00C412  24F3               	addwf	243,w,c
 30495  00C414  6ED9               	movwf	fsr2l,c
 30496  00C416  0E04               	movlw	high (_RTime+2)
 30497  00C418  20F4               	addwfc	prodh,w,c
 30498  00C41A  6EDA               	movwf	fsr2h,c
 30499  00C41C  CFDE F0A2          	movff	postinc2,DispTime@y
 30500  00C420  CFDD F0A3          	movff	postdec2,DispTime@y+1
 30501  00C424  51B6               	movf	drawTime@mode& (0+255),w,b
 30502  00C426  0D0A               	mullw	10
 30503  00C428  0EA8               	movlw	low (_RTime+8)
 30504  00C42A  24F3               	addwf	243,w,c
 30505  00C42C  6ED9               	movwf	fsr2l,c
 30506  00C42E  0E04               	movlw	high (_RTime+8)
 30507  00C430  20F4               	addwfc	prodh,w,c
 30508  00C432  6EDA               	movwf	fsr2h,c
 30509  00C434  50DF               	movf	indf2,w,c
 30510  00C436  6FA4               	movwf	DispTime@size& (0+255),b
 30511  00C438  C0B4  F0A5         	movff	drawTime@color,DispTime@color
 30512  00C43C  C0B5  F0A6         	movff	drawTime@color+1,DispTime@color+1
 30513  00C440  51B6               	movf	drawTime@mode& (0+255),w,b
 30514  00C442  0D0A               	mullw	10
 30515  00C444  0EA9               	movlw	low (_RTime+9)
 30516  00C446  24F3               	addwf	243,w,c
 30517  00C448  6ED9               	movwf	fsr2l,c
 30518  00C44A  0E04               	movlw	high (_RTime+9)
 30519  00C44C  20F4               	addwfc	prodh,w,c
 30520  00C44E  6EDA               	movwf	fsr2h,c
 30521  00C450  50DF               	movf	indf2,w,c
 30522  00C452  ECA9  F03D         	call	_DispTime
 30523  00C456  0012               	return		;funcret
 30524  00C458                     __end_of_drawTime:
 30525                           	callstack 0
 30526                           
 30527 ;; *************** function _DispTime *****************
 30528 ;; Defined at:
 30529 ;;		line 178 in file "Draw.c"
 30530 ;; Parameters:    Size  Location     Type
 30531 ;;  mode            1    wreg     unsigned char 
 30532 ;;  datetime        2   62[BANK0 ] PTR unsigned char 
 30533 ;;		 -> TmpTime(7), DateTime(7), 
 30534 ;;  x               2   64[BANK0 ] unsigned int 
 30535 ;;  y               2   66[BANK0 ] unsigned int 
 30536 ;;  size            1   68[BANK0 ] unsigned char 
 30537 ;;  color           2   69[BANK0 ] unsigned int 
 30538 ;; Auto vars:     Size  Location     Type
 30539 ;;  mode            1   76[BANK0 ] unsigned char 
 30540 ;;  xd              2   79[BANK0 ] unsigned int 
 30541 ;;  yd              2   77[BANK0 ] unsigned int 
 30542 ;;  jj              1   81[BANK0 ] char 
 30543 ;;  endpoint        1   75[BANK0 ] unsigned char 
 30544 ;; Return value:  Size  Location     Type
 30545 ;;                  1    wreg      void 
 30546 ;; Registers used:
 30547 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30548 ;; Tracked objects:
 30549 ;;		On entry : 3F/0
 30550 ;;		On exit  : 3F/0
 30551 ;;		Unchanged: 0/0
 30552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30553 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30554 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30555 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30556 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30557 ;;Total ram usage:       20 bytes
 30558 ;; Hardware stack levels used:    1
 30559 ;; Hardware stack levels required when called:   13
 30560 ;; This function calls:
 30561 ;;		_Dispseg
 30562 ;;		_fillRect
 30563 ;; This function is called by:
 30564 ;;		_drawTime
 30565 ;; This function uses a non-reentrant model
 30566 ;;
 30567                           
 30568                           	psect	text110
 30569  007B52                     __ptext110:
 30570                           	callstack 0
 30571  007B52                     _DispTime:
 30572                           	callstack 15
 30573                           
 30574                           ;incstack = 0
 30575                           ;DispTime@mode stored from wreg
 30576  007B52  6FAC               	movwf	DispTime@mode& (0+255),b
 30577                           
 30578                           ;Draw.c: 179: int8_t jj;;Draw.c: 180: uint16_t xd, yd;;Draw.c: 181: uint8_t endpoint;;Dr
      +                          aw.c: 184: xd = x +2;
 30579  007B54  0E02               	movlw	2
 30580  007B56  0100               	movlb	0	; () banked
 30581  007B58  25A0               	addwf	DispTime@x& (0+255),w,b
 30582  007B5A  6FAF               	movwf	DispTime@xd& (0+255),b
 30583  007B5C  0E00               	movlw	0
 30584  007B5E  21A1               	addwfc	(DispTime@x+1)& (0+255),w,b
 30585  007B60  6FB0               	movwf	(DispTime@xd+1)& (0+255),b
 30586                           
 30587                           ;Draw.c: 185: yd = y +2;
 30588  007B62  0E02               	movlw	2
 30589  007B64  25A2               	addwf	DispTime@y& (0+255),w,b
 30590  007B66  6FAD               	movwf	DispTime@yd& (0+255),b
 30591  007B68  0E00               	movlw	0
 30592  007B6A  21A3               	addwfc	(DispTime@y+1)& (0+255),w,b
 30593  007B6C  6FAE               	movwf	(DispTime@yd+1)& (0+255),b
 30594                           
 30595                           ;Draw.c: 186: switch (mode) {
 30596  007B6E  D005               	goto	l21435
 30597  007B70                     l21431:
 30598                           
 30599                           ; BSR set to: 0
 30600  007B70  0E01               	movlw	1
 30601  007B72  D001               	goto	L30
 30602  007B74                     l21433:
 30603                           
 30604                           ; BSR set to: 0
 30605  007B74  0E00               	movlw	0
 30606  007B76                     L30:
 30607  007B76  6FAB               	movwf	DispTime@endpoint& (0+255),b
 30608                           
 30609                           ;Draw.c: 189: }
 30610  007B78  D005               	goto	l21437
 30611  007B7A                     l21435:
 30612                           
 30613                           ; BSR set to: 0
 30614  007B7A  51AC               	movf	DispTime@mode& (0+255),w,b
 30615                           
 30616                           ; Switch size 1, requested type "simple"
 30617                           ; Number of cases is 1, Range of values is 1 to 1
 30618                           ; switch strategies available:
 30619                           ; Name         Instructions Cycles
 30620                           ; simple_byte            4     3 (average)
 30621                           ;	Chosen strategy is simple_byte
 30622  007B7C  0A01               	xorlw	1	; case 1
 30623  007B7E  B4D8               	btfsc	status,2,c
 30624  007B80  D7F7               	goto	l21431
 30625  007B82  D7F8               	goto	l21433
 30626  007B84                     l21437:
 30627                           
 30628                           ; BSR set to: 0
 30629                           ;Draw.c: 190: for (jj=2; jj>=endpoint; jj--) {
 30630  007B84  0E02               	movlw	2
 30631  007B86  6FB1               	movwf	DispTime@jj& (0+255),b
 30632  007B88  D16A               	goto	l21479
 30633  007B8A                     l21439:
 30634                           
 30635                           ; BSR set to: 0
 30636                           ;Draw.c: 191: if ((mode == 2) && (jj == 0)) size--;
 30637  007B8A  0E02               	movlw	2
 30638  007B8C  19AC               	xorwf	DispTime@mode& (0+255),w,b
 30639  007B8E  A4D8               	btfss	status,2,c
 30640  007B90  D003               	goto	l21445
 30641                           
 30642                           ; BSR set to: 0
 30643  007B92  51B1               	movf	DispTime@jj& (0+255),w,b
 30644  007B94  B4D8               	btfsc	status,2,c
 30645                           
 30646                           ; BSR set to: 0
 30647  007B96  07A4               	decf	DispTime@size& (0+255),f,b
 30648  007B98                     l21445:
 30649                           
 30650                           ; BSR set to: 0
 30651                           ;Draw.c: 192: if (size < 1) size = 1;
 30652  007B98  51A4               	movf	DispTime@size& (0+255),w,b
 30653  007B9A  A4D8               	btfss	status,2,c
 30654  007B9C  D002               	goto	l21449
 30655                           
 30656                           ; BSR set to: 0
 30657  007B9E  0E01               	movlw	1
 30658  007BA0  6FA4               	movwf	DispTime@size& (0+255),b
 30659  007BA2                     l21449:
 30660                           
 30661                           ; BSR set to: 0
 30662                           ;Draw.c: 195: if ((datetime[jj] >>4) != (preDateTime[jj] >>4)) {
 30663  007BA2  0E6D               	movlw	low _preDateTime
 30664  007BA4  25B1               	addwf	DispTime@jj& (0+255),w,b
 30665  007BA6  6ED9               	movwf	fsr2l,c
 30666  007BA8  6ADA               	clrf	fsr2h,c
 30667  007BAA  0E03               	movlw	high _preDateTime
 30668  007BAC  22DA               	addwfc	fsr2h,f,c
 30669  007BAE  50DF               	movf	indf2,w,c
 30670  007BB0  6FA7               	movwf	??_DispTime& (0+255),b
 30671  007BB2  3BA7               	swapf	??_DispTime& (0+255),f,b
 30672  007BB4  0E0F               	movlw	15
 30673  007BB6  17A7               	andwf	??_DispTime& (0+255),f,b
 30674  007BB8  C0B1  F0A8         	movff	DispTime@jj,??_DispTime+1
 30675  007BBC  6BA9               	clrf	(??_DispTime+2)& (0+255),b
 30676  007BBE  BFA8               	btfsc	(??_DispTime+1)& (0+255),7,b
 30677  007BC0  07A9               	decf	(??_DispTime+2)& (0+255),f,b
 30678  007BC2  51A8               	movf	(??_DispTime+1)& (0+255),w,b
 30679  007BC4  259E               	addwf	DispTime@datetime& (0+255),w,b
 30680  007BC6  6ED9               	movwf	fsr2l,c
 30681  007BC8  51A9               	movf	(??_DispTime+2)& (0+255),w,b
 30682  007BCA  219F               	addwfc	(DispTime@datetime+1)& (0+255),w,b
 30683  007BCC  6EDA               	movwf	fsr2h,c
 30684  007BCE  50DF               	movf	indf2,w,c
 30685  007BD0  6FAA               	movwf	(??_DispTime+3)& (0+255),b
 30686  007BD2  39AA               	swapf	(??_DispTime+3)& (0+255),w,b
 30687  007BD4  0B0F               	andlw	15
 30688  007BD6  19A7               	xorwf	??_DispTime& (0+255),w,b
 30689  007BD8  B4D8               	btfsc	status,2,c
 30690  007BDA  D043               	goto	l21455
 30691                           
 30692                           ; BSR set to: 0
 30693                           ;Draw.c: 196: fillRect(xd, yd-2, 20*size, 27*size+4, 0x0000);
 30694  007BDC  C0AF  F02D         	movff	DispTime@xd,fillRect@x
 30695  007BE0  C0B0  F02E         	movff	DispTime@xd+1,fillRect@x+1
 30696  007BE4  0EFE               	movlw	254
 30697  007BE6  25AD               	addwf	DispTime@yd& (0+255),w,b
 30698  007BE8  6E2F               	movwf	fillRect@y^0,c
 30699  007BEA  0EFF               	movlw	255
 30700  007BEC  21AE               	addwfc	(DispTime@yd+1)& (0+255),w,b
 30701  007BEE  6E30               	movwf	(fillRect@y+1)^0,c
 30702  007BF0  51A4               	movf	DispTime@size& (0+255),w,b
 30703  007BF2  0D14               	mullw	20
 30704  007BF4  CFF3 F031          	movff	prodl,fillRect@w
 30705  007BF8  CFF4 F032          	movff	prodh,fillRect@w+1
 30706  007BFC  51A4               	movf	DispTime@size& (0+255),w,b
 30707  007BFE  0D1B               	mullw	27
 30708  007C00  CFF3 F0A7          	movff	prodl,??_DispTime
 30709  007C04  CFF4 F0A8          	movff	prodh,??_DispTime+1
 30710  007C08  0E04               	movlw	4
 30711  007C0A  25A7               	addwf	??_DispTime& (0+255),w,b
 30712  007C0C  6E33               	movwf	fillRect@h^0,c
 30713  007C0E  0E00               	movlw	0
 30714  007C10  21A8               	addwfc	(??_DispTime+1)& (0+255),w,b
 30715  007C12  6E34               	movwf	(fillRect@h+1)^0,c
 30716  007C14  0E00               	movlw	0
 30717  007C16  6E36               	movwf	(fillRect@color+1)^0,c
 30718  007C18  0E00               	movlw	0
 30719  007C1A  6E35               	movwf	fillRect@color^0,c
 30720  007C1C  EC07  F071         	call	_fillRect	;wreg free
 30721                           
 30722                           ;Draw.c: 197: Dispseg(xd, yd, datetime[jj]>>4, size, color);
 30723  007C20  C0AF  F037         	movff	DispTime@xd,Dispseg@x
 30724  007C24  C0B0  F038         	movff	DispTime@xd+1,Dispseg@x+1
 30725  007C28  C0AD  F039         	movff	DispTime@yd,Dispseg@y
 30726  007C2C  C0AE  F03A         	movff	DispTime@yd+1,Dispseg@y+1
 30727  007C30  C0B1  F0A7         	movff	DispTime@jj,??_DispTime
 30728  007C34  0100               	movlb	0	; () banked
 30729  007C36  6BA8               	clrf	(??_DispTime+1)& (0+255),b
 30730  007C38  BFA7               	btfsc	??_DispTime& (0+255),7,b
 30731  007C3A  07A8               	decf	(??_DispTime+1)& (0+255),f,b
 30732  007C3C  51A7               	movf	??_DispTime& (0+255),w,b
 30733  007C3E  259E               	addwf	DispTime@datetime& (0+255),w,b
 30734  007C40  6ED9               	movwf	fsr2l,c
 30735  007C42  51A8               	movf	(??_DispTime+1)& (0+255),w,b
 30736  007C44  219F               	addwfc	(DispTime@datetime+1)& (0+255),w,b
 30737  007C46  6EDA               	movwf	fsr2h,c
 30738  007C48  50DF               	movf	indf2,w,c
 30739  007C4A  6FA9               	movwf	(??_DispTime+2)& (0+255),b
 30740  007C4C  39A9               	swapf	(??_DispTime+2)& (0+255),w,b
 30741  007C4E  0B0F               	andlw	15
 30742  007C50  6E3B               	movwf	Dispseg@num^0,c
 30743  007C52  C0A4  F03C         	movff	DispTime@size,Dispseg@size
 30744  007C56  C0A5  F03D         	movff	DispTime@color,Dispseg@color
 30745  007C5A  C0A6  F03E         	movff	DispTime@color+1,Dispseg@color+1
 30746  007C5E  EC31  F00C         	call	_Dispseg	;wreg free
 30747  007C62                     l21455:
 30748                           
 30749                           ;Draw.c: 198: };Draw.c: 200: xd += 20*size;
 30750  007C62  0100               	movlb	0	; () banked
 30751  007C64  51A4               	movf	DispTime@size& (0+255),w,b
 30752  007C66  0D14               	mullw	20
 30753  007C68  50F3               	movf	243,w,c
 30754  007C6A  27AF               	addwf	DispTime@xd& (0+255),f,b
 30755  007C6C  50F4               	movf	244,w,c
 30756  007C6E  23B0               	addwfc	(DispTime@xd+1)& (0+255),f,b
 30757                           
 30758                           ; BSR set to: 0
 30759                           ;Draw.c: 201: if ((datetime[jj] & 0x0f) != (preDateTime[jj] & 0x0f)) {
 30760  007C70  0E6D               	movlw	low _preDateTime
 30761  007C72  25B1               	addwf	DispTime@jj& (0+255),w,b
 30762  007C74  6ED9               	movwf	fsr2l,c
 30763  007C76  6ADA               	clrf	fsr2h,c
 30764  007C78  0E03               	movlw	high _preDateTime
 30765  007C7A  22DA               	addwfc	fsr2h,f,c
 30766  007C7C  50DF               	movf	indf2,w,c
 30767  007C7E  6FA7               	movwf	??_DispTime& (0+255),b
 30768  007C80  0E0F               	movlw	15
 30769  007C82  17A7               	andwf	??_DispTime& (0+255),f,b
 30770  007C84  C0B1  F0A8         	movff	DispTime@jj,??_DispTime+1
 30771  007C88  6BA9               	clrf	(??_DispTime+2)& (0+255),b
 30772  007C8A  BFA8               	btfsc	(??_DispTime+1)& (0+255),7,b
 30773  007C8C  07A9               	decf	(??_DispTime+2)& (0+255),f,b
 30774  007C8E  51A8               	movf	(??_DispTime+1)& (0+255),w,b
 30775  007C90  259E               	addwf	DispTime@datetime& (0+255),w,b
 30776  007C92  6ED9               	movwf	fsr2l,c
 30777  007C94  51A9               	movf	(??_DispTime+2)& (0+255),w,b
 30778  007C96  219F               	addwfc	(DispTime@datetime+1)& (0+255),w,b
 30779  007C98  6EDA               	movwf	fsr2h,c
 30780  007C9A  50DF               	movf	indf2,w,c
 30781  007C9C  0B0F               	andlw	15
 30782  007C9E  19A7               	xorwf	??_DispTime& (0+255),w,b
 30783  007CA0  B4D8               	btfsc	status,2,c
 30784  007CA2  D041               	goto	l21463
 30785                           
 30786                           ; BSR set to: 0
 30787                           ;Draw.c: 202: fillRect(xd, yd-2, 20*size, 27*size+4, 0x0000);
 30788  007CA4  C0AF  F02D         	movff	DispTime@xd,fillRect@x
 30789  007CA8  C0B0  F02E         	movff	DispTime@xd+1,fillRect@x+1
 30790  007CAC  0EFE               	movlw	254
 30791  007CAE  25AD               	addwf	DispTime@yd& (0+255),w,b
 30792  007CB0  6E2F               	movwf	fillRect@y^0,c
 30793  007CB2  0EFF               	movlw	255
 30794  007CB4  21AE               	addwfc	(DispTime@yd+1)& (0+255),w,b
 30795  007CB6  6E30               	movwf	(fillRect@y+1)^0,c
 30796  007CB8  51A4               	movf	DispTime@size& (0+255),w,b
 30797  007CBA  0D14               	mullw	20
 30798  007CBC  CFF3 F031          	movff	prodl,fillRect@w
 30799  007CC0  CFF4 F032          	movff	prodh,fillRect@w+1
 30800  007CC4  51A4               	movf	DispTime@size& (0+255),w,b
 30801  007CC6  0D1B               	mullw	27
 30802  007CC8  CFF3 F0A7          	movff	prodl,??_DispTime
 30803  007CCC  CFF4 F0A8          	movff	prodh,??_DispTime+1
 30804  007CD0  0E04               	movlw	4
 30805  007CD2  25A7               	addwf	??_DispTime& (0+255),w,b
 30806  007CD4  6E33               	movwf	fillRect@h^0,c
 30807  007CD6  0E00               	movlw	0
 30808  007CD8  21A8               	addwfc	(??_DispTime+1)& (0+255),w,b
 30809  007CDA  6E34               	movwf	(fillRect@h+1)^0,c
 30810  007CDC  0E00               	movlw	0
 30811  007CDE  6E36               	movwf	(fillRect@color+1)^0,c
 30812  007CE0  0E00               	movlw	0
 30813  007CE2  6E35               	movwf	fillRect@color^0,c
 30814  007CE4  EC07  F071         	call	_fillRect	;wreg free
 30815                           
 30816                           ;Draw.c: 203: Dispseg(xd, yd, datetime[jj] & 0x0f, size, color);
 30817  007CE8  C0AF  F037         	movff	DispTime@xd,Dispseg@x
 30818  007CEC  C0B0  F038         	movff	DispTime@xd+1,Dispseg@x+1
 30819  007CF0  C0AD  F039         	movff	DispTime@yd,Dispseg@y
 30820  007CF4  C0AE  F03A         	movff	DispTime@yd+1,Dispseg@y+1
 30821  007CF8  C0B1  F0A7         	movff	DispTime@jj,??_DispTime
 30822  007CFC  0100               	movlb	0	; () banked
 30823  007CFE  6BA8               	clrf	(??_DispTime+1)& (0+255),b
 30824  007D00  BFA7               	btfsc	??_DispTime& (0+255),7,b
 30825  007D02  07A8               	decf	(??_DispTime+1)& (0+255),f,b
 30826  007D04  51A7               	movf	??_DispTime& (0+255),w,b
 30827  007D06  259E               	addwf	DispTime@datetime& (0+255),w,b
 30828  007D08  6ED9               	movwf	fsr2l,c
 30829  007D0A  51A8               	movf	(??_DispTime+1)& (0+255),w,b
 30830  007D0C  219F               	addwfc	(DispTime@datetime+1)& (0+255),w,b
 30831  007D0E  6EDA               	movwf	fsr2h,c
 30832  007D10  50DF               	movf	indf2,w,c
 30833  007D12  0B0F               	andlw	15
 30834  007D14  6E3B               	movwf	Dispseg@num^0,c
 30835  007D16  C0A4  F03C         	movff	DispTime@size,Dispseg@size
 30836  007D1A  C0A5  F03D         	movff	DispTime@color,Dispseg@color
 30837  007D1E  C0A6  F03E         	movff	DispTime@color+1,Dispseg@color+1
 30838  007D22  EC31  F00C         	call	_Dispseg	;wreg free
 30839  007D26                     l21463:
 30840                           
 30841                           ;Draw.c: 204: };Draw.c: 205: preDateTime[jj] = datetime[jj];
 30842  007D26  C0B1  F0A7         	movff	DispTime@jj,??_DispTime
 30843  007D2A  0100               	movlb	0	; () banked
 30844  007D2C  6BA8               	clrf	(??_DispTime+1)& (0+255),b
 30845  007D2E  BFA7               	btfsc	??_DispTime& (0+255),7,b
 30846  007D30  07A8               	decf	(??_DispTime+1)& (0+255),f,b
 30847  007D32  51A7               	movf	??_DispTime& (0+255),w,b
 30848  007D34  259E               	addwf	DispTime@datetime& (0+255),w,b
 30849  007D36  6ED9               	movwf	fsr2l,c
 30850  007D38  51A8               	movf	(??_DispTime+1)& (0+255),w,b
 30851  007D3A  219F               	addwfc	(DispTime@datetime+1)& (0+255),w,b
 30852  007D3C  6EDA               	movwf	fsr2h,c
 30853  007D3E  0E6D               	movlw	low _preDateTime
 30854  007D40  25B1               	addwf	DispTime@jj& (0+255),w,b
 30855  007D42  6EE1               	movwf	fsr1l,c
 30856  007D44  6AE2               	clrf	fsr1h,c
 30857  007D46  0E03               	movlw	high _preDateTime
 30858  007D48  22E2               	addwfc	fsr1h,f,c
 30859  007D4A  CFDF FFE7          	movff	indf2,indf1
 30860                           
 30861                           ; BSR set to: 0
 30862                           ;Draw.c: 208: xd += 20*size;
 30863  007D4E  51A4               	movf	DispTime@size& (0+255),w,b
 30864  007D50  0D14               	mullw	20
 30865  007D52  50F3               	movf	243,w,c
 30866  007D54  27AF               	addwf	DispTime@xd& (0+255),f,b
 30867  007D56  50F4               	movf	244,w,c
 30868  007D58  23B0               	addwfc	(DispTime@xd+1)& (0+255),f,b
 30869                           
 30870                           ; BSR set to: 0
 30871                           ;Draw.c: 209: if ((jj == 2) || ((mode == 0) && (jj==1))) {
 30872  007D5A  0E02               	movlw	2
 30873  007D5C  19B1               	xorwf	DispTime@jj& (0+255),w,b
 30874  007D5E  B4D8               	btfsc	status,2,c
 30875  007D60  D006               	goto	u23960
 30876                           
 30877                           ; BSR set to: 0
 30878  007D62  51AC               	movf	DispTime@mode& (0+255),w,b
 30879  007D64  A4D8               	btfss	status,2,c
 30880  007D66  D07A               	goto	l21477
 30881                           
 30882                           ; BSR set to: 0
 30883  007D68  05B1               	decf	DispTime@jj& (0+255),w,b
 30884  007D6A  A4D8               	btfss	status,2,c
 30885  007D6C  D077               	goto	l21477
 30886  007D6E                     u23960:
 30887                           
 30888                           ; BSR set to: 0
 30889                           ;Draw.c: 211: fillRect(xd, yd-2, 6*size+1, 27*size+4, 0x0000);
 30890  007D6E  C0AF  F02D         	movff	DispTime@xd,fillRect@x
 30891  007D72  C0B0  F02E         	movff	DispTime@xd+1,fillRect@x+1
 30892  007D76  0EFE               	movlw	254
 30893  007D78  25AD               	addwf	DispTime@yd& (0+255),w,b
 30894  007D7A  6E2F               	movwf	fillRect@y^0,c
 30895  007D7C  0EFF               	movlw	255
 30896  007D7E  21AE               	addwfc	(DispTime@yd+1)& (0+255),w,b
 30897  007D80  6E30               	movwf	(fillRect@y+1)^0,c
 30898  007D82  51A4               	movf	DispTime@size& (0+255),w,b
 30899  007D84  0D06               	mullw	6
 30900  007D86  CFF3 F0A7          	movff	prodl,??_DispTime
 30901  007D8A  CFF4 F0A8          	movff	prodh,??_DispTime+1
 30902  007D8E  0E01               	movlw	1
 30903  007D90  25A7               	addwf	??_DispTime& (0+255),w,b
 30904  007D92  6E31               	movwf	fillRect@w^0,c
 30905  007D94  0E00               	movlw	0
 30906  007D96  21A8               	addwfc	(??_DispTime+1)& (0+255),w,b
 30907  007D98  6E32               	movwf	(fillRect@w+1)^0,c
 30908  007D9A  51A4               	movf	DispTime@size& (0+255),w,b
 30909  007D9C  0D1B               	mullw	27
 30910  007D9E  CFF3 F0A9          	movff	prodl,??_DispTime+2
 30911  007DA2  CFF4 F0AA          	movff	prodh,??_DispTime+3
 30912  007DA6  0E04               	movlw	4
 30913  007DA8  25A9               	addwf	(??_DispTime+2)& (0+255),w,b
 30914  007DAA  6E33               	movwf	fillRect@h^0,c
 30915  007DAC  0E00               	movlw	0
 30916  007DAE  21AA               	addwfc	(??_DispTime+3)& (0+255),w,b
 30917  007DB0  6E34               	movwf	(fillRect@h+1)^0,c
 30918  007DB2  0E00               	movlw	0
 30919  007DB4  6E36               	movwf	(fillRect@color+1)^0,c
 30920  007DB6  0E00               	movlw	0
 30921  007DB8  6E35               	movwf	fillRect@color^0,c
 30922  007DBA  EC07  F071         	call	_fillRect	;wreg free
 30923                           
 30924                           ;Draw.c: 212: fillRect(xd+1, yd+7*size, 3*size, 3*size, color);
 30925  007DBE  0E01               	movlw	1
 30926  007DC0  0100               	movlb	0	; () banked
 30927  007DC2  25AF               	addwf	DispTime@xd& (0+255),w,b
 30928  007DC4  6E2D               	movwf	fillRect@x^0,c
 30929  007DC6  0E00               	movlw	0
 30930  007DC8  21B0               	addwfc	(DispTime@xd+1)& (0+255),w,b
 30931  007DCA  6E2E               	movwf	(fillRect@x+1)^0,c
 30932  007DCC  51A4               	movf	DispTime@size& (0+255),w,b
 30933  007DCE  0D07               	mullw	7
 30934  007DD0  CFF3 F0A7          	movff	prodl,??_DispTime
 30935  007DD4  CFF4 F0A8          	movff	prodh,??_DispTime+1
 30936  007DD8  51AD               	movf	DispTime@yd& (0+255),w,b
 30937  007DDA  25A7               	addwf	??_DispTime& (0+255),w,b
 30938  007DDC  6E2F               	movwf	fillRect@y^0,c
 30939  007DDE  51AE               	movf	(DispTime@yd+1)& (0+255),w,b
 30940  007DE0  21A8               	addwfc	(??_DispTime+1)& (0+255),w,b
 30941  007DE2  6E30               	movwf	(fillRect@y+1)^0,c
 30942  007DE4  51A4               	movf	DispTime@size& (0+255),w,b
 30943  007DE6  0D03               	mullw	3
 30944  007DE8  CFF3 F031          	movff	prodl,fillRect@w
 30945  007DEC  CFF4 F032          	movff	prodh,fillRect@w+1
 30946  007DF0  51A4               	movf	DispTime@size& (0+255),w,b
 30947  007DF2  0D03               	mullw	3
 30948  007DF4  CFF3 F033          	movff	prodl,fillRect@h
 30949  007DF8  CFF4 F034          	movff	prodh,fillRect@h+1
 30950  007DFC  C0A5  F035         	movff	DispTime@color,fillRect@color
 30951  007E00  C0A6  F036         	movff	DispTime@color+1,fillRect@color+1
 30952  007E04  EC07  F071         	call	_fillRect	;wreg free
 30953                           
 30954                           ;Draw.c: 213: fillRect(xd, yd+17*size, 3*size, 3*size, color);
 30955  007E08  C0AF  F02D         	movff	DispTime@xd,fillRect@x
 30956  007E0C  C0B0  F02E         	movff	DispTime@xd+1,fillRect@x+1
 30957  007E10  0100               	movlb	0	; () banked
 30958  007E12  51A4               	movf	DispTime@size& (0+255),w,b
 30959  007E14  0D11               	mullw	17
 30960  007E16  CFF3 F0A7          	movff	prodl,??_DispTime
 30961  007E1A  CFF4 F0A8          	movff	prodh,??_DispTime+1
 30962  007E1E  51AD               	movf	DispTime@yd& (0+255),w,b
 30963  007E20  25A7               	addwf	??_DispTime& (0+255),w,b
 30964  007E22  6E2F               	movwf	fillRect@y^0,c
 30965  007E24  51AE               	movf	(DispTime@yd+1)& (0+255),w,b
 30966  007E26  21A8               	addwfc	(??_DispTime+1)& (0+255),w,b
 30967  007E28  6E30               	movwf	(fillRect@y+1)^0,c
 30968  007E2A  51A4               	movf	DispTime@size& (0+255),w,b
 30969  007E2C  0D03               	mullw	3
 30970  007E2E  CFF3 F031          	movff	prodl,fillRect@w
 30971  007E32  CFF4 F032          	movff	prodh,fillRect@w+1
 30972  007E36  51A4               	movf	DispTime@size& (0+255),w,b
 30973  007E38  0D03               	mullw	3
 30974  007E3A  CFF3 F033          	movff	prodl,fillRect@h
 30975  007E3E  CFF4 F034          	movff	prodh,fillRect@h+1
 30976  007E42  C0A5  F035         	movff	DispTime@color,fillRect@color
 30977  007E46  C0A6  F036         	movff	DispTime@color+1,fillRect@color+1
 30978  007E4A  EC07  F071         	call	_fillRect	;wreg free
 30979                           
 30980                           ;Draw.c: 214: xd += 6*size ;
 30981  007E4E  0100               	movlb	0	; () banked
 30982  007E50  51A4               	movf	DispTime@size& (0+255),w,b
 30983  007E52  0D06               	mullw	6
 30984  007E54  50F3               	movf	243,w,c
 30985  007E56  27AF               	addwf	DispTime@xd& (0+255),f,b
 30986  007E58  50F4               	movf	244,w,c
 30987  007E5A  23B0               	addwfc	(DispTime@xd+1)& (0+255),f,b
 30988  007E5C                     l21477:
 30989                           
 30990                           ; BSR set to: 0
 30991  007E5C  07B1               	decf	DispTime@jj& (0+255),f,b
 30992  007E5E                     l21479:
 30993                           
 30994                           ; BSR set to: 0
 30995  007E5E  51AB               	movf	DispTime@endpoint& (0+255),w,b
 30996  007E60  90D8               	bcf	status,0,c
 30997  007E62  AFB1               	btfss	DispTime@jj& (0+255),7,b
 30998  007E64  5DB1               	subwf	DispTime@jj& (0+255),w,b
 30999  007E66  B0D8               	btfsc	status,0,c
 31000  007E68  80D8               	bsf	status,0,c
 31001  007E6A  A0D8               	btfss	status,0,c
 31002  007E6C  0012               	return	
 31003  007E6E  D68D               	goto	l21439
 31004  007E70                     __end_of_DispTime:
 31005                           	callstack 0
 31006                           
 31007 ;; *************** function _Dispseg *****************
 31008 ;; Defined at:
 31009 ;;		line 37 in file "Draw.c"
 31010 ;; Parameters:    Size  Location     Type
 31011 ;;  x               2   54[COMRAM] unsigned int 
 31012 ;;  y               2   56[COMRAM] unsigned int 
 31013 ;;  num             1   58[COMRAM] unsigned char 
 31014 ;;  size            1   59[COMRAM] unsigned char 
 31015 ;;  color           2   60[COMRAM] unsigned int 
 31016 ;; Auto vars:     Size  Location     Type
 31017 ;;  str           100    0        unsigned char [100]
 31018 ;;  pattern        10   40[BANK0 ] const unsigned char [10]
 31019 ;;  y1              2   60[BANK0 ] unsigned int 
 31020 ;;  x1              2   58[BANK0 ] unsigned int 
 31021 ;;  y2              2   56[BANK0 ] unsigned int 
 31022 ;;  y0              2   54[BANK0 ] unsigned int 
 31023 ;;  x0              2   52[BANK0 ] unsigned int 
 31024 ;;  x2              2   50[BANK0 ] unsigned int 
 31025 ;;  jj              2    0        unsigned int 
 31026 ;;  yt              2    0        unsigned int 
 31027 ;;  xt              2    0        unsigned int 
 31028 ;;  ys              2    0        unsigned int 
 31029 ;;  xs              2    0        unsigned int 
 31030 ;; Return value:  Size  Location     Type
 31031 ;;                  1    wreg      void 
 31032 ;; Registers used:
 31033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31034 ;; Tracked objects:
 31035 ;;		On entry : 3F/0
 31036 ;;		On exit  : 0/0
 31037 ;;		Unchanged: 0/0
 31038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31039 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31040 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31041 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31042 ;;      Totals:        12      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31043 ;;Total ram usage:       34 bytes
 31044 ;; Hardware stack levels used:    1
 31045 ;; Hardware stack levels required when called:   12
 31046 ;; This function calls:
 31047 ;;		_display_fillTriangle
 31048 ;; This function is called by:
 31049 ;;		_DispTime
 31050 ;; This function uses a non-reentrant model
 31051 ;;
 31052                           
 31053                           	psect	text111
 31054  001862                     __ptext111:
 31055                           	callstack 0
 31056  001862                     _Dispseg:
 31057                           	callstack 15
 31058                           
 31059                           ; BSR set to: 0
 31060                           ;Draw.c: 38: char str[100];;Draw.c: 39: const uint8_t pattern[] = {;Draw.c: 40: 0x3f,;Dr
      +                          aw.c: 41: 0x06,;Draw.c: 42: 0x5b,;Draw.c: 43: 0x4f,;Draw.c: 44: 0x66,;Draw.c: 45: 0x6d,;
      +                          Draw.c: 46: 0x7d,;Draw.c: 47: 0x07,;Draw.c: 48: 0x7f,;Draw.c: 49: 0x6f,;Draw.c: 50: };
 31061                           
 31062                           ; BSR set to: 0
 31063                           ;incstack = 0
 31064  001862  0EB9               	movlw	low Dispseg@F6512
 31065  001864  6EF6               	movwf	tblptrl,c
 31066  001866                     	if	1	;There is more than 1 active tblptr byte
 31067  001866  0EFA               	movlw	high Dispseg@F6512
 31068  001868  6EF7               	movwf	tblptrh,c
 31069  00186A                     	endif
 31070  00186A                     	if	1	;There are 3 active tblptr bytes
 31071  00186A  0E00               	movlw	low (Dispseg@F6512 shr (0+16))
 31072  00186C  6EF8               	movwf	tblptru,c
 31073  00186E                     	endif
 31074  00186E  EE20  F088         	lfsr	2,Dispseg@pattern
 31075  001872  0E09               	movlw	9
 31076  001874                     u22770:
 31077  001874  0009               	tblrd		*+
 31078  001876  CFF5 FFDE          	movff	tablat,postinc2
 31079  00187A  06E8               	decf	wreg,f,c
 31080  00187C  E2FB               	bc	u22770
 31081                           
 31082                           ; BSR set to: 0
 31083                           ;Draw.c: 51: uint16_t xs, ys, xt, yt;;Draw.c: 52: uint16_t x0, y0, x1, y1, x2, y2;;Draw.
      +                          c: 53: uint16_t jj;;Draw.c: 56: if (pattern[num] & 0x01) {
 31084  00187E  503B               	movf	Dispseg@num^0,w,c
 31085  001880  0F88               	addlw	low Dispseg@pattern
 31086  001882  6ED9               	movwf	fsr2l,c
 31087  001884  6ADA               	clrf	fsr2h,c
 31088  001886  A0DF               	btfss	indf2,0,c
 31089  001888  D08B               	goto	l20685
 31090                           
 31091                           ; BSR set to: 0
 31092                           ;Draw.c: 57: x0 = x + 5*size;
 31093  00188A  503C               	movf	Dispseg@size^0,w,c
 31094  00188C  0D05               	mullw	5
 31095  00188E  CFF3 F03F          	movff	prodl,??_Dispseg
 31096  001892  CFF4 F040          	movff	prodh,??_Dispseg+1
 31097  001896  5037               	movf	Dispseg@x^0,w,c
 31098  001898  243F               	addwf	??_Dispseg^0,w,c
 31099  00189A  6F94               	movwf	Dispseg@x0& (0+255),b
 31100  00189C  5038               	movf	(Dispseg@x+1)^0,w,c
 31101  00189E  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31102  0018A0  6F95               	movwf	(Dispseg@x0+1)& (0+255),b
 31103                           
 31104                           ; BSR set to: 0
 31105                           ;Draw.c: 58: y0 = y;
 31106  0018A2  C039  F096         	movff	Dispseg@y,Dispseg@y0
 31107  0018A6  C03A  F097         	movff	Dispseg@y+1,Dispseg@y0+1
 31108                           
 31109                           ;Draw.c: 59: x1 = x + 18*size;
 31110  0018AA  503C               	movf	Dispseg@size^0,w,c
 31111  0018AC  0D12               	mullw	18
 31112  0018AE  CFF3 F03F          	movff	prodl,??_Dispseg
 31113  0018B2  CFF4 F040          	movff	prodh,??_Dispseg+1
 31114  0018B6  5037               	movf	Dispseg@x^0,w,c
 31115  0018B8  243F               	addwf	??_Dispseg^0,w,c
 31116  0018BA  6F9A               	movwf	Dispseg@x1& (0+255),b
 31117  0018BC  5038               	movf	(Dispseg@x+1)^0,w,c
 31118  0018BE  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31119  0018C0  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 31120                           
 31121                           ; BSR set to: 0
 31122                           ;Draw.c: 60: y1 = y;
 31123  0018C2  C039  F09C         	movff	Dispseg@y,Dispseg@y1
 31124  0018C6  C03A  F09D         	movff	Dispseg@y+1,Dispseg@y1+1
 31125                           
 31126                           ; BSR set to: 0
 31127                           ;Draw.c: 61: x2 = x + 16*size;
 31128  0018CA  503C               	movf	Dispseg@size^0,w,c
 31129  0018CC  6E3F               	movwf	??_Dispseg^0,c
 31130  0018CE  6A40               	clrf	(??_Dispseg+1)^0,c
 31131  0018D0  3A3F               	swapf	??_Dispseg^0,f,c
 31132  0018D2  3A40               	swapf	(??_Dispseg+1)^0,f,c
 31133  0018D4  0EF0               	movlw	240
 31134  0018D6  1640               	andwf	(??_Dispseg+1)^0,f,c
 31135  0018D8  503F               	movf	??_Dispseg^0,w,c
 31136  0018DA  0B0F               	andlw	15
 31137  0018DC  1240               	iorwf	(??_Dispseg+1)^0,f,c
 31138  0018DE  0EF0               	movlw	240
 31139  0018E0  163F               	andwf	??_Dispseg^0,f,c
 31140  0018E2  5037               	movf	Dispseg@x^0,w,c
 31141  0018E4  243F               	addwf	??_Dispseg^0,w,c
 31142  0018E6  6F92               	movwf	Dispseg@x2& (0+255),b
 31143  0018E8  5038               	movf	(Dispseg@x+1)^0,w,c
 31144  0018EA  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31145  0018EC  6F93               	movwf	(Dispseg@x2+1)& (0+255),b
 31146                           
 31147                           ; BSR set to: 0
 31148                           ;Draw.c: 62: y2 = y + 2*size;
 31149  0018EE  503C               	movf	Dispseg@size^0,w,c
 31150  0018F0  6E3F               	movwf	??_Dispseg^0,c
 31151  0018F2  6A40               	clrf	(??_Dispseg+1)^0,c
 31152  0018F4  90D8               	bcf	status,0,c
 31153  0018F6  363F               	rlcf	??_Dispseg^0,f,c
 31154  0018F8  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31155  0018FA  5039               	movf	Dispseg@y^0,w,c
 31156  0018FC  243F               	addwf	??_Dispseg^0,w,c
 31157  0018FE  6F98               	movwf	Dispseg@y2& (0+255),b
 31158  001900  503A               	movf	(Dispseg@y+1)^0,w,c
 31159  001902  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31160  001904  6F99               	movwf	(Dispseg@y2+1)& (0+255),b
 31161                           
 31162                           ; BSR set to: 0
 31163                           ;Draw.c: 63: display_fillTriangle(x0, y0, x1, y1, x2, y2, color);
 31164  001906  C094  F027         	movff	Dispseg@x0,display_fillTriangle@x0
 31165  00190A  C095  F028         	movff	Dispseg@x0+1,display_fillTriangle@x0+1
 31166  00190E  C096  F029         	movff	Dispseg@y0,display_fillTriangle@y0
 31167  001912  C097  F02A         	movff	Dispseg@y0+1,display_fillTriangle@y0+1
 31168  001916  C09A  F02B         	movff	Dispseg@x1,display_fillTriangle@x1
 31169  00191A  C09B  F02C         	movff	Dispseg@x1+1,display_fillTriangle@x1+1
 31170  00191E  C09C  F02D         	movff	Dispseg@y1,display_fillTriangle@y1
 31171  001922  C09D  F02E         	movff	Dispseg@y1+1,display_fillTriangle@y1+1
 31172  001926  C092  F02F         	movff	Dispseg@x2,display_fillTriangle@x2
 31173  00192A  C093  F030         	movff	Dispseg@x2+1,display_fillTriangle@x2+1
 31174  00192E  C098  F031         	movff	Dispseg@y2,display_fillTriangle@y2
 31175  001932  C099  F032         	movff	Dispseg@y2+1,display_fillTriangle@y2+1
 31176  001936  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31177  00193A  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31178  00193E  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31179                           
 31180                           ;Draw.c: 64: x1 = x + 7*size;
 31181  001942  503C               	movf	Dispseg@size^0,w,c
 31182  001944  0D07               	mullw	7
 31183  001946  CFF3 F03F          	movff	prodl,??_Dispseg
 31184  00194A  CFF4 F040          	movff	prodh,??_Dispseg+1
 31185  00194E  5037               	movf	Dispseg@x^0,w,c
 31186  001950  243F               	addwf	??_Dispseg^0,w,c
 31187  001952  0100               	movlb	0	; () banked
 31188  001954  6F9A               	movwf	Dispseg@x1& (0+255),b
 31189  001956  5038               	movf	(Dispseg@x+1)^0,w,c
 31190  001958  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31191  00195A  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 31192                           
 31193                           ; BSR set to: 0
 31194                           ;Draw.c: 65: y1 = y2;
 31195  00195C  C098  F09C         	movff	Dispseg@y2,Dispseg@y1
 31196  001960  C099  F09D         	movff	Dispseg@y2+1,Dispseg@y1+1
 31197                           
 31198                           ;Draw.c: 66: display_fillTriangle(x0, y0, x2, y2, x1, y1, color);
 31199  001964  C094  F027         	movff	Dispseg@x0,display_fillTriangle@x0
 31200  001968  C095  F028         	movff	Dispseg@x0+1,display_fillTriangle@x0+1
 31201  00196C  C096  F029         	movff	Dispseg@y0,display_fillTriangle@y0
 31202  001970  C097  F02A         	movff	Dispseg@y0+1,display_fillTriangle@y0+1
 31203  001974  C092  F02B         	movff	Dispseg@x2,display_fillTriangle@x1
 31204  001978  C093  F02C         	movff	Dispseg@x2+1,display_fillTriangle@x1+1
 31205  00197C  C098  F02D         	movff	Dispseg@y2,display_fillTriangle@y1
 31206  001980  C099  F02E         	movff	Dispseg@y2+1,display_fillTriangle@y1+1
 31207  001984  C09A  F02F         	movff	Dispseg@x1,display_fillTriangle@x2
 31208  001988  C09B  F030         	movff	Dispseg@x1+1,display_fillTriangle@x2+1
 31209  00198C  C09C  F031         	movff	Dispseg@y1,display_fillTriangle@y2
 31210  001990  C09D  F032         	movff	Dispseg@y1+1,display_fillTriangle@y2+1
 31211  001994  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31212  001998  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31213  00199C  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31214  0019A0                     l20685:
 31215                           
 31216                           ;Draw.c: 67: };Draw.c: 70: if (pattern[num] & 0x02) {
 31217  0019A0  503B               	movf	Dispseg@num^0,w,c
 31218  0019A2  0F88               	addlw	low Dispseg@pattern
 31219  0019A4  6ED9               	movwf	fsr2l,c
 31220  0019A6  6ADA               	clrf	fsr2h,c
 31221  0019A8  0100               	movlb	0	; () banked
 31222  0019AA  A2DF               	btfss	indf2,1,c
 31223  0019AC  D0C7               	goto	l20705
 31224                           
 31225                           ; BSR set to: 0
 31226                           ;Draw.c: 71: x0 = x + 16*size;
 31227  0019AE  503C               	movf	Dispseg@size^0,w,c
 31228  0019B0  6E3F               	movwf	??_Dispseg^0,c
 31229  0019B2  6A40               	clrf	(??_Dispseg+1)^0,c
 31230  0019B4  3A3F               	swapf	??_Dispseg^0,f,c
 31231  0019B6  3A40               	swapf	(??_Dispseg+1)^0,f,c
 31232  0019B8  0EF0               	movlw	240
 31233  0019BA  1640               	andwf	(??_Dispseg+1)^0,f,c
 31234  0019BC  503F               	movf	??_Dispseg^0,w,c
 31235  0019BE  0B0F               	andlw	15
 31236  0019C0  1240               	iorwf	(??_Dispseg+1)^0,f,c
 31237  0019C2  0EF0               	movlw	240
 31238  0019C4  163F               	andwf	??_Dispseg^0,f,c
 31239  0019C6  5037               	movf	Dispseg@x^0,w,c
 31240  0019C8  243F               	addwf	??_Dispseg^0,w,c
 31241  0019CA  6F94               	movwf	Dispseg@x0& (0+255),b
 31242  0019CC  5038               	movf	(Dispseg@x+1)^0,w,c
 31243  0019CE  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31244  0019D0  6F95               	movwf	(Dispseg@x0+1)& (0+255),b
 31245                           
 31246                           ;Draw.c: 72: y0 = y + 4*size - (size-1);
 31247  0019D2  503C               	movf	Dispseg@size^0,w,c
 31248  0019D4  C03C  F03F         	movff	Dispseg@size,??_Dispseg
 31249  0019D8  6A40               	clrf	(??_Dispseg+1)^0,c
 31250  0019DA  90D8               	bcf	status,0,c
 31251  0019DC  363F               	rlcf	??_Dispseg^0,f,c
 31252  0019DE  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31253  0019E0  90D8               	bcf	status,0,c
 31254  0019E2  363F               	rlcf	??_Dispseg^0,f,c
 31255  0019E4  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31256  0019E6  5E3F               	subwf	??_Dispseg^0,f,c
 31257  0019E8  0E00               	movlw	0
 31258  0019EA  5A40               	subwfb	(??_Dispseg+1)^0,f,c
 31259  0019EC  5039               	movf	Dispseg@y^0,w,c
 31260  0019EE  263F               	addwf	??_Dispseg^0,f,c
 31261  0019F0  503A               	movf	(Dispseg@y+1)^0,w,c
 31262  0019F2  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31263  0019F4  0E01               	movlw	1
 31264  0019F6  243F               	addwf	??_Dispseg^0,w,c
 31265  0019F8  6F96               	movwf	Dispseg@y0& (0+255),b
 31266  0019FA  0E00               	movlw	0
 31267  0019FC  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31268  0019FE  6F97               	movwf	(Dispseg@y0+1)& (0+255),b
 31269                           
 31270                           ; BSR set to: 0
 31271                           ;Draw.c: 73: x1 = x + 18*size;
 31272  001A00  503C               	movf	Dispseg@size^0,w,c
 31273  001A02  0D12               	mullw	18
 31274  001A04  CFF3 F03F          	movff	prodl,??_Dispseg
 31275  001A08  CFF4 F040          	movff	prodh,??_Dispseg+1
 31276  001A0C  5037               	movf	Dispseg@x^0,w,c
 31277  001A0E  243F               	addwf	??_Dispseg^0,w,c
 31278  001A10  6F9A               	movwf	Dispseg@x1& (0+255),b
 31279  001A12  5038               	movf	(Dispseg@x+1)^0,w,c
 31280  001A14  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31281  001A16  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 31282                           
 31283                           ; BSR set to: 0
 31284                           ;Draw.c: 74: y1 = y + 2*size - (size-1);
 31285  001A18  503C               	movf	Dispseg@size^0,w,c
 31286  001A1A  C03C  F03F         	movff	Dispseg@size,??_Dispseg
 31287  001A1E  6A40               	clrf	(??_Dispseg+1)^0,c
 31288  001A20  90D8               	bcf	status,0,c
 31289  001A22  363F               	rlcf	??_Dispseg^0,f,c
 31290  001A24  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31291  001A26  5E3F               	subwf	??_Dispseg^0,f,c
 31292  001A28  0E00               	movlw	0
 31293  001A2A  5A40               	subwfb	(??_Dispseg+1)^0,f,c
 31294  001A2C  5039               	movf	Dispseg@y^0,w,c
 31295  001A2E  263F               	addwf	??_Dispseg^0,f,c
 31296  001A30  503A               	movf	(Dispseg@y+1)^0,w,c
 31297  001A32  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31298  001A34  0E01               	movlw	1
 31299  001A36  243F               	addwf	??_Dispseg^0,w,c
 31300  001A38  6F9C               	movwf	Dispseg@y1& (0+255),b
 31301  001A3A  0E00               	movlw	0
 31302  001A3C  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31303  001A3E  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 31304                           
 31305                           ; BSR set to: 0
 31306                           ;Draw.c: 75: x2 = x + 16*size + (size-1);
 31307  001A40  503C               	movf	Dispseg@size^0,w,c
 31308  001A42  6E3F               	movwf	??_Dispseg^0,c
 31309  001A44  6A40               	clrf	(??_Dispseg+1)^0,c
 31310  001A46  3A3F               	swapf	??_Dispseg^0,f,c
 31311  001A48  3A40               	swapf	(??_Dispseg+1)^0,f,c
 31312  001A4A  0EF0               	movlw	240
 31313  001A4C  1640               	andwf	(??_Dispseg+1)^0,f,c
 31314  001A4E  503F               	movf	??_Dispseg^0,w,c
 31315  001A50  0B0F               	andlw	15
 31316  001A52  1240               	iorwf	(??_Dispseg+1)^0,f,c
 31317  001A54  0EF0               	movlw	240
 31318  001A56  163F               	andwf	??_Dispseg^0,f,c
 31319  001A58  503C               	movf	Dispseg@size^0,w,c
 31320  001A5A  6E41               	movwf	(??_Dispseg+2)^0,c
 31321  001A5C  6A42               	clrf	(??_Dispseg+3)^0,c
 31322  001A5E  503F               	movf	??_Dispseg^0,w,c
 31323  001A60  2641               	addwf	(??_Dispseg+2)^0,f,c
 31324  001A62  5040               	movf	(??_Dispseg+1)^0,w,c
 31325  001A64  2242               	addwfc	(??_Dispseg+3)^0,f,c
 31326  001A66  5037               	movf	Dispseg@x^0,w,c
 31327  001A68  2641               	addwf	(??_Dispseg+2)^0,f,c
 31328  001A6A  5038               	movf	(Dispseg@x+1)^0,w,c
 31329  001A6C  2242               	addwfc	(??_Dispseg+3)^0,f,c
 31330  001A6E  0EFF               	movlw	255
 31331  001A70  2441               	addwf	(??_Dispseg+2)^0,w,c
 31332  001A72  6F92               	movwf	Dispseg@x2& (0+255),b
 31333  001A74  0EFF               	movlw	255
 31334  001A76  2042               	addwfc	(??_Dispseg+3)^0,w,c
 31335  001A78  6F93               	movwf	(Dispseg@x2+1)& (0+255),b
 31336                           
 31337                           ; BSR set to: 0
 31338                           ;Draw.c: 76: y2 = y + 13*size;
 31339  001A7A  503C               	movf	Dispseg@size^0,w,c
 31340  001A7C  0D0D               	mullw	13
 31341  001A7E  CFF3 F03F          	movff	prodl,??_Dispseg
 31342  001A82  CFF4 F040          	movff	prodh,??_Dispseg+1
 31343  001A86  5039               	movf	Dispseg@y^0,w,c
 31344  001A88  243F               	addwf	??_Dispseg^0,w,c
 31345  001A8A  6F98               	movwf	Dispseg@y2& (0+255),b
 31346  001A8C  503A               	movf	(Dispseg@y+1)^0,w,c
 31347  001A8E  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31348  001A90  6F99               	movwf	(Dispseg@y2+1)& (0+255),b
 31349                           
 31350                           ; BSR set to: 0
 31351                           ;Draw.c: 77: display_fillTriangle(x1, y1, x0, y0, x2, y2, color);
 31352  001A92  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 31353  001A96  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 31354  001A9A  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 31355  001A9E  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 31356  001AA2  C094  F02B         	movff	Dispseg@x0,display_fillTriangle@x1
 31357  001AA6  C095  F02C         	movff	Dispseg@x0+1,display_fillTriangle@x1+1
 31358  001AAA  C096  F02D         	movff	Dispseg@y0,display_fillTriangle@y1
 31359  001AAE  C097  F02E         	movff	Dispseg@y0+1,display_fillTriangle@y1+1
 31360  001AB2  C092  F02F         	movff	Dispseg@x2,display_fillTriangle@x2
 31361  001AB6  C093  F030         	movff	Dispseg@x2+1,display_fillTriangle@x2+1
 31362  001ABA  C098  F031         	movff	Dispseg@y2,display_fillTriangle@y2
 31363  001ABE  C099  F032         	movff	Dispseg@y2+1,display_fillTriangle@y2+1
 31364  001AC2  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31365  001AC6  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31366  001ACA  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31367                           
 31368                           ;Draw.c: 81: x1 = x + 15*size;
 31369  001ACE  503C               	movf	Dispseg@size^0,w,c
 31370  001AD0  0D0F               	mullw	15
 31371  001AD2  CFF3 F03F          	movff	prodl,??_Dispseg
 31372  001AD6  CFF4 F040          	movff	prodh,??_Dispseg+1
 31373  001ADA  5037               	movf	Dispseg@x^0,w,c
 31374  001ADC  243F               	addwf	??_Dispseg^0,w,c
 31375  001ADE  0100               	movlb	0	; () banked
 31376  001AE0  6F9A               	movwf	Dispseg@x1& (0+255),b
 31377  001AE2  5038               	movf	(Dispseg@x+1)^0,w,c
 31378  001AE4  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31379  001AE6  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 31380                           
 31381                           ; BSR set to: 0
 31382                           ;Draw.c: 82: y1 = y + 11*size;
 31383  001AE8  503C               	movf	Dispseg@size^0,w,c
 31384  001AEA  0D0B               	mullw	11
 31385  001AEC  CFF3 F03F          	movff	prodl,??_Dispseg
 31386  001AF0  CFF4 F040          	movff	prodh,??_Dispseg+1
 31387  001AF4  5039               	movf	Dispseg@y^0,w,c
 31388  001AF6  243F               	addwf	??_Dispseg^0,w,c
 31389  001AF8  6F9C               	movwf	Dispseg@y1& (0+255),b
 31390  001AFA  503A               	movf	(Dispseg@y+1)^0,w,c
 31391  001AFC  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31392  001AFE  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 31393                           
 31394                           ; BSR set to: 0
 31395                           ;Draw.c: 83: display_fillTriangle(x1, y1, x2, y2, x0, y0, color);
 31396  001B00  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 31397  001B04  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 31398  001B08  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 31399  001B0C  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 31400  001B10  C092  F02B         	movff	Dispseg@x2,display_fillTriangle@x1
 31401  001B14  C093  F02C         	movff	Dispseg@x2+1,display_fillTriangle@x1+1
 31402  001B18  C098  F02D         	movff	Dispseg@y2,display_fillTriangle@y1
 31403  001B1C  C099  F02E         	movff	Dispseg@y2+1,display_fillTriangle@y1+1
 31404  001B20  C094  F02F         	movff	Dispseg@x0,display_fillTriangle@x2
 31405  001B24  C095  F030         	movff	Dispseg@x0+1,display_fillTriangle@x2+1
 31406  001B28  C096  F031         	movff	Dispseg@y0,display_fillTriangle@y2
 31407  001B2C  C097  F032         	movff	Dispseg@y0+1,display_fillTriangle@y2+1
 31408  001B30  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31409  001B34  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31410  001B38  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31411  001B3C                     l20705:
 31412                           
 31413                           ;Draw.c: 85: };Draw.c: 88: if (pattern[num] & 0x04) {
 31414  001B3C  503B               	movf	Dispseg@num^0,w,c
 31415  001B3E  0F88               	addlw	low Dispseg@pattern
 31416  001B40  6ED9               	movwf	fsr2l,c
 31417  001B42  6ADA               	clrf	fsr2h,c
 31418  001B44  0100               	movlb	0	; () banked
 31419  001B46  A4DF               	btfss	indf2,2,c
 31420  001B48  D0AD               	goto	l20717
 31421                           
 31422                           ; BSR set to: 0
 31423                           ;Draw.c: 89: x0 = x + 15*size - (size-1);
 31424  001B4A  503C               	movf	Dispseg@size^0,w,c
 31425  001B4C  0D0E               	mullw	14
 31426  001B4E  CFF3 F03F          	movff	prodl,??_Dispseg
 31427  001B52  CFF4 F040          	movff	prodh,??_Dispseg+1
 31428  001B56  5037               	movf	Dispseg@x^0,w,c
 31429  001B58  263F               	addwf	??_Dispseg^0,f,c
 31430  001B5A  5038               	movf	(Dispseg@x+1)^0,w,c
 31431  001B5C  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31432  001B5E  0E01               	movlw	1
 31433  001B60  243F               	addwf	??_Dispseg^0,w,c
 31434  001B62  6F94               	movwf	Dispseg@x0& (0+255),b
 31435  001B64  0E00               	movlw	0
 31436  001B66  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31437  001B68  6F95               	movwf	(Dispseg@x0+1)& (0+255),b
 31438                           
 31439                           ;Draw.c: 90: y0 = y + 15*size;
 31440  001B6A  503C               	movf	Dispseg@size^0,w,c
 31441  001B6C  0D0F               	mullw	15
 31442  001B6E  CFF3 F03F          	movff	prodl,??_Dispseg
 31443  001B72  CFF4 F040          	movff	prodh,??_Dispseg+1
 31444  001B76  5039               	movf	Dispseg@y^0,w,c
 31445  001B78  243F               	addwf	??_Dispseg^0,w,c
 31446  001B7A  6F96               	movwf	Dispseg@y0& (0+255),b
 31447  001B7C  503A               	movf	(Dispseg@y+1)^0,w,c
 31448  001B7E  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31449  001B80  6F97               	movwf	(Dispseg@y0+1)& (0+255),b
 31450                           
 31451                           ;Draw.c: 91: x1 = x + 17*size - (size-1);
 31452  001B82  503C               	movf	Dispseg@size^0,w,c
 31453  001B84  0D10               	mullw	16
 31454  001B86  CFF3 F03F          	movff	prodl,??_Dispseg
 31455  001B8A  CFF4 F040          	movff	prodh,??_Dispseg+1
 31456  001B8E  5037               	movf	Dispseg@x^0,w,c
 31457  001B90  263F               	addwf	??_Dispseg^0,f,c
 31458  001B92  5038               	movf	(Dispseg@x+1)^0,w,c
 31459  001B94  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31460  001B96  0E01               	movlw	1
 31461  001B98  243F               	addwf	??_Dispseg^0,w,c
 31462  001B9A  6F9A               	movwf	Dispseg@x1& (0+255),b
 31463  001B9C  0E00               	movlw	0
 31464  001B9E  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31465  001BA0  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 31466                           
 31467                           ;Draw.c: 92: y1 = y + 14*size;
 31468  001BA2  503C               	movf	Dispseg@size^0,w,c
 31469  001BA4  0D0E               	mullw	14
 31470  001BA6  CFF3 F03F          	movff	prodl,??_Dispseg
 31471  001BAA  CFF4 F040          	movff	prodh,??_Dispseg+1
 31472  001BAE  5039               	movf	Dispseg@y^0,w,c
 31473  001BB0  243F               	addwf	??_Dispseg^0,w,c
 31474  001BB2  6F9C               	movwf	Dispseg@y1& (0+255),b
 31475  001BB4  503A               	movf	(Dispseg@y+1)^0,w,c
 31476  001BB6  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31477  001BB8  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 31478                           
 31479                           ;Draw.c: 93: x2 = x + 15*size;
 31480  001BBA  503C               	movf	Dispseg@size^0,w,c
 31481  001BBC  0D0F               	mullw	15
 31482  001BBE  CFF3 F03F          	movff	prodl,??_Dispseg
 31483  001BC2  CFF4 F040          	movff	prodh,??_Dispseg+1
 31484  001BC6  5037               	movf	Dispseg@x^0,w,c
 31485  001BC8  243F               	addwf	??_Dispseg^0,w,c
 31486  001BCA  6F92               	movwf	Dispseg@x2& (0+255),b
 31487  001BCC  5038               	movf	(Dispseg@x+1)^0,w,c
 31488  001BCE  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31489  001BD0  6F93               	movwf	(Dispseg@x2+1)& (0+255),b
 31490                           
 31491                           ;Draw.c: 94: y2 = y + 25*size + (size-1);
 31492  001BD2  503C               	movf	Dispseg@size^0,w,c
 31493  001BD4  0D1A               	mullw	26
 31494  001BD6  CFF3 F03F          	movff	prodl,??_Dispseg
 31495  001BDA  CFF4 F040          	movff	prodh,??_Dispseg+1
 31496  001BDE  5039               	movf	Dispseg@y^0,w,c
 31497  001BE0  263F               	addwf	??_Dispseg^0,f,c
 31498  001BE2  503A               	movf	(Dispseg@y+1)^0,w,c
 31499  001BE4  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31500  001BE6  0EFF               	movlw	255
 31501  001BE8  243F               	addwf	??_Dispseg^0,w,c
 31502  001BEA  6F98               	movwf	Dispseg@y2& (0+255),b
 31503  001BEC  0EFF               	movlw	255
 31504  001BEE  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31505  001BF0  6F99               	movwf	(Dispseg@y2+1)& (0+255),b
 31506                           
 31507                           ; BSR set to: 0
 31508                           ;Draw.c: 95: display_fillTriangle(x1, y1, x0, y0, x2, y2, color);
 31509  001BF2  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 31510  001BF6  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 31511  001BFA  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 31512  001BFE  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 31513  001C02  C094  F02B         	movff	Dispseg@x0,display_fillTriangle@x1
 31514  001C06  C095  F02C         	movff	Dispseg@x0+1,display_fillTriangle@x1+1
 31515  001C0A  C096  F02D         	movff	Dispseg@y0,display_fillTriangle@y1
 31516  001C0E  C097  F02E         	movff	Dispseg@y0+1,display_fillTriangle@y1+1
 31517  001C12  C092  F02F         	movff	Dispseg@x2,display_fillTriangle@x2
 31518  001C16  C093  F030         	movff	Dispseg@x2+1,display_fillTriangle@x2+1
 31519  001C1A  C098  F031         	movff	Dispseg@y2,display_fillTriangle@y2
 31520  001C1E  C099  F032         	movff	Dispseg@y2+1,display_fillTriangle@y2+1
 31521  001C22  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31522  001C26  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31523  001C2A  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31524                           
 31525                           ;Draw.c: 96: x1 = x + 13*size;
 31526  001C2E  503C               	movf	Dispseg@size^0,w,c
 31527  001C30  0D0D               	mullw	13
 31528  001C32  CFF3 F03F          	movff	prodl,??_Dispseg
 31529  001C36  CFF4 F040          	movff	prodh,??_Dispseg+1
 31530  001C3A  5037               	movf	Dispseg@x^0,w,c
 31531  001C3C  243F               	addwf	??_Dispseg^0,w,c
 31532  001C3E  0100               	movlb	0	; () banked
 31533  001C40  6F9A               	movwf	Dispseg@x1& (0+255),b
 31534  001C42  5038               	movf	(Dispseg@x+1)^0,w,c
 31535  001C44  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31536  001C46  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 31537                           
 31538                           ; BSR set to: 0
 31539                           ;Draw.c: 97: y1 = y + 23*size + (size-1);
 31540  001C48  503C               	movf	Dispseg@size^0,w,c
 31541  001C4A  0D18               	mullw	24
 31542  001C4C  CFF3 F03F          	movff	prodl,??_Dispseg
 31543  001C50  CFF4 F040          	movff	prodh,??_Dispseg+1
 31544  001C54  5039               	movf	Dispseg@y^0,w,c
 31545  001C56  263F               	addwf	??_Dispseg^0,f,c
 31546  001C58  503A               	movf	(Dispseg@y+1)^0,w,c
 31547  001C5A  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31548  001C5C  0EFF               	movlw	255
 31549  001C5E  243F               	addwf	??_Dispseg^0,w,c
 31550  001C60  6F9C               	movwf	Dispseg@y1& (0+255),b
 31551  001C62  0EFF               	movlw	255
 31552  001C64  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31553  001C66  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 31554                           
 31555                           ; BSR set to: 0
 31556                           ;Draw.c: 98: display_fillTriangle(x1, y1, x2, y2, x0, y0, color);
 31557  001C68  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 31558  001C6C  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 31559  001C70  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 31560  001C74  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 31561  001C78  C092  F02B         	movff	Dispseg@x2,display_fillTriangle@x1
 31562  001C7C  C093  F02C         	movff	Dispseg@x2+1,display_fillTriangle@x1+1
 31563  001C80  C098  F02D         	movff	Dispseg@y2,display_fillTriangle@y1
 31564  001C84  C099  F02E         	movff	Dispseg@y2+1,display_fillTriangle@y1+1
 31565  001C88  C094  F02F         	movff	Dispseg@x0,display_fillTriangle@x2
 31566  001C8C  C095  F030         	movff	Dispseg@x0+1,display_fillTriangle@x2+1
 31567  001C90  C096  F031         	movff	Dispseg@y0,display_fillTriangle@y2
 31568  001C94  C097  F032         	movff	Dispseg@y0+1,display_fillTriangle@y2+1
 31569  001C98  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31570  001C9C  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31571  001CA0  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31572  001CA4                     l20717:
 31573                           
 31574                           ;Draw.c: 99: };Draw.c: 102: if (pattern[num] & 0x08) {
 31575  001CA4  503B               	movf	Dispseg@num^0,w,c
 31576  001CA6  0F88               	addlw	low Dispseg@pattern
 31577  001CA8  6ED9               	movwf	fsr2l,c
 31578  001CAA  6ADA               	clrf	fsr2h,c
 31579  001CAC  0100               	movlb	0	; () banked
 31580  001CAE  A6DF               	btfss	indf2,3,c
 31581  001CB0  D095               	goto	l20739
 31582                           
 31583                           ; BSR set to: 0
 31584                           ;Draw.c: 103: x0 = x + 2*size;
 31585  001CB2  503C               	movf	Dispseg@size^0,w,c
 31586  001CB4  6E3F               	movwf	??_Dispseg^0,c
 31587  001CB6  6A40               	clrf	(??_Dispseg+1)^0,c
 31588  001CB8  90D8               	bcf	status,0,c
 31589  001CBA  363F               	rlcf	??_Dispseg^0,f,c
 31590  001CBC  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31591  001CBE  5037               	movf	Dispseg@x^0,w,c
 31592  001CC0  243F               	addwf	??_Dispseg^0,w,c
 31593  001CC2  6F94               	movwf	Dispseg@x0& (0+255),b
 31594  001CC4  5038               	movf	(Dispseg@x+1)^0,w,c
 31595  001CC6  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31596  001CC8  6F95               	movwf	(Dispseg@x0+1)& (0+255),b
 31597                           
 31598                           ; BSR set to: 0
 31599                           ;Draw.c: 104: y0 = y + 24*size;
 31600  001CCA  503C               	movf	Dispseg@size^0,w,c
 31601  001CCC  0D18               	mullw	24
 31602  001CCE  CFF3 F03F          	movff	prodl,??_Dispseg
 31603  001CD2  CFF4 F040          	movff	prodh,??_Dispseg+1
 31604  001CD6  5039               	movf	Dispseg@y^0,w,c
 31605  001CD8  243F               	addwf	??_Dispseg^0,w,c
 31606  001CDA  6F96               	movwf	Dispseg@y0& (0+255),b
 31607  001CDC  503A               	movf	(Dispseg@y+1)^0,w,c
 31608  001CDE  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31609  001CE0  6F97               	movwf	(Dispseg@y0+1)& (0+255),b
 31610                           
 31611                           ; BSR set to: 0
 31612                           ;Draw.c: 105: x1 = x + 12*size;
 31613  001CE2  503C               	movf	Dispseg@size^0,w,c
 31614  001CE4  0D0C               	mullw	12
 31615  001CE6  CFF3 F03F          	movff	prodl,??_Dispseg
 31616  001CEA  CFF4 F040          	movff	prodh,??_Dispseg+1
 31617  001CEE  5037               	movf	Dispseg@x^0,w,c
 31618  001CF0  243F               	addwf	??_Dispseg^0,w,c
 31619  001CF2  6F9A               	movwf	Dispseg@x1& (0+255),b
 31620  001CF4  5038               	movf	(Dispseg@x+1)^0,w,c
 31621  001CF6  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31622  001CF8  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 31623                           
 31624                           ; BSR set to: 0
 31625                           ;Draw.c: 106: y1 = y + 24*size;
 31626  001CFA  503C               	movf	Dispseg@size^0,w,c
 31627  001CFC  0D18               	mullw	24
 31628  001CFE  CFF3 F03F          	movff	prodl,??_Dispseg
 31629  001D02  CFF4 F040          	movff	prodh,??_Dispseg+1
 31630  001D06  5039               	movf	Dispseg@y^0,w,c
 31631  001D08  243F               	addwf	??_Dispseg^0,w,c
 31632  001D0A  6F9C               	movwf	Dispseg@y1& (0+255),b
 31633  001D0C  503A               	movf	(Dispseg@y+1)^0,w,c
 31634  001D0E  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31635  001D10  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 31636                           
 31637                           ; BSR set to: 0
 31638                           ;Draw.c: 107: x2 = x + 14*size;
 31639  001D12  503C               	movf	Dispseg@size^0,w,c
 31640  001D14  0D0E               	mullw	14
 31641  001D16  CFF3 F03F          	movff	prodl,??_Dispseg
 31642  001D1A  CFF4 F040          	movff	prodh,??_Dispseg+1
 31643  001D1E  5037               	movf	Dispseg@x^0,w,c
 31644  001D20  243F               	addwf	??_Dispseg^0,w,c
 31645  001D22  6F92               	movwf	Dispseg@x2& (0+255),b
 31646  001D24  5038               	movf	(Dispseg@x+1)^0,w,c
 31647  001D26  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31648  001D28  6F93               	movwf	(Dispseg@x2+1)& (0+255),b
 31649                           
 31650                           ; BSR set to: 0
 31651                           ;Draw.c: 108: y2 = y + 26*size;
 31652  001D2A  503C               	movf	Dispseg@size^0,w,c
 31653  001D2C  0D1A               	mullw	26
 31654  001D2E  CFF3 F03F          	movff	prodl,??_Dispseg
 31655  001D32  CFF4 F040          	movff	prodh,??_Dispseg+1
 31656  001D36  5039               	movf	Dispseg@y^0,w,c
 31657  001D38  243F               	addwf	??_Dispseg^0,w,c
 31658  001D3A  6F98               	movwf	Dispseg@y2& (0+255),b
 31659  001D3C  503A               	movf	(Dispseg@y+1)^0,w,c
 31660  001D3E  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31661  001D40  6F99               	movwf	(Dispseg@y2+1)& (0+255),b
 31662                           
 31663                           ; BSR set to: 0
 31664                           ;Draw.c: 109: display_fillTriangle(x1, y1, x0, y0, x2, y2, color);
 31665  001D42  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 31666  001D46  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 31667  001D4A  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 31668  001D4E  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 31669  001D52  C094  F02B         	movff	Dispseg@x0,display_fillTriangle@x1
 31670  001D56  C095  F02C         	movff	Dispseg@x0+1,display_fillTriangle@x1+1
 31671  001D5A  C096  F02D         	movff	Dispseg@y0,display_fillTriangle@y1
 31672  001D5E  C097  F02E         	movff	Dispseg@y0+1,display_fillTriangle@y1+1
 31673  001D62  C092  F02F         	movff	Dispseg@x2,display_fillTriangle@x2
 31674  001D66  C093  F030         	movff	Dispseg@x2+1,display_fillTriangle@x2+1
 31675  001D6A  C098  F031         	movff	Dispseg@y2,display_fillTriangle@y2
 31676  001D6E  C099  F032         	movff	Dispseg@y2+1,display_fillTriangle@y2+1
 31677  001D72  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31678  001D76  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31679  001D7A  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31680                           
 31681                           ;Draw.c: 110: x1 = x;
 31682  001D7E  C037  F09A         	movff	Dispseg@x,Dispseg@x1
 31683  001D82  C038  F09B         	movff	Dispseg@x+1,Dispseg@x1+1
 31684                           
 31685                           ;Draw.c: 111: y1 = y + 26*size;
 31686  001D86  503C               	movf	Dispseg@size^0,w,c
 31687  001D88  0D1A               	mullw	26
 31688  001D8A  CFF3 F03F          	movff	prodl,??_Dispseg
 31689  001D8E  CFF4 F040          	movff	prodh,??_Dispseg+1
 31690  001D92  5039               	movf	Dispseg@y^0,w,c
 31691  001D94  243F               	addwf	??_Dispseg^0,w,c
 31692  001D96  0100               	movlb	0	; () banked
 31693  001D98  6F9C               	movwf	Dispseg@y1& (0+255),b
 31694  001D9A  503A               	movf	(Dispseg@y+1)^0,w,c
 31695  001D9C  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31696  001D9E  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 31697                           
 31698                           ; BSR set to: 0
 31699                           ;Draw.c: 112: display_fillTriangle(x1, y1, x2, y2, x0, y0, color);
 31700  001DA0  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 31701  001DA4  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 31702  001DA8  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 31703  001DAC  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 31704  001DB0  C092  F02B         	movff	Dispseg@x2,display_fillTriangle@x1
 31705  001DB4  C093  F02C         	movff	Dispseg@x2+1,display_fillTriangle@x1+1
 31706  001DB8  C098  F02D         	movff	Dispseg@y2,display_fillTriangle@y1
 31707  001DBC  C099  F02E         	movff	Dispseg@y2+1,display_fillTriangle@y1+1
 31708  001DC0  C094  F02F         	movff	Dispseg@x0,display_fillTriangle@x2
 31709  001DC4  C095  F030         	movff	Dispseg@x0+1,display_fillTriangle@x2+1
 31710  001DC8  C096  F031         	movff	Dispseg@y0,display_fillTriangle@y2
 31711  001DCC  C097  F032         	movff	Dispseg@y0+1,display_fillTriangle@y2+1
 31712  001DD0  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31713  001DD4  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31714  001DD8  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31715  001DDC                     l20739:
 31716                           
 31717                           ;Draw.c: 113: };Draw.c: 116: if (pattern[num] & 0x10) {
 31718  001DDC  503B               	movf	Dispseg@num^0,w,c
 31719  001DDE  0F88               	addlw	low Dispseg@pattern
 31720  001DE0  6ED9               	movwf	fsr2l,c
 31721  001DE2  6ADA               	clrf	fsr2h,c
 31722  001DE4  0100               	movlb	0	; () banked
 31723  001DE6  A8DF               	btfss	indf2,4,c
 31724  001DE8  D0AC               	goto	l20757
 31725                           
 31726                           ; BSR set to: 0
 31727                           ;Draw.c: 117: x0 = x + 2*size;
 31728  001DEA  503C               	movf	Dispseg@size^0,w,c
 31729  001DEC  6E3F               	movwf	??_Dispseg^0,c
 31730  001DEE  6A40               	clrf	(??_Dispseg+1)^0,c
 31731  001DF0  90D8               	bcf	status,0,c
 31732  001DF2  363F               	rlcf	??_Dispseg^0,f,c
 31733  001DF4  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31734  001DF6  5037               	movf	Dispseg@x^0,w,c
 31735  001DF8  243F               	addwf	??_Dispseg^0,w,c
 31736  001DFA  6F94               	movwf	Dispseg@x0& (0+255),b
 31737  001DFC  5038               	movf	(Dispseg@x+1)^0,w,c
 31738  001DFE  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31739  001E00  6F95               	movwf	(Dispseg@x0+1)& (0+255),b
 31740                           
 31741                           ; BSR set to: 0
 31742                           ;Draw.c: 118: y0 = y + 14*size;
 31743  001E02  503C               	movf	Dispseg@size^0,w,c
 31744  001E04  0D0E               	mullw	14
 31745  001E06  CFF3 F03F          	movff	prodl,??_Dispseg
 31746  001E0A  CFF4 F040          	movff	prodh,??_Dispseg+1
 31747  001E0E  5039               	movf	Dispseg@y^0,w,c
 31748  001E10  243F               	addwf	??_Dispseg^0,w,c
 31749  001E12  6F96               	movwf	Dispseg@y0& (0+255),b
 31750  001E14  503A               	movf	(Dispseg@y+1)^0,w,c
 31751  001E16  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31752  001E18  6F97               	movwf	(Dispseg@y0+1)& (0+255),b
 31753                           
 31754                           ; BSR set to: 0
 31755                           ;Draw.c: 119: x1 = x + 3*size + (size-1);
 31756  001E1A  503C               	movf	Dispseg@size^0,w,c
 31757  001E1C  0D04               	mullw	4
 31758  001E1E  CFF3 F03F          	movff	prodl,??_Dispseg
 31759  001E22  CFF4 F040          	movff	prodh,??_Dispseg+1
 31760  001E26  5037               	movf	Dispseg@x^0,w,c
 31761  001E28  263F               	addwf	??_Dispseg^0,f,c
 31762  001E2A  5038               	movf	(Dispseg@x+1)^0,w,c
 31763  001E2C  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31764  001E2E  0EFF               	movlw	255
 31765  001E30  243F               	addwf	??_Dispseg^0,w,c
 31766  001E32  6F9A               	movwf	Dispseg@x1& (0+255),b
 31767  001E34  0EFF               	movlw	255
 31768  001E36  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31769  001E38  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 31770                           
 31771                           ; BSR set to: 0
 31772                           ;Draw.c: 120: y1 = y + 15*size;
 31773  001E3A  503C               	movf	Dispseg@size^0,w,c
 31774  001E3C  0D0F               	mullw	15
 31775  001E3E  CFF3 F03F          	movff	prodl,??_Dispseg
 31776  001E42  CFF4 F040          	movff	prodh,??_Dispseg+1
 31777  001E46  5039               	movf	Dispseg@y^0,w,c
 31778  001E48  243F               	addwf	??_Dispseg^0,w,c
 31779  001E4A  6F9C               	movwf	Dispseg@y1& (0+255),b
 31780  001E4C  503A               	movf	(Dispseg@y+1)^0,w,c
 31781  001E4E  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31782  001E50  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 31783                           
 31784                           ; BSR set to: 0
 31785                           ;Draw.c: 121: x2 = x + 2*size + (size-1);
 31786  001E52  503C               	movf	Dispseg@size^0,w,c
 31787  001E54  6E3F               	movwf	??_Dispseg^0,c
 31788  001E56  6A40               	clrf	(??_Dispseg+1)^0,c
 31789  001E58  90D8               	bcf	status,0,c
 31790  001E5A  363F               	rlcf	??_Dispseg^0,f,c
 31791  001E5C  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31792  001E5E  503C               	movf	Dispseg@size^0,w,c
 31793  001E60  6E41               	movwf	(??_Dispseg+2)^0,c
 31794  001E62  6A42               	clrf	(??_Dispseg+3)^0,c
 31795  001E64  503F               	movf	??_Dispseg^0,w,c
 31796  001E66  2641               	addwf	(??_Dispseg+2)^0,f,c
 31797  001E68  5040               	movf	(??_Dispseg+1)^0,w,c
 31798  001E6A  2242               	addwfc	(??_Dispseg+3)^0,f,c
 31799  001E6C  5037               	movf	Dispseg@x^0,w,c
 31800  001E6E  2641               	addwf	(??_Dispseg+2)^0,f,c
 31801  001E70  5038               	movf	(Dispseg@x+1)^0,w,c
 31802  001E72  2242               	addwfc	(??_Dispseg+3)^0,f,c
 31803  001E74  0EFF               	movlw	255
 31804  001E76  2441               	addwf	(??_Dispseg+2)^0,w,c
 31805  001E78  6F92               	movwf	Dispseg@x2& (0+255),b
 31806  001E7A  0EFF               	movlw	255
 31807  001E7C  2042               	addwfc	(??_Dispseg+3)^0,w,c
 31808  001E7E  6F93               	movwf	(Dispseg@x2+1)& (0+255),b
 31809                           
 31810                           ;Draw.c: 122: y2 = y + 22*size + (size-1);
 31811  001E80  503C               	movf	Dispseg@size^0,w,c
 31812  001E82  0D17               	mullw	23
 31813  001E84  CFF3 F03F          	movff	prodl,??_Dispseg
 31814  001E88  CFF4 F040          	movff	prodh,??_Dispseg+1
 31815  001E8C  5039               	movf	Dispseg@y^0,w,c
 31816  001E8E  263F               	addwf	??_Dispseg^0,f,c
 31817  001E90  503A               	movf	(Dispseg@y+1)^0,w,c
 31818  001E92  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31819  001E94  0EFF               	movlw	255
 31820  001E96  243F               	addwf	??_Dispseg^0,w,c
 31821  001E98  6F98               	movwf	Dispseg@y2& (0+255),b
 31822  001E9A  0EFF               	movlw	255
 31823  001E9C  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31824  001E9E  6F99               	movwf	(Dispseg@y2+1)& (0+255),b
 31825                           
 31826                           ; BSR set to: 0
 31827                           ;Draw.c: 123: display_fillTriangle(x1, y1, x0, y0, x2, y2, color);
 31828  001EA0  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 31829  001EA4  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 31830  001EA8  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 31831  001EAC  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 31832  001EB0  C094  F02B         	movff	Dispseg@x0,display_fillTriangle@x1
 31833  001EB4  C095  F02C         	movff	Dispseg@x0+1,display_fillTriangle@x1+1
 31834  001EB8  C096  F02D         	movff	Dispseg@y0,display_fillTriangle@y1
 31835  001EBC  C097  F02E         	movff	Dispseg@y0+1,display_fillTriangle@y1+1
 31836  001EC0  C092  F02F         	movff	Dispseg@x2,display_fillTriangle@x2
 31837  001EC4  C093  F030         	movff	Dispseg@x2+1,display_fillTriangle@x2+1
 31838  001EC8  C098  F031         	movff	Dispseg@y2,display_fillTriangle@y2
 31839  001ECC  C099  F032         	movff	Dispseg@y2+1,display_fillTriangle@y2+1
 31840  001ED0  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31841  001ED4  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31842  001ED8  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31843                           
 31844                           ;Draw.c: 124: x1 = x;
 31845  001EDC  C037  F09A         	movff	Dispseg@x,Dispseg@x1
 31846  001EE0  C038  F09B         	movff	Dispseg@x+1,Dispseg@x1+1
 31847                           
 31848                           ;Draw.c: 125: y1 = y + 24*size + (size-1);
 31849  001EE4  503C               	movf	Dispseg@size^0,w,c
 31850  001EE6  0D19               	mullw	25
 31851  001EE8  CFF3 F03F          	movff	prodl,??_Dispseg
 31852  001EEC  CFF4 F040          	movff	prodh,??_Dispseg+1
 31853  001EF0  5039               	movf	Dispseg@y^0,w,c
 31854  001EF2  263F               	addwf	??_Dispseg^0,f,c
 31855  001EF4  503A               	movf	(Dispseg@y+1)^0,w,c
 31856  001EF6  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31857  001EF8  0EFF               	movlw	255
 31858  001EFA  243F               	addwf	??_Dispseg^0,w,c
 31859  001EFC  0100               	movlb	0	; () banked
 31860  001EFE  6F9C               	movwf	Dispseg@y1& (0+255),b
 31861  001F00  0EFF               	movlw	255
 31862  001F02  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31863  001F04  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 31864                           
 31865                           ;Draw.c: 126: display_fillTriangle(x1, y1, x2, y2, x0, y0, color);
 31866  001F06  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 31867  001F0A  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 31868  001F0E  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 31869  001F12  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 31870  001F16  C092  F02B         	movff	Dispseg@x2,display_fillTriangle@x1
 31871  001F1A  C093  F02C         	movff	Dispseg@x2+1,display_fillTriangle@x1+1
 31872  001F1E  C098  F02D         	movff	Dispseg@y2,display_fillTriangle@y1
 31873  001F22  C099  F02E         	movff	Dispseg@y2+1,display_fillTriangle@y1+1
 31874  001F26  C094  F02F         	movff	Dispseg@x0,display_fillTriangle@x2
 31875  001F2A  C095  F030         	movff	Dispseg@x0+1,display_fillTriangle@x2+1
 31876  001F2E  C096  F031         	movff	Dispseg@y0,display_fillTriangle@y2
 31877  001F32  C097  F032         	movff	Dispseg@y0+1,display_fillTriangle@y2+1
 31878  001F36  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 31879  001F3A  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 31880  001F3E  EC8C  F031         	call	_display_fillTriangle	;wreg free
 31881  001F42                     l20757:
 31882                           
 31883                           ;Draw.c: 127: };Draw.c: 130: if (pattern[num] & 0x20) {
 31884  001F42  503B               	movf	Dispseg@num^0,w,c
 31885  001F44  0F88               	addlw	low Dispseg@pattern
 31886  001F46  6ED9               	movwf	fsr2l,c
 31887  001F48  6ADA               	clrf	fsr2h,c
 31888  001F4A  0100               	movlb	0	; () banked
 31889  001F4C  AADF               	btfss	indf2,5,c
 31890  001F4E  D0AC               	goto	l20773
 31891                           
 31892                           ; BSR set to: 0
 31893                           ;Draw.c: 131: x0 = x + 4*size;
 31894  001F50  503C               	movf	Dispseg@size^0,w,c
 31895  001F52  6E3F               	movwf	??_Dispseg^0,c
 31896  001F54  6A40               	clrf	(??_Dispseg+1)^0,c
 31897  001F56  90D8               	bcf	status,0,c
 31898  001F58  363F               	rlcf	??_Dispseg^0,f,c
 31899  001F5A  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31900  001F5C  90D8               	bcf	status,0,c
 31901  001F5E  363F               	rlcf	??_Dispseg^0,f,c
 31902  001F60  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31903  001F62  5037               	movf	Dispseg@x^0,w,c
 31904  001F64  243F               	addwf	??_Dispseg^0,w,c
 31905  001F66  6F94               	movwf	Dispseg@x0& (0+255),b
 31906  001F68  5038               	movf	(Dispseg@x+1)^0,w,c
 31907  001F6A  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31908  001F6C  6F95               	movwf	(Dispseg@x0+1)& (0+255),b
 31909                           
 31910                           ;Draw.c: 132: y0 = y + 1*size - (size-1);
 31911  001F6E  0E01               	movlw	1
 31912  001F70  2439               	addwf	Dispseg@y^0,w,c
 31913  001F72  6F96               	movwf	Dispseg@y0& (0+255),b
 31914  001F74  0E00               	movlw	0
 31915  001F76  203A               	addwfc	(Dispseg@y+1)^0,w,c
 31916  001F78  6F97               	movwf	(Dispseg@y0+1)& (0+255),b
 31917                           
 31918                           ; BSR set to: 0
 31919                           ;Draw.c: 133: x1 = x + 6*size;
 31920  001F7A  503C               	movf	Dispseg@size^0,w,c
 31921  001F7C  0D06               	mullw	6
 31922  001F7E  CFF3 F03F          	movff	prodl,??_Dispseg
 31923  001F82  CFF4 F040          	movff	prodh,??_Dispseg+1
 31924  001F86  5037               	movf	Dispseg@x^0,w,c
 31925  001F88  243F               	addwf	??_Dispseg^0,w,c
 31926  001F8A  6F9A               	movwf	Dispseg@x1& (0+255),b
 31927  001F8C  5038               	movf	(Dispseg@x+1)^0,w,c
 31928  001F8E  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31929  001F90  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 31930                           
 31931                           ; BSR set to: 0
 31932                           ;Draw.c: 134: y1 = y + 3*size - (size-1);
 31933  001F92  503C               	movf	Dispseg@size^0,w,c
 31934  001F94  0D02               	mullw	2
 31935  001F96  CFF3 F03F          	movff	prodl,??_Dispseg
 31936  001F9A  CFF4 F040          	movff	prodh,??_Dispseg+1
 31937  001F9E  5039               	movf	Dispseg@y^0,w,c
 31938  001FA0  263F               	addwf	??_Dispseg^0,f,c
 31939  001FA2  503A               	movf	(Dispseg@y+1)^0,w,c
 31940  001FA4  2240               	addwfc	(??_Dispseg+1)^0,f,c
 31941  001FA6  0E01               	movlw	1
 31942  001FA8  243F               	addwf	??_Dispseg^0,w,c
 31943  001FAA  6F9C               	movwf	Dispseg@y1& (0+255),b
 31944  001FAC  0E00               	movlw	0
 31945  001FAE  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31946  001FB0  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 31947                           
 31948                           ;Draw.c: 135: x2 = x + 4*size + (size-1);
 31949  001FB2  503C               	movf	Dispseg@size^0,w,c
 31950  001FB4  6E3F               	movwf	??_Dispseg^0,c
 31951  001FB6  6A40               	clrf	(??_Dispseg+1)^0,c
 31952  001FB8  90D8               	bcf	status,0,c
 31953  001FBA  363F               	rlcf	??_Dispseg^0,f,c
 31954  001FBC  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31955  001FBE  90D8               	bcf	status,0,c
 31956  001FC0  363F               	rlcf	??_Dispseg^0,f,c
 31957  001FC2  3640               	rlcf	(??_Dispseg+1)^0,f,c
 31958  001FC4  503C               	movf	Dispseg@size^0,w,c
 31959  001FC6  6E41               	movwf	(??_Dispseg+2)^0,c
 31960  001FC8  6A42               	clrf	(??_Dispseg+3)^0,c
 31961  001FCA  503F               	movf	??_Dispseg^0,w,c
 31962  001FCC  2641               	addwf	(??_Dispseg+2)^0,f,c
 31963  001FCE  5040               	movf	(??_Dispseg+1)^0,w,c
 31964  001FD0  2242               	addwfc	(??_Dispseg+3)^0,f,c
 31965  001FD2  5037               	movf	Dispseg@x^0,w,c
 31966  001FD4  2641               	addwf	(??_Dispseg+2)^0,f,c
 31967  001FD6  5038               	movf	(Dispseg@x+1)^0,w,c
 31968  001FD8  2242               	addwfc	(??_Dispseg+3)^0,f,c
 31969  001FDA  0EFF               	movlw	255
 31970  001FDC  2441               	addwf	(??_Dispseg+2)^0,w,c
 31971  001FDE  6F92               	movwf	Dispseg@x2& (0+255),b
 31972  001FE0  0EFF               	movlw	255
 31973  001FE2  2042               	addwfc	(??_Dispseg+3)^0,w,c
 31974  001FE4  6F93               	movwf	(Dispseg@x2+1)& (0+255),b
 31975                           
 31976                           ; BSR set to: 0
 31977                           ;Draw.c: 136: y2 = y + 11*size;
 31978  001FE6  503C               	movf	Dispseg@size^0,w,c
 31979  001FE8  0D0B               	mullw	11
 31980  001FEA  CFF3 F03F          	movff	prodl,??_Dispseg
 31981  001FEE  CFF4 F040          	movff	prodh,??_Dispseg+1
 31982  001FF2  5039               	movf	Dispseg@y^0,w,c
 31983  001FF4  243F               	addwf	??_Dispseg^0,w,c
 31984  001FF6  6F98               	movwf	Dispseg@y2& (0+255),b
 31985  001FF8  503A               	movf	(Dispseg@y+1)^0,w,c
 31986  001FFA  2040               	addwfc	(??_Dispseg+1)^0,w,c
 31987  001FFC  6F99               	movwf	(Dispseg@y2+1)& (0+255),b
 31988                           
 31989                           ; BSR set to: 0
 31990                           ;Draw.c: 137: display_fillTriangle(x1, y1, x0, y0, x2, y2, color);
 31991  001FFE  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 31992  002002  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 31993  002006  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 31994  00200A  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 31995  00200E  C094  F02B         	movff	Dispseg@x0,display_fillTriangle@x1
 31996  002012  C095  F02C         	movff	Dispseg@x0+1,display_fillTriangle@x1+1
 31997  002016  C096  F02D         	movff	Dispseg@y0,display_fillTriangle@y1
 31998  00201A  C097  F02E         	movff	Dispseg@y0+1,display_fillTriangle@y1+1
 31999  00201E  C092  F02F         	movff	Dispseg@x2,display_fillTriangle@x2
 32000  002022  C093  F030         	movff	Dispseg@x2+1,display_fillTriangle@x2+1
 32001  002026  C098  F031         	movff	Dispseg@y2,display_fillTriangle@y2
 32002  00202A  C099  F032         	movff	Dispseg@y2+1,display_fillTriangle@y2+1
 32003  00202E  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 32004  002032  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 32005  002036  EC8C  F031         	call	_display_fillTriangle	;wreg free
 32006                           
 32007                           ;Draw.c: 138: x1 = x + 2*size;
 32008  00203A  503C               	movf	Dispseg@size^0,w,c
 32009  00203C  6E3F               	movwf	??_Dispseg^0,c
 32010  00203E  6A40               	clrf	(??_Dispseg+1)^0,c
 32011  002040  90D8               	bcf	status,0,c
 32012  002042  363F               	rlcf	??_Dispseg^0,f,c
 32013  002044  3640               	rlcf	(??_Dispseg+1)^0,f,c
 32014  002046  5037               	movf	Dispseg@x^0,w,c
 32015  002048  243F               	addwf	??_Dispseg^0,w,c
 32016  00204A  0100               	movlb	0	; () banked
 32017  00204C  6F9A               	movwf	Dispseg@x1& (0+255),b
 32018  00204E  5038               	movf	(Dispseg@x+1)^0,w,c
 32019  002050  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32020  002052  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 32021                           
 32022                           ; BSR set to: 0
 32023                           ;Draw.c: 139: y1 = y + 12*size;
 32024  002054  503C               	movf	Dispseg@size^0,w,c
 32025  002056  0D0C               	mullw	12
 32026  002058  CFF3 F03F          	movff	prodl,??_Dispseg
 32027  00205C  CFF4 F040          	movff	prodh,??_Dispseg+1
 32028  002060  5039               	movf	Dispseg@y^0,w,c
 32029  002062  243F               	addwf	??_Dispseg^0,w,c
 32030  002064  6F9C               	movwf	Dispseg@y1& (0+255),b
 32031  002066  503A               	movf	(Dispseg@y+1)^0,w,c
 32032  002068  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32033  00206A  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 32034                           
 32035                           ;Draw.c: 140: display_fillTriangle(x1, y1, x2, y2, x0, y0, color);
 32036  00206C  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 32037  002070  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 32038  002074  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 32039  002078  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 32040  00207C  C092  F02B         	movff	Dispseg@x2,display_fillTriangle@x1
 32041  002080  C093  F02C         	movff	Dispseg@x2+1,display_fillTriangle@x1+1
 32042  002084  C098  F02D         	movff	Dispseg@y2,display_fillTriangle@y1
 32043  002088  C099  F02E         	movff	Dispseg@y2+1,display_fillTriangle@y1+1
 32044  00208C  C094  F02F         	movff	Dispseg@x0,display_fillTriangle@x2
 32045  002090  C095  F030         	movff	Dispseg@x0+1,display_fillTriangle@x2+1
 32046  002094  C096  F031         	movff	Dispseg@y0,display_fillTriangle@y2
 32047  002098  C097  F032         	movff	Dispseg@y0+1,display_fillTriangle@y2+1
 32048  00209C  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 32049  0020A0  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 32050  0020A4  EC8C  F031         	call	_display_fillTriangle	;wreg free
 32051  0020A8                     l20773:
 32052                           
 32053                           ;Draw.c: 141: };Draw.c: 144: if (pattern[num] & 0x40) {
 32054  0020A8  503B               	movf	Dispseg@num^0,w,c
 32055  0020AA  0F88               	addlw	low Dispseg@pattern
 32056  0020AC  6ED9               	movwf	fsr2l,c
 32057  0020AE  6ADA               	clrf	fsr2h,c
 32058  0020B0  0100               	movlb	0	; () banked
 32059  0020B2  ACDF               	btfss	indf2,6,c
 32060  0020B4  0012               	return	
 32061                           
 32062                           ; BSR set to: 0
 32063                           ;Draw.c: 145: x0 = x + 3*size;
 32064  0020B6  503C               	movf	Dispseg@size^0,w,c
 32065  0020B8  0D03               	mullw	3
 32066  0020BA  CFF3 F03F          	movff	prodl,??_Dispseg
 32067  0020BE  CFF4 F040          	movff	prodh,??_Dispseg+1
 32068  0020C2  5037               	movf	Dispseg@x^0,w,c
 32069  0020C4  243F               	addwf	??_Dispseg^0,w,c
 32070  0020C6  6F94               	movwf	Dispseg@x0& (0+255),b
 32071  0020C8  5038               	movf	(Dispseg@x+1)^0,w,c
 32072  0020CA  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32073  0020CC  6F95               	movwf	(Dispseg@x0+1)& (0+255),b
 32074                           
 32075                           ;Draw.c: 146: y0 = y + 13*size;
 32076  0020CE  503C               	movf	Dispseg@size^0,w,c
 32077  0020D0  0D0D               	mullw	13
 32078  0020D2  CFF3 F03F          	movff	prodl,??_Dispseg
 32079  0020D6  CFF4 F040          	movff	prodh,??_Dispseg+1
 32080  0020DA  5039               	movf	Dispseg@y^0,w,c
 32081  0020DC  243F               	addwf	??_Dispseg^0,w,c
 32082  0020DE  6F96               	movwf	Dispseg@y0& (0+255),b
 32083  0020E0  503A               	movf	(Dispseg@y+1)^0,w,c
 32084  0020E2  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32085  0020E4  6F97               	movwf	(Dispseg@y0+1)& (0+255),b
 32086                           
 32087                           ;Draw.c: 147: x1 = x + 5*size;
 32088  0020E6  503C               	movf	Dispseg@size^0,w,c
 32089  0020E8  0D05               	mullw	5
 32090  0020EA  CFF3 F03F          	movff	prodl,??_Dispseg
 32091  0020EE  CFF4 F040          	movff	prodh,??_Dispseg+1
 32092  0020F2  5037               	movf	Dispseg@x^0,w,c
 32093  0020F4  243F               	addwf	??_Dispseg^0,w,c
 32094  0020F6  6F9A               	movwf	Dispseg@x1& (0+255),b
 32095  0020F8  5038               	movf	(Dispseg@x+1)^0,w,c
 32096  0020FA  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32097  0020FC  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 32098                           
 32099                           ;Draw.c: 148: y1 = y + 12*size;
 32100  0020FE  503C               	movf	Dispseg@size^0,w,c
 32101  002100  0D0C               	mullw	12
 32102  002102  CFF3 F03F          	movff	prodl,??_Dispseg
 32103  002106  CFF4 F040          	movff	prodh,??_Dispseg+1
 32104  00210A  5039               	movf	Dispseg@y^0,w,c
 32105  00210C  243F               	addwf	??_Dispseg^0,w,c
 32106  00210E  6F9C               	movwf	Dispseg@y1& (0+255),b
 32107  002110  503A               	movf	(Dispseg@y+1)^0,w,c
 32108  002112  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32109  002114  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 32110                           
 32111                           ;Draw.c: 149: x2 = x + 14*size;
 32112  002116  503C               	movf	Dispseg@size^0,w,c
 32113  002118  0D0E               	mullw	14
 32114  00211A  CFF3 F03F          	movff	prodl,??_Dispseg
 32115  00211E  CFF4 F040          	movff	prodh,??_Dispseg+1
 32116  002122  5037               	movf	Dispseg@x^0,w,c
 32117  002124  243F               	addwf	??_Dispseg^0,w,c
 32118  002126  6F92               	movwf	Dispseg@x2& (0+255),b
 32119  002128  5038               	movf	(Dispseg@x+1)^0,w,c
 32120  00212A  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32121  00212C  6F93               	movwf	(Dispseg@x2+1)& (0+255),b
 32122                           
 32123                           ;Draw.c: 150: y2 = y + 12*size;
 32124  00212E  503C               	movf	Dispseg@size^0,w,c
 32125  002130  0D0C               	mullw	12
 32126  002132  CFF3 F03F          	movff	prodl,??_Dispseg
 32127  002136  CFF4 F040          	movff	prodh,??_Dispseg+1
 32128  00213A  5039               	movf	Dispseg@y^0,w,c
 32129  00213C  243F               	addwf	??_Dispseg^0,w,c
 32130  00213E  6F98               	movwf	Dispseg@y2& (0+255),b
 32131  002140  503A               	movf	(Dispseg@y+1)^0,w,c
 32132  002142  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32133  002144  6F99               	movwf	(Dispseg@y2+1)& (0+255),b
 32134                           
 32135                           ; BSR set to: 0
 32136                           ;Draw.c: 151: display_fillTriangle(x1, y1, x0, y0, x2, y2, color);
 32137  002146  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 32138  00214A  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 32139  00214E  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 32140  002152  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 32141  002156  C094  F02B         	movff	Dispseg@x0,display_fillTriangle@x1
 32142  00215A  C095  F02C         	movff	Dispseg@x0+1,display_fillTriangle@x1+1
 32143  00215E  C096  F02D         	movff	Dispseg@y0,display_fillTriangle@y1
 32144  002162  C097  F02E         	movff	Dispseg@y0+1,display_fillTriangle@y1+1
 32145  002166  C092  F02F         	movff	Dispseg@x2,display_fillTriangle@x2
 32146  00216A  C093  F030         	movff	Dispseg@x2+1,display_fillTriangle@x2+1
 32147  00216E  C098  F031         	movff	Dispseg@y2,display_fillTriangle@y2
 32148  002172  C099  F032         	movff	Dispseg@y2+1,display_fillTriangle@y2+1
 32149  002176  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 32150  00217A  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 32151  00217E  EC8C  F031         	call	_display_fillTriangle	;wreg free
 32152                           
 32153                           ;Draw.c: 152: x1 = x + 4*size;
 32154  002182  503C               	movf	Dispseg@size^0,w,c
 32155  002184  6E3F               	movwf	??_Dispseg^0,c
 32156  002186  6A40               	clrf	(??_Dispseg+1)^0,c
 32157  002188  90D8               	bcf	status,0,c
 32158  00218A  363F               	rlcf	??_Dispseg^0,f,c
 32159  00218C  3640               	rlcf	(??_Dispseg+1)^0,f,c
 32160  00218E  90D8               	bcf	status,0,c
 32161  002190  363F               	rlcf	??_Dispseg^0,f,c
 32162  002192  3640               	rlcf	(??_Dispseg+1)^0,f,c
 32163  002194  5037               	movf	Dispseg@x^0,w,c
 32164  002196  243F               	addwf	??_Dispseg^0,w,c
 32165  002198  0100               	movlb	0	; () banked
 32166  00219A  6F9A               	movwf	Dispseg@x1& (0+255),b
 32167  00219C  5038               	movf	(Dispseg@x+1)^0,w,c
 32168  00219E  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32169  0021A0  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 32170                           
 32171                           ; BSR set to: 0
 32172                           ;Draw.c: 153: y1 = y + 14*size;
 32173  0021A2  503C               	movf	Dispseg@size^0,w,c
 32174  0021A4  0D0E               	mullw	14
 32175  0021A6  CFF3 F03F          	movff	prodl,??_Dispseg
 32176  0021AA  CFF4 F040          	movff	prodh,??_Dispseg+1
 32177  0021AE  5039               	movf	Dispseg@y^0,w,c
 32178  0021B0  243F               	addwf	??_Dispseg^0,w,c
 32179  0021B2  6F9C               	movwf	Dispseg@y1& (0+255),b
 32180  0021B4  503A               	movf	(Dispseg@y+1)^0,w,c
 32181  0021B6  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32182  0021B8  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 32183                           
 32184                           ; BSR set to: 0
 32185                           ;Draw.c: 154: display_fillTriangle(x1, y1, x2, y2, x0, y0, color);
 32186  0021BA  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 32187  0021BE  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 32188  0021C2  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 32189  0021C6  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 32190  0021CA  C092  F02B         	movff	Dispseg@x2,display_fillTriangle@x1
 32191  0021CE  C093  F02C         	movff	Dispseg@x2+1,display_fillTriangle@x1+1
 32192  0021D2  C098  F02D         	movff	Dispseg@y2,display_fillTriangle@y1
 32193  0021D6  C099  F02E         	movff	Dispseg@y2+1,display_fillTriangle@y1+1
 32194  0021DA  C094  F02F         	movff	Dispseg@x0,display_fillTriangle@x2
 32195  0021DE  C095  F030         	movff	Dispseg@x0+1,display_fillTriangle@x2+1
 32196  0021E2  C096  F031         	movff	Dispseg@y0,display_fillTriangle@y2
 32197  0021E6  C097  F032         	movff	Dispseg@y0+1,display_fillTriangle@y2+1
 32198  0021EA  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 32199  0021EE  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 32200  0021F2  EC8C  F031         	call	_display_fillTriangle	;wreg free
 32201                           
 32202                           ;Draw.c: 155: x0 = x + 13*size;
 32203  0021F6  503C               	movf	Dispseg@size^0,w,c
 32204  0021F8  0D0D               	mullw	13
 32205  0021FA  CFF3 F03F          	movff	prodl,??_Dispseg
 32206  0021FE  CFF4 F040          	movff	prodh,??_Dispseg+1
 32207  002202  5037               	movf	Dispseg@x^0,w,c
 32208  002204  243F               	addwf	??_Dispseg^0,w,c
 32209  002206  0100               	movlb	0	; () banked
 32210  002208  6F94               	movwf	Dispseg@x0& (0+255),b
 32211  00220A  5038               	movf	(Dispseg@x+1)^0,w,c
 32212  00220C  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32213  00220E  6F95               	movwf	(Dispseg@x0+1)& (0+255),b
 32214                           
 32215                           ; BSR set to: 0
 32216                           ;Draw.c: 156: y0 = y + 14*size;
 32217  002210  503C               	movf	Dispseg@size^0,w,c
 32218  002212  0D0E               	mullw	14
 32219  002214  CFF3 F03F          	movff	prodl,??_Dispseg
 32220  002218  CFF4 F040          	movff	prodh,??_Dispseg+1
 32221  00221C  5039               	movf	Dispseg@y^0,w,c
 32222  00221E  243F               	addwf	??_Dispseg^0,w,c
 32223  002220  6F96               	movwf	Dispseg@y0& (0+255),b
 32224  002222  503A               	movf	(Dispseg@y+1)^0,w,c
 32225  002224  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32226  002226  6F97               	movwf	(Dispseg@y0+1)& (0+255),b
 32227                           
 32228                           ; BSR set to: 0
 32229                           ;Draw.c: 157: display_fillTriangle(x1, y1, x2, y2, x0, y0, color);
 32230  002228  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 32231  00222C  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 32232  002230  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 32233  002234  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 32234  002238  C092  F02B         	movff	Dispseg@x2,display_fillTriangle@x1
 32235  00223C  C093  F02C         	movff	Dispseg@x2+1,display_fillTriangle@x1+1
 32236  002240  C098  F02D         	movff	Dispseg@y2,display_fillTriangle@y1
 32237  002244  C099  F02E         	movff	Dispseg@y2+1,display_fillTriangle@y1+1
 32238  002248  C094  F02F         	movff	Dispseg@x0,display_fillTriangle@x2
 32239  00224C  C095  F030         	movff	Dispseg@x0+1,display_fillTriangle@x2+1
 32240  002250  C096  F031         	movff	Dispseg@y0,display_fillTriangle@y2
 32241  002254  C097  F032         	movff	Dispseg@y0+1,display_fillTriangle@y2+1
 32242  002258  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 32243  00225C  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 32244  002260  EC8C  F031         	call	_display_fillTriangle	;wreg free
 32245                           
 32246                           ;Draw.c: 158: x1 = x + 15*size;
 32247  002264  503C               	movf	Dispseg@size^0,w,c
 32248  002266  0D0F               	mullw	15
 32249  002268  CFF3 F03F          	movff	prodl,??_Dispseg
 32250  00226C  CFF4 F040          	movff	prodh,??_Dispseg+1
 32251  002270  5037               	movf	Dispseg@x^0,w,c
 32252  002272  243F               	addwf	??_Dispseg^0,w,c
 32253  002274  0100               	movlb	0	; () banked
 32254  002276  6F9A               	movwf	Dispseg@x1& (0+255),b
 32255  002278  5038               	movf	(Dispseg@x+1)^0,w,c
 32256  00227A  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32257  00227C  6F9B               	movwf	(Dispseg@x1+1)& (0+255),b
 32258                           
 32259                           ; BSR set to: 0
 32260                           ;Draw.c: 159: y1 = y + 13*size;
 32261  00227E  503C               	movf	Dispseg@size^0,w,c
 32262  002280  0D0D               	mullw	13
 32263  002282  CFF3 F03F          	movff	prodl,??_Dispseg
 32264  002286  CFF4 F040          	movff	prodh,??_Dispseg+1
 32265  00228A  5039               	movf	Dispseg@y^0,w,c
 32266  00228C  243F               	addwf	??_Dispseg^0,w,c
 32267  00228E  6F9C               	movwf	Dispseg@y1& (0+255),b
 32268  002290  503A               	movf	(Dispseg@y+1)^0,w,c
 32269  002292  2040               	addwfc	(??_Dispseg+1)^0,w,c
 32270  002294  6F9D               	movwf	(Dispseg@y1+1)& (0+255),b
 32271                           
 32272                           ; BSR set to: 0
 32273                           ;Draw.c: 160: display_fillTriangle(x1, y1, x2, y2, x0, y0, color);
 32274  002296  C09A  F027         	movff	Dispseg@x1,display_fillTriangle@x0
 32275  00229A  C09B  F028         	movff	Dispseg@x1+1,display_fillTriangle@x0+1
 32276  00229E  C09C  F029         	movff	Dispseg@y1,display_fillTriangle@y0
 32277  0022A2  C09D  F02A         	movff	Dispseg@y1+1,display_fillTriangle@y0+1
 32278  0022A6  C092  F02B         	movff	Dispseg@x2,display_fillTriangle@x1
 32279  0022AA  C093  F02C         	movff	Dispseg@x2+1,display_fillTriangle@x1+1
 32280  0022AE  C098  F02D         	movff	Dispseg@y2,display_fillTriangle@y1
 32281  0022B2  C099  F02E         	movff	Dispseg@y2+1,display_fillTriangle@y1+1
 32282  0022B6  C094  F02F         	movff	Dispseg@x0,display_fillTriangle@x2
 32283  0022BA  C095  F030         	movff	Dispseg@x0+1,display_fillTriangle@x2+1
 32284  0022BE  C096  F031         	movff	Dispseg@y0,display_fillTriangle@y2
 32285  0022C2  C097  F032         	movff	Dispseg@y0+1,display_fillTriangle@y2+1
 32286  0022C6  C03D  F033         	movff	Dispseg@color,display_fillTriangle@color
 32287  0022CA  C03E  F034         	movff	Dispseg@color+1,display_fillTriangle@color+1
 32288  0022CE  EC8C  F031         	call	_display_fillTriangle	;wreg free
 32289  0022D2  0012               	return		;funcret
 32290  0022D4                     __end_of_Dispseg:
 32291                           	callstack 0
 32292                           
 32293 ;; *************** function _drawCalendar *****************
 32294 ;; Defined at:
 32295 ;;		line 842 in file "Draw.c"
 32296 ;; Parameters:    Size  Location     Type
 32297 ;;  mode            1    wreg     unsigned char 
 32298 ;; Auto vars:     Size  Location     Type
 32299 ;;  mode            1   85[BANK0 ] unsigned char 
 32300 ;; Return value:  Size  Location     Type
 32301 ;;                  1    wreg      void 
 32302 ;; Registers used:
 32303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32304 ;; Tracked objects:
 32305 ;;		On entry : 3F/2
 32306 ;;		On exit  : 3F/0
 32307 ;;		Unchanged: 0/0
 32308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32310 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32312 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32313 ;;Total ram usage:        5 bytes
 32314 ;; Hardware stack levels used:    1
 32315 ;; Hardware stack levels required when called:   17
 32316 ;; This function calls:
 32317 ;;		_Bcd2Hex
 32318 ;;		_Draw3month
 32319 ;;		_DrawBigCalendar
 32320 ;; This function is called by:
 32321 ;;		_NormalProc
 32322 ;; This function uses a non-reentrant model
 32323 ;;
 32324                           
 32325                           	psect	text112
 32326  00D54A                     __ptext112:
 32327                           	callstack 0
 32328  00D54A                     _drawCalendar:
 32329                           	callstack 12
 32330                           
 32331                           ;incstack = 0
 32332                           ;drawCalendar@mode stored from wreg
 32333  00D54A  0100               	movlb	0	; () banked
 32334  00D54C  6FB5               	movwf	drawCalendar@mode& (0+255),b
 32335                           
 32336                           ;Draw.c: 843: switch (mode) {
 32337  00D54E  D03E               	goto	l23837
 32338  00D550                     l23829:
 32339                           
 32340                           ; BSR set to: 0
 32341                           ;Draw.c: 845: DrawBigCalendar(Bcd2Hex(DateTime[6]), Bcd2Hex(DateTime[5]), RThisMonthCale
      +                          ndar[mode].x, RThisMonthCalendar[mode].y);
 32342  00D550  0102               	movlb	2	; () banked
 32343  00D552  51FB               	movf	(_DateTime+5)& (0+255),w,b
 32344  00D554  EC84  F07A         	call	_Bcd2Hex
 32345  00D558  0100               	movlb	0	; () banked
 32346  00D55A  6FB1               	movwf	_drawCalendar$8867& (0+255),b
 32347                           
 32348                           ;Draw.c: 845: DrawBigCalendar(Bcd2Hex(DateTime[6]), Bcd2Hex(DateTime[5]), RThisMonthCale
      +                          ndar[mode].x, RThisMonthCalendar[mode].y);
 32349  00D55C  0102               	movlb	2	; () banked
 32350  00D55E  51FC               	movf	(_DateTime+6)& (0+255),w,b
 32351  00D560  EC84  F07A         	call	_Bcd2Hex
 32352  00D564  0100               	movlb	0	; () banked
 32353  00D566  6FB2               	movwf	_drawCalendar$8868& (0+255),b
 32354                           
 32355                           ; BSR set to: 0
 32356                           ;Draw.c: 845: DrawBigCalendar(Bcd2Hex(DateTime[6]), Bcd2Hex(DateTime[5]), RThisMonthCale
      +                          ndar[mode].x, RThisMonthCalendar[mode].y);
 32357  00D568  C0B1  F089         	movff	_drawCalendar$8867,DrawBigCalendar@month
 32358  00D56C  51B5               	movf	drawCalendar@mode& (0+255),w,b
 32359  00D56E  0D0A               	mullw	10
 32360  00D570  0E46               	movlw	low _RThisMonthCalendar
 32361  00D572  24F3               	addwf	243,w,c
 32362  00D574  6ED9               	movwf	fsr2l,c
 32363  00D576  0E04               	movlw	high _RThisMonthCalendar
 32364  00D578  20F4               	addwfc	prodh,w,c
 32365  00D57A  6EDA               	movwf	fsr2h,c
 32366  00D57C  CFDE F08A          	movff	postinc2,DrawBigCalendar@xs
 32367  00D580  CFDD F08B          	movff	postdec2,DrawBigCalendar@xs+1
 32368  00D584  51B5               	movf	drawCalendar@mode& (0+255),w,b
 32369  00D586  0D0A               	mullw	10
 32370  00D588  0E48               	movlw	low (_RThisMonthCalendar+2)
 32371  00D58A  24F3               	addwf	243,w,c
 32372  00D58C  6ED9               	movwf	fsr2l,c
 32373  00D58E  0E04               	movlw	high (_RThisMonthCalendar+2)
 32374  00D590  20F4               	addwfc	prodh,w,c
 32375  00D592  6EDA               	movwf	fsr2h,c
 32376  00D594  CFDE F08C          	movff	postinc2,DrawBigCalendar@ys
 32377  00D598  CFDD F08D          	movff	postdec2,DrawBigCalendar@ys+1
 32378  00D59C  51B2               	movf	_drawCalendar$8868& (0+255),w,b
 32379  00D59E  EC31  F035         	call	_DrawBigCalendar
 32380                           
 32381                           ;Draw.c: 846: break;
 32382  00D5A2  0012               	return	
 32383  00D5A4                     l23833:
 32384                           
 32385                           ; BSR set to: 0
 32386                           ;Draw.c: 852: Draw3month(Bcd2Hex(DateTime[6]), Bcd2Hex(DateTime[5]), mode);
 32387  00D5A4  0102               	movlb	2	; () banked
 32388  00D5A6  51FB               	movf	(_DateTime+5)& (0+255),w,b
 32389  00D5A8  EC84  F07A         	call	_Bcd2Hex
 32390  00D5AC  0100               	movlb	0	; () banked
 32391  00D5AE  6FB3               	movwf	_drawCalendar$8869& (0+255),b
 32392                           
 32393                           ;Draw.c: 852: Draw3month(Bcd2Hex(DateTime[6]), Bcd2Hex(DateTime[5]), mode);
 32394  00D5B0  0102               	movlb	2	; () banked
 32395  00D5B2  51FC               	movf	(_DateTime+6)& (0+255),w,b
 32396  00D5B4  EC84  F07A         	call	_Bcd2Hex
 32397  00D5B8  0100               	movlb	0	; () banked
 32398  00D5BA  6FB4               	movwf	_drawCalendar$8870& (0+255),b
 32399                           
 32400                           ; BSR set to: 0
 32401                           ;Draw.c: 852: Draw3month(Bcd2Hex(DateTime[6]), Bcd2Hex(DateTime[5]), mode);
 32402  00D5BC  C0B3  F0AC         	movff	_drawCalendar$8869,Draw3month@startmonth
 32403  00D5C0  C0B5  F0AD         	movff	drawCalendar@mode,Draw3month@mode
 32404  00D5C4  51B4               	movf	_drawCalendar$8870& (0+255),w,b
 32405  00D5C6  EC07  F060         	call	_Draw3month
 32406                           
 32407                           ;Draw.c: 853: }
 32408  00D5CA  0012               	return	
 32409  00D5CC                     l23837:
 32410  00D5CC  0100               	movlb	0	; () banked
 32411  00D5CE  51B5               	movf	drawCalendar@mode& (0+255),w,b
 32412                           
 32413                           ; Switch size 1, requested type "simple"
 32414                           ; Number of cases is 2, Range of values is 1 to 2
 32415                           ; switch strategies available:
 32416                           ; Name         Instructions Cycles
 32417                           ; simple_byte            7     4 (average)
 32418                           ;	Chosen strategy is simple_byte
 32419  00D5D0  0A01               	xorlw	1	; case 1
 32420  00D5D2  B4D8               	btfsc	status,2,c
 32421  00D5D4  D7BD               	goto	l23829
 32422  00D5D6  0A03               	xorlw	3	; case 2
 32423  00D5D8  D7E5               	goto	l23833
 32424  00D5DA                     __end_of_drawCalendar:
 32425                           	callstack 0
 32426                           
 32427 ;; *************** function _DrawBigCalendar *****************
 32428 ;; Defined at:
 32429 ;;		line 562 in file "Draw.c"
 32430 ;; Parameters:    Size  Location     Type
 32431 ;;  year            1    wreg     unsigned char 
 32432 ;;  month           1   41[BANK0 ] unsigned char 
 32433 ;;  xs              2   42[BANK0 ] unsigned int 
 32434 ;;  ys              2   44[BANK0 ] unsigned int 
 32435 ;; Auto vars:     Size  Location     Type
 32436 ;;  year            1   50[BANK0 ] unsigned char 
 32437 ;;  str             5   53[BANK0 ] unsigned char [5]
 32438 ;;  xx              2   73[BANK0 ] unsigned int 
 32439 ;;  yy              2   70[BANK0 ] unsigned int 
 32440 ;;  backColor       2   68[BANK0 ] unsigned int 
 32441 ;;  color           2   66[BANK0 ] unsigned int 
 32442 ;;  jj              1   75[BANK0 ] unsigned char 
 32443 ;;  fontw           1   72[BANK0 ] unsigned char 
 32444 ;;  startday        1   65[BANK0 ] char 
 32445 ;;  dd              1   64[BANK0 ] unsigned char 
 32446 ;;  space           1   63[BANK0 ] unsigned char 
 32447 ;;  ypitch          1   62[BANK0 ] unsigned char 
 32448 ;;  mm              1   61[BANK0 ] unsigned char 
 32449 ;;  yr              1   60[BANK0 ] unsigned char 
 32450 ;;  kk              1   59[BANK0 ] unsigned char 
 32451 ;;  fonth           1   58[BANK0 ] unsigned char 
 32452 ;;  maxdays         1   52[BANK0 ] char 
 32453 ;;  wd              1   51[BANK0 ] unsigned char 
 32454 ;; Return value:  Size  Location     Type
 32455 ;;                  1    wreg      void 
 32456 ;; Registers used:
 32457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32458 ;; Tracked objects:
 32459 ;;		On entry : 3F/0
 32460 ;;		On exit  : 3F/0
 32461 ;;		Unchanged: 0/0
 32462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32463 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32464 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32465 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32466 ;;      Totals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32467 ;;Total ram usage:       35 bytes
 32468 ;; Hardware stack levels used:    1
 32469 ;; Hardware stack levels required when called:   15
 32470 ;; This function calls:
 32471 ;;		_Bcd2Hex
 32472 ;;		_display_drawChars
 32473 ;;		_display_drawRect
 32474 ;;		_getWeekdays
 32475 ;;		_lcd_fill_rect
 32476 ;;		_sprintf
 32477 ;; This function is called by:
 32478 ;;		_drawCalendar
 32479 ;; This function uses a non-reentrant model
 32480 ;;
 32481                           
 32482                           	psect	text113
 32483  006A62                     __ptext113:
 32484                           	callstack 0
 32485  006A62                     _DrawBigCalendar:
 32486                           	callstack 13
 32487                           
 32488                           ; BSR set to: 0
 32489                           ;incstack = 0
 32490                           ;DrawBigCalendar@year stored from wreg
 32491  006A62  6F92               	movwf	DrawBigCalendar@year& (0+255),b
 32492                           
 32493                           ;Draw.c: 563: uint8_t jj, kk, fontw, fonth, ypitch, space;;Draw.c: 564: uint16_t xx, yy;
      +                          ;Draw.c: 565: char str[5];;Draw.c: 566: int8_t startday;;Draw.c: 567: int8_t maxdays;;Dr
      +                          aw.c: 568: uint8_t yr, mm, dd, wd;;Draw.c: 569: uint16_t color = 0xFFFF;
 32494  006A64  0100               	movlb	0	; () banked
 32495  006A66  69A2               	setf	DrawBigCalendar@color& (0+255),b
 32496  006A68  69A3               	setf	(DrawBigCalendar@color+1)& (0+255),b
 32497                           
 32498                           ; BSR set to: 0
 32499                           ;Draw.c: 570: uint16_t backColor = 0x0000;
 32500  006A6A  0E00               	movlw	0
 32501  006A6C  6FA5               	movwf	(DrawBigCalendar@backColor+1)& (0+255),b
 32502  006A6E  0E00               	movlw	0
 32503  006A70  6FA4               	movwf	DrawBigCalendar@backColor& (0+255),b
 32504                           
 32505                           ; BSR set to: 0
 32506                           ;Draw.c: 573: fontw = Font.xsize * 2;
 32507  006A72  0103               	movlb	3	; () banked
 32508  006A74  51E0               	movf	_Font& (0+255),w,b
 32509  006A76  0D02               	mullw	2
 32510  006A78  CFF3 F0A8          	movff	prodl,DrawBigCalendar@fontw
 32511                           
 32512                           ; BSR set to: 3
 32513                           ;Draw.c: 574: space = 4;
 32514  006A7C  0E04               	movlw	4
 32515  006A7E  0100               	movlb	0	; () banked
 32516  006A80  6F9F               	movwf	DrawBigCalendar@space& (0+255),b
 32517                           
 32518                           ; BSR set to: 0
 32519                           ;Draw.c: 575: fonth = Font.ysize*2 +2;
 32520  006A82  0103               	movlb	3	; () banked
 32521  006A84  51E1               	movf	(_Font+1)& (0+255),w,b
 32522  006A86  0D02               	mullw	2
 32523  006A88  50F3               	movf	243,w,c
 32524  006A8A  0F02               	addlw	2
 32525  006A8C  0100               	movlb	0	; () banked
 32526  006A8E  6F9A               	movwf	DrawBigCalendar@fonth& (0+255),b
 32527                           
 32528                           ; BSR set to: 0
 32529                           ;Draw.c: 576: ypitch = fonth+4;
 32530  006A90  519A               	movf	DrawBigCalendar@fonth& (0+255),w,b
 32531  006A92  0F04               	addlw	4
 32532  006A94  6F9E               	movwf	DrawBigCalendar@ypitch& (0+255),b
 32533                           
 32534                           ; BSR set to: 0
 32535                           ;Draw.c: 578: yr = year;
 32536  006A96  C092  F09C         	movff	DrawBigCalendar@year,DrawBigCalendar@yr
 32537                           
 32538                           ; BSR set to: 0
 32539                           ;Draw.c: 579: mm = month;
 32540  006A9A  C089  F09D         	movff	DrawBigCalendar@month,DrawBigCalendar@mm
 32541                           
 32542                           ; BSR set to: 0
 32543                           ;Draw.c: 580: dd = 1;
 32544  006A9E  0E01               	movlw	1
 32545  006AA0  6FA0               	movwf	DrawBigCalendar@dd& (0+255),b
 32546                           
 32547                           ; BSR set to: 0
 32548                           ;Draw.c: 581: wd = getWeekdays(&yr, &mm, &dd);
 32549  006AA2  0E9C               	movlw	low DrawBigCalendar@yr
 32550  006AA4  6F6E               	movwf	getWeekdays@year& (0+255),b
 32551  006AA6  0E9D               	movlw	low DrawBigCalendar@mm
 32552  006AA8  6F6F               	movwf	getWeekdays@month& (0+255),b
 32553  006AAA  0EA0               	movlw	low DrawBigCalendar@dd
 32554  006AAC  6F70               	movwf	getWeekdays@day& (0+255),b
 32555  006AAE  ECE7  F060         	call	_getWeekdays	;wreg free
 32556  006AB2  6F93               	movwf	DrawBigCalendar@wd& (0+255),b
 32557                           
 32558                           ; BSR set to: 0
 32559                           ;Draw.c: 583: startday = 1- wd;
 32560  006AB4  5193               	movf	DrawBigCalendar@wd& (0+255),w,b
 32561  006AB6  0801               	sublw	1
 32562  006AB8  6FA1               	movwf	DrawBigCalendar@startday& (0+255),b
 32563                           
 32564                           ; BSR set to: 0
 32565                           ;Draw.c: 586: dd = 31;
 32566  006ABA  0E1F               	movlw	31
 32567  006ABC  6FA0               	movwf	DrawBigCalendar@dd& (0+255),b
 32568                           
 32569                           ; BSR set to: 0
 32570                           ;Draw.c: 587: getWeekdays(&yr, &mm, &dd);
 32571  006ABE  0E9C               	movlw	low DrawBigCalendar@yr
 32572  006AC0  6F6E               	movwf	getWeekdays@year& (0+255),b
 32573  006AC2  0E9D               	movlw	low DrawBigCalendar@mm
 32574  006AC4  6F6F               	movwf	getWeekdays@month& (0+255),b
 32575  006AC6  0EA0               	movlw	low DrawBigCalendar@dd
 32576  006AC8  6F70               	movwf	getWeekdays@day& (0+255),b
 32577  006ACA  ECE7  F060         	call	_getWeekdays	;wreg free
 32578                           
 32579                           ; BSR set to: 0
 32580                           ;Draw.c: 589: if (month != mm) {
 32581  006ACE  519D               	movf	DrawBigCalendar@mm& (0+255),w,b
 32582  006AD0  1989               	xorwf	DrawBigCalendar@month& (0+255),w,b
 32583  006AD2  B4D8               	btfsc	status,2,c
 32584  006AD4  D003               	goto	l23065
 32585                           
 32586                           ; BSR set to: 0
 32587                           ;Draw.c: 590: maxdays = 31 - dd;
 32588  006AD6  51A0               	movf	DrawBigCalendar@dd& (0+255),w,b
 32589  006AD8  081F               	sublw	31
 32590  006ADA  D001               	goto	L31
 32591  006ADC                     l23065:
 32592                           
 32593                           ; BSR set to: 0
 32594                           ;Draw.c: 592: maxdays = 31;
 32595  006ADC  0E1F               	movlw	31
 32596  006ADE                     L31:
 32597  006ADE  6F94               	movwf	DrawBigCalendar@maxdays& (0+255),b
 32598                           
 32599                           ; BSR set to: 0
 32600                           ;Draw.c: 593: };Draw.c: 597: lcd_fill_rect(xs-1, ys, xs+fontw*14+space*7+1, ys+ypitch*8,
      +                           backColor);
 32601  006AE0  0EFF               	movlw	255
 32602  006AE2  258A               	addwf	DrawBigCalendar@xs& (0+255),w,b
 32603  006AE4  6E19               	movwf	lcd_fill_rect@x0^0,c
 32604  006AE6  0EFF               	movlw	255
 32605  006AE8  218B               	addwfc	(DrawBigCalendar@xs+1)& (0+255),w,b
 32606  006AEA  6E1A               	movwf	(lcd_fill_rect@x0+1)^0,c
 32607  006AEC  C08C  F01B         	movff	DrawBigCalendar@ys,lcd_fill_rect@y0
 32608  006AF0  C08D  F01C         	movff	DrawBigCalendar@ys+1,lcd_fill_rect@y0+1
 32609  006AF4  51A8               	movf	DrawBigCalendar@fontw& (0+255),w,b
 32610  006AF6  0D0E               	mullw	14
 32611  006AF8  CFF3 F08E          	movff	prodl,??_DrawBigCalendar
 32612  006AFC  CFF4 F08F          	movff	prodh,??_DrawBigCalendar+1
 32613  006B00  518A               	movf	DrawBigCalendar@xs& (0+255),w,b
 32614  006B02  278E               	addwf	??_DrawBigCalendar& (0+255),f,b
 32615  006B04  518B               	movf	(DrawBigCalendar@xs+1)& (0+255),w,b
 32616  006B06  238F               	addwfc	(??_DrawBigCalendar+1)& (0+255),f,b
 32617  006B08  0E1D               	movlw	29
 32618  006B0A  258E               	addwf	??_DrawBigCalendar& (0+255),w,b
 32619  006B0C  6E1D               	movwf	lcd_fill_rect@x1^0,c
 32620  006B0E  0E00               	movlw	0
 32621  006B10  218F               	addwfc	(??_DrawBigCalendar+1)& (0+255),w,b
 32622  006B12  6E1E               	movwf	(lcd_fill_rect@x1+1)^0,c
 32623  006B14  519E               	movf	DrawBigCalendar@ypitch& (0+255),w,b
 32624  006B16  6F90               	movwf	(??_DrawBigCalendar+2)& (0+255),b
 32625  006B18  6B91               	clrf	(??_DrawBigCalendar+3)& (0+255),b
 32626  006B1A  90D8               	bcf	status,0,c
 32627  006B1C  3790               	rlcf	(??_DrawBigCalendar+2)& (0+255),f,b
 32628  006B1E  3791               	rlcf	(??_DrawBigCalendar+3)& (0+255),f,b
 32629  006B20  90D8               	bcf	status,0,c
 32630  006B22  3790               	rlcf	(??_DrawBigCalendar+2)& (0+255),f,b
 32631  006B24  3791               	rlcf	(??_DrawBigCalendar+3)& (0+255),f,b
 32632  006B26  90D8               	bcf	status,0,c
 32633  006B28  3790               	rlcf	(??_DrawBigCalendar+2)& (0+255),f,b
 32634  006B2A  3791               	rlcf	(??_DrawBigCalendar+3)& (0+255),f,b
 32635  006B2C  518C               	movf	DrawBigCalendar@ys& (0+255),w,b
 32636  006B2E  2590               	addwf	(??_DrawBigCalendar+2)& (0+255),w,b
 32637  006B30  6E1F               	movwf	lcd_fill_rect@y1^0,c
 32638  006B32  518D               	movf	(DrawBigCalendar@ys+1)& (0+255),w,b
 32639  006B34  2191               	addwfc	(??_DrawBigCalendar+3)& (0+255),w,b
 32640  006B36  6E20               	movwf	(lcd_fill_rect@y1+1)^0,c
 32641  006B38  0E00               	movlw	0
 32642  006B3A  6E22               	movwf	(lcd_fill_rect@color+1)^0,c
 32643  006B3C  0E00               	movlw	0
 32644  006B3E  6E21               	movwf	lcd_fill_rect@color^0,c
 32645  006B40  EC21  F05E         	call	_lcd_fill_rect	;wreg free
 32646                           
 32647                           ;Draw.c: 599: yy = ys;
 32648  006B44  C08C  F0A6         	movff	DrawBigCalendar@ys,DrawBigCalendar@yy
 32649  006B48  C08D  F0A7         	movff	DrawBigCalendar@ys+1,DrawBigCalendar@yy+1
 32650                           
 32651                           ;Draw.c: 600: xx = xs + 3*(fontw*2+space);
 32652  006B4C  0100               	movlb	0	; () banked
 32653  006B4E  51A8               	movf	DrawBigCalendar@fontw& (0+255),w,b
 32654  006B50  0D06               	mullw	6
 32655  006B52  CFF3 F08E          	movff	prodl,??_DrawBigCalendar
 32656  006B56  CFF4 F08F          	movff	prodh,??_DrawBigCalendar+1
 32657  006B5A  518A               	movf	DrawBigCalendar@xs& (0+255),w,b
 32658  006B5C  278E               	addwf	??_DrawBigCalendar& (0+255),f,b
 32659  006B5E  518B               	movf	(DrawBigCalendar@xs+1)& (0+255),w,b
 32660  006B60  238F               	addwfc	(??_DrawBigCalendar+1)& (0+255),f,b
 32661  006B62  0E0C               	movlw	12
 32662  006B64  258E               	addwf	??_DrawBigCalendar& (0+255),w,b
 32663  006B66  6FA9               	movwf	DrawBigCalendar@xx& (0+255),b
 32664  006B68  0E00               	movlw	0
 32665  006B6A  218F               	addwfc	(??_DrawBigCalendar+1)& (0+255),w,b
 32666  006B6C  6FAA               	movwf	(DrawBigCalendar@xx+1)& (0+255),b
 32667                           
 32668                           ; BSR set to: 0
 32669                           ;Draw.c: 601: if (month <10) xx = xx + fontw/2;
 32670  006B6E  0E0A               	movlw	10
 32671  006B70  6189               	cpfslt	DrawBigCalendar@month& (0+255),b
 32672  006B72  D00A               	goto	l23077
 32673                           
 32674                           ; BSR set to: 0
 32675  006B74  C0A8  F08E         	movff	DrawBigCalendar@fontw,??_DrawBigCalendar
 32676  006B78  90D8               	bcf	status,0,c
 32677  006B7A  338E               	rrcf	??_DrawBigCalendar& (0+255),f,b
 32678  006B7C  518E               	movf	??_DrawBigCalendar& (0+255),w,b
 32679  006B7E  25A9               	addwf	DrawBigCalendar@xx& (0+255),w,b
 32680  006B80  6FA9               	movwf	DrawBigCalendar@xx& (0+255),b
 32681  006B82  0E00               	movlw	0
 32682  006B84  21AA               	addwfc	(DrawBigCalendar@xx+1)& (0+255),w,b
 32683  006B86  6FAA               	movwf	(DrawBigCalendar@xx+1)& (0+255),b
 32684  006B88                     l23077:
 32685                           
 32686                           ; BSR set to: 0
 32687                           ;Draw.c: 602: sprintf(str, "%d", month);
 32688  006B88  0E95               	movlw	low DrawBigCalendar@str
 32689  006B8A  6E2A               	movwf	sprintf@sp^0,c
 32690  006B8C  6A2B               	clrf	(sprintf@sp+1)^0,c
 32691  006B8E  0EF8               	movlw	low STR_18
 32692  006B90  6E2C               	movwf	sprintf@f^0,c
 32693  006B92  0EFF               	movlw	high STR_18
 32694  006B94  6E2D               	movwf	(sprintf@f+1)^0,c
 32695  006B96  C089  F02E         	movff	DrawBigCalendar@month,?_sprintf+4
 32696  006B9A  6A2F               	clrf	(?_sprintf+5)^0,c
 32697  006B9C  ECD0  F028         	call	_sprintf	;wreg free
 32698                           
 32699                           ; BSR set to: 0
 32700                           ;Draw.c: 603: display_drawChars(xx, yy, str, color, backColor, 2);
 32701  006BA0  C0A9  F06A         	movff	DrawBigCalendar@xx,display_drawChars@x
 32702  006BA4  C0AA  F06B         	movff	DrawBigCalendar@xx+1,display_drawChars@x+1
 32703  006BA8  C0A6  F06C         	movff	DrawBigCalendar@yy,display_drawChars@y
 32704  006BAC  C0A7  F06D         	movff	DrawBigCalendar@yy+1,display_drawChars@y+1
 32705  006BB0  0E95               	movlw	low DrawBigCalendar@str
 32706  006BB2  6F6E               	movwf	display_drawChars@s& (0+255),b
 32707  006BB4  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 32708  006BB6  0EFF               	movlw	255
 32709  006BB8  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
 32710  006BBA  6970               	setf	display_drawChars@color& (0+255),b
 32711  006BBC  0E00               	movlw	0
 32712  006BBE  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
 32713  006BC0  0E00               	movlw	0
 32714  006BC2  6F72               	movwf	display_drawChars@bg& (0+255),b
 32715  006BC4  0E02               	movlw	2
 32716  006BC6  6F74               	movwf	display_drawChars@size& (0+255),b
 32717  006BC8  EC13  F06D         	call	_display_drawChars	;wreg free
 32718                           
 32719                           ;Draw.c: 606: yy += ypitch;
 32720  006BCC  0100               	movlb	0	; () banked
 32721  006BCE  519E               	movf	DrawBigCalendar@ypitch& (0+255),w,b
 32722  006BD0  27A6               	addwf	DrawBigCalendar@yy& (0+255),f,b
 32723  006BD2  0E00               	movlw	0
 32724  006BD4  23A7               	addwfc	(DrawBigCalendar@yy+1)& (0+255),f,b
 32725                           
 32726                           ;Draw.c: 607: xx = xs+ fontw/2;
 32727  006BD6  C0A8  F08E         	movff	DrawBigCalendar@fontw,??_DrawBigCalendar
 32728  006BDA  90D8               	bcf	status,0,c
 32729  006BDC  338E               	rrcf	??_DrawBigCalendar& (0+255),f,b
 32730  006BDE  518E               	movf	??_DrawBigCalendar& (0+255),w,b
 32731  006BE0  258A               	addwf	DrawBigCalendar@xs& (0+255),w,b
 32732  006BE2  6FA9               	movwf	DrawBigCalendar@xx& (0+255),b
 32733  006BE4  0E00               	movlw	0
 32734  006BE6  218B               	addwfc	(DrawBigCalendar@xs+1)& (0+255),w,b
 32735  006BE8  6FAA               	movwf	(DrawBigCalendar@xx+1)& (0+255),b
 32736                           
 32737                           ; BSR set to: 0
 32738                           ;Draw.c: 608: for (jj=0; jj<7; jj++) {
 32739  006BEA  0E00               	movlw	0
 32740  006BEC  6FAB               	movwf	DrawBigCalendar@jj& (0+255),b
 32741  006BEE                     l23083:
 32742                           
 32743                           ; BSR set to: 0
 32744  006BEE  0E06               	movlw	6
 32745  006BF0  65AB               	cpfsgt	DrawBigCalendar@jj& (0+255),b
 32746  006BF2  D001               	goto	l23087
 32747  006BF4  D037               	goto	l23095
 32748  006BF6                     l23087:
 32749                           
 32750                           ; BSR set to: 0
 32751                           ;Draw.c: 610: sprintf(str, "%c", 0x80+jj);
 32752  006BF6  0E95               	movlw	low DrawBigCalendar@str
 32753  006BF8  6E2A               	movwf	sprintf@sp^0,c
 32754  006BFA  6A2B               	clrf	(sprintf@sp+1)^0,c
 32755  006BFC  0EF5               	movlw	low STR_22
 32756  006BFE  6E2C               	movwf	sprintf@f^0,c
 32757  006C00  0EFF               	movlw	high STR_22
 32758  006C02  6E2D               	movwf	(sprintf@f+1)^0,c
 32759  006C04  0E80               	movlw	128
 32760  006C06  25AB               	addwf	DrawBigCalendar@jj& (0+255),w,b
 32761  006C08  6E2E               	movwf	(?_sprintf+4)^0,c
 32762  006C0A  6A2F               	clrf	(?_sprintf+5)^0,c
 32763  006C0C  0E00               	movlw	0
 32764  006C0E  222F               	addwfc	(?_sprintf+5)^0,f,c
 32765  006C10  ECD0  F028         	call	_sprintf	;wreg free
 32766                           
 32767                           ;Draw.c: 611: display_drawChars(xx, yy, str, color, backColor, 2);
 32768  006C14  C0A9  F06A         	movff	DrawBigCalendar@xx,display_drawChars@x
 32769  006C18  C0AA  F06B         	movff	DrawBigCalendar@xx+1,display_drawChars@x+1
 32770  006C1C  C0A6  F06C         	movff	DrawBigCalendar@yy,display_drawChars@y
 32771  006C20  C0A7  F06D         	movff	DrawBigCalendar@yy+1,display_drawChars@y+1
 32772  006C24  0E95               	movlw	low DrawBigCalendar@str
 32773  006C26  6F6E               	movwf	display_drawChars@s& (0+255),b
 32774  006C28  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 32775  006C2A  C0A2  F070         	movff	DrawBigCalendar@color,display_drawChars@color
 32776  006C2E  C0A3  F071         	movff	DrawBigCalendar@color+1,display_drawChars@color+1
 32777  006C32  C0A4  F072         	movff	DrawBigCalendar@backColor,display_drawChars@bg
 32778  006C36  C0A5  F073         	movff	DrawBigCalendar@backColor+1,display_drawChars@bg+1
 32779  006C3A  0E02               	movlw	2
 32780  006C3C  6F74               	movwf	display_drawChars@size& (0+255),b
 32781  006C3E  EC13  F06D         	call	_display_drawChars	;wreg free
 32782                           
 32783                           ;Draw.c: 612: xx += fontw * 2 +space;
 32784  006C42  0100               	movlb	0	; () banked
 32785  006C44  519F               	movf	DrawBigCalendar@space& (0+255),w,b
 32786  006C46  C0A8  F08E         	movff	DrawBigCalendar@fontw,??_DrawBigCalendar
 32787  006C4A  6B8F               	clrf	(??_DrawBigCalendar+1)& (0+255),b
 32788  006C4C  90D8               	bcf	status,0,c
 32789  006C4E  378E               	rlcf	??_DrawBigCalendar& (0+255),f,b
 32790  006C50  378F               	rlcf	(??_DrawBigCalendar+1)& (0+255),f,b
 32791  006C52  278E               	addwf	??_DrawBigCalendar& (0+255),f,b
 32792  006C54  0E00               	movlw	0
 32793  006C56  238F               	addwfc	(??_DrawBigCalendar+1)& (0+255),f,b
 32794  006C58  518E               	movf	??_DrawBigCalendar& (0+255),w,b
 32795  006C5A  27A9               	addwf	DrawBigCalendar@xx& (0+255),f,b
 32796  006C5C  518F               	movf	(??_DrawBigCalendar+1)& (0+255),w,b
 32797  006C5E  23AA               	addwfc	(DrawBigCalendar@xx+1)& (0+255),f,b
 32798                           
 32799                           ; BSR set to: 0
 32800  006C60  2BAB               	incf	DrawBigCalendar@jj& (0+255),f,b
 32801  006C62  D7C5               	goto	l23083
 32802  006C64                     l23095:
 32803                           
 32804                           ; BSR set to: 0
 32805                           ;Draw.c: 613: };Draw.c: 616: yy += ypitch;
 32806  006C64  519E               	movf	DrawBigCalendar@ypitch& (0+255),w,b
 32807  006C66  27A6               	addwf	DrawBigCalendar@yy& (0+255),f,b
 32808  006C68  0E00               	movlw	0
 32809  006C6A  23A7               	addwfc	(DrawBigCalendar@yy+1)& (0+255),f,b
 32810                           
 32811                           ; BSR set to: 0
 32812                           ;Draw.c: 617: for (kk = 0; kk<6; kk++) {
 32813  006C6C  0E00               	movlw	0
 32814  006C6E  6F9B               	movwf	DrawBigCalendar@kk& (0+255),b
 32815  006C70                     l23099:
 32816                           
 32817                           ; BSR set to: 0
 32818  006C70  0E05               	movlw	5
 32819  006C72  659B               	cpfsgt	DrawBigCalendar@kk& (0+255),b
 32820  006C74  D001               	goto	l2968
 32821  006C76  0012               	return	
 32822  006C78                     l2968:
 32823                           
 32824                           ; BSR set to: 0
 32825                           ;Draw.c: 618: xx = xs;
 32826  006C78  C08A  F0A9         	movff	DrawBigCalendar@xs,DrawBigCalendar@xx
 32827  006C7C  C08B  F0AA         	movff	DrawBigCalendar@xs+1,DrawBigCalendar@xx+1
 32828                           
 32829                           ; BSR set to: 0
 32830                           ;Draw.c: 619: for (jj = 0; jj < 7; jj++) {
 32831  006C80  0E00               	movlw	0
 32832  006C82  6FAB               	movwf	DrawBigCalendar@jj& (0+255),b
 32833  006C84                     l23105:
 32834                           
 32835                           ; BSR set to: 0
 32836  006C84  0E06               	movlw	6
 32837  006C86  65AB               	cpfsgt	DrawBigCalendar@jj& (0+255),b
 32838  006C88  D001               	goto	l23109
 32839  006C8A  D0A5               	goto	l23139
 32840  006C8C                     l23109:
 32841                           
 32842                           ; BSR set to: 0
 32843                           ;Draw.c: 620: if (startday > 0 && startday <= maxdays) {
 32844  006C8C  51A1               	movf	DrawBigCalendar@startday& (0+255),w,b
 32845  006C8E  0A80               	xorlw	128
 32846  006C90  0F7F               	addlw	-129
 32847  006C92  A0D8               	btfss	status,0,c
 32848  006C94  D08E               	goto	l23131
 32849                           
 32850                           ; BSR set to: 0
 32851  006C96  5194               	movf	DrawBigCalendar@maxdays& (0+255),w,b
 32852  006C98  0A80               	xorlw	128
 32853  006C9A  6F8E               	movwf	??_DrawBigCalendar& (0+255),b
 32854  006C9C  51A1               	movf	DrawBigCalendar@startday& (0+255),w,b
 32855  006C9E  0A80               	xorlw	128
 32856  006CA0  5D8E               	subwf	??_DrawBigCalendar& (0+255),w,b
 32857  006CA2  A0D8               	btfss	status,0,c
 32858  006CA4  D086               	goto	l23131
 32859                           
 32860                           ; BSR set to: 0
 32861                           ;Draw.c: 621: sprintf(str, "%2d", startday);
 32862  006CA6  0E95               	movlw	low DrawBigCalendar@str
 32863  006CA8  6E2A               	movwf	sprintf@sp^0,c
 32864  006CAA  6A2B               	clrf	(sprintf@sp+1)^0,c
 32865  006CAC  0EE7               	movlw	low STR_23
 32866  006CAE  6E2C               	movwf	sprintf@f^0,c
 32867  006CB0  0EFF               	movlw	high STR_23
 32868  006CB2  6E2D               	movwf	(sprintf@f+1)^0,c
 32869  006CB4  51A1               	movf	DrawBigCalendar@startday& (0+255),w,b
 32870  006CB6  6E2E               	movwf	(?_sprintf+4)^0,c
 32871  006CB8  6A2F               	clrf	(?_sprintf+5)^0,c
 32872  006CBA  BE2E               	btfsc	(?_sprintf+4)^0,7,c
 32873  006CBC  062F               	decf	(?_sprintf+5)^0,f,c
 32874  006CBE  ECD0  F028         	call	_sprintf	;wreg free
 32875                           
 32876                           ; BSR set to: 0
 32877                           ;Draw.c: 622: if (jj==0) color = 0xF800;
 32878  006CC2  51AB               	movf	DrawBigCalendar@jj& (0+255),w,b
 32879  006CC4  A4D8               	btfss	status,2,c
 32880  006CC6  D004               	goto	l23119
 32881                           
 32882                           ; BSR set to: 0
 32883  006CC8  0EF8               	movlw	248
 32884  006CCA  6FA3               	movwf	(DrawBigCalendar@color+1)& (0+255),b
 32885  006CCC  0E00               	movlw	0
 32886  006CCE  D007               	goto	L32
 32887  006CD0                     l23119:
 32888                           
 32889                           ; BSR set to: 0
 32890                           ;Draw.c: 623: else if (jj==6) color = 0x001F;
 32891  006CD0  0E06               	movlw	6
 32892  006CD2  19AB               	xorwf	DrawBigCalendar@jj& (0+255),w,b
 32893  006CD4  A4D8               	btfss	status,2,c
 32894  006CD6  D005               	goto	l2975
 32895                           
 32896                           ; BSR set to: 0
 32897  006CD8  0E00               	movlw	0
 32898  006CDA  6FA3               	movwf	(DrawBigCalendar@color+1)& (0+255),b
 32899  006CDC  0E1F               	movlw	31
 32900  006CDE                     L32:
 32901  006CDE  6FA2               	movwf	DrawBigCalendar@color& (0+255),b
 32902  006CE0  D002               	goto	l23123
 32903  006CE2                     l2975:
 32904                           
 32905                           ; BSR set to: 0
 32906                           ;Draw.c: 624: else color = 0xFFFF;
 32907  006CE2  69A2               	setf	DrawBigCalendar@color& (0+255),b
 32908  006CE4  69A3               	setf	(DrawBigCalendar@color+1)& (0+255),b
 32909  006CE6                     l23123:
 32910                           
 32911                           ; BSR set to: 0
 32912                           ;Draw.c: 626: if (startday == Bcd2Hex(DateTime[4])) {
 32913  006CE6  0102               	movlb	2	; () banked
 32914  006CE8  51FA               	movf	(_DateTime+4)& (0+255),w,b
 32915  006CEA  EC84  F07A         	call	_Bcd2Hex
 32916  006CEE  0100               	movlb	0	; () banked
 32917  006CF0  6F8E               	movwf	??_DrawBigCalendar& (0+255),b
 32918  006CF2  6B8F               	clrf	(??_DrawBigCalendar+1)& (0+255),b
 32919  006CF4  C0A1  F090         	movff	DrawBigCalendar@startday,??_DrawBigCalendar+2
 32920  006CF8  6B91               	clrf	(??_DrawBigCalendar+3)& (0+255),b
 32921  006CFA  BF90               	btfsc	(??_DrawBigCalendar+2)& (0+255),7,b
 32922  006CFC  0791               	decf	(??_DrawBigCalendar+3)& (0+255),f,b
 32923  006CFE  518E               	movf	??_DrawBigCalendar& (0+255),w,b
 32924  006D00  1990               	xorwf	(??_DrawBigCalendar+2)& (0+255),w,b
 32925  006D02  E140               	bnz	l23129
 32926  006D04  518F               	movf	(??_DrawBigCalendar+1)& (0+255),w,b
 32927  006D06  1991               	xorwf	(??_DrawBigCalendar+3)& (0+255),w,b
 32928  006D08  A4D8               	btfss	status,2,c
 32929  006D0A  D03C               	goto	l23129
 32930                           
 32931                           ; BSR set to: 0
 32932                           ;Draw.c: 629: display_drawChars(xx, yy, str, color, backColor, 2);
 32933  006D0C  C0A9  F06A         	movff	DrawBigCalendar@xx,display_drawChars@x
 32934  006D10  C0AA  F06B         	movff	DrawBigCalendar@xx+1,display_drawChars@x+1
 32935  006D14  C0A6  F06C         	movff	DrawBigCalendar@yy,display_drawChars@y
 32936  006D18  C0A7  F06D         	movff	DrawBigCalendar@yy+1,display_drawChars@y+1
 32937  006D1C  0E95               	movlw	low DrawBigCalendar@str
 32938  006D1E  6F6E               	movwf	display_drawChars@s& (0+255),b
 32939  006D20  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 32940  006D22  C0A2  F070         	movff	DrawBigCalendar@color,display_drawChars@color
 32941  006D26  C0A3  F071         	movff	DrawBigCalendar@color+1,display_drawChars@color+1
 32942  006D2A  C0A4  F072         	movff	DrawBigCalendar@backColor,display_drawChars@bg
 32943  006D2E  C0A5  F073         	movff	DrawBigCalendar@backColor+1,display_drawChars@bg+1
 32944  006D32  0E02               	movlw	2
 32945  006D34  6F74               	movwf	display_drawChars@size& (0+255),b
 32946  006D36  EC13  F06D         	call	_display_drawChars	;wreg free
 32947                           
 32948                           ;Draw.c: 630: display_drawRect(xx-1, yy-2, fontw*2+2, fonth+2, 0xFFFF);
 32949  006D3A  0EFF               	movlw	255
 32950  006D3C  0100               	movlb	0	; () banked
 32951  006D3E  25A9               	addwf	DrawBigCalendar@xx& (0+255),w,b
 32952  006D40  6E27               	movwf	display_drawRect@x^0,c
 32953  006D42  0EFF               	movlw	255
 32954  006D44  21AA               	addwfc	(DrawBigCalendar@xx+1)& (0+255),w,b
 32955  006D46  6E28               	movwf	(display_drawRect@x+1)^0,c
 32956  006D48  0EFE               	movlw	254
 32957  006D4A  25A6               	addwf	DrawBigCalendar@yy& (0+255),w,b
 32958  006D4C  6E29               	movwf	display_drawRect@y^0,c
 32959  006D4E  0EFF               	movlw	255
 32960  006D50  21A7               	addwfc	(DrawBigCalendar@yy+1)& (0+255),w,b
 32961  006D52  6E2A               	movwf	(display_drawRect@y+1)^0,c
 32962  006D54  51A8               	movf	DrawBigCalendar@fontw& (0+255),w,b
 32963  006D56  6F8E               	movwf	??_DrawBigCalendar& (0+255),b
 32964  006D58  6B8F               	clrf	(??_DrawBigCalendar+1)& (0+255),b
 32965  006D5A  90D8               	bcf	status,0,c
 32966  006D5C  378E               	rlcf	??_DrawBigCalendar& (0+255),f,b
 32967  006D5E  378F               	rlcf	(??_DrawBigCalendar+1)& (0+255),f,b
 32968  006D60  0E02               	movlw	2
 32969  006D62  258E               	addwf	??_DrawBigCalendar& (0+255),w,b
 32970  006D64  6E2B               	movwf	display_drawRect@w^0,c
 32971  006D66  0E00               	movlw	0
 32972  006D68  218F               	addwfc	(??_DrawBigCalendar+1)& (0+255),w,b
 32973  006D6A  6E2C               	movwf	(display_drawRect@w+1)^0,c
 32974  006D6C  0E02               	movlw	2
 32975  006D6E  259A               	addwf	DrawBigCalendar@fonth& (0+255),w,b
 32976  006D70  6E2D               	movwf	display_drawRect@h^0,c
 32977  006D72  6A2E               	clrf	(display_drawRect@h+1)^0,c
 32978  006D74  0E00               	movlw	0
 32979  006D76  222E               	addwfc	(display_drawRect@h+1)^0,f,c
 32980  006D78  0EFF               	movlw	255
 32981  006D7A  6E30               	movwf	(display_drawRect@color+1)^0,c
 32982  006D7C  682F               	setf	display_drawRect@color^0,c
 32983  006D7E  EC6A  F066         	call	_display_drawRect	;wreg free
 32984                           
 32985                           ;Draw.c: 631: }
 32986  006D82  D017               	goto	l23131
 32987  006D84                     l23129:
 32988                           
 32989                           ; BSR set to: 0
 32990                           ;Draw.c: 632: else {;Draw.c: 633: display_drawChars(xx, yy, str, color, backColor, 2);
 32991  006D84  C0A9  F06A         	movff	DrawBigCalendar@xx,display_drawChars@x
 32992  006D88  C0AA  F06B         	movff	DrawBigCalendar@xx+1,display_drawChars@x+1
 32993  006D8C  C0A6  F06C         	movff	DrawBigCalendar@yy,display_drawChars@y
 32994  006D90  C0A7  F06D         	movff	DrawBigCalendar@yy+1,display_drawChars@y+1
 32995  006D94  0E95               	movlw	low DrawBigCalendar@str
 32996  006D96  6F6E               	movwf	display_drawChars@s& (0+255),b
 32997  006D98  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 32998  006D9A  C0A2  F070         	movff	DrawBigCalendar@color,display_drawChars@color
 32999  006D9E  C0A3  F071         	movff	DrawBigCalendar@color+1,display_drawChars@color+1
 33000  006DA2  C0A4  F072         	movff	DrawBigCalendar@backColor,display_drawChars@bg
 33001  006DA6  C0A5  F073         	movff	DrawBigCalendar@backColor+1,display_drawChars@bg+1
 33002  006DAA  0E02               	movlw	2
 33003  006DAC  6F74               	movwf	display_drawChars@size& (0+255),b
 33004  006DAE  EC13  F06D         	call	_display_drawChars	;wreg free
 33005  006DB2                     l23131:
 33006                           
 33007                           ;Draw.c: 634: };Draw.c: 635: };Draw.c: 636: startday++;
 33008  006DB2  0100               	movlb	0	; () banked
 33009  006DB4  2BA1               	incf	DrawBigCalendar@startday& (0+255),f,b
 33010                           
 33011                           ; BSR set to: 0
 33012                           ;Draw.c: 637: xx += fontw*2 + space;
 33013  006DB6  519F               	movf	DrawBigCalendar@space& (0+255),w,b
 33014  006DB8  C0A8  F08E         	movff	DrawBigCalendar@fontw,??_DrawBigCalendar
 33015  006DBC  6B8F               	clrf	(??_DrawBigCalendar+1)& (0+255),b
 33016  006DBE  90D8               	bcf	status,0,c
 33017  006DC0  378E               	rlcf	??_DrawBigCalendar& (0+255),f,b
 33018  006DC2  378F               	rlcf	(??_DrawBigCalendar+1)& (0+255),f,b
 33019  006DC4  278E               	addwf	??_DrawBigCalendar& (0+255),f,b
 33020  006DC6  0E00               	movlw	0
 33021  006DC8  238F               	addwfc	(??_DrawBigCalendar+1)& (0+255),f,b
 33022  006DCA  518E               	movf	??_DrawBigCalendar& (0+255),w,b
 33023  006DCC  27A9               	addwf	DrawBigCalendar@xx& (0+255),f,b
 33024  006DCE  518F               	movf	(??_DrawBigCalendar+1)& (0+255),w,b
 33025  006DD0  23AA               	addwfc	(DrawBigCalendar@xx+1)& (0+255),f,b
 33026                           
 33027                           ; BSR set to: 0
 33028  006DD2  2BAB               	incf	DrawBigCalendar@jj& (0+255),f,b
 33029  006DD4  D757               	goto	l23105
 33030  006DD6                     l23139:
 33031                           
 33032                           ; BSR set to: 0
 33033                           ;Draw.c: 638: };Draw.c: 639: yy += ypitch;
 33034  006DD6  519E               	movf	DrawBigCalendar@ypitch& (0+255),w,b
 33035  006DD8  27A6               	addwf	DrawBigCalendar@yy& (0+255),f,b
 33036  006DDA  0E00               	movlw	0
 33037  006DDC  23A7               	addwfc	(DrawBigCalendar@yy+1)& (0+255),f,b
 33038                           
 33039                           ; BSR set to: 0
 33040  006DDE  2B9B               	incf	DrawBigCalendar@kk& (0+255),f,b
 33041  006DE0  D747               	goto	l23099
 33042  006DE2                     __end_of_DrawBigCalendar:
 33043                           	callstack 0
 33044                           
 33045 ;; *************** function _Draw3month *****************
 33046 ;; Defined at:
 33047 ;;		line 746 in file "Draw.c"
 33048 ;; Parameters:    Size  Location     Type
 33049 ;;  startyear       1    wreg     unsigned char 
 33050 ;;  startmonth      1   76[BANK0 ] unsigned char 
 33051 ;;  mode            1   77[BANK0 ] unsigned char 
 33052 ;; Auto vars:     Size  Location     Type
 33053 ;;  startyear       1   78[BANK0 ] unsigned char 
 33054 ;;  mm              1   80[BANK0 ] unsigned char 
 33055 ;;  yy              1   79[BANK0 ] unsigned char 
 33056 ;; Return value:  Size  Location     Type
 33057 ;;                  1    wreg      void 
 33058 ;; Registers used:
 33059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33060 ;; Tracked objects:
 33061 ;;		On entry : 3F/0
 33062 ;;		On exit  : 3F/0
 33063 ;;		Unchanged: 0/0
 33064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33065 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33066 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33068 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33069 ;;Total ram usage:        5 bytes
 33070 ;; Hardware stack levels used:    1
 33071 ;; Hardware stack levels required when called:   16
 33072 ;; This function calls:
 33073 ;;		_DrawSmallCalendar
 33074 ;; This function is called by:
 33075 ;;		_drawCalendar
 33076 ;; This function uses a non-reentrant model
 33077 ;;
 33078                           
 33079                           	psect	text114
 33080  00C00E                     __ptext114:
 33081                           	callstack 0
 33082  00C00E                     _Draw3month:
 33083                           	callstack 12
 33084                           
 33085                           ; BSR set to: 0
 33086                           ;incstack = 0
 33087                           ;Draw3month@startyear stored from wreg
 33088  00C00E  6FAE               	movwf	Draw3month@startyear& (0+255),b
 33089                           
 33090                           ;Draw.c: 747: uint8_t yy, mm;;Draw.c: 752: if (startmonth == 1) {
 33091  00C010  0100               	movlb	0	; () banked
 33092  00C012  05AC               	decf	Draw3month@startmonth& (0+255),w,b
 33093  00C014  A4D8               	btfss	status,2,c
 33094  00C016  D005               	goto	l23151
 33095                           
 33096                           ; BSR set to: 0
 33097                           ;Draw.c: 753: mm = 12;
 33098  00C018  0E0C               	movlw	12
 33099  00C01A  6FB0               	movwf	Draw3month@mm& (0+255),b
 33100                           
 33101                           ; BSR set to: 0
 33102                           ;Draw.c: 754: yy = startyear -1;
 33103  00C01C  05AE               	decf	Draw3month@startyear& (0+255),w,b
 33104  00C01E  6FAF               	movwf	Draw3month@yy& (0+255),b
 33105                           
 33106                           ;Draw.c: 755: } else {
 33107  00C020  D004               	goto	l23155
 33108  00C022                     l23151:
 33109                           
 33110                           ; BSR set to: 0
 33111                           ;Draw.c: 756: mm = startmonth - 1;
 33112  00C022  05AC               	decf	Draw3month@startmonth& (0+255),w,b
 33113  00C024  6FB0               	movwf	Draw3month@mm& (0+255),b
 33114                           
 33115                           ; BSR set to: 0
 33116                           ;Draw.c: 757: yy = startyear;
 33117  00C026  C0AE  F0AF         	movff	Draw3month@startyear,Draw3month@yy
 33118  00C02A                     l23155:
 33119                           
 33120                           ; BSR set to: 0
 33121                           ;Draw.c: 758: };Draw.c: 759: DrawSmallCalendar(yy, mm, RPrevMonthCalendar[mode].x, RPrev
      +                          MonthCalendar[mode].y);
 33122  00C02A  C0B0  F089         	movff	Draw3month@mm,DrawSmallCalendar@month
 33123  00C02E  51AD               	movf	Draw3month@mode& (0+255),w,b
 33124  00C030  0D0A               	mullw	10
 33125  00C032  0E1E               	movlw	low _RPrevMonthCalendar
 33126  00C034  24F3               	addwf	243,w,c
 33127  00C036  6ED9               	movwf	fsr2l,c
 33128  00C038  0E05               	movlw	high _RPrevMonthCalendar
 33129  00C03A  20F4               	addwfc	prodh,w,c
 33130  00C03C  6EDA               	movwf	fsr2h,c
 33131  00C03E  CFDE F08A          	movff	postinc2,DrawSmallCalendar@xs
 33132  00C042  CFDD F08B          	movff	postdec2,DrawSmallCalendar@xs+1
 33133  00C046  51AD               	movf	Draw3month@mode& (0+255),w,b
 33134  00C048  0D0A               	mullw	10
 33135  00C04A  0E20               	movlw	low (_RPrevMonthCalendar+2)
 33136  00C04C  24F3               	addwf	243,w,c
 33137  00C04E  6ED9               	movwf	fsr2l,c
 33138  00C050  0E05               	movlw	high (_RPrevMonthCalendar+2)
 33139  00C052  20F4               	addwfc	prodh,w,c
 33140  00C054  6EDA               	movwf	fsr2h,c
 33141  00C056  CFDE F08C          	movff	postinc2,DrawSmallCalendar@ys
 33142  00C05A  CFDD F08D          	movff	postdec2,DrawSmallCalendar@ys+1
 33143  00C05E  51AF               	movf	Draw3month@yy& (0+255),w,b
 33144  00C060  EC0D  F03C         	call	_DrawSmallCalendar
 33145                           
 33146                           ; BSR set to: 0
 33147                           ;Draw.c: 762: mm = startmonth;
 33148  00C064  C0AC  F0B0         	movff	Draw3month@startmonth,Draw3month@mm
 33149                           
 33150                           ; BSR set to: 0
 33151                           ;Draw.c: 763: yy = startyear;
 33152  00C068  C0AE  F0AF         	movff	Draw3month@startyear,Draw3month@yy
 33153                           
 33154                           ; BSR set to: 0
 33155                           ;Draw.c: 764: DrawSmallCalendar(yy, mm, RThisMonthCalendar[mode].x, RThisMonthCalendar[m
      +                          ode].y);
 33156  00C06C  C0B0  F089         	movff	Draw3month@mm,DrawSmallCalendar@month
 33157  00C070  51AD               	movf	Draw3month@mode& (0+255),w,b
 33158  00C072  0D0A               	mullw	10
 33159  00C074  0E46               	movlw	low _RThisMonthCalendar
 33160  00C076  24F3               	addwf	243,w,c
 33161  00C078  6ED9               	movwf	fsr2l,c
 33162  00C07A  0E04               	movlw	high _RThisMonthCalendar
 33163  00C07C  20F4               	addwfc	prodh,w,c
 33164  00C07E  6EDA               	movwf	fsr2h,c
 33165  00C080  CFDE F08A          	movff	postinc2,DrawSmallCalendar@xs
 33166  00C084  CFDD F08B          	movff	postdec2,DrawSmallCalendar@xs+1
 33167  00C088  51AD               	movf	Draw3month@mode& (0+255),w,b
 33168  00C08A  0D0A               	mullw	10
 33169  00C08C  0E48               	movlw	low (_RThisMonthCalendar+2)
 33170  00C08E  24F3               	addwf	243,w,c
 33171  00C090  6ED9               	movwf	fsr2l,c
 33172  00C092  0E04               	movlw	high (_RThisMonthCalendar+2)
 33173  00C094  20F4               	addwfc	prodh,w,c
 33174  00C096  6EDA               	movwf	fsr2h,c
 33175  00C098  CFDE F08C          	movff	postinc2,DrawSmallCalendar@ys
 33176  00C09C  CFDD F08D          	movff	postdec2,DrawSmallCalendar@ys+1
 33177  00C0A0  51AF               	movf	Draw3month@yy& (0+255),w,b
 33178  00C0A2  EC0D  F03C         	call	_DrawSmallCalendar
 33179                           
 33180                           ; BSR set to: 0
 33181                           ;Draw.c: 769: mm++;
 33182  00C0A6  2BB0               	incf	Draw3month@mm& (0+255),f,b
 33183                           
 33184                           ; BSR set to: 0
 33185                           ;Draw.c: 770: if (mm>12) {
 33186  00C0A8  0E0C               	movlw	12
 33187  00C0AA  65B0               	cpfsgt	Draw3month@mm& (0+255),b
 33188  00C0AC  D003               	goto	l23171
 33189                           
 33190                           ; BSR set to: 0
 33191                           ;Draw.c: 771: mm = 1;
 33192  00C0AE  0E01               	movlw	1
 33193  00C0B0  6FB0               	movwf	Draw3month@mm& (0+255),b
 33194                           
 33195                           ; BSR set to: 0
 33196                           ;Draw.c: 772: yy++;
 33197  00C0B2  2BAF               	incf	Draw3month@yy& (0+255),f,b
 33198  00C0B4                     l23171:
 33199                           
 33200                           ; BSR set to: 0
 33201                           ;Draw.c: 773: };Draw.c: 774: DrawSmallCalendar(yy, mm, RPostMonthCalendar[mode].x, RPost
      +                          MonthCalendar[mode].y);
 33202  00C0B4  C0B0  F089         	movff	Draw3month@mm,DrawSmallCalendar@month
 33203  00C0B8  51AD               	movf	Draw3month@mode& (0+255),w,b
 33204  00C0BA  0D0A               	mullw	10
 33205  00C0BC  0E00               	movlw	low _RPostMonthCalendar
 33206  00C0BE  24F3               	addwf	243,w,c
 33207  00C0C0  6ED9               	movwf	fsr2l,c
 33208  00C0C2  0E05               	movlw	high _RPostMonthCalendar
 33209  00C0C4  20F4               	addwfc	prodh,w,c
 33210  00C0C6  6EDA               	movwf	fsr2h,c
 33211  00C0C8  CFDE F08A          	movff	postinc2,DrawSmallCalendar@xs
 33212  00C0CC  CFDD F08B          	movff	postdec2,DrawSmallCalendar@xs+1
 33213  00C0D0  51AD               	movf	Draw3month@mode& (0+255),w,b
 33214  00C0D2  0D0A               	mullw	10
 33215  00C0D4  0E02               	movlw	low (_RPostMonthCalendar+2)
 33216  00C0D6  24F3               	addwf	243,w,c
 33217  00C0D8  6ED9               	movwf	fsr2l,c
 33218  00C0DA  0E05               	movlw	high (_RPostMonthCalendar+2)
 33219  00C0DC  20F4               	addwfc	prodh,w,c
 33220  00C0DE  6EDA               	movwf	fsr2h,c
 33221  00C0E0  CFDE F08C          	movff	postinc2,DrawSmallCalendar@ys
 33222  00C0E4  CFDD F08D          	movff	postdec2,DrawSmallCalendar@ys+1
 33223  00C0E8  51AF               	movf	Draw3month@yy& (0+255),w,b
 33224  00C0EA  EC0D  F03C         	call	_DrawSmallCalendar
 33225                           
 33226                           ; BSR set to: 0
 33227  00C0EE  0012               	return		;funcret
 33228  00C0F0                     __end_of_Draw3month:
 33229                           	callstack 0
 33230                           
 33231 ;; *************** function _DrawSmallCalendar *****************
 33232 ;; Defined at:
 33233 ;;		line 652 in file "Draw.c"
 33234 ;; Parameters:    Size  Location     Type
 33235 ;;  year            1    wreg     unsigned char 
 33236 ;;  month           1   41[BANK0 ] unsigned char 
 33237 ;;  xs              2   42[BANK0 ] unsigned int 
 33238 ;;  ys              2   44[BANK0 ] unsigned int 
 33239 ;; Auto vars:     Size  Location     Type
 33240 ;;  year            1   50[BANK0 ] unsigned char 
 33241 ;;  str             5   55[BANK0 ] unsigned char [5]
 33242 ;;  xx              2   73[BANK0 ] unsigned int 
 33243 ;;  yy              2   71[BANK0 ] unsigned int 
 33244 ;;  backColor       2   68[BANK0 ] unsigned int 
 33245 ;;  color           2   66[BANK0 ] unsigned int 
 33246 ;;  jj              1   75[BANK0 ] unsigned char 
 33247 ;;  fontw           1   70[BANK0 ] unsigned char 
 33248 ;;  startday        1   65[BANK0 ] char 
 33249 ;;  dd              1   64[BANK0 ] unsigned char 
 33250 ;;  ypitch          1   63[BANK0 ] unsigned char 
 33251 ;;  mm              1   62[BANK0 ] unsigned char 
 33252 ;;  yr              1   61[BANK0 ] unsigned char 
 33253 ;;  kk              1   60[BANK0 ] unsigned char 
 33254 ;;  thismonth       1   54[BANK0 ] unsigned char 
 33255 ;;  maxdays         1   53[BANK0 ] char 
 33256 ;;  wd              1   52[BANK0 ] unsigned char 
 33257 ;;  fonth           1    0        unsigned char 
 33258 ;; Return value:  Size  Location     Type
 33259 ;;                  1    wreg      void 
 33260 ;; Registers used:
 33261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33262 ;; Tracked objects:
 33263 ;;		On entry : 3F/0
 33264 ;;		On exit  : 3F/0
 33265 ;;		Unchanged: 0/0
 33266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33267 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33268 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33269 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33270 ;;      Totals:         0      35       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33271 ;;Total ram usage:       35 bytes
 33272 ;; Hardware stack levels used:    1
 33273 ;; Hardware stack levels required when called:   15
 33274 ;; This function calls:
 33275 ;;		_Bcd2Hex
 33276 ;;		_display_SetFont
 33277 ;;		_display_drawChars
 33278 ;;		_display_drawRect
 33279 ;;		_getWeekdays
 33280 ;;		_lcd_fill_rect
 33281 ;;		_sprintf
 33282 ;; This function is called by:
 33283 ;;		_Draw3month
 33284 ;; This function uses a non-reentrant model
 33285 ;;
 33286                           
 33287                           	psect	text115
 33288  00781A                     __ptext115:
 33289                           	callstack 0
 33290  00781A                     _DrawSmallCalendar:
 33291                           	callstack 12
 33292                           
 33293                           ; BSR set to: 0
 33294                           ;incstack = 0
 33295                           ;DrawSmallCalendar@year stored from wreg
 33296  00781A  6F92               	movwf	DrawSmallCalendar@year& (0+255),b
 33297                           
 33298                           ;Draw.c: 653: uint8_t jj, kk, fontw, fonth, ypitch;;Draw.c: 654: uint16_t xx, yy;;Draw.c
      +                          : 655: char str[5];;Draw.c: 656: int8_t startday;;Draw.c: 657: int8_t maxdays;;Draw.c: 6
      +                          58: uint8_t yr, mm, dd, wd;;Draw.c: 659: uint16_t color = 0xFFFF;
 33299  00781C  0100               	movlb	0	; () banked
 33300  00781E  69A2               	setf	DrawSmallCalendar@color& (0+255),b
 33301  007820  69A3               	setf	(DrawSmallCalendar@color+1)& (0+255),b
 33302                           
 33303                           ; BSR set to: 0
 33304                           ;Draw.c: 660: uint16_t backColor = 0x0000;
 33305  007822  0E00               	movlw	0
 33306  007824  6FA5               	movwf	(DrawSmallCalendar@backColor+1)& (0+255),b
 33307  007826  0E00               	movlw	0
 33308  007828  6FA4               	movwf	DrawSmallCalendar@backColor& (0+255),b
 33309                           
 33310                           ; BSR set to: 0
 33311                           ;Draw.c: 661: uint8_t thismonth;;Draw.c: 663: if (month == Bcd2Hex(DateTime[5])) thismon
      +                          th = 1;
 33312  00782A  0102               	movlb	2	; () banked
 33313  00782C  51FB               	movf	(_DateTime+5)& (0+255),w,b
 33314  00782E  EC84  F07A         	call	_Bcd2Hex
 33315  007832  0100               	movlb	0	; () banked
 33316  007834  1989               	xorwf	DrawSmallCalendar@month& (0+255),w,b
 33317  007836  A4D8               	btfss	status,2,c
 33318  007838  D002               	goto	l22221
 33319                           
 33320                           ; BSR set to: 0
 33321  00783A  0E01               	movlw	1
 33322  00783C  D001               	goto	L33
 33323  00783E                     l22221:
 33324                           
 33325                           ; BSR set to: 0
 33326                           ;Draw.c: 664: else thismonth = 0;
 33327  00783E  0E00               	movlw	0
 33328  007840                     L33:
 33329  007840  6F96               	movwf	DrawSmallCalendar@thismonth& (0+255),b
 33330                           
 33331                           ; BSR set to: 0
 33332                           ;Draw.c: 666: fontw = 6;
 33333  007842  0E06               	movlw	6
 33334  007844  6FA6               	movwf	DrawSmallCalendar@fontw& (0+255),b
 33335                           
 33336                           ; BSR set to: 0
 33337                           ;Draw.c: 668: ypitch = fonth+2;
 33338  007846  0E0A               	movlw	10
 33339  007848  6F9F               	movwf	DrawSmallCalendar@ypitch& (0+255),b
 33340                           
 33341                           ; BSR set to: 0
 33342                           ;Draw.c: 670: yr = year;
 33343  00784A  C092  F09D         	movff	DrawSmallCalendar@year,DrawSmallCalendar@yr
 33344                           
 33345                           ; BSR set to: 0
 33346                           ;Draw.c: 671: mm = month;
 33347  00784E  C089  F09E         	movff	DrawSmallCalendar@month,DrawSmallCalendar@mm
 33348                           
 33349                           ; BSR set to: 0
 33350                           ;Draw.c: 672: dd = 1;
 33351  007852  0E01               	movlw	1
 33352  007854  6FA0               	movwf	DrawSmallCalendar@dd& (0+255),b
 33353                           
 33354                           ; BSR set to: 0
 33355                           ;Draw.c: 673: wd = getWeekdays(&yr, &mm, &dd);
 33356  007856  0E9D               	movlw	low DrawSmallCalendar@yr
 33357  007858  6F6E               	movwf	getWeekdays@year& (0+255),b
 33358  00785A  0E9E               	movlw	low DrawSmallCalendar@mm
 33359  00785C  6F6F               	movwf	getWeekdays@month& (0+255),b
 33360  00785E  0EA0               	movlw	low DrawSmallCalendar@dd
 33361  007860  6F70               	movwf	getWeekdays@day& (0+255),b
 33362  007862  ECE7  F060         	call	_getWeekdays	;wreg free
 33363  007866  6F94               	movwf	DrawSmallCalendar@wd& (0+255),b
 33364                           
 33365                           ; BSR set to: 0
 33366                           ;Draw.c: 675: startday = 1- wd;
 33367  007868  5194               	movf	DrawSmallCalendar@wd& (0+255),w,b
 33368  00786A  0801               	sublw	1
 33369  00786C  6FA1               	movwf	DrawSmallCalendar@startday& (0+255),b
 33370                           
 33371                           ; BSR set to: 0
 33372                           ;Draw.c: 677: dd = 31;
 33373  00786E  0E1F               	movlw	31
 33374  007870  6FA0               	movwf	DrawSmallCalendar@dd& (0+255),b
 33375                           
 33376                           ; BSR set to: 0
 33377                           ;Draw.c: 678: getWeekdays(&yr, &mm, &dd);
 33378  007872  0E9D               	movlw	low DrawSmallCalendar@yr
 33379  007874  6F6E               	movwf	getWeekdays@year& (0+255),b
 33380  007876  0E9E               	movlw	low DrawSmallCalendar@mm
 33381  007878  6F6F               	movwf	getWeekdays@month& (0+255),b
 33382  00787A  0EA0               	movlw	low DrawSmallCalendar@dd
 33383  00787C  6F70               	movwf	getWeekdays@day& (0+255),b
 33384  00787E  ECE7  F060         	call	_getWeekdays	;wreg free
 33385                           
 33386                           ; BSR set to: 0
 33387                           ;Draw.c: 680: if (month != mm) {
 33388  007882  519E               	movf	DrawSmallCalendar@mm& (0+255),w,b
 33389  007884  1989               	xorwf	DrawSmallCalendar@month& (0+255),w,b
 33390  007886  B4D8               	btfsc	status,2,c
 33391  007888  D003               	goto	l22243
 33392                           
 33393                           ; BSR set to: 0
 33394                           ;Draw.c: 681: maxdays = 31 - dd;
 33395  00788A  51A0               	movf	DrawSmallCalendar@dd& (0+255),w,b
 33396  00788C  081F               	sublw	31
 33397  00788E  D001               	goto	L34
 33398  007890                     l22243:
 33399                           
 33400                           ; BSR set to: 0
 33401                           ;Draw.c: 683: maxdays = 31;
 33402  007890  0E1F               	movlw	31
 33403  007892                     L34:
 33404  007892  6F95               	movwf	DrawSmallCalendar@maxdays& (0+255),b
 33405                           
 33406                           ; BSR set to: 0
 33407                           ;Draw.c: 684: };Draw.c: 687: lcd_fill_rect(xs-1, ys, xs+fontw*14+7, ys+ypitch*8, backCol
      +                          or);
 33408  007894  0EFF               	movlw	255
 33409  007896  258A               	addwf	DrawSmallCalendar@xs& (0+255),w,b
 33410  007898  6E19               	movwf	lcd_fill_rect@x0^0,c
 33411  00789A  0EFF               	movlw	255
 33412  00789C  218B               	addwfc	(DrawSmallCalendar@xs+1)& (0+255),w,b
 33413  00789E  6E1A               	movwf	(lcd_fill_rect@x0+1)^0,c
 33414  0078A0  C08C  F01B         	movff	DrawSmallCalendar@ys,lcd_fill_rect@y0
 33415  0078A4  C08D  F01C         	movff	DrawSmallCalendar@ys+1,lcd_fill_rect@y0+1
 33416  0078A8  0E5B               	movlw	91
 33417  0078AA  258A               	addwf	DrawSmallCalendar@xs& (0+255),w,b
 33418  0078AC  6E1D               	movwf	lcd_fill_rect@x1^0,c
 33419  0078AE  0E00               	movlw	0
 33420  0078B0  218B               	addwfc	(DrawSmallCalendar@xs+1)& (0+255),w,b
 33421  0078B2  6E1E               	movwf	(lcd_fill_rect@x1+1)^0,c
 33422  0078B4  0E50               	movlw	80
 33423  0078B6  258C               	addwf	DrawSmallCalendar@ys& (0+255),w,b
 33424  0078B8  6E1F               	movwf	lcd_fill_rect@y1^0,c
 33425  0078BA  0E00               	movlw	0
 33426  0078BC  218D               	addwfc	(DrawSmallCalendar@ys+1)& (0+255),w,b
 33427  0078BE  6E20               	movwf	(lcd_fill_rect@y1+1)^0,c
 33428  0078C0  0E00               	movlw	0
 33429  0078C2  6E22               	movwf	(lcd_fill_rect@color+1)^0,c
 33430  0078C4  0E00               	movlw	0
 33431  0078C6  6E21               	movwf	lcd_fill_rect@color^0,c
 33432  0078C8  EC21  F05E         	call	_lcd_fill_rect	;wreg free
 33433                           
 33434                           ;Draw.c: 689: yy = ys;
 33435  0078CC  C08C  F0A7         	movff	DrawSmallCalendar@ys,DrawSmallCalendar@yy
 33436  0078D0  C08D  F0A8         	movff	DrawSmallCalendar@ys+1,DrawSmallCalendar@yy+1
 33437                           
 33438                           ;Draw.c: 690: xx = xs+3 + 3*(fontw*2);
 33439  0078D4  0E27               	movlw	39
 33440  0078D6  0100               	movlb	0	; () banked
 33441  0078D8  258A               	addwf	DrawSmallCalendar@xs& (0+255),w,b
 33442  0078DA  6FA9               	movwf	DrawSmallCalendar@xx& (0+255),b
 33443  0078DC  0E00               	movlw	0
 33444  0078DE  218B               	addwfc	(DrawSmallCalendar@xs+1)& (0+255),w,b
 33445  0078E0  6FAA               	movwf	(DrawSmallCalendar@xx+1)& (0+255),b
 33446                           
 33447                           ; BSR set to: 0
 33448                           ;Draw.c: 691: if (month <10) xx = xx + fontw/2;
 33449  0078E2  0E0A               	movlw	10
 33450  0078E4  6189               	cpfslt	DrawSmallCalendar@month& (0+255),b
 33451  0078E6  D006               	goto	l22255
 33452                           
 33453                           ; BSR set to: 0
 33454  0078E8  0E03               	movlw	3
 33455  0078EA  25A9               	addwf	DrawSmallCalendar@xx& (0+255),w,b
 33456  0078EC  6FA9               	movwf	DrawSmallCalendar@xx& (0+255),b
 33457  0078EE  0E00               	movlw	0
 33458  0078F0  21AA               	addwfc	(DrawSmallCalendar@xx+1)& (0+255),w,b
 33459  0078F2  6FAA               	movwf	(DrawSmallCalendar@xx+1)& (0+255),b
 33460  0078F4                     l22255:
 33461                           
 33462                           ; BSR set to: 0
 33463                           ;Draw.c: 692: sprintf(str, "%d", month);
 33464  0078F4  0E97               	movlw	low DrawSmallCalendar@str
 33465  0078F6  6E2A               	movwf	sprintf@sp^0,c
 33466  0078F8  6A2B               	clrf	(sprintf@sp+1)^0,c
 33467  0078FA  0EF8               	movlw	low STR_18
 33468  0078FC  6E2C               	movwf	sprintf@f^0,c
 33469  0078FE  0EFF               	movlw	high STR_18
 33470  007900  6E2D               	movwf	(sprintf@f+1)^0,c
 33471  007902  C089  F02E         	movff	DrawSmallCalendar@month,?_sprintf+4
 33472  007906  6A2F               	clrf	(?_sprintf+5)^0,c
 33473  007908  ECD0  F028         	call	_sprintf	;wreg free
 33474                           
 33475                           ; BSR set to: 0
 33476                           ;Draw.c: 693: display_drawChars(xx, yy, str, color, backColor, 1);
 33477  00790C  C0A9  F06A         	movff	DrawSmallCalendar@xx,display_drawChars@x
 33478  007910  C0AA  F06B         	movff	DrawSmallCalendar@xx+1,display_drawChars@x+1
 33479  007914  C0A7  F06C         	movff	DrawSmallCalendar@yy,display_drawChars@y
 33480  007918  C0A8  F06D         	movff	DrawSmallCalendar@yy+1,display_drawChars@y+1
 33481  00791C  0E97               	movlw	low DrawSmallCalendar@str
 33482  00791E  6F6E               	movwf	display_drawChars@s& (0+255),b
 33483  007920  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 33484  007922  0EFF               	movlw	255
 33485  007924  6F71               	movwf	(display_drawChars@color+1)& (0+255),b
 33486  007926  6970               	setf	display_drawChars@color& (0+255),b
 33487  007928  0E00               	movlw	0
 33488  00792A  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
 33489  00792C  0E00               	movlw	0
 33490  00792E  6F72               	movwf	display_drawChars@bg& (0+255),b
 33491  007930  0E01               	movlw	1
 33492  007932  6F74               	movwf	display_drawChars@size& (0+255),b
 33493  007934  EC13  F06D         	call	_display_drawChars	;wreg free
 33494                           
 33495                           ;Draw.c: 694: yy += ypitch;
 33496  007938  0E0A               	movlw	10
 33497  00793A  0100               	movlb	0	; () banked
 33498  00793C  27A7               	addwf	DrawSmallCalendar@yy& (0+255),f,b
 33499  00793E  0E00               	movlw	0
 33500  007940  23A8               	addwfc	(DrawSmallCalendar@yy+1)& (0+255),f,b
 33501                           
 33502                           ;Draw.c: 697: xx = xs+3;
 33503  007942  0E03               	movlw	3
 33504  007944  258A               	addwf	DrawSmallCalendar@xs& (0+255),w,b
 33505  007946  6FA9               	movwf	DrawSmallCalendar@xx& (0+255),b
 33506  007948  0E00               	movlw	0
 33507  00794A  218B               	addwfc	(DrawSmallCalendar@xs+1)& (0+255),w,b
 33508  00794C  6FAA               	movwf	(DrawSmallCalendar@xx+1)& (0+255),b
 33509                           
 33510                           ; BSR set to: 0
 33511                           ;Draw.c: 698: for (jj=0; jj<7; jj++) {
 33512  00794E  0E00               	movlw	0
 33513  007950  6FAB               	movwf	DrawSmallCalendar@jj& (0+255),b
 33514  007952                     l22261:
 33515                           
 33516                           ; BSR set to: 0
 33517  007952  0E06               	movlw	6
 33518  007954  65AB               	cpfsgt	DrawSmallCalendar@jj& (0+255),b
 33519  007956  D001               	goto	l22265
 33520  007958  D037               	goto	l22273
 33521  00795A                     l22265:
 33522                           
 33523                           ; BSR set to: 0
 33524                           ;Draw.c: 700: sprintf(str, "%c", 0x80+jj);
 33525  00795A  0E97               	movlw	low DrawSmallCalendar@str
 33526  00795C  6E2A               	movwf	sprintf@sp^0,c
 33527  00795E  6A2B               	clrf	(sprintf@sp+1)^0,c
 33528  007960  0EF5               	movlw	low STR_22
 33529  007962  6E2C               	movwf	sprintf@f^0,c
 33530  007964  0EFF               	movlw	high STR_22
 33531  007966  6E2D               	movwf	(sprintf@f+1)^0,c
 33532  007968  0E80               	movlw	128
 33533  00796A  25AB               	addwf	DrawSmallCalendar@jj& (0+255),w,b
 33534  00796C  6E2E               	movwf	(?_sprintf+4)^0,c
 33535  00796E  6A2F               	clrf	(?_sprintf+5)^0,c
 33536  007970  0E00               	movlw	0
 33537  007972  222F               	addwfc	(?_sprintf+5)^0,f,c
 33538  007974  ECD0  F028         	call	_sprintf	;wreg free
 33539                           
 33540                           ;Draw.c: 701: display_drawChars(xx, yy, str, color, backColor, 1);
 33541  007978  C0A9  F06A         	movff	DrawSmallCalendar@xx,display_drawChars@x
 33542  00797C  C0AA  F06B         	movff	DrawSmallCalendar@xx+1,display_drawChars@x+1
 33543  007980  C0A7  F06C         	movff	DrawSmallCalendar@yy,display_drawChars@y
 33544  007984  C0A8  F06D         	movff	DrawSmallCalendar@yy+1,display_drawChars@y+1
 33545  007988  0E97               	movlw	low DrawSmallCalendar@str
 33546  00798A  6F6E               	movwf	display_drawChars@s& (0+255),b
 33547  00798C  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 33548  00798E  C0A2  F070         	movff	DrawSmallCalendar@color,display_drawChars@color
 33549  007992  C0A3  F071         	movff	DrawSmallCalendar@color+1,display_drawChars@color+1
 33550  007996  C0A4  F072         	movff	DrawSmallCalendar@backColor,display_drawChars@bg
 33551  00799A  C0A5  F073         	movff	DrawSmallCalendar@backColor+1,display_drawChars@bg+1
 33552  00799E  0E01               	movlw	1
 33553  0079A0  6F74               	movwf	display_drawChars@size& (0+255),b
 33554  0079A2  EC13  F06D         	call	_display_drawChars	;wreg free
 33555                           
 33556                           ;Draw.c: 702: xx += fontw * 2 +1;
 33557  0079A6  0100               	movlb	0	; () banked
 33558  0079A8  51A6               	movf	DrawSmallCalendar@fontw& (0+255),w,b
 33559  0079AA  6F8E               	movwf	??_DrawSmallCalendar& (0+255),b
 33560  0079AC  6B8F               	clrf	(??_DrawSmallCalendar+1)& (0+255),b
 33561  0079AE  90D8               	bcf	status,0,c
 33562  0079B0  378E               	rlcf	??_DrawSmallCalendar& (0+255),f,b
 33563  0079B2  378F               	rlcf	(??_DrawSmallCalendar+1)& (0+255),f,b
 33564  0079B4  0E01               	movlw	1
 33565  0079B6  278E               	addwf	??_DrawSmallCalendar& (0+255),f,b
 33566  0079B8  0E00               	movlw	0
 33567  0079BA  238F               	addwfc	(??_DrawSmallCalendar+1)& (0+255),f,b
 33568  0079BC  518E               	movf	??_DrawSmallCalendar& (0+255),w,b
 33569  0079BE  27A9               	addwf	DrawSmallCalendar@xx& (0+255),f,b
 33570  0079C0  518F               	movf	(??_DrawSmallCalendar+1)& (0+255),w,b
 33571  0079C2  23AA               	addwfc	(DrawSmallCalendar@xx+1)& (0+255),f,b
 33572                           
 33573                           ; BSR set to: 0
 33574  0079C4  2BAB               	incf	DrawSmallCalendar@jj& (0+255),f,b
 33575  0079C6  D7C5               	goto	l22261
 33576  0079C8                     l22273:
 33577                           
 33578                           ; BSR set to: 0
 33579                           ;Draw.c: 703: };Draw.c: 706: yy += ypitch;
 33580  0079C8  519F               	movf	DrawSmallCalendar@ypitch& (0+255),w,b
 33581  0079CA  27A7               	addwf	DrawSmallCalendar@yy& (0+255),f,b
 33582  0079CC  0E00               	movlw	0
 33583  0079CE  23A8               	addwfc	(DrawSmallCalendar@yy+1)& (0+255),f,b
 33584                           
 33585                           ; BSR set to: 0
 33586                           ;Draw.c: 707: for (kk = 0; kk<6; kk++) {
 33587  0079D0  0E00               	movlw	0
 33588  0079D2  6F9C               	movwf	DrawSmallCalendar@kk& (0+255),b
 33589  0079D4                     l22277:
 33590                           
 33591                           ; BSR set to: 0
 33592  0079D4  0E05               	movlw	5
 33593  0079D6  659C               	cpfsgt	DrawSmallCalendar@kk& (0+255),b
 33594  0079D8  D001               	goto	l2989
 33595  0079DA  0012               	return	
 33596  0079DC                     l2989:
 33597                           
 33598                           ; BSR set to: 0
 33599                           ;Draw.c: 708: xx = xs;
 33600  0079DC  C08A  F0A9         	movff	DrawSmallCalendar@xs,DrawSmallCalendar@xx
 33601  0079E0  C08B  F0AA         	movff	DrawSmallCalendar@xs+1,DrawSmallCalendar@xx+1
 33602                           
 33603                           ; BSR set to: 0
 33604                           ;Draw.c: 709: for (jj = 0; jj < 7; jj++) {
 33605  0079E4  0E00               	movlw	0
 33606  0079E6  6FAB               	movwf	DrawSmallCalendar@jj& (0+255),b
 33607  0079E8                     l22283:
 33608                           
 33609                           ; BSR set to: 0
 33610  0079E8  0E06               	movlw	6
 33611  0079EA  65AB               	cpfsgt	DrawSmallCalendar@jj& (0+255),b
 33612  0079EC  D001               	goto	l22287
 33613  0079EE  D0AB               	goto	l22323
 33614  0079F0                     l22287:
 33615                           
 33616                           ; BSR set to: 0
 33617                           ;Draw.c: 710: if (startday > 0 && startday <= maxdays) {
 33618  0079F0  51A1               	movf	DrawSmallCalendar@startday& (0+255),w,b
 33619  0079F2  0A80               	xorlw	128
 33620  0079F4  0F7F               	addlw	-129
 33621  0079F6  A0D8               	btfss	status,0,c
 33622  0079F8  D094               	goto	l22315
 33623                           
 33624                           ; BSR set to: 0
 33625  0079FA  5195               	movf	DrawSmallCalendar@maxdays& (0+255),w,b
 33626  0079FC  0A80               	xorlw	128
 33627  0079FE  6F8E               	movwf	??_DrawSmallCalendar& (0+255),b
 33628  007A00  51A1               	movf	DrawSmallCalendar@startday& (0+255),w,b
 33629  007A02  0A80               	xorlw	128
 33630  007A04  5D8E               	subwf	??_DrawSmallCalendar& (0+255),w,b
 33631  007A06  A0D8               	btfss	status,0,c
 33632  007A08  D08C               	goto	l22315
 33633                           
 33634                           ; BSR set to: 0
 33635                           ;Draw.c: 711: sprintf(str, "%2d", startday);
 33636  007A0A  0E97               	movlw	low DrawSmallCalendar@str
 33637  007A0C  6E2A               	movwf	sprintf@sp^0,c
 33638  007A0E  6A2B               	clrf	(sprintf@sp+1)^0,c
 33639  007A10  0EE7               	movlw	low STR_23
 33640  007A12  6E2C               	movwf	sprintf@f^0,c
 33641  007A14  0EFF               	movlw	high STR_23
 33642  007A16  6E2D               	movwf	(sprintf@f+1)^0,c
 33643  007A18  51A1               	movf	DrawSmallCalendar@startday& (0+255),w,b
 33644  007A1A  6E2E               	movwf	(?_sprintf+4)^0,c
 33645  007A1C  6A2F               	clrf	(?_sprintf+5)^0,c
 33646  007A1E  BE2E               	btfsc	(?_sprintf+4)^0,7,c
 33647  007A20  062F               	decf	(?_sprintf+5)^0,f,c
 33648  007A22  ECD0  F028         	call	_sprintf	;wreg free
 33649                           
 33650                           ; BSR set to: 0
 33651                           ;Draw.c: 712: if (jj==0) color = 0xF800;
 33652  007A26  51AB               	movf	DrawSmallCalendar@jj& (0+255),w,b
 33653  007A28  A4D8               	btfss	status,2,c
 33654  007A2A  D004               	goto	l22297
 33655                           
 33656                           ; BSR set to: 0
 33657  007A2C  0EF8               	movlw	248
 33658  007A2E  6FA3               	movwf	(DrawSmallCalendar@color+1)& (0+255),b
 33659  007A30  0E00               	movlw	0
 33660  007A32  D007               	goto	L35
 33661  007A34                     l22297:
 33662                           
 33663                           ; BSR set to: 0
 33664                           ;Draw.c: 713: else if (jj==6) color = 0x001F;
 33665  007A34  0E06               	movlw	6
 33666  007A36  19AB               	xorwf	DrawSmallCalendar@jj& (0+255),w,b
 33667  007A38  A4D8               	btfss	status,2,c
 33668  007A3A  D005               	goto	l2996
 33669                           
 33670                           ; BSR set to: 0
 33671  007A3C  0E00               	movlw	0
 33672  007A3E  6FA3               	movwf	(DrawSmallCalendar@color+1)& (0+255),b
 33673  007A40  0E1F               	movlw	31
 33674  007A42                     L35:
 33675  007A42  6FA2               	movwf	DrawSmallCalendar@color& (0+255),b
 33676  007A44  D002               	goto	l22301
 33677  007A46                     l2996:
 33678                           
 33679                           ; BSR set to: 0
 33680                           ;Draw.c: 714: else color = 0xFFFF;
 33681  007A46  69A2               	setf	DrawSmallCalendar@color& (0+255),b
 33682  007A48  69A3               	setf	(DrawSmallCalendar@color+1)& (0+255),b
 33683  007A4A                     l22301:
 33684                           
 33685                           ; BSR set to: 0
 33686                           ;Draw.c: 716: display_SetFont(tinyfont);
 33687  007A4A  0E1D               	movlw	low _tinyfont
 33688  007A4C  6E0E               	movwf	display_SetFont@font^0,c
 33689  007A4E  0EFE               	movlw	high _tinyfont
 33690  007A50  6E0F               	movwf	(display_SetFont@font+1)^0,c
 33691  007A52  EC92  F071         	call	_display_SetFont	;wreg free
 33692                           
 33693                           ;Draw.c: 717: if (thismonth && (startday == Bcd2Hex(DateTime[4]))) {
 33694  007A56  0100               	movlb	0	; () banked
 33695  007A58  5196               	movf	DrawSmallCalendar@thismonth& (0+255),w,b
 33696  007A5A  B4D8               	btfsc	status,2,c
 33697  007A5C  D045               	goto	l22311
 33698                           
 33699                           ; BSR set to: 0
 33700  007A5E  0102               	movlb	2	; () banked
 33701  007A60  51FA               	movf	(_DateTime+4)& (0+255),w,b
 33702  007A62  EC84  F07A         	call	_Bcd2Hex
 33703  007A66  0100               	movlb	0	; () banked
 33704  007A68  6F8E               	movwf	??_DrawSmallCalendar& (0+255),b
 33705  007A6A  6B8F               	clrf	(??_DrawSmallCalendar+1)& (0+255),b
 33706  007A6C  C0A1  F090         	movff	DrawSmallCalendar@startday,??_DrawSmallCalendar+2
 33707  007A70  6B91               	clrf	(??_DrawSmallCalendar+3)& (0+255),b
 33708  007A72  BF90               	btfsc	(??_DrawSmallCalendar+2)& (0+255),7,b
 33709  007A74  0791               	decf	(??_DrawSmallCalendar+3)& (0+255),f,b
 33710  007A76  518E               	movf	??_DrawSmallCalendar& (0+255),w,b
 33711  007A78  1990               	xorwf	(??_DrawSmallCalendar+2)& (0+255),w,b
 33712  007A7A  E136               	bnz	l22311
 33713  007A7C  518F               	movf	(??_DrawSmallCalendar+1)& (0+255),w,b
 33714  007A7E  1991               	xorwf	(??_DrawSmallCalendar+3)& (0+255),w,b
 33715  007A80  A4D8               	btfss	status,2,c
 33716  007A82  D032               	goto	l22311
 33717                           
 33718                           ; BSR set to: 0
 33719                           ;Draw.c: 720: display_drawChars(xx, yy, str, color, backColor, 1);
 33720  007A84  C0A9  F06A         	movff	DrawSmallCalendar@xx,display_drawChars@x
 33721  007A88  C0AA  F06B         	movff	DrawSmallCalendar@xx+1,display_drawChars@x+1
 33722  007A8C  C0A7  F06C         	movff	DrawSmallCalendar@yy,display_drawChars@y
 33723  007A90  C0A8  F06D         	movff	DrawSmallCalendar@yy+1,display_drawChars@y+1
 33724  007A94  0E97               	movlw	low DrawSmallCalendar@str
 33725  007A96  6F6E               	movwf	display_drawChars@s& (0+255),b
 33726  007A98  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 33727  007A9A  C0A2  F070         	movff	DrawSmallCalendar@color,display_drawChars@color
 33728  007A9E  C0A3  F071         	movff	DrawSmallCalendar@color+1,display_drawChars@color+1
 33729  007AA2  C0A4  F072         	movff	DrawSmallCalendar@backColor,display_drawChars@bg
 33730  007AA6  C0A5  F073         	movff	DrawSmallCalendar@backColor+1,display_drawChars@bg+1
 33731  007AAA  0E01               	movlw	1
 33732  007AAC  6F74               	movwf	display_drawChars@size& (0+255),b
 33733  007AAE  EC13  F06D         	call	_display_drawChars	;wreg free
 33734                           
 33735                           ;Draw.c: 721: display_drawRect(xx-1, yy-2, 14, 11, 0xFFFF);
 33736  007AB2  0EFF               	movlw	255
 33737  007AB4  0100               	movlb	0	; () banked
 33738  007AB6  25A9               	addwf	DrawSmallCalendar@xx& (0+255),w,b
 33739  007AB8  6E27               	movwf	display_drawRect@x^0,c
 33740  007ABA  0EFF               	movlw	255
 33741  007ABC  21AA               	addwfc	(DrawSmallCalendar@xx+1)& (0+255),w,b
 33742  007ABE  6E28               	movwf	(display_drawRect@x+1)^0,c
 33743  007AC0  0EFE               	movlw	254
 33744  007AC2  25A7               	addwf	DrawSmallCalendar@yy& (0+255),w,b
 33745  007AC4  6E29               	movwf	display_drawRect@y^0,c
 33746  007AC6  0EFF               	movlw	255
 33747  007AC8  21A8               	addwfc	(DrawSmallCalendar@yy+1)& (0+255),w,b
 33748  007ACA  6E2A               	movwf	(display_drawRect@y+1)^0,c
 33749  007ACC  0E00               	movlw	0
 33750  007ACE  6E2C               	movwf	(display_drawRect@w+1)^0,c
 33751  007AD0  0E0E               	movlw	14
 33752  007AD2  6E2B               	movwf	display_drawRect@w^0,c
 33753  007AD4  0E00               	movlw	0
 33754  007AD6  6E2E               	movwf	(display_drawRect@h+1)^0,c
 33755  007AD8  0E0B               	movlw	11
 33756  007ADA  6E2D               	movwf	display_drawRect@h^0,c
 33757  007ADC  0EFF               	movlw	255
 33758  007ADE  6E30               	movwf	(display_drawRect@color+1)^0,c
 33759  007AE0  682F               	setf	display_drawRect@color^0,c
 33760  007AE2  EC6A  F066         	call	_display_drawRect	;wreg free
 33761                           
 33762                           ;Draw.c: 722: }
 33763  007AE6  D017               	goto	l22313
 33764  007AE8                     l22311:
 33765                           
 33766                           ; BSR set to: 0
 33767                           ;Draw.c: 723: else {;Draw.c: 724: display_drawChars(xx, yy, str, color, backColor, 1);
 33768  007AE8  C0A9  F06A         	movff	DrawSmallCalendar@xx,display_drawChars@x
 33769  007AEC  C0AA  F06B         	movff	DrawSmallCalendar@xx+1,display_drawChars@x+1
 33770  007AF0  C0A7  F06C         	movff	DrawSmallCalendar@yy,display_drawChars@y
 33771  007AF4  C0A8  F06D         	movff	DrawSmallCalendar@yy+1,display_drawChars@y+1
 33772  007AF8  0E97               	movlw	low DrawSmallCalendar@str
 33773  007AFA  6F6E               	movwf	display_drawChars@s& (0+255),b
 33774  007AFC  6B6F               	clrf	(display_drawChars@s+1)& (0+255),b
 33775  007AFE  C0A2  F070         	movff	DrawSmallCalendar@color,display_drawChars@color
 33776  007B02  C0A3  F071         	movff	DrawSmallCalendar@color+1,display_drawChars@color+1
 33777  007B06  C0A4  F072         	movff	DrawSmallCalendar@backColor,display_drawChars@bg
 33778  007B0A  C0A5  F073         	movff	DrawSmallCalendar@backColor+1,display_drawChars@bg+1
 33779  007B0E  0E01               	movlw	1
 33780  007B10  6F74               	movwf	display_drawChars@size& (0+255),b
 33781  007B12  EC13  F06D         	call	_display_drawChars	;wreg free
 33782  007B16                     l22313:
 33783                           
 33784                           ;Draw.c: 725: };Draw.c: 726: display_SetFont(font);
 33785  007B16  0ED5               	movlw	low _font
 33786  007B18  6E0E               	movwf	display_SetFont@font^0,c
 33787  007B1A  0EFA               	movlw	high _font
 33788  007B1C  6E0F               	movwf	(display_SetFont@font+1)^0,c
 33789  007B1E  EC92  F071         	call	_display_SetFont	;wreg free
 33790  007B22                     l22315:
 33791                           
 33792                           ;Draw.c: 727: };Draw.c: 728: startday++;
 33793  007B22  0100               	movlb	0	; () banked
 33794  007B24  2BA1               	incf	DrawSmallCalendar@startday& (0+255),f,b
 33795                           
 33796                           ; BSR set to: 0
 33797                           ;Draw.c: 729: xx += fontw*2 +1;
 33798  007B26  51A6               	movf	DrawSmallCalendar@fontw& (0+255),w,b
 33799  007B28  6F8E               	movwf	??_DrawSmallCalendar& (0+255),b
 33800  007B2A  6B8F               	clrf	(??_DrawSmallCalendar+1)& (0+255),b
 33801  007B2C  90D8               	bcf	status,0,c
 33802  007B2E  378E               	rlcf	??_DrawSmallCalendar& (0+255),f,b
 33803  007B30  378F               	rlcf	(??_DrawSmallCalendar+1)& (0+255),f,b
 33804  007B32  0E01               	movlw	1
 33805  007B34  278E               	addwf	??_DrawSmallCalendar& (0+255),f,b
 33806  007B36  0E00               	movlw	0
 33807  007B38  238F               	addwfc	(??_DrawSmallCalendar+1)& (0+255),f,b
 33808  007B3A  518E               	movf	??_DrawSmallCalendar& (0+255),w,b
 33809  007B3C  27A9               	addwf	DrawSmallCalendar@xx& (0+255),f,b
 33810  007B3E  518F               	movf	(??_DrawSmallCalendar+1)& (0+255),w,b
 33811  007B40  23AA               	addwfc	(DrawSmallCalendar@xx+1)& (0+255),f,b
 33812                           
 33813                           ; BSR set to: 0
 33814  007B42  2BAB               	incf	DrawSmallCalendar@jj& (0+255),f,b
 33815  007B44  D751               	goto	l22283
 33816  007B46                     l22323:
 33817                           
 33818                           ; BSR set to: 0
 33819                           ;Draw.c: 730: };Draw.c: 731: yy += ypitch;
 33820  007B46  519F               	movf	DrawSmallCalendar@ypitch& (0+255),w,b
 33821  007B48  27A7               	addwf	DrawSmallCalendar@yy& (0+255),f,b
 33822  007B4A  0E00               	movlw	0
 33823  007B4C  23A8               	addwfc	(DrawSmallCalendar@yy+1)& (0+255),f,b
 33824                           
 33825                           ; BSR set to: 0
 33826  007B4E  2B9C               	incf	DrawSmallCalendar@kk& (0+255),f,b
 33827  007B50  D741               	goto	l22277
 33828  007B52                     __end_of_DrawSmallCalendar:
 33829                           	callstack 0
 33830                           
 33831 ;; *************** function _display_drawRect *****************
 33832 ;; Defined at:
 33833 ;;		line 599 in file "LCD320x240color.c"
 33834 ;; Parameters:    Size  Location     Type
 33835 ;;  x               2   38[COMRAM] unsigned int 
 33836 ;;  y               2   40[COMRAM] unsigned int 
 33837 ;;  w               2   42[COMRAM] unsigned int 
 33838 ;;  h               2   44[COMRAM] unsigned int 
 33839 ;;  color           2   46[COMRAM] unsigned int 
 33840 ;; Auto vars:     Size  Location     Type
 33841 ;;		None
 33842 ;; Return value:  Size  Location     Type
 33843 ;;                  1    wreg      void 
 33844 ;; Registers used:
 33845 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33846 ;; Tracked objects:
 33847 ;;		On entry : 3F/0
 33848 ;;		On exit  : 0/0
 33849 ;;		Unchanged: 0/0
 33850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33851 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33854 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33855 ;;Total ram usage:       12 bytes
 33856 ;; Hardware stack levels used:    1
 33857 ;; Hardware stack levels required when called:   11
 33858 ;; This function calls:
 33859 ;;		_drawHLine
 33860 ;;		_drawVLine
 33861 ;; This function is called by:
 33862 ;;		_DrawBigCalendar
 33863 ;;		_DrawSmallCalendar
 33864 ;; This function uses a non-reentrant model
 33865 ;;
 33866                           
 33867                           	psect	text116
 33868  00CCD4                     __ptext116:
 33869                           	callstack 0
 33870  00CCD4                     _display_drawRect:
 33871                           	callstack 16
 33872                           
 33873                           ; BSR set to: 0
 33874                           ;LCD320x240color.c: 601: drawHLine(x, y, w, color);
 33875                           
 33876                           ; BSR set to: 0
 33877                           ;incstack = 0
 33878  00CCD4  C027  F019         	movff	display_drawRect@x,drawHLine@x
 33879  00CCD8  C028  F01A         	movff	display_drawRect@x+1,drawHLine@x+1
 33880  00CCDC  C029  F01B         	movff	display_drawRect@y,drawHLine@y
 33881  00CCE0  C02A  F01C         	movff	display_drawRect@y+1,drawHLine@y+1
 33882  00CCE4  C02B  F01D         	movff	display_drawRect@w,drawHLine@w
 33883  00CCE8  C02C  F01E         	movff	display_drawRect@w+1,drawHLine@w+1
 33884  00CCEC  C02F  F01F         	movff	display_drawRect@color,drawHLine@color
 33885  00CCF0  C030  F020         	movff	display_drawRect@color+1,drawHLine@color+1
 33886  00CCF4  EC30  F064         	call	_drawHLine	;wreg free
 33887                           
 33888                           ;LCD320x240color.c: 602: drawHLine(x, y+h-1, w, color);
 33889  00CCF8  C027  F019         	movff	display_drawRect@x,drawHLine@x
 33890  00CCFC  C028  F01A         	movff	display_drawRect@x+1,drawHLine@x+1
 33891  00CD00  502D               	movf	display_drawRect@h^0,w,c
 33892  00CD02  2429               	addwf	display_drawRect@y^0,w,c
 33893  00CD04  6E31               	movwf	??_display_drawRect^0,c
 33894  00CD06  502E               	movf	(display_drawRect@h+1)^0,w,c
 33895  00CD08  202A               	addwfc	(display_drawRect@y+1)^0,w,c
 33896  00CD0A  6E32               	movwf	(??_display_drawRect+1)^0,c
 33897  00CD0C  0EFF               	movlw	255
 33898  00CD0E  2431               	addwf	??_display_drawRect^0,w,c
 33899  00CD10  6E1B               	movwf	drawHLine@y^0,c
 33900  00CD12  0EFF               	movlw	255
 33901  00CD14  2032               	addwfc	(??_display_drawRect+1)^0,w,c
 33902  00CD16  6E1C               	movwf	(drawHLine@y+1)^0,c
 33903  00CD18  C02B  F01D         	movff	display_drawRect@w,drawHLine@w
 33904  00CD1C  C02C  F01E         	movff	display_drawRect@w+1,drawHLine@w+1
 33905  00CD20  C02F  F01F         	movff	display_drawRect@color,drawHLine@color
 33906  00CD24  C030  F020         	movff	display_drawRect@color+1,drawHLine@color+1
 33907  00CD28  EC30  F064         	call	_drawHLine	;wreg free
 33908                           
 33909                           ;LCD320x240color.c: 603: drawVLine(x, y, h, color);
 33910  00CD2C  C027  F019         	movff	display_drawRect@x,drawVLine@x
 33911  00CD30  C028  F01A         	movff	display_drawRect@x+1,drawVLine@x+1
 33912  00CD34  C029  F01B         	movff	display_drawRect@y,drawVLine@y
 33913  00CD38  C02A  F01C         	movff	display_drawRect@y+1,drawVLine@y+1
 33914  00CD3C  C02D  F01D         	movff	display_drawRect@h,drawVLine@h
 33915  00CD40  C02E  F01E         	movff	display_drawRect@h+1,drawVLine@h+1
 33916  00CD44  C02F  F01F         	movff	display_drawRect@color,drawVLine@color
 33917  00CD48  C030  F020         	movff	display_drawRect@color+1,drawVLine@color+1
 33918  00CD4C  ECCC  F063         	call	_drawVLine	;wreg free
 33919                           
 33920                           ;LCD320x240color.c: 604: drawVLine(x+w-1, y, h, color);
 33921  00CD50  502B               	movf	display_drawRect@w^0,w,c
 33922  00CD52  2427               	addwf	display_drawRect@x^0,w,c
 33923  00CD54  6E31               	movwf	??_display_drawRect^0,c
 33924  00CD56  502C               	movf	(display_drawRect@w+1)^0,w,c
 33925  00CD58  2028               	addwfc	(display_drawRect@x+1)^0,w,c
 33926  00CD5A  6E32               	movwf	(??_display_drawRect+1)^0,c
 33927  00CD5C  0EFF               	movlw	255
 33928  00CD5E  2431               	addwf	??_display_drawRect^0,w,c
 33929  00CD60  6E19               	movwf	drawVLine@x^0,c
 33930  00CD62  0EFF               	movlw	255
 33931  00CD64  2032               	addwfc	(??_display_drawRect+1)^0,w,c
 33932  00CD66  6E1A               	movwf	(drawVLine@x+1)^0,c
 33933  00CD68  C029  F01B         	movff	display_drawRect@y,drawVLine@y
 33934  00CD6C  C02A  F01C         	movff	display_drawRect@y+1,drawVLine@y+1
 33935  00CD70  C02D  F01D         	movff	display_drawRect@h,drawVLine@h
 33936  00CD74  C02E  F01E         	movff	display_drawRect@h+1,drawVLine@h+1
 33937  00CD78  C02F  F01F         	movff	display_drawRect@color,drawVLine@color
 33938  00CD7C  C030  F020         	movff	display_drawRect@color+1,drawVLine@color+1
 33939  00CD80  ECCC  F063         	call	_drawVLine	;wreg free
 33940  00CD84  0012               	return		;funcret
 33941  00CD86                     __end_of_display_drawRect:
 33942                           	callstack 0
 33943                           
 33944 ;; *************** function _display_SetFont *****************
 33945 ;; Defined at:
 33946 ;;		line 248 in file "LCD320x240color.c"
 33947 ;; Parameters:    Size  Location     Type
 33948 ;;  font            2   13[COMRAM] PTR const unsigned char 
 33949 ;;		 -> tinyfont(74), font(840), 
 33950 ;; Auto vars:     Size  Location     Type
 33951 ;;		None
 33952 ;; Return value:  Size  Location     Type
 33953 ;;                  1    wreg      void 
 33954 ;; Registers used:
 33955 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 33956 ;; Tracked objects:
 33957 ;;		On entry : 0/2
 33958 ;;		On exit  : 0/0
 33959 ;;		Unchanged: 0/0
 33960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33961 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33963 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33964 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33965 ;;Total ram usage:        4 bytes
 33966 ;; Hardware stack levels used:    1
 33967 ;; Hardware stack levels required when called:    6
 33968 ;; This function calls:
 33969 ;;		Nothing
 33970 ;; This function is called by:
 33971 ;;		_TouchAdjMsg
 33972 ;;		_main
 33973 ;;		_DrawSmallCalendar
 33974 ;; This function uses a non-reentrant model
 33975 ;;
 33976                           
 33977                           	psect	text117
 33978  00E324                     __ptext117:
 33979                           	callstack 0
 33980  00E324                     _display_SetFont:
 33981                           	callstack 24
 33982                           
 33983                           ;LCD320x240color.c: 249: Font.xsize = font[0];
 33984                           
 33985                           ;incstack = 0
 33986  00E324  C00E  FFF6         	movff	display_SetFont@font,tblptrl
 33987  00E328  C00F  FFF7         	movff	display_SetFont@font+1,tblptrh
 33988  00E32C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 33989  00E32C  6AF8               	clrf	tblptru,c
 33990  00E32E                     	endif
 33991  00E32E                     	if	0	;tblptru may be non-zero
 33992  00E32E                     	endif
 33993  00E32E  0008               	tblrd		*
 33994  00E330  CFF5 F3E0          	movff	tablat,_Font
 33995                           
 33996                           ;LCD320x240color.c: 250: Font.ysize = font[1];
 33997  00E334  0E01               	movlw	1
 33998  00E336  240E               	addwf	display_SetFont@font^0,w,c
 33999  00E338  6E10               	movwf	??_display_SetFont^0,c
 34000  00E33A  0E00               	movlw	0
 34001  00E33C  200F               	addwfc	(display_SetFont@font+1)^0,w,c
 34002  00E33E  6E11               	movwf	(??_display_SetFont+1)^0,c
 34003  00E340  C010  FFF6         	movff	??_display_SetFont,tblptrl
 34004  00E344  C011  FFF7         	movff	??_display_SetFont+1,tblptrh
 34005  00E348                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 34006  00E348  6AF8               	clrf	tblptru,c
 34007  00E34A                     	endif
 34008  00E34A                     	if	0	;tblptru may be non-zero
 34009  00E34A                     	endif
 34010  00E34A  0008               	tblrd		*
 34011  00E34C  CFF5 F3E1          	movff	tablat,_Font+1
 34012                           
 34013                           ;LCD320x240color.c: 251: Font.xpitch = Font.xsize;
 34014  00E350  C3E0  F3E2         	movff	_Font,_Font+2
 34015                           
 34016                           ;LCD320x240color.c: 252: Font.ypitch = Font.ysize;
 34017  00E354  C3E1  F3E3         	movff	_Font+1,_Font+3
 34018                           
 34019                           ;LCD320x240color.c: 253: Font.font = font;
 34020  00E358  C00E  F3E4         	movff	display_SetFont@font,_Font+4
 34021  00E35C  C00F  F3E5         	movff	display_SetFont@font+1,_Font+5
 34022                           
 34023                           ;LCD320x240color.c: 254: Font.offset = font[4];
 34024  00E360  0E04               	movlw	4
 34025  00E362  240E               	addwf	display_SetFont@font^0,w,c
 34026  00E364  6E10               	movwf	??_display_SetFont^0,c
 34027  00E366  0E00               	movlw	0
 34028  00E368  200F               	addwfc	(display_SetFont@font+1)^0,w,c
 34029  00E36A  6E11               	movwf	(??_display_SetFont+1)^0,c
 34030  00E36C  C010  FFF6         	movff	??_display_SetFont,tblptrl
 34031  00E370  C011  FFF7         	movff	??_display_SetFont+1,tblptrh
 34032  00E374                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 34033  00E374  6AF8               	clrf	tblptru,c
 34034  00E376                     	endif
 34035  00E376                     	if	0	;tblptru may be non-zero
 34036  00E376                     	endif
 34037  00E376  0008               	tblrd		*
 34038  00E378  CFF5 F3E6          	movff	tablat,_Font+6
 34039  00E37C  0012               	return		;funcret
 34040  00E37E                     __end_of_display_SetFont:
 34041                           	callstack 0
 34042                           
 34043 ;; *************** function _drawAlarmTime *****************
 34044 ;; Defined at:
 34045 ;;		line 781 in file "Draw.c"
 34046 ;; Parameters:    Size  Location     Type
 34047 ;;  mode            1    wreg     unsigned char 
 34048 ;;  alarmtime       2   53[BANK0 ] PTR unsigned char 
 34049 ;;		 -> AlarmTime(3), 
 34050 ;; Auto vars:     Size  Location     Type
 34051 ;;  mode            1  109[BANK2 ] unsigned char 
 34052 ;;  str           100    0[BANK2 ] unsigned char [100]
 34053 ;;  ampm            6  100[BANK2 ] unsigned char [3][2]
 34054 ;;  ap              1  108[BANK2 ] char 
 34055 ;; Return value:  Size  Location     Type
 34056 ;;                  1    wreg      void 
 34057 ;; Registers used:
 34058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34059 ;; Tracked objects:
 34060 ;;		On entry : 3F/2
 34061 ;;		On exit  : 0/0
 34062 ;;		Unchanged: 0/0
 34063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34064 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34065 ;;      Locals:         0       0       0     110       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34066 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34067 ;;      Totals:         0       6       0     110       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34068 ;;Total ram usage:      116 bytes
 34069 ;; Hardware stack levels used:    1
 34070 ;; Hardware stack levels required when called:   16
 34071 ;; This function calls:
 34072 ;;		_DrawAnalogClock
 34073 ;;		___wmul
 34074 ;;		_display_drawChars
 34075 ;;		_sprintf
 34076 ;; This function is called by:
 34077 ;;		_NormalProc
 34078 ;;		_SlideSWProc
 34079 ;; This function uses a non-reentrant model
 34080 ;;
 34081                           
 34082                           	psect	text118
 34083  007E70                     __ptext118:
 34084                           	callstack 0
 34085  007E70                     _drawAlarmTime:
 34086                           	callstack 13
 34087                           
 34088                           ;incstack = 0
 34089                           ;drawAlarmTime@mode stored from wreg
 34090  007E70  6F6D               	movwf	drawAlarmTime@mode& (0+255),b
 34091                           
 34092                           ;Draw.c: 782: char str[100];;Draw.c: 783: char ampm[][3] = {"AM", "PM"};
 34093  007E72  EE23  F0E7         	lfsr	2,drawAlarmTime@F6643
 34094  007E76  EE12  F064         	lfsr	1,drawAlarmTime@ampm
 34095  007E7A  0E05               	movlw	5
 34096  007E7C                     u27201:
 34097  007E7C  CFDB FFE3          	movff	plusw2,plusw1
 34098  007E80  06E8               	decf	wreg,f,c
 34099  007E82  E2FC               	bc	u27201
 34100                           
 34101                           ;Draw.c: 784: int8_t ap;;Draw.c: 786: if (mode == 0x02) {
 34102  007E84  0E02               	movlw	2
 34103  007E86  0102               	movlb	2	; () banked
 34104  007E88  196D               	xorwf	drawAlarmTime@mode& (0+255),w,b
 34105  007E8A  A4D8               	btfss	status,2,c
 34106  007E8C  D12F               	goto	l24047
 34107                           
 34108                           ; BSR set to: 2
 34109                           ;Draw.c: 787: DrawAnalogClock(mode, DateTime, RTime[mode].x, RTime[mode].y, RTime[mode].
      +                          xw, 0x8410);
 34110  007E8E  0EF6               	movlw	low _DateTime
 34111  007E90  0100               	movlb	0	; () banked
 34112  007E92  6F88               	movwf	DrawAnalogClock@datetime& (0+255),b
 34113  007E94  0E02               	movlw	high _DateTime
 34114  007E96  6F89               	movwf	(DrawAnalogClock@datetime+1)& (0+255),b
 34115  007E98  0102               	movlb	2	; () banked
 34116  007E9A  516D               	movf	drawAlarmTime@mode& (0+255),w,b
 34117  007E9C  0D0A               	mullw	10
 34118  007E9E  0EA0               	movlw	low _RTime
 34119  007EA0  24F3               	addwf	243,w,c
 34120  007EA2  6ED9               	movwf	fsr2l,c
 34121  007EA4  0E04               	movlw	high _RTime
 34122  007EA6  20F4               	addwfc	prodh,w,c
 34123  007EA8  6EDA               	movwf	fsr2h,c
 34124  007EAA  CFDE F08A          	movff	postinc2,DrawAnalogClock@xx
 34125  007EAE  CFDD F08B          	movff	postdec2,DrawAnalogClock@xx+1
 34126  007EB2  516D               	movf	drawAlarmTime@mode& (0+255),w,b
 34127  007EB4  0D0A               	mullw	10
 34128  007EB6  0EA2               	movlw	low (_RTime+2)
 34129  007EB8  24F3               	addwf	243,w,c
 34130  007EBA  6ED9               	movwf	fsr2l,c
 34131  007EBC  0E04               	movlw	high (_RTime+2)
 34132  007EBE  20F4               	addwfc	prodh,w,c
 34133  007EC0  6EDA               	movwf	fsr2h,c
 34134  007EC2  CFDE F08C          	movff	postinc2,DrawAnalogClock@yy
 34135  007EC6  CFDD F08D          	movff	postdec2,DrawAnalogClock@yy+1
 34136  007ECA  516D               	movf	drawAlarmTime@mode& (0+255),w,b
 34137  007ECC  0D0A               	mullw	10
 34138  007ECE  0EA4               	movlw	low (_RTime+4)
 34139  007ED0  24F3               	addwf	243,w,c
 34140  007ED2  6ED9               	movwf	fsr2l,c
 34141  007ED4  0E04               	movlw	high (_RTime+4)
 34142  007ED6  20F4               	addwfc	prodh,w,c
 34143  007ED8  6EDA               	movwf	fsr2h,c
 34144  007EDA  50DF               	movf	indf2,w,c
 34145  007EDC  0100               	movlb	0	; () banked
 34146  007EDE  6F8E               	movwf	DrawAnalogClock@size& (0+255),b
 34147  007EE0  0E84               	movlw	132
 34148  007EE2  6F90               	movwf	(DrawAnalogClock@color+1)& (0+255),b
 34149  007EE4  0E10               	movlw	16
 34150  007EE6  6F8F               	movwf	DrawAnalogClock@color& (0+255),b
 34151  007EE8  0102               	movlb	2	; () banked
 34152  007EEA  516D               	movf	drawAlarmTime@mode& (0+255),w,b
 34153  007EEC  EC4F  F000         	call	_DrawAnalogClock
 34154                           
 34155                           ; BSR set to: 3
 34156                           ;Draw.c: 788: if (alarmtime[1] >= 0x12) ap= 1 ;
 34157  007EF0  0100               	movlb	0	; () banked
 34158  007EF2  EE20 F001          	lfsr	2,1
 34159  007EF6  5195               	movf	drawAlarmTime@alarmtime& (0+255),w,b
 34160  007EF8  26D9               	addwf	fsr2l,f,c
 34161  007EFA  5196               	movf	(drawAlarmTime@alarmtime+1)& (0+255),w,b
 34162  007EFC  22DA               	addwfc	fsr2h,f,c
 34163  007EFE  0E11               	movlw	17
 34164  007F00  64DF               	cpfsgt	indf2,c
 34165  007F02  D002               	goto	l24033
 34166                           
 34167                           ; BSR set to: 0
 34168  007F04  0E01               	movlw	1
 34169  007F06  D001               	goto	L36
 34170  007F08                     l24033:
 34171                           
 34172                           ; BSR set to: 0
 34173                           ;Draw.c: 789: else ap = 0;
 34174  007F08  0E00               	movlw	0
 34175  007F0A                     L36:
 34176  007F0A  0102               	movlb	2	; () banked
 34177  007F0C  6F6C               	movwf	drawAlarmTime@ap& (0+255),b
 34178                           
 34179                           ; BSR set to: 2
 34180                           ;Draw.c: 790: if (SlideSWStatus>>1)
 34181  007F0E  90D8               	bcf	status,0,c
 34182  007F10  3051               	rrcf	_SlideSWStatus^0,w,c
 34183  007F12  B4D8               	btfsc	status,2,c
 34184  007F14  D055               	goto	l24041
 34185                           
 34186                           ; BSR set to: 2
 34187                           ;Draw.c: 791: sprintf(str, "Alarm+ %s %02d:%02x", ampm[ap], (alarmtime[1] & 0xf) + (alar
      +                          mtime[1] >> 4)*10 -12*ap, alarmtime[0]);
 34188  007F16  516C               	movf	drawAlarmTime@ap& (0+255),w,b
 34189  007F18  6E1D               	movwf	___wmul@multiplier^0,c
 34190  007F1A  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 34191  007F1C  BE1D               	btfsc	___wmul@multiplier^0,7,c
 34192  007F1E  061E               	decf	(___wmul@multiplier+1)^0,f,c
 34193  007F20  0EFF               	movlw	255
 34194  007F22  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 34195  007F24  0EF4               	movlw	244
 34196  007F26  6E1F               	movwf	___wmul@multiplicand^0,c
 34197  007F28  EC12  F079         	call	___wmul	;wreg free
 34198  007F2C  0100               	movlb	0	; () banked
 34199  007F2E  EE20 F001          	lfsr	2,1
 34200  007F32  5195               	movf	drawAlarmTime@alarmtime& (0+255),w,b
 34201  007F34  26D9               	addwf	fsr2l,f,c
 34202  007F36  5196               	movf	(drawAlarmTime@alarmtime+1)& (0+255),w,b
 34203  007F38  22DA               	addwfc	fsr2h,f,c
 34204  007F3A  50DF               	movf	indf2,w,c
 34205  007F3C  6F97               	movwf	??_drawAlarmTime& (0+255),b
 34206  007F3E  3B97               	swapf	??_drawAlarmTime& (0+255),f,b
 34207  007F40  0E0F               	movlw	15
 34208  007F42  1797               	andwf	??_drawAlarmTime& (0+255),f,b
 34209  007F44  5197               	movf	??_drawAlarmTime& (0+255),w,b
 34210  007F46  0D0A               	mullw	10
 34211  007F48  CFF3 F098          	movff	prodl,??_drawAlarmTime+1
 34212  007F4C  CFF4 F099          	movff	prodh,??_drawAlarmTime+2
 34213  007F50  EE20 F001          	lfsr	2,1
 34214  007F54  5195               	movf	drawAlarmTime@alarmtime& (0+255),w,b
 34215  007F56  26D9               	addwf	fsr2l,f,c
 34216  007F58  5196               	movf	(drawAlarmTime@alarmtime+1)& (0+255),w,b
 34217  007F5A  22DA               	addwfc	fsr2h,f,c
 34218  007F5C  50DF               	movf	indf2,w,c
 34219  007F5E  6F9A               	movwf	(??_drawAlarmTime+3)& (0+255),b
 34220  007F60  0E0F               	movlw	15
 34221  007F62  179A               	andwf	(??_drawAlarmTime+3)& (0+255),f,b
 34222  007F64  519A               	movf	(??_drawAlarmTime+3)& (0+255),w,b
 34223  007F66  2798               	addwf	(??_drawAlarmTime+1)& (0+255),f,b
 34224  007F68  0E00               	movlw	0
 34225  007F6A  2399               	addwfc	(??_drawAlarmTime+2)& (0+255),f,b
 34226  007F6C  501D               	movf	?___wmul^0,w,c
 34227  007F6E  2598               	addwf	(??_drawAlarmTime+1)& (0+255),w,b
 34228  007F70  0102               	movlb	2	; () banked
 34229  007F72  6F6A               	movwf	_drawAlarmTime$8866& (0+255),b
 34230  007F74  501E               	movf	(?___wmul+1)^0,w,c
 34231  007F76  0100               	movlb	0	; () banked
 34232  007F78  2199               	addwfc	(??_drawAlarmTime+2)& (0+255),w,b
 34233  007F7A  0102               	movlb	2	; () banked
 34234  007F7C  6F6B               	movwf	(_drawAlarmTime$8866+1)& (0+255),b
 34235                           
 34236                           ; BSR set to: 2
 34237                           ;Draw.c: 791: sprintf(str, "Alarm+ %s %02d:%02x", ampm[ap], (alarmtime[1] & 0xf) + (alar
      +                          mtime[1] >> 4)*10 -12*ap, alarmtime[0]);
 34238  007F7E  0E00               	movlw	low drawAlarmTime@str
 34239  007F80  6E2A               	movwf	sprintf@sp^0,c
 34240  007F82  0E02               	movlw	high drawAlarmTime@str
 34241  007F84  6E2B               	movwf	(sprintf@sp+1)^0,c
 34242  007F86  0E41               	movlw	low STR_27
 34243  007F88  6E2C               	movwf	sprintf@f^0,c
 34244  007F8A  0EFF               	movlw	high STR_27
 34245  007F8C  6E2D               	movwf	(sprintf@f+1)^0,c
 34246  007F8E  516C               	movf	drawAlarmTime@ap& (0+255),w,b
 34247  007F90  0D03               	mullw	3
 34248  007F92  0E64               	movlw	low drawAlarmTime@ampm
 34249  007F94  24F3               	addwf	243,w,c
 34250  007F96  6E2E               	movwf	(?_sprintf+4)^0,c
 34251  007F98  0E02               	movlw	high drawAlarmTime@ampm
 34252  007F9A  20F4               	addwfc	prodh,w,c
 34253  007F9C  6E2F               	movwf	(?_sprintf+5)^0,c
 34254  007F9E  C26A  F030         	movff	_drawAlarmTime$8866,?_sprintf+6
 34255  007FA2  C26B  F031         	movff	_drawAlarmTime$8866+1,?_sprintf+7
 34256  007FA6  C095  FFD9         	movff	drawAlarmTime@alarmtime,fsr2l
 34257  007FAA  C096  FFDA         	movff	drawAlarmTime@alarmtime+1,fsr2h
 34258  007FAE  50DF               	movf	indf2,w,c
 34259  007FB0  0100               	movlb	0	; () banked
 34260  007FB2  6F97               	movwf	??_drawAlarmTime& (0+255),b
 34261  007FB4  5197               	movf	??_drawAlarmTime& (0+255),w,b
 34262  007FB6  6E32               	movwf	(?_sprintf+8)^0,c
 34263  007FB8  6A33               	clrf	(?_sprintf+9)^0,c
 34264  007FBA  ECD0  F028         	call	_sprintf	;wreg free
 34265  007FBE  D054               	goto	l24045
 34266  007FC0                     l24041:
 34267                           
 34268                           ; BSR set to: 2
 34269                           ;Draw.c: 792: else;Draw.c: 793: sprintf(str, "Alarm- %s %02d:%02x", ampm[ap], (alarmtime
      +                          [1] & 0xf) + (alarmtime[1] >> 4)*10 -12*ap, alarmtime[0]);
 34270  007FC0  516C               	movf	drawAlarmTime@ap& (0+255),w,b
 34271  007FC2  6E1D               	movwf	___wmul@multiplier^0,c
 34272  007FC4  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 34273  007FC6  BE1D               	btfsc	___wmul@multiplier^0,7,c
 34274  007FC8  061E               	decf	(___wmul@multiplier+1)^0,f,c
 34275  007FCA  0EFF               	movlw	255
 34276  007FCC  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 34277  007FCE  0EF4               	movlw	244
 34278  007FD0  6E1F               	movwf	___wmul@multiplicand^0,c
 34279  007FD2  EC12  F079         	call	___wmul	;wreg free
 34280  007FD6  0100               	movlb	0	; () banked
 34281  007FD8  EE20 F001          	lfsr	2,1
 34282  007FDC  5195               	movf	drawAlarmTime@alarmtime& (0+255),w,b
 34283  007FDE  26D9               	addwf	fsr2l,f,c
 34284  007FE0  5196               	movf	(drawAlarmTime@alarmtime+1)& (0+255),w,b
 34285  007FE2  22DA               	addwfc	fsr2h,f,c
 34286  007FE4  50DF               	movf	indf2,w,c
 34287  007FE6  6F97               	movwf	??_drawAlarmTime& (0+255),b
 34288  007FE8  3B97               	swapf	??_drawAlarmTime& (0+255),f,b
 34289  007FEA  0E0F               	movlw	15
 34290  007FEC  1797               	andwf	??_drawAlarmTime& (0+255),f,b
 34291  007FEE  5197               	movf	??_drawAlarmTime& (0+255),w,b
 34292  007FF0  0D0A               	mullw	10
 34293  007FF2  CFF3 F098          	movff	prodl,??_drawAlarmTime+1
 34294  007FF6  CFF4 F099          	movff	prodh,??_drawAlarmTime+2
 34295  007FFA  EE20 F001          	lfsr	2,1
 34296  007FFE  5195               	movf	drawAlarmTime@alarmtime& (0+255),w,b
 34297  008000  26D9               	addwf	fsr2l,f,c
 34298  008002  5196               	movf	(drawAlarmTime@alarmtime+1)& (0+255),w,b
 34299  008004  22DA               	addwfc	fsr2h,f,c
 34300  008006  50DF               	movf	indf2,w,c
 34301  008008  6F9A               	movwf	(??_drawAlarmTime+3)& (0+255),b
 34302  00800A  0E0F               	movlw	15
 34303  00800C  179A               	andwf	(??_drawAlarmTime+3)& (0+255),f,b
 34304  00800E  519A               	movf	(??_drawAlarmTime+3)& (0+255),w,b
 34305  008010  2798               	addwf	(??_drawAlarmTime+1)& (0+255),f,b
 34306  008012  0E00               	movlw	0
 34307  008014  2399               	addwfc	(??_drawAlarmTime+2)& (0+255),f,b
 34308  008016  501D               	movf	?___wmul^0,w,c
 34309  008018  2598               	addwf	(??_drawAlarmTime+1)& (0+255),w,b
 34310  00801A  0102               	movlb	2	; () banked
 34311  00801C  6F6A               	movwf	_drawAlarmTime$8866& (0+255),b
 34312  00801E  501E               	movf	(?___wmul+1)^0,w,c
 34313  008020  0100               	movlb	0	; () banked
 34314  008022  2199               	addwfc	(??_drawAlarmTime+2)& (0+255),w,b
 34315  008024  0102               	movlb	2	; () banked
 34316  008026  6F6B               	movwf	(_drawAlarmTime$8866+1)& (0+255),b
 34317                           
 34318                           ; BSR set to: 2
 34319                           ;Draw.c: 792: else;Draw.c: 793: sprintf(str, "Alarm- %s %02d:%02x", ampm[ap], (alarmtime
      +                          [1] & 0xf) + (alarmtime[1] >> 4)*10 -12*ap, alarmtime[0]);
 34320  008028  0E00               	movlw	low drawAlarmTime@str
 34321  00802A  6E2A               	movwf	sprintf@sp^0,c
 34322  00802C  0E02               	movlw	high drawAlarmTime@str
 34323  00802E  6E2B               	movwf	(sprintf@sp+1)^0,c
 34324  008030  0E55               	movlw	low STR_28
 34325  008032  6E2C               	movwf	sprintf@f^0,c
 34326  008034  0EFF               	movlw	high STR_28
 34327  008036  6E2D               	movwf	(sprintf@f+1)^0,c
 34328  008038  516C               	movf	drawAlarmTime@ap& (0+255),w,b
 34329  00803A  0D03               	mullw	3
 34330  00803C  0E64               	movlw	low drawAlarmTime@ampm
 34331  00803E  24F3               	addwf	243,w,c
 34332  008040  6E2E               	movwf	(?_sprintf+4)^0,c
 34333  008042  0E02               	movlw	high drawAlarmTime@ampm
 34334  008044  20F4               	addwfc	prodh,w,c
 34335  008046  6E2F               	movwf	(?_sprintf+5)^0,c
 34336  008048  C26A  F030         	movff	_drawAlarmTime$8866,?_sprintf+6
 34337  00804C  C26B  F031         	movff	_drawAlarmTime$8866+1,?_sprintf+7
 34338  008050  C095  FFD9         	movff	drawAlarmTime@alarmtime,fsr2l
 34339  008054  C096  FFDA         	movff	drawAlarmTime@alarmtime+1,fsr2h
 34340  008058  50DF               	movf	indf2,w,c
 34341  00805A  0100               	movlb	0	; () banked
 34342  00805C  6F97               	movwf	??_drawAlarmTime& (0+255),b
 34343  00805E  5197               	movf	??_drawAlarmTime& (0+255),w,b
 34344  008060  6E32               	movwf	(?_sprintf+8)^0,c
 34345  008062  6A33               	clrf	(?_sprintf+9)^0,c
 34346  008064  ECD0  F028         	call	_sprintf	;wreg free
 34347  008068                     l24045:
 34348                           
 34349                           ; BSR set to: 0
 34350                           ;Draw.c: 795: display_drawChars(RAlarm[mode].x, RAlarm[mode].y, str, AlarmColor[SlideSWS
      +                          tatus>>1], 0x0000, RAlarm[mode].font);
 34351  008068  0102               	movlb	2	; () banked
 34352  00806A  516D               	movf	drawAlarmTime@mode& (0+255),w,b
 34353  00806C  0D0A               	mullw	10
 34354  00806E  0E64               	movlw	low _RAlarm
 34355  008070  24F3               	addwf	243,w,c
 34356  008072  6ED9               	movwf	fsr2l,c
 34357  008074  0E04               	movlw	high _RAlarm
 34358  008076  20F4               	addwfc	prodh,w,c
 34359  008078  6EDA               	movwf	fsr2h,c
 34360  00807A  CFDE F06A          	movff	postinc2,display_drawChars@x
 34361  00807E  CFDD F06B          	movff	postdec2,display_drawChars@x+1
 34362  008082  516D               	movf	drawAlarmTime@mode& (0+255),w,b
 34363  008084  0D0A               	mullw	10
 34364  008086  0E66               	movlw	low (_RAlarm+2)
 34365  008088  24F3               	addwf	243,w,c
 34366  00808A  6ED9               	movwf	fsr2l,c
 34367  00808C  0E04               	movlw	high (_RAlarm+2)
 34368  00808E  20F4               	addwfc	prodh,w,c
 34369  008090  6EDA               	movwf	fsr2h,c
 34370  008092  CFDE F06C          	movff	postinc2,display_drawChars@y
 34371  008096  CFDD F06D          	movff	postdec2,display_drawChars@y+1
 34372  00809A  0E00               	movlw	low drawAlarmTime@str
 34373  00809C  0100               	movlb	0	; () banked
 34374  00809E  6F6E               	movwf	display_drawChars@s& (0+255),b
 34375  0080A0  0E02               	movlw	high drawAlarmTime@str
 34376  0080A2  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
 34377  0080A4  90D8               	bcf	status,0,c
 34378  0080A6  3051               	rrcf	_SlideSWStatus^0,w,c
 34379  0080A8  6F97               	movwf	??_drawAlarmTime& (0+255),b
 34380  0080AA  6B98               	clrf	(??_drawAlarmTime+1)& (0+255),b
 34381  0080AC  90D8               	bcf	status,0,c
 34382  0080AE  3797               	rlcf	??_drawAlarmTime& (0+255),f,b
 34383  0080B0  3798               	rlcf	(??_drawAlarmTime+1)& (0+255),f,b
 34384  0080B2  0E69               	movlw	low _AlarmColor
 34385  0080B4  2597               	addwf	??_drawAlarmTime& (0+255),w,b
 34386  0080B6  6ED9               	movwf	fsr2l,c
 34387  0080B8  0E03               	movlw	high _AlarmColor
 34388  0080BA  2198               	addwfc	(??_drawAlarmTime+1)& (0+255),w,b
 34389  0080BC  6EDA               	movwf	fsr2h,c
 34390  0080BE  CFDE F070          	movff	postinc2,display_drawChars@color
 34391  0080C2  CFDD F071          	movff	postdec2,display_drawChars@color+1
 34392  0080C6  0E00               	movlw	0
 34393  0080C8  6F73               	movwf	(display_drawChars@bg+1)& (0+255),b
 34394  0080CA  0E00               	movlw	0
 34395  0080CC  6F72               	movwf	display_drawChars@bg& (0+255),b
 34396  0080CE  0102               	movlb	2	; () banked
 34397  0080D0  516D               	movf	drawAlarmTime@mode& (0+255),w,b
 34398  0080D2  0D0A               	mullw	10
 34399  0080D4  0E6C               	movlw	low (_RAlarm+8)
 34400  0080D6  24F3               	addwf	243,w,c
 34401  0080D8  6ED9               	movwf	fsr2l,c
 34402  0080DA  0E04               	movlw	high (_RAlarm+8)
 34403  0080DC  20F4               	addwfc	prodh,w,c
 34404  0080DE  6EDA               	movwf	fsr2h,c
 34405  0080E0  50DF               	movf	indf2,w,c
 34406  0080E2  0100               	movlb	0	; () banked
 34407  0080E4  6F74               	movwf	display_drawChars@size& (0+255),b
 34408  0080E6  EC13  F06D         	call	_display_drawChars	;wreg free
 34409                           
 34410                           ;Draw.c: 796: } else {
 34411  0080EA  0012               	return	
 34412  0080EC                     l24047:
 34413                           
 34414                           ; BSR set to: 2
 34415                           ;Draw.c: 797: if (SlideSWStatus>>1)
 34416  0080EC  90D8               	bcf	status,0,c
 34417  0080EE  3051               	rrcf	_SlideSWStatus^0,w,c
 34418  0080F0  B4D8               	btfsc	status,2,c
 34419  0080F2  D020               	goto	l24051
 34420                           
 34421                           ; BSR set to: 2
 34422                           ;Draw.c: 798: sprintf(str, "ALM+ %02x:%02x", alarmtime[1], alarmtime[0]);
 34423  0080F4  0E00               	movlw	low drawAlarmTime@str
 34424  0080F6  6E2A               	movwf	sprintf@sp^0,c
 34425  0080F8  0E02               	movlw	high drawAlarmTime@str
 34426  0080FA  6E2B               	movwf	(sprintf@sp+1)^0,c
 34427  0080FC  0E7A               	movlw	low STR_29
 34428  0080FE  6E2C               	movwf	sprintf@f^0,c
 34429  008100  0EFF               	movlw	high STR_29
 34430  008102  6E2D               	movwf	(sprintf@f+1)^0,c
 34431  008104  0100               	movlb	0	; () banked
 34432  008106  EE20 F001          	lfsr	2,1
 34433  00810A  5195               	movf	drawAlarmTime@alarmtime& (0+255),w,b
 34434  00810C  26D9               	addwf	fsr2l,f,c
 34435  00810E  5196               	movf	(drawAlarmTime@alarmtime+1)& (0+255),w,b
 34436  008110  22DA               	addwfc	fsr2h,f,c
 34437  008112  50DF               	movf	indf2,w,c
 34438  008114  6F97               	movwf	??_drawAlarmTime& (0+255),b
 34439  008116  5197               	movf	??_drawAlarmTime& (0+255),w,b
 34440  008118  6E2E               	movwf	(?_sprintf+4)^0,c
 34441  00811A  6A2F               	clrf	(?_sprintf+5)^0,c
 34442  00811C  C095  FFD9         	movff	drawAlarmTime@alarmtime,fsr2l
 34443  008120  C096  FFDA         	movff	drawAlarmTime@alarmtime+1,fsr2h
 34444  008124  50DF               	movf	indf2,w,c
 34445  008126  6F98               	movwf	(??_drawAlarmTime+1)& (0+255),b
 34446  008128  5198               	movf	(??_drawAlarmTime+1)& (0+255),w,b
 34447  00812A  6E30               	movwf	(?_sprintf+6)^0,c
 34448  00812C  6A31               	clrf	(?_sprintf+7)^0,c
 34449  00812E  ECD0  F028         	call	_sprintf	;wreg free
 34450  008132  D79A               	goto	l24045
 34451  008134                     l24051:
 34452                           
 34453                           ; BSR set to: 2
 34454                           ;Draw.c: 799: else;Draw.c: 800: sprintf(str, "ALM- %02x:%02x", alarmtime[1], alarmtime[0
      +                          ]);
 34455  008134  0E00               	movlw	low drawAlarmTime@str
 34456  008136  6E2A               	movwf	sprintf@sp^0,c
 34457  008138  0E02               	movlw	high drawAlarmTime@str
 34458  00813A  6E2B               	movwf	(sprintf@sp+1)^0,c
 34459  00813C  0E89               	movlw	low STR_30
 34460  00813E  6E2C               	movwf	sprintf@f^0,c
 34461  008140  0EFF               	movlw	high STR_30
 34462  008142  6E2D               	movwf	(sprintf@f+1)^0,c
 34463  008144  0100               	movlb	0	; () banked
 34464  008146  EE20 F001          	lfsr	2,1
 34465  00814A  5195               	movf	drawAlarmTime@alarmtime& (0+255),w,b
 34466  00814C  26D9               	addwf	fsr2l,f,c
 34467  00814E  5196               	movf	(drawAlarmTime@alarmtime+1)& (0+255),w,b
 34468  008150  22DA               	addwfc	fsr2h,f,c
 34469  008152  50DF               	movf	indf2,w,c
 34470  008154  6F97               	movwf	??_drawAlarmTime& (0+255),b
 34471  008156  5197               	movf	??_drawAlarmTime& (0+255),w,b
 34472  008158  6E2E               	movwf	(?_sprintf+4)^0,c
 34473  00815A  6A2F               	clrf	(?_sprintf+5)^0,c
 34474  00815C  C095  FFD9         	movff	drawAlarmTime@alarmtime,fsr2l
 34475  008160  C096  FFDA         	movff	drawAlarmTime@alarmtime+1,fsr2h
 34476  008164  50DF               	movf	indf2,w,c
 34477  008166  6F98               	movwf	(??_drawAlarmTime+1)& (0+255),b
 34478  008168  5198               	movf	(??_drawAlarmTime+1)& (0+255),w,b
 34479  00816A  6E30               	movwf	(?_sprintf+6)^0,c
 34480  00816C  6A31               	clrf	(?_sprintf+7)^0,c
 34481  00816E  ECD0  F028         	call	_sprintf	;wreg free
 34482  008172  D77A               	goto	l24045
 34483  008174                     __end_of_drawAlarmTime:
 34484                           	callstack 0
 34485                           
 34486 ;; *************** function _DrawAnalogClock *****************
 34487 ;; Defined at:
 34488 ;;		line 299 in file "Draw.c"
 34489 ;; Parameters:    Size  Location     Type
 34490 ;;  mode            1    wreg     unsigned char 
 34491 ;;  datetime        2   40[BANK0 ] PTR unsigned char 
 34492 ;;		 -> TmpTime(7), DateTime(7), 
 34493 ;;  xx              2   42[BANK0 ] unsigned int 
 34494 ;;  yy              2   44[BANK0 ] unsigned int 
 34495 ;;  size            1   46[BANK0 ] unsigned char 
 34496 ;;  color           2   47[BANK0 ] unsigned int 
 34497 ;; Auto vars:     Size  Location     Type
 34498 ;;  mode            1    0[COMRAM] unsigned char 
 34499 ;;  y              10   91[BANK1 ] unsigned int [5]
 34500 ;;  x              10   81[BANK1 ] unsigned int [5]
 34501 ;;  chy            10   70[BANK1 ] unsigned int [5]
 34502 ;;  chx            10   60[BANK1 ] unsigned int [5]
 34503 ;;  cmy            10   50[BANK1 ] unsigned int [5]
 34504 ;;  cmx            10   40[BANK1 ] unsigned int [5]
 34505 ;;  csy            10   30[BANK1 ] unsigned int [5]
 34506 ;;  csx            10   20[BANK1 ] unsigned int [5]
 34507 ;;  cay            10   10[BANK1 ] unsigned int [5]
 34508 ;;  cax            10    0[BANK1 ] unsigned int [5]
 34509 ;;  str             3  125[BANK1 ] unsigned char [3]
 34510 ;;  angle           2  144[BANK1 ] unsigned int 
 34511 ;;  yc              2  142[BANK1 ] unsigned int 
 34512 ;;  xc              2  140[BANK1 ] unsigned int 
 34513 ;;  rc1             2  138[BANK1 ] unsigned int 
 34514 ;;  rc              2  136[BANK1 ] unsigned int 
 34515 ;;  rcs2            2  133[BANK1 ] unsigned int 
 34516 ;;  acolor          2  130[BANK1 ] unsigned int 
 34517 ;;  scolor          2  128[BANK1 ] unsigned int 
 34518 ;;  mcolor          2  121[BANK1 ] unsigned int 
 34519 ;;  hcolor          2  119[BANK1 ] unsigned int 
 34520 ;;  rch3            2  117[BANK1 ] unsigned int 
 34521 ;;  rch2            2  115[BANK1 ] unsigned int 
 34522 ;;  rcm3            2  113[BANK1 ] unsigned int 
 34523 ;;  rcm2            2  111[BANK1 ] unsigned int 
 34524 ;;  rc2             2  109[BANK1 ] unsigned int 
 34525 ;;  rca             2  107[BANK1 ] unsigned int 
 34526 ;;  rch             2  105[BANK1 ] unsigned int 
 34527 ;;  rcm             2  103[BANK1 ] unsigned int 
 34528 ;;  rcs             2  101[BANK1 ] unsigned int 
 34529 ;;  temp            2    0        unsigned int 
 34530 ;;  rca2            2    0        unsigned int 
 34531 ;;  jj              1  146[BANK1 ] char 
 34532 ;;  mm              1  135[BANK1 ] char 
 34533 ;;  hh              1  132[BANK1 ] char 
 34534 ;;  kk              1  124[BANK1 ] char 
 34535 ;;  ss              1  123[BANK1 ] char 
 34536 ;;  minupdate       1   80[BANK1 ] char 
 34537 ;; Return value:  Size  Location     Type
 34538 ;;                  1    wreg      void 
 34539 ;; Registers used:
 34540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34541 ;; Tracked objects:
 34542 ;;		On entry : 3D/0
 34543 ;;		On exit  : 3F/3
 34544 ;;		Unchanged: 0/0
 34545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34546 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34547 ;;      Locals:         0       0     147       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34548 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34549 ;;      Totals:         0      13     147       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34550 ;;Total ram usage:      160 bytes
 34551 ;; Hardware stack levels used:    1
 34552 ;; Hardware stack levels required when called:   15
 34553 ;; This function calls:
 34554 ;;		___awdiv
 34555 ;;		___awmod
 34556 ;;		___lwdiv
 34557 ;;		___wmul
 34558 ;;		_cosd
 34559 ;;		_display_drawChars
 34560 ;;		_display_drawCircle
 34561 ;;		_display_drawLine
 34562 ;;		_display_drawTriangle
 34563 ;;		_display_fillCircle
 34564 ;;		_display_fillTriangle
 34565 ;;		_sind
 34566 ;;		_sprintf
 34567 ;; This function is called by:
 34568 ;;		_drawAlarmTime
 34569 ;;		_drawTime
 34570 ;; This function uses a non-reentrant model
 34571 ;;
 34572                           
 34573                           	psect	text119
 34574  00009E                     __ptext119:
 34575                           	callstack 0
 34576  00009E                     _DrawAnalogClock:
 34577                           	callstack 13
 34578                           
 34579                           ;Draw.c: 300: uint16_t xc, yc;;Draw.c: 301: uint16_t rc, rc1, rcs, rcm, rch, rca;;Draw.c
      +                          : 302: uint16_t rc2;;Draw.c: 303: uint16_t rcs2, rcm2, rcm3, rch2, rch3, rca2;;Draw.c: 3
      +                          04: uint16_t x[5], y[5];;Draw.c: 305: uint16_t temp, angle;;Draw.c: 306: int8_t jj, hh, 
      +                          mm, ss, kk;;Draw.c: 308: static uint16_t phx[5], phy[5], pmx[5], pmy[5], psx[5], psy[5],
      +                           pax[5], pay[5];;Draw.c: 310: uint16_t chx[5], chy[5], cmx[5], cmy[5], csx[5], csy[5], c
      +                          ax[5], cay[5];;Draw.c: 311: uint16_t hcolor, mcolor, scolor, acolor;;Draw.c: 312: char s
      +                          tr[3];
 34580                           
 34581                           ;incstack = 0
 34582  00009E  0E00               	movlw	0
 34583  0000A0  0101               	movlb	1	; () banked
 34584  0000A2  6F50               	movwf	DrawAnalogClock@minupdate& (0+255),b
 34585                           
 34586                           ; BSR set to: 1
 34587                           ;Draw.c: 315: if (color == 0x0400) color = 0x8410;
 34588  0000A4  0E04               	movlw	4
 34589  0000A6  0100               	movlb	0	; () banked
 34590  0000A8  1990               	xorwf	(DrawAnalogClock@color+1)& (0+255),w,b
 34591  0000AA  118F               	iorwf	DrawAnalogClock@color& (0+255),w,b
 34592  0000AC  A4D8               	btfss	status,2,c
 34593  0000AE  D004               	goto	l21487
 34594                           
 34595                           ; BSR set to: 0
 34596  0000B0  0E84               	movlw	132
 34597  0000B2  6F90               	movwf	(DrawAnalogClock@color+1)& (0+255),b
 34598  0000B4  0E10               	movlw	16
 34599  0000B6  6F8F               	movwf	DrawAnalogClock@color& (0+255),b
 34600  0000B8                     l21487:
 34601                           
 34602                           ; BSR set to: 0
 34603                           ;Draw.c: 316: hcolor = color;
 34604  0000B8  C08F  F177         	movff	DrawAnalogClock@color,DrawAnalogClock@hcolor
 34605  0000BC  C090  F178         	movff	DrawAnalogClock@color+1,DrawAnalogClock@hcolor+1
 34606                           
 34607                           ; BSR set to: 0
 34608                           ;Draw.c: 317: mcolor = color;
 34609  0000C0  C08F  F179         	movff	DrawAnalogClock@color,DrawAnalogClock@mcolor
 34610  0000C4  C090  F17A         	movff	DrawAnalogClock@color+1,DrawAnalogClock@mcolor+1
 34611                           
 34612                           ;Draw.c: 318: scolor = 0xF800;
 34613  0000C8  0EF8               	movlw	248
 34614  0000CA  0101               	movlb	1	; () banked
 34615  0000CC  6F81               	movwf	(DrawAnalogClock@scolor+1)& (0+255),b
 34616  0000CE  0E00               	movlw	0
 34617  0000D0  6F80               	movwf	DrawAnalogClock@scolor& (0+255),b
 34618                           
 34619                           ;Draw.c: 319: acolor = 0xFFE0;
 34620  0000D2  0EFF               	movlw	255
 34621  0000D4  6F83               	movwf	(DrawAnalogClock@acolor+1)& (0+255),b
 34622  0000D6  0EE0               	movlw	224
 34623  0000D8  6F82               	movwf	DrawAnalogClock@acolor& (0+255),b
 34624                           
 34625                           ; BSR set to: 1
 34626                           ;Draw.c: 322: xc = xx;
 34627  0000DA  C08A  F18C         	movff	DrawAnalogClock@xx,DrawAnalogClock@xc
 34628  0000DE  C08B  F18D         	movff	DrawAnalogClock@xx+1,DrawAnalogClock@xc+1
 34629                           
 34630                           ; BSR set to: 1
 34631                           ;Draw.c: 323: yc = yy;
 34632  0000E2  C08C  F18E         	movff	DrawAnalogClock@yy,DrawAnalogClock@yc
 34633  0000E6  C08D  F18F         	movff	DrawAnalogClock@yy+1,DrawAnalogClock@yc+1
 34634                           
 34635                           ; BSR set to: 1
 34636                           ;Draw.c: 324: rc = size;
 34637  0000EA  C08E  F188         	movff	DrawAnalogClock@size,DrawAnalogClock@rc
 34638  0000EE  6B89               	clrf	(DrawAnalogClock@rc+1)& (0+255),b
 34639                           
 34640                           ; BSR set to: 1
 34641                           ;Draw.c: 325: display_drawCircle(xc, yc, rc+3, color);
 34642  0000F0  C18C  F01F         	movff	DrawAnalogClock@xc,display_drawCircle@x0
 34643  0000F4  C18D  F020         	movff	DrawAnalogClock@xc+1,display_drawCircle@x0+1
 34644  0000F8  C18E  F021         	movff	DrawAnalogClock@yc,display_drawCircle@y0
 34645  0000FC  C18F  F022         	movff	DrawAnalogClock@yc+1,display_drawCircle@y0+1
 34646  000100  0E03               	movlw	3
 34647  000102  2588               	addwf	DrawAnalogClock@rc& (0+255),w,b
 34648  000104  6E23               	movwf	display_drawCircle@r^0,c
 34649  000106  0E00               	movlw	0
 34650  000108  2189               	addwfc	(DrawAnalogClock@rc+1)& (0+255),w,b
 34651  00010A  6E24               	movwf	(display_drawCircle@r+1)^0,c
 34652  00010C  C08F  F025         	movff	DrawAnalogClock@color,display_drawCircle@color
 34653  000110  C090  F026         	movff	DrawAnalogClock@color+1,display_drawCircle@color+1
 34654  000114  EC03  F04C         	call	_display_drawCircle	;wreg free
 34655                           
 34656                           ;Draw.c: 326: display_drawCircle(xc, yc, rc, color);
 34657  000118  C18C  F01F         	movff	DrawAnalogClock@xc,display_drawCircle@x0
 34658  00011C  C18D  F020         	movff	DrawAnalogClock@xc+1,display_drawCircle@x0+1
 34659  000120  C18E  F021         	movff	DrawAnalogClock@yc,display_drawCircle@y0
 34660  000124  C18F  F022         	movff	DrawAnalogClock@yc+1,display_drawCircle@y0+1
 34661  000128  C188  F023         	movff	DrawAnalogClock@rc,display_drawCircle@r
 34662  00012C  C189  F024         	movff	DrawAnalogClock@rc+1,display_drawCircle@r+1
 34663  000130  C08F  F025         	movff	DrawAnalogClock@color,display_drawCircle@color
 34664  000134  C090  F026         	movff	DrawAnalogClock@color+1,display_drawCircle@color+1
 34665  000138  EC03  F04C         	call	_display_drawCircle	;wreg free
 34666                           
 34667                           ;Draw.c: 328: rc1 = rc -3;
 34668  00013C  0EFD               	movlw	253
 34669  00013E  0101               	movlb	1	; () banked
 34670  000140  2588               	addwf	DrawAnalogClock@rc& (0+255),w,b
 34671  000142  6F8A               	movwf	DrawAnalogClock@rc1& (0+255),b
 34672  000144  0EFF               	movlw	255
 34673  000146  2189               	addwfc	(DrawAnalogClock@rc+1)& (0+255),w,b
 34674  000148  6F8B               	movwf	(DrawAnalogClock@rc1+1)& (0+255),b
 34675                           
 34676                           ; BSR set to: 1
 34677                           ;Draw.c: 332: rca = rc1 *3 /4;
 34678  00014A  C18A  F01D         	movff	DrawAnalogClock@rc1,___wmul@multiplier
 34679  00014E  C18B  F01E         	movff	DrawAnalogClock@rc1+1,___wmul@multiplier+1
 34680  000152  0E00               	movlw	0
 34681  000154  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 34682  000156  0E03               	movlw	3
 34683  000158  6E1F               	movwf	___wmul@multiplicand^0,c
 34684  00015A  EC12  F079         	call	___wmul	;wreg free
 34685  00015E  90D8               	bcf	status,0,c
 34686  000160  321E               	rrcf	(?___wmul+1)^0,f,c
 34687  000162  321D               	rrcf	?___wmul^0,f,c
 34688  000164  90D8               	bcf	status,0,c
 34689  000166  321E               	rrcf	(?___wmul+1)^0,f,c
 34690  000168  321D               	rrcf	?___wmul^0,f,c
 34691  00016A  C01D  F16B         	movff	?___wmul,DrawAnalogClock@rca
 34692  00016E  C01E  F16C         	movff	?___wmul+1,DrawAnalogClock@rca+1
 34693                           
 34694                           ;Draw.c: 334: mm = ((AlarmTime[0]>>4)*10 + (AlarmTime[0] & 0x0f));
 34695  000172  C2FD  F091         	movff	_AlarmTime,??_DrawAnalogClock
 34696  000176  0E0F               	movlw	15
 34697  000178  0100               	movlb	0	; () banked
 34698  00017A  1791               	andwf	??_DrawAnalogClock& (0+255),f,b
 34699  00017C  0102               	movlb	2	; () banked
 34700  00017E  39FD               	swapf	_AlarmTime& (0+255),w,b
 34701  000180  0B0F               	andlw	15
 34702  000182  0D0A               	mullw	10
 34703  000184  50F3               	movf	243,w,c
 34704  000186  0100               	movlb	0	; () banked
 34705  000188  2591               	addwf	??_DrawAnalogClock& (0+255),w,b
 34706  00018A  0101               	movlb	1	; () banked
 34707  00018C  6F87               	movwf	DrawAnalogClock@mm& (0+255),b
 34708                           
 34709                           ; BSR set to: 1
 34710                           ;Draw.c: 335: hh = (AlarmTime[1]>>4)*10 + (AlarmTime[1] & 0x0f);
 34711  00018E  C2FE  F091         	movff	_AlarmTime+1,??_DrawAnalogClock
 34712  000192  0E0F               	movlw	15
 34713  000194  0100               	movlb	0	; () banked
 34714  000196  1791               	andwf	??_DrawAnalogClock& (0+255),f,b
 34715  000198  0102               	movlb	2	; () banked
 34716  00019A  39FE               	swapf	(_AlarmTime+1)& (0+255),w,b
 34717  00019C  0B0F               	andlw	15
 34718  00019E  0D0A               	mullw	10
 34719  0001A0  50F3               	movf	243,w,c
 34720  0001A2  0100               	movlb	0	; () banked
 34721  0001A4  2591               	addwf	??_DrawAnalogClock& (0+255),w,b
 34722  0001A6  0101               	movlb	1	; () banked
 34723  0001A8  6F84               	movwf	DrawAnalogClock@hh& (0+255),b
 34724                           
 34725                           ; BSR set to: 1
 34726                           ;Draw.c: 336: hh = hh % 12;
 34727  0001AA  5184               	movf	DrawAnalogClock@hh& (0+255),w,b
 34728  0001AC  6E0E               	movwf	___awmod@dividend^0,c
 34729  0001AE  6A0F               	clrf	(___awmod@dividend+1)^0,c
 34730  0001B0  BE0E               	btfsc	___awmod@dividend^0,7,c
 34731  0001B2  060F               	decf	(___awmod@dividend+1)^0,f,c
 34732  0001B4  0E00               	movlw	0
 34733  0001B6  6E11               	movwf	(___awmod@divisor+1)^0,c
 34734  0001B8  0E0C               	movlw	12
 34735  0001BA  6E10               	movwf	___awmod@divisor^0,c
 34736  0001BC  ECC7  F06E         	call	___awmod	;wreg free
 34737  0001C0  500E               	movf	?___awmod^0,w,c
 34738  0001C2  0101               	movlb	1	; () banked
 34739  0001C4  6F84               	movwf	DrawAnalogClock@hh& (0+255),b
 34740                           
 34741                           ; BSR set to: 1
 34742                           ;Draw.c: 337: angle = hh * 30 + mm/2;
 34743  0001C6  5184               	movf	DrawAnalogClock@hh& (0+255),w,b
 34744  0001C8  6E1D               	movwf	___wmul@multiplier^0,c
 34745  0001CA  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 34746  0001CC  BE1D               	btfsc	___wmul@multiplier^0,7,c
 34747  0001CE  061E               	decf	(___wmul@multiplier+1)^0,f,c
 34748  0001D0  0E00               	movlw	0
 34749  0001D2  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 34750  0001D4  0E1E               	movlw	30
 34751  0001D6  6E1F               	movwf	___wmul@multiplicand^0,c
 34752  0001D8  EC12  F079         	call	___wmul	;wreg free
 34753  0001DC  C01D  F091         	movff	?___wmul,??_DrawAnalogClock
 34754  0001E0  C01E  F092         	movff	?___wmul+1,??_DrawAnalogClock+1
 34755  0001E4  0101               	movlb	1	; () banked
 34756  0001E6  5187               	movf	DrawAnalogClock@mm& (0+255),w,b
 34757  0001E8  6E0E               	movwf	___awdiv@dividend^0,c
 34758  0001EA  6A0F               	clrf	(___awdiv@dividend+1)^0,c
 34759  0001EC  BE0E               	btfsc	___awdiv@dividend^0,7,c
 34760  0001EE  060F               	decf	(___awdiv@dividend+1)^0,f,c
 34761  0001F0  0E00               	movlw	0
 34762  0001F2  6E11               	movwf	(___awdiv@divisor+1)^0,c
 34763  0001F4  0E02               	movlw	2
 34764  0001F6  6E10               	movwf	___awdiv@divisor^0,c
 34765  0001F8  ECD1  F06C         	call	___awdiv	;wreg free
 34766  0001FC  500E               	movf	?___awdiv^0,w,c
 34767  0001FE  0100               	movlb	0	; () banked
 34768  000200  2591               	addwf	??_DrawAnalogClock& (0+255),w,b
 34769  000202  0101               	movlb	1	; () banked
 34770  000204  6F90               	movwf	DrawAnalogClock@angle& (0+255),b
 34771  000206  500F               	movf	(?___awdiv+1)^0,w,c
 34772  000208  0100               	movlb	0	; () banked
 34773  00020A  2192               	addwfc	(??_DrawAnalogClock+1)& (0+255),w,b
 34774  00020C  0101               	movlb	1	; () banked
 34775  00020E  6F91               	movwf	(DrawAnalogClock@angle+1)& (0+255),b
 34776                           
 34777                           ; BSR set to: 1
 34778                           ;Draw.c: 338: cax[0] = xc;
 34779  000210  C18C  F100         	movff	DrawAnalogClock@xc,DrawAnalogClock@cax
 34780  000214  C18D  F101         	movff	DrawAnalogClock@xc+1,DrawAnalogClock@cax+1
 34781                           
 34782                           ; BSR set to: 1
 34783                           ;Draw.c: 339: cay[0] = yc;
 34784  000218  C18E  F10A         	movff	DrawAnalogClock@yc,DrawAnalogClock@cay
 34785  00021C  C18F  F10B         	movff	DrawAnalogClock@yc+1,DrawAnalogClock@cay+1
 34786                           
 34787                           ; BSR set to: 1
 34788                           ;Draw.c: 340: cax[1] = xc + rca * sind(angle)/256;
 34789  000220  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 34790  000224  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 34791  000228  ECBE  F069         	call	_sind	;wreg free
 34792  00022C  C013  F01D         	movff	?_sind,___wmul@multiplier
 34793  000230  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 34794  000234  C16B  F01F         	movff	DrawAnalogClock@rca,___wmul@multiplicand
 34795  000238  C16C  F020         	movff	DrawAnalogClock@rca+1,___wmul@multiplicand+1
 34796  00023C  EC12  F079         	call	___wmul	;wreg free
 34797  000240  C01E  F01D         	movff	?___wmul+1,?___wmul
 34798  000244  6A1E               	clrf	(?___wmul+1)^0,c
 34799  000246  BE1D               	btfsc	?___wmul^0,7,c
 34800  000248  681E               	setf	(?___wmul+1)^0,c
 34801  00024A  0101               	movlb	1	; () banked
 34802  00024C  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 34803  00024E  241D               	addwf	?___wmul^0,w,c
 34804  000250  6F02               	movwf	(DrawAnalogClock@cax+2)& (0+255),b
 34805  000252  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 34806  000254  201E               	addwfc	(?___wmul+1)^0,w,c
 34807  000256  6F03               	movwf	(DrawAnalogClock@cax+3)& (0+255),b
 34808                           
 34809                           ; BSR set to: 1
 34810                           ;Draw.c: 341: cay[1] = yc - rca * cosd(angle)/256;
 34811  000258  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 34812  00025C  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 34813  000260  EC47  F079         	call	_cosd	;wreg free
 34814  000264  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 34815  000268  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 34816  00026C  C16B  F01F         	movff	DrawAnalogClock@rca,___wmul@multiplicand
 34817  000270  C16C  F020         	movff	DrawAnalogClock@rca+1,___wmul@multiplicand+1
 34818  000274  EC12  F079         	call	___wmul	;wreg free
 34819  000278  C01E  F01D         	movff	?___wmul+1,?___wmul
 34820  00027C  6A1E               	clrf	(?___wmul+1)^0,c
 34821  00027E  BE1D               	btfsc	?___wmul^0,7,c
 34822  000280  681E               	setf	(?___wmul+1)^0,c
 34823  000282  501D               	movf	?___wmul^0,w,c
 34824  000284  0101               	movlb	1	; () banked
 34825  000286  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 34826  000288  6F0C               	movwf	(DrawAnalogClock@cay+2)& (0+255),b
 34827  00028A  501E               	movf	(?___wmul+1)^0,w,c
 34828  00028C  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 34829  00028E  6F0D               	movwf	(DrawAnalogClock@cay+3)& (0+255),b
 34830                           
 34831                           ; BSR set to: 1
 34832                           ;Draw.c: 345: if ((cax[1] == pax[1]) && (cay[1] == pay[1])) {
 34833  000290  0103               	movlb	3	; () banked
 34834  000292  5119               	movf	(DrawAnalogClock@pax+2)& (0+255),w,b
 34835  000294  0101               	movlb	1	; () banked
 34836  000296  1902               	xorwf	(DrawAnalogClock@cax+2)& (0+255),w,b
 34837  000298  E111               	bnz	l21527
 34838  00029A  0103               	movlb	3	; () banked
 34839  00029C  511A               	movf	(DrawAnalogClock@pax+3)& (0+255),w,b
 34840  00029E  0101               	movlb	1	; () banked
 34841  0002A0  1903               	xorwf	(DrawAnalogClock@cax+3)& (0+255),w,b
 34842  0002A2  A4D8               	btfss	status,2,c
 34843  0002A4  D00B               	goto	l21527
 34844                           
 34845                           ; BSR set to: 1
 34846  0002A6  0103               	movlb	3	; () banked
 34847  0002A8  510F               	movf	(DrawAnalogClock@pay+2)& (0+255),w,b
 34848  0002AA  0101               	movlb	1	; () banked
 34849  0002AC  190C               	xorwf	(DrawAnalogClock@cay+2)& (0+255),w,b
 34850  0002AE  E106               	bnz	l21527
 34851  0002B0  0103               	movlb	3	; () banked
 34852  0002B2  5110               	movf	(DrawAnalogClock@pay+3)& (0+255),w,b
 34853  0002B4  0101               	movlb	1	; () banked
 34854  0002B6  190D               	xorwf	(DrawAnalogClock@cay+3)& (0+255),w,b
 34855  0002B8  B4D8               	btfsc	status,2,c
 34856  0002BA  D0F0               	goto	l21549
 34857  0002BC                     l21527:
 34858                           
 34859                           ; BSR set to: 1
 34860                           ;Draw.c: 348: if (!FirstDraw) {
 34861  0002BC  0103               	movlb	3	; () banked
 34862  0002BE  51F8               	movf	_FirstDraw& (0+255),w,b
 34863  0002C0  A4D8               	btfss	status,2,c
 34864  0002C2  D0BA               	goto	l21537
 34865                           
 34866                           ; BSR set to: 3
 34867                           ;Draw.c: 350: display_drawLine(pax[0], pay[0], pax[1], pay[1], 0x0000);
 34868  0002C4  C317  F060         	movff	DrawAnalogClock@pax,display_drawLine@x0
 34869  0002C8  C318  F061         	movff	DrawAnalogClock@pax+1,display_drawLine@x0+1
 34870  0002CC  C30D  F062         	movff	DrawAnalogClock@pay,display_drawLine@y0
 34871  0002D0  C30E  F063         	movff	DrawAnalogClock@pay+1,display_drawLine@y0+1
 34872  0002D4  C319  F064         	movff	DrawAnalogClock@pax+2,display_drawLine@x1
 34873  0002D8  C31A  F065         	movff	DrawAnalogClock@pax+3,display_drawLine@x1+1
 34874  0002DC  C30F  F066         	movff	DrawAnalogClock@pay+2,display_drawLine@y1
 34875  0002E0  C310  F067         	movff	DrawAnalogClock@pay+3,display_drawLine@y1+1
 34876  0002E4  0E00               	movlw	0
 34877  0002E6  0100               	movlb	0	; () banked
 34878  0002E8  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 34879  0002EA  0E00               	movlw	0
 34880  0002EC  6F68               	movwf	display_drawLine@color& (0+255),b
 34881  0002EE  ECA7  F05C         	call	_display_drawLine	;wreg free
 34882                           
 34883                           ;Draw.c: 351: if ( ((pay[1]-pay[0]) < 0 ? -(pay[1]-pay[0]) : (pay[1]-pay[0])) > ((pax[1]
      +                          -pax[0]) < 0 ? -(pax[1]-pax[0]) : (pax[1]-pax[0]))) {
 34884  0002F2  0103               	movlb	3	; () banked
 34885  0002F4  510D               	movf	DrawAnalogClock@pay& (0+255),w,b
 34886  0002F6  5D0F               	subwf	(DrawAnalogClock@pay+2)& (0+255),w,b
 34887  0002F8  0100               	movlb	0	; () banked
 34888  0002FA  6F91               	movwf	??_DrawAnalogClock& (0+255),b
 34889  0002FC  0103               	movlb	3	; () banked
 34890  0002FE  510E               	movf	(DrawAnalogClock@pay+1)& (0+255),w,b
 34891  000300  5910               	subwfb	(DrawAnalogClock@pay+3)& (0+255),w,b
 34892  000302  0100               	movlb	0	; () banked
 34893  000304  6F92               	movwf	(??_DrawAnalogClock+1)& (0+255),b
 34894  000306  0103               	movlb	3	; () banked
 34895  000308  5117               	movf	DrawAnalogClock@pax& (0+255),w,b
 34896  00030A  5D19               	subwf	(DrawAnalogClock@pax+2)& (0+255),w,b
 34897  00030C  0100               	movlb	0	; () banked
 34898  00030E  6F93               	movwf	(??_DrawAnalogClock+2)& (0+255),b
 34899  000310  0103               	movlb	3	; () banked
 34900  000312  5118               	movf	(DrawAnalogClock@pax+1)& (0+255),w,b
 34901  000314  591A               	subwfb	(DrawAnalogClock@pax+3)& (0+255),w,b
 34902  000316  0100               	movlb	0	; () banked
 34903  000318  6F94               	movwf	(??_DrawAnalogClock+3)& (0+255),b
 34904  00031A  5191               	movf	??_DrawAnalogClock& (0+255),w,b
 34905  00031C  5D93               	subwf	(??_DrawAnalogClock+2)& (0+255),w,b
 34906  00031E  5192               	movf	(??_DrawAnalogClock+1)& (0+255),w,b
 34907  000320  5994               	subwfb	(??_DrawAnalogClock+3)& (0+255),w,b
 34908  000322  B0D8               	btfsc	status,0,c
 34909  000324  D045               	goto	l21535
 34910                           
 34911                           ; BSR set to: 0
 34912                           ;Draw.c: 352: display_drawLine(pax[0]+1, pay[0], pax[1]+1, pay[1], 0x0000);
 34913  000326  0E01               	movlw	1
 34914  000328  0103               	movlb	3	; () banked
 34915  00032A  2517               	addwf	DrawAnalogClock@pax& (0+255),w,b
 34916  00032C  0100               	movlb	0	; () banked
 34917  00032E  6F60               	movwf	display_drawLine@x0& (0+255),b
 34918  000330  0E00               	movlw	0
 34919  000332  0103               	movlb	3	; () banked
 34920  000334  2118               	addwfc	(DrawAnalogClock@pax+1)& (0+255),w,b
 34921  000336  0100               	movlb	0	; () banked
 34922  000338  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
 34923  00033A  C30D  F062         	movff	DrawAnalogClock@pay,display_drawLine@y0
 34924  00033E  C30E  F063         	movff	DrawAnalogClock@pay+1,display_drawLine@y0+1
 34925  000342  0E01               	movlw	1
 34926  000344  0103               	movlb	3	; () banked
 34927  000346  2519               	addwf	(DrawAnalogClock@pax+2)& (0+255),w,b
 34928  000348  0100               	movlb	0	; () banked
 34929  00034A  6F64               	movwf	display_drawLine@x1& (0+255),b
 34930  00034C  0E00               	movlw	0
 34931  00034E  0103               	movlb	3	; () banked
 34932  000350  211A               	addwfc	(DrawAnalogClock@pax+3)& (0+255),w,b
 34933  000352  0100               	movlb	0	; () banked
 34934  000354  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
 34935  000356  C30F  F066         	movff	DrawAnalogClock@pay+2,display_drawLine@y1
 34936  00035A  C310  F067         	movff	DrawAnalogClock@pay+3,display_drawLine@y1+1
 34937  00035E  0E00               	movlw	0
 34938  000360  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 34939  000362  0E00               	movlw	0
 34940  000364  6F68               	movwf	display_drawLine@color& (0+255),b
 34941  000366  ECA7  F05C         	call	_display_drawLine	;wreg free
 34942                           
 34943                           ;Draw.c: 353: display_drawLine(pax[0]-1, pay[0], pax[1]-1, pay[1], 0x0000);
 34944  00036A  0EFF               	movlw	255
 34945  00036C  0103               	movlb	3	; () banked
 34946  00036E  2517               	addwf	DrawAnalogClock@pax& (0+255),w,b
 34947  000370  0100               	movlb	0	; () banked
 34948  000372  6F60               	movwf	display_drawLine@x0& (0+255),b
 34949  000374  0EFF               	movlw	255
 34950  000376  0103               	movlb	3	; () banked
 34951  000378  2118               	addwfc	(DrawAnalogClock@pax+1)& (0+255),w,b
 34952  00037A  0100               	movlb	0	; () banked
 34953  00037C  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
 34954  00037E  C30D  F062         	movff	DrawAnalogClock@pay,display_drawLine@y0
 34955  000382  C30E  F063         	movff	DrawAnalogClock@pay+1,display_drawLine@y0+1
 34956  000386  0EFF               	movlw	255
 34957  000388  0103               	movlb	3	; () banked
 34958  00038A  2519               	addwf	(DrawAnalogClock@pax+2)& (0+255),w,b
 34959  00038C  0100               	movlb	0	; () banked
 34960  00038E  6F64               	movwf	display_drawLine@x1& (0+255),b
 34961  000390  0EFF               	movlw	255
 34962  000392  0103               	movlb	3	; () banked
 34963  000394  211A               	addwfc	(DrawAnalogClock@pax+3)& (0+255),w,b
 34964  000396  0100               	movlb	0	; () banked
 34965  000398  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
 34966  00039A  C30F  F066         	movff	DrawAnalogClock@pay+2,display_drawLine@y1
 34967  00039E  C310  F067         	movff	DrawAnalogClock@pay+3,display_drawLine@y1+1
 34968  0003A2  0E00               	movlw	0
 34969  0003A4  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 34970  0003A6  0E00               	movlw	0
 34971  0003A8  6F68               	movwf	display_drawLine@color& (0+255),b
 34972  0003AA  ECA7  F05C         	call	_display_drawLine	;wreg free
 34973                           
 34974                           ;Draw.c: 354: } else {
 34975  0003AE  D044               	goto	l21537
 34976  0003B0                     l21535:
 34977                           
 34978                           ; BSR set to: 0
 34979                           ;Draw.c: 355: display_drawLine(pax[0], pay[0]+1, pax[1], pay[1]+1, 0x0000);
 34980  0003B0  C317  F060         	movff	DrawAnalogClock@pax,display_drawLine@x0
 34981  0003B4  C318  F061         	movff	DrawAnalogClock@pax+1,display_drawLine@x0+1
 34982  0003B8  0E01               	movlw	1
 34983  0003BA  0103               	movlb	3	; () banked
 34984  0003BC  250D               	addwf	DrawAnalogClock@pay& (0+255),w,b
 34985  0003BE  0100               	movlb	0	; () banked
 34986  0003C0  6F62               	movwf	display_drawLine@y0& (0+255),b
 34987  0003C2  0E00               	movlw	0
 34988  0003C4  0103               	movlb	3	; () banked
 34989  0003C6  210E               	addwfc	(DrawAnalogClock@pay+1)& (0+255),w,b
 34990  0003C8  0100               	movlb	0	; () banked
 34991  0003CA  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
 34992  0003CC  C319  F064         	movff	DrawAnalogClock@pax+2,display_drawLine@x1
 34993  0003D0  C31A  F065         	movff	DrawAnalogClock@pax+3,display_drawLine@x1+1
 34994  0003D4  0E01               	movlw	1
 34995  0003D6  0103               	movlb	3	; () banked
 34996  0003D8  250F               	addwf	(DrawAnalogClock@pay+2)& (0+255),w,b
 34997  0003DA  0100               	movlb	0	; () banked
 34998  0003DC  6F66               	movwf	display_drawLine@y1& (0+255),b
 34999  0003DE  0E00               	movlw	0
 35000  0003E0  0103               	movlb	3	; () banked
 35001  0003E2  2110               	addwfc	(DrawAnalogClock@pay+3)& (0+255),w,b
 35002  0003E4  0100               	movlb	0	; () banked
 35003  0003E6  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
 35004  0003E8  0E00               	movlw	0
 35005  0003EA  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 35006  0003EC  0E00               	movlw	0
 35007  0003EE  6F68               	movwf	display_drawLine@color& (0+255),b
 35008  0003F0  ECA7  F05C         	call	_display_drawLine	;wreg free
 35009                           
 35010                           ;Draw.c: 356: display_drawLine(pax[0], pay[0]-1, pax[1], pay[1]-1, 0x0000);
 35011  0003F4  C317  F060         	movff	DrawAnalogClock@pax,display_drawLine@x0
 35012  0003F8  C318  F061         	movff	DrawAnalogClock@pax+1,display_drawLine@x0+1
 35013  0003FC  0EFF               	movlw	255
 35014  0003FE  0103               	movlb	3	; () banked
 35015  000400  250D               	addwf	DrawAnalogClock@pay& (0+255),w,b
 35016  000402  0100               	movlb	0	; () banked
 35017  000404  6F62               	movwf	display_drawLine@y0& (0+255),b
 35018  000406  0EFF               	movlw	255
 35019  000408  0103               	movlb	3	; () banked
 35020  00040A  210E               	addwfc	(DrawAnalogClock@pay+1)& (0+255),w,b
 35021  00040C  0100               	movlb	0	; () banked
 35022  00040E  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
 35023  000410  C319  F064         	movff	DrawAnalogClock@pax+2,display_drawLine@x1
 35024  000414  C31A  F065         	movff	DrawAnalogClock@pax+3,display_drawLine@x1+1
 35025  000418  0EFF               	movlw	255
 35026  00041A  0103               	movlb	3	; () banked
 35027  00041C  250F               	addwf	(DrawAnalogClock@pay+2)& (0+255),w,b
 35028  00041E  0100               	movlb	0	; () banked
 35029  000420  6F66               	movwf	display_drawLine@y1& (0+255),b
 35030  000422  0EFF               	movlw	255
 35031  000424  0103               	movlb	3	; () banked
 35032  000426  2110               	addwfc	(DrawAnalogClock@pay+3)& (0+255),w,b
 35033  000428  0100               	movlb	0	; () banked
 35034  00042A  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
 35035  00042C  0E00               	movlw	0
 35036  00042E  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 35037  000430  0E00               	movlw	0
 35038  000432  6F68               	movwf	display_drawLine@color& (0+255),b
 35039  000434  ECA7  F05C         	call	_display_drawLine	;wreg free
 35040  000438                     l21537:
 35041                           
 35042                           ;Draw.c: 357: };Draw.c: 358: };Draw.c: 360: for (jj=0; jj<2; jj++) {
 35043  000438  0E00               	movlw	0
 35044  00043A  0101               	movlb	1	; () banked
 35045  00043C  6F92               	movwf	DrawAnalogClock@jj& (0+255),b
 35046  00043E                     l21539:
 35047                           
 35048                           ; BSR set to: 1
 35049  00043E  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35050  000440  0A80               	xorlw	128
 35051  000442  0F7E               	addlw	-130
 35052  000444  B0D8               	btfsc	status,0,c
 35053  000446  D02A               	goto	l21549
 35054                           
 35055                           ; BSR set to: 1
 35056                           ;Draw.c: 361: pax[jj] = cax[jj];
 35057  000448  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35058  00044A  0D02               	mullw	2
 35059  00044C  0E00               	movlw	low DrawAnalogClock@cax
 35060  00044E  24F3               	addwf	243,w,c
 35061  000450  6ED9               	movwf	fsr2l,c
 35062  000452  0E01               	movlw	high DrawAnalogClock@cax
 35063  000454  20F4               	addwfc	prodh,w,c
 35064  000456  6EDA               	movwf	fsr2h,c
 35065  000458  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35066  00045A  0D02               	mullw	2
 35067  00045C  0E17               	movlw	low DrawAnalogClock@pax
 35068  00045E  24F3               	addwf	243,w,c
 35069  000460  6EE1               	movwf	fsr1l,c
 35070  000462  0E03               	movlw	high DrawAnalogClock@pax
 35071  000464  20F4               	addwfc	prodh,w,c
 35072  000466  6EE2               	movwf	fsr1h,c
 35073  000468  CFDE FFE6          	movff	postinc2,postinc1
 35074  00046C  CFDD FFE5          	movff	postdec2,postdec1
 35075                           
 35076                           ;Draw.c: 362: pay[jj] = cay[jj];
 35077  000470  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35078  000472  0D02               	mullw	2
 35079  000474  0E0A               	movlw	low DrawAnalogClock@cay
 35080  000476  24F3               	addwf	243,w,c
 35081  000478  6ED9               	movwf	fsr2l,c
 35082  00047A  0E01               	movlw	high DrawAnalogClock@cay
 35083  00047C  20F4               	addwfc	prodh,w,c
 35084  00047E  6EDA               	movwf	fsr2h,c
 35085  000480  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35086  000482  0D02               	mullw	2
 35087  000484  0E0D               	movlw	low DrawAnalogClock@pay
 35088  000486  24F3               	addwf	243,w,c
 35089  000488  6EE1               	movwf	fsr1l,c
 35090  00048A  0E03               	movlw	high DrawAnalogClock@pay
 35091  00048C  20F4               	addwfc	prodh,w,c
 35092  00048E  6EE2               	movwf	fsr1h,c
 35093  000490  CFDE FFE6          	movff	postinc2,postinc1
 35094  000494  CFDD FFE5          	movff	postdec2,postdec1
 35095                           
 35096                           ; BSR set to: 1
 35097  000498  2B92               	incf	DrawAnalogClock@jj& (0+255),f,b
 35098  00049A  D7D1               	goto	l21539
 35099  00049C                     l21549:
 35100                           
 35101                           ; BSR set to: 1
 35102                           ;Draw.c: 363: };Draw.c: 364: };Draw.c: 368: if (preDateTime[1] != datetime[1]) {
 35103  00049C  0100               	movlb	0	; () banked
 35104  00049E  EE20 F001          	lfsr	2,1
 35105  0004A2  5188               	movf	DrawAnalogClock@datetime& (0+255),w,b
 35106  0004A4  26D9               	addwf	fsr2l,f,c
 35107  0004A6  5189               	movf	(DrawAnalogClock@datetime+1)& (0+255),w,b
 35108  0004A8  22DA               	addwfc	fsr2h,f,c
 35109  0004AA  50DE               	movf	postinc2,w,c
 35110  0004AC  0103               	movlb	3	; () banked
 35111  0004AE  196E               	xorwf	(_preDateTime+1)& (0+255),w,b
 35112  0004B0  B4D8               	btfsc	status,2,c
 35113  0004B2  D3E5               	goto	l2937
 35114                           
 35115                           ; BSR set to: 3
 35116                           ;Draw.c: 369: preDateTime[1] = datetime[1];
 35117  0004B4  0100               	movlb	0	; () banked
 35118  0004B6  EE20 F001          	lfsr	2,1
 35119  0004BA  5188               	movf	DrawAnalogClock@datetime& (0+255),w,b
 35120  0004BC  26D9               	addwf	fsr2l,f,c
 35121  0004BE  5189               	movf	(DrawAnalogClock@datetime+1)& (0+255),w,b
 35122  0004C0  22DA               	addwfc	fsr2h,f,c
 35123  0004C2  50DF               	movf	indf2,w,c
 35124  0004C4  0103               	movlb	3	; () banked
 35125  0004C6  6F6E               	movwf	(_preDateTime+1)& (0+255),b
 35126                           
 35127                           ; BSR set to: 3
 35128                           ;Draw.c: 370: mm = ((datetime[1]>>4)*10 + (datetime[1] & 0x0f));
 35129  0004C8  0100               	movlb	0	; () banked
 35130  0004CA  EE20 F001          	lfsr	2,1
 35131  0004CE  5188               	movf	DrawAnalogClock@datetime& (0+255),w,b
 35132  0004D0  26D9               	addwf	fsr2l,f,c
 35133  0004D2  5189               	movf	(DrawAnalogClock@datetime+1)& (0+255),w,b
 35134  0004D4  22DA               	addwfc	fsr2h,f,c
 35135  0004D6  50DF               	movf	indf2,w,c
 35136  0004D8  6F91               	movwf	??_DrawAnalogClock& (0+255),b
 35137  0004DA  0E0F               	movlw	15
 35138  0004DC  1791               	andwf	??_DrawAnalogClock& (0+255),f,b
 35139  0004DE  EE20 F001          	lfsr	2,1
 35140  0004E2  5188               	movf	DrawAnalogClock@datetime& (0+255),w,b
 35141  0004E4  26D9               	addwf	fsr2l,f,c
 35142  0004E6  5189               	movf	(DrawAnalogClock@datetime+1)& (0+255),w,b
 35143  0004E8  22DA               	addwfc	fsr2h,f,c
 35144  0004EA  50DF               	movf	indf2,w,c
 35145  0004EC  6F92               	movwf	(??_DrawAnalogClock+1)& (0+255),b
 35146  0004EE  3992               	swapf	(??_DrawAnalogClock+1)& (0+255),w,b
 35147  0004F0  0B0F               	andlw	15
 35148  0004F2  0D0A               	mullw	10
 35149  0004F4  50F3               	movf	243,w,c
 35150  0004F6  2591               	addwf	??_DrawAnalogClock& (0+255),w,b
 35151  0004F8  0101               	movlb	1	; () banked
 35152  0004FA  6F87               	movwf	DrawAnalogClock@mm& (0+255),b
 35153                           
 35154                           ; BSR set to: 1
 35155                           ;Draw.c: 371: hh = (datetime[2]>>4)*10 + (datetime[2] & 0x0f);
 35156  0004FC  0100               	movlb	0	; () banked
 35157  0004FE  EE20 F002          	lfsr	2,2
 35158  000502  5188               	movf	DrawAnalogClock@datetime& (0+255),w,b
 35159  000504  26D9               	addwf	fsr2l,f,c
 35160  000506  5189               	movf	(DrawAnalogClock@datetime+1)& (0+255),w,b
 35161  000508  22DA               	addwfc	fsr2h,f,c
 35162  00050A  50DF               	movf	indf2,w,c
 35163  00050C  6F91               	movwf	??_DrawAnalogClock& (0+255),b
 35164  00050E  0E0F               	movlw	15
 35165  000510  1791               	andwf	??_DrawAnalogClock& (0+255),f,b
 35166  000512  EE20 F002          	lfsr	2,2
 35167  000516  5188               	movf	DrawAnalogClock@datetime& (0+255),w,b
 35168  000518  26D9               	addwf	fsr2l,f,c
 35169  00051A  5189               	movf	(DrawAnalogClock@datetime+1)& (0+255),w,b
 35170  00051C  22DA               	addwfc	fsr2h,f,c
 35171  00051E  50DF               	movf	indf2,w,c
 35172  000520  6F92               	movwf	(??_DrawAnalogClock+1)& (0+255),b
 35173  000522  3992               	swapf	(??_DrawAnalogClock+1)& (0+255),w,b
 35174  000524  0B0F               	andlw	15
 35175  000526  0D0A               	mullw	10
 35176  000528  50F3               	movf	243,w,c
 35177  00052A  2591               	addwf	??_DrawAnalogClock& (0+255),w,b
 35178  00052C  0101               	movlb	1	; () banked
 35179  00052E  6F84               	movwf	DrawAnalogClock@hh& (0+255),b
 35180                           
 35181                           ; BSR set to: 1
 35182                           ;Draw.c: 374: rcm = rc1 -5;
 35183  000530  0EFB               	movlw	251
 35184  000532  258A               	addwf	DrawAnalogClock@rc1& (0+255),w,b
 35185  000534  6F67               	movwf	DrawAnalogClock@rcm& (0+255),b
 35186  000536  0EFF               	movlw	255
 35187  000538  218B               	addwfc	(DrawAnalogClock@rc1+1)& (0+255),w,b
 35188  00053A  6F68               	movwf	(DrawAnalogClock@rcm+1)& (0+255),b
 35189                           
 35190                           ; BSR set to: 1
 35191                           ;Draw.c: 375: angle = mm*6;
 35192  00053C  5187               	movf	DrawAnalogClock@mm& (0+255),w,b
 35193  00053E  6E1D               	movwf	___wmul@multiplier^0,c
 35194  000540  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 35195  000542  BE1D               	btfsc	___wmul@multiplier^0,7,c
 35196  000544  061E               	decf	(___wmul@multiplier+1)^0,f,c
 35197  000546  0E00               	movlw	0
 35198  000548  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 35199  00054A  0E06               	movlw	6
 35200  00054C  6E1F               	movwf	___wmul@multiplicand^0,c
 35201  00054E  EC12  F079         	call	___wmul	;wreg free
 35202  000552  C01D  F190         	movff	?___wmul,DrawAnalogClock@angle
 35203  000556  C01E  F191         	movff	?___wmul+1,DrawAnalogClock@angle+1
 35204                           
 35205                           ;Draw.c: 376: cmx[1] = xc + rcm * sind(angle)/256;
 35206  00055A  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 35207  00055E  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 35208  000562  ECBE  F069         	call	_sind	;wreg free
 35209  000566  C013  F01D         	movff	?_sind,___wmul@multiplier
 35210  00056A  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 35211  00056E  C167  F01F         	movff	DrawAnalogClock@rcm,___wmul@multiplicand
 35212  000572  C168  F020         	movff	DrawAnalogClock@rcm+1,___wmul@multiplicand+1
 35213  000576  EC12  F079         	call	___wmul	;wreg free
 35214  00057A  C01E  F01D         	movff	?___wmul+1,?___wmul
 35215  00057E  6A1E               	clrf	(?___wmul+1)^0,c
 35216  000580  BE1D               	btfsc	?___wmul^0,7,c
 35217  000582  681E               	setf	(?___wmul+1)^0,c
 35218  000584  0101               	movlb	1	; () banked
 35219  000586  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 35220  000588  241D               	addwf	?___wmul^0,w,c
 35221  00058A  6F2A               	movwf	(DrawAnalogClock@cmx+2)& (0+255),b
 35222  00058C  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 35223  00058E  201E               	addwfc	(?___wmul+1)^0,w,c
 35224  000590  6F2B               	movwf	(DrawAnalogClock@cmx+3)& (0+255),b
 35225                           
 35226                           ; BSR set to: 1
 35227                           ;Draw.c: 377: cmy[1] = yc - rcm * cosd(angle)/256;
 35228  000592  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 35229  000596  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 35230  00059A  EC47  F079         	call	_cosd	;wreg free
 35231  00059E  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 35232  0005A2  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 35233  0005A6  C167  F01F         	movff	DrawAnalogClock@rcm,___wmul@multiplicand
 35234  0005AA  C168  F020         	movff	DrawAnalogClock@rcm+1,___wmul@multiplicand+1
 35235  0005AE  EC12  F079         	call	___wmul	;wreg free
 35236  0005B2  C01E  F01D         	movff	?___wmul+1,?___wmul
 35237  0005B6  6A1E               	clrf	(?___wmul+1)^0,c
 35238  0005B8  BE1D               	btfsc	?___wmul^0,7,c
 35239  0005BA  681E               	setf	(?___wmul+1)^0,c
 35240  0005BC  501D               	movf	?___wmul^0,w,c
 35241  0005BE  0101               	movlb	1	; () banked
 35242  0005C0  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 35243  0005C2  6F34               	movwf	(DrawAnalogClock@cmy+2)& (0+255),b
 35244  0005C4  501E               	movf	(?___wmul+1)^0,w,c
 35245  0005C6  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 35246  0005C8  6F35               	movwf	(DrawAnalogClock@cmy+3)& (0+255),b
 35247                           
 35248                           ; BSR set to: 1
 35249                           ;Draw.c: 379: rcm2 = 3;
 35250  0005CA  0E00               	movlw	0
 35251  0005CC  6F70               	movwf	(DrawAnalogClock@rcm2+1)& (0+255),b
 35252  0005CE  0E03               	movlw	3
 35253  0005D0  6F6F               	movwf	DrawAnalogClock@rcm2& (0+255),b
 35254                           
 35255                           ; BSR set to: 1
 35256                           ;Draw.c: 380: angle = mm*6 +90;
 35257  0005D2  5187               	movf	DrawAnalogClock@mm& (0+255),w,b
 35258  0005D4  6E1D               	movwf	___wmul@multiplier^0,c
 35259  0005D6  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 35260  0005D8  BE1D               	btfsc	___wmul@multiplier^0,7,c
 35261  0005DA  061E               	decf	(___wmul@multiplier+1)^0,f,c
 35262  0005DC  0E00               	movlw	0
 35263  0005DE  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 35264  0005E0  0E06               	movlw	6
 35265  0005E2  6E1F               	movwf	___wmul@multiplicand^0,c
 35266  0005E4  EC12  F079         	call	___wmul	;wreg free
 35267  0005E8  0E5A               	movlw	90
 35268  0005EA  241D               	addwf	?___wmul^0,w,c
 35269  0005EC  0101               	movlb	1	; () banked
 35270  0005EE  6F90               	movwf	DrawAnalogClock@angle& (0+255),b
 35271  0005F0  0E00               	movlw	0
 35272  0005F2  201E               	addwfc	(?___wmul+1)^0,w,c
 35273  0005F4  6F91               	movwf	(DrawAnalogClock@angle+1)& (0+255),b
 35274                           
 35275                           ; BSR set to: 1
 35276                           ;Draw.c: 381: cmx[2] = xc + rcm2 * sind(angle)/256;
 35277  0005F6  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 35278  0005FA  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 35279  0005FE  ECBE  F069         	call	_sind	;wreg free
 35280  000602  C013  F01D         	movff	?_sind,___wmul@multiplier
 35281  000606  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 35282  00060A  C16F  F01F         	movff	DrawAnalogClock@rcm2,___wmul@multiplicand
 35283  00060E  C170  F020         	movff	DrawAnalogClock@rcm2+1,___wmul@multiplicand+1
 35284  000612  EC12  F079         	call	___wmul	;wreg free
 35285  000616  C01E  F01D         	movff	?___wmul+1,?___wmul
 35286  00061A  6A1E               	clrf	(?___wmul+1)^0,c
 35287  00061C  BE1D               	btfsc	?___wmul^0,7,c
 35288  00061E  681E               	setf	(?___wmul+1)^0,c
 35289  000620  0101               	movlb	1	; () banked
 35290  000622  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 35291  000624  241D               	addwf	?___wmul^0,w,c
 35292  000626  6F2C               	movwf	(DrawAnalogClock@cmx+4)& (0+255),b
 35293  000628  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 35294  00062A  201E               	addwfc	(?___wmul+1)^0,w,c
 35295  00062C  6F2D               	movwf	(DrawAnalogClock@cmx+5)& (0+255),b
 35296                           
 35297                           ; BSR set to: 1
 35298                           ;Draw.c: 382: cmy[2] = yc - rcm2 * cosd(angle)/256;
 35299  00062E  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 35300  000632  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 35301  000636  EC47  F079         	call	_cosd	;wreg free
 35302  00063A  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 35303  00063E  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 35304  000642  C16F  F01F         	movff	DrawAnalogClock@rcm2,___wmul@multiplicand
 35305  000646  C170  F020         	movff	DrawAnalogClock@rcm2+1,___wmul@multiplicand+1
 35306  00064A  EC12  F079         	call	___wmul	;wreg free
 35307  00064E  C01E  F01D         	movff	?___wmul+1,?___wmul
 35308  000652  6A1E               	clrf	(?___wmul+1)^0,c
 35309  000654  BE1D               	btfsc	?___wmul^0,7,c
 35310  000656  681E               	setf	(?___wmul+1)^0,c
 35311  000658  501D               	movf	?___wmul^0,w,c
 35312  00065A  0101               	movlb	1	; () banked
 35313  00065C  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 35314  00065E  6F36               	movwf	(DrawAnalogClock@cmy+4)& (0+255),b
 35315  000660  501E               	movf	(?___wmul+1)^0,w,c
 35316  000662  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 35317  000664  6F37               	movwf	(DrawAnalogClock@cmy+5)& (0+255),b
 35318                           
 35319                           ; BSR set to: 1
 35320                           ;Draw.c: 383: cmx[3] = xc - (cmx[2]-xc);
 35321  000666  C18C  F091         	movff	DrawAnalogClock@xc,??_DrawAnalogClock
 35322  00066A  C18D  F092         	movff	DrawAnalogClock@xc+1,??_DrawAnalogClock+1
 35323  00066E  90D8               	bcf	status,0,c
 35324  000670  0100               	movlb	0	; () banked
 35325  000672  3791               	rlcf	??_DrawAnalogClock& (0+255),f,b
 35326  000674  3792               	rlcf	(??_DrawAnalogClock+1)& (0+255),f,b
 35327  000676  0101               	movlb	1	; () banked
 35328  000678  512C               	movf	(DrawAnalogClock@cmx+4)& (0+255),w,b
 35329  00067A  0100               	movlb	0	; () banked
 35330  00067C  5D91               	subwf	??_DrawAnalogClock& (0+255),w,b
 35331  00067E  0101               	movlb	1	; () banked
 35332  000680  6F2E               	movwf	(DrawAnalogClock@cmx+6)& (0+255),b
 35333  000682  512D               	movf	(DrawAnalogClock@cmx+5)& (0+255),w,b
 35334  000684  0100               	movlb	0	; () banked
 35335  000686  5992               	subwfb	(??_DrawAnalogClock+1)& (0+255),w,b
 35336  000688  0101               	movlb	1	; () banked
 35337  00068A  6F2F               	movwf	(DrawAnalogClock@cmx+7)& (0+255),b
 35338                           
 35339                           ; BSR set to: 1
 35340                           ;Draw.c: 384: cmy[3] = yc - (cmy[2]-yc);
 35341  00068C  C18E  F091         	movff	DrawAnalogClock@yc,??_DrawAnalogClock
 35342  000690  C18F  F092         	movff	DrawAnalogClock@yc+1,??_DrawAnalogClock+1
 35343  000694  90D8               	bcf	status,0,c
 35344  000696  0100               	movlb	0	; () banked
 35345  000698  3791               	rlcf	??_DrawAnalogClock& (0+255),f,b
 35346  00069A  3792               	rlcf	(??_DrawAnalogClock+1)& (0+255),f,b
 35347  00069C  0101               	movlb	1	; () banked
 35348  00069E  5136               	movf	(DrawAnalogClock@cmy+4)& (0+255),w,b
 35349  0006A0  0100               	movlb	0	; () banked
 35350  0006A2  5D91               	subwf	??_DrawAnalogClock& (0+255),w,b
 35351  0006A4  0101               	movlb	1	; () banked
 35352  0006A6  6F38               	movwf	(DrawAnalogClock@cmy+6)& (0+255),b
 35353  0006A8  5137               	movf	(DrawAnalogClock@cmy+5)& (0+255),w,b
 35354  0006AA  0100               	movlb	0	; () banked
 35355  0006AC  5992               	subwfb	(??_DrawAnalogClock+1)& (0+255),w,b
 35356  0006AE  0101               	movlb	1	; () banked
 35357  0006B0  6F39               	movwf	(DrawAnalogClock@cmy+7)& (0+255),b
 35358                           
 35359                           ; BSR set to: 1
 35360                           ;Draw.c: 387: rcm3 = 10;
 35361  0006B2  0E00               	movlw	0
 35362  0006B4  6F72               	movwf	(DrawAnalogClock@rcm3+1)& (0+255),b
 35363  0006B6  0E0A               	movlw	10
 35364  0006B8  6F71               	movwf	DrawAnalogClock@rcm3& (0+255),b
 35365                           
 35366                           ; BSR set to: 1
 35367                           ;Draw.c: 388: angle = mm*6 +180;
 35368  0006BA  5187               	movf	DrawAnalogClock@mm& (0+255),w,b
 35369  0006BC  6E1D               	movwf	___wmul@multiplier^0,c
 35370  0006BE  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 35371  0006C0  BE1D               	btfsc	___wmul@multiplier^0,7,c
 35372  0006C2  061E               	decf	(___wmul@multiplier+1)^0,f,c
 35373  0006C4  0E00               	movlw	0
 35374  0006C6  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 35375  0006C8  0E06               	movlw	6
 35376  0006CA  6E1F               	movwf	___wmul@multiplicand^0,c
 35377  0006CC  EC12  F079         	call	___wmul	;wreg free
 35378  0006D0  0EB4               	movlw	180
 35379  0006D2  241D               	addwf	?___wmul^0,w,c
 35380  0006D4  0101               	movlb	1	; () banked
 35381  0006D6  6F90               	movwf	DrawAnalogClock@angle& (0+255),b
 35382  0006D8  0E00               	movlw	0
 35383  0006DA  201E               	addwfc	(?___wmul+1)^0,w,c
 35384  0006DC  6F91               	movwf	(DrawAnalogClock@angle+1)& (0+255),b
 35385                           
 35386                           ; BSR set to: 1
 35387                           ;Draw.c: 389: cmx[4] = xc + rcm3 * sind(angle)/256;
 35388  0006DE  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 35389  0006E2  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 35390  0006E6  ECBE  F069         	call	_sind	;wreg free
 35391  0006EA  C013  F01D         	movff	?_sind,___wmul@multiplier
 35392  0006EE  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 35393  0006F2  C171  F01F         	movff	DrawAnalogClock@rcm3,___wmul@multiplicand
 35394  0006F6  C172  F020         	movff	DrawAnalogClock@rcm3+1,___wmul@multiplicand+1
 35395  0006FA  EC12  F079         	call	___wmul	;wreg free
 35396  0006FE  C01E  F01D         	movff	?___wmul+1,?___wmul
 35397  000702  6A1E               	clrf	(?___wmul+1)^0,c
 35398  000704  BE1D               	btfsc	?___wmul^0,7,c
 35399  000706  681E               	setf	(?___wmul+1)^0,c
 35400  000708  0101               	movlb	1	; () banked
 35401  00070A  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 35402  00070C  241D               	addwf	?___wmul^0,w,c
 35403  00070E  6F30               	movwf	(DrawAnalogClock@cmx+8)& (0+255),b
 35404  000710  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 35405  000712  201E               	addwfc	(?___wmul+1)^0,w,c
 35406  000714  6F31               	movwf	(DrawAnalogClock@cmx+9)& (0+255),b
 35407                           
 35408                           ; BSR set to: 1
 35409                           ;Draw.c: 390: cmy[4] = yc - rcm3 * cosd(angle)/256;
 35410  000716  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 35411  00071A  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 35412  00071E  EC47  F079         	call	_cosd	;wreg free
 35413  000722  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 35414  000726  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 35415  00072A  C171  F01F         	movff	DrawAnalogClock@rcm3,___wmul@multiplicand
 35416  00072E  C172  F020         	movff	DrawAnalogClock@rcm3+1,___wmul@multiplicand+1
 35417  000732  EC12  F079         	call	___wmul	;wreg free
 35418  000736  C01E  F01D         	movff	?___wmul+1,?___wmul
 35419  00073A  6A1E               	clrf	(?___wmul+1)^0,c
 35420  00073C  BE1D               	btfsc	?___wmul^0,7,c
 35421  00073E  681E               	setf	(?___wmul+1)^0,c
 35422  000740  501D               	movf	?___wmul^0,w,c
 35423  000742  0101               	movlb	1	; () banked
 35424  000744  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 35425  000746  6F3A               	movwf	(DrawAnalogClock@cmy+8)& (0+255),b
 35426  000748  501E               	movf	(?___wmul+1)^0,w,c
 35427  00074A  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 35428  00074C  6F3B               	movwf	(DrawAnalogClock@cmy+9)& (0+255),b
 35429                           
 35430                           ; BSR set to: 1
 35431                           ;Draw.c: 394: if (preDateTime[2] != datetime[2]) {
 35432  00074E  0100               	movlb	0	; () banked
 35433  000750  EE20 F002          	lfsr	2,2
 35434  000754  5188               	movf	DrawAnalogClock@datetime& (0+255),w,b
 35435  000756  26D9               	addwf	fsr2l,f,c
 35436  000758  5189               	movf	(DrawAnalogClock@datetime+1)& (0+255),w,b
 35437  00075A  22DA               	addwfc	fsr2h,f,c
 35438  00075C  50DE               	movf	postinc2,w,c
 35439  00075E  0103               	movlb	3	; () banked
 35440  000760  196F               	xorwf	(_preDateTime+2)& (0+255),w,b
 35441  000762  B4D8               	btfsc	status,2,c
 35442  000764  D1DE               	goto	l21637
 35443                           
 35444                           ; BSR set to: 3
 35445                           ;Draw.c: 396: hh = hh % 12;
 35446  000766  0101               	movlb	1	; () banked
 35447  000768  5184               	movf	DrawAnalogClock@hh& (0+255),w,b
 35448  00076A  6E0E               	movwf	___awmod@dividend^0,c
 35449  00076C  6A0F               	clrf	(___awmod@dividend+1)^0,c
 35450  00076E  BE0E               	btfsc	___awmod@dividend^0,7,c
 35451  000770  060F               	decf	(___awmod@dividend+1)^0,f,c
 35452  000772  0E00               	movlw	0
 35453  000774  6E11               	movwf	(___awmod@divisor+1)^0,c
 35454  000776  0E0C               	movlw	12
 35455  000778  6E10               	movwf	___awmod@divisor^0,c
 35456  00077A  ECC7  F06E         	call	___awmod	;wreg free
 35457  00077E  500E               	movf	?___awmod^0,w,c
 35458  000780  0101               	movlb	1	; () banked
 35459  000782  6F84               	movwf	DrawAnalogClock@hh& (0+255),b
 35460                           
 35461                           ; BSR set to: 1
 35462                           ;Draw.c: 397: angle = hh * 30 + mm/2;
 35463  000784  5184               	movf	DrawAnalogClock@hh& (0+255),w,b
 35464  000786  6E1D               	movwf	___wmul@multiplier^0,c
 35465  000788  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 35466  00078A  BE1D               	btfsc	___wmul@multiplier^0,7,c
 35467  00078C  061E               	decf	(___wmul@multiplier+1)^0,f,c
 35468  00078E  0E00               	movlw	0
 35469  000790  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 35470  000792  0E1E               	movlw	30
 35471  000794  6E1F               	movwf	___wmul@multiplicand^0,c
 35472  000796  EC12  F079         	call	___wmul	;wreg free
 35473  00079A  C01D  F091         	movff	?___wmul,??_DrawAnalogClock
 35474  00079E  C01E  F092         	movff	?___wmul+1,??_DrawAnalogClock+1
 35475  0007A2  0101               	movlb	1	; () banked
 35476  0007A4  5187               	movf	DrawAnalogClock@mm& (0+255),w,b
 35477  0007A6  6E0E               	movwf	___awdiv@dividend^0,c
 35478  0007A8  6A0F               	clrf	(___awdiv@dividend+1)^0,c
 35479  0007AA  BE0E               	btfsc	___awdiv@dividend^0,7,c
 35480  0007AC  060F               	decf	(___awdiv@dividend+1)^0,f,c
 35481  0007AE  0E00               	movlw	0
 35482  0007B0  6E11               	movwf	(___awdiv@divisor+1)^0,c
 35483  0007B2  0E02               	movlw	2
 35484  0007B4  6E10               	movwf	___awdiv@divisor^0,c
 35485  0007B6  ECD1  F06C         	call	___awdiv	;wreg free
 35486  0007BA  500E               	movf	?___awdiv^0,w,c
 35487  0007BC  0100               	movlb	0	; () banked
 35488  0007BE  2591               	addwf	??_DrawAnalogClock& (0+255),w,b
 35489  0007C0  0101               	movlb	1	; () banked
 35490  0007C2  6F90               	movwf	DrawAnalogClock@angle& (0+255),b
 35491  0007C4  500F               	movf	(?___awdiv+1)^0,w,c
 35492  0007C6  0100               	movlb	0	; () banked
 35493  0007C8  2192               	addwfc	(??_DrawAnalogClock+1)& (0+255),w,b
 35494  0007CA  0101               	movlb	1	; () banked
 35495  0007CC  6F91               	movwf	(DrawAnalogClock@angle+1)& (0+255),b
 35496                           
 35497                           ; BSR set to: 1
 35498                           ;Draw.c: 399: rch = rc1 *7/10;
 35499  0007CE  C18A  F01D         	movff	DrawAnalogClock@rc1,___wmul@multiplier
 35500  0007D2  C18B  F01E         	movff	DrawAnalogClock@rc1+1,___wmul@multiplier+1
 35501  0007D6  0E00               	movlw	0
 35502  0007D8  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 35503  0007DA  0E07               	movlw	7
 35504  0007DC  6E1F               	movwf	___wmul@multiplicand^0,c
 35505  0007DE  EC12  F079         	call	___wmul	;wreg free
 35506  0007E2  C01D  F023         	movff	?___wmul,___lwdiv@dividend
 35507  0007E6  C01E  F024         	movff	?___wmul+1,___lwdiv@dividend+1
 35508  0007EA  0E00               	movlw	0
 35509  0007EC  6E26               	movwf	(___lwdiv@divisor+1)^0,c
 35510  0007EE  0E0A               	movlw	10
 35511  0007F0  6E25               	movwf	___lwdiv@divisor^0,c
 35512  0007F2  EC66  F073         	call	___lwdiv	;wreg free
 35513  0007F6  C023  F169         	movff	?___lwdiv,DrawAnalogClock@rch
 35514  0007FA  C024  F16A         	movff	?___lwdiv+1,DrawAnalogClock@rch+1
 35515                           
 35516                           ;Draw.c: 400: chx[0] = xc;
 35517  0007FE  C18C  F13C         	movff	DrawAnalogClock@xc,DrawAnalogClock@chx
 35518  000802  C18D  F13D         	movff	DrawAnalogClock@xc+1,DrawAnalogClock@chx+1
 35519                           
 35520                           ;Draw.c: 401: chy[0] = yc;
 35521  000806  C18E  F146         	movff	DrawAnalogClock@yc,DrawAnalogClock@chy
 35522  00080A  C18F  F147         	movff	DrawAnalogClock@yc+1,DrawAnalogClock@chy+1
 35523                           
 35524                           ;Draw.c: 402: chx[1] = xc + rch * sind(angle)/256;
 35525  00080E  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 35526  000812  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 35527  000816  ECBE  F069         	call	_sind	;wreg free
 35528  00081A  C013  F01D         	movff	?_sind,___wmul@multiplier
 35529  00081E  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 35530  000822  C169  F01F         	movff	DrawAnalogClock@rch,___wmul@multiplicand
 35531  000826  C16A  F020         	movff	DrawAnalogClock@rch+1,___wmul@multiplicand+1
 35532  00082A  EC12  F079         	call	___wmul	;wreg free
 35533  00082E  C01E  F01D         	movff	?___wmul+1,?___wmul
 35534  000832  6A1E               	clrf	(?___wmul+1)^0,c
 35535  000834  BE1D               	btfsc	?___wmul^0,7,c
 35536  000836  681E               	setf	(?___wmul+1)^0,c
 35537  000838  0101               	movlb	1	; () banked
 35538  00083A  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 35539  00083C  241D               	addwf	?___wmul^0,w,c
 35540  00083E  6F3E               	movwf	(DrawAnalogClock@chx+2)& (0+255),b
 35541  000840  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 35542  000842  201E               	addwfc	(?___wmul+1)^0,w,c
 35543  000844  6F3F               	movwf	(DrawAnalogClock@chx+3)& (0+255),b
 35544                           
 35545                           ; BSR set to: 1
 35546                           ;Draw.c: 403: chy[1] = yc - rch * cosd(angle)/256;
 35547  000846  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 35548  00084A  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 35549  00084E  EC47  F079         	call	_cosd	;wreg free
 35550  000852  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 35551  000856  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 35552  00085A  C169  F01F         	movff	DrawAnalogClock@rch,___wmul@multiplicand
 35553  00085E  C16A  F020         	movff	DrawAnalogClock@rch+1,___wmul@multiplicand+1
 35554  000862  EC12  F079         	call	___wmul	;wreg free
 35555  000866  C01E  F01D         	movff	?___wmul+1,?___wmul
 35556  00086A  6A1E               	clrf	(?___wmul+1)^0,c
 35557  00086C  BE1D               	btfsc	?___wmul^0,7,c
 35558  00086E  681E               	setf	(?___wmul+1)^0,c
 35559  000870  501D               	movf	?___wmul^0,w,c
 35560  000872  0101               	movlb	1	; () banked
 35561  000874  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 35562  000876  6F48               	movwf	(DrawAnalogClock@chy+2)& (0+255),b
 35563  000878  501E               	movf	(?___wmul+1)^0,w,c
 35564  00087A  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 35565  00087C  6F49               	movwf	(DrawAnalogClock@chy+3)& (0+255),b
 35566                           
 35567                           ; BSR set to: 1
 35568                           ;Draw.c: 405: rch2 = 4;
 35569  00087E  0E00               	movlw	0
 35570  000880  6F74               	movwf	(DrawAnalogClock@rch2+1)& (0+255),b
 35571  000882  0E04               	movlw	4
 35572  000884  6F73               	movwf	DrawAnalogClock@rch2& (0+255),b
 35573                           
 35574                           ; BSR set to: 1
 35575                           ;Draw.c: 406: chx[2] = xc + rch2 * sind(angle +90)/256;
 35576  000886  0E5A               	movlw	90
 35577  000888  2590               	addwf	DrawAnalogClock@angle& (0+255),w,b
 35578  00088A  6E13               	movwf	sind@theta^0,c
 35579  00088C  0E00               	movlw	0
 35580  00088E  2191               	addwfc	(DrawAnalogClock@angle+1)& (0+255),w,b
 35581  000890  6E14               	movwf	(sind@theta+1)^0,c
 35582  000892  ECBE  F069         	call	_sind	;wreg free
 35583  000896  C013  F01D         	movff	?_sind,___wmul@multiplier
 35584  00089A  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 35585  00089E  C173  F01F         	movff	DrawAnalogClock@rch2,___wmul@multiplicand
 35586  0008A2  C174  F020         	movff	DrawAnalogClock@rch2+1,___wmul@multiplicand+1
 35587  0008A6  EC12  F079         	call	___wmul	;wreg free
 35588  0008AA  C01E  F01D         	movff	?___wmul+1,?___wmul
 35589  0008AE  6A1E               	clrf	(?___wmul+1)^0,c
 35590  0008B0  BE1D               	btfsc	?___wmul^0,7,c
 35591  0008B2  681E               	setf	(?___wmul+1)^0,c
 35592  0008B4  0101               	movlb	1	; () banked
 35593  0008B6  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 35594  0008B8  241D               	addwf	?___wmul^0,w,c
 35595  0008BA  6F40               	movwf	(DrawAnalogClock@chx+4)& (0+255),b
 35596  0008BC  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 35597  0008BE  201E               	addwfc	(?___wmul+1)^0,w,c
 35598  0008C0  6F41               	movwf	(DrawAnalogClock@chx+5)& (0+255),b
 35599                           
 35600                           ; BSR set to: 1
 35601                           ;Draw.c: 407: chy[2] = yc - rch2 * cosd(angle +90)/256;
 35602  0008C2  0E5A               	movlw	90
 35603  0008C4  2590               	addwf	DrawAnalogClock@angle& (0+255),w,b
 35604  0008C6  6E1B               	movwf	cosd@theta^0,c
 35605  0008C8  0E00               	movlw	0
 35606  0008CA  2191               	addwfc	(DrawAnalogClock@angle+1)& (0+255),w,b
 35607  0008CC  6E1C               	movwf	(cosd@theta+1)^0,c
 35608  0008CE  EC47  F079         	call	_cosd	;wreg free
 35609  0008D2  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 35610  0008D6  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 35611  0008DA  C173  F01F         	movff	DrawAnalogClock@rch2,___wmul@multiplicand
 35612  0008DE  C174  F020         	movff	DrawAnalogClock@rch2+1,___wmul@multiplicand+1
 35613  0008E2  EC12  F079         	call	___wmul	;wreg free
 35614  0008E6  C01E  F01D         	movff	?___wmul+1,?___wmul
 35615  0008EA  6A1E               	clrf	(?___wmul+1)^0,c
 35616  0008EC  BE1D               	btfsc	?___wmul^0,7,c
 35617  0008EE  681E               	setf	(?___wmul+1)^0,c
 35618  0008F0  501D               	movf	?___wmul^0,w,c
 35619  0008F2  0101               	movlb	1	; () banked
 35620  0008F4  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 35621  0008F6  6F4A               	movwf	(DrawAnalogClock@chy+4)& (0+255),b
 35622  0008F8  501E               	movf	(?___wmul+1)^0,w,c
 35623  0008FA  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 35624  0008FC  6F4B               	movwf	(DrawAnalogClock@chy+5)& (0+255),b
 35625                           
 35626                           ; BSR set to: 1
 35627                           ;Draw.c: 408: chx[3] = xc - (chx[2]-xc);
 35628  0008FE  C18C  F091         	movff	DrawAnalogClock@xc,??_DrawAnalogClock
 35629  000902  C18D  F092         	movff	DrawAnalogClock@xc+1,??_DrawAnalogClock+1
 35630  000906  90D8               	bcf	status,0,c
 35631  000908  0100               	movlb	0	; () banked
 35632  00090A  3791               	rlcf	??_DrawAnalogClock& (0+255),f,b
 35633  00090C  3792               	rlcf	(??_DrawAnalogClock+1)& (0+255),f,b
 35634  00090E  0101               	movlb	1	; () banked
 35635  000910  5140               	movf	(DrawAnalogClock@chx+4)& (0+255),w,b
 35636  000912  0100               	movlb	0	; () banked
 35637  000914  5D91               	subwf	??_DrawAnalogClock& (0+255),w,b
 35638  000916  0101               	movlb	1	; () banked
 35639  000918  6F42               	movwf	(DrawAnalogClock@chx+6)& (0+255),b
 35640  00091A  5141               	movf	(DrawAnalogClock@chx+5)& (0+255),w,b
 35641  00091C  0100               	movlb	0	; () banked
 35642  00091E  5992               	subwfb	(??_DrawAnalogClock+1)& (0+255),w,b
 35643  000920  0101               	movlb	1	; () banked
 35644  000922  6F43               	movwf	(DrawAnalogClock@chx+7)& (0+255),b
 35645                           
 35646                           ; BSR set to: 1
 35647                           ;Draw.c: 409: chy[3] = yc - (chy[2]-yc);
 35648  000924  C18E  F091         	movff	DrawAnalogClock@yc,??_DrawAnalogClock
 35649  000928  C18F  F092         	movff	DrawAnalogClock@yc+1,??_DrawAnalogClock+1
 35650  00092C  90D8               	bcf	status,0,c
 35651  00092E  0100               	movlb	0	; () banked
 35652  000930  3791               	rlcf	??_DrawAnalogClock& (0+255),f,b
 35653  000932  3792               	rlcf	(??_DrawAnalogClock+1)& (0+255),f,b
 35654  000934  0101               	movlb	1	; () banked
 35655  000936  514A               	movf	(DrawAnalogClock@chy+4)& (0+255),w,b
 35656  000938  0100               	movlb	0	; () banked
 35657  00093A  5D91               	subwf	??_DrawAnalogClock& (0+255),w,b
 35658  00093C  0101               	movlb	1	; () banked
 35659  00093E  6F4C               	movwf	(DrawAnalogClock@chy+6)& (0+255),b
 35660  000940  514B               	movf	(DrawAnalogClock@chy+5)& (0+255),w,b
 35661  000942  0100               	movlb	0	; () banked
 35662  000944  5992               	subwfb	(??_DrawAnalogClock+1)& (0+255),w,b
 35663  000946  0101               	movlb	1	; () banked
 35664  000948  6F4D               	movwf	(DrawAnalogClock@chy+7)& (0+255),b
 35665                           
 35666                           ; BSR set to: 1
 35667                           ;Draw.c: 412: rch3 = 10;
 35668  00094A  0E00               	movlw	0
 35669  00094C  6F76               	movwf	(DrawAnalogClock@rch3+1)& (0+255),b
 35670  00094E  0E0A               	movlw	10
 35671  000950  6F75               	movwf	DrawAnalogClock@rch3& (0+255),b
 35672                           
 35673                           ; BSR set to: 1
 35674                           ;Draw.c: 413: chx[4] = xc + rch3 * sind(angle +180)/256;
 35675  000952  0EB4               	movlw	180
 35676  000954  2590               	addwf	DrawAnalogClock@angle& (0+255),w,b
 35677  000956  6E13               	movwf	sind@theta^0,c
 35678  000958  0E00               	movlw	0
 35679  00095A  2191               	addwfc	(DrawAnalogClock@angle+1)& (0+255),w,b
 35680  00095C  6E14               	movwf	(sind@theta+1)^0,c
 35681  00095E  ECBE  F069         	call	_sind	;wreg free
 35682  000962  C013  F01D         	movff	?_sind,___wmul@multiplier
 35683  000966  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 35684  00096A  C175  F01F         	movff	DrawAnalogClock@rch3,___wmul@multiplicand
 35685  00096E  C176  F020         	movff	DrawAnalogClock@rch3+1,___wmul@multiplicand+1
 35686  000972  EC12  F079         	call	___wmul	;wreg free
 35687  000976  C01E  F01D         	movff	?___wmul+1,?___wmul
 35688  00097A  6A1E               	clrf	(?___wmul+1)^0,c
 35689  00097C  BE1D               	btfsc	?___wmul^0,7,c
 35690  00097E  681E               	setf	(?___wmul+1)^0,c
 35691  000980  0101               	movlb	1	; () banked
 35692  000982  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 35693  000984  241D               	addwf	?___wmul^0,w,c
 35694  000986  6F44               	movwf	(DrawAnalogClock@chx+8)& (0+255),b
 35695  000988  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 35696  00098A  201E               	addwfc	(?___wmul+1)^0,w,c
 35697  00098C  6F45               	movwf	(DrawAnalogClock@chx+9)& (0+255),b
 35698                           
 35699                           ; BSR set to: 1
 35700                           ;Draw.c: 414: chy[4] = yc - rch3 * cosd(angle +180)/256;
 35701  00098E  0EB4               	movlw	180
 35702  000990  2590               	addwf	DrawAnalogClock@angle& (0+255),w,b
 35703  000992  6E1B               	movwf	cosd@theta^0,c
 35704  000994  0E00               	movlw	0
 35705  000996  2191               	addwfc	(DrawAnalogClock@angle+1)& (0+255),w,b
 35706  000998  6E1C               	movwf	(cosd@theta+1)^0,c
 35707  00099A  EC47  F079         	call	_cosd	;wreg free
 35708  00099E  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 35709  0009A2  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 35710  0009A6  C175  F01F         	movff	DrawAnalogClock@rch3,___wmul@multiplicand
 35711  0009AA  C176  F020         	movff	DrawAnalogClock@rch3+1,___wmul@multiplicand+1
 35712  0009AE  EC12  F079         	call	___wmul	;wreg free
 35713  0009B2  C01E  F01D         	movff	?___wmul+1,?___wmul
 35714  0009B6  6A1E               	clrf	(?___wmul+1)^0,c
 35715  0009B8  BE1D               	btfsc	?___wmul^0,7,c
 35716  0009BA  681E               	setf	(?___wmul+1)^0,c
 35717  0009BC  501D               	movf	?___wmul^0,w,c
 35718  0009BE  0101               	movlb	1	; () banked
 35719  0009C0  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 35720  0009C2  6F4E               	movwf	(DrawAnalogClock@chy+8)& (0+255),b
 35721  0009C4  501E               	movf	(?___wmul+1)^0,w,c
 35722  0009C6  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 35723  0009C8  6F4F               	movwf	(DrawAnalogClock@chy+9)& (0+255),b
 35724                           
 35725                           ; BSR set to: 1
 35726                           ;Draw.c: 417: display_fillTriangle(phx[1], phy[1], phx[2], phy[2], phx[3], phy[3], 0x000
      +                          0);
 35727  0009CA  C355  F027         	movff	DrawAnalogClock@phx+2,display_fillTriangle@x0
 35728  0009CE  C356  F028         	movff	DrawAnalogClock@phx+3,display_fillTriangle@x0+1
 35729  0009D2  C34B  F029         	movff	DrawAnalogClock@phy+2,display_fillTriangle@y0
 35730  0009D6  C34C  F02A         	movff	DrawAnalogClock@phy+3,display_fillTriangle@y0+1
 35731  0009DA  C357  F02B         	movff	DrawAnalogClock@phx+4,display_fillTriangle@x1
 35732  0009DE  C358  F02C         	movff	DrawAnalogClock@phx+5,display_fillTriangle@x1+1
 35733  0009E2  C34D  F02D         	movff	DrawAnalogClock@phy+4,display_fillTriangle@y1
 35734  0009E6  C34E  F02E         	movff	DrawAnalogClock@phy+5,display_fillTriangle@y1+1
 35735  0009EA  C359  F02F         	movff	DrawAnalogClock@phx+6,display_fillTriangle@x2
 35736  0009EE  C35A  F030         	movff	DrawAnalogClock@phx+7,display_fillTriangle@x2+1
 35737  0009F2  C34F  F031         	movff	DrawAnalogClock@phy+6,display_fillTriangle@y2
 35738  0009F6  C350  F032         	movff	DrawAnalogClock@phy+7,display_fillTriangle@y2+1
 35739  0009FA  0E00               	movlw	0
 35740  0009FC  6E34               	movwf	(display_fillTriangle@color+1)^0,c
 35741  0009FE  0E00               	movlw	0
 35742  000A00  6E33               	movwf	display_fillTriangle@color^0,c
 35743  000A02  EC8C  F031         	call	_display_fillTriangle	;wreg free
 35744                           
 35745                           ;Draw.c: 418: display_drawTriangle(phx[1], phy[1], phx[2], phy[2], phx[3], phy[3], 0x000
      +                          0);
 35746  000A06  C355  F06A         	movff	DrawAnalogClock@phx+2,display_drawTriangle@x0
 35747  000A0A  C356  F06B         	movff	DrawAnalogClock@phx+3,display_drawTriangle@x0+1
 35748  000A0E  C34B  F06C         	movff	DrawAnalogClock@phy+2,display_drawTriangle@y0
 35749  000A12  C34C  F06D         	movff	DrawAnalogClock@phy+3,display_drawTriangle@y0+1
 35750  000A16  C357  F06E         	movff	DrawAnalogClock@phx+4,display_drawTriangle@x1
 35751  000A1A  C358  F06F         	movff	DrawAnalogClock@phx+5,display_drawTriangle@x1+1
 35752  000A1E  C34D  F070         	movff	DrawAnalogClock@phy+4,display_drawTriangle@y1
 35753  000A22  C34E  F071         	movff	DrawAnalogClock@phy+5,display_drawTriangle@y1+1
 35754  000A26  C359  F072         	movff	DrawAnalogClock@phx+6,display_drawTriangle@x2
 35755  000A2A  C35A  F073         	movff	DrawAnalogClock@phx+7,display_drawTriangle@x2+1
 35756  000A2E  C34F  F074         	movff	DrawAnalogClock@phy+6,display_drawTriangle@y2
 35757  000A32  C350  F075         	movff	DrawAnalogClock@phy+7,display_drawTriangle@y2+1
 35758  000A36  0E00               	movlw	0
 35759  000A38  0100               	movlb	0	; () banked
 35760  000A3A  6F77               	movwf	(display_drawTriangle@color+1)& (0+255),b
 35761  000A3C  0E00               	movlw	0
 35762  000A3E  6F76               	movwf	display_drawTriangle@color& (0+255),b
 35763  000A40  EC8E  F06C         	call	_display_drawTriangle	;wreg free
 35764                           
 35765                           ;Draw.c: 419: display_fillTriangle(phx[4], phy[4], phx[2], phy[2], phx[3], phy[3], 0x000
      +                          0);
 35766  000A44  C35B  F027         	movff	DrawAnalogClock@phx+8,display_fillTriangle@x0
 35767  000A48  C35C  F028         	movff	DrawAnalogClock@phx+9,display_fillTriangle@x0+1
 35768  000A4C  C351  F029         	movff	DrawAnalogClock@phy+8,display_fillTriangle@y0
 35769  000A50  C352  F02A         	movff	DrawAnalogClock@phy+9,display_fillTriangle@y0+1
 35770  000A54  C357  F02B         	movff	DrawAnalogClock@phx+4,display_fillTriangle@x1
 35771  000A58  C358  F02C         	movff	DrawAnalogClock@phx+5,display_fillTriangle@x1+1
 35772  000A5C  C34D  F02D         	movff	DrawAnalogClock@phy+4,display_fillTriangle@y1
 35773  000A60  C34E  F02E         	movff	DrawAnalogClock@phy+5,display_fillTriangle@y1+1
 35774  000A64  C359  F02F         	movff	DrawAnalogClock@phx+6,display_fillTriangle@x2
 35775  000A68  C35A  F030         	movff	DrawAnalogClock@phx+7,display_fillTriangle@x2+1
 35776  000A6C  C34F  F031         	movff	DrawAnalogClock@phy+6,display_fillTriangle@y2
 35777  000A70  C350  F032         	movff	DrawAnalogClock@phy+7,display_fillTriangle@y2+1
 35778  000A74  0E00               	movlw	0
 35779  000A76  6E34               	movwf	(display_fillTriangle@color+1)^0,c
 35780  000A78  0E00               	movlw	0
 35781  000A7A  6E33               	movwf	display_fillTriangle@color^0,c
 35782  000A7C  EC8C  F031         	call	_display_fillTriangle	;wreg free
 35783                           
 35784                           ;Draw.c: 420: display_drawTriangle(phx[4], phy[4], phx[2], phy[2], phx[3], phy[3], 0x000
      +                          0);
 35785  000A80  C35B  F06A         	movff	DrawAnalogClock@phx+8,display_drawTriangle@x0
 35786  000A84  C35C  F06B         	movff	DrawAnalogClock@phx+9,display_drawTriangle@x0+1
 35787  000A88  C351  F06C         	movff	DrawAnalogClock@phy+8,display_drawTriangle@y0
 35788  000A8C  C352  F06D         	movff	DrawAnalogClock@phy+9,display_drawTriangle@y0+1
 35789  000A90  C357  F06E         	movff	DrawAnalogClock@phx+4,display_drawTriangle@x1
 35790  000A94  C358  F06F         	movff	DrawAnalogClock@phx+5,display_drawTriangle@x1+1
 35791  000A98  C34D  F070         	movff	DrawAnalogClock@phy+4,display_drawTriangle@y1
 35792  000A9C  C34E  F071         	movff	DrawAnalogClock@phy+5,display_drawTriangle@y1+1
 35793  000AA0  C359  F072         	movff	DrawAnalogClock@phx+6,display_drawTriangle@x2
 35794  000AA4  C35A  F073         	movff	DrawAnalogClock@phx+7,display_drawTriangle@x2+1
 35795  000AA8  C34F  F074         	movff	DrawAnalogClock@phy+6,display_drawTriangle@y2
 35796  000AAC  C350  F075         	movff	DrawAnalogClock@phy+7,display_drawTriangle@y2+1
 35797  000AB0  0E00               	movlw	0
 35798  000AB2  0100               	movlb	0	; () banked
 35799  000AB4  6F77               	movwf	(display_drawTriangle@color+1)& (0+255),b
 35800  000AB6  0E00               	movlw	0
 35801  000AB8  6F76               	movwf	display_drawTriangle@color& (0+255),b
 35802  000ABA  EC8E  F06C         	call	_display_drawTriangle	;wreg free
 35803                           
 35804                           ;Draw.c: 423: for (jj=0; jj<5; jj++) {
 35805  000ABE  0E00               	movlw	0
 35806  000AC0  0101               	movlb	1	; () banked
 35807  000AC2  6F92               	movwf	DrawAnalogClock@jj& (0+255),b
 35808  000AC4                     l21627:
 35809                           
 35810                           ; BSR set to: 1
 35811  000AC4  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35812  000AC6  0A80               	xorlw	128
 35813  000AC8  0F7B               	addlw	-133
 35814  000ACA  B0D8               	btfsc	status,0,c
 35815  000ACC  D02A               	goto	l21637
 35816                           
 35817                           ; BSR set to: 1
 35818                           ;Draw.c: 424: phx[jj] = chx[jj];
 35819  000ACE  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35820  000AD0  0D02               	mullw	2
 35821  000AD2  0E3C               	movlw	low DrawAnalogClock@chx
 35822  000AD4  24F3               	addwf	243,w,c
 35823  000AD6  6ED9               	movwf	fsr2l,c
 35824  000AD8  0E01               	movlw	high DrawAnalogClock@chx
 35825  000ADA  20F4               	addwfc	prodh,w,c
 35826  000ADC  6EDA               	movwf	fsr2h,c
 35827  000ADE  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35828  000AE0  0D02               	mullw	2
 35829  000AE2  0E53               	movlw	low DrawAnalogClock@phx
 35830  000AE4  24F3               	addwf	243,w,c
 35831  000AE6  6EE1               	movwf	fsr1l,c
 35832  000AE8  0E03               	movlw	high DrawAnalogClock@phx
 35833  000AEA  20F4               	addwfc	prodh,w,c
 35834  000AEC  6EE2               	movwf	fsr1h,c
 35835  000AEE  CFDE FFE6          	movff	postinc2,postinc1
 35836  000AF2  CFDD FFE5          	movff	postdec2,postdec1
 35837                           
 35838                           ;Draw.c: 425: phy[jj] = chy[jj];
 35839  000AF6  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35840  000AF8  0D02               	mullw	2
 35841  000AFA  0E46               	movlw	low DrawAnalogClock@chy
 35842  000AFC  24F3               	addwf	243,w,c
 35843  000AFE  6ED9               	movwf	fsr2l,c
 35844  000B00  0E01               	movlw	high DrawAnalogClock@chy
 35845  000B02  20F4               	addwfc	prodh,w,c
 35846  000B04  6EDA               	movwf	fsr2h,c
 35847  000B06  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35848  000B08  0D02               	mullw	2
 35849  000B0A  0E49               	movlw	low DrawAnalogClock@phy
 35850  000B0C  24F3               	addwf	243,w,c
 35851  000B0E  6EE1               	movwf	fsr1l,c
 35852  000B10  0E03               	movlw	high DrawAnalogClock@phy
 35853  000B12  20F4               	addwfc	prodh,w,c
 35854  000B14  6EE2               	movwf	fsr1h,c
 35855  000B16  CFDE FFE6          	movff	postinc2,postinc1
 35856  000B1A  CFDD FFE5          	movff	postdec2,postdec1
 35857                           
 35858                           ; BSR set to: 1
 35859  000B1E  2B92               	incf	DrawAnalogClock@jj& (0+255),f,b
 35860  000B20  D7D1               	goto	l21627
 35861  000B22                     l21637:
 35862                           
 35863                           ;Draw.c: 426: };Draw.c: 428: };Draw.c: 431: display_fillTriangle(pmx[1], pmy[1], pmx[2],
      +                           pmy[2], pmx[3], pmy[3], 0x0000);
 35864  000B22  C341  F027         	movff	DrawAnalogClock@pmx+2,display_fillTriangle@x0
 35865  000B26  C342  F028         	movff	DrawAnalogClock@pmx+3,display_fillTriangle@x0+1
 35866  000B2A  C337  F029         	movff	DrawAnalogClock@pmy+2,display_fillTriangle@y0
 35867  000B2E  C338  F02A         	movff	DrawAnalogClock@pmy+3,display_fillTriangle@y0+1
 35868  000B32  C343  F02B         	movff	DrawAnalogClock@pmx+4,display_fillTriangle@x1
 35869  000B36  C344  F02C         	movff	DrawAnalogClock@pmx+5,display_fillTriangle@x1+1
 35870  000B3A  C339  F02D         	movff	DrawAnalogClock@pmy+4,display_fillTriangle@y1
 35871  000B3E  C33A  F02E         	movff	DrawAnalogClock@pmy+5,display_fillTriangle@y1+1
 35872  000B42  C345  F02F         	movff	DrawAnalogClock@pmx+6,display_fillTriangle@x2
 35873  000B46  C346  F030         	movff	DrawAnalogClock@pmx+7,display_fillTriangle@x2+1
 35874  000B4A  C33B  F031         	movff	DrawAnalogClock@pmy+6,display_fillTriangle@y2
 35875  000B4E  C33C  F032         	movff	DrawAnalogClock@pmy+7,display_fillTriangle@y2+1
 35876  000B52  0E00               	movlw	0
 35877  000B54  6E34               	movwf	(display_fillTriangle@color+1)^0,c
 35878  000B56  0E00               	movlw	0
 35879  000B58  6E33               	movwf	display_fillTriangle@color^0,c
 35880  000B5A  EC8C  F031         	call	_display_fillTriangle	;wreg free
 35881                           
 35882                           ;Draw.c: 432: display_drawTriangle(pmx[1], pmy[1], pmx[2], pmy[2], pmx[3], pmy[3], 0x000
      +                          0);
 35883  000B5E  C341  F06A         	movff	DrawAnalogClock@pmx+2,display_drawTriangle@x0
 35884  000B62  C342  F06B         	movff	DrawAnalogClock@pmx+3,display_drawTriangle@x0+1
 35885  000B66  C337  F06C         	movff	DrawAnalogClock@pmy+2,display_drawTriangle@y0
 35886  000B6A  C338  F06D         	movff	DrawAnalogClock@pmy+3,display_drawTriangle@y0+1
 35887  000B6E  C343  F06E         	movff	DrawAnalogClock@pmx+4,display_drawTriangle@x1
 35888  000B72  C344  F06F         	movff	DrawAnalogClock@pmx+5,display_drawTriangle@x1+1
 35889  000B76  C339  F070         	movff	DrawAnalogClock@pmy+4,display_drawTriangle@y1
 35890  000B7A  C33A  F071         	movff	DrawAnalogClock@pmy+5,display_drawTriangle@y1+1
 35891  000B7E  C345  F072         	movff	DrawAnalogClock@pmx+6,display_drawTriangle@x2
 35892  000B82  C346  F073         	movff	DrawAnalogClock@pmx+7,display_drawTriangle@x2+1
 35893  000B86  C33B  F074         	movff	DrawAnalogClock@pmy+6,display_drawTriangle@y2
 35894  000B8A  C33C  F075         	movff	DrawAnalogClock@pmy+7,display_drawTriangle@y2+1
 35895  000B8E  0E00               	movlw	0
 35896  000B90  0100               	movlb	0	; () banked
 35897  000B92  6F77               	movwf	(display_drawTriangle@color+1)& (0+255),b
 35898  000B94  0E00               	movlw	0
 35899  000B96  6F76               	movwf	display_drawTriangle@color& (0+255),b
 35900  000B98  EC8E  F06C         	call	_display_drawTriangle	;wreg free
 35901                           
 35902                           ;Draw.c: 433: display_fillTriangle(pmx[4], pmy[4], pmx[2], pmy[2], pmx[3], pmy[3], 0x000
      +                          0);
 35903  000B9C  C347  F027         	movff	DrawAnalogClock@pmx+8,display_fillTriangle@x0
 35904  000BA0  C348  F028         	movff	DrawAnalogClock@pmx+9,display_fillTriangle@x0+1
 35905  000BA4  C33D  F029         	movff	DrawAnalogClock@pmy+8,display_fillTriangle@y0
 35906  000BA8  C33E  F02A         	movff	DrawAnalogClock@pmy+9,display_fillTriangle@y0+1
 35907  000BAC  C343  F02B         	movff	DrawAnalogClock@pmx+4,display_fillTriangle@x1
 35908  000BB0  C344  F02C         	movff	DrawAnalogClock@pmx+5,display_fillTriangle@x1+1
 35909  000BB4  C339  F02D         	movff	DrawAnalogClock@pmy+4,display_fillTriangle@y1
 35910  000BB8  C33A  F02E         	movff	DrawAnalogClock@pmy+5,display_fillTriangle@y1+1
 35911  000BBC  C345  F02F         	movff	DrawAnalogClock@pmx+6,display_fillTriangle@x2
 35912  000BC0  C346  F030         	movff	DrawAnalogClock@pmx+7,display_fillTriangle@x2+1
 35913  000BC4  C33B  F031         	movff	DrawAnalogClock@pmy+6,display_fillTriangle@y2
 35914  000BC8  C33C  F032         	movff	DrawAnalogClock@pmy+7,display_fillTriangle@y2+1
 35915  000BCC  0E00               	movlw	0
 35916  000BCE  6E34               	movwf	(display_fillTriangle@color+1)^0,c
 35917  000BD0  0E00               	movlw	0
 35918  000BD2  6E33               	movwf	display_fillTriangle@color^0,c
 35919  000BD4  EC8C  F031         	call	_display_fillTriangle	;wreg free
 35920                           
 35921                           ;Draw.c: 434: display_drawTriangle(pmx[4], pmy[4], pmx[2], pmy[2], pmx[3], pmy[3], 0x000
      +                          0);
 35922  000BD8  C347  F06A         	movff	DrawAnalogClock@pmx+8,display_drawTriangle@x0
 35923  000BDC  C348  F06B         	movff	DrawAnalogClock@pmx+9,display_drawTriangle@x0+1
 35924  000BE0  C33D  F06C         	movff	DrawAnalogClock@pmy+8,display_drawTriangle@y0
 35925  000BE4  C33E  F06D         	movff	DrawAnalogClock@pmy+9,display_drawTriangle@y0+1
 35926  000BE8  C343  F06E         	movff	DrawAnalogClock@pmx+4,display_drawTriangle@x1
 35927  000BEC  C344  F06F         	movff	DrawAnalogClock@pmx+5,display_drawTriangle@x1+1
 35928  000BF0  C339  F070         	movff	DrawAnalogClock@pmy+4,display_drawTriangle@y1
 35929  000BF4  C33A  F071         	movff	DrawAnalogClock@pmy+5,display_drawTriangle@y1+1
 35930  000BF8  C345  F072         	movff	DrawAnalogClock@pmx+6,display_drawTriangle@x2
 35931  000BFC  C346  F073         	movff	DrawAnalogClock@pmx+7,display_drawTriangle@x2+1
 35932  000C00  C33B  F074         	movff	DrawAnalogClock@pmy+6,display_drawTriangle@y2
 35933  000C04  C33C  F075         	movff	DrawAnalogClock@pmy+7,display_drawTriangle@y2+1
 35934  000C08  0E00               	movlw	0
 35935  000C0A  0100               	movlb	0	; () banked
 35936  000C0C  6F77               	movwf	(display_drawTriangle@color+1)& (0+255),b
 35937  000C0E  0E00               	movlw	0
 35938  000C10  6F76               	movwf	display_drawTriangle@color& (0+255),b
 35939  000C12  EC8E  F06C         	call	_display_drawTriangle	;wreg free
 35940                           
 35941                           ;Draw.c: 435: minupdate = 1;
 35942  000C16  0E01               	movlw	1
 35943  000C18  0101               	movlb	1	; () banked
 35944  000C1A  6F50               	movwf	DrawAnalogClock@minupdate& (0+255),b
 35945                           
 35946                           ; BSR set to: 1
 35947                           ;Draw.c: 437: for (jj=0; jj<5; jj++) {
 35948  000C1C  0E00               	movlw	0
 35949  000C1E  6F92               	movwf	DrawAnalogClock@jj& (0+255),b
 35950  000C20                     l21643:
 35951                           
 35952                           ; BSR set to: 1
 35953  000C20  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35954  000C22  0A80               	xorlw	128
 35955  000C24  0F7B               	addlw	-133
 35956  000C26  B0D8               	btfsc	status,0,c
 35957  000C28  D02A               	goto	l2937
 35958                           
 35959                           ; BSR set to: 1
 35960                           ;Draw.c: 438: pmx[jj] = cmx[jj];
 35961  000C2A  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35962  000C2C  0D02               	mullw	2
 35963  000C2E  0E28               	movlw	low DrawAnalogClock@cmx
 35964  000C30  24F3               	addwf	243,w,c
 35965  000C32  6ED9               	movwf	fsr2l,c
 35966  000C34  0E01               	movlw	high DrawAnalogClock@cmx
 35967  000C36  20F4               	addwfc	prodh,w,c
 35968  000C38  6EDA               	movwf	fsr2h,c
 35969  000C3A  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35970  000C3C  0D02               	mullw	2
 35971  000C3E  0E3F               	movlw	low DrawAnalogClock@pmx
 35972  000C40  24F3               	addwf	243,w,c
 35973  000C42  6EE1               	movwf	fsr1l,c
 35974  000C44  0E03               	movlw	high DrawAnalogClock@pmx
 35975  000C46  20F4               	addwfc	prodh,w,c
 35976  000C48  6EE2               	movwf	fsr1h,c
 35977  000C4A  CFDE FFE6          	movff	postinc2,postinc1
 35978  000C4E  CFDD FFE5          	movff	postdec2,postdec1
 35979                           
 35980                           ;Draw.c: 439: pmy[jj] = cmy[jj];
 35981  000C52  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35982  000C54  0D02               	mullw	2
 35983  000C56  0E32               	movlw	low DrawAnalogClock@cmy
 35984  000C58  24F3               	addwf	243,w,c
 35985  000C5A  6ED9               	movwf	fsr2l,c
 35986  000C5C  0E01               	movlw	high DrawAnalogClock@cmy
 35987  000C5E  20F4               	addwfc	prodh,w,c
 35988  000C60  6EDA               	movwf	fsr2h,c
 35989  000C62  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 35990  000C64  0D02               	mullw	2
 35991  000C66  0E35               	movlw	low DrawAnalogClock@pmy
 35992  000C68  24F3               	addwf	243,w,c
 35993  000C6A  6EE1               	movwf	fsr1l,c
 35994  000C6C  0E03               	movlw	high DrawAnalogClock@pmy
 35995  000C6E  20F4               	addwfc	prodh,w,c
 35996  000C70  6EE2               	movwf	fsr1h,c
 35997  000C72  CFDE FFE6          	movff	postinc2,postinc1
 35998  000C76  CFDD FFE5          	movff	postdec2,postdec1
 35999                           
 36000                           ; BSR set to: 1
 36001  000C7A  2B92               	incf	DrawAnalogClock@jj& (0+255),f,b
 36002  000C7C  D7D1               	goto	l21643
 36003  000C7E                     l2937:
 36004                           
 36005                           ;Draw.c: 440: };Draw.c: 441: };Draw.c: 444: ss = -1;
 36006  000C7E  0101               	movlb	1	; () banked
 36007  000C80  697B               	setf	DrawAnalogClock@ss& (0+255),b
 36008                           
 36009                           ; BSR set to: 1
 36010                           ;Draw.c: 445: if (preDateTime[0] != datetime[0]) {
 36011  000C82  C088  FFD9         	movff	DrawAnalogClock@datetime,fsr2l
 36012  000C86  C089  FFDA         	movff	DrawAnalogClock@datetime+1,fsr2h
 36013  000C8A  0103               	movlb	3	; () banked
 36014  000C8C  516D               	movf	_preDateTime& (0+255),w,b
 36015  000C8E  18DE               	xorwf	postinc2,w,c
 36016  000C90  B4D8               	btfsc	status,2,c
 36017  000C92  D1AF               	goto	l21705
 36018                           
 36019                           ; BSR set to: 3
 36020                           ;Draw.c: 446: ss = ((datetime[0]>>4)*10 + (datetime[0] & 0x0f));
 36021  000C94  C088  FFD9         	movff	DrawAnalogClock@datetime,fsr2l
 36022  000C98  C089  FFDA         	movff	DrawAnalogClock@datetime+1,fsr2h
 36023  000C9C  50DF               	movf	indf2,w,c
 36024  000C9E  0100               	movlb	0	; () banked
 36025  000CA0  6F91               	movwf	??_DrawAnalogClock& (0+255),b
 36026  000CA2  0E0F               	movlw	15
 36027  000CA4  1791               	andwf	??_DrawAnalogClock& (0+255),f,b
 36028  000CA6  C088  FFD9         	movff	DrawAnalogClock@datetime,fsr2l
 36029  000CAA  C089  FFDA         	movff	DrawAnalogClock@datetime+1,fsr2h
 36030  000CAE  50DF               	movf	indf2,w,c
 36031  000CB0  6F92               	movwf	(??_DrawAnalogClock+1)& (0+255),b
 36032  000CB2  3992               	swapf	(??_DrawAnalogClock+1)& (0+255),w,b
 36033  000CB4  0B0F               	andlw	15
 36034  000CB6  0D0A               	mullw	10
 36035  000CB8  50F3               	movf	243,w,c
 36036  000CBA  2591               	addwf	??_DrawAnalogClock& (0+255),w,b
 36037  000CBC  0101               	movlb	1	; () banked
 36038  000CBE  6F7B               	movwf	DrawAnalogClock@ss& (0+255),b
 36039                           
 36040                           ; BSR set to: 1
 36041                           ;Draw.c: 447: rcs = rc1 - 4;
 36042  000CC0  0EFC               	movlw	252
 36043  000CC2  258A               	addwf	DrawAnalogClock@rc1& (0+255),w,b
 36044  000CC4  6F65               	movwf	DrawAnalogClock@rcs& (0+255),b
 36045  000CC6  0EFF               	movlw	255
 36046  000CC8  218B               	addwfc	(DrawAnalogClock@rc1+1)& (0+255),w,b
 36047  000CCA  6F66               	movwf	(DrawAnalogClock@rcs+1)& (0+255),b
 36048                           
 36049                           ; BSR set to: 1
 36050                           ;Draw.c: 448: angle = ss*6;
 36051  000CCC  517B               	movf	DrawAnalogClock@ss& (0+255),w,b
 36052  000CCE  6E1D               	movwf	___wmul@multiplier^0,c
 36053  000CD0  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 36054  000CD2  BE1D               	btfsc	___wmul@multiplier^0,7,c
 36055  000CD4  061E               	decf	(___wmul@multiplier+1)^0,f,c
 36056  000CD6  0E00               	movlw	0
 36057  000CD8  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 36058  000CDA  0E06               	movlw	6
 36059  000CDC  6E1F               	movwf	___wmul@multiplicand^0,c
 36060  000CDE  EC12  F079         	call	___wmul	;wreg free
 36061  000CE2  C01D  F190         	movff	?___wmul,DrawAnalogClock@angle
 36062  000CE6  C01E  F191         	movff	?___wmul+1,DrawAnalogClock@angle+1
 36063                           
 36064                           ;Draw.c: 449: csx[0] = xc;
 36065  000CEA  C18C  F114         	movff	DrawAnalogClock@xc,DrawAnalogClock@csx
 36066  000CEE  C18D  F115         	movff	DrawAnalogClock@xc+1,DrawAnalogClock@csx+1
 36067                           
 36068                           ;Draw.c: 450: csy[0] = yc;
 36069  000CF2  C18E  F11E         	movff	DrawAnalogClock@yc,DrawAnalogClock@csy
 36070  000CF6  C18F  F11F         	movff	DrawAnalogClock@yc+1,DrawAnalogClock@csy+1
 36071                           
 36072                           ;Draw.c: 451: csx[1] = xc + rcs * sind(angle)/256;
 36073  000CFA  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 36074  000CFE  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 36075  000D02  ECBE  F069         	call	_sind	;wreg free
 36076  000D06  C013  F01D         	movff	?_sind,___wmul@multiplier
 36077  000D0A  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 36078  000D0E  C165  F01F         	movff	DrawAnalogClock@rcs,___wmul@multiplicand
 36079  000D12  C166  F020         	movff	DrawAnalogClock@rcs+1,___wmul@multiplicand+1
 36080  000D16  EC12  F079         	call	___wmul	;wreg free
 36081  000D1A  C01E  F01D         	movff	?___wmul+1,?___wmul
 36082  000D1E  6A1E               	clrf	(?___wmul+1)^0,c
 36083  000D20  BE1D               	btfsc	?___wmul^0,7,c
 36084  000D22  681E               	setf	(?___wmul+1)^0,c
 36085  000D24  0101               	movlb	1	; () banked
 36086  000D26  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 36087  000D28  241D               	addwf	?___wmul^0,w,c
 36088  000D2A  6F16               	movwf	(DrawAnalogClock@csx+2)& (0+255),b
 36089  000D2C  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 36090  000D2E  201E               	addwfc	(?___wmul+1)^0,w,c
 36091  000D30  6F17               	movwf	(DrawAnalogClock@csx+3)& (0+255),b
 36092                           
 36093                           ; BSR set to: 1
 36094                           ;Draw.c: 452: csy[1] = yc - rcs * cosd(angle)/256;
 36095  000D32  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 36096  000D36  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 36097  000D3A  EC47  F079         	call	_cosd	;wreg free
 36098  000D3E  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 36099  000D42  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 36100  000D46  C165  F01F         	movff	DrawAnalogClock@rcs,___wmul@multiplicand
 36101  000D4A  C166  F020         	movff	DrawAnalogClock@rcs+1,___wmul@multiplicand+1
 36102  000D4E  EC12  F079         	call	___wmul	;wreg free
 36103  000D52  C01E  F01D         	movff	?___wmul+1,?___wmul
 36104  000D56  6A1E               	clrf	(?___wmul+1)^0,c
 36105  000D58  BE1D               	btfsc	?___wmul^0,7,c
 36106  000D5A  681E               	setf	(?___wmul+1)^0,c
 36107  000D5C  501D               	movf	?___wmul^0,w,c
 36108  000D5E  0101               	movlb	1	; () banked
 36109  000D60  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 36110  000D62  6F20               	movwf	(DrawAnalogClock@csy+2)& (0+255),b
 36111  000D64  501E               	movf	(?___wmul+1)^0,w,c
 36112  000D66  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 36113  000D68  6F21               	movwf	(DrawAnalogClock@csy+3)& (0+255),b
 36114                           
 36115                           ; BSR set to: 1
 36116                           ;Draw.c: 454: rcs2 = 20;
 36117  000D6A  0E00               	movlw	0
 36118  000D6C  6F86               	movwf	(DrawAnalogClock@rcs2+1)& (0+255),b
 36119  000D6E  0E14               	movlw	20
 36120  000D70  6F85               	movwf	DrawAnalogClock@rcs2& (0+255),b
 36121                           
 36122                           ; BSR set to: 1
 36123                           ;Draw.c: 455: angle = ss*6+180;
 36124  000D72  517B               	movf	DrawAnalogClock@ss& (0+255),w,b
 36125  000D74  6E1D               	movwf	___wmul@multiplier^0,c
 36126  000D76  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 36127  000D78  BE1D               	btfsc	___wmul@multiplier^0,7,c
 36128  000D7A  061E               	decf	(___wmul@multiplier+1)^0,f,c
 36129  000D7C  0E00               	movlw	0
 36130  000D7E  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 36131  000D80  0E06               	movlw	6
 36132  000D82  6E1F               	movwf	___wmul@multiplicand^0,c
 36133  000D84  EC12  F079         	call	___wmul	;wreg free
 36134  000D88  0EB4               	movlw	180
 36135  000D8A  241D               	addwf	?___wmul^0,w,c
 36136  000D8C  0101               	movlb	1	; () banked
 36137  000D8E  6F90               	movwf	DrawAnalogClock@angle& (0+255),b
 36138  000D90  0E00               	movlw	0
 36139  000D92  201E               	addwfc	(?___wmul+1)^0,w,c
 36140  000D94  6F91               	movwf	(DrawAnalogClock@angle+1)& (0+255),b
 36141                           
 36142                           ; BSR set to: 1
 36143                           ;Draw.c: 456: csx[2] = xc + rcs2 * sind(angle)/256;
 36144  000D96  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 36145  000D9A  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 36146  000D9E  ECBE  F069         	call	_sind	;wreg free
 36147  000DA2  C013  F01D         	movff	?_sind,___wmul@multiplier
 36148  000DA6  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 36149  000DAA  C185  F01F         	movff	DrawAnalogClock@rcs2,___wmul@multiplicand
 36150  000DAE  C186  F020         	movff	DrawAnalogClock@rcs2+1,___wmul@multiplicand+1
 36151  000DB2  EC12  F079         	call	___wmul	;wreg free
 36152  000DB6  C01E  F01D         	movff	?___wmul+1,?___wmul
 36153  000DBA  6A1E               	clrf	(?___wmul+1)^0,c
 36154  000DBC  BE1D               	btfsc	?___wmul^0,7,c
 36155  000DBE  681E               	setf	(?___wmul+1)^0,c
 36156  000DC0  0101               	movlb	1	; () banked
 36157  000DC2  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 36158  000DC4  241D               	addwf	?___wmul^0,w,c
 36159  000DC6  6F18               	movwf	(DrawAnalogClock@csx+4)& (0+255),b
 36160  000DC8  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 36161  000DCA  201E               	addwfc	(?___wmul+1)^0,w,c
 36162  000DCC  6F19               	movwf	(DrawAnalogClock@csx+5)& (0+255),b
 36163                           
 36164                           ; BSR set to: 1
 36165                           ;Draw.c: 457: csy[2] = yc - rcs2 * cosd(angle)/256;
 36166  000DCE  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 36167  000DD2  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 36168  000DD6  EC47  F079         	call	_cosd	;wreg free
 36169  000DDA  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 36170  000DDE  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 36171  000DE2  C185  F01F         	movff	DrawAnalogClock@rcs2,___wmul@multiplicand
 36172  000DE6  C186  F020         	movff	DrawAnalogClock@rcs2+1,___wmul@multiplicand+1
 36173  000DEA  EC12  F079         	call	___wmul	;wreg free
 36174  000DEE  C01E  F01D         	movff	?___wmul+1,?___wmul
 36175  000DF2  6A1E               	clrf	(?___wmul+1)^0,c
 36176  000DF4  BE1D               	btfsc	?___wmul^0,7,c
 36177  000DF6  681E               	setf	(?___wmul+1)^0,c
 36178  000DF8  501D               	movf	?___wmul^0,w,c
 36179  000DFA  0101               	movlb	1	; () banked
 36180  000DFC  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 36181  000DFE  6F22               	movwf	(DrawAnalogClock@csy+4)& (0+255),b
 36182  000E00  501E               	movf	(?___wmul+1)^0,w,c
 36183  000E02  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 36184  000E04  6F23               	movwf	(DrawAnalogClock@csy+5)& (0+255),b
 36185                           
 36186                           ; BSR set to: 1
 36187                           ;Draw.c: 458: csx[3] = xc + rcs2 * sind(angle+6)/256;
 36188  000E06  0E06               	movlw	6
 36189  000E08  2590               	addwf	DrawAnalogClock@angle& (0+255),w,b
 36190  000E0A  6E13               	movwf	sind@theta^0,c
 36191  000E0C  0E00               	movlw	0
 36192  000E0E  2191               	addwfc	(DrawAnalogClock@angle+1)& (0+255),w,b
 36193  000E10  6E14               	movwf	(sind@theta+1)^0,c
 36194  000E12  ECBE  F069         	call	_sind	;wreg free
 36195  000E16  C013  F01D         	movff	?_sind,___wmul@multiplier
 36196  000E1A  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 36197  000E1E  C185  F01F         	movff	DrawAnalogClock@rcs2,___wmul@multiplicand
 36198  000E22  C186  F020         	movff	DrawAnalogClock@rcs2+1,___wmul@multiplicand+1
 36199  000E26  EC12  F079         	call	___wmul	;wreg free
 36200  000E2A  C01E  F01D         	movff	?___wmul+1,?___wmul
 36201  000E2E  6A1E               	clrf	(?___wmul+1)^0,c
 36202  000E30  BE1D               	btfsc	?___wmul^0,7,c
 36203  000E32  681E               	setf	(?___wmul+1)^0,c
 36204  000E34  0101               	movlb	1	; () banked
 36205  000E36  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 36206  000E38  241D               	addwf	?___wmul^0,w,c
 36207  000E3A  6F1A               	movwf	(DrawAnalogClock@csx+6)& (0+255),b
 36208  000E3C  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 36209  000E3E  201E               	addwfc	(?___wmul+1)^0,w,c
 36210  000E40  6F1B               	movwf	(DrawAnalogClock@csx+7)& (0+255),b
 36211                           
 36212                           ; BSR set to: 1
 36213                           ;Draw.c: 459: csy[3] = yc - rcs2 * cosd(angle+6)/256;
 36214  000E42  0E06               	movlw	6
 36215  000E44  2590               	addwf	DrawAnalogClock@angle& (0+255),w,b
 36216  000E46  6E1B               	movwf	cosd@theta^0,c
 36217  000E48  0E00               	movlw	0
 36218  000E4A  2191               	addwfc	(DrawAnalogClock@angle+1)& (0+255),w,b
 36219  000E4C  6E1C               	movwf	(cosd@theta+1)^0,c
 36220  000E4E  EC47  F079         	call	_cosd	;wreg free
 36221  000E52  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 36222  000E56  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 36223  000E5A  C185  F01F         	movff	DrawAnalogClock@rcs2,___wmul@multiplicand
 36224  000E5E  C186  F020         	movff	DrawAnalogClock@rcs2+1,___wmul@multiplicand+1
 36225  000E62  EC12  F079         	call	___wmul	;wreg free
 36226  000E66  C01E  F01D         	movff	?___wmul+1,?___wmul
 36227  000E6A  6A1E               	clrf	(?___wmul+1)^0,c
 36228  000E6C  BE1D               	btfsc	?___wmul^0,7,c
 36229  000E6E  681E               	setf	(?___wmul+1)^0,c
 36230  000E70  501D               	movf	?___wmul^0,w,c
 36231  000E72  0101               	movlb	1	; () banked
 36232  000E74  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 36233  000E76  6F24               	movwf	(DrawAnalogClock@csy+6)& (0+255),b
 36234  000E78  501E               	movf	(?___wmul+1)^0,w,c
 36235  000E7A  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 36236  000E7C  6F25               	movwf	(DrawAnalogClock@csy+7)& (0+255),b
 36237                           
 36238                           ; BSR set to: 1
 36239                           ;Draw.c: 460: csx[4] = xc + rcs2 * sind(angle-6)/256;
 36240  000E7E  0EFA               	movlw	250
 36241  000E80  2590               	addwf	DrawAnalogClock@angle& (0+255),w,b
 36242  000E82  6E13               	movwf	sind@theta^0,c
 36243  000E84  0EFF               	movlw	255
 36244  000E86  2191               	addwfc	(DrawAnalogClock@angle+1)& (0+255),w,b
 36245  000E88  6E14               	movwf	(sind@theta+1)^0,c
 36246  000E8A  ECBE  F069         	call	_sind	;wreg free
 36247  000E8E  C013  F01D         	movff	?_sind,___wmul@multiplier
 36248  000E92  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 36249  000E96  C185  F01F         	movff	DrawAnalogClock@rcs2,___wmul@multiplicand
 36250  000E9A  C186  F020         	movff	DrawAnalogClock@rcs2+1,___wmul@multiplicand+1
 36251  000E9E  EC12  F079         	call	___wmul	;wreg free
 36252  000EA2  C01E  F01D         	movff	?___wmul+1,?___wmul
 36253  000EA6  6A1E               	clrf	(?___wmul+1)^0,c
 36254  000EA8  BE1D               	btfsc	?___wmul^0,7,c
 36255  000EAA  681E               	setf	(?___wmul+1)^0,c
 36256  000EAC  0101               	movlb	1	; () banked
 36257  000EAE  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 36258  000EB0  241D               	addwf	?___wmul^0,w,c
 36259  000EB2  6F1C               	movwf	(DrawAnalogClock@csx+8)& (0+255),b
 36260  000EB4  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 36261  000EB6  201E               	addwfc	(?___wmul+1)^0,w,c
 36262  000EB8  6F1D               	movwf	(DrawAnalogClock@csx+9)& (0+255),b
 36263                           
 36264                           ; BSR set to: 1
 36265                           ;Draw.c: 461: csy[4] = yc - rcs2 * cosd(angle-6)/256;
 36266  000EBA  0EFA               	movlw	250
 36267  000EBC  2590               	addwf	DrawAnalogClock@angle& (0+255),w,b
 36268  000EBE  6E1B               	movwf	cosd@theta^0,c
 36269  000EC0  0EFF               	movlw	255
 36270  000EC2  2191               	addwfc	(DrawAnalogClock@angle+1)& (0+255),w,b
 36271  000EC4  6E1C               	movwf	(cosd@theta+1)^0,c
 36272  000EC6  EC47  F079         	call	_cosd	;wreg free
 36273  000ECA  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 36274  000ECE  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 36275  000ED2  C185  F01F         	movff	DrawAnalogClock@rcs2,___wmul@multiplicand
 36276  000ED6  C186  F020         	movff	DrawAnalogClock@rcs2+1,___wmul@multiplicand+1
 36277  000EDA  EC12  F079         	call	___wmul	;wreg free
 36278  000EDE  C01E  F01D         	movff	?___wmul+1,?___wmul
 36279  000EE2  6A1E               	clrf	(?___wmul+1)^0,c
 36280  000EE4  BE1D               	btfsc	?___wmul^0,7,c
 36281  000EE6  681E               	setf	(?___wmul+1)^0,c
 36282  000EE8  501D               	movf	?___wmul^0,w,c
 36283  000EEA  0101               	movlb	1	; () banked
 36284  000EEC  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 36285  000EEE  6F26               	movwf	(DrawAnalogClock@csy+8)& (0+255),b
 36286  000EF0  501E               	movf	(?___wmul+1)^0,w,c
 36287  000EF2  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 36288  000EF4  6F27               	movwf	(DrawAnalogClock@csy+9)& (0+255),b
 36289                           
 36290                           ; BSR set to: 1
 36291                           ;Draw.c: 463: preDateTime[0] = datetime[0];
 36292  000EF6  C088  FFD9         	movff	DrawAnalogClock@datetime,fsr2l
 36293  000EFA  C089  FFDA         	movff	DrawAnalogClock@datetime+1,fsr2h
 36294  000EFE  50DF               	movf	indf2,w,c
 36295  000F00  0103               	movlb	3	; () banked
 36296  000F02  6F6D               	movwf	_preDateTime& (0+255),b
 36297                           
 36298                           ; BSR set to: 3
 36299                           ;Draw.c: 465: display_drawLine(psx[1], psy[1], psx[2], psy[2], 0x0000);
 36300  000F04  C32D  F060         	movff	DrawAnalogClock@psx+2,display_drawLine@x0
 36301  000F08  C32E  F061         	movff	DrawAnalogClock@psx+3,display_drawLine@x0+1
 36302  000F0C  C323  F062         	movff	DrawAnalogClock@psy+2,display_drawLine@y0
 36303  000F10  C324  F063         	movff	DrawAnalogClock@psy+3,display_drawLine@y0+1
 36304  000F14  C32F  F064         	movff	DrawAnalogClock@psx+4,display_drawLine@x1
 36305  000F18  C330  F065         	movff	DrawAnalogClock@psx+5,display_drawLine@x1+1
 36306  000F1C  C325  F066         	movff	DrawAnalogClock@psy+4,display_drawLine@y1
 36307  000F20  C326  F067         	movff	DrawAnalogClock@psy+5,display_drawLine@y1+1
 36308  000F24  0E00               	movlw	0
 36309  000F26  0100               	movlb	0	; () banked
 36310  000F28  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 36311  000F2A  0E00               	movlw	0
 36312  000F2C  6F68               	movwf	display_drawLine@color& (0+255),b
 36313  000F2E  ECA7  F05C         	call	_display_drawLine	;wreg free
 36314                           
 36315                           ;Draw.c: 467: display_drawLine(psx[0], psy[0], psx[3], psy[3], 0x0000);
 36316  000F32  C32B  F060         	movff	DrawAnalogClock@psx,display_drawLine@x0
 36317  000F36  C32C  F061         	movff	DrawAnalogClock@psx+1,display_drawLine@x0+1
 36318  000F3A  C321  F062         	movff	DrawAnalogClock@psy,display_drawLine@y0
 36319  000F3E  C322  F063         	movff	DrawAnalogClock@psy+1,display_drawLine@y0+1
 36320  000F42  C331  F064         	movff	DrawAnalogClock@psx+6,display_drawLine@x1
 36321  000F46  C332  F065         	movff	DrawAnalogClock@psx+7,display_drawLine@x1+1
 36322  000F4A  C327  F066         	movff	DrawAnalogClock@psy+6,display_drawLine@y1
 36323  000F4E  C328  F067         	movff	DrawAnalogClock@psy+7,display_drawLine@y1+1
 36324  000F52  0E00               	movlw	0
 36325  000F54  0100               	movlb	0	; () banked
 36326  000F56  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 36327  000F58  0E00               	movlw	0
 36328  000F5A  6F68               	movwf	display_drawLine@color& (0+255),b
 36329  000F5C  ECA7  F05C         	call	_display_drawLine	;wreg free
 36330                           
 36331                           ;Draw.c: 468: display_drawLine(psx[0], psy[0], psx[4], psy[4], 0x0000);
 36332  000F60  C32B  F060         	movff	DrawAnalogClock@psx,display_drawLine@x0
 36333  000F64  C32C  F061         	movff	DrawAnalogClock@psx+1,display_drawLine@x0+1
 36334  000F68  C321  F062         	movff	DrawAnalogClock@psy,display_drawLine@y0
 36335  000F6C  C322  F063         	movff	DrawAnalogClock@psy+1,display_drawLine@y0+1
 36336  000F70  C333  F064         	movff	DrawAnalogClock@psx+8,display_drawLine@x1
 36337  000F74  C334  F065         	movff	DrawAnalogClock@psx+9,display_drawLine@x1+1
 36338  000F78  C329  F066         	movff	DrawAnalogClock@psy+8,display_drawLine@y1
 36339  000F7C  C32A  F067         	movff	DrawAnalogClock@psy+9,display_drawLine@y1+1
 36340  000F80  0E00               	movlw	0
 36341  000F82  0100               	movlb	0	; () banked
 36342  000F84  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 36343  000F86  0E00               	movlw	0
 36344  000F88  6F68               	movwf	display_drawLine@color& (0+255),b
 36345  000F8A  ECA7  F05C         	call	_display_drawLine	;wreg free
 36346                           
 36347                           ;Draw.c: 471: for (jj=0; jj<5; jj++) {
 36348  000F8E  0E00               	movlw	0
 36349  000F90  0101               	movlb	1	; () banked
 36350  000F92  6F92               	movwf	DrawAnalogClock@jj& (0+255),b
 36351  000F94                     l21695:
 36352                           
 36353                           ; BSR set to: 1
 36354  000F94  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36355  000F96  0A80               	xorlw	128
 36356  000F98  0F7B               	addlw	-133
 36357  000F9A  B0D8               	btfsc	status,0,c
 36358  000F9C  D02A               	goto	l21705
 36359                           
 36360                           ; BSR set to: 1
 36361                           ;Draw.c: 472: psx[jj] = csx[jj];
 36362  000F9E  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36363  000FA0  0D02               	mullw	2
 36364  000FA2  0E14               	movlw	low DrawAnalogClock@csx
 36365  000FA4  24F3               	addwf	243,w,c
 36366  000FA6  6ED9               	movwf	fsr2l,c
 36367  000FA8  0E01               	movlw	high DrawAnalogClock@csx
 36368  000FAA  20F4               	addwfc	prodh,w,c
 36369  000FAC  6EDA               	movwf	fsr2h,c
 36370  000FAE  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36371  000FB0  0D02               	mullw	2
 36372  000FB2  0E2B               	movlw	low DrawAnalogClock@psx
 36373  000FB4  24F3               	addwf	243,w,c
 36374  000FB6  6EE1               	movwf	fsr1l,c
 36375  000FB8  0E03               	movlw	high DrawAnalogClock@psx
 36376  000FBA  20F4               	addwfc	prodh,w,c
 36377  000FBC  6EE2               	movwf	fsr1h,c
 36378  000FBE  CFDE FFE6          	movff	postinc2,postinc1
 36379  000FC2  CFDD FFE5          	movff	postdec2,postdec1
 36380                           
 36381                           ;Draw.c: 473: psy[jj] = csy[jj];
 36382  000FC6  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36383  000FC8  0D02               	mullw	2
 36384  000FCA  0E1E               	movlw	low DrawAnalogClock@csy
 36385  000FCC  24F3               	addwf	243,w,c
 36386  000FCE  6ED9               	movwf	fsr2l,c
 36387  000FD0  0E01               	movlw	high DrawAnalogClock@csy
 36388  000FD2  20F4               	addwfc	prodh,w,c
 36389  000FD4  6EDA               	movwf	fsr2h,c
 36390  000FD6  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36391  000FD8  0D02               	mullw	2
 36392  000FDA  0E21               	movlw	low DrawAnalogClock@psy
 36393  000FDC  24F3               	addwf	243,w,c
 36394  000FDE  6EE1               	movwf	fsr1l,c
 36395  000FE0  0E03               	movlw	high DrawAnalogClock@psy
 36396  000FE2  20F4               	addwfc	prodh,w,c
 36397  000FE4  6EE2               	movwf	fsr1h,c
 36398  000FE6  CFDE FFE6          	movff	postinc2,postinc1
 36399  000FEA  CFDD FFE5          	movff	postdec2,postdec1
 36400                           
 36401                           ; BSR set to: 1
 36402  000FEE  2B92               	incf	DrawAnalogClock@jj& (0+255),f,b
 36403  000FF0  D7D1               	goto	l21695
 36404  000FF2                     l21705:
 36405                           
 36406                           ;Draw.c: 474: };Draw.c: 475: };Draw.c: 478: rc1 = rc -3;
 36407  000FF2  0EFD               	movlw	253
 36408  000FF4  0101               	movlb	1	; () banked
 36409  000FF6  2588               	addwf	DrawAnalogClock@rc& (0+255),w,b
 36410  000FF8  6F8A               	movwf	DrawAnalogClock@rc1& (0+255),b
 36411  000FFA  0EFF               	movlw	255
 36412  000FFC  2189               	addwfc	(DrawAnalogClock@rc+1)& (0+255),w,b
 36413  000FFE  6F8B               	movwf	(DrawAnalogClock@rc1+1)& (0+255),b
 36414                           
 36415                           ;Draw.c: 479: rc2 = rc1 -10;
 36416  001000  0EF6               	movlw	246
 36417  001002  258A               	addwf	DrawAnalogClock@rc1& (0+255),w,b
 36418  001004  6F6D               	movwf	DrawAnalogClock@rc2& (0+255),b
 36419  001006  0EFF               	movlw	255
 36420  001008  218B               	addwfc	(DrawAnalogClock@rc1+1)& (0+255),w,b
 36421  00100A  6F6E               	movwf	(DrawAnalogClock@rc2+1)& (0+255),b
 36422                           
 36423                           ; BSR set to: 1
 36424                           ;Draw.c: 480: for (jj=0; jj<60; jj++) {
 36425  00100C  0E00               	movlw	0
 36426  00100E  6F92               	movwf	DrawAnalogClock@jj& (0+255),b
 36427  001010                     l21709:
 36428                           
 36429                           ; BSR set to: 1
 36430  001010  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36431  001012  0A80               	xorlw	128
 36432  001014  0F44               	addlw	-188
 36433  001016  B0D8               	btfsc	status,0,c
 36434  001018  D16A               	goto	l21755
 36435                           
 36436                           ; BSR set to: 1
 36437                           ;Draw.c: 481: angle = jj*6;
 36438  00101A  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36439  00101C  6E1D               	movwf	___wmul@multiplier^0,c
 36440  00101E  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 36441  001020  BE1D               	btfsc	___wmul@multiplier^0,7,c
 36442  001022  061E               	decf	(___wmul@multiplier+1)^0,f,c
 36443  001024  0E00               	movlw	0
 36444  001026  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 36445  001028  0E06               	movlw	6
 36446  00102A  6E1F               	movwf	___wmul@multiplicand^0,c
 36447  00102C  EC12  F079         	call	___wmul	;wreg free
 36448  001030  C01D  F190         	movff	?___wmul,DrawAnalogClock@angle
 36449  001034  C01E  F191         	movff	?___wmul+1,DrawAnalogClock@angle+1
 36450                           
 36451                           ;Draw.c: 482: x[1] = xc + (rc * sind(angle))/256;
 36452  001038  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 36453  00103C  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 36454  001040  ECBE  F069         	call	_sind	;wreg free
 36455  001044  C013  F01D         	movff	?_sind,___wmul@multiplier
 36456  001048  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 36457  00104C  C188  F01F         	movff	DrawAnalogClock@rc,___wmul@multiplicand
 36458  001050  C189  F020         	movff	DrawAnalogClock@rc+1,___wmul@multiplicand+1
 36459  001054  EC12  F079         	call	___wmul	;wreg free
 36460  001058  C01E  F01D         	movff	?___wmul+1,?___wmul
 36461  00105C  6A1E               	clrf	(?___wmul+1)^0,c
 36462  00105E  BE1D               	btfsc	?___wmul^0,7,c
 36463  001060  681E               	setf	(?___wmul+1)^0,c
 36464  001062  0101               	movlb	1	; () banked
 36465  001064  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 36466  001066  241D               	addwf	?___wmul^0,w,c
 36467  001068  6F53               	movwf	(DrawAnalogClock@x+2)& (0+255),b
 36468  00106A  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 36469  00106C  201E               	addwfc	(?___wmul+1)^0,w,c
 36470  00106E  6F54               	movwf	(DrawAnalogClock@x+3)& (0+255),b
 36471                           
 36472                           ; BSR set to: 1
 36473                           ;Draw.c: 483: y[1] = yc - (rc * cosd(angle))/256;
 36474  001070  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 36475  001074  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 36476  001078  EC47  F079         	call	_cosd	;wreg free
 36477  00107C  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 36478  001080  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 36479  001084  C188  F01F         	movff	DrawAnalogClock@rc,___wmul@multiplicand
 36480  001088  C189  F020         	movff	DrawAnalogClock@rc+1,___wmul@multiplicand+1
 36481  00108C  EC12  F079         	call	___wmul	;wreg free
 36482  001090  C01E  F01D         	movff	?___wmul+1,?___wmul
 36483  001094  6A1E               	clrf	(?___wmul+1)^0,c
 36484  001096  BE1D               	btfsc	?___wmul^0,7,c
 36485  001098  681E               	setf	(?___wmul+1)^0,c
 36486  00109A  501D               	movf	?___wmul^0,w,c
 36487  00109C  0101               	movlb	1	; () banked
 36488  00109E  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 36489  0010A0  6F5D               	movwf	(DrawAnalogClock@y+2)& (0+255),b
 36490  0010A2  501E               	movf	(?___wmul+1)^0,w,c
 36491  0010A4  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 36492  0010A6  6F5E               	movwf	(DrawAnalogClock@y+3)& (0+255),b
 36493                           
 36494                           ; BSR set to: 1
 36495                           ;Draw.c: 484: x[2] = xc + (rc1 * sind(angle))/256;
 36496  0010A8  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 36497  0010AC  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 36498  0010B0  ECBE  F069         	call	_sind	;wreg free
 36499  0010B4  C013  F01D         	movff	?_sind,___wmul@multiplier
 36500  0010B8  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 36501  0010BC  C18A  F01F         	movff	DrawAnalogClock@rc1,___wmul@multiplicand
 36502  0010C0  C18B  F020         	movff	DrawAnalogClock@rc1+1,___wmul@multiplicand+1
 36503  0010C4  EC12  F079         	call	___wmul	;wreg free
 36504  0010C8  C01E  F01D         	movff	?___wmul+1,?___wmul
 36505  0010CC  6A1E               	clrf	(?___wmul+1)^0,c
 36506  0010CE  BE1D               	btfsc	?___wmul^0,7,c
 36507  0010D0  681E               	setf	(?___wmul+1)^0,c
 36508  0010D2  0101               	movlb	1	; () banked
 36509  0010D4  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 36510  0010D6  241D               	addwf	?___wmul^0,w,c
 36511  0010D8  6F55               	movwf	(DrawAnalogClock@x+4)& (0+255),b
 36512  0010DA  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 36513  0010DC  201E               	addwfc	(?___wmul+1)^0,w,c
 36514  0010DE  6F56               	movwf	(DrawAnalogClock@x+5)& (0+255),b
 36515                           
 36516                           ; BSR set to: 1
 36517                           ;Draw.c: 485: y[2] = yc - (rc1 * cosd(angle))/256;
 36518  0010E0  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 36519  0010E4  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 36520  0010E8  EC47  F079         	call	_cosd	;wreg free
 36521  0010EC  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 36522  0010F0  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 36523  0010F4  C18A  F01F         	movff	DrawAnalogClock@rc1,___wmul@multiplicand
 36524  0010F8  C18B  F020         	movff	DrawAnalogClock@rc1+1,___wmul@multiplicand+1
 36525  0010FC  EC12  F079         	call	___wmul	;wreg free
 36526  001100  C01E  F01D         	movff	?___wmul+1,?___wmul
 36527  001104  6A1E               	clrf	(?___wmul+1)^0,c
 36528  001106  BE1D               	btfsc	?___wmul^0,7,c
 36529  001108  681E               	setf	(?___wmul+1)^0,c
 36530  00110A  501D               	movf	?___wmul^0,w,c
 36531  00110C  0101               	movlb	1	; () banked
 36532  00110E  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 36533  001110  6F5F               	movwf	(DrawAnalogClock@y+4)& (0+255),b
 36534  001112  501E               	movf	(?___wmul+1)^0,w,c
 36535  001114  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 36536  001116  6F60               	movwf	(DrawAnalogClock@y+5)& (0+255),b
 36537                           
 36538                           ; BSR set to: 1
 36539                           ;Draw.c: 487: if (jj%5 == 0) {
 36540  001118  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36541  00111A  6E0E               	movwf	___awmod@dividend^0,c
 36542  00111C  6A0F               	clrf	(___awmod@dividend+1)^0,c
 36543  00111E  BE0E               	btfsc	___awmod@dividend^0,7,c
 36544  001120  060F               	decf	(___awmod@dividend+1)^0,f,c
 36545  001122  0E00               	movlw	0
 36546  001124  6E11               	movwf	(___awmod@divisor+1)^0,c
 36547  001126  0E05               	movlw	5
 36548  001128  6E10               	movwf	___awmod@divisor^0,c
 36549  00112A  ECC7  F06E         	call	___awmod	;wreg free
 36550  00112E  500E               	movf	?___awmod^0,w,c
 36551  001130  100F               	iorwf	(?___awmod+1)^0,w,c
 36552  001132  A4D8               	btfss	status,2,c
 36553  001134  D0C3               	goto	l21749
 36554                           
 36555                           ;Draw.c: 488: display_fillCircle(x[2], y[2], 2, color);
 36556  001136  C155  F060         	movff	DrawAnalogClock@x+4,display_fillCircle@x0
 36557  00113A  C156  F061         	movff	DrawAnalogClock@x+5,display_fillCircle@x0+1
 36558  00113E  C15F  F062         	movff	DrawAnalogClock@y+4,display_fillCircle@y0
 36559  001142  C160  F063         	movff	DrawAnalogClock@y+5,display_fillCircle@y0+1
 36560  001146  0E00               	movlw	0
 36561  001148  0100               	movlb	0	; () banked
 36562  00114A  6F65               	movwf	(display_fillCircle@r+1)& (0+255),b
 36563  00114C  0E02               	movlw	2
 36564  00114E  6F64               	movwf	display_fillCircle@r& (0+255),b
 36565  001150  C08F  F066         	movff	DrawAnalogClock@color,display_fillCircle@color
 36566  001154  C090  F067         	movff	DrawAnalogClock@color+1,display_fillCircle@color+1
 36567  001158  ECA4  F06F         	call	_display_fillCircle	;wreg free
 36568                           
 36569                           ;Draw.c: 490: if ((minupdate == 0) && (jj==mm)) continue;
 36570  00115C  0101               	movlb	1	; () banked
 36571  00115E  5150               	movf	DrawAnalogClock@minupdate& (0+255),w,b
 36572  001160  A4D8               	btfss	status,2,c
 36573  001162  D004               	goto	l21733
 36574                           
 36575                           ; BSR set to: 1
 36576  001164  5187               	movf	DrawAnalogClock@mm& (0+255),w,b
 36577  001166  1992               	xorwf	DrawAnalogClock@jj& (0+255),w,b
 36578  001168  B4D8               	btfsc	status,2,c
 36579  00116A  D0BE               	goto	l21751
 36580  00116C                     l21733:
 36581                           
 36582                           ; BSR set to: 1
 36583                           ;Draw.c: 491: x[3] = xc + (rc2 * sind(angle))/256;
 36584  00116C  C190  F013         	movff	DrawAnalogClock@angle,sind@theta
 36585  001170  C191  F014         	movff	DrawAnalogClock@angle+1,sind@theta+1
 36586  001174  ECBE  F069         	call	_sind	;wreg free
 36587  001178  C013  F01D         	movff	?_sind,___wmul@multiplier
 36588  00117C  C014  F01E         	movff	?_sind+1,___wmul@multiplier+1
 36589  001180  C16D  F01F         	movff	DrawAnalogClock@rc2,___wmul@multiplicand
 36590  001184  C16E  F020         	movff	DrawAnalogClock@rc2+1,___wmul@multiplicand+1
 36591  001188  EC12  F079         	call	___wmul	;wreg free
 36592  00118C  C01E  F01D         	movff	?___wmul+1,?___wmul
 36593  001190  6A1E               	clrf	(?___wmul+1)^0,c
 36594  001192  BE1D               	btfsc	?___wmul^0,7,c
 36595  001194  681E               	setf	(?___wmul+1)^0,c
 36596  001196  0101               	movlb	1	; () banked
 36597  001198  518C               	movf	DrawAnalogClock@xc& (0+255),w,b
 36598  00119A  241D               	addwf	?___wmul^0,w,c
 36599  00119C  6F57               	movwf	(DrawAnalogClock@x+6)& (0+255),b
 36600  00119E  518D               	movf	(DrawAnalogClock@xc+1)& (0+255),w,b
 36601  0011A0  201E               	addwfc	(?___wmul+1)^0,w,c
 36602  0011A2  6F58               	movwf	(DrawAnalogClock@x+7)& (0+255),b
 36603                           
 36604                           ;Draw.c: 492: y[3] = yc - (rc2 * cosd(angle))/256;
 36605  0011A4  C190  F01B         	movff	DrawAnalogClock@angle,cosd@theta
 36606  0011A8  C191  F01C         	movff	DrawAnalogClock@angle+1,cosd@theta+1
 36607  0011AC  EC47  F079         	call	_cosd	;wreg free
 36608  0011B0  C01B  F01D         	movff	?_cosd,___wmul@multiplier
 36609  0011B4  C01C  F01E         	movff	?_cosd+1,___wmul@multiplier+1
 36610  0011B8  C16D  F01F         	movff	DrawAnalogClock@rc2,___wmul@multiplicand
 36611  0011BC  C16E  F020         	movff	DrawAnalogClock@rc2+1,___wmul@multiplicand+1
 36612  0011C0  EC12  F079         	call	___wmul	;wreg free
 36613  0011C4  C01E  F01D         	movff	?___wmul+1,?___wmul
 36614  0011C8  6A1E               	clrf	(?___wmul+1)^0,c
 36615  0011CA  BE1D               	btfsc	?___wmul^0,7,c
 36616  0011CC  681E               	setf	(?___wmul+1)^0,c
 36617  0011CE  501D               	movf	?___wmul^0,w,c
 36618  0011D0  0101               	movlb	1	; () banked
 36619  0011D2  5D8E               	subwf	DrawAnalogClock@yc& (0+255),w,b
 36620  0011D4  6F61               	movwf	(DrawAnalogClock@y+6)& (0+255),b
 36621  0011D6  501E               	movf	(?___wmul+1)^0,w,c
 36622  0011D8  598F               	subwfb	(DrawAnalogClock@yc+1)& (0+255),w,b
 36623  0011DA  6F62               	movwf	(DrawAnalogClock@y+7)& (0+255),b
 36624                           
 36625                           ; BSR set to: 1
 36626                           ;Draw.c: 494: if (jj==0) kk=12;
 36627  0011DC  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36628  0011DE  A4D8               	btfss	status,2,c
 36629  0011E0  D002               	goto	l21739
 36630                           
 36631                           ; BSR set to: 1
 36632  0011E2  0E0C               	movlw	12
 36633  0011E4  D00D               	goto	L37
 36634  0011E6                     l21739:
 36635                           
 36636                           ; BSR set to: 1
 36637                           ;Draw.c: 495: else kk=jj/5;
 36638  0011E6  5192               	movf	DrawAnalogClock@jj& (0+255),w,b
 36639  0011E8  6E0E               	movwf	___awdiv@dividend^0,c
 36640  0011EA  6A0F               	clrf	(___awdiv@dividend+1)^0,c
 36641  0011EC  BE0E               	btfsc	___awdiv@dividend^0,7,c
 36642  0011EE  060F               	decf	(___awdiv@dividend+1)^0,f,c
 36643  0011F0  0E00               	movlw	0
 36644  0011F2  6E11               	movwf	(___awdiv@divisor+1)^0,c
 36645  0011F4  0E05               	movlw	5
 36646  0011F6  6E10               	movwf	___awdiv@divisor^0,c
 36647  0011F8  ECD1  F06C         	call	___awdiv	;wreg free
 36648  0011FC  500E               	movf	?___awdiv^0,w,c
 36649  0011FE  0101               	movlb	1	; () banked
 36650  001200                     L37:
 36651  001200  6F7C               	movwf	DrawAnalogClock@kk& (0+255),b
 36652                           
 36653                           ; BSR set to: 1
 36654                           ;Draw.c: 496: sprintf(str, "%d", kk);
 36655  001202  0E7D               	movlw	low DrawAnalogClock@str
 36656  001204  6E2A               	movwf	sprintf@sp^0,c
 36657  001206  0E01               	movlw	high DrawAnalogClock@str
 36658  001208  6E2B               	movwf	(sprintf@sp+1)^0,c
 36659  00120A  0EF8               	movlw	low STR_18
 36660  00120C  6E2C               	movwf	sprintf@f^0,c
 36661  00120E  0EFF               	movlw	high STR_18
 36662  001210  6E2D               	movwf	(sprintf@f+1)^0,c
 36663  001212  517C               	movf	DrawAnalogClock@kk& (0+255),w,b
 36664  001214  6E2E               	movwf	(?_sprintf+4)^0,c
 36665  001216  6A2F               	clrf	(?_sprintf+5)^0,c
 36666  001218  BE2E               	btfsc	(?_sprintf+4)^0,7,c
 36667  00121A  062F               	decf	(?_sprintf+5)^0,f,c
 36668  00121C  ECD0  F028         	call	_sprintf	;wreg free
 36669                           
 36670                           ; BSR set to: 0
 36671                           ;Draw.c: 498: if (kk<10)
 36672  001220  0101               	movlb	1	; () banked
 36673  001222  517C               	movf	DrawAnalogClock@kk& (0+255),w,b
 36674  001224  0A80               	xorlw	128
 36675  001226  0F76               	addlw	-138
 36676  001228  B0D8               	btfsc	status,0,c
 36677  00122A  D024               	goto	l21747
 36678                           
 36679                           ; BSR set to: 1
 36680                           ;Draw.c: 499: display_drawChars(x[3]-4, y[3]-3, str, color, color, 1);
 36681  00122C  0EFC               	movlw	252
 36682  00122E  2557               	addwf	(DrawAnalogClock@x+6)& (0+255),w,b
 36683  001230  0100               	movlb	0	; () banked
 36684  001232  6F6A               	movwf	display_drawChars@x& (0+255),b
 36685  001234  0EFF               	movlw	255
 36686  001236  0101               	movlb	1	; () banked
 36687  001238  2158               	addwfc	(DrawAnalogClock@x+7)& (0+255),w,b
 36688  00123A  0100               	movlb	0	; () banked
 36689  00123C  6F6B               	movwf	(display_drawChars@x+1)& (0+255),b
 36690  00123E  0EFD               	movlw	253
 36691  001240  0101               	movlb	1	; () banked
 36692  001242  2561               	addwf	(DrawAnalogClock@y+6)& (0+255),w,b
 36693  001244  0100               	movlb	0	; () banked
 36694  001246  6F6C               	movwf	display_drawChars@y& (0+255),b
 36695  001248  0EFF               	movlw	255
 36696  00124A  0101               	movlb	1	; () banked
 36697  00124C  2162               	addwfc	(DrawAnalogClock@y+7)& (0+255),w,b
 36698  00124E  0100               	movlb	0	; () banked
 36699  001250  6F6D               	movwf	(display_drawChars@y+1)& (0+255),b
 36700  001252  0E7D               	movlw	low DrawAnalogClock@str
 36701  001254  6F6E               	movwf	display_drawChars@s& (0+255),b
 36702  001256  0E01               	movlw	high DrawAnalogClock@str
 36703  001258  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
 36704  00125A  C08F  F070         	movff	DrawAnalogClock@color,display_drawChars@color
 36705  00125E  C090  F071         	movff	DrawAnalogClock@color+1,display_drawChars@color+1
 36706  001262  C08F  F072         	movff	DrawAnalogClock@color,display_drawChars@bg
 36707  001266  C090  F073         	movff	DrawAnalogClock@color+1,display_drawChars@bg+1
 36708  00126A  0E01               	movlw	1
 36709  00126C  6F74               	movwf	display_drawChars@size& (0+255),b
 36710  00126E  EC13  F06D         	call	_display_drawChars	;wreg free
 36711  001272  D03A               	goto	l21751
 36712  001274                     l21747:
 36713                           
 36714                           ; BSR set to: 1
 36715                           ;Draw.c: 500: else;Draw.c: 501: display_drawChars(x[3]-7, y[3]-3, str, color, color, 1);
 36716  001274  0EF9               	movlw	249
 36717  001276  2557               	addwf	(DrawAnalogClock@x+6)& (0+255),w,b
 36718  001278  0100               	movlb	0	; () banked
 36719  00127A  6F6A               	movwf	display_drawChars@x& (0+255),b
 36720  00127C  0EFF               	movlw	255
 36721  00127E  0101               	movlb	1	; () banked
 36722  001280  2158               	addwfc	(DrawAnalogClock@x+7)& (0+255),w,b
 36723  001282  0100               	movlb	0	; () banked
 36724  001284  6F6B               	movwf	(display_drawChars@x+1)& (0+255),b
 36725  001286  0EFD               	movlw	253
 36726  001288  0101               	movlb	1	; () banked
 36727  00128A  2561               	addwf	(DrawAnalogClock@y+6)& (0+255),w,b
 36728  00128C  0100               	movlb	0	; () banked
 36729  00128E  6F6C               	movwf	display_drawChars@y& (0+255),b
 36730  001290  0EFF               	movlw	255
 36731  001292  0101               	movlb	1	; () banked
 36732  001294  2162               	addwfc	(DrawAnalogClock@y+7)& (0+255),w,b
 36733  001296  0100               	movlb	0	; () banked
 36734  001298  6F6D               	movwf	(display_drawChars@y+1)& (0+255),b
 36735  00129A  0E7D               	movlw	low DrawAnalogClock@str
 36736  00129C  6F6E               	movwf	display_drawChars@s& (0+255),b
 36737  00129E  0E01               	movlw	high DrawAnalogClock@str
 36738  0012A0  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
 36739  0012A2  C08F  F070         	movff	DrawAnalogClock@color,display_drawChars@color
 36740  0012A6  C090  F071         	movff	DrawAnalogClock@color+1,display_drawChars@color+1
 36741  0012AA  C08F  F072         	movff	DrawAnalogClock@color,display_drawChars@bg
 36742  0012AE  C090  F073         	movff	DrawAnalogClock@color+1,display_drawChars@bg+1
 36743  0012B2  0E01               	movlw	1
 36744  0012B4  6F74               	movwf	display_drawChars@size& (0+255),b
 36745  0012B6  EC13  F06D         	call	_display_drawChars	;wreg free
 36746  0012BA  D016               	goto	l21751
 36747  0012BC                     l21749:
 36748                           
 36749                           ;Draw.c: 503: display_drawLine(x[1], y[1], x[2], y[2], color);
 36750  0012BC  C153  F060         	movff	DrawAnalogClock@x+2,display_drawLine@x0
 36751  0012C0  C154  F061         	movff	DrawAnalogClock@x+3,display_drawLine@x0+1
 36752  0012C4  C15D  F062         	movff	DrawAnalogClock@y+2,display_drawLine@y0
 36753  0012C8  C15E  F063         	movff	DrawAnalogClock@y+3,display_drawLine@y0+1
 36754  0012CC  C155  F064         	movff	DrawAnalogClock@x+4,display_drawLine@x1
 36755  0012D0  C156  F065         	movff	DrawAnalogClock@x+5,display_drawLine@x1+1
 36756  0012D4  C15F  F066         	movff	DrawAnalogClock@y+4,display_drawLine@y1
 36757  0012D8  C160  F067         	movff	DrawAnalogClock@y+5,display_drawLine@y1+1
 36758  0012DC  C08F  F068         	movff	DrawAnalogClock@color,display_drawLine@color
 36759  0012E0  C090  F069         	movff	DrawAnalogClock@color+1,display_drawLine@color+1
 36760  0012E4  ECA7  F05C         	call	_display_drawLine	;wreg free
 36761  0012E8                     l21751:
 36762  0012E8  0101               	movlb	1	; () banked
 36763  0012EA  2B92               	incf	DrawAnalogClock@jj& (0+255),f,b
 36764  0012EC  D691               	goto	l21709
 36765  0012EE                     l21755:
 36766                           
 36767                           ; BSR set to: 1
 36768                           ;Draw.c: 504: };Draw.c: 505: };Draw.c: 508: if (datetime[2] < 0x12) sprintf(str, "AM");
 36769  0012EE  0100               	movlb	0	; () banked
 36770  0012F0  EE20 F002          	lfsr	2,2
 36771  0012F4  5188               	movf	DrawAnalogClock@datetime& (0+255),w,b
 36772  0012F6  26D9               	addwf	fsr2l,f,c
 36773  0012F8  5189               	movf	(DrawAnalogClock@datetime+1)& (0+255),w,b
 36774  0012FA  22DA               	addwfc	fsr2h,f,c
 36775  0012FC  0E12               	movlw	18
 36776  0012FE  60DF               	cpfslt	indf2,c
 36777  001300  D00B               	goto	l21759
 36778                           
 36779                           ; BSR set to: 0
 36780  001302  0E7D               	movlw	low DrawAnalogClock@str
 36781  001304  6E2A               	movwf	sprintf@sp^0,c
 36782  001306  0E01               	movlw	high DrawAnalogClock@str
 36783  001308  6E2B               	movwf	(sprintf@sp+1)^0,c
 36784  00130A  0EEF               	movlw	low STR_19
 36785  00130C  6E2C               	movwf	sprintf@f^0,c
 36786  00130E  0EFF               	movlw	high STR_19
 36787  001310  6E2D               	movwf	(sprintf@f+1)^0,c
 36788  001312  ECD0  F028         	call	_sprintf	;wreg free
 36789  001316  D00A               	goto	l2957
 36790  001318                     l21759:
 36791                           
 36792                           ; BSR set to: 0
 36793                           ;Draw.c: 509: else sprintf(str, "PM");
 36794  001318  0E7D               	movlw	low DrawAnalogClock@str
 36795  00131A  6E2A               	movwf	sprintf@sp^0,c
 36796  00131C  0E01               	movlw	high DrawAnalogClock@str
 36797  00131E  6E2B               	movwf	(sprintf@sp+1)^0,c
 36798  001320  0EF2               	movlw	low STR_20
 36799  001322  6E2C               	movwf	sprintf@f^0,c
 36800  001324  0EFF               	movlw	high STR_20
 36801  001326  6E2D               	movwf	(sprintf@f+1)^0,c
 36802  001328  ECD0  F028         	call	_sprintf	;wreg free
 36803  00132C                     l2957:
 36804                           
 36805                           ; BSR set to: 0
 36806                           ;Draw.c: 510: display_drawChars(xx-14, yy+rc/2, str, color, color, 2);
 36807  00132C  0EF2               	movlw	242
 36808  00132E  258A               	addwf	DrawAnalogClock@xx& (0+255),w,b
 36809  001330  6F6A               	movwf	display_drawChars@x& (0+255),b
 36810  001332  0EFF               	movlw	255
 36811  001334  218B               	addwfc	(DrawAnalogClock@xx+1)& (0+255),w,b
 36812  001336  6F6B               	movwf	(display_drawChars@x+1)& (0+255),b
 36813  001338  90D8               	bcf	status,0,c
 36814  00133A  0101               	movlb	1	; () banked
 36815  00133C  3189               	rrcf	(DrawAnalogClock@rc+1)& (0+255),w,b
 36816  00133E  0100               	movlb	0	; () banked
 36817  001340  6F92               	movwf	(??_DrawAnalogClock+1)& (0+255),b
 36818  001342  0101               	movlb	1	; () banked
 36819  001344  3188               	rrcf	DrawAnalogClock@rc& (0+255),w,b
 36820  001346  0100               	movlb	0	; () banked
 36821  001348  6F91               	movwf	??_DrawAnalogClock& (0+255),b
 36822  00134A  518C               	movf	DrawAnalogClock@yy& (0+255),w,b
 36823  00134C  2591               	addwf	??_DrawAnalogClock& (0+255),w,b
 36824  00134E  6F6C               	movwf	display_drawChars@y& (0+255),b
 36825  001350  518D               	movf	(DrawAnalogClock@yy+1)& (0+255),w,b
 36826  001352  2192               	addwfc	(??_DrawAnalogClock+1)& (0+255),w,b
 36827  001354  6F6D               	movwf	(display_drawChars@y+1)& (0+255),b
 36828  001356  0E7D               	movlw	low DrawAnalogClock@str
 36829  001358  6F6E               	movwf	display_drawChars@s& (0+255),b
 36830  00135A  0E01               	movlw	high DrawAnalogClock@str
 36831  00135C  6F6F               	movwf	(display_drawChars@s+1)& (0+255),b
 36832  00135E  C08F  F070         	movff	DrawAnalogClock@color,display_drawChars@color
 36833  001362  C090  F071         	movff	DrawAnalogClock@color+1,display_drawChars@color+1
 36834  001366  C08F  F072         	movff	DrawAnalogClock@color,display_drawChars@bg
 36835  00136A  C090  F073         	movff	DrawAnalogClock@color+1,display_drawChars@bg+1
 36836  00136E  0E02               	movlw	2
 36837  001370  6F74               	movwf	display_drawChars@size& (0+255),b
 36838  001372  EC13  F06D         	call	_display_drawChars	;wreg free
 36839                           
 36840                           ;Draw.c: 514: display_drawLine(pax[0], pay[0], pax[1], pay[1], acolor);
 36841  001376  C317  F060         	movff	DrawAnalogClock@pax,display_drawLine@x0
 36842  00137A  C318  F061         	movff	DrawAnalogClock@pax+1,display_drawLine@x0+1
 36843  00137E  C30D  F062         	movff	DrawAnalogClock@pay,display_drawLine@y0
 36844  001382  C30E  F063         	movff	DrawAnalogClock@pay+1,display_drawLine@y0+1
 36845  001386  C319  F064         	movff	DrawAnalogClock@pax+2,display_drawLine@x1
 36846  00138A  C31A  F065         	movff	DrawAnalogClock@pax+3,display_drawLine@x1+1
 36847  00138E  C30F  F066         	movff	DrawAnalogClock@pay+2,display_drawLine@y1
 36848  001392  C310  F067         	movff	DrawAnalogClock@pay+3,display_drawLine@y1+1
 36849  001396  C182  F068         	movff	DrawAnalogClock@acolor,display_drawLine@color
 36850  00139A  C183  F069         	movff	DrawAnalogClock@acolor+1,display_drawLine@color+1
 36851  00139E  ECA7  F05C         	call	_display_drawLine	;wreg free
 36852                           
 36853                           ;Draw.c: 515: if ( (pay[1]-pay[0]) > (pax[1]-pax[0])) {
 36854  0013A2  0103               	movlb	3	; () banked
 36855  0013A4  510D               	movf	DrawAnalogClock@pay& (0+255),w,b
 36856  0013A6  5D0F               	subwf	(DrawAnalogClock@pay+2)& (0+255),w,b
 36857  0013A8  0100               	movlb	0	; () banked
 36858  0013AA  6F91               	movwf	??_DrawAnalogClock& (0+255),b
 36859  0013AC  0103               	movlb	3	; () banked
 36860  0013AE  510E               	movf	(DrawAnalogClock@pay+1)& (0+255),w,b
 36861  0013B0  5910               	subwfb	(DrawAnalogClock@pay+3)& (0+255),w,b
 36862  0013B2  0100               	movlb	0	; () banked
 36863  0013B4  6F92               	movwf	(??_DrawAnalogClock+1)& (0+255),b
 36864  0013B6  0103               	movlb	3	; () banked
 36865  0013B8  5117               	movf	DrawAnalogClock@pax& (0+255),w,b
 36866  0013BA  5D19               	subwf	(DrawAnalogClock@pax+2)& (0+255),w,b
 36867  0013BC  0100               	movlb	0	; () banked
 36868  0013BE  6F93               	movwf	(??_DrawAnalogClock+2)& (0+255),b
 36869  0013C0  0103               	movlb	3	; () banked
 36870  0013C2  5118               	movf	(DrawAnalogClock@pax+1)& (0+255),w,b
 36871  0013C4  591A               	subwfb	(DrawAnalogClock@pax+3)& (0+255),w,b
 36872  0013C6  0100               	movlb	0	; () banked
 36873  0013C8  6F94               	movwf	(??_DrawAnalogClock+3)& (0+255),b
 36874  0013CA  5191               	movf	??_DrawAnalogClock& (0+255),w,b
 36875  0013CC  5D93               	subwf	(??_DrawAnalogClock+2)& (0+255),w,b
 36876  0013CE  5192               	movf	(??_DrawAnalogClock+1)& (0+255),w,b
 36877  0013D0  5994               	subwfb	(??_DrawAnalogClock+3)& (0+255),w,b
 36878  0013D2  B0D8               	btfsc	status,0,c
 36879  0013D4  D045               	goto	l21767
 36880                           
 36881                           ; BSR set to: 0
 36882                           ;Draw.c: 517: display_drawLine(pax[0]+1, pay[0], pax[1]+1, pay[1], acolor);
 36883  0013D6  0E01               	movlw	1
 36884  0013D8  0103               	movlb	3	; () banked
 36885  0013DA  2517               	addwf	DrawAnalogClock@pax& (0+255),w,b
 36886  0013DC  0100               	movlb	0	; () banked
 36887  0013DE  6F60               	movwf	display_drawLine@x0& (0+255),b
 36888  0013E0  0E00               	movlw	0
 36889  0013E2  0103               	movlb	3	; () banked
 36890  0013E4  2118               	addwfc	(DrawAnalogClock@pax+1)& (0+255),w,b
 36891  0013E6  0100               	movlb	0	; () banked
 36892  0013E8  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
 36893  0013EA  C30D  F062         	movff	DrawAnalogClock@pay,display_drawLine@y0
 36894  0013EE  C30E  F063         	movff	DrawAnalogClock@pay+1,display_drawLine@y0+1
 36895  0013F2  0E01               	movlw	1
 36896  0013F4  0103               	movlb	3	; () banked
 36897  0013F6  2519               	addwf	(DrawAnalogClock@pax+2)& (0+255),w,b
 36898  0013F8  0100               	movlb	0	; () banked
 36899  0013FA  6F64               	movwf	display_drawLine@x1& (0+255),b
 36900  0013FC  0E00               	movlw	0
 36901  0013FE  0103               	movlb	3	; () banked
 36902  001400  211A               	addwfc	(DrawAnalogClock@pax+3)& (0+255),w,b
 36903  001402  0100               	movlb	0	; () banked
 36904  001404  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
 36905  001406  C30F  F066         	movff	DrawAnalogClock@pay+2,display_drawLine@y1
 36906  00140A  C310  F067         	movff	DrawAnalogClock@pay+3,display_drawLine@y1+1
 36907  00140E  C182  F068         	movff	DrawAnalogClock@acolor,display_drawLine@color
 36908  001412  C183  F069         	movff	DrawAnalogClock@acolor+1,display_drawLine@color+1
 36909  001416  ECA7  F05C         	call	_display_drawLine	;wreg free
 36910                           
 36911                           ;Draw.c: 518: display_drawLine(pax[0]-1, pay[0], pax[1]-1, pay[1], acolor);
 36912  00141A  0EFF               	movlw	255
 36913  00141C  0103               	movlb	3	; () banked
 36914  00141E  2517               	addwf	DrawAnalogClock@pax& (0+255),w,b
 36915  001420  0100               	movlb	0	; () banked
 36916  001422  6F60               	movwf	display_drawLine@x0& (0+255),b
 36917  001424  0EFF               	movlw	255
 36918  001426  0103               	movlb	3	; () banked
 36919  001428  2118               	addwfc	(DrawAnalogClock@pax+1)& (0+255),w,b
 36920  00142A  0100               	movlb	0	; () banked
 36921  00142C  6F61               	movwf	(display_drawLine@x0+1)& (0+255),b
 36922  00142E  C30D  F062         	movff	DrawAnalogClock@pay,display_drawLine@y0
 36923  001432  C30E  F063         	movff	DrawAnalogClock@pay+1,display_drawLine@y0+1
 36924  001436  0EFF               	movlw	255
 36925  001438  0103               	movlb	3	; () banked
 36926  00143A  2519               	addwf	(DrawAnalogClock@pax+2)& (0+255),w,b
 36927  00143C  0100               	movlb	0	; () banked
 36928  00143E  6F64               	movwf	display_drawLine@x1& (0+255),b
 36929  001440  0EFF               	movlw	255
 36930  001442  0103               	movlb	3	; () banked
 36931  001444  211A               	addwfc	(DrawAnalogClock@pax+3)& (0+255),w,b
 36932  001446  0100               	movlb	0	; () banked
 36933  001448  6F65               	movwf	(display_drawLine@x1+1)& (0+255),b
 36934  00144A  C30F  F066         	movff	DrawAnalogClock@pay+2,display_drawLine@y1
 36935  00144E  C310  F067         	movff	DrawAnalogClock@pay+3,display_drawLine@y1+1
 36936  001452  C182  F068         	movff	DrawAnalogClock@acolor,display_drawLine@color
 36937  001456  C183  F069         	movff	DrawAnalogClock@acolor+1,display_drawLine@color+1
 36938  00145A  ECA7  F05C         	call	_display_drawLine	;wreg free
 36939                           
 36940                           ;Draw.c: 519: } else {
 36941  00145E  D044               	goto	l2959
 36942  001460                     l21767:
 36943                           
 36944                           ; BSR set to: 0
 36945                           ;Draw.c: 520: display_drawLine(pax[0], pay[0]-1, pax[1], pay[1]-1, acolor);
 36946  001460  C317  F060         	movff	DrawAnalogClock@pax,display_drawLine@x0
 36947  001464  C318  F061         	movff	DrawAnalogClock@pax+1,display_drawLine@x0+1
 36948  001468  0EFF               	movlw	255
 36949  00146A  0103               	movlb	3	; () banked
 36950  00146C  250D               	addwf	DrawAnalogClock@pay& (0+255),w,b
 36951  00146E  0100               	movlb	0	; () banked
 36952  001470  6F62               	movwf	display_drawLine@y0& (0+255),b
 36953  001472  0EFF               	movlw	255
 36954  001474  0103               	movlb	3	; () banked
 36955  001476  210E               	addwfc	(DrawAnalogClock@pay+1)& (0+255),w,b
 36956  001478  0100               	movlb	0	; () banked
 36957  00147A  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
 36958  00147C  C319  F064         	movff	DrawAnalogClock@pax+2,display_drawLine@x1
 36959  001480  C31A  F065         	movff	DrawAnalogClock@pax+3,display_drawLine@x1+1
 36960  001484  0EFF               	movlw	255
 36961  001486  0103               	movlb	3	; () banked
 36962  001488  250F               	addwf	(DrawAnalogClock@pay+2)& (0+255),w,b
 36963  00148A  0100               	movlb	0	; () banked
 36964  00148C  6F66               	movwf	display_drawLine@y1& (0+255),b
 36965  00148E  0EFF               	movlw	255
 36966  001490  0103               	movlb	3	; () banked
 36967  001492  2110               	addwfc	(DrawAnalogClock@pay+3)& (0+255),w,b
 36968  001494  0100               	movlb	0	; () banked
 36969  001496  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
 36970  001498  C182  F068         	movff	DrawAnalogClock@acolor,display_drawLine@color
 36971  00149C  C183  F069         	movff	DrawAnalogClock@acolor+1,display_drawLine@color+1
 36972  0014A0  ECA7  F05C         	call	_display_drawLine	;wreg free
 36973                           
 36974                           ;Draw.c: 521: display_drawLine(pax[0], pay[0]-1, pax[1], pay[1]-1, acolor);
 36975  0014A4  C317  F060         	movff	DrawAnalogClock@pax,display_drawLine@x0
 36976  0014A8  C318  F061         	movff	DrawAnalogClock@pax+1,display_drawLine@x0+1
 36977  0014AC  0EFF               	movlw	255
 36978  0014AE  0103               	movlb	3	; () banked
 36979  0014B0  250D               	addwf	DrawAnalogClock@pay& (0+255),w,b
 36980  0014B2  0100               	movlb	0	; () banked
 36981  0014B4  6F62               	movwf	display_drawLine@y0& (0+255),b
 36982  0014B6  0EFF               	movlw	255
 36983  0014B8  0103               	movlb	3	; () banked
 36984  0014BA  210E               	addwfc	(DrawAnalogClock@pay+1)& (0+255),w,b
 36985  0014BC  0100               	movlb	0	; () banked
 36986  0014BE  6F63               	movwf	(display_drawLine@y0+1)& (0+255),b
 36987  0014C0  C319  F064         	movff	DrawAnalogClock@pax+2,display_drawLine@x1
 36988  0014C4  C31A  F065         	movff	DrawAnalogClock@pax+3,display_drawLine@x1+1
 36989  0014C8  0EFF               	movlw	255
 36990  0014CA  0103               	movlb	3	; () banked
 36991  0014CC  250F               	addwf	(DrawAnalogClock@pay+2)& (0+255),w,b
 36992  0014CE  0100               	movlb	0	; () banked
 36993  0014D0  6F66               	movwf	display_drawLine@y1& (0+255),b
 36994  0014D2  0EFF               	movlw	255
 36995  0014D4  0103               	movlb	3	; () banked
 36996  0014D6  2110               	addwfc	(DrawAnalogClock@pay+3)& (0+255),w,b
 36997  0014D8  0100               	movlb	0	; () banked
 36998  0014DA  6F67               	movwf	(display_drawLine@y1+1)& (0+255),b
 36999  0014DC  C182  F068         	movff	DrawAnalogClock@acolor,display_drawLine@color
 37000  0014E0  C183  F069         	movff	DrawAnalogClock@acolor+1,display_drawLine@color+1
 37001  0014E4  ECA7  F05C         	call	_display_drawLine	;wreg free
 37002  0014E8                     l2959:
 37003                           
 37004                           ;Draw.c: 522: };Draw.c: 525: display_fillTriangle(phx[1], phy[1], phx[2], phy[2], phx[3]
      +                          , phy[3], hcolor);
 37005  0014E8  C355  F027         	movff	DrawAnalogClock@phx+2,display_fillTriangle@x0
 37006  0014EC  C356  F028         	movff	DrawAnalogClock@phx+3,display_fillTriangle@x0+1
 37007  0014F0  C34B  F029         	movff	DrawAnalogClock@phy+2,display_fillTriangle@y0
 37008  0014F4  C34C  F02A         	movff	DrawAnalogClock@phy+3,display_fillTriangle@y0+1
 37009  0014F8  C357  F02B         	movff	DrawAnalogClock@phx+4,display_fillTriangle@x1
 37010  0014FC  C358  F02C         	movff	DrawAnalogClock@phx+5,display_fillTriangle@x1+1
 37011  001500  C34D  F02D         	movff	DrawAnalogClock@phy+4,display_fillTriangle@y1
 37012  001504  C34E  F02E         	movff	DrawAnalogClock@phy+5,display_fillTriangle@y1+1
 37013  001508  C359  F02F         	movff	DrawAnalogClock@phx+6,display_fillTriangle@x2
 37014  00150C  C35A  F030         	movff	DrawAnalogClock@phx+7,display_fillTriangle@x2+1
 37015  001510  C34F  F031         	movff	DrawAnalogClock@phy+6,display_fillTriangle@y2
 37016  001514  C350  F032         	movff	DrawAnalogClock@phy+7,display_fillTriangle@y2+1
 37017  001518  C177  F033         	movff	DrawAnalogClock@hcolor,display_fillTriangle@color
 37018  00151C  C178  F034         	movff	DrawAnalogClock@hcolor+1,display_fillTriangle@color+1
 37019  001520  EC8C  F031         	call	_display_fillTriangle	;wreg free
 37020                           
 37021                           ;Draw.c: 528: display_fillTriangle(phx[4], phy[4], phx[2], phy[2], phx[3], phy[3], hcolo
      +                          r);
 37022  001524  C35B  F027         	movff	DrawAnalogClock@phx+8,display_fillTriangle@x0
 37023  001528  C35C  F028         	movff	DrawAnalogClock@phx+9,display_fillTriangle@x0+1
 37024  00152C  C351  F029         	movff	DrawAnalogClock@phy+8,display_fillTriangle@y0
 37025  001530  C352  F02A         	movff	DrawAnalogClock@phy+9,display_fillTriangle@y0+1
 37026  001534  C357  F02B         	movff	DrawAnalogClock@phx+4,display_fillTriangle@x1
 37027  001538  C358  F02C         	movff	DrawAnalogClock@phx+5,display_fillTriangle@x1+1
 37028  00153C  C34D  F02D         	movff	DrawAnalogClock@phy+4,display_fillTriangle@y1
 37029  001540  C34E  F02E         	movff	DrawAnalogClock@phy+5,display_fillTriangle@y1+1
 37030  001544  C359  F02F         	movff	DrawAnalogClock@phx+6,display_fillTriangle@x2
 37031  001548  C35A  F030         	movff	DrawAnalogClock@phx+7,display_fillTriangle@x2+1
 37032  00154C  C34F  F031         	movff	DrawAnalogClock@phy+6,display_fillTriangle@y2
 37033  001550  C350  F032         	movff	DrawAnalogClock@phy+7,display_fillTriangle@y2+1
 37034  001554  C177  F033         	movff	DrawAnalogClock@hcolor,display_fillTriangle@color
 37035  001558  C178  F034         	movff	DrawAnalogClock@hcolor+1,display_fillTriangle@color+1
 37036  00155C  EC8C  F031         	call	_display_fillTriangle	;wreg free
 37037                           
 37038                           ;Draw.c: 531: display_drawLine(phx[1], phy[1], phx[2], phy[2], 0xFFFF);
 37039  001560  C355  F060         	movff	DrawAnalogClock@phx+2,display_drawLine@x0
 37040  001564  C356  F061         	movff	DrawAnalogClock@phx+3,display_drawLine@x0+1
 37041  001568  C34B  F062         	movff	DrawAnalogClock@phy+2,display_drawLine@y0
 37042  00156C  C34C  F063         	movff	DrawAnalogClock@phy+3,display_drawLine@y0+1
 37043  001570  C357  F064         	movff	DrawAnalogClock@phx+4,display_drawLine@x1
 37044  001574  C358  F065         	movff	DrawAnalogClock@phx+5,display_drawLine@x1+1
 37045  001578  C34D  F066         	movff	DrawAnalogClock@phy+4,display_drawLine@y1
 37046  00157C  C34E  F067         	movff	DrawAnalogClock@phy+5,display_drawLine@y1+1
 37047  001580  0EFF               	movlw	255
 37048  001582  0100               	movlb	0	; () banked
 37049  001584  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 37050  001586  6968               	setf	display_drawLine@color& (0+255),b
 37051  001588  ECA7  F05C         	call	_display_drawLine	;wreg free
 37052                           
 37053                           ;Draw.c: 532: display_drawLine(phx[1], phy[1], phx[3], phy[3], 0xFFFF);
 37054  00158C  C355  F060         	movff	DrawAnalogClock@phx+2,display_drawLine@x0
 37055  001590  C356  F061         	movff	DrawAnalogClock@phx+3,display_drawLine@x0+1
 37056  001594  C34B  F062         	movff	DrawAnalogClock@phy+2,display_drawLine@y0
 37057  001598  C34C  F063         	movff	DrawAnalogClock@phy+3,display_drawLine@y0+1
 37058  00159C  C359  F064         	movff	DrawAnalogClock@phx+6,display_drawLine@x1
 37059  0015A0  C35A  F065         	movff	DrawAnalogClock@phx+7,display_drawLine@x1+1
 37060  0015A4  C34F  F066         	movff	DrawAnalogClock@phy+6,display_drawLine@y1
 37061  0015A8  C350  F067         	movff	DrawAnalogClock@phy+7,display_drawLine@y1+1
 37062  0015AC  0EFF               	movlw	255
 37063  0015AE  0100               	movlb	0	; () banked
 37064  0015B0  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 37065  0015B2  6968               	setf	display_drawLine@color& (0+255),b
 37066  0015B4  ECA7  F05C         	call	_display_drawLine	;wreg free
 37067                           
 37068                           ;Draw.c: 533: display_drawLine(phx[4], phy[4], phx[2], phy[2], 0xFFFF);
 37069  0015B8  C35B  F060         	movff	DrawAnalogClock@phx+8,display_drawLine@x0
 37070  0015BC  C35C  F061         	movff	DrawAnalogClock@phx+9,display_drawLine@x0+1
 37071  0015C0  C351  F062         	movff	DrawAnalogClock@phy+8,display_drawLine@y0
 37072  0015C4  C352  F063         	movff	DrawAnalogClock@phy+9,display_drawLine@y0+1
 37073  0015C8  C357  F064         	movff	DrawAnalogClock@phx+4,display_drawLine@x1
 37074  0015CC  C358  F065         	movff	DrawAnalogClock@phx+5,display_drawLine@x1+1
 37075  0015D0  C34D  F066         	movff	DrawAnalogClock@phy+4,display_drawLine@y1
 37076  0015D4  C34E  F067         	movff	DrawAnalogClock@phy+5,display_drawLine@y1+1
 37077  0015D8  0EFF               	movlw	255
 37078  0015DA  0100               	movlb	0	; () banked
 37079  0015DC  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 37080  0015DE  6968               	setf	display_drawLine@color& (0+255),b
 37081  0015E0  ECA7  F05C         	call	_display_drawLine	;wreg free
 37082                           
 37083                           ;Draw.c: 534: display_drawLine(phx[4], phy[4], phx[3], phy[3], 0xFFFF);
 37084  0015E4  C35B  F060         	movff	DrawAnalogClock@phx+8,display_drawLine@x0
 37085  0015E8  C35C  F061         	movff	DrawAnalogClock@phx+9,display_drawLine@x0+1
 37086  0015EC  C351  F062         	movff	DrawAnalogClock@phy+8,display_drawLine@y0
 37087  0015F0  C352  F063         	movff	DrawAnalogClock@phy+9,display_drawLine@y0+1
 37088  0015F4  C359  F064         	movff	DrawAnalogClock@phx+6,display_drawLine@x1
 37089  0015F8  C35A  F065         	movff	DrawAnalogClock@phx+7,display_drawLine@x1+1
 37090  0015FC  C34F  F066         	movff	DrawAnalogClock@phy+6,display_drawLine@y1
 37091  001600  C350  F067         	movff	DrawAnalogClock@phy+7,display_drawLine@y1+1
 37092  001604  0EFF               	movlw	255
 37093  001606  0100               	movlb	0	; () banked
 37094  001608  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 37095  00160A  6968               	setf	display_drawLine@color& (0+255),b
 37096  00160C  ECA7  F05C         	call	_display_drawLine	;wreg free
 37097                           
 37098                           ;Draw.c: 537: display_fillTriangle(pmx[1], pmy[1], pmx[2], pmy[2], pmx[3], pmy[3], mcolo
      +                          r);
 37099  001610  C341  F027         	movff	DrawAnalogClock@pmx+2,display_fillTriangle@x0
 37100  001614  C342  F028         	movff	DrawAnalogClock@pmx+3,display_fillTriangle@x0+1
 37101  001618  C337  F029         	movff	DrawAnalogClock@pmy+2,display_fillTriangle@y0
 37102  00161C  C338  F02A         	movff	DrawAnalogClock@pmy+3,display_fillTriangle@y0+1
 37103  001620  C343  F02B         	movff	DrawAnalogClock@pmx+4,display_fillTriangle@x1
 37104  001624  C344  F02C         	movff	DrawAnalogClock@pmx+5,display_fillTriangle@x1+1
 37105  001628  C339  F02D         	movff	DrawAnalogClock@pmy+4,display_fillTriangle@y1
 37106  00162C  C33A  F02E         	movff	DrawAnalogClock@pmy+5,display_fillTriangle@y1+1
 37107  001630  C345  F02F         	movff	DrawAnalogClock@pmx+6,display_fillTriangle@x2
 37108  001634  C346  F030         	movff	DrawAnalogClock@pmx+7,display_fillTriangle@x2+1
 37109  001638  C33B  F031         	movff	DrawAnalogClock@pmy+6,display_fillTriangle@y2
 37110  00163C  C33C  F032         	movff	DrawAnalogClock@pmy+7,display_fillTriangle@y2+1
 37111  001640  C179  F033         	movff	DrawAnalogClock@mcolor,display_fillTriangle@color
 37112  001644  C17A  F034         	movff	DrawAnalogClock@mcolor+1,display_fillTriangle@color+1
 37113  001648  EC8C  F031         	call	_display_fillTriangle	;wreg free
 37114                           
 37115                           ;Draw.c: 538: display_drawTriangle(pmx[1], pmy[1], pmx[2], pmy[2], pmx[3], pmy[3], 0xFFF
      +                          F);
 37116  00164C  C341  F06A         	movff	DrawAnalogClock@pmx+2,display_drawTriangle@x0
 37117  001650  C342  F06B         	movff	DrawAnalogClock@pmx+3,display_drawTriangle@x0+1
 37118  001654  C337  F06C         	movff	DrawAnalogClock@pmy+2,display_drawTriangle@y0
 37119  001658  C338  F06D         	movff	DrawAnalogClock@pmy+3,display_drawTriangle@y0+1
 37120  00165C  C343  F06E         	movff	DrawAnalogClock@pmx+4,display_drawTriangle@x1
 37121  001660  C344  F06F         	movff	DrawAnalogClock@pmx+5,display_drawTriangle@x1+1
 37122  001664  C339  F070         	movff	DrawAnalogClock@pmy+4,display_drawTriangle@y1
 37123  001668  C33A  F071         	movff	DrawAnalogClock@pmy+5,display_drawTriangle@y1+1
 37124  00166C  C345  F072         	movff	DrawAnalogClock@pmx+6,display_drawTriangle@x2
 37125  001670  C346  F073         	movff	DrawAnalogClock@pmx+7,display_drawTriangle@x2+1
 37126  001674  C33B  F074         	movff	DrawAnalogClock@pmy+6,display_drawTriangle@y2
 37127  001678  C33C  F075         	movff	DrawAnalogClock@pmy+7,display_drawTriangle@y2+1
 37128  00167C  0EFF               	movlw	255
 37129  00167E  0100               	movlb	0	; () banked
 37130  001680  6F77               	movwf	(display_drawTriangle@color+1)& (0+255),b
 37131  001682  6976               	setf	display_drawTriangle@color& (0+255),b
 37132  001684  EC8E  F06C         	call	_display_drawTriangle	;wreg free
 37133                           
 37134                           ;Draw.c: 540: display_fillTriangle(pmx[4], pmy[4], pmx[2], pmy[2], pmx[3], pmy[3], mcolo
      +                          r);
 37135  001688  C347  F027         	movff	DrawAnalogClock@pmx+8,display_fillTriangle@x0
 37136  00168C  C348  F028         	movff	DrawAnalogClock@pmx+9,display_fillTriangle@x0+1
 37137  001690  C33D  F029         	movff	DrawAnalogClock@pmy+8,display_fillTriangle@y0
 37138  001694  C33E  F02A         	movff	DrawAnalogClock@pmy+9,display_fillTriangle@y0+1
 37139  001698  C343  F02B         	movff	DrawAnalogClock@pmx+4,display_fillTriangle@x1
 37140  00169C  C344  F02C         	movff	DrawAnalogClock@pmx+5,display_fillTriangle@x1+1
 37141  0016A0  C339  F02D         	movff	DrawAnalogClock@pmy+4,display_fillTriangle@y1
 37142  0016A4  C33A  F02E         	movff	DrawAnalogClock@pmy+5,display_fillTriangle@y1+1
 37143  0016A8  C345  F02F         	movff	DrawAnalogClock@pmx+6,display_fillTriangle@x2
 37144  0016AC  C346  F030         	movff	DrawAnalogClock@pmx+7,display_fillTriangle@x2+1
 37145  0016B0  C33B  F031         	movff	DrawAnalogClock@pmy+6,display_fillTriangle@y2
 37146  0016B4  C33C  F032         	movff	DrawAnalogClock@pmy+7,display_fillTriangle@y2+1
 37147  0016B8  C179  F033         	movff	DrawAnalogClock@mcolor,display_fillTriangle@color
 37148  0016BC  C17A  F034         	movff	DrawAnalogClock@mcolor+1,display_fillTriangle@color+1
 37149  0016C0  EC8C  F031         	call	_display_fillTriangle	;wreg free
 37150                           
 37151                           ;Draw.c: 541: display_drawTriangle(pmx[4], pmy[4], pmx[2], pmy[2], pmx[3], pmy[3], 0xFFF
      +                          F);
 37152  0016C4  C347  F06A         	movff	DrawAnalogClock@pmx+8,display_drawTriangle@x0
 37153  0016C8  C348  F06B         	movff	DrawAnalogClock@pmx+9,display_drawTriangle@x0+1
 37154  0016CC  C33D  F06C         	movff	DrawAnalogClock@pmy+8,display_drawTriangle@y0
 37155  0016D0  C33E  F06D         	movff	DrawAnalogClock@pmy+9,display_drawTriangle@y0+1
 37156  0016D4  C343  F06E         	movff	DrawAnalogClock@pmx+4,display_drawTriangle@x1
 37157  0016D8  C344  F06F         	movff	DrawAnalogClock@pmx+5,display_drawTriangle@x1+1
 37158  0016DC  C339  F070         	movff	DrawAnalogClock@pmy+4,display_drawTriangle@y1
 37159  0016E0  C33A  F071         	movff	DrawAnalogClock@pmy+5,display_drawTriangle@y1+1
 37160  0016E4  C345  F072         	movff	DrawAnalogClock@pmx+6,display_drawTriangle@x2
 37161  0016E8  C346  F073         	movff	DrawAnalogClock@pmx+7,display_drawTriangle@x2+1
 37162  0016EC  C33B  F074         	movff	DrawAnalogClock@pmy+6,display_drawTriangle@y2
 37163  0016F0  C33C  F075         	movff	DrawAnalogClock@pmy+7,display_drawTriangle@y2+1
 37164  0016F4  0EFF               	movlw	255
 37165  0016F6  0100               	movlb	0	; () banked
 37166  0016F8  6F77               	movwf	(display_drawTriangle@color+1)& (0+255),b
 37167  0016FA  6976               	setf	display_drawTriangle@color& (0+255),b
 37168  0016FC  EC8E  F06C         	call	_display_drawTriangle	;wreg free
 37169                           
 37170                           ;Draw.c: 543: display_drawLine(pmx[1], pmy[1], pmx[2], pmy[2], 0xFFFF);
 37171  001700  C341  F060         	movff	DrawAnalogClock@pmx+2,display_drawLine@x0
 37172  001704  C342  F061         	movff	DrawAnalogClock@pmx+3,display_drawLine@x0+1
 37173  001708  C337  F062         	movff	DrawAnalogClock@pmy+2,display_drawLine@y0
 37174  00170C  C338  F063         	movff	DrawAnalogClock@pmy+3,display_drawLine@y0+1
 37175  001710  C343  F064         	movff	DrawAnalogClock@pmx+4,display_drawLine@x1
 37176  001714  C344  F065         	movff	DrawAnalogClock@pmx+5,display_drawLine@x1+1
 37177  001718  C339  F066         	movff	DrawAnalogClock@pmy+4,display_drawLine@y1
 37178  00171C  C33A  F067         	movff	DrawAnalogClock@pmy+5,display_drawLine@y1+1
 37179  001720  0EFF               	movlw	255
 37180  001722  0100               	movlb	0	; () banked
 37181  001724  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 37182  001726  6968               	setf	display_drawLine@color& (0+255),b
 37183  001728  ECA7  F05C         	call	_display_drawLine	;wreg free
 37184                           
 37185                           ;Draw.c: 544: display_drawLine(pmx[1], pmy[1], pmx[3], pmy[3], 0xFFFF);
 37186  00172C  C341  F060         	movff	DrawAnalogClock@pmx+2,display_drawLine@x0
 37187  001730  C342  F061         	movff	DrawAnalogClock@pmx+3,display_drawLine@x0+1
 37188  001734  C337  F062         	movff	DrawAnalogClock@pmy+2,display_drawLine@y0
 37189  001738  C338  F063         	movff	DrawAnalogClock@pmy+3,display_drawLine@y0+1
 37190  00173C  C345  F064         	movff	DrawAnalogClock@pmx+6,display_drawLine@x1
 37191  001740  C346  F065         	movff	DrawAnalogClock@pmx+7,display_drawLine@x1+1
 37192  001744  C33B  F066         	movff	DrawAnalogClock@pmy+6,display_drawLine@y1
 37193  001748  C33C  F067         	movff	DrawAnalogClock@pmy+7,display_drawLine@y1+1
 37194  00174C  0EFF               	movlw	255
 37195  00174E  0100               	movlb	0	; () banked
 37196  001750  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 37197  001752  6968               	setf	display_drawLine@color& (0+255),b
 37198  001754  ECA7  F05C         	call	_display_drawLine	;wreg free
 37199                           
 37200                           ;Draw.c: 545: display_drawLine(pmx[4], pmy[4], pmx[2], phy[2], 0xFFFF);
 37201  001758  C347  F060         	movff	DrawAnalogClock@pmx+8,display_drawLine@x0
 37202  00175C  C348  F061         	movff	DrawAnalogClock@pmx+9,display_drawLine@x0+1
 37203  001760  C33D  F062         	movff	DrawAnalogClock@pmy+8,display_drawLine@y0
 37204  001764  C33E  F063         	movff	DrawAnalogClock@pmy+9,display_drawLine@y0+1
 37205  001768  C343  F064         	movff	DrawAnalogClock@pmx+4,display_drawLine@x1
 37206  00176C  C344  F065         	movff	DrawAnalogClock@pmx+5,display_drawLine@x1+1
 37207  001770  C34D  F066         	movff	DrawAnalogClock@phy+4,display_drawLine@y1
 37208  001774  C34E  F067         	movff	DrawAnalogClock@phy+5,display_drawLine@y1+1
 37209  001778  0EFF               	movlw	255
 37210  00177A  0100               	movlb	0	; () banked
 37211  00177C  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 37212  00177E  6968               	setf	display_drawLine@color& (0+255),b
 37213  001780  ECA7  F05C         	call	_display_drawLine	;wreg free
 37214                           
 37215                           ;Draw.c: 546: display_drawLine(phx[4], phy[4], phx[3], phy[3], 0xFFFF);
 37216  001784  C35B  F060         	movff	DrawAnalogClock@phx+8,display_drawLine@x0
 37217  001788  C35C  F061         	movff	DrawAnalogClock@phx+9,display_drawLine@x0+1
 37218  00178C  C351  F062         	movff	DrawAnalogClock@phy+8,display_drawLine@y0
 37219  001790  C352  F063         	movff	DrawAnalogClock@phy+9,display_drawLine@y0+1
 37220  001794  C359  F064         	movff	DrawAnalogClock@phx+6,display_drawLine@x1
 37221  001798  C35A  F065         	movff	DrawAnalogClock@phx+7,display_drawLine@x1+1
 37222  00179C  C34F  F066         	movff	DrawAnalogClock@phy+6,display_drawLine@y1
 37223  0017A0  C350  F067         	movff	DrawAnalogClock@phy+7,display_drawLine@y1+1
 37224  0017A4  0EFF               	movlw	255
 37225  0017A6  0100               	movlb	0	; () banked
 37226  0017A8  6F69               	movwf	(display_drawLine@color+1)& (0+255),b
 37227  0017AA  6968               	setf	display_drawLine@color& (0+255),b
 37228  0017AC  ECA7  F05C         	call	_display_drawLine	;wreg free
 37229                           
 37230                           ;Draw.c: 549: display_fillCircle(psx[0], psy[0], 3, scolor);
 37231  0017B0  C32B  F060         	movff	DrawAnalogClock@psx,display_fillCircle@x0
 37232  0017B4  C32C  F061         	movff	DrawAnalogClock@psx+1,display_fillCircle@x0+1
 37233  0017B8  C321  F062         	movff	DrawAnalogClock@psy,display_fillCircle@y0
 37234  0017BC  C322  F063         	movff	DrawAnalogClock@psy+1,display_fillCircle@y0+1
 37235  0017C0  0E00               	movlw	0
 37236  0017C2  0100               	movlb	0	; () banked
 37237  0017C4  6F65               	movwf	(display_fillCircle@r+1)& (0+255),b
 37238  0017C6  0E03               	movlw	3
 37239  0017C8  6F64               	movwf	display_fillCircle@r& (0+255),b
 37240  0017CA  C180  F066         	movff	DrawAnalogClock@scolor,display_fillCircle@color
 37241  0017CE  C181  F067         	movff	DrawAnalogClock@scolor+1,display_fillCircle@color+1
 37242  0017D2  ECA4  F06F         	call	_display_fillCircle	;wreg free
 37243                           
 37244                           ;Draw.c: 550: display_drawLine(psx[1], psy[1], psx[2], psy[2], scolor);
 37245  0017D6  C32D  F060         	movff	DrawAnalogClock@psx+2,display_drawLine@x0
 37246  0017DA  C32E  F061         	movff	DrawAnalogClock@psx+3,display_drawLine@x0+1
 37247  0017DE  C323  F062         	movff	DrawAnalogClock@psy+2,display_drawLine@y0
 37248  0017E2  C324  F063         	movff	DrawAnalogClock@psy+3,display_drawLine@y0+1
 37249  0017E6  C32F  F064         	movff	DrawAnalogClock@psx+4,display_drawLine@x1
 37250  0017EA  C330  F065         	movff	DrawAnalogClock@psx+5,display_drawLine@x1+1
 37251  0017EE  C325  F066         	movff	DrawAnalogClock@psy+4,display_drawLine@y1
 37252  0017F2  C326  F067         	movff	DrawAnalogClock@psy+5,display_drawLine@y1+1
 37253  0017F6  C180  F068         	movff	DrawAnalogClock@scolor,display_drawLine@color
 37254  0017FA  C181  F069         	movff	DrawAnalogClock@scolor+1,display_drawLine@color+1
 37255  0017FE  ECA7  F05C         	call	_display_drawLine	;wreg free
 37256                           
 37257                           ;Draw.c: 552: display_drawLine(psx[0], psy[0], psx[3], psy[3], scolor);
 37258  001802  C32B  F060         	movff	DrawAnalogClock@psx,display_drawLine@x0
 37259  001806  C32C  F061         	movff	DrawAnalogClock@psx+1,display_drawLine@x0+1
 37260  00180A  C321  F062         	movff	DrawAnalogClock@psy,display_drawLine@y0
 37261  00180E  C322  F063         	movff	DrawAnalogClock@psy+1,display_drawLine@y0+1
 37262  001812  C331  F064         	movff	DrawAnalogClock@psx+6,display_drawLine@x1
 37263  001816  C332  F065         	movff	DrawAnalogClock@psx+7,display_drawLine@x1+1
 37264  00181A  C327  F066         	movff	DrawAnalogClock@psy+6,display_drawLine@y1
 37265  00181E  C328  F067         	movff	DrawAnalogClock@psy+7,display_drawLine@y1+1
 37266  001822  C180  F068         	movff	DrawAnalogClock@scolor,display_drawLine@color
 37267  001826  C181  F069         	movff	DrawAnalogClock@scolor+1,display_drawLine@color+1
 37268  00182A  ECA7  F05C         	call	_display_drawLine	;wreg free
 37269                           
 37270                           ;Draw.c: 553: display_drawLine(psx[0], psy[0], psx[4], psy[4], scolor);
 37271  00182E  C32B  F060         	movff	DrawAnalogClock@psx,display_drawLine@x0
 37272  001832  C32C  F061         	movff	DrawAnalogClock@psx+1,display_drawLine@x0+1
 37273  001836  C321  F062         	movff	DrawAnalogClock@psy,display_drawLine@y0
 37274  00183A  C322  F063         	movff	DrawAnalogClock@psy+1,display_drawLine@y0+1
 37275  00183E  C333  F064         	movff	DrawAnalogClock@psx+8,display_drawLine@x1
 37276  001842  C334  F065         	movff	DrawAnalogClock@psx+9,display_drawLine@x1+1
 37277  001846  C329  F066         	movff	DrawAnalogClock@psy+8,display_drawLine@y1
 37278  00184A  C32A  F067         	movff	DrawAnalogClock@psy+9,display_drawLine@y1+1
 37279  00184E  C180  F068         	movff	DrawAnalogClock@scolor,display_drawLine@color
 37280  001852  C181  F069         	movff	DrawAnalogClock@scolor+1,display_drawLine@color+1
 37281  001856  ECA7  F05C         	call	_display_drawLine	;wreg free
 37282                           
 37283                           ;Draw.c: 555: FirstDraw = 0;
 37284  00185A  0E00               	movlw	0
 37285  00185C  0103               	movlb	3	; () banked
 37286  00185E  6FF8               	movwf	_FirstDraw& (0+255),b
 37287                           
 37288                           ; BSR set to: 3
 37289  001860  0012               	return		;funcret
 37290  001862                     __end_of_DrawAnalogClock:
 37291                           	callstack 0
 37292                           
 37293 ;; *************** function _sprintf *****************
 37294 ;; Defined at:
 37295 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\doprnt.c"
 37296 ;; Parameters:    Size  Location     Type
 37297 ;;  sp              2   41[COMRAM] PTR unsigned char 
 37298 ;;		 -> drawTempHumidity@str2(50), drawTempHumidity@str1(50), drawDateTime@str(100), drawAlarmTime@str(100), 
 37299 ;;		 -> DrawSmallCalendar@str(5), DrawBigCalendar@str(5), DrawAnalogClock@str(3), TouchAdjMsg@str(100), 
 37300 ;;		 -> DrawSetBox@str(100), NormalProc@str(100), 
 37301 ;;  f               2   43[COMRAM] PTR const unsigned char 
 37302 ;;		 -> STR_33(6), STR_32(9), STR_31(21), STR_30(15), 
 37303 ;;		 -> STR_29(15), STR_28(20), STR_27(20), STR_26(4), 
 37304 ;;		 -> STR_25(3), STR_24(3), STR_23(4), STR_22(3), 
 37305 ;;		 -> STR_21(3), STR_20(3), STR_19(3), STR_18(3), 
 37306 ;;		 -> STR_17(27), STR_16(22), STR_14(5), STR_13(5), 
 37307 ;;		 -> STR_12(7), STR_11(21), STR_9(24), 
 37308 ;; Auto vars:     Size  Location     Type
 37309 ;;  idx             1    0[BANK0 ] unsigned char 
 37310 ;;  tmpval          4    0        struct .
 37311 ;;  width           2   10[BANK0 ] int 
 37312 ;;  val             2    7[BANK0 ] unsigned int 
 37313 ;;  len             2    4[BANK0 ] unsigned int 
 37314 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 37315 ;;		 -> STR_34(7), sprintf@c(1), ?_sprintf(2), drawAlarmTime@ampm(6), 
 37316 ;;  c               1   12[BANK0 ] unsigned char 
 37317 ;;  flag            1    9[BANK0 ] unsigned char 
 37318 ;;  ap              1    6[BANK0 ] PTR void [1]
 37319 ;;		 -> ?_sprintf(2), 
 37320 ;;  prec            1    1[BANK0 ] char 
 37321 ;; Return value:  Size  Location     Type
 37322 ;;                  2   41[COMRAM] int 
 37323 ;; Registers used:
 37324 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 37325 ;; Tracked objects:
 37326 ;;		On entry : 0/0
 37327 ;;		On exit  : 3F/0
 37328 ;;		Unchanged: 0/0
 37329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37330 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37331 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37332 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37333 ;;      Totals:        20      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37334 ;;Total ram usage:       33 bytes
 37335 ;; Hardware stack levels used:    1
 37336 ;; Hardware stack levels required when called:    7
 37337 ;; This function calls:
 37338 ;;		___lwdiv
 37339 ;;		___lwmod
 37340 ;;		___wmul
 37341 ;;		_isdigit
 37342 ;; This function is called by:
 37343 ;;		_NormalProc
 37344 ;;		_DrawSetBox
 37345 ;;		_TouchAdjMsg
 37346 ;;		_DrawAnalogClock
 37347 ;;		_DrawBigCalendar
 37348 ;;		_DrawSmallCalendar
 37349 ;;		_drawAlarmTime
 37350 ;;		_drawDateTime
 37351 ;;		_drawTempHumidity
 37352 ;; This function uses a non-reentrant model
 37353 ;;
 37354                           
 37355                           	psect	text120
 37356  0051A0                     __ptext120:
 37357                           	callstack 0
 37358  0051A0                     _sprintf:
 37359                           	callstack 21
 37360                           
 37361                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
 37362                           
 37363                           ; BSR set to: 3
 37364                           ;incstack = 0
 37365  0051A0  0E2E               	movlw	low (?_sprintf+4)
 37366  0051A2  0100               	movlb	0	; () banked
 37367  0051A4  6F66               	movwf	sprintf@ap& (0+255),b
 37368                           
 37369                           ;doprnt.c: 553: while((c = *f++)) {
 37370  0051A6  D231               	goto	u22750
 37371  0051A8                     l20457:
 37372                           
 37373                           ; BSR set to: 0
 37374                           ;doprnt.c: 555: if(c != '%')
 37375  0051A8  0E25               	movlw	37
 37376  0051AA  196C               	xorwf	sprintf@c& (0+255),w,b
 37377  0051AC  B4D8               	btfsc	status,2,c
 37378  0051AE  D009               	goto	l20463
 37379                           
 37380                           ; BSR set to: 0
 37381                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
 37382  0051B0  C02A  FFD9         	movff	sprintf@sp,fsr2l
 37383  0051B4  C02B  FFDA         	movff	sprintf@sp+1,fsr2h
 37384  0051B8  C06C  FFDF         	movff	sprintf@c,indf2
 37385                           
 37386                           ; BSR set to: 0
 37387  0051BC  4A2A               	infsnz	sprintf@sp^0,f,c
 37388  0051BE  2A2B               	incf	(sprintf@sp+1)^0,f,c
 37389                           
 37390                           ;doprnt.c: 559: continue;
 37391  0051C0  D224               	goto	u22750
 37392  0051C2                     l20463:
 37393                           
 37394                           ; BSR set to: 0
 37395                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
 37396  0051C2  0E00               	movlw	0
 37397  0051C4  6F6B               	movwf	(sprintf@width+1)& (0+255),b
 37398  0051C6  0E00               	movlw	0
 37399  0051C8  6F6A               	movwf	sprintf@width& (0+255),b
 37400                           
 37401                           ;doprnt.c: 565: flag = 0;
 37402  0051CA  0E00               	movlw	0
 37403  0051CC  6F69               	movwf	sprintf@flag& (0+255),b
 37404  0051CE  D003               	goto	l20469
 37405  0051D0                     l20465:
 37406                           
 37407                           ; BSR set to: 0
 37408                           ;doprnt.c: 597: flag |= 0x04;
 37409  0051D0  8569               	bsf	sprintf@flag& (0+255),2,b
 37410                           
 37411                           ;doprnt.c: 598: f++;
 37412  0051D2  4A2C               	infsnz	sprintf@f^0,f,c
 37413  0051D4  2A2D               	incf	(sprintf@f+1)^0,f,c
 37414  0051D6                     l20469:
 37415                           
 37416                           ; BSR set to: 0
 37417  0051D6  C02C  FFF6         	movff	sprintf@f,tblptrl
 37418  0051DA  C02D  FFF7         	movff	sprintf@f+1,tblptrh
 37419  0051DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 37420  0051DE  6AF8               	clrf	tblptru,c
 37421  0051E0                     	endif
 37422  0051E0                     	if	0	;tblptru may be non-zero
 37423  0051E0                     	endif
 37424  0051E0  0008               	tblrd		*
 37425  0051E2  50F5               	movf	tablat,w,c
 37426                           
 37427                           ; Switch size 1, requested type "simple"
 37428                           ; Number of cases is 1, Range of values is 48 to 48
 37429                           ; switch strategies available:
 37430                           ; Name         Instructions Cycles
 37431                           ; simple_byte            4     3 (average)
 37432                           ;	Chosen strategy is simple_byte
 37433  0051E4  0A30               	xorlw	48	; case 48
 37434  0051E6  B4D8               	btfsc	status,2,c
 37435  0051E8  D7F3               	goto	l20465
 37436                           
 37437                           ; BSR set to: 0
 37438                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
 37439  0051EA  C02C  FFF6         	movff	sprintf@f,tblptrl
 37440  0051EE  C02D  FFF7         	movff	sprintf@f+1,tblptrh
 37441  0051F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 37442  0051F2  6AF8               	clrf	tblptru,c
 37443  0051F4                     	endif
 37444  0051F4                     	if	0	;tblptru may be non-zero
 37445  0051F4                     	endif
 37446  0051F4  0008               	tblrd		*
 37447  0051F6  50F5               	movf	tablat,w,c
 37448  0051F8  ECDA  F079         	call	_isdigit
 37449  0051FC  A0D8               	btfss	status,0,c
 37450  0051FE  D0C1               	goto	l20529
 37451                           
 37452                           ;doprnt.c: 615: width = 0;
 37453  005200  0E00               	movlw	0
 37454  005202  0100               	movlb	0	; () banked
 37455  005204  6F6B               	movwf	(sprintf@width+1)& (0+255),b
 37456  005206  0E00               	movlw	0
 37457  005208  6F6A               	movwf	sprintf@width& (0+255),b
 37458  00520A                     l20475:
 37459                           
 37460                           ;doprnt.c: 617: width *= 10;
 37461  00520A  C06A  F01D         	movff	sprintf@width,___wmul@multiplier
 37462  00520E  C06B  F01E         	movff	sprintf@width+1,___wmul@multiplier+1
 37463  005212  0E00               	movlw	0
 37464  005214  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 37465  005216  0E0A               	movlw	10
 37466  005218  6E1F               	movwf	___wmul@multiplicand^0,c
 37467  00521A  EC12  F079         	call	___wmul	;wreg free
 37468  00521E  C01D  F06A         	movff	?___wmul,sprintf@width
 37469  005222  C01E  F06B         	movff	?___wmul+1,sprintf@width+1
 37470                           
 37471                           ;doprnt.c: 618: width += *f++ - '0';
 37472  005226  0ED0               	movlw	208
 37473  005228  6E3A               	movwf	??_sprintf^0,c
 37474  00522A  0EFF               	movlw	255
 37475  00522C  6E3B               	movwf	(??_sprintf+1)^0,c
 37476  00522E  C02C  FFF6         	movff	sprintf@f,tblptrl
 37477  005232  C02D  FFF7         	movff	sprintf@f+1,tblptrh
 37478  005236                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 37479  005236  6AF8               	clrf	tblptru,c
 37480  005238                     	endif
 37481  005238                     	if	0	;tblptru may be non-zero
 37482  005238                     	endif
 37483  005238  0008               	tblrd		*
 37484  00523A  50F5               	movf	tablat,w,c
 37485  00523C  6E3C               	movwf	(??_sprintf+2)^0,c
 37486  00523E  6A3D               	clrf	(??_sprintf+3)^0,c
 37487  005240  503A               	movf	??_sprintf^0,w,c
 37488  005242  263C               	addwf	(??_sprintf+2)^0,f,c
 37489  005244  503B               	movf	(??_sprintf+1)^0,w,c
 37490  005246  223D               	addwfc	(??_sprintf+3)^0,f,c
 37491  005248  503C               	movf	(??_sprintf+2)^0,w,c
 37492  00524A  0100               	movlb	0	; () banked
 37493  00524C  276A               	addwf	sprintf@width& (0+255),f,b
 37494  00524E  503D               	movf	(??_sprintf+3)^0,w,c
 37495  005250  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
 37496                           
 37497                           ; BSR set to: 0
 37498  005252  4A2C               	infsnz	sprintf@f^0,f,c
 37499  005254  2A2D               	incf	(sprintf@f+1)^0,f,c
 37500                           
 37501                           ; BSR set to: 0
 37502                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
 37503  005256  C02C  FFF6         	movff	sprintf@f,tblptrl
 37504  00525A  C02D  FFF7         	movff	sprintf@f+1,tblptrh
 37505  00525E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 37506  00525E  6AF8               	clrf	tblptru,c
 37507  005260                     	endif
 37508  005260                     	if	0	;tblptru may be non-zero
 37509  005260                     	endif
 37510  005260  0008               	tblrd		*
 37511  005262  50F5               	movf	tablat,w,c
 37512  005264  ECDA  F079         	call	_isdigit
 37513  005268  A0D8               	btfss	status,0,c
 37514  00526A  D08B               	goto	l20529
 37515  00526C  D7CE               	goto	l20475
 37516  00526E                     l20483:
 37517                           
 37518                           ; BSR set to: 0
 37519                           ;doprnt.c: 747: flag |= 0x80;
 37520  00526E  8F69               	bsf	sprintf@flag& (0+255),7,b
 37521                           
 37522                           ;doprnt.c: 749: break;
 37523  005270  D0A7               	goto	l3592
 37524  005272                     l20485:
 37525                           
 37526                           ; BSR set to: 0
 37527                           ;doprnt.c: 760: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 37528  005272  5166               	movf	sprintf@ap& (0+255),w,b
 37529  005274  6ED9               	movwf	fsr2l,c
 37530  005276  6ADA               	clrf	fsr2h,c
 37531  005278  CFDE F062          	movff	postinc2,sprintf@cp
 37532  00527C  CFDD F063          	movff	postdec2,sprintf@cp+1
 37533                           
 37534                           ; BSR set to: 0
 37535  005280  0E02               	movlw	2
 37536  005282  2766               	addwf	sprintf@ap& (0+255),f,b
 37537                           
 37538                           ; BSR set to: 0
 37539                           ;doprnt.c: 766: if(!cp)
 37540  005284  5162               	movf	sprintf@cp& (0+255),w,b
 37541  005286  1163               	iorwf	(sprintf@cp+1)& (0+255),w,b
 37542  005288  A4D8               	btfss	status,2,c
 37543  00528A  D004               	goto	l20493
 37544                           
 37545                           ; BSR set to: 0
 37546                           ;doprnt.c: 767: cp = "(null)";
 37547  00528C  0EC6               	movlw	low STR_34
 37548  00528E  6F62               	movwf	sprintf@cp& (0+255),b
 37549  005290  0EFF               	movlw	high STR_34
 37550  005292  6F63               	movwf	(sprintf@cp+1)& (0+255),b
 37551  005294                     l20493:
 37552                           
 37553                           ; BSR set to: 0
 37554                           ;doprnt.c: 771: len = 0;
 37555  005294  0E00               	movlw	0
 37556  005296  6F65               	movwf	(sprintf@len+1)& (0+255),b
 37557  005298  0E00               	movlw	0
 37558  00529A  6F64               	movwf	sprintf@len& (0+255),b
 37559                           
 37560                           ;doprnt.c: 772: while(cp[len])
 37561  00529C  D003               	goto	l20497
 37562  00529E                     l20495:
 37563                           
 37564                           ;doprnt.c: 773: len++;
 37565  00529E  0100               	movlb	0	; () banked
 37566  0052A0  4B64               	infsnz	sprintf@len& (0+255),f,b
 37567  0052A2  2B65               	incf	(sprintf@len+1)& (0+255),f,b
 37568  0052A4                     l20497:
 37569                           
 37570                           ; BSR set to: 0
 37571  0052A4  5164               	movf	sprintf@len& (0+255),w,b
 37572  0052A6  2562               	addwf	sprintf@cp& (0+255),w,b
 37573  0052A8  6E3A               	movwf	??_sprintf^0,c
 37574  0052AA  5165               	movf	(sprintf@len+1)& (0+255),w,b
 37575  0052AC  2163               	addwfc	(sprintf@cp+1)& (0+255),w,b
 37576  0052AE  6E3B               	movwf	(??_sprintf+1)^0,c
 37577  0052B0  C03A  FFF6         	movff	??_sprintf,tblptrl
 37578  0052B4  C03B  FFF7         	movff	??_sprintf+1,tblptrh
 37579  0052B8  0E00               	movlw	low (__mediumconst shr (0+16))
 37580  0052BA  6EF8               	movwf	tblptru,c
 37581  0052BC  0E0F               	movlw	(high __ramtop+-1)
 37582  0052BE  64F7               	cpfsgt	tblptrh,c
 37583  0052C0  D003               	bra	u22537
 37584  0052C2  0008               	tblrd		*
 37585  0052C4  50F5               	movf	tablat,w,c
 37586  0052C6  D005               	bra	u22530
 37587  0052C8                     u22537:
 37588  0052C8  CFF6 FFE9          	movff	tblptrl,fsr0l
 37589  0052CC  CFF7 FFEA          	movff	tblptrh,fsr0h
 37590  0052D0  50EF               	movf	indf0,w,c
 37591  0052D2                     u22530:
 37592  0052D2  0900               	iorlw	0
 37593  0052D4  A4D8               	btfss	status,2,c
 37594  0052D6  D7E3               	goto	l20495
 37595  0052D8                     u22540:
 37596                           
 37597                           ;doprnt.c: 783: if(((unsigned)width) > len)
 37598  0052D8  0100               	movlb	0	; () banked
 37599  0052DA  516A               	movf	sprintf@width& (0+255),w,b
 37600  0052DC  5D64               	subwf	sprintf@len& (0+255),w,b
 37601  0052DE  516B               	movf	(sprintf@width+1)& (0+255),w,b
 37602  0052E0  5965               	subwfb	(sprintf@len+1)& (0+255),w,b
 37603  0052E2  B0D8               	btfsc	status,0,c
 37604  0052E4  D005               	goto	l20503
 37605                           
 37606                           ; BSR set to: 0
 37607                           ;doprnt.c: 784: width -= len;
 37608  0052E6  5164               	movf	sprintf@len& (0+255),w,b
 37609  0052E8  5F6A               	subwf	sprintf@width& (0+255),f,b
 37610  0052EA  5165               	movf	(sprintf@len+1)& (0+255),w,b
 37611  0052EC  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
 37612  0052EE  D00D               	goto	l20509
 37613  0052F0                     l20503:
 37614                           
 37615                           ; BSR set to: 0
 37616                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
 37617  0052F0  0E00               	movlw	0
 37618  0052F2  6F6B               	movwf	(sprintf@width+1)& (0+255),b
 37619  0052F4  0E00               	movlw	0
 37620  0052F6  6F6A               	movwf	sprintf@width& (0+255),b
 37621  0052F8  D008               	goto	l20509
 37622  0052FA                     l20505:
 37623                           
 37624                           ; BSR set to: 0
 37625                           ;doprnt.c: 791: ((*sp++ = (' ')));
 37626  0052FA  C02A  FFD9         	movff	sprintf@sp,fsr2l
 37627  0052FE  C02B  FFDA         	movff	sprintf@sp+1,fsr2h
 37628  005302  0E20               	movlw	32
 37629  005304  6EDF               	movwf	indf2,c
 37630                           
 37631                           ; BSR set to: 0
 37632  005306  4A2A               	infsnz	sprintf@sp^0,f,c
 37633  005308  2A2B               	incf	(sprintf@sp+1)^0,f,c
 37634  00530A                     l20509:
 37635                           
 37636                           ; BSR set to: 0
 37637  00530A  076A               	decf	sprintf@width& (0+255),f,b
 37638  00530C  A0D8               	btfss	status,0,c
 37639  00530E  076B               	decf	(sprintf@width+1)& (0+255),f,b
 37640  005310  296A               	incf	sprintf@width& (0+255),w,b
 37641  005312  E1F3               	bnz	l20505
 37642  005314  296B               	incf	(sprintf@width+1)& (0+255),w,b
 37643  005316  B4D8               	btfsc	status,2,c
 37644  005318  D01C               	goto	l20517
 37645  00531A  D7EF               	goto	l20505
 37646  00531C                     l20511:
 37647                           
 37648                           ; BSR set to: 0
 37649                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
 37650  00531C  C062  FFF6         	movff	sprintf@cp,tblptrl
 37651  005320  C063  FFF7         	movff	sprintf@cp+1,tblptrh
 37652  005324  0E00               	movlw	low (__mediumconst shr (0+16))
 37653  005326  6EF8               	movwf	tblptru,c
 37654  005328  C02A  FFD9         	movff	sprintf@sp,fsr2l
 37655  00532C  C02B  FFDA         	movff	sprintf@sp+1,fsr2h
 37656  005330  0E0F               	movlw	(high __ramtop+-1)
 37657  005332  64F7               	cpfsgt	tblptrh,c
 37658  005334  D003               	bra	u22577
 37659  005336  0008               	tblrd		*
 37660  005338  50F5               	movf	tablat,w,c
 37661  00533A  D005               	bra	u22570
 37662  00533C                     u22577:
 37663  00533C  CFF6 FFE9          	movff	tblptrl,fsr0l
 37664  005340  CFF7 FFEA          	movff	tblptrh,fsr0h
 37665  005344  50EF               	movf	indf0,w,c
 37666  005346                     u22570:
 37667  005346  6EDF               	movwf	indf2,c
 37668  005348  0100               	movlb	0	; () banked
 37669  00534A  4B62               	infsnz	sprintf@cp& (0+255),f,b
 37670  00534C  2B63               	incf	(sprintf@cp+1)& (0+255),f,b
 37671                           
 37672                           ; BSR set to: 0
 37673  00534E  4A2A               	infsnz	sprintf@sp^0,f,c
 37674  005350  2A2B               	incf	(sprintf@sp+1)^0,f,c
 37675  005352                     l20517:
 37676                           
 37677                           ; BSR set to: 0
 37678  005352  0764               	decf	sprintf@len& (0+255),f,b
 37679  005354  A0D8               	btfss	status,0,c
 37680  005356  0765               	decf	(sprintf@len+1)& (0+255),f,b
 37681  005358  2964               	incf	sprintf@len& (0+255),w,b
 37682  00535A  E1E0               	bnz	l20511
 37683  00535C  2965               	incf	(sprintf@len+1)& (0+255),w,b
 37684  00535E  B4D8               	btfsc	status,2,c
 37685  005360  D154               	goto	u22750
 37686  005362  D7DC               	goto	l20511
 37687  005364                     l20519:
 37688                           
 37689                           ; BSR set to: 0
 37690                           ;doprnt.c: 825: c = (char)(*(int *)__va_arg((*(int **)ap), (int)0));
 37691  005364  5166               	movf	sprintf@ap& (0+255),w,b
 37692  005366  6ED9               	movwf	fsr2l,c
 37693  005368  6ADA               	clrf	fsr2h,c
 37694  00536A  50DF               	movf	indf2,w,c
 37695  00536C  6F6C               	movwf	sprintf@c& (0+255),b
 37696                           
 37697                           ; BSR set to: 0
 37698  00536E  0E02               	movlw	2
 37699  005370  2766               	addwf	sprintf@ap& (0+255),f,b
 37700  005372                     l20523:
 37701                           
 37702                           ; BSR set to: 0
 37703                           ;doprnt.c: 831: cp = (char *)&c;
 37704  005372  0E6C               	movlw	low sprintf@c
 37705  005374  6F62               	movwf	sprintf@cp& (0+255),b
 37706  005376  6B63               	clrf	(sprintf@cp+1)& (0+255),b
 37707                           
 37708                           ; BSR set to: 0
 37709                           ;doprnt.c: 832: len = 1;
 37710  005378  0E00               	movlw	0
 37711  00537A  6F65               	movwf	(sprintf@len+1)& (0+255),b
 37712  00537C  0E01               	movlw	1
 37713  00537E  6F64               	movwf	sprintf@len& (0+255),b
 37714                           
 37715                           ;doprnt.c: 833: goto dostring;
 37716  005380  D7AB               	goto	u22540
 37717  005382                     l20529:
 37718  005382  C02C  FFF6         	movff	sprintf@f,tblptrl
 37719  005386  C02D  FFF7         	movff	sprintf@f+1,tblptrh
 37720  00538A  4A2C               	infsnz	sprintf@f^0,f,c
 37721  00538C  2A2D               	incf	(sprintf@f+1)^0,f,c
 37722  00538E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 37723  00538E  6AF8               	clrf	tblptru,c
 37724  005390                     	endif
 37725  005390                     	if	0	;tblptru may be non-zero
 37726  005390                     	endif
 37727  005390  0008               	tblrd		*
 37728  005392  CFF5 F06C          	movff	tablat,sprintf@c
 37729  005396  0100               	movlb	0	; () banked
 37730  005398  516C               	movf	sprintf@c& (0+255),w,b
 37731                           
 37732                           ; Switch size 1, requested type "simple"
 37733                           ; Number of cases is 6, Range of values is 0 to 120
 37734                           ; switch strategies available:
 37735                           ; Name         Instructions Cycles
 37736                           ; simple_byte           19    10 (average)
 37737                           ;	Chosen strategy is simple_byte
 37738  00539A  0A00               	xorlw	0	; case 0
 37739  00539C  B4D8               	btfsc	status,2,c
 37740  00539E  D142               	goto	u22760
 37741  0053A0  0A63               	xorlw	99	; case 99
 37742  0053A2  B4D8               	btfsc	status,2,c
 37743  0053A4  D7DF               	goto	l20519
 37744  0053A6  0A07               	xorlw	7	; case 100
 37745  0053A8  B4D8               	btfsc	status,2,c
 37746  0053AA  D00A               	goto	l3592
 37747  0053AC  0A0D               	xorlw	13	; case 105
 37748  0053AE  B4D8               	btfsc	status,2,c
 37749  0053B0  D007               	goto	l3592
 37750  0053B2  0A1A               	xorlw	26	; case 115
 37751  0053B4  B4D8               	btfsc	status,2,c
 37752  0053B6  D75D               	goto	l20485
 37753  0053B8  0A0B               	xorlw	11	; case 120
 37754  0053BA  B4D8               	btfsc	status,2,c
 37755  0053BC  D758               	goto	l20483
 37756  0053BE  D7D9               	goto	l20523
 37757  0053C0                     l3592:
 37758                           
 37759                           ; BSR set to: 0
 37760                           ;doprnt.c: 1277: if((flag & 0x80) == 0x00)
 37761  0053C0  BF69               	btfsc	sprintf@flag& (0+255),7,b
 37762  0053C2  D012               	goto	l20541
 37763                           
 37764                           ; BSR set to: 0
 37765                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
 37766  0053C4  5166               	movf	sprintf@ap& (0+255),w,b
 37767  0053C6  6ED9               	movwf	fsr2l,c
 37768  0053C8  6ADA               	clrf	fsr2h,c
 37769  0053CA  CFDE F067          	movff	postinc2,sprintf@val
 37770  0053CE  CFDD F068          	movff	postdec2,sprintf@val+1
 37771                           
 37772                           ; BSR set to: 0
 37773  0053D2  0E02               	movlw	2
 37774  0053D4  2766               	addwf	sprintf@ap& (0+255),f,b
 37775                           
 37776                           ; BSR set to: 0
 37777                           ;doprnt.c: 1287: if((int)val < 0) {
 37778  0053D6  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
 37779  0053D8  D047               	goto	l20575
 37780                           
 37781                           ; BSR set to: 0
 37782                           ;doprnt.c: 1288: flag |= 0x03;
 37783  0053DA  0E03               	movlw	3
 37784  0053DC  1369               	iorwf	sprintf@flag& (0+255),f,b
 37785                           
 37786                           ; BSR set to: 0
 37787                           ;doprnt.c: 1289: val = -val;
 37788  0053DE  6D67               	negf	sprintf@val& (0+255),b
 37789  0053E0  1F68               	comf	(sprintf@val+1)& (0+255),f,b
 37790  0053E2  B0D8               	btfsc	status,0,c
 37791  0053E4  2B68               	incf	(sprintf@val+1)& (0+255),f,b
 37792  0053E6  D040               	goto	l20575
 37793  0053E8                     l20541:
 37794                           
 37795                           ; BSR set to: 0
 37796                           ;doprnt.c: 1294: else;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
 37797  0053E8  5166               	movf	sprintf@ap& (0+255),w,b
 37798  0053EA  6ED9               	movwf	fsr2l,c
 37799  0053EC  6ADA               	clrf	fsr2h,c
 37800  0053EE  CFDE F067          	movff	postinc2,sprintf@val
 37801  0053F2  CFDD F068          	movff	postdec2,sprintf@val+1
 37802                           
 37803                           ; BSR set to: 0
 37804  0053F6  0E02               	movlw	2
 37805  0053F8  2766               	addwf	sprintf@ap& (0+255),f,b
 37806  0053FA  D036               	goto	l20575
 37807  0053FC                     l20545:
 37808                           
 37809                           ; BSR set to: 0
 37810                           ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 37811  0053FC  0E01               	movlw	1
 37812  0053FE  6F6C               	movwf	sprintf@c& (0+255),b
 37813  005400                     l20547:
 37814                           
 37815                           ; BSR set to: 0
 37816  005400  0E05               	movlw	5
 37817  005402  196C               	xorwf	sprintf@c& (0+255),w,b
 37818  005404  B4D8               	btfsc	status,2,c
 37819  005406  D038               	goto	l20577
 37820                           
 37821                           ; BSR set to: 0
 37822                           ;doprnt.c: 1332: if(val < dpowers[c])
 37823  005408  516C               	movf	sprintf@c& (0+255),w,b
 37824  00540A  0D02               	mullw	2
 37825  00540C  0EAF               	movlw	low _dpowers
 37826  00540E  24F3               	addwf	243,w,c
 37827  005410  6EF6               	movwf	tblptrl,c
 37828  005412  0EFA               	movlw	high _dpowers
 37829  005414  20F4               	addwfc	244,w,c
 37830  005416  6EF7               	movwf	tblptrh,c
 37831  005418                     	if	1	;There are 3 active tblptr bytes
 37832  005418  6AF8               	clrf	tblptru,c
 37833  00541A  0E00               	movlw	low (__mediumconst shr (0+16))
 37834  00541C  22F8               	addwfc	tblptru,f,c
 37835  00541E                     	endif
 37836  00541E  0009               	tblrd		*+
 37837  005420  50F5               	movf	tablat,w,c
 37838  005422  5D67               	subwf	sprintf@val& (0+255),w,b
 37839  005424  0009               	tblrd		*+
 37840  005426  50F5               	movf	tablat,w,c
 37841  005428  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
 37842  00542A  A0D8               	btfss	status,0,c
 37843  00542C  D025               	goto	l20577
 37844                           
 37845                           ; BSR set to: 0
 37846  00542E  2B6C               	incf	sprintf@c& (0+255),f,b
 37847  005430  D7E7               	goto	l20547
 37848  005432                     l20559:
 37849                           
 37850                           ; BSR set to: 0
 37851                           ;doprnt.c: 1342: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 37852  005432  0E01               	movlw	1
 37853  005434  6F6C               	movwf	sprintf@c& (0+255),b
 37854  005436                     l20561:
 37855                           
 37856                           ; BSR set to: 0
 37857  005436  0E04               	movlw	4
 37858  005438  196C               	xorwf	sprintf@c& (0+255),w,b
 37859  00543A  B4D8               	btfsc	status,2,c
 37860  00543C  D01D               	goto	l20577
 37861                           
 37862                           ; BSR set to: 0
 37863                           ;doprnt.c: 1343: if(val < hexpowers[c])
 37864  00543E  516C               	movf	sprintf@c& (0+255),w,b
 37865  005440  0D02               	mullw	2
 37866  005442  0ECD               	movlw	low _hexpowers
 37867  005444  24F3               	addwf	243,w,c
 37868  005446  6EF6               	movwf	tblptrl,c
 37869  005448  0EFA               	movlw	high _hexpowers
 37870  00544A  20F4               	addwfc	244,w,c
 37871  00544C  6EF7               	movwf	tblptrh,c
 37872  00544E                     	if	1	;There are 3 active tblptr bytes
 37873  00544E  6AF8               	clrf	tblptru,c
 37874  005450  0E00               	movlw	low (__mediumconst shr (0+16))
 37875  005452  22F8               	addwfc	tblptru,f,c
 37876  005454                     	endif
 37877  005454  0009               	tblrd		*+
 37878  005456  50F5               	movf	tablat,w,c
 37879  005458  5D67               	subwf	sprintf@val& (0+255),w,b
 37880  00545A  0009               	tblrd		*+
 37881  00545C  50F5               	movf	tablat,w,c
 37882  00545E  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
 37883  005460  A0D8               	btfss	status,0,c
 37884  005462  D00A               	goto	l20577
 37885                           
 37886                           ; BSR set to: 0
 37887  005464  2B6C               	incf	sprintf@c& (0+255),f,b
 37888  005466  D7E7               	goto	l20561
 37889  005468                     l20575:
 37890                           
 37891                           ; BSR set to: 0
 37892  005468  5169               	movf	sprintf@flag& (0+255),w,b
 37893  00546A  0B80               	andlw	128
 37894                           
 37895                           ; Switch size 1, requested type "simple"
 37896                           ; Number of cases is 2, Range of values is 0 to 128
 37897                           ; switch strategies available:
 37898                           ; Name         Instructions Cycles
 37899                           ; simple_byte            7     4 (average)
 37900                           ;	Chosen strategy is simple_byte
 37901  00546C  0A00               	xorlw	0	; case 0
 37902  00546E  B4D8               	btfsc	status,2,c
 37903  005470  D7C5               	goto	l20545
 37904  005472  0A80               	xorlw	128	; case 128
 37905  005474  B4D8               	btfsc	status,2,c
 37906  005476  D7DD               	goto	l20559
 37907  005478                     l20577:
 37908                           
 37909                           ; BSR set to: 0
 37910                           ;doprnt.c: 1371: if(width && flag & 0x03)
 37911  005478  516A               	movf	sprintf@width& (0+255),w,b
 37912  00547A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
 37913  00547C  B4D8               	btfsc	status,2,c
 37914  00547E  D009               	goto	l20583
 37915                           
 37916                           ; BSR set to: 0
 37917  005480  C069  F03A         	movff	sprintf@flag,??_sprintf
 37918  005484  0E03               	movlw	3
 37919  005486  163A               	andwf	??_sprintf^0,f,c
 37920  005488  B4D8               	btfsc	status,2,c
 37921  00548A  D003               	goto	l20583
 37922                           
 37923                           ; BSR set to: 0
 37924                           ;doprnt.c: 1372: width--;
 37925  00548C  076A               	decf	sprintf@width& (0+255),f,b
 37926  00548E  A0D8               	btfss	status,0,c
 37927  005490  076B               	decf	(sprintf@width+1)& (0+255),f,b
 37928  005492                     l20583:
 37929                           
 37930                           ; BSR set to: 0
 37931                           ;doprnt.c: 1407: if(width > c)
 37932  005492  516C               	movf	sprintf@c& (0+255),w,b
 37933  005494  6E3A               	movwf	??_sprintf^0,c
 37934  005496  6A3B               	clrf	(??_sprintf+1)^0,c
 37935  005498  516A               	movf	sprintf@width& (0+255),w,b
 37936  00549A  5C3A               	subwf	??_sprintf^0,w,c
 37937  00549C  503B               	movf	(??_sprintf+1)^0,w,c
 37938  00549E  0A80               	xorlw	128
 37939  0054A0  6E3C               	movwf	(??_sprintf+2)^0,c
 37940  0054A2  516B               	movf	(sprintf@width+1)& (0+255),w,b
 37941  0054A4  0A80               	xorlw	128
 37942  0054A6  583C               	subwfb	(??_sprintf+2)^0,w,c
 37943  0054A8  B0D8               	btfsc	status,0,c
 37944  0054AA  D005               	goto	l20587
 37945                           
 37946                           ; BSR set to: 0
 37947                           ;doprnt.c: 1408: width -= c;
 37948  0054AC  516C               	movf	sprintf@c& (0+255),w,b
 37949  0054AE  5F6A               	subwf	sprintf@width& (0+255),f,b
 37950  0054B0  0E00               	movlw	0
 37951  0054B2  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
 37952  0054B4  D004               	goto	l20589
 37953  0054B6                     l20587:
 37954                           
 37955                           ; BSR set to: 0
 37956                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
 37957  0054B6  0E00               	movlw	0
 37958  0054B8  6F6B               	movwf	(sprintf@width+1)& (0+255),b
 37959  0054BA  0E00               	movlw	0
 37960  0054BC  6F6A               	movwf	sprintf@width& (0+255),b
 37961  0054BE                     l20589:
 37962                           
 37963                           ; BSR set to: 0
 37964                           ;doprnt.c: 1413: if(flag & 0x04) {
 37965  0054BE  A569               	btfss	sprintf@flag& (0+255),2,b
 37966  0054C0  D01E               	goto	l20605
 37967                           
 37968                           ; BSR set to: 0
 37969                           ;doprnt.c: 1418: if(flag & 0x03)
 37970  0054C2  C069  F03A         	movff	sprintf@flag,??_sprintf
 37971  0054C6  0E03               	movlw	3
 37972  0054C8  163A               	andwf	??_sprintf^0,f,c
 37973  0054CA  B4D8               	btfsc	status,2,c
 37974  0054CC  D008               	goto	l20597
 37975                           
 37976                           ; BSR set to: 0
 37977                           ;doprnt.c: 1419: ((*sp++ = ('-')));
 37978  0054CE  C02A  FFD9         	movff	sprintf@sp,fsr2l
 37979  0054D2  C02B  FFDA         	movff	sprintf@sp+1,fsr2h
 37980  0054D6  0E2D               	movlw	45
 37981  0054D8  6EDF               	movwf	indf2,c
 37982                           
 37983                           ; BSR set to: 0
 37984  0054DA  4A2A               	infsnz	sprintf@sp^0,f,c
 37985  0054DC  2A2B               	incf	(sprintf@sp+1)^0,f,c
 37986  0054DE                     l20597:
 37987                           
 37988                           ; BSR set to: 0
 37989                           ;doprnt.c: 1441: if(width)
 37990  0054DE  516A               	movf	sprintf@width& (0+255),w,b
 37991  0054E0  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
 37992  0054E2  B4D8               	btfsc	status,2,c
 37993  0054E4  D02D               	goto	l20619
 37994                           
 37995                           ; BSR set to: 0
 37996                           ;doprnt.c: 1443: ((*sp++ = ('0')));
 37997  0054E6  C02A  FFD9         	movff	sprintf@sp,fsr2l
 37998  0054EA  C02B  FFDA         	movff	sprintf@sp+1,fsr2h
 37999  0054EE  0E30               	movlw	48
 38000  0054F0  6EDF               	movwf	indf2,c
 38001                           
 38002                           ; BSR set to: 0
 38003  0054F2  4A2A               	infsnz	sprintf@sp^0,f,c
 38004  0054F4  2A2B               	incf	(sprintf@sp+1)^0,f,c
 38005                           
 38006                           ; BSR set to: 0
 38007                           ;doprnt.c: 1444: while(--width);
 38008  0054F6  076A               	decf	sprintf@width& (0+255),f,b
 38009  0054F8  A0D8               	btfss	status,0,c
 38010  0054FA  076B               	decf	(sprintf@width+1)& (0+255),f,b
 38011  0054FC  D7F0               	goto	l20597
 38012  0054FE                     l20605:
 38013                           
 38014                           ; BSR set to: 0
 38015                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
 38016  0054FE  516A               	movf	sprintf@width& (0+255),w,b
 38017  005500  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
 38018  005502  B4D8               	btfsc	status,2,c
 38019  005504  D00F               	goto	u22730
 38020  005506                     u22720:
 38021                           
 38022                           ; BSR set to: 0
 38023                           ;doprnt.c: 1456: ((*sp++ = (' ')));
 38024  005506  C02A  FFD9         	movff	sprintf@sp,fsr2l
 38025  00550A  C02B  FFDA         	movff	sprintf@sp+1,fsr2h
 38026  00550E  0E20               	movlw	32
 38027  005510  6EDF               	movwf	indf2,c
 38028                           
 38029                           ; BSR set to: 0
 38030  005512  4A2A               	infsnz	sprintf@sp^0,f,c
 38031  005514  2A2B               	incf	(sprintf@sp+1)^0,f,c
 38032                           
 38033                           ; BSR set to: 0
 38034                           ;doprnt.c: 1457: while(--width);
 38035  005516  076A               	decf	sprintf@width& (0+255),f,b
 38036  005518  A0D8               	btfss	status,0,c
 38037  00551A  076B               	decf	(sprintf@width+1)& (0+255),f,b
 38038  00551C  516A               	movf	sprintf@width& (0+255),w,b
 38039  00551E  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
 38040  005520  A4D8               	btfss	status,2,c
 38041  005522  D7F1               	goto	u22720
 38042  005524                     u22730:
 38043                           
 38044                           ; BSR set to: 0
 38045                           ;doprnt.c: 1464: if(flag & 0x03)
 38046  005524  C069  F03A         	movff	sprintf@flag,??_sprintf
 38047  005528  0E03               	movlw	3
 38048  00552A  163A               	andwf	??_sprintf^0,f,c
 38049  00552C  B4D8               	btfsc	status,2,c
 38050  00552E  D008               	goto	l20619
 38051                           
 38052                           ; BSR set to: 0
 38053                           ;doprnt.c: 1465: ((*sp++ = ('-')));
 38054  005530  C02A  FFD9         	movff	sprintf@sp,fsr2l
 38055  005534  C02B  FFDA         	movff	sprintf@sp+1,fsr2h
 38056  005538  0E2D               	movlw	45
 38057  00553A  6EDF               	movwf	indf2,c
 38058                           
 38059                           ; BSR set to: 0
 38060  00553C  4A2A               	infsnz	sprintf@sp^0,f,c
 38061  00553E  2A2B               	incf	(sprintf@sp+1)^0,f,c
 38062  005540                     l20619:
 38063                           
 38064                           ; BSR set to: 0
 38065                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
 38066  005540  C06C  F061         	movff	sprintf@c,sprintf@prec
 38067                           
 38068                           ;doprnt.c: 1500: while(prec--) {
 38069  005544  D05E               	goto	l20635
 38070  005546                     l20621:
 38071                           
 38072                           ; BSR set to: 0
 38073                           ;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
 38074  005546  5161               	movf	sprintf@prec& (0+255),w,b
 38075  005548  0D02               	mullw	2
 38076  00554A  0EAF               	movlw	low _dpowers
 38077  00554C  24F3               	addwf	243,w,c
 38078  00554E  6EF6               	movwf	tblptrl,c
 38079  005550  0EFA               	movlw	high _dpowers
 38080  005552  20F4               	addwfc	244,w,c
 38081  005554  6EF7               	movwf	tblptrh,c
 38082  005556                     	if	1	;There are 3 active tblptr bytes
 38083  005556  6AF8               	clrf	tblptru,c
 38084  005558  0E00               	movlw	low (__mediumconst shr (0+16))
 38085  00555A  22F8               	addwfc	tblptru,f,c
 38086  00555C                     	endif
 38087  00555C  0009               	tblrd		*+
 38088  00555E  CFF5 F025          	movff	tablat,___lwdiv@divisor
 38089  005562  000A               	tblrd		*-
 38090  005564  CFF5 F026          	movff	tablat,___lwdiv@divisor+1
 38091  005568  C067  F023         	movff	sprintf@val,___lwdiv@dividend
 38092  00556C  C068  F024         	movff	sprintf@val+1,___lwdiv@dividend+1
 38093  005570  EC66  F073         	call	___lwdiv	;wreg free
 38094  005574  C023  F00E         	movff	?___lwdiv,___lwmod@dividend
 38095  005578  C024  F00F         	movff	?___lwdiv+1,___lwmod@dividend+1
 38096  00557C  0E00               	movlw	0
 38097  00557E  6E11               	movwf	(___lwmod@divisor+1)^0,c
 38098  005580  0E0A               	movlw	10
 38099  005582  6E10               	movwf	___lwmod@divisor^0,c
 38100  005584  EC42  F075         	call	___lwmod	;wreg free
 38101  005588  500E               	movf	?___lwmod^0,w,c
 38102  00558A  0F30               	addlw	48
 38103  00558C  0100               	movlb	0	; () banked
 38104  00558E  6F6C               	movwf	sprintf@c& (0+255),b
 38105                           
 38106                           ;doprnt.c: 1517: break;
 38107  005590  D030               	goto	l20631
 38108  005592                     l20623:
 38109                           
 38110                           ; BSR set to: 0
 38111                           ;doprnt.c: 1525: {;doprnt.c: 1526: unsigned char idx = (val / hexpowers[(unsigned char)p
      +                          rec]) & 0xF;
 38112  005592  C067  F023         	movff	sprintf@val,___lwdiv@dividend
 38113  005596  C068  F024         	movff	sprintf@val+1,___lwdiv@dividend+1
 38114  00559A  5161               	movf	sprintf@prec& (0+255),w,b
 38115  00559C  0D02               	mullw	2
 38116  00559E  0ECD               	movlw	low _hexpowers
 38117  0055A0  24F3               	addwf	243,w,c
 38118  0055A2  6EF6               	movwf	tblptrl,c
 38119  0055A4  0EFA               	movlw	high _hexpowers
 38120  0055A6  20F4               	addwfc	244,w,c
 38121  0055A8  6EF7               	movwf	tblptrh,c
 38122  0055AA                     	if	1	;There are 3 active tblptr bytes
 38123  0055AA  6AF8               	clrf	tblptru,c
 38124  0055AC  0E00               	movlw	low (__mediumconst shr (0+16))
 38125  0055AE  22F8               	addwfc	tblptru,f,c
 38126  0055B0                     	endif
 38127  0055B0  0009               	tblrd		*+
 38128  0055B2  CFF5 F025          	movff	tablat,___lwdiv@divisor
 38129  0055B6  000A               	tblrd		*-
 38130  0055B8  CFF5 F026          	movff	tablat,___lwdiv@divisor+1
 38131  0055BC  EC66  F073         	call	___lwdiv	;wreg free
 38132  0055C0  5023               	movf	?___lwdiv^0,w,c
 38133  0055C2  0B0F               	andlw	15
 38134  0055C4  0100               	movlb	0	; () banked
 38135  0055C6  6F60               	movwf	sprintf@idx& (0+255),b
 38136                           
 38137                           ; BSR set to: 0
 38138                           ;doprnt.c: 1532: c = "0123456789abcdef"[idx];
 38139  0055C8  0E69               	movlw	low STR_35
 38140  0055CA  2560               	addwf	sprintf@idx& (0+255),w,b
 38141  0055CC  6EF6               	movwf	tblptrl,c
 38142  0055CE  6AF7               	clrf	tblptrh,c
 38143  0055D0  0EFF               	movlw	high STR_35
 38144  0055D2  22F7               	addwfc	tblptrh,f,c
 38145  0055D4                     	if	1	;There are 3 active tblptr bytes
 38146  0055D4  6AF8               	clrf	tblptru,c
 38147  0055D6  0E00               	movlw	low (__mediumconst shr (0+16))
 38148  0055D8  22F8               	addwfc	tblptru,f,c
 38149  0055DA                     	endif
 38150  0055DA  0008               	tblrd		*
 38151  0055DC  CFF5 F06C          	movff	tablat,sprintf@c
 38152                           
 38153                           ;doprnt.c: 1534: };doprnt.c: 1536: break;
 38154  0055E0  D008               	goto	l20631
 38155  0055E2                     l20629:
 38156                           
 38157                           ; BSR set to: 0
 38158  0055E2  5169               	movf	sprintf@flag& (0+255),w,b
 38159  0055E4  0B80               	andlw	128
 38160                           
 38161                           ; Switch size 1, requested type "simple"
 38162                           ; Number of cases is 2, Range of values is 0 to 128
 38163                           ; switch strategies available:
 38164                           ; Name         Instructions Cycles
 38165                           ; simple_byte            7     4 (average)
 38166                           ;	Chosen strategy is simple_byte
 38167  0055E6  0A00               	xorlw	0	; case 0
 38168  0055E8  B4D8               	btfsc	status,2,c
 38169  0055EA  D7AD               	goto	l20621
 38170  0055EC  0A80               	xorlw	128	; case 128
 38171  0055EE  B4D8               	btfsc	status,2,c
 38172  0055F0  D7D0               	goto	l20623
 38173  0055F2                     l20631:
 38174                           
 38175                           ; BSR set to: 0
 38176                           ;doprnt.c: 1550: ((*sp++ = (c)));
 38177  0055F2  C02A  FFD9         	movff	sprintf@sp,fsr2l
 38178  0055F6  C02B  FFDA         	movff	sprintf@sp+1,fsr2h
 38179  0055FA  C06C  FFDF         	movff	sprintf@c,indf2
 38180                           
 38181                           ; BSR set to: 0
 38182  0055FE  4A2A               	infsnz	sprintf@sp^0,f,c
 38183  005600  2A2B               	incf	(sprintf@sp+1)^0,f,c
 38184  005602                     l20635:
 38185                           
 38186                           ; BSR set to: 0
 38187  005602  0761               	decf	sprintf@prec& (0+255),f,b
 38188  005604  2961               	incf	sprintf@prec& (0+255),w,b
 38189  005606  A4D8               	btfss	status,2,c
 38190  005608  D7EC               	goto	l20629
 38191  00560A                     u22750:
 38192                           
 38193                           ; BSR set to: 0
 38194  00560A  C02C  FFF6         	movff	sprintf@f,tblptrl
 38195  00560E  C02D  FFF7         	movff	sprintf@f+1,tblptrh
 38196  005612  4A2C               	infsnz	sprintf@f^0,f,c
 38197  005614  2A2D               	incf	(sprintf@f+1)^0,f,c
 38198  005616                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 38199  005616  6AF8               	clrf	tblptru,c
 38200  005618                     	endif
 38201  005618                     	if	0	;tblptru may be non-zero
 38202  005618                     	endif
 38203  005618  0008               	tblrd		*
 38204  00561A  CFF5 F06C          	movff	tablat,sprintf@c
 38205  00561E  516C               	movf	sprintf@c& (0+255),w,b
 38206  005620  A4D8               	btfss	status,2,c
 38207  005622  D5C2               	goto	l20457
 38208  005624                     u22760:
 38209                           
 38210                           ; BSR set to: 0
 38211                           ;doprnt.c: 1564: *sp = 0;
 38212  005624  C02A  FFD9         	movff	sprintf@sp,fsr2l
 38213  005628  C02B  FFDA         	movff	sprintf@sp+1,fsr2h
 38214  00562C  0E00               	movlw	0
 38215  00562E  6EDF               	movwf	indf2,c
 38216                           
 38217                           ; BSR set to: 0
 38218  005630  0012               	return		;funcret
 38219  005632                     __end_of_sprintf:
 38220                           	callstack 0
 38221                           
 38222 ;; *************** function _isdigit *****************
 38223 ;; Defined at:
 38224 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\isdigit.c"
 38225 ;; Parameters:    Size  Location     Type
 38226 ;;  c               1    wreg     unsigned char 
 38227 ;; Auto vars:     Size  Location     Type
 38228 ;;  c               1   15[COMRAM] unsigned char 
 38229 ;; Return value:  Size  Location     Type
 38230 ;;		None               void
 38231 ;; Registers used:
 38232 ;;		wreg, status,2, status,0
 38233 ;; Tracked objects:
 38234 ;;		On entry : 3F/0
 38235 ;;		On exit  : 0/0
 38236 ;;		Unchanged: 0/0
 38237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38241 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38242 ;;Total ram usage:        3 bytes
 38243 ;; Hardware stack levels used:    1
 38244 ;; Hardware stack levels required when called:    6
 38245 ;; This function calls:
 38246 ;;		Nothing
 38247 ;; This function is called by:
 38248 ;;		_sprintf
 38249 ;; This function uses a non-reentrant model
 38250 ;;
 38251                           
 38252                           	psect	text121
 38253  00F3B4                     __ptext121:
 38254                           	callstack 0
 38255  00F3B4                     _isdigit:
 38256                           	callstack 21
 38257                           
 38258                           ; BSR set to: 0
 38259                           ;incstack = 0
 38260                           ;isdigit@c stored from wreg
 38261  00F3B4  6E10               	movwf	isdigit@c^0,c
 38262  00F3B6  0E00               	movlw	0
 38263  00F3B8  6E0F               	movwf	_isdigit$8105^0,c
 38264  00F3BA  0E3A               	movlw	58
 38265  00F3BC  6010               	cpfslt	isdigit@c^0,c
 38266  00F3BE  D005               	goto	l20215
 38267  00F3C0  0E2F               	movlw	47
 38268  00F3C2  6410               	cpfsgt	isdigit@c^0,c
 38269  00F3C4  D002               	goto	l20215
 38270  00F3C6  0E01               	movlw	1
 38271  00F3C8  6E0F               	movwf	_isdigit$8105^0,c
 38272  00F3CA                     l20215:
 38273  00F3CA  C00F  F00E         	movff	_isdigit$8105,??_isdigit
 38274  00F3CE  300E               	rrcf	??_isdigit^0,w,c
 38275  00F3D0  0012               	return		;funcret
 38276  00F3D2                     __end_of_isdigit:
 38277                           	callstack 0
 38278                           
 38279 ;; *************** function _display_fillTriangle *****************
 38280 ;; Defined at:
 38281 ;;		line 919 in file "LCD320x240color.c"
 38282 ;; Parameters:    Size  Location     Type
 38283 ;;  x0              2   38[COMRAM] unsigned int 
 38284 ;;  y0              2   40[COMRAM] unsigned int 
 38285 ;;  x1              2   42[COMRAM] unsigned int 
 38286 ;;  y1              2   44[COMRAM] unsigned int 
 38287 ;;  x2              2   46[COMRAM] unsigned int 
 38288 ;;  y2              2   48[COMRAM] unsigned int 
 38289 ;;  color           2   50[COMRAM] unsigned int 
 38290 ;; Auto vars:     Size  Location     Type
 38291 ;;  t               2   20[BANK0 ] unsigned int 
 38292 ;;  t               2   18[BANK0 ] unsigned int 
 38293 ;;  t               2   16[BANK0 ] unsigned int 
 38294 ;;  t               2   14[BANK0 ] unsigned int 
 38295 ;;  t               2   12[BANK0 ] unsigned int 
 38296 ;;  t               2   10[BANK0 ] unsigned int 
 38297 ;;  t               2    8[BANK0 ] unsigned int 
 38298 ;;  t               2    6[BANK0 ] unsigned int 
 38299 ;;  a               2   38[BANK0 ] int 
 38300 ;;  b               2   36[BANK0 ] int 
 38301 ;;  y               2   34[BANK0 ] int 
 38302 ;;  dx02            2   32[BANK0 ] int 
 38303 ;;  sb              2   30[BANK0 ] int 
 38304 ;;  sa              2   28[BANK0 ] int 
 38305 ;;  dx12            2   26[BANK0 ] int 
 38306 ;;  dy02            2   24[BANK0 ] int 
 38307 ;;  last            2   22[BANK0 ] int 
 38308 ;;  dy12            2    4[BANK0 ] int 
 38309 ;;  dy01            2    2[BANK0 ] int 
 38310 ;;  dx01            2    0[BANK0 ] int 
 38311 ;; Return value:  Size  Location     Type
 38312 ;;                  1    wreg      void 
 38313 ;; Registers used:
 38314 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 38315 ;; Tracked objects:
 38316 ;;		On entry : 0/0
 38317 ;;		On exit  : 0/0
 38318 ;;		Unchanged: 0/0
 38319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38320 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38321 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38323 ;;      Totals:        16      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38324 ;;Total ram usage:       56 bytes
 38325 ;; Hardware stack levels used:    1
 38326 ;; Hardware stack levels required when called:   11
 38327 ;; This function calls:
 38328 ;;		___awdiv
 38329 ;;		___wmul
 38330 ;;		_drawHLine
 38331 ;; This function is called by:
 38332 ;;		_Dispseg
 38333 ;;		_DrawAnalogClock
 38334 ;; This function uses a non-reentrant model
 38335 ;;
 38336                           
 38337                           	psect	text122
 38338  006318                     __ptext122:
 38339                           	callstack 0
 38340  006318                     _display_fillTriangle:
 38341                           	callstack 16
 38342                           
 38343                           ;LCD320x240color.c: 921: int16_t a, b, y, last, dx01, dy01, dx02, dy02, dx12, dy12;;LCD3
      +                          20x240color.c: 925: int16_t sa = 0;
 38344                           
 38345                           ;incstack = 0
 38346  006318  0E00               	movlw	0
 38347  00631A  0100               	movlb	0	; () banked
 38348  00631C  6F7D               	movwf	(display_fillTriangle@sa+1)& (0+255),b
 38349  00631E  0E00               	movlw	0
 38350  006320  6F7C               	movwf	display_fillTriangle@sa& (0+255),b
 38351                           
 38352                           ;LCD320x240color.c: 926: int16_t sb = 0;
 38353  006322  0E00               	movlw	0
 38354  006324  6F7F               	movwf	(display_fillTriangle@sb+1)& (0+255),b
 38355  006326  0E00               	movlw	0
 38356  006328  6F7E               	movwf	display_fillTriangle@sb& (0+255),b
 38357                           
 38358                           ; BSR set to: 0
 38359                           ;LCD320x240color.c: 929: if (y0 > y1) {
 38360  00632A  5029               	movf	display_fillTriangle@y0^0,w,c
 38361  00632C  5C2D               	subwf	display_fillTriangle@y1^0,w,c
 38362  00632E  502A               	movf	(display_fillTriangle@y0+1)^0,w,c
 38363  006330  582E               	subwfb	(display_fillTriangle@y1+1)^0,w,c
 38364  006332  B0D8               	btfsc	status,0,c
 38365  006334  D018               	goto	l20045
 38366                           
 38367                           ; BSR set to: 0
 38368                           ;LCD320x240color.c: 930: { uint16_t t = y0; y0 = y1; y1 = t; }; { uint16_t t = x0; x0 = 
      +                          x1; x1 = t; };
 38369  006336  C029  F066         	movff	display_fillTriangle@y0,display_fillTriangle@t
 38370  00633A  C02A  F067         	movff	display_fillTriangle@y0+1,display_fillTriangle@t+1
 38371  00633E  C02D  F029         	movff	display_fillTriangle@y1,display_fillTriangle@y0
 38372  006342  C02E  F02A         	movff	display_fillTriangle@y1+1,display_fillTriangle@y0+1
 38373  006346  C066  F02D         	movff	display_fillTriangle@t,display_fillTriangle@y1
 38374  00634A  C067  F02E         	movff	display_fillTriangle@t+1,display_fillTriangle@y1+1
 38375  00634E  C027  F068         	movff	display_fillTriangle@x0,display_fillTriangle@t_7202
 38376  006352  C028  F069         	movff	display_fillTriangle@x0+1,display_fillTriangle@t_7202+1
 38377  006356  C02B  F027         	movff	display_fillTriangle@x1,display_fillTriangle@x0
 38378  00635A  C02C  F028         	movff	display_fillTriangle@x1+1,display_fillTriangle@x0+1
 38379  00635E  C068  F02B         	movff	display_fillTriangle@t_7202,display_fillTriangle@x1
 38380  006362  C069  F02C         	movff	display_fillTriangle@t_7202+1,display_fillTriangle@x1+1
 38381  006366                     l20045:
 38382                           
 38383                           ; BSR set to: 0
 38384                           ;LCD320x240color.c: 931: };LCD320x240color.c: 932: if (y1 > y2) {
 38385  006366  502D               	movf	display_fillTriangle@y1^0,w,c
 38386  006368  5C31               	subwf	display_fillTriangle@y2^0,w,c
 38387  00636A  502E               	movf	(display_fillTriangle@y1+1)^0,w,c
 38388  00636C  5832               	subwfb	(display_fillTriangle@y2+1)^0,w,c
 38389  00636E  B0D8               	btfsc	status,0,c
 38390  006370  D018               	goto	l20049
 38391                           
 38392                           ; BSR set to: 0
 38393                           ;LCD320x240color.c: 933: { uint16_t t = y2; y2 = y1; y1 = t; }; { uint16_t t = x2; x2 = 
      +                          x1; x1 = t; };
 38394  006372  C031  F06A         	movff	display_fillTriangle@y2,display_fillTriangle@t_7203
 38395  006376  C032  F06B         	movff	display_fillTriangle@y2+1,display_fillTriangle@t_7203+1
 38396  00637A  C02D  F031         	movff	display_fillTriangle@y1,display_fillTriangle@y2
 38397  00637E  C02E  F032         	movff	display_fillTriangle@y1+1,display_fillTriangle@y2+1
 38398  006382  C06A  F02D         	movff	display_fillTriangle@t_7203,display_fillTriangle@y1
 38399  006386  C06B  F02E         	movff	display_fillTriangle@t_7203+1,display_fillTriangle@y1+1
 38400  00638A  C02F  F06C         	movff	display_fillTriangle@x2,display_fillTriangle@t_7204
 38401  00638E  C030  F06D         	movff	display_fillTriangle@x2+1,display_fillTriangle@t_7204+1
 38402  006392  C02B  F02F         	movff	display_fillTriangle@x1,display_fillTriangle@x2
 38403  006396  C02C  F030         	movff	display_fillTriangle@x1+1,display_fillTriangle@x2+1
 38404  00639A  C06C  F02B         	movff	display_fillTriangle@t_7204,display_fillTriangle@x1
 38405  00639E  C06D  F02C         	movff	display_fillTriangle@t_7204+1,display_fillTriangle@x1+1
 38406  0063A2                     l20049:
 38407                           
 38408                           ; BSR set to: 0
 38409                           ;LCD320x240color.c: 934: };LCD320x240color.c: 935: if (y0 > y1) {
 38410  0063A2  5029               	movf	display_fillTriangle@y0^0,w,c
 38411  0063A4  5C2D               	subwf	display_fillTriangle@y1^0,w,c
 38412  0063A6  502A               	movf	(display_fillTriangle@y0+1)^0,w,c
 38413  0063A8  582E               	subwfb	(display_fillTriangle@y1+1)^0,w,c
 38414  0063AA  B0D8               	btfsc	status,0,c
 38415  0063AC  D018               	goto	l20053
 38416                           
 38417                           ; BSR set to: 0
 38418                           ;LCD320x240color.c: 936: { uint16_t t = y0; y0 = y1; y1 = t; }; { uint16_t t = x0; x0 = 
      +                          x1; x1 = t; };
 38419  0063AE  C029  F06E         	movff	display_fillTriangle@y0,display_fillTriangle@t_7205
 38420  0063B2  C02A  F06F         	movff	display_fillTriangle@y0+1,display_fillTriangle@t_7205+1
 38421  0063B6  C02D  F029         	movff	display_fillTriangle@y1,display_fillTriangle@y0
 38422  0063BA  C02E  F02A         	movff	display_fillTriangle@y1+1,display_fillTriangle@y0+1
 38423  0063BE  C06E  F02D         	movff	display_fillTriangle@t_7205,display_fillTriangle@y1
 38424  0063C2  C06F  F02E         	movff	display_fillTriangle@t_7205+1,display_fillTriangle@y1+1
 38425  0063C6  C027  F070         	movff	display_fillTriangle@x0,display_fillTriangle@t_7206
 38426  0063CA  C028  F071         	movff	display_fillTriangle@x0+1,display_fillTriangle@t_7206+1
 38427  0063CE  C02B  F027         	movff	display_fillTriangle@x1,display_fillTriangle@x0
 38428  0063D2  C02C  F028         	movff	display_fillTriangle@x1+1,display_fillTriangle@x0+1
 38429  0063D6  C070  F02B         	movff	display_fillTriangle@t_7206,display_fillTriangle@x1
 38430  0063DA  C071  F02C         	movff	display_fillTriangle@t_7206+1,display_fillTriangle@x1+1
 38431  0063DE                     l20053:
 38432                           
 38433                           ; BSR set to: 0
 38434                           ;LCD320x240color.c: 937: };LCD320x240color.c: 939: if(y0 == y2) {
 38435  0063DE  5031               	movf	display_fillTriangle@y2^0,w,c
 38436  0063E0  1829               	xorwf	display_fillTriangle@y0^0,w,c
 38437  0063E2  E151               	bnz	l20077
 38438  0063E4  5032               	movf	(display_fillTriangle@y2+1)^0,w,c
 38439  0063E6  182A               	xorwf	(display_fillTriangle@y0+1)^0,w,c
 38440  0063E8  A4D8               	btfss	status,2,c
 38441  0063EA  D04D               	goto	l20077
 38442                           
 38443                           ; BSR set to: 0
 38444                           ;LCD320x240color.c: 940: a = b = x0;
 38445  0063EC  C027  F084         	movff	display_fillTriangle@x0,display_fillTriangle@b
 38446  0063F0  C028  F085         	movff	display_fillTriangle@x0+1,display_fillTriangle@b+1
 38447  0063F4  C084  F086         	movff	display_fillTriangle@b,display_fillTriangle@a
 38448  0063F8  C085  F087         	movff	display_fillTriangle@b+1,display_fillTriangle@a+1
 38449                           
 38450                           ; BSR set to: 0
 38451                           ;LCD320x240color.c: 941: if(x1 < a) a = x1;
 38452  0063FC  5186               	movf	display_fillTriangle@a& (0+255),w,b
 38453  0063FE  5C2B               	subwf	display_fillTriangle@x1^0,w,c
 38454  006400  5187               	movf	(display_fillTriangle@a+1)& (0+255),w,b
 38455  006402  582C               	subwfb	(display_fillTriangle@x1+1)^0,w,c
 38456  006404  B0D8               	btfsc	status,0,c
 38457  006406  D005               	goto	l20061
 38458                           
 38459                           ; BSR set to: 0
 38460  006408  C02B  F086         	movff	display_fillTriangle@x1,display_fillTriangle@a
 38461  00640C  C02C  F087         	movff	display_fillTriangle@x1+1,display_fillTriangle@a+1
 38462  006410  D00A               	goto	l20065
 38463  006412                     l20061:
 38464                           
 38465                           ; BSR set to: 0
 38466                           ;LCD320x240color.c: 942: else if(x1 > b) b = x1;
 38467  006412  502B               	movf	display_fillTriangle@x1^0,w,c
 38468  006414  5D84               	subwf	display_fillTriangle@b& (0+255),w,b
 38469  006416  502C               	movf	(display_fillTriangle@x1+1)^0,w,c
 38470  006418  5985               	subwfb	(display_fillTriangle@b+1)& (0+255),w,b
 38471  00641A  B0D8               	btfsc	status,0,c
 38472  00641C  D004               	goto	l20065
 38473                           
 38474                           ; BSR set to: 0
 38475  00641E  C02B  F084         	movff	display_fillTriangle@x1,display_fillTriangle@b
 38476  006422  C02C  F085         	movff	display_fillTriangle@x1+1,display_fillTriangle@b+1
 38477  006426                     l20065:
 38478                           
 38479                           ; BSR set to: 0
 38480                           ;LCD320x240color.c: 943: if(x2 < a) a = x2;
 38481  006426  5186               	movf	display_fillTriangle@a& (0+255),w,b
 38482  006428  5C2F               	subwf	display_fillTriangle@x2^0,w,c
 38483  00642A  5187               	movf	(display_fillTriangle@a+1)& (0+255),w,b
 38484  00642C  5830               	subwfb	(display_fillTriangle@x2+1)^0,w,c
 38485  00642E  B0D8               	btfsc	status,0,c
 38486  006430  D005               	goto	l20069
 38487                           
 38488                           ; BSR set to: 0
 38489  006432  C02F  F086         	movff	display_fillTriangle@x2,display_fillTriangle@a
 38490  006436  C030  F087         	movff	display_fillTriangle@x2+1,display_fillTriangle@a+1
 38491  00643A  D00A               	goto	l20073
 38492  00643C                     l20069:
 38493                           
 38494                           ; BSR set to: 0
 38495                           ;LCD320x240color.c: 944: else if(x2 > b) b = x2;
 38496  00643C  502F               	movf	display_fillTriangle@x2^0,w,c
 38497  00643E  5D84               	subwf	display_fillTriangle@b& (0+255),w,b
 38498  006440  5030               	movf	(display_fillTriangle@x2+1)^0,w,c
 38499  006442  5985               	subwfb	(display_fillTriangle@b+1)& (0+255),w,b
 38500  006444  B0D8               	btfsc	status,0,c
 38501  006446  D004               	goto	l20073
 38502                           
 38503                           ; BSR set to: 0
 38504  006448  C02F  F084         	movff	display_fillTriangle@x2,display_fillTriangle@b
 38505  00644C  C030  F085         	movff	display_fillTriangle@x2+1,display_fillTriangle@b+1
 38506  006450                     l20073:
 38507                           
 38508                           ; BSR set to: 0
 38509                           ;LCD320x240color.c: 945: drawHLine(a, y0, b-a+1, color);
 38510  006450  C086  F019         	movff	display_fillTriangle@a,drawHLine@x
 38511  006454  C087  F01A         	movff	display_fillTriangle@a+1,drawHLine@x+1
 38512  006458  C029  F01B         	movff	display_fillTriangle@y0,drawHLine@y
 38513  00645C  C02A  F01C         	movff	display_fillTriangle@y0+1,drawHLine@y+1
 38514  006460  5186               	movf	display_fillTriangle@a& (0+255),w,b
 38515  006462  5D84               	subwf	display_fillTriangle@b& (0+255),w,b
 38516  006464  6E35               	movwf	??_display_fillTriangle^0,c
 38517  006466  5187               	movf	(display_fillTriangle@a+1)& (0+255),w,b
 38518  006468  5985               	subwfb	(display_fillTriangle@b+1)& (0+255),w,b
 38519  00646A  6E36               	movwf	(??_display_fillTriangle+1)^0,c
 38520  00646C  0E01               	movlw	1
 38521  00646E  2435               	addwf	??_display_fillTriangle^0,w,c
 38522  006470  6E1D               	movwf	drawHLine@w^0,c
 38523  006472  0E00               	movlw	0
 38524  006474  2036               	addwfc	(??_display_fillTriangle+1)^0,w,c
 38525  006476  6E1E               	movwf	(drawHLine@w+1)^0,c
 38526  006478  C033  F01F         	movff	display_fillTriangle@color,drawHLine@color
 38527  00647C  C034  F020         	movff	display_fillTriangle@color+1,drawHLine@color+1
 38528  006480  EC30  F064         	call	_drawHLine	;wreg free
 38529  006484  0012               	return	
 38530  006486                     l20077:
 38531                           
 38532                           ; BSR set to: 0
 38533                           ;LCD320x240color.c: 947: };LCD320x240color.c: 949: dx01 = x1 - x0;
 38534  006486  5027               	movf	display_fillTriangle@x0^0,w,c
 38535  006488  5C2B               	subwf	display_fillTriangle@x1^0,w,c
 38536  00648A  6F60               	movwf	display_fillTriangle@dx01& (0+255),b
 38537  00648C  5028               	movf	(display_fillTriangle@x0+1)^0,w,c
 38538  00648E  582C               	subwfb	(display_fillTriangle@x1+1)^0,w,c
 38539  006490  6F61               	movwf	(display_fillTriangle@dx01+1)& (0+255),b
 38540                           
 38541                           ;LCD320x240color.c: 950: dy01 = y1 - y0;
 38542  006492  5029               	movf	display_fillTriangle@y0^0,w,c
 38543  006494  5C2D               	subwf	display_fillTriangle@y1^0,w,c
 38544  006496  6F62               	movwf	display_fillTriangle@dy01& (0+255),b
 38545  006498  502A               	movf	(display_fillTriangle@y0+1)^0,w,c
 38546  00649A  582E               	subwfb	(display_fillTriangle@y1+1)^0,w,c
 38547  00649C  6F63               	movwf	(display_fillTriangle@dy01+1)& (0+255),b
 38548                           
 38549                           ;LCD320x240color.c: 951: dx02 = x2 - x0;
 38550  00649E  5027               	movf	display_fillTriangle@x0^0,w,c
 38551  0064A0  5C2F               	subwf	display_fillTriangle@x2^0,w,c
 38552  0064A2  6F80               	movwf	display_fillTriangle@dx02& (0+255),b
 38553  0064A4  5028               	movf	(display_fillTriangle@x0+1)^0,w,c
 38554  0064A6  5830               	subwfb	(display_fillTriangle@x2+1)^0,w,c
 38555  0064A8  6F81               	movwf	(display_fillTriangle@dx02+1)& (0+255),b
 38556                           
 38557                           ;LCD320x240color.c: 952: dy02 = y2 - y0;
 38558  0064AA  5029               	movf	display_fillTriangle@y0^0,w,c
 38559  0064AC  5C31               	subwf	display_fillTriangle@y2^0,w,c
 38560  0064AE  6F78               	movwf	display_fillTriangle@dy02& (0+255),b
 38561  0064B0  502A               	movf	(display_fillTriangle@y0+1)^0,w,c
 38562  0064B2  5832               	subwfb	(display_fillTriangle@y2+1)^0,w,c
 38563  0064B4  6F79               	movwf	(display_fillTriangle@dy02+1)& (0+255),b
 38564                           
 38565                           ;LCD320x240color.c: 953: dx12 = x2 - x1;
 38566  0064B6  502B               	movf	display_fillTriangle@x1^0,w,c
 38567  0064B8  5C2F               	subwf	display_fillTriangle@x2^0,w,c
 38568  0064BA  6F7A               	movwf	display_fillTriangle@dx12& (0+255),b
 38569  0064BC  502C               	movf	(display_fillTriangle@x1+1)^0,w,c
 38570  0064BE  5830               	subwfb	(display_fillTriangle@x2+1)^0,w,c
 38571  0064C0  6F7B               	movwf	(display_fillTriangle@dx12+1)& (0+255),b
 38572                           
 38573                           ;LCD320x240color.c: 954: dy12 = y2 - y1;
 38574  0064C2  502D               	movf	display_fillTriangle@y1^0,w,c
 38575  0064C4  5C31               	subwf	display_fillTriangle@y2^0,w,c
 38576  0064C6  6F64               	movwf	display_fillTriangle@dy12& (0+255),b
 38577  0064C8  502E               	movf	(display_fillTriangle@y1+1)^0,w,c
 38578  0064CA  5832               	subwfb	(display_fillTriangle@y2+1)^0,w,c
 38579  0064CC  6F65               	movwf	(display_fillTriangle@dy12+1)& (0+255),b
 38580                           
 38581                           ;LCD320x240color.c: 962: if(y1 == y2) last = y1;
 38582  0064CE  5031               	movf	display_fillTriangle@y2^0,w,c
 38583  0064D0  182D               	xorwf	display_fillTriangle@y1^0,w,c
 38584  0064D2  E109               	bnz	l20081
 38585  0064D4  5032               	movf	(display_fillTriangle@y2+1)^0,w,c
 38586  0064D6  182E               	xorwf	(display_fillTriangle@y1+1)^0,w,c
 38587  0064D8  A4D8               	btfss	status,2,c
 38588  0064DA  D005               	goto	l20081
 38589                           
 38590                           ; BSR set to: 0
 38591  0064DC  C02D  F076         	movff	display_fillTriangle@y1,display_fillTriangle@last
 38592  0064E0  C02E  F077         	movff	display_fillTriangle@y1+1,display_fillTriangle@last+1
 38593  0064E4  D006               	goto	l20083
 38594  0064E6                     l20081:
 38595                           
 38596                           ; BSR set to: 0
 38597                           ;LCD320x240color.c: 963: else last = y1-1;
 38598  0064E6  0EFF               	movlw	255
 38599  0064E8  242D               	addwf	display_fillTriangle@y1^0,w,c
 38600  0064EA  6F76               	movwf	display_fillTriangle@last& (0+255),b
 38601  0064EC  0EFF               	movlw	255
 38602  0064EE  202E               	addwfc	(display_fillTriangle@y1+1)^0,w,c
 38603  0064F0  6F77               	movwf	(display_fillTriangle@last+1)& (0+255),b
 38604  0064F2                     l20083:
 38605                           
 38606                           ; BSR set to: 0
 38607                           ;LCD320x240color.c: 965: for(y=y0; y<=last; y++) {
 38608  0064F2  C029  F082         	movff	display_fillTriangle@y0,display_fillTriangle@y
 38609  0064F6  C02A  F083         	movff	display_fillTriangle@y0+1,display_fillTriangle@y+1
 38610  0064FA  D05D               	goto	l20099
 38611  0064FC                     l20085:
 38612                           
 38613                           ; BSR set to: 0
 38614                           ;LCD320x240color.c: 966: a = x0 + sa / dy01;
 38615  0064FC  C07C  F00E         	movff	display_fillTriangle@sa,___awdiv@dividend
 38616  006500  C07D  F00F         	movff	display_fillTriangle@sa+1,___awdiv@dividend+1
 38617  006504  C062  F010         	movff	display_fillTriangle@dy01,___awdiv@divisor
 38618  006508  C063  F011         	movff	display_fillTriangle@dy01+1,___awdiv@divisor+1
 38619  00650C  ECD1  F06C         	call	___awdiv	;wreg free
 38620  006510  5027               	movf	display_fillTriangle@x0^0,w,c
 38621  006512  240E               	addwf	?___awdiv^0,w,c
 38622  006514  0100               	movlb	0	; () banked
 38623  006516  6F86               	movwf	display_fillTriangle@a& (0+255),b
 38624  006518  5028               	movf	(display_fillTriangle@x0+1)^0,w,c
 38625  00651A  200F               	addwfc	(?___awdiv+1)^0,w,c
 38626  00651C  6F87               	movwf	(display_fillTriangle@a+1)& (0+255),b
 38627                           
 38628                           ;LCD320x240color.c: 967: b = x0 + sb / dy02;
 38629  00651E  C07E  F00E         	movff	display_fillTriangle@sb,___awdiv@dividend
 38630  006522  C07F  F00F         	movff	display_fillTriangle@sb+1,___awdiv@dividend+1
 38631  006526  C078  F010         	movff	display_fillTriangle@dy02,___awdiv@divisor
 38632  00652A  C079  F011         	movff	display_fillTriangle@dy02+1,___awdiv@divisor+1
 38633  00652E  ECD1  F06C         	call	___awdiv	;wreg free
 38634  006532  5027               	movf	display_fillTriangle@x0^0,w,c
 38635  006534  240E               	addwf	?___awdiv^0,w,c
 38636  006536  0100               	movlb	0	; () banked
 38637  006538  6F84               	movwf	display_fillTriangle@b& (0+255),b
 38638  00653A  5028               	movf	(display_fillTriangle@x0+1)^0,w,c
 38639  00653C  200F               	addwfc	(?___awdiv+1)^0,w,c
 38640  00653E  6F85               	movwf	(display_fillTriangle@b+1)& (0+255),b
 38641                           
 38642                           ; BSR set to: 0
 38643                           ;LCD320x240color.c: 968: sa += dx01;
 38644  006540  5160               	movf	display_fillTriangle@dx01& (0+255),w,b
 38645  006542  277C               	addwf	display_fillTriangle@sa& (0+255),f,b
 38646  006544  5161               	movf	(display_fillTriangle@dx01+1)& (0+255),w,b
 38647  006546  237D               	addwfc	(display_fillTriangle@sa+1)& (0+255),f,b
 38648                           
 38649                           ; BSR set to: 0
 38650                           ;LCD320x240color.c: 969: sb += dx02;
 38651  006548  5180               	movf	display_fillTriangle@dx02& (0+255),w,b
 38652  00654A  277E               	addwf	display_fillTriangle@sb& (0+255),f,b
 38653  00654C  5181               	movf	(display_fillTriangle@dx02+1)& (0+255),w,b
 38654  00654E  237F               	addwfc	(display_fillTriangle@sb+1)& (0+255),f,b
 38655                           
 38656                           ; BSR set to: 0
 38657                           ;LCD320x240color.c: 974: if(a > b) { uint16_t t = a; a = b; b = t; };
 38658  006550  5186               	movf	display_fillTriangle@a& (0+255),w,b
 38659  006552  5D84               	subwf	display_fillTriangle@b& (0+255),w,b
 38660  006554  5185               	movf	(display_fillTriangle@b+1)& (0+255),w,b
 38661  006556  0A80               	xorlw	128
 38662  006558  6E35               	movwf	??_display_fillTriangle^0,c
 38663  00655A  5187               	movf	(display_fillTriangle@a+1)& (0+255),w,b
 38664  00655C  0A80               	xorlw	128
 38665  00655E  5835               	subwfb	??_display_fillTriangle^0,w,c
 38666  006560  B0D8               	btfsc	status,0,c
 38667  006562  D00C               	goto	l20095
 38668                           
 38669                           ; BSR set to: 0
 38670  006564  C086  F072         	movff	display_fillTriangle@a,display_fillTriangle@t_7207
 38671  006568  C087  F073         	movff	display_fillTriangle@a+1,display_fillTriangle@t_7207+1
 38672  00656C  C084  F086         	movff	display_fillTriangle@b,display_fillTriangle@a
 38673  006570  C085  F087         	movff	display_fillTriangle@b+1,display_fillTriangle@a+1
 38674  006574  C072  F084         	movff	display_fillTriangle@t_7207,display_fillTriangle@b
 38675  006578  C073  F085         	movff	display_fillTriangle@t_7207+1,display_fillTriangle@b+1
 38676  00657C                     l20095:
 38677                           
 38678                           ; BSR set to: 0
 38679                           ;LCD320x240color.c: 975: drawHLine(a, y, b-a+1, color);
 38680  00657C  C086  F019         	movff	display_fillTriangle@a,drawHLine@x
 38681  006580  C087  F01A         	movff	display_fillTriangle@a+1,drawHLine@x+1
 38682  006584  C082  F01B         	movff	display_fillTriangle@y,drawHLine@y
 38683  006588  C083  F01C         	movff	display_fillTriangle@y+1,drawHLine@y+1
 38684  00658C  5186               	movf	display_fillTriangle@a& (0+255),w,b
 38685  00658E  5D84               	subwf	display_fillTriangle@b& (0+255),w,b
 38686  006590  6E35               	movwf	??_display_fillTriangle^0,c
 38687  006592  5187               	movf	(display_fillTriangle@a+1)& (0+255),w,b
 38688  006594  5985               	subwfb	(display_fillTriangle@b+1)& (0+255),w,b
 38689  006596  6E36               	movwf	(??_display_fillTriangle+1)^0,c
 38690  006598  0E01               	movlw	1
 38691  00659A  2435               	addwf	??_display_fillTriangle^0,w,c
 38692  00659C  6E1D               	movwf	drawHLine@w^0,c
 38693  00659E  0E00               	movlw	0
 38694  0065A0  2036               	addwfc	(??_display_fillTriangle+1)^0,w,c
 38695  0065A2  6E1E               	movwf	(drawHLine@w+1)^0,c
 38696  0065A4  C033  F01F         	movff	display_fillTriangle@color,drawHLine@color
 38697  0065A8  C034  F020         	movff	display_fillTriangle@color+1,drawHLine@color+1
 38698  0065AC  EC30  F064         	call	_drawHLine	;wreg free
 38699  0065B0  0100               	movlb	0	; () banked
 38700  0065B2  4B82               	infsnz	display_fillTriangle@y& (0+255),f,b
 38701  0065B4  2B83               	incf	(display_fillTriangle@y+1)& (0+255),f,b
 38702  0065B6                     l20099:
 38703                           
 38704                           ; BSR set to: 0
 38705  0065B6  5182               	movf	display_fillTriangle@y& (0+255),w,b
 38706  0065B8  5D76               	subwf	display_fillTriangle@last& (0+255),w,b
 38707  0065BA  5177               	movf	(display_fillTriangle@last+1)& (0+255),w,b
 38708  0065BC  0A80               	xorlw	128
 38709  0065BE  6E35               	movwf	??_display_fillTriangle^0,c
 38710  0065C0  5183               	movf	(display_fillTriangle@y+1)& (0+255),w,b
 38711  0065C2  0A80               	xorlw	128
 38712  0065C4  5835               	subwfb	??_display_fillTriangle^0,w,c
 38713  0065C6  B0D8               	btfsc	status,0,c
 38714  0065C8  D799               	goto	l20085
 38715                           
 38716                           ; BSR set to: 0
 38717                           ;LCD320x240color.c: 976: };LCD320x240color.c: 979: sa = dx12 * (y - y1);
 38718  0065CA  502D               	movf	display_fillTriangle@y1^0,w,c
 38719  0065CC  5D82               	subwf	display_fillTriangle@y& (0+255),w,b
 38720  0065CE  6E1D               	movwf	___wmul@multiplier^0,c
 38721  0065D0  502E               	movf	(display_fillTriangle@y1+1)^0,w,c
 38722  0065D2  5983               	subwfb	(display_fillTriangle@y+1)& (0+255),w,b
 38723  0065D4  6E1E               	movwf	(___wmul@multiplier+1)^0,c
 38724  0065D6  C07A  F01F         	movff	display_fillTriangle@dx12,___wmul@multiplicand
 38725  0065DA  C07B  F020         	movff	display_fillTriangle@dx12+1,___wmul@multiplicand+1
 38726  0065DE  EC12  F079         	call	___wmul	;wreg free
 38727  0065E2  C01D  F07C         	movff	?___wmul,display_fillTriangle@sa
 38728  0065E6  C01E  F07D         	movff	?___wmul+1,display_fillTriangle@sa+1
 38729                           
 38730                           ;LCD320x240color.c: 980: sb = dx02 * (y - y0);
 38731  0065EA  5029               	movf	display_fillTriangle@y0^0,w,c
 38732  0065EC  0100               	movlb	0	; () banked
 38733  0065EE  5D82               	subwf	display_fillTriangle@y& (0+255),w,b
 38734  0065F0  6E1D               	movwf	___wmul@multiplier^0,c
 38735  0065F2  502A               	movf	(display_fillTriangle@y0+1)^0,w,c
 38736  0065F4  5983               	subwfb	(display_fillTriangle@y+1)& (0+255),w,b
 38737  0065F6  6E1E               	movwf	(___wmul@multiplier+1)^0,c
 38738  0065F8  C080  F01F         	movff	display_fillTriangle@dx02,___wmul@multiplicand
 38739  0065FC  C081  F020         	movff	display_fillTriangle@dx02+1,___wmul@multiplicand+1
 38740  006600  EC12  F079         	call	___wmul	;wreg free
 38741  006604  C01D  F07E         	movff	?___wmul,display_fillTriangle@sb
 38742  006608  C01E  F07F         	movff	?___wmul+1,display_fillTriangle@sb+1
 38743                           
 38744                           ;LCD320x240color.c: 985: for(; y<=y2; y++) {
 38745  00660C  D05D               	goto	l20117
 38746  00660E                     l20103:
 38747                           
 38748                           ; BSR set to: 0
 38749                           ;LCD320x240color.c: 986: a = x1 + sa / dy12;
 38750  00660E  C07C  F00E         	movff	display_fillTriangle@sa,___awdiv@dividend
 38751  006612  C07D  F00F         	movff	display_fillTriangle@sa+1,___awdiv@dividend+1
 38752  006616  C064  F010         	movff	display_fillTriangle@dy12,___awdiv@divisor
 38753  00661A  C065  F011         	movff	display_fillTriangle@dy12+1,___awdiv@divisor+1
 38754  00661E  ECD1  F06C         	call	___awdiv	;wreg free
 38755  006622  502B               	movf	display_fillTriangle@x1^0,w,c
 38756  006624  240E               	addwf	?___awdiv^0,w,c
 38757  006626  0100               	movlb	0	; () banked
 38758  006628  6F86               	movwf	display_fillTriangle@a& (0+255),b
 38759  00662A  502C               	movf	(display_fillTriangle@x1+1)^0,w,c
 38760  00662C  200F               	addwfc	(?___awdiv+1)^0,w,c
 38761  00662E  6F87               	movwf	(display_fillTriangle@a+1)& (0+255),b
 38762                           
 38763                           ;LCD320x240color.c: 987: b = x0 + sb / dy02;
 38764  006630  C07E  F00E         	movff	display_fillTriangle@sb,___awdiv@dividend
 38765  006634  C07F  F00F         	movff	display_fillTriangle@sb+1,___awdiv@dividend+1
 38766  006638  C078  F010         	movff	display_fillTriangle@dy02,___awdiv@divisor
 38767  00663C  C079  F011         	movff	display_fillTriangle@dy02+1,___awdiv@divisor+1
 38768  006640  ECD1  F06C         	call	___awdiv	;wreg free
 38769  006644  5027               	movf	display_fillTriangle@x0^0,w,c
 38770  006646  240E               	addwf	?___awdiv^0,w,c
 38771  006648  0100               	movlb	0	; () banked
 38772  00664A  6F84               	movwf	display_fillTriangle@b& (0+255),b
 38773  00664C  5028               	movf	(display_fillTriangle@x0+1)^0,w,c
 38774  00664E  200F               	addwfc	(?___awdiv+1)^0,w,c
 38775  006650  6F85               	movwf	(display_fillTriangle@b+1)& (0+255),b
 38776                           
 38777                           ; BSR set to: 0
 38778                           ;LCD320x240color.c: 988: sa += dx12;
 38779  006652  517A               	movf	display_fillTriangle@dx12& (0+255),w,b
 38780  006654  277C               	addwf	display_fillTriangle@sa& (0+255),f,b
 38781  006656  517B               	movf	(display_fillTriangle@dx12+1)& (0+255),w,b
 38782  006658  237D               	addwfc	(display_fillTriangle@sa+1)& (0+255),f,b
 38783                           
 38784                           ; BSR set to: 0
 38785                           ;LCD320x240color.c: 989: sb += dx02;
 38786  00665A  5180               	movf	display_fillTriangle@dx02& (0+255),w,b
 38787  00665C  277E               	addwf	display_fillTriangle@sb& (0+255),f,b
 38788  00665E  5181               	movf	(display_fillTriangle@dx02+1)& (0+255),w,b
 38789  006660  237F               	addwfc	(display_fillTriangle@sb+1)& (0+255),f,b
 38790                           
 38791                           ; BSR set to: 0
 38792                           ;LCD320x240color.c: 994: if(a > b) { uint16_t t = a; a = b; b = t; };
 38793  006662  5186               	movf	display_fillTriangle@a& (0+255),w,b
 38794  006664  5D84               	subwf	display_fillTriangle@b& (0+255),w,b
 38795  006666  5185               	movf	(display_fillTriangle@b+1)& (0+255),w,b
 38796  006668  0A80               	xorlw	128
 38797  00666A  6E35               	movwf	??_display_fillTriangle^0,c
 38798  00666C  5187               	movf	(display_fillTriangle@a+1)& (0+255),w,b
 38799  00666E  0A80               	xorlw	128
 38800  006670  5835               	subwfb	??_display_fillTriangle^0,w,c
 38801  006672  B0D8               	btfsc	status,0,c
 38802  006674  D00C               	goto	l20113
 38803                           
 38804                           ; BSR set to: 0
 38805  006676  C086  F074         	movff	display_fillTriangle@a,display_fillTriangle@t_7208
 38806  00667A  C087  F075         	movff	display_fillTriangle@a+1,display_fillTriangle@t_7208+1
 38807  00667E  C084  F086         	movff	display_fillTriangle@b,display_fillTriangle@a
 38808  006682  C085  F087         	movff	display_fillTriangle@b+1,display_fillTriangle@a+1
 38809  006686  C074  F084         	movff	display_fillTriangle@t_7208,display_fillTriangle@b
 38810  00668A  C075  F085         	movff	display_fillTriangle@t_7208+1,display_fillTriangle@b+1
 38811  00668E                     l20113:
 38812                           
 38813                           ; BSR set to: 0
 38814                           ;LCD320x240color.c: 995: drawHLine(a, y, b-a+1, color);
 38815  00668E  C086  F019         	movff	display_fillTriangle@a,drawHLine@x
 38816  006692  C087  F01A         	movff	display_fillTriangle@a+1,drawHLine@x+1
 38817  006696  C082  F01B         	movff	display_fillTriangle@y,drawHLine@y
 38818  00669A  C083  F01C         	movff	display_fillTriangle@y+1,drawHLine@y+1
 38819  00669E  5186               	movf	display_fillTriangle@a& (0+255),w,b
 38820  0066A0  5D84               	subwf	display_fillTriangle@b& (0+255),w,b
 38821  0066A2  6E35               	movwf	??_display_fillTriangle^0,c
 38822  0066A4  5187               	movf	(display_fillTriangle@a+1)& (0+255),w,b
 38823  0066A6  5985               	subwfb	(display_fillTriangle@b+1)& (0+255),w,b
 38824  0066A8  6E36               	movwf	(??_display_fillTriangle+1)^0,c
 38825  0066AA  0E01               	movlw	1
 38826  0066AC  2435               	addwf	??_display_fillTriangle^0,w,c
 38827  0066AE  6E1D               	movwf	drawHLine@w^0,c
 38828  0066B0  0E00               	movlw	0
 38829  0066B2  2036               	addwfc	(??_display_fillTriangle+1)^0,w,c
 38830  0066B4  6E1E               	movwf	(drawHLine@w+1)^0,c
 38831  0066B6  C033  F01F         	movff	display_fillTriangle@color,drawHLine@color
 38832  0066BA  C034  F020         	movff	display_fillTriangle@color+1,drawHLine@color+1
 38833  0066BE  EC30  F064         	call	_drawHLine	;wreg free
 38834  0066C2  0100               	movlb	0	; () banked
 38835  0066C4  4B82               	infsnz	display_fillTriangle@y& (0+255),f,b
 38836  0066C6  2B83               	incf	(display_fillTriangle@y+1)& (0+255),f,b
 38837  0066C8                     l20117:
 38838  0066C8  0100               	movlb	0	; () banked
 38839  0066CA  5182               	movf	display_fillTriangle@y& (0+255),w,b
 38840  0066CC  5C31               	subwf	display_fillTriangle@y2^0,w,c
 38841  0066CE  5183               	movf	(display_fillTriangle@y+1)& (0+255),w,b
 38842  0066D0  5832               	subwfb	(display_fillTriangle@y2+1)^0,w,c
 38843  0066D2  A0D8               	btfss	status,0,c
 38844  0066D4  0012               	return	
 38845  0066D6  D79B               	goto	l20103
 38846  0066D8                     __end_of_display_fillTriangle:
 38847                           	callstack 0
 38848                           
 38849 ;; *************** function _display_fillCircle *****************
 38850 ;; Defined at:
 38851 ;;		line 794 in file "LCD320x240color.c"
 38852 ;; Parameters:    Size  Location     Type
 38853 ;;  x0              2    0[BANK0 ] unsigned int 
 38854 ;;  y0              2    2[BANK0 ] unsigned int 
 38855 ;;  r               2    4[BANK0 ] unsigned int 
 38856 ;;  color           2    6[BANK0 ] unsigned int 
 38857 ;; Auto vars:     Size  Location     Type
 38858 ;;		None
 38859 ;; Return value:  Size  Location     Type
 38860 ;;                  1    wreg      void 
 38861 ;; Registers used:
 38862 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 38863 ;; Tracked objects:
 38864 ;;		On entry : 3F/0
 38865 ;;		On exit  : 0/0
 38866 ;;		Unchanged: 0/0
 38867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38868 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38870 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38871 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38872 ;;Total ram usage:       10 bytes
 38873 ;; Hardware stack levels used:    1
 38874 ;; Hardware stack levels required when called:   12
 38875 ;; This function calls:
 38876 ;;		_display_fillCircleHelper
 38877 ;;		_drawVLine
 38878 ;; This function is called by:
 38879 ;;		_NormalProc
 38880 ;;		_DrawAnalogClock
 38881 ;; This function uses a non-reentrant model
 38882 ;;
 38883                           
 38884                           	psect	text123
 38885  00DF48                     __ptext123:
 38886                           	callstack 0
 38887  00DF48                     _display_fillCircle:
 38888                           	callstack 15
 38889                           
 38890                           ; BSR set to: 0
 38891                           ;LCD320x240color.c: 796: drawVLine(x0, y0-r, 2*r+1, color);
 38892                           
 38893                           ;incstack = 0
 38894  00DF48  C060  F019         	movff	display_fillCircle@x0,drawVLine@x
 38895  00DF4C  C061  F01A         	movff	display_fillCircle@x0+1,drawVLine@x+1
 38896  00DF50  5164               	movf	display_fillCircle@r& (0+255),w,b
 38897  00DF52  5D62               	subwf	display_fillCircle@y0& (0+255),w,b
 38898  00DF54  6E1B               	movwf	drawVLine@y^0,c
 38899  00DF56  5165               	movf	(display_fillCircle@r+1)& (0+255),w,b
 38900  00DF58  5963               	subwfb	(display_fillCircle@y0+1)& (0+255),w,b
 38901  00DF5A  6E1C               	movwf	(drawVLine@y+1)^0,c
 38902  00DF5C  C064  F043         	movff	display_fillCircle@r,??_display_fillCircle
 38903  00DF60  C065  F044         	movff	display_fillCircle@r+1,??_display_fillCircle+1
 38904  00DF64  90D8               	bcf	status,0,c
 38905  00DF66  3643               	rlcf	??_display_fillCircle^0,f,c
 38906  00DF68  3644               	rlcf	(??_display_fillCircle+1)^0,f,c
 38907  00DF6A  0E01               	movlw	1
 38908  00DF6C  2443               	addwf	??_display_fillCircle^0,w,c
 38909  00DF6E  6E1D               	movwf	drawVLine@h^0,c
 38910  00DF70  0E00               	movlw	0
 38911  00DF72  2044               	addwfc	(??_display_fillCircle+1)^0,w,c
 38912  00DF74  6E1E               	movwf	(drawVLine@h+1)^0,c
 38913  00DF76  C066  F01F         	movff	display_fillCircle@color,drawVLine@color
 38914  00DF7A  C067  F020         	movff	display_fillCircle@color+1,drawVLine@color+1
 38915  00DF7E  ECCC  F063         	call	_drawVLine	;wreg free
 38916                           
 38917                           ;LCD320x240color.c: 797: display_fillCircleHelper(x0, y0, r, 3, 0, color);
 38918  00DF82  C060  F027         	movff	display_fillCircle@x0,display_fillCircleHelper@x0
 38919  00DF86  C061  F028         	movff	display_fillCircle@x0+1,display_fillCircleHelper@x0+1
 38920  00DF8A  C062  F029         	movff	display_fillCircle@y0,display_fillCircleHelper@y0
 38921  00DF8E  C063  F02A         	movff	display_fillCircle@y0+1,display_fillCircleHelper@y0+1
 38922  00DF92  C064  F02B         	movff	display_fillCircle@r,display_fillCircleHelper@r
 38923  00DF96  C065  F02C         	movff	display_fillCircle@r+1,display_fillCircleHelper@r+1
 38924  00DF9A  0E03               	movlw	3
 38925  00DF9C  6E2D               	movwf	display_fillCircleHelper@corners^0,c
 38926  00DF9E  0E00               	movlw	0
 38927  00DFA0  6E2F               	movwf	(display_fillCircleHelper@delta+1)^0,c
 38928  00DFA2  0E00               	movlw	0
 38929  00DFA4  6E2E               	movwf	display_fillCircleHelper@delta^0,c
 38930  00DFA6  C066  F030         	movff	display_fillCircle@color,display_fillCircleHelper@color
 38931  00DFAA  C067  F031         	movff	display_fillCircle@color+1,display_fillCircleHelper@color+1
 38932  00DFAE  EC0D  F051         	call	_display_fillCircleHelper	;wreg free
 38933  00DFB2  0012               	return		;funcret
 38934  00DFB4                     __end_of_display_fillCircle:
 38935                           	callstack 0
 38936                           
 38937 ;; *************** function _display_fillCircleHelper *****************
 38938 ;; Defined at:
 38939 ;;		line 750 in file "LCD320x240color.c"
 38940 ;; Parameters:    Size  Location     Type
 38941 ;;  x0              2   38[COMRAM] unsigned int 
 38942 ;;  y0              2   40[COMRAM] unsigned int 
 38943 ;;  r               2   42[COMRAM] unsigned int 
 38944 ;;  corners         1   44[COMRAM] unsigned char 
 38945 ;;  delta           2   45[COMRAM] unsigned int 
 38946 ;;  color           2   47[COMRAM] unsigned int 
 38947 ;; Auto vars:     Size  Location     Type
 38948 ;;  y               2   64[COMRAM] int 
 38949 ;;  x               2   62[COMRAM] int 
 38950 ;;  px              2   60[COMRAM] int 
 38951 ;;  py              2   58[COMRAM] int 
 38952 ;;  f               2   56[COMRAM] int 
 38953 ;;  ddF_y           2   54[COMRAM] int 
 38954 ;;  ddF_x           2   52[COMRAM] int 
 38955 ;; Return value:  Size  Location     Type
 38956 ;;                  1    wreg      void 
 38957 ;; Registers used:
 38958 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 38959 ;; Tracked objects:
 38960 ;;		On entry : 0/0
 38961 ;;		On exit  : 0/0
 38962 ;;		Unchanged: 0/0
 38963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 38964 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38965 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38966 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38967 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 38968 ;;Total ram usage:       28 bytes
 38969 ;; Hardware stack levels used:    1
 38970 ;; Hardware stack levels required when called:   11
 38971 ;; This function calls:
 38972 ;;		_drawVLine
 38973 ;; This function is called by:
 38974 ;;		_display_fillCircle
 38975 ;; This function uses a non-reentrant model
 38976 ;;
 38977                           
 38978                           	psect	text124
 38979  00A21A                     __ptext124:
 38980                           	callstack 0
 38981  00A21A                     _display_fillCircleHelper:
 38982                           	callstack 15
 38983                           
 38984                           ;LCD320x240color.c: 753: int16_t f = 1 - r;
 38985                           
 38986                           ;incstack = 0
 38987  00A21A  502B               	movf	display_fillCircleHelper@r^0,w,c
 38988  00A21C  0801               	sublw	1
 38989  00A21E  6E39               	movwf	display_fillCircleHelper@f^0,c
 38990  00A220  502C               	movf	(display_fillCircleHelper@r+1)^0,w,c
 38991  00A222  A0D8               	btfss	status,0,c
 38992  00A224  2AE8               	incf	wreg,f,c
 38993  00A226  0800               	sublw	0
 38994  00A228  6E3A               	movwf	(display_fillCircleHelper@f+1)^0,c
 38995                           
 38996                           ;LCD320x240color.c: 754: int16_t ddF_x = 1;
 38997  00A22A  0E00               	movlw	0
 38998  00A22C  6E36               	movwf	(display_fillCircleHelper@ddF_x+1)^0,c
 38999  00A22E  0E01               	movlw	1
 39000  00A230  6E35               	movwf	display_fillCircleHelper@ddF_x^0,c
 39001                           
 39002                           ;LCD320x240color.c: 755: int16_t ddF_y = -2 * r;
 39003  00A232  C02B  F032         	movff	display_fillCircleHelper@r,??_display_fillCircleHelper
 39004  00A236  C02C  F033         	movff	display_fillCircleHelper@r+1,??_display_fillCircleHelper+1
 39005  00A23A  90D8               	bcf	status,0,c
 39006  00A23C  3632               	rlcf	??_display_fillCircleHelper^0,f,c
 39007  00A23E  3633               	rlcf	(??_display_fillCircleHelper+1)^0,f,c
 39008  00A240  1E32               	comf	??_display_fillCircleHelper^0,f,c
 39009  00A242  1E33               	comf	(??_display_fillCircleHelper+1)^0,f,c
 39010  00A244  4A32               	infsnz	??_display_fillCircleHelper^0,f,c
 39011  00A246  2A33               	incf	(??_display_fillCircleHelper+1)^0,f,c
 39012  00A248  C032  F037         	movff	??_display_fillCircleHelper,display_fillCircleHelper@ddF_y
 39013  00A24C  C033  F038         	movff	??_display_fillCircleHelper+1,display_fillCircleHelper@ddF_y+1
 39014                           
 39015                           ;LCD320x240color.c: 756: int16_t x = 0;
 39016  00A250  0E00               	movlw	0
 39017  00A252  6E40               	movwf	(display_fillCircleHelper@x+1)^0,c
 39018  00A254  0E00               	movlw	0
 39019  00A256  6E3F               	movwf	display_fillCircleHelper@x^0,c
 39020                           
 39021                           ;LCD320x240color.c: 757: int16_t y = r;
 39022  00A258  C02B  F041         	movff	display_fillCircleHelper@r,display_fillCircleHelper@y
 39023  00A25C  C02C  F042         	movff	display_fillCircleHelper@r+1,display_fillCircleHelper@y+1
 39024                           
 39025                           ;LCD320x240color.c: 758: int16_t px = x;
 39026  00A260  0E00               	movlw	0
 39027  00A262  6E3E               	movwf	(display_fillCircleHelper@px+1)^0,c
 39028  00A264  0E00               	movlw	0
 39029  00A266  6E3D               	movwf	display_fillCircleHelper@px^0,c
 39030                           
 39031                           ;LCD320x240color.c: 759: int16_t py = y;
 39032  00A268  C041  F03B         	movff	display_fillCircleHelper@y,display_fillCircleHelper@py
 39033  00A26C  C042  F03C         	movff	display_fillCircleHelper@y+1,display_fillCircleHelper@py+1
 39034                           
 39035                           ;LCD320x240color.c: 761: delta++;
 39036  00A270  4A2E               	infsnz	display_fillCircleHelper@delta^0,f,c
 39037  00A272  2A2F               	incf	(display_fillCircleHelper@delta+1)^0,f,c
 39038                           
 39039                           ;LCD320x240color.c: 763: while(x < y) {
 39040  00A274  D0BA               	goto	l20205
 39041  00A276                     l20169:
 39042                           
 39043                           ;LCD320x240color.c: 764: if (f >= 0) {
 39044  00A276  BE3A               	btfsc	(display_fillCircleHelper@f+1)^0,7,c
 39045  00A278  D00B               	goto	l3339
 39046                           
 39047                           ;LCD320x240color.c: 765: y--;
 39048  00A27A  0641               	decf	display_fillCircleHelper@y^0,f,c
 39049  00A27C  A0D8               	btfss	status,0,c
 39050  00A27E  0642               	decf	(display_fillCircleHelper@y+1)^0,f,c
 39051                           
 39052                           ;LCD320x240color.c: 766: ddF_y += 2;
 39053  00A280  0E02               	movlw	2
 39054  00A282  2637               	addwf	display_fillCircleHelper@ddF_y^0,f,c
 39055  00A284  0E00               	movlw	0
 39056  00A286  2238               	addwfc	(display_fillCircleHelper@ddF_y+1)^0,f,c
 39057                           
 39058                           ;LCD320x240color.c: 767: f += ddF_y;
 39059  00A288  5037               	movf	display_fillCircleHelper@ddF_y^0,w,c
 39060  00A28A  2639               	addwf	display_fillCircleHelper@f^0,f,c
 39061  00A28C  5038               	movf	(display_fillCircleHelper@ddF_y+1)^0,w,c
 39062  00A28E  223A               	addwfc	(display_fillCircleHelper@f+1)^0,f,c
 39063  00A290                     l3339:
 39064                           
 39065                           ;LCD320x240color.c: 768: };LCD320x240color.c: 769: x++;
 39066  00A290  4A3F               	infsnz	display_fillCircleHelper@x^0,f,c
 39067  00A292  2A40               	incf	(display_fillCircleHelper@x+1)^0,f,c
 39068                           
 39069                           ;LCD320x240color.c: 770: ddF_x += 2;
 39070  00A294  0E02               	movlw	2
 39071  00A296  2635               	addwf	display_fillCircleHelper@ddF_x^0,f,c
 39072  00A298  0E00               	movlw	0
 39073  00A29A  2236               	addwfc	(display_fillCircleHelper@ddF_x+1)^0,f,c
 39074                           
 39075                           ;LCD320x240color.c: 771: f += ddF_x;
 39076  00A29C  5035               	movf	display_fillCircleHelper@ddF_x^0,w,c
 39077  00A29E  2639               	addwf	display_fillCircleHelper@f^0,f,c
 39078  00A2A0  5036               	movf	(display_fillCircleHelper@ddF_x+1)^0,w,c
 39079  00A2A2  223A               	addwfc	(display_fillCircleHelper@f+1)^0,f,c
 39080                           
 39081                           ;LCD320x240color.c: 774: if(x < (y + 1)) {
 39082  00A2A4  0E01               	movlw	1
 39083  00A2A6  2441               	addwf	display_fillCircleHelper@y^0,w,c
 39084  00A2A8  6E32               	movwf	??_display_fillCircleHelper^0,c
 39085  00A2AA  0E00               	movlw	0
 39086  00A2AC  2042               	addwfc	(display_fillCircleHelper@y+1)^0,w,c
 39087  00A2AE  6E33               	movwf	(??_display_fillCircleHelper+1)^0,c
 39088  00A2B0  5032               	movf	??_display_fillCircleHelper^0,w,c
 39089  00A2B2  5C3F               	subwf	display_fillCircleHelper@x^0,w,c
 39090  00A2B4  5040               	movf	(display_fillCircleHelper@x+1)^0,w,c
 39091  00A2B6  0A80               	xorlw	128
 39092  00A2B8  6E34               	movwf	(??_display_fillCircleHelper+2)^0,c
 39093  00A2BA  5033               	movf	(??_display_fillCircleHelper+1)^0,w,c
 39094  00A2BC  0A80               	xorlw	128
 39095  00A2BE  5834               	subwfb	(??_display_fillCircleHelper+2)^0,w,c
 39096  00A2C0  B0D8               	btfsc	status,0,c
 39097  00A2C2  D042               	goto	l20191
 39098                           
 39099                           ;LCD320x240color.c: 775: if(corners & 1) drawVLine(x0+x, y0-y, 2*y+delta, color);
 39100  00A2C4  A02D               	btfss	display_fillCircleHelper@corners^0,0,c
 39101  00A2C6  D01F               	goto	l20187
 39102  00A2C8  5027               	movf	display_fillCircleHelper@x0^0,w,c
 39103  00A2CA  243F               	addwf	display_fillCircleHelper@x^0,w,c
 39104  00A2CC  6E19               	movwf	drawVLine@x^0,c
 39105  00A2CE  5028               	movf	(display_fillCircleHelper@x0+1)^0,w,c
 39106  00A2D0  2040               	addwfc	(display_fillCircleHelper@x+1)^0,w,c
 39107  00A2D2  6E1A               	movwf	(drawVLine@x+1)^0,c
 39108  00A2D4  5041               	movf	display_fillCircleHelper@y^0,w,c
 39109  00A2D6  5C29               	subwf	display_fillCircleHelper@y0^0,w,c
 39110  00A2D8  6E1B               	movwf	drawVLine@y^0,c
 39111  00A2DA  5042               	movf	(display_fillCircleHelper@y+1)^0,w,c
 39112  00A2DC  582A               	subwfb	(display_fillCircleHelper@y0+1)^0,w,c
 39113  00A2DE  6E1C               	movwf	(drawVLine@y+1)^0,c
 39114  00A2E0  C041  F032         	movff	display_fillCircleHelper@y,??_display_fillCircleHelper
 39115  00A2E4  C042  F033         	movff	display_fillCircleHelper@y+1,??_display_fillCircleHelper+1
 39116  00A2E8  90D8               	bcf	status,0,c
 39117  00A2EA  3632               	rlcf	??_display_fillCircleHelper^0,f,c
 39118  00A2EC  3633               	rlcf	(??_display_fillCircleHelper+1)^0,f,c
 39119  00A2EE  502E               	movf	display_fillCircleHelper@delta^0,w,c
 39120  00A2F0  2432               	addwf	??_display_fillCircleHelper^0,w,c
 39121  00A2F2  6E1D               	movwf	drawVLine@h^0,c
 39122  00A2F4  502F               	movf	(display_fillCircleHelper@delta+1)^0,w,c
 39123  00A2F6  2033               	addwfc	(??_display_fillCircleHelper+1)^0,w,c
 39124  00A2F8  6E1E               	movwf	(drawVLine@h+1)^0,c
 39125  00A2FA  C030  F01F         	movff	display_fillCircleHelper@color,drawVLine@color
 39126  00A2FE  C031  F020         	movff	display_fillCircleHelper@color+1,drawVLine@color+1
 39127  00A302  ECCC  F063         	call	_drawVLine	;wreg free
 39128  00A306                     l20187:
 39129                           
 39130                           ;LCD320x240color.c: 776: if(corners & 2) drawVLine(x0-x, y0-y, 2*y+delta, color);
 39131  00A306  A22D               	btfss	display_fillCircleHelper@corners^0,1,c
 39132  00A308  D01F               	goto	l20191
 39133  00A30A  503F               	movf	display_fillCircleHelper@x^0,w,c
 39134  00A30C  5C27               	subwf	display_fillCircleHelper@x0^0,w,c
 39135  00A30E  6E19               	movwf	drawVLine@x^0,c
 39136  00A310  5040               	movf	(display_fillCircleHelper@x+1)^0,w,c
 39137  00A312  5828               	subwfb	(display_fillCircleHelper@x0+1)^0,w,c
 39138  00A314  6E1A               	movwf	(drawVLine@x+1)^0,c
 39139  00A316  5041               	movf	display_fillCircleHelper@y^0,w,c
 39140  00A318  5C29               	subwf	display_fillCircleHelper@y0^0,w,c
 39141  00A31A  6E1B               	movwf	drawVLine@y^0,c
 39142  00A31C  5042               	movf	(display_fillCircleHelper@y+1)^0,w,c
 39143  00A31E  582A               	subwfb	(display_fillCircleHelper@y0+1)^0,w,c
 39144  00A320  6E1C               	movwf	(drawVLine@y+1)^0,c
 39145  00A322  C041  F032         	movff	display_fillCircleHelper@y,??_display_fillCircleHelper
 39146  00A326  C042  F033         	movff	display_fillCircleHelper@y+1,??_display_fillCircleHelper+1
 39147  00A32A  90D8               	bcf	status,0,c
 39148  00A32C  3632               	rlcf	??_display_fillCircleHelper^0,f,c
 39149  00A32E  3633               	rlcf	(??_display_fillCircleHelper+1)^0,f,c
 39150  00A330  502E               	movf	display_fillCircleHelper@delta^0,w,c
 39151  00A332  2432               	addwf	??_display_fillCircleHelper^0,w,c
 39152  00A334  6E1D               	movwf	drawVLine@h^0,c
 39153  00A336  502F               	movf	(display_fillCircleHelper@delta+1)^0,w,c
 39154  00A338  2033               	addwfc	(??_display_fillCircleHelper+1)^0,w,c
 39155  00A33A  6E1E               	movwf	(drawVLine@h+1)^0,c
 39156  00A33C  C030  F01F         	movff	display_fillCircleHelper@color,drawVLine@color
 39157  00A340  C031  F020         	movff	display_fillCircleHelper@color+1,drawVLine@color+1
 39158  00A344  ECCC  F063         	call	_drawVLine	;wreg free
 39159  00A348                     l20191:
 39160                           
 39161                           ;LCD320x240color.c: 777: };LCD320x240color.c: 778: if(y != py) {
 39162  00A348  503B               	movf	display_fillCircleHelper@py^0,w,c
 39163  00A34A  1841               	xorwf	display_fillCircleHelper@y^0,w,c
 39164  00A34C  E104               	bnz	u22030
 39165  00A34E  503C               	movf	(display_fillCircleHelper@py+1)^0,w,c
 39166  00A350  1842               	xorwf	(display_fillCircleHelper@y+1)^0,w,c
 39167  00A352  B4D8               	btfsc	status,2,c
 39168  00A354  D046               	goto	l20203
 39169  00A356                     u22030:
 39170                           
 39171                           ;LCD320x240color.c: 779: if(corners & 1) drawVLine(x0+py, y0-px, 2*px+delta, color);
 39172  00A356  A02D               	btfss	display_fillCircleHelper@corners^0,0,c
 39173  00A358  D01F               	goto	l20197
 39174  00A35A  5027               	movf	display_fillCircleHelper@x0^0,w,c
 39175  00A35C  243B               	addwf	display_fillCircleHelper@py^0,w,c
 39176  00A35E  6E19               	movwf	drawVLine@x^0,c
 39177  00A360  5028               	movf	(display_fillCircleHelper@x0+1)^0,w,c
 39178  00A362  203C               	addwfc	(display_fillCircleHelper@py+1)^0,w,c
 39179  00A364  6E1A               	movwf	(drawVLine@x+1)^0,c
 39180  00A366  503D               	movf	display_fillCircleHelper@px^0,w,c
 39181  00A368  5C29               	subwf	display_fillCircleHelper@y0^0,w,c
 39182  00A36A  6E1B               	movwf	drawVLine@y^0,c
 39183  00A36C  503E               	movf	(display_fillCircleHelper@px+1)^0,w,c
 39184  00A36E  582A               	subwfb	(display_fillCircleHelper@y0+1)^0,w,c
 39185  00A370  6E1C               	movwf	(drawVLine@y+1)^0,c
 39186  00A372  C03D  F032         	movff	display_fillCircleHelper@px,??_display_fillCircleHelper
 39187  00A376  C03E  F033         	movff	display_fillCircleHelper@px+1,??_display_fillCircleHelper+1
 39188  00A37A  90D8               	bcf	status,0,c
 39189  00A37C  3632               	rlcf	??_display_fillCircleHelper^0,f,c
 39190  00A37E  3633               	rlcf	(??_display_fillCircleHelper+1)^0,f,c
 39191  00A380  502E               	movf	display_fillCircleHelper@delta^0,w,c
 39192  00A382  2432               	addwf	??_display_fillCircleHelper^0,w,c
 39193  00A384  6E1D               	movwf	drawVLine@h^0,c
 39194  00A386  502F               	movf	(display_fillCircleHelper@delta+1)^0,w,c
 39195  00A388  2033               	addwfc	(??_display_fillCircleHelper+1)^0,w,c
 39196  00A38A  6E1E               	movwf	(drawVLine@h+1)^0,c
 39197  00A38C  C030  F01F         	movff	display_fillCircleHelper@color,drawVLine@color
 39198  00A390  C031  F020         	movff	display_fillCircleHelper@color+1,drawVLine@color+1
 39199  00A394  ECCC  F063         	call	_drawVLine	;wreg free
 39200  00A398                     l20197:
 39201                           
 39202                           ;LCD320x240color.c: 780: if(corners & 2) drawVLine(x0-py, y0-px, 2*px+delta, color);
 39203  00A398  A22D               	btfss	display_fillCircleHelper@corners^0,1,c
 39204  00A39A  D01F               	goto	l20201
 39205  00A39C  503B               	movf	display_fillCircleHelper@py^0,w,c
 39206  00A39E  5C27               	subwf	display_fillCircleHelper@x0^0,w,c
 39207  00A3A0  6E19               	movwf	drawVLine@x^0,c
 39208  00A3A2  503C               	movf	(display_fillCircleHelper@py+1)^0,w,c
 39209  00A3A4  5828               	subwfb	(display_fillCircleHelper@x0+1)^0,w,c
 39210  00A3A6  6E1A               	movwf	(drawVLine@x+1)^0,c
 39211  00A3A8  503D               	movf	display_fillCircleHelper@px^0,w,c
 39212  00A3AA  5C29               	subwf	display_fillCircleHelper@y0^0,w,c
 39213  00A3AC  6E1B               	movwf	drawVLine@y^0,c
 39214  00A3AE  503E               	movf	(display_fillCircleHelper@px+1)^0,w,c
 39215  00A3B0  582A               	subwfb	(display_fillCircleHelper@y0+1)^0,w,c
 39216  00A3B2  6E1C               	movwf	(drawVLine@y+1)^0,c
 39217  00A3B4  C03D  F032         	movff	display_fillCircleHelper@px,??_display_fillCircleHelper
 39218  00A3B8  C03E  F033         	movff	display_fillCircleHelper@px+1,??_display_fillCircleHelper+1
 39219  00A3BC  90D8               	bcf	status,0,c
 39220  00A3BE  3632               	rlcf	??_display_fillCircleHelper^0,f,c
 39221  00A3C0  3633               	rlcf	(??_display_fillCircleHelper+1)^0,f,c
 39222  00A3C2  502E               	movf	display_fillCircleHelper@delta^0,w,c
 39223  00A3C4  2432               	addwf	??_display_fillCircleHelper^0,w,c
 39224  00A3C6  6E1D               	movwf	drawVLine@h^0,c
 39225  00A3C8  502F               	movf	(display_fillCircleHelper@delta+1)^0,w,c
 39226  00A3CA  2033               	addwfc	(??_display_fillCircleHelper+1)^0,w,c
 39227  00A3CC  6E1E               	movwf	(drawVLine@h+1)^0,c
 39228  00A3CE  C030  F01F         	movff	display_fillCircleHelper@color,drawVLine@color
 39229  00A3D2  C031  F020         	movff	display_fillCircleHelper@color+1,drawVLine@color+1
 39230  00A3D6  ECCC  F063         	call	_drawVLine	;wreg free
 39231  00A3DA                     l20201:
 39232                           
 39233                           ;LCD320x240color.c: 781: py = y;
 39234  00A3DA  C041  F03B         	movff	display_fillCircleHelper@y,display_fillCircleHelper@py
 39235  00A3DE  C042  F03C         	movff	display_fillCircleHelper@y+1,display_fillCircleHelper@py+1
 39236  00A3E2                     l20203:
 39237                           
 39238                           ;LCD320x240color.c: 782: };LCD320x240color.c: 783: px = x;
 39239  00A3E2  C03F  F03D         	movff	display_fillCircleHelper@x,display_fillCircleHelper@px
 39240  00A3E6  C040  F03E         	movff	display_fillCircleHelper@x+1,display_fillCircleHelper@px+1
 39241  00A3EA                     l20205:
 39242  00A3EA  5041               	movf	display_fillCircleHelper@y^0,w,c
 39243  00A3EC  5C3F               	subwf	display_fillCircleHelper@x^0,w,c
 39244  00A3EE  5040               	movf	(display_fillCircleHelper@x+1)^0,w,c
 39245  00A3F0  0A80               	xorlw	128
 39246  00A3F2  6E32               	movwf	??_display_fillCircleHelper^0,c
 39247  00A3F4  5042               	movf	(display_fillCircleHelper@y+1)^0,w,c
 39248  00A3F6  0A80               	xorlw	128
 39249  00A3F8  5832               	subwfb	??_display_fillCircleHelper^0,w,c
 39250  00A3FA  B0D8               	btfsc	status,0,c
 39251  00A3FC  0012               	return	
 39252  00A3FE  D73B               	goto	l20169
 39253  00A400                     __end_of_display_fillCircleHelper:
 39254                           	callstack 0
 39255                           
 39256 ;; *************** function _display_drawTriangle *****************
 39257 ;; Defined at:
 39258 ;;		line 537 in file "LCD320x240color.c"
 39259 ;; Parameters:    Size  Location     Type
 39260 ;;  x0              2   10[BANK0 ] unsigned int 
 39261 ;;  y0              2   12[BANK0 ] unsigned int 
 39262 ;;  x1              2   14[BANK0 ] unsigned int 
 39263 ;;  y1              2   16[BANK0 ] unsigned int 
 39264 ;;  x2              2   18[BANK0 ] unsigned int 
 39265 ;;  y2              2   20[BANK0 ] unsigned int 
 39266 ;;  color           2   22[BANK0 ] unsigned int 
 39267 ;; Auto vars:     Size  Location     Type
 39268 ;;		None
 39269 ;; Return value:  Size  Location     Type
 39270 ;;                  1    wreg      void 
 39271 ;; Registers used:
 39272 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 39273 ;; Tracked objects:
 39274 ;;		On entry : 3F/0
 39275 ;;		On exit  : 0/0
 39276 ;;		Unchanged: 0/0
 39277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39278 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39281 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39282 ;;Total ram usage:       14 bytes
 39283 ;; Hardware stack levels used:    1
 39284 ;; Hardware stack levels required when called:   14
 39285 ;; This function calls:
 39286 ;;		_display_drawLine
 39287 ;; This function is called by:
 39288 ;;		_DrawAnalogClock
 39289 ;; This function uses a non-reentrant model
 39290 ;;
 39291                           
 39292                           	psect	text125
 39293  00D91C                     __ptext125:
 39294                           	callstack 0
 39295  00D91C                     _display_drawTriangle:
 39296                           	callstack 13
 39297                           
 39298                           ; BSR set to: 0
 39299                           ;LCD320x240color.c: 539: display_drawLine(x0, y0, x1, y1, color);
 39300                           
 39301                           ;incstack = 0
 39302  00D91C  C06A  F060         	movff	display_drawTriangle@x0,display_drawLine@x0
 39303  00D920  C06B  F061         	movff	display_drawTriangle@x0+1,display_drawLine@x0+1
 39304  00D924  C06C  F062         	movff	display_drawTriangle@y0,display_drawLine@y0
 39305  00D928  C06D  F063         	movff	display_drawTriangle@y0+1,display_drawLine@y0+1
 39306  00D92C  C06E  F064         	movff	display_drawTriangle@x1,display_drawLine@x1
 39307  00D930  C06F  F065         	movff	display_drawTriangle@x1+1,display_drawLine@x1+1
 39308  00D934  C070  F066         	movff	display_drawTriangle@y1,display_drawLine@y1
 39309  00D938  C071  F067         	movff	display_drawTriangle@y1+1,display_drawLine@y1+1
 39310  00D93C  C076  F068         	movff	display_drawTriangle@color,display_drawLine@color
 39311  00D940  C077  F069         	movff	display_drawTriangle@color+1,display_drawLine@color+1
 39312  00D944  ECA7  F05C         	call	_display_drawLine	;wreg free
 39313                           
 39314                           ;LCD320x240color.c: 540: display_drawLine(x1, y1, x2, y2, color);
 39315  00D948  C06E  F060         	movff	display_drawTriangle@x1,display_drawLine@x0
 39316  00D94C  C06F  F061         	movff	display_drawTriangle@x1+1,display_drawLine@x0+1
 39317  00D950  C070  F062         	movff	display_drawTriangle@y1,display_drawLine@y0
 39318  00D954  C071  F063         	movff	display_drawTriangle@y1+1,display_drawLine@y0+1
 39319  00D958  C072  F064         	movff	display_drawTriangle@x2,display_drawLine@x1
 39320  00D95C  C073  F065         	movff	display_drawTriangle@x2+1,display_drawLine@x1+1
 39321  00D960  C074  F066         	movff	display_drawTriangle@y2,display_drawLine@y1
 39322  00D964  C075  F067         	movff	display_drawTriangle@y2+1,display_drawLine@y1+1
 39323  00D968  C076  F068         	movff	display_drawTriangle@color,display_drawLine@color
 39324  00D96C  C077  F069         	movff	display_drawTriangle@color+1,display_drawLine@color+1
 39325  00D970  ECA7  F05C         	call	_display_drawLine	;wreg free
 39326                           
 39327                           ;LCD320x240color.c: 541: display_drawLine(x2, y2, x0, y0, color);
 39328  00D974  C072  F060         	movff	display_drawTriangle@x2,display_drawLine@x0
 39329  00D978  C073  F061         	movff	display_drawTriangle@x2+1,display_drawLine@x0+1
 39330  00D97C  C074  F062         	movff	display_drawTriangle@y2,display_drawLine@y0
 39331  00D980  C075  F063         	movff	display_drawTriangle@y2+1,display_drawLine@y0+1
 39332  00D984  C06A  F064         	movff	display_drawTriangle@x0,display_drawLine@x1
 39333  00D988  C06B  F065         	movff	display_drawTriangle@x0+1,display_drawLine@x1+1
 39334  00D98C  C06C  F066         	movff	display_drawTriangle@y0,display_drawLine@y1
 39335  00D990  C06D  F067         	movff	display_drawTriangle@y0+1,display_drawLine@y1+1
 39336  00D994  C076  F068         	movff	display_drawTriangle@color,display_drawLine@color
 39337  00D998  C077  F069         	movff	display_drawTriangle@color+1,display_drawLine@color+1
 39338  00D99C  ECA7  F05C         	call	_display_drawLine	;wreg free
 39339  00D9A0  0012               	return		;funcret
 39340  00D9A2                     __end_of_display_drawTriangle:
 39341                           	callstack 0
 39342                           
 39343 ;; *************** function _display_drawLine *****************
 39344 ;; Defined at:
 39345 ;;		line 513 in file "LCD320x240color.c"
 39346 ;; Parameters:    Size  Location     Type
 39347 ;;  x0              2    0[BANK0 ] unsigned int 
 39348 ;;  y0              2    2[BANK0 ] unsigned int 
 39349 ;;  x1              2    4[BANK0 ] unsigned int 
 39350 ;;  y1              2    6[BANK0 ] unsigned int 
 39351 ;;  color           2    8[BANK0 ] unsigned int 
 39352 ;; Auto vars:     Size  Location     Type
 39353 ;;  t               2   67[COMRAM] unsigned int 
 39354 ;;  t               2   65[COMRAM] unsigned int 
 39355 ;; Return value:  Size  Location     Type
 39356 ;;                  1    wreg      void 
 39357 ;; Registers used:
 39358 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 39359 ;; Tracked objects:
 39360 ;;		On entry : 0/0
 39361 ;;		On exit  : 0/0
 39362 ;;		Unchanged: 0/0
 39363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39364 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39365 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39367 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39368 ;;Total ram usage:       16 bytes
 39369 ;; Hardware stack levels used:    1
 39370 ;; Hardware stack levels required when called:   13
 39371 ;; This function calls:
 39372 ;;		_drawHLine
 39373 ;;		_drawVLine
 39374 ;;		_writeLine
 39375 ;; This function is called by:
 39376 ;;		_TouchAdjust
 39377 ;;		_DrawAnalogClock
 39378 ;;		_display_drawTriangle
 39379 ;; This function uses a non-reentrant model
 39380 ;;
 39381                           
 39382                           	psect	text126
 39383  00B94E                     __ptext126:
 39384                           	callstack 0
 39385  00B94E                     _display_drawLine:
 39386                           	callstack 16
 39387                           
 39388                           ;LCD320x240color.c: 515: if (x0 == x1) {
 39389                           
 39390                           ;incstack = 0
 39391  00B94E  0100               	movlb	0	; () banked
 39392  00B950  5164               	movf	display_drawLine@x1& (0+255),w,b
 39393  00B952  1960               	xorwf	display_drawLine@x0& (0+255),w,b
 39394  00B954  E131               	bnz	l20029
 39395  00B956  5165               	movf	(display_drawLine@x1+1)& (0+255),w,b
 39396  00B958  1961               	xorwf	(display_drawLine@x0+1)& (0+255),w,b
 39397  00B95A  A4D8               	btfss	status,2,c
 39398  00B95C  D02D               	goto	l20029
 39399                           
 39400                           ; BSR set to: 0
 39401                           ;LCD320x240color.c: 516: if (y0 > y1) { uint16_t t = y0; y0 = y1; y1 = t; };
 39402  00B95E  5162               	movf	display_drawLine@y0& (0+255),w,b
 39403  00B960  5D66               	subwf	display_drawLine@y1& (0+255),w,b
 39404  00B962  5163               	movf	(display_drawLine@y0+1)& (0+255),w,b
 39405  00B964  5967               	subwfb	(display_drawLine@y1+1)& (0+255),w,b
 39406  00B966  B0D8               	btfsc	status,0,c
 39407  00B968  D00C               	goto	l20027
 39408                           
 39409                           ; BSR set to: 0
 39410  00B96A  C062  F042         	movff	display_drawLine@y0,display_drawLine@t
 39411  00B96E  C063  F043         	movff	display_drawLine@y0+1,display_drawLine@t+1
 39412  00B972  C066  F062         	movff	display_drawLine@y1,display_drawLine@y0
 39413  00B976  C067  F063         	movff	display_drawLine@y1+1,display_drawLine@y0+1
 39414  00B97A  C042  F066         	movff	display_drawLine@t,display_drawLine@y1
 39415  00B97E  C043  F067         	movff	display_drawLine@t+1,display_drawLine@y1+1
 39416  00B982                     l20027:
 39417                           
 39418                           ; BSR set to: 0
 39419                           ;LCD320x240color.c: 517: drawVLine(x0, y0, y1 - y0 + 1, color);
 39420  00B982  C060  F019         	movff	display_drawLine@x0,drawVLine@x
 39421  00B986  C061  F01A         	movff	display_drawLine@x0+1,drawVLine@x+1
 39422  00B98A  C062  F01B         	movff	display_drawLine@y0,drawVLine@y
 39423  00B98E  C063  F01C         	movff	display_drawLine@y0+1,drawVLine@y+1
 39424  00B992  5162               	movf	display_drawLine@y0& (0+255),w,b
 39425  00B994  5D66               	subwf	display_drawLine@y1& (0+255),w,b
 39426  00B996  6E40               	movwf	??_display_drawLine^0,c
 39427  00B998  5163               	movf	(display_drawLine@y0+1)& (0+255),w,b
 39428  00B99A  5967               	subwfb	(display_drawLine@y1+1)& (0+255),w,b
 39429  00B99C  6E41               	movwf	(??_display_drawLine+1)^0,c
 39430  00B99E  0E01               	movlw	1
 39431  00B9A0  2440               	addwf	??_display_drawLine^0,w,c
 39432  00B9A2  6E1D               	movwf	drawVLine@h^0,c
 39433  00B9A4  0E00               	movlw	0
 39434  00B9A6  2041               	addwfc	(??_display_drawLine+1)^0,w,c
 39435  00B9A8  6E1E               	movwf	(drawVLine@h+1)^0,c
 39436  00B9AA  C068  F01F         	movff	display_drawLine@color,drawVLine@color
 39437  00B9AE  C069  F020         	movff	display_drawLine@color+1,drawVLine@color+1
 39438  00B9B2  ECCC  F063         	call	_drawVLine	;wreg free
 39439                           
 39440                           ;LCD320x240color.c: 518: } else if (y0 == y1) {
 39441  00B9B6  0012               	return	
 39442  00B9B8                     l20029:
 39443                           
 39444                           ; BSR set to: 0
 39445  00B9B8  5166               	movf	display_drawLine@y1& (0+255),w,b
 39446  00B9BA  1962               	xorwf	display_drawLine@y0& (0+255),w,b
 39447  00B9BC  E131               	bnz	l20037
 39448  00B9BE  5167               	movf	(display_drawLine@y1+1)& (0+255),w,b
 39449  00B9C0  1963               	xorwf	(display_drawLine@y0+1)& (0+255),w,b
 39450  00B9C2  A4D8               	btfss	status,2,c
 39451  00B9C4  D02D               	goto	l20037
 39452                           
 39453                           ; BSR set to: 0
 39454                           ;LCD320x240color.c: 519: if (x0 > x1) { uint16_t t = x0; x0 = x1; x1 = t; };
 39455  00B9C6  5160               	movf	display_drawLine@x0& (0+255),w,b
 39456  00B9C8  5D64               	subwf	display_drawLine@x1& (0+255),w,b
 39457  00B9CA  5161               	movf	(display_drawLine@x0+1)& (0+255),w,b
 39458  00B9CC  5965               	subwfb	(display_drawLine@x1+1)& (0+255),w,b
 39459  00B9CE  B0D8               	btfsc	status,0,c
 39460  00B9D0  D00C               	goto	l20035
 39461                           
 39462                           ; BSR set to: 0
 39463  00B9D2  C060  F044         	movff	display_drawLine@x0,display_drawLine@t_7090
 39464  00B9D6  C061  F045         	movff	display_drawLine@x0+1,display_drawLine@t_7090+1
 39465  00B9DA  C064  F060         	movff	display_drawLine@x1,display_drawLine@x0
 39466  00B9DE  C065  F061         	movff	display_drawLine@x1+1,display_drawLine@x0+1
 39467  00B9E2  C044  F064         	movff	display_drawLine@t_7090,display_drawLine@x1
 39468  00B9E6  C045  F065         	movff	display_drawLine@t_7090+1,display_drawLine@x1+1
 39469  00B9EA                     l20035:
 39470                           
 39471                           ; BSR set to: 0
 39472                           ;LCD320x240color.c: 520: drawHLine(x0, y0, x1 - x0 + 1, color);
 39473  00B9EA  C060  F019         	movff	display_drawLine@x0,drawHLine@x
 39474  00B9EE  C061  F01A         	movff	display_drawLine@x0+1,drawHLine@x+1
 39475  00B9F2  C062  F01B         	movff	display_drawLine@y0,drawHLine@y
 39476  00B9F6  C063  F01C         	movff	display_drawLine@y0+1,drawHLine@y+1
 39477  00B9FA  5160               	movf	display_drawLine@x0& (0+255),w,b
 39478  00B9FC  5D64               	subwf	display_drawLine@x1& (0+255),w,b
 39479  00B9FE  6E40               	movwf	??_display_drawLine^0,c
 39480  00BA00  5161               	movf	(display_drawLine@x0+1)& (0+255),w,b
 39481  00BA02  5965               	subwfb	(display_drawLine@x1+1)& (0+255),w,b
 39482  00BA04  6E41               	movwf	(??_display_drawLine+1)^0,c
 39483  00BA06  0E01               	movlw	1
 39484  00BA08  2440               	addwf	??_display_drawLine^0,w,c
 39485  00BA0A  6E1D               	movwf	drawHLine@w^0,c
 39486  00BA0C  0E00               	movlw	0
 39487  00BA0E  2041               	addwfc	(??_display_drawLine+1)^0,w,c
 39488  00BA10  6E1E               	movwf	(drawHLine@w+1)^0,c
 39489  00BA12  C068  F01F         	movff	display_drawLine@color,drawHLine@color
 39490  00BA16  C069  F020         	movff	display_drawLine@color+1,drawHLine@color+1
 39491  00BA1A  EC30  F064         	call	_drawHLine	;wreg free
 39492                           
 39493                           ;LCD320x240color.c: 521: } else {
 39494  00BA1E  0012               	return	
 39495  00BA20                     l20037:
 39496                           
 39497                           ; BSR set to: 0
 39498                           ;LCD320x240color.c: 522: writeLine(x0, y0, x1, y1, color);
 39499  00BA20  C060  F01F         	movff	display_drawLine@x0,writeLine@x0
 39500  00BA24  C061  F020         	movff	display_drawLine@x0+1,writeLine@x0+1
 39501  00BA28  C062  F021         	movff	display_drawLine@y0,writeLine@y0
 39502  00BA2C  C063  F022         	movff	display_drawLine@y0+1,writeLine@y0+1
 39503  00BA30  C064  F023         	movff	display_drawLine@x1,writeLine@x1
 39504  00BA34  C065  F024         	movff	display_drawLine@x1+1,writeLine@x1+1
 39505  00BA38  C066  F025         	movff	display_drawLine@y1,writeLine@y1
 39506  00BA3C  C067  F026         	movff	display_drawLine@y1+1,writeLine@y1+1
 39507  00BA40  C068  F027         	movff	display_drawLine@color,writeLine@color
 39508  00BA44  C069  F028         	movff	display_drawLine@color+1,writeLine@color+1
 39509  00BA48  EC26  F04F         	call	_writeLine	;wreg free
 39510  00BA4C  0012               	return		;funcret
 39511  00BA4E                     __end_of_display_drawLine:
 39512                           	callstack 0
 39513                           
 39514 ;; *************** function _writeLine *****************
 39515 ;; Defined at:
 39516 ;;		line 467 in file "LCD320x240color.c"
 39517 ;; Parameters:    Size  Location     Type
 39518 ;;  x0              2   30[COMRAM] unsigned int 
 39519 ;;  y0              2   32[COMRAM] unsigned int 
 39520 ;;  x1              2   34[COMRAM] unsigned int 
 39521 ;;  y1              2   36[COMRAM] unsigned int 
 39522 ;;  color           2   38[COMRAM] unsigned int 
 39523 ;; Auto vars:     Size  Location     Type
 39524 ;;  t               2   48[COMRAM] unsigned int 
 39525 ;;  t               2   46[COMRAM] unsigned int 
 39526 ;;  t               2   44[COMRAM] unsigned int 
 39527 ;;  t               2   42[COMRAM] unsigned int 
 39528 ;;  dx              2   60[COMRAM] int 
 39529 ;;  err             2   58[COMRAM] int 
 39530 ;;  ystep           2   56[COMRAM] int 
 39531 ;;  dy              2   54[COMRAM] int 
 39532 ;;  steep           1   62[COMRAM] unsigned char 
 39533 ;; Return value:  Size  Location     Type
 39534 ;;                  1    wreg      void 
 39535 ;; Registers used:
 39536 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 39537 ;; Tracked objects:
 39538 ;;		On entry : 3F/0
 39539 ;;		On exit  : 0/0
 39540 ;;		Unchanged: 0/0
 39541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39542 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39543 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39544 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39545 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39546 ;;Total ram usage:       33 bytes
 39547 ;; Hardware stack levels used:    1
 39548 ;; Hardware stack levels required when called:   12
 39549 ;; This function calls:
 39550 ;;		___awdiv
 39551 ;;		_lcd_draw_pixel_at
 39552 ;; This function is called by:
 39553 ;;		_display_drawLine
 39554 ;; This function uses a non-reentrant model
 39555 ;;
 39556                           
 39557                           	psect	text127
 39558  009E4C                     __ptext127:
 39559                           	callstack 0
 39560  009E4C                     _writeLine:
 39561                           	callstack 16
 39562                           
 39563                           ; BSR set to: 0
 39564                           ;LCD320x240color.c: 468: bool steep = (((int16_t)(y1 - y0)) < 0 ? -((int16_t)(y1 - y0)) 
      +                          : ((int16_t)(y1 - y0))) > (((int16_t)(x1 - x0)) < 0 ? -((int16_t)(x1 - x0)) : ((int16_t)
      +                          (x1 - x0)));
 39565                           
 39566                           ;incstack = 0
 39567  009E4C  5021               	movf	writeLine@y0^0,w,c
 39568  009E4E  5C25               	subwf	writeLine@y1^0,w,c
 39569  009E50  5022               	movf	(writeLine@y0+1)^0,w,c
 39570  009E52  5826               	subwfb	(writeLine@y1+1)^0,w,c
 39571  009E54  0B80               	andlw	128
 39572  009E56  A4D8               	btfss	status,2,c
 39573  009E58  D007               	goto	l19669
 39574                           
 39575                           ; BSR set to: 0
 39576  009E5A  5021               	movf	writeLine@y0^0,w,c
 39577  009E5C  5C25               	subwf	writeLine@y1^0,w,c
 39578  009E5E  6E33               	movwf	_writeLine$7072^0,c
 39579  009E60  5022               	movf	(writeLine@y0+1)^0,w,c
 39580  009E62  5826               	subwfb	(writeLine@y1+1)^0,w,c
 39581  009E64  6E34               	movwf	(_writeLine$7072+1)^0,c
 39582  009E66  D00E               	goto	l3243
 39583  009E68                     l19669:
 39584                           
 39585                           ; BSR set to: 0
 39586  009E68  5021               	movf	writeLine@y0^0,w,c
 39587  009E6A  5C25               	subwf	writeLine@y1^0,w,c
 39588  009E6C  6E29               	movwf	??_writeLine^0,c
 39589  009E6E  5022               	movf	(writeLine@y0+1)^0,w,c
 39590  009E70  5826               	subwfb	(writeLine@y1+1)^0,w,c
 39591  009E72  6E2A               	movwf	(??_writeLine+1)^0,c
 39592  009E74  1E29               	comf	??_writeLine^0,f,c
 39593  009E76  1E2A               	comf	(??_writeLine+1)^0,f,c
 39594  009E78  4A29               	infsnz	??_writeLine^0,f,c
 39595  009E7A  2A2A               	incf	(??_writeLine+1)^0,f,c
 39596  009E7C  C029  F033         	movff	??_writeLine,_writeLine$7072
 39597  009E80  C02A  F034         	movff	??_writeLine+1,_writeLine$7072+1
 39598  009E84                     l3243:
 39599                           
 39600                           ; BSR set to: 0
 39601  009E84  501F               	movf	writeLine@x0^0,w,c
 39602  009E86  5C23               	subwf	writeLine@x1^0,w,c
 39603  009E88  5020               	movf	(writeLine@x0+1)^0,w,c
 39604  009E8A  5824               	subwfb	(writeLine@x1+1)^0,w,c
 39605  009E8C  0B80               	andlw	128
 39606  009E8E  A4D8               	btfss	status,2,c
 39607  009E90  D007               	goto	l19673
 39608                           
 39609                           ; BSR set to: 0
 39610  009E92  501F               	movf	writeLine@x0^0,w,c
 39611  009E94  5C23               	subwf	writeLine@x1^0,w,c
 39612  009E96  6E35               	movwf	_writeLine$7073^0,c
 39613  009E98  5020               	movf	(writeLine@x0+1)^0,w,c
 39614  009E9A  5824               	subwfb	(writeLine@x1+1)^0,w,c
 39615  009E9C  6E36               	movwf	(_writeLine$7073+1)^0,c
 39616  009E9E  D00E               	goto	l3247
 39617  009EA0                     l19673:
 39618                           
 39619                           ; BSR set to: 0
 39620  009EA0  501F               	movf	writeLine@x0^0,w,c
 39621  009EA2  5C23               	subwf	writeLine@x1^0,w,c
 39622  009EA4  6E29               	movwf	??_writeLine^0,c
 39623  009EA6  5020               	movf	(writeLine@x0+1)^0,w,c
 39624  009EA8  5824               	subwfb	(writeLine@x1+1)^0,w,c
 39625  009EAA  6E2A               	movwf	(??_writeLine+1)^0,c
 39626  009EAC  1E29               	comf	??_writeLine^0,f,c
 39627  009EAE  1E2A               	comf	(??_writeLine+1)^0,f,c
 39628  009EB0  4A29               	infsnz	??_writeLine^0,f,c
 39629  009EB2  2A2A               	incf	(??_writeLine+1)^0,f,c
 39630  009EB4  C029  F035         	movff	??_writeLine,_writeLine$7073
 39631  009EB8  C02A  F036         	movff	??_writeLine+1,_writeLine$7073+1
 39632  009EBC                     l3247:
 39633                           
 39634                           ; BSR set to: 0
 39635  009EBC  5033               	movf	_writeLine$7072^0,w,c
 39636  009EBE  5C35               	subwf	_writeLine$7073^0,w,c
 39637  009EC0  5036               	movf	(_writeLine$7073+1)^0,w,c
 39638  009EC2  0A80               	xorlw	128
 39639  009EC4  6E29               	movwf	??_writeLine^0,c
 39640  009EC6  5034               	movf	(_writeLine$7072+1)^0,w,c
 39641  009EC8  0A80               	xorlw	128
 39642  009ECA  5829               	subwfb	??_writeLine^0,w,c
 39643  009ECC  B0D8               	btfsc	status,0,c
 39644  009ECE  D002               	goto	u21150
 39645  009ED0  0E01               	movlw	1
 39646  009ED2  D001               	goto	u21160
 39647  009ED4                     u21150:
 39648  009ED4  0E00               	movlw	0
 39649  009ED6                     u21160:
 39650  009ED6  6E3F               	movwf	writeLine@steep^0,c
 39651                           
 39652                           ; BSR set to: 0
 39653                           ;LCD320x240color.c: 469: int16_t dx, dy, err, ystep;;LCD320x240color.c: 470: if (steep) 
      +                          {
 39654  009ED8  503F               	movf	writeLine@steep^0,w,c
 39655  009EDA  B4D8               	btfsc	status,2,c
 39656  009EDC  D018               	goto	l19679
 39657                           
 39658                           ; BSR set to: 0
 39659                           ;LCD320x240color.c: 471: { uint16_t t = x0; x0 = y0; y0 = t; };
 39660  009EDE  C01F  F02B         	movff	writeLine@x0,writeLine@t
 39661  009EE2  C020  F02C         	movff	writeLine@x0+1,writeLine@t+1
 39662  009EE6  C021  F01F         	movff	writeLine@y0,writeLine@x0
 39663  009EEA  C022  F020         	movff	writeLine@y0+1,writeLine@x0+1
 39664  009EEE  C02B  F021         	movff	writeLine@t,writeLine@y0
 39665  009EF2  C02C  F022         	movff	writeLine@t+1,writeLine@y0+1
 39666                           
 39667                           ;LCD320x240color.c: 472: { uint16_t t = x1; x1 = y1; y1 = t; };
 39668  009EF6  C023  F02D         	movff	writeLine@x1,writeLine@t_7079
 39669  009EFA  C024  F02E         	movff	writeLine@x1+1,writeLine@t_7079+1
 39670  009EFE  C025  F023         	movff	writeLine@y1,writeLine@x1
 39671  009F02  C026  F024         	movff	writeLine@y1+1,writeLine@x1+1
 39672  009F06  C02D  F025         	movff	writeLine@t_7079,writeLine@y1
 39673  009F0A  C02E  F026         	movff	writeLine@t_7079+1,writeLine@y1+1
 39674  009F0E                     l19679:
 39675                           
 39676                           ; BSR set to: 0
 39677                           ;LCD320x240color.c: 473: };LCD320x240color.c: 475: if (x0 > x1) {
 39678  009F0E  501F               	movf	writeLine@x0^0,w,c
 39679  009F10  5C23               	subwf	writeLine@x1^0,w,c
 39680  009F12  5020               	movf	(writeLine@x0+1)^0,w,c
 39681  009F14  5824               	subwfb	(writeLine@x1+1)^0,w,c
 39682  009F16  B0D8               	btfsc	status,0,c
 39683  009F18  D018               	goto	l19683
 39684                           
 39685                           ; BSR set to: 0
 39686                           ;LCD320x240color.c: 476: { uint16_t t = x0; x0 = x1; x1 = t; };
 39687  009F1A  C01F  F02F         	movff	writeLine@x0,writeLine@t_7080
 39688  009F1E  C020  F030         	movff	writeLine@x0+1,writeLine@t_7080+1
 39689  009F22  C023  F01F         	movff	writeLine@x1,writeLine@x0
 39690  009F26  C024  F020         	movff	writeLine@x1+1,writeLine@x0+1
 39691  009F2A  C02F  F023         	movff	writeLine@t_7080,writeLine@x1
 39692  009F2E  C030  F024         	movff	writeLine@t_7080+1,writeLine@x1+1
 39693                           
 39694                           ;LCD320x240color.c: 477: { uint16_t t = y0; y0 = y1; y1 = t; };
 39695  009F32  C021  F031         	movff	writeLine@y0,writeLine@t_7081
 39696  009F36  C022  F032         	movff	writeLine@y0+1,writeLine@t_7081+1
 39697  009F3A  C025  F021         	movff	writeLine@y1,writeLine@y0
 39698  009F3E  C026  F022         	movff	writeLine@y1+1,writeLine@y0+1
 39699  009F42  C031  F025         	movff	writeLine@t_7081,writeLine@y1
 39700  009F46  C032  F026         	movff	writeLine@t_7081+1,writeLine@y1+1
 39701  009F4A                     l19683:
 39702                           
 39703                           ; BSR set to: 0
 39704                           ;LCD320x240color.c: 478: };LCD320x240color.c: 480: dx = x1 - x0;
 39705  009F4A  501F               	movf	writeLine@x0^0,w,c
 39706  009F4C  5C23               	subwf	writeLine@x1^0,w,c
 39707  009F4E  6E3D               	movwf	writeLine@dx^0,c
 39708  009F50  5020               	movf	(writeLine@x0+1)^0,w,c
 39709  009F52  5824               	subwfb	(writeLine@x1+1)^0,w,c
 39710  009F54  6E3E               	movwf	(writeLine@dx+1)^0,c
 39711                           
 39712                           ;LCD320x240color.c: 481: dy = (((int16_t)(y1 - y0)) < 0 ? -((int16_t)(y1 - y0)) : ((int1
      +                          6_t)(y1 - y0)));
 39713  009F56  5021               	movf	writeLine@y0^0,w,c
 39714  009F58  5C25               	subwf	writeLine@y1^0,w,c
 39715  009F5A  5022               	movf	(writeLine@y0+1)^0,w,c
 39716  009F5C  5826               	subwfb	(writeLine@y1+1)^0,w,c
 39717  009F5E  0B80               	andlw	128
 39718  009F60  A4D8               	btfss	status,2,c
 39719  009F62  D007               	goto	l19687
 39720                           
 39721                           ; BSR set to: 0
 39722  009F64  5021               	movf	writeLine@y0^0,w,c
 39723  009F66  5C25               	subwf	writeLine@y1^0,w,c
 39724  009F68  6E37               	movwf	writeLine@dy^0,c
 39725  009F6A  5022               	movf	(writeLine@y0+1)^0,w,c
 39726  009F6C  5826               	subwfb	(writeLine@y1+1)^0,w,c
 39727  009F6E  6E38               	movwf	(writeLine@dy+1)^0,c
 39728  009F70  D00E               	goto	l19689
 39729  009F72                     l19687:
 39730                           
 39731                           ; BSR set to: 0
 39732  009F72  5021               	movf	writeLine@y0^0,w,c
 39733  009F74  5C25               	subwf	writeLine@y1^0,w,c
 39734  009F76  6E29               	movwf	??_writeLine^0,c
 39735  009F78  5022               	movf	(writeLine@y0+1)^0,w,c
 39736  009F7A  5826               	subwfb	(writeLine@y1+1)^0,w,c
 39737  009F7C  6E2A               	movwf	(??_writeLine+1)^0,c
 39738  009F7E  1E29               	comf	??_writeLine^0,f,c
 39739  009F80  1E2A               	comf	(??_writeLine+1)^0,f,c
 39740  009F82  4A29               	infsnz	??_writeLine^0,f,c
 39741  009F84  2A2A               	incf	(??_writeLine+1)^0,f,c
 39742  009F86  C029  F037         	movff	??_writeLine,writeLine@dy
 39743  009F8A  C02A  F038         	movff	??_writeLine+1,writeLine@dy+1
 39744  009F8E                     l19689:
 39745                           
 39746                           ; BSR set to: 0
 39747                           ;LCD320x240color.c: 483: err = dx / 2;
 39748  009F8E  C03D  F00E         	movff	writeLine@dx,___awdiv@dividend
 39749  009F92  C03E  F00F         	movff	writeLine@dx+1,___awdiv@dividend+1
 39750  009F96  0E00               	movlw	0
 39751  009F98  6E11               	movwf	(___awdiv@divisor+1)^0,c
 39752  009F9A  0E02               	movlw	2
 39753  009F9C  6E10               	movwf	___awdiv@divisor^0,c
 39754  009F9E  ECD1  F06C         	call	___awdiv	;wreg free
 39755  009FA2  C00E  F03B         	movff	?___awdiv,writeLine@err
 39756  009FA6  C00F  F03C         	movff	?___awdiv+1,writeLine@err+1
 39757                           
 39758                           ;LCD320x240color.c: 485: if (y0 < y1) {
 39759  009FAA  5025               	movf	writeLine@y1^0,w,c
 39760  009FAC  5C21               	subwf	writeLine@y0^0,w,c
 39761  009FAE  5026               	movf	(writeLine@y1+1)^0,w,c
 39762  009FB0  5822               	subwfb	(writeLine@y0+1)^0,w,c
 39763  009FB2  B0D8               	btfsc	status,0,c
 39764  009FB4  D005               	goto	l3254
 39765                           
 39766                           ;LCD320x240color.c: 486: ystep = 1;
 39767  009FB6  0E00               	movlw	0
 39768  009FB8  6E3A               	movwf	(writeLine@ystep+1)^0,c
 39769  009FBA  0E01               	movlw	1
 39770  009FBC  6E39               	movwf	writeLine@ystep^0,c
 39771                           
 39772                           ;LCD320x240color.c: 487: } else {
 39773  009FBE  D033               	goto	l19709
 39774  009FC0                     l3254:
 39775                           
 39776                           ;LCD320x240color.c: 488: ystep = -1;
 39777  009FC0  6839               	setf	writeLine@ystep^0,c
 39778  009FC2  683A               	setf	(writeLine@ystep+1)^0,c
 39779  009FC4  D030               	goto	l19709
 39780  009FC6                     l19695:
 39781                           
 39782                           ;LCD320x240color.c: 492: if (steep) {
 39783  009FC6  503F               	movf	writeLine@steep^0,w,c
 39784  009FC8  B4D8               	btfsc	status,2,c
 39785  009FCA  D00F               	goto	l19699
 39786                           
 39787                           ;LCD320x240color.c: 493: lcd_draw_pixel_at(y0, x0, color);
 39788  009FCC  C021  F019         	movff	writeLine@y0,lcd_draw_pixel_at@x
 39789  009FD0  C022  F01A         	movff	writeLine@y0+1,lcd_draw_pixel_at@x+1
 39790  009FD4  C01F  F01B         	movff	writeLine@x0,lcd_draw_pixel_at@y
 39791  009FD8  C020  F01C         	movff	writeLine@x0+1,lcd_draw_pixel_at@y+1
 39792  009FDC  C027  F01D         	movff	writeLine@color,lcd_draw_pixel_at@color
 39793  009FE0  C028  F01E         	movff	writeLine@color+1,lcd_draw_pixel_at@color+1
 39794  009FE4  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 39795                           
 39796                           ;LCD320x240color.c: 494: } else {
 39797  009FE8  D00E               	goto	l19701
 39798  009FEA                     l19699:
 39799                           
 39800                           ;LCD320x240color.c: 495: lcd_draw_pixel_at(x0, y0, color);
 39801  009FEA  C01F  F019         	movff	writeLine@x0,lcd_draw_pixel_at@x
 39802  009FEE  C020  F01A         	movff	writeLine@x0+1,lcd_draw_pixel_at@x+1
 39803  009FF2  C021  F01B         	movff	writeLine@y0,lcd_draw_pixel_at@y
 39804  009FF6  C022  F01C         	movff	writeLine@y0+1,lcd_draw_pixel_at@y+1
 39805  009FFA  C027  F01D         	movff	writeLine@color,lcd_draw_pixel_at@color
 39806  009FFE  C028  F01E         	movff	writeLine@color+1,lcd_draw_pixel_at@color+1
 39807  00A002  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 39808  00A006                     l19701:
 39809                           
 39810                           ;LCD320x240color.c: 496: };LCD320x240color.c: 497: err -= dy;
 39811  00A006  5037               	movf	writeLine@dy^0,w,c
 39812  00A008  5E3B               	subwf	writeLine@err^0,f,c
 39813  00A00A  5038               	movf	(writeLine@dy+1)^0,w,c
 39814  00A00C  5A3C               	subwfb	(writeLine@err+1)^0,f,c
 39815                           
 39816                           ;LCD320x240color.c: 498: if (err < 0) {
 39817  00A00E  AE3C               	btfss	(writeLine@err+1)^0,7,c
 39818  00A010  D008               	goto	l19707
 39819                           
 39820                           ;LCD320x240color.c: 499: y0 += ystep;
 39821  00A012  5039               	movf	writeLine@ystep^0,w,c
 39822  00A014  2621               	addwf	writeLine@y0^0,f,c
 39823  00A016  503A               	movf	(writeLine@ystep+1)^0,w,c
 39824  00A018  2222               	addwfc	(writeLine@y0+1)^0,f,c
 39825                           
 39826                           ;LCD320x240color.c: 500: err += dx;
 39827  00A01A  503D               	movf	writeLine@dx^0,w,c
 39828  00A01C  263B               	addwf	writeLine@err^0,f,c
 39829  00A01E  503E               	movf	(writeLine@dx+1)^0,w,c
 39830  00A020  223C               	addwfc	(writeLine@err+1)^0,f,c
 39831  00A022                     l19707:
 39832  00A022  4A1F               	infsnz	writeLine@x0^0,f,c
 39833  00A024  2A20               	incf	(writeLine@x0+1)^0,f,c
 39834  00A026                     l19709:
 39835  00A026  501F               	movf	writeLine@x0^0,w,c
 39836  00A028  5C23               	subwf	writeLine@x1^0,w,c
 39837  00A02A  5020               	movf	(writeLine@x0+1)^0,w,c
 39838  00A02C  5824               	subwfb	(writeLine@x1+1)^0,w,c
 39839  00A02E  A0D8               	btfss	status,0,c
 39840  00A030  0012               	return	
 39841  00A032  D7C9               	goto	l19695
 39842  00A034                     __end_of_writeLine:
 39843                           	callstack 0
 39844                           
 39845 ;; *************** function ___awdiv *****************
 39846 ;; Defined at:
 39847 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
 39848 ;; Parameters:    Size  Location     Type
 39849 ;;  dividend        2   13[COMRAM] int 
 39850 ;;  divisor         2   15[COMRAM] int 
 39851 ;; Auto vars:     Size  Location     Type
 39852 ;;  quotient        2   19[COMRAM] int 
 39853 ;;  sign            1   18[COMRAM] unsigned char 
 39854 ;;  counter         1   17[COMRAM] unsigned char 
 39855 ;; Return value:  Size  Location     Type
 39856 ;;                  2   13[COMRAM] int 
 39857 ;; Registers used:
 39858 ;;		wreg, status,2, status,0
 39859 ;; Tracked objects:
 39860 ;;		On entry : 0/0
 39861 ;;		On exit  : 0/0
 39862 ;;		Unchanged: 0/0
 39863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39864 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39865 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39867 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39868 ;;Total ram usage:        8 bytes
 39869 ;; Hardware stack levels used:    1
 39870 ;; Hardware stack levels required when called:    6
 39871 ;; This function calls:
 39872 ;;		Nothing
 39873 ;; This function is called by:
 39874 ;;		_DrawAnalogClock
 39875 ;;		_drawTempHumidity
 39876 ;;		_writeLine
 39877 ;;		_display_fillTriangle
 39878 ;;		_asctime
 39879 ;; This function uses a non-reentrant model
 39880 ;;
 39881                           
 39882                           	psect	text128
 39883  00D9A2                     __ptext128:
 39884                           	callstack 0
 39885  00D9A2                     ___awdiv:
 39886                           	callstack 21
 39887                           
 39888                           ;incstack = 0
 39889  00D9A2  0E00               	movlw	0
 39890  00D9A4  6E13               	movwf	___awdiv@sign^0,c
 39891  00D9A6  AE11               	btfss	(___awdiv@divisor+1)^0,7,c
 39892  00D9A8  D006               	goto	l19275
 39893  00D9AA  6C10               	negf	___awdiv@divisor^0,c
 39894  00D9AC  1E11               	comf	(___awdiv@divisor+1)^0,f,c
 39895  00D9AE  B0D8               	btfsc	status,0,c
 39896  00D9B0  2A11               	incf	(___awdiv@divisor+1)^0,f,c
 39897  00D9B2  0E01               	movlw	1
 39898  00D9B4  6E13               	movwf	___awdiv@sign^0,c
 39899  00D9B6                     l19275:
 39900  00D9B6  AE0F               	btfss	(___awdiv@dividend+1)^0,7,c
 39901  00D9B8  D006               	goto	l19281
 39902  00D9BA  6C0E               	negf	___awdiv@dividend^0,c
 39903  00D9BC  1E0F               	comf	(___awdiv@dividend+1)^0,f,c
 39904  00D9BE  B0D8               	btfsc	status,0,c
 39905  00D9C0  2A0F               	incf	(___awdiv@dividend+1)^0,f,c
 39906  00D9C2  0E01               	movlw	1
 39907  00D9C4  1A13               	xorwf	___awdiv@sign^0,f,c
 39908  00D9C6                     l19281:
 39909  00D9C6  0E00               	movlw	0
 39910  00D9C8  6E15               	movwf	(___awdiv@quotient+1)^0,c
 39911  00D9CA  0E00               	movlw	0
 39912  00D9CC  6E14               	movwf	___awdiv@quotient^0,c
 39913  00D9CE  5010               	movf	___awdiv@divisor^0,w,c
 39914  00D9D0  1011               	iorwf	(___awdiv@divisor+1)^0,w,c
 39915  00D9D2  B4D8               	btfsc	status,2,c
 39916  00D9D4  D01C               	goto	l19303
 39917  00D9D6  0E01               	movlw	1
 39918  00D9D8  6E12               	movwf	___awdiv@counter^0,c
 39919  00D9DA  D004               	goto	l19289
 39920  00D9DC                     l19287:
 39921  00D9DC  90D8               	bcf	status,0,c
 39922  00D9DE  3610               	rlcf	___awdiv@divisor^0,f,c
 39923  00D9E0  3611               	rlcf	(___awdiv@divisor+1)^0,f,c
 39924  00D9E2  2A12               	incf	___awdiv@counter^0,f,c
 39925  00D9E4                     l19289:
 39926  00D9E4  AE11               	btfss	(___awdiv@divisor+1)^0,7,c
 39927  00D9E6  D7FA               	goto	l19287
 39928  00D9E8                     u20670:
 39929  00D9E8  90D8               	bcf	status,0,c
 39930  00D9EA  3614               	rlcf	___awdiv@quotient^0,f,c
 39931  00D9EC  3615               	rlcf	(___awdiv@quotient+1)^0,f,c
 39932  00D9EE  5010               	movf	___awdiv@divisor^0,w,c
 39933  00D9F0  5C0E               	subwf	___awdiv@dividend^0,w,c
 39934  00D9F2  5011               	movf	(___awdiv@divisor+1)^0,w,c
 39935  00D9F4  580F               	subwfb	(___awdiv@dividend+1)^0,w,c
 39936  00D9F6  A0D8               	btfss	status,0,c
 39937  00D9F8  D005               	goto	l19299
 39938  00D9FA  5010               	movf	___awdiv@divisor^0,w,c
 39939  00D9FC  5E0E               	subwf	___awdiv@dividend^0,f,c
 39940  00D9FE  5011               	movf	(___awdiv@divisor+1)^0,w,c
 39941  00DA00  5A0F               	subwfb	(___awdiv@dividend+1)^0,f,c
 39942  00DA02  8014               	bsf	___awdiv@quotient^0,0,c
 39943  00DA04                     l19299:
 39944  00DA04  90D8               	bcf	status,0,c
 39945  00DA06  3211               	rrcf	(___awdiv@divisor+1)^0,f,c
 39946  00DA08  3210               	rrcf	___awdiv@divisor^0,f,c
 39947  00DA0A  2E12               	decfsz	___awdiv@counter^0,f,c
 39948  00DA0C  D7ED               	goto	u20670
 39949  00DA0E                     l19303:
 39950  00DA0E  5013               	movf	___awdiv@sign^0,w,c
 39951  00DA10  B4D8               	btfsc	status,2,c
 39952  00DA12  D004               	goto	l19307
 39953  00DA14  6C14               	negf	___awdiv@quotient^0,c
 39954  00DA16  1E15               	comf	(___awdiv@quotient+1)^0,f,c
 39955  00DA18  B0D8               	btfsc	status,0,c
 39956  00DA1A  2A15               	incf	(___awdiv@quotient+1)^0,f,c
 39957  00DA1C                     l19307:
 39958  00DA1C  C014  F00E         	movff	___awdiv@quotient,?___awdiv
 39959  00DA20  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
 39960  00DA24  0012               	return		;funcret
 39961  00DA26                     __end_of___awdiv:
 39962                           	callstack 0
 39963                           
 39964 ;; *************** function _drawVLine *****************
 39965 ;; Defined at:
 39966 ;;		line 438 in file "LCD320x240color.c"
 39967 ;; Parameters:    Size  Location     Type
 39968 ;;  x               2   24[COMRAM] unsigned int 
 39969 ;;  y               2   26[COMRAM] unsigned int 
 39970 ;;  h               2   28[COMRAM] unsigned int 
 39971 ;;  color           2   30[COMRAM] unsigned int 
 39972 ;; Auto vars:     Size  Location     Type
 39973 ;;  lo              1   37[COMRAM] unsigned char 
 39974 ;;  hi              1   36[COMRAM] unsigned char 
 39975 ;; Return value:  Size  Location     Type
 39976 ;;                  1    wreg      void 
 39977 ;; Registers used:
 39978 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 39979 ;; Tracked objects:
 39980 ;;		On entry : 0/0
 39981 ;;		On exit  : 0/0
 39982 ;;		Unchanged: 0/0
 39983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 39984 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39985 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39986 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39987 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 39988 ;;Total ram usage:       14 bytes
 39989 ;; Hardware stack levels used:    1
 39990 ;; Hardware stack levels required when called:   10
 39991 ;; This function calls:
 39992 ;;		_SPI1_Close
 39993 ;;		_addset
 39994 ;;		_spi_master_open
 39995 ;;		_write_data
 39996 ;; This function is called by:
 39997 ;;		_display_drawLine
 39998 ;;		_display_drawRect
 39999 ;;		_display_drawRoundRect
 40000 ;;		_display_fillCircleHelper
 40001 ;;		_display_fillCircle
 40002 ;; This function uses a non-reentrant model
 40003 ;;
 40004                           
 40005                           	psect	text129
 40006  00C798                     __ptext129:
 40007                           	callstack 0
 40008  00C798                     _drawVLine:
 40009                           	callstack 18
 40010                           
 40011                           ;LCD320x240color.c: 439: if ( (x < 320) && (y < 320) && h) {
 40012                           
 40013                           ;incstack = 0
 40014  00C798  0E40               	movlw	64
 40015  00C79A  5C19               	subwf	drawVLine@x^0,w,c
 40016  00C79C  0E01               	movlw	1
 40017  00C79E  581A               	subwfb	(drawVLine@x+1)^0,w,c
 40018  00C7A0  B0D8               	btfsc	status,0,c
 40019  00C7A2  0012               	return	
 40020  00C7A4  0E40               	movlw	64
 40021  00C7A6  5C1B               	subwf	drawVLine@y^0,w,c
 40022  00C7A8  0E01               	movlw	1
 40023  00C7AA  581C               	subwfb	(drawVLine@y+1)^0,w,c
 40024  00C7AC  B0D8               	btfsc	status,0,c
 40025  00C7AE  0012               	return	
 40026  00C7B0  501D               	movf	drawVLine@h^0,w,c
 40027  00C7B2  101E               	iorwf	(drawVLine@h+1)^0,w,c
 40028  00C7B4  B4D8               	btfsc	status,2,c
 40029  00C7B6  0012               	return	
 40030                           
 40031                           ;LCD320x240color.c: 440: uint8_t hi = color >>8;
 40032  00C7B8  C020  F025         	movff	drawVLine@color+1,drawVLine@hi
 40033                           
 40034                           ;LCD320x240color.c: 441: uint8_t lo = color & 0xff;
 40035  00C7BC  C01F  F026         	movff	drawVLine@color,drawVLine@lo
 40036                           
 40037                           ;LCD320x240color.c: 443: if ((y + h - 1) >= 320) h = 320 - y;
 40038  00C7C0  0EFF               	movlw	255
 40039  00C7C2  6E21               	movwf	??_drawVLine^0,c
 40040  00C7C4  0EFF               	movlw	255
 40041  00C7C6  6E22               	movwf	(??_drawVLine+1)^0,c
 40042  00C7C8  501D               	movf	drawVLine@h^0,w,c
 40043  00C7CA  241B               	addwf	drawVLine@y^0,w,c
 40044  00C7CC  6E23               	movwf	(??_drawVLine+2)^0,c
 40045  00C7CE  501E               	movf	(drawVLine@h+1)^0,w,c
 40046  00C7D0  201C               	addwfc	(drawVLine@y+1)^0,w,c
 40047  00C7D2  6E24               	movwf	(??_drawVLine+3)^0,c
 40048  00C7D4  5021               	movf	??_drawVLine^0,w,c
 40049  00C7D6  2623               	addwf	(??_drawVLine+2)^0,f,c
 40050  00C7D8  5022               	movf	(??_drawVLine+1)^0,w,c
 40051  00C7DA  2224               	addwfc	(??_drawVLine+3)^0,f,c
 40052  00C7DC  0E40               	movlw	64
 40053  00C7DE  5C23               	subwf	(??_drawVLine+2)^0,w,c
 40054  00C7E0  0E01               	movlw	1
 40055  00C7E2  5824               	subwfb	(??_drawVLine+3)^0,w,c
 40056  00C7E4  A0D8               	btfss	status,0,c
 40057  00C7E6  D008               	goto	l19655
 40058  00C7E8  501B               	movf	drawVLine@y^0,w,c
 40059  00C7EA  0840               	sublw	64
 40060  00C7EC  6E1D               	movwf	drawVLine@h^0,c
 40061  00C7EE  501C               	movf	(drawVLine@y+1)^0,w,c
 40062  00C7F0  A0D8               	btfss	status,0,c
 40063  00C7F2  2AE8               	incf	wreg,f,c
 40064  00C7F4  0801               	sublw	1
 40065  00C7F6  6E1E               	movwf	(drawVLine@h+1)^0,c
 40066  00C7F8                     l19655:
 40067                           
 40068                           ;LCD320x240color.c: 444: addset(x, y, x, y+h-1);
 40069  00C7F8  C019  F011         	movff	drawVLine@x,addset@x
 40070  00C7FC  C01A  F012         	movff	drawVLine@x+1,addset@x+1
 40071  00C800  C01B  F013         	movff	drawVLine@y,addset@y
 40072  00C804  C01C  F014         	movff	drawVLine@y+1,addset@y+1
 40073  00C808  C019  F015         	movff	drawVLine@x,addset@xx
 40074  00C80C  C01A  F016         	movff	drawVLine@x+1,addset@xx+1
 40075  00C810  501D               	movf	drawVLine@h^0,w,c
 40076  00C812  241B               	addwf	drawVLine@y^0,w,c
 40077  00C814  6E21               	movwf	??_drawVLine^0,c
 40078  00C816  501E               	movf	(drawVLine@h+1)^0,w,c
 40079  00C818  201C               	addwfc	(drawVLine@y+1)^0,w,c
 40080  00C81A  6E22               	movwf	(??_drawVLine+1)^0,c
 40081  00C81C  0EFF               	movlw	255
 40082  00C81E  2421               	addwf	??_drawVLine^0,w,c
 40083  00C820  6E17               	movwf	addset@yy^0,c
 40084  00C822  0EFF               	movlw	255
 40085  00C824  2022               	addwfc	(??_drawVLine+1)^0,w,c
 40086  00C826  6E18               	movwf	(addset@yy+1)^0,c
 40087  00C828  ECBF  F071         	call	_addset	;wreg free
 40088                           
 40089                           ;LCD320x240color.c: 445: if (spi_master_open(LCD8M)) {
 40090  00C82C  0E01               	movlw	1
 40091  00C82E  EC3E  F076         	call	_spi_master_open
 40092  00C832  0900               	iorlw	0
 40093  00C834  B4D8               	btfsc	status,2,c
 40094  00C836  0012               	return	
 40095                           
 40096                           ;LCD320x240color.c: 447: do { LATAbits.LATA0 = 0; } while(0);
 40097  00C838  9089               	bcf	137,0,c	;volatile
 40098  00C83A  D006               	goto	l19661
 40099  00C83C                     l19659:
 40100                           
 40101                           ;LCD320x240color.c: 449: write_data(hi);
 40102  00C83C  5025               	movf	drawVLine@hi^0,w,c
 40103  00C83E  EC4B  F07B         	call	_write_data
 40104                           
 40105                           ;LCD320x240color.c: 450: write_data(lo);
 40106  00C842  5026               	movf	drawVLine@lo^0,w,c
 40107  00C844  EC4B  F07B         	call	_write_data
 40108  00C848                     l19661:
 40109  00C848  061D               	decf	drawVLine@h^0,f,c
 40110  00C84A  A0D8               	btfss	status,0,c
 40111  00C84C  061E               	decf	(drawVLine@h+1)^0,f,c
 40112  00C84E  281D               	incf	drawVLine@h^0,w,c
 40113  00C850  E1F5               	bnz	l19659
 40114  00C852  281E               	incf	(drawVLine@h+1)^0,w,c
 40115  00C854  A4D8               	btfss	status,2,c
 40116  00C856  D7F2               	goto	l19659
 40117                           
 40118                           ;LCD320x240color.c: 451: };LCD320x240color.c: 452: do { LATAbits.LATA0 = 1; } while(0);
 40119  00C858  8089               	bsf	137,0,c	;volatile
 40120                           
 40121                           ;LCD320x240color.c: 453: SPI1_Close();
 40122  00C85A  ECFF  F07B         	call	_SPI1_Close	;wreg free
 40123  00C85E  0012               	return		;funcret
 40124  00C860                     __end_of_drawVLine:
 40125                           	callstack 0
 40126                           
 40127 ;; *************** function _drawHLine *****************
 40128 ;; Defined at:
 40129 ;;		line 411 in file "LCD320x240color.c"
 40130 ;; Parameters:    Size  Location     Type
 40131 ;;  x               2   24[COMRAM] unsigned int 
 40132 ;;  y               2   26[COMRAM] unsigned int 
 40133 ;;  w               2   28[COMRAM] unsigned int 
 40134 ;;  color           2   30[COMRAM] unsigned int 
 40135 ;; Auto vars:     Size  Location     Type
 40136 ;;  lo              1   37[COMRAM] unsigned char 
 40137 ;;  hi              1   36[COMRAM] unsigned char 
 40138 ;; Return value:  Size  Location     Type
 40139 ;;                  1    wreg      void 
 40140 ;; Registers used:
 40141 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 40142 ;; Tracked objects:
 40143 ;;		On entry : 0/0
 40144 ;;		On exit  : 0/0
 40145 ;;		Unchanged: 0/0
 40146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40147 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40148 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40149 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40150 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40151 ;;Total ram usage:       14 bytes
 40152 ;; Hardware stack levels used:    1
 40153 ;; Hardware stack levels required when called:   10
 40154 ;; This function calls:
 40155 ;;		_SPI1_Close
 40156 ;;		_addset
 40157 ;;		_spi_master_open
 40158 ;;		_write_data
 40159 ;; This function is called by:
 40160 ;;		_display_drawLine
 40161 ;;		_display_drawRect
 40162 ;;		_display_drawRoundRect
 40163 ;;		_display_fillTriangle
 40164 ;; This function uses a non-reentrant model
 40165 ;;
 40166                           
 40167                           	psect	text130
 40168  00C860                     __ptext130:
 40169                           	callstack 0
 40170  00C860                     _drawHLine:
 40171                           	callstack 18
 40172                           
 40173                           ;LCD320x240color.c: 412: if ( (x < 320) && (y < 320) && w) {
 40174                           
 40175                           ;incstack = 0
 40176  00C860  0E40               	movlw	64
 40177  00C862  5C19               	subwf	drawHLine@x^0,w,c
 40178  00C864  0E01               	movlw	1
 40179  00C866  581A               	subwfb	(drawHLine@x+1)^0,w,c
 40180  00C868  B0D8               	btfsc	status,0,c
 40181  00C86A  0012               	return	
 40182  00C86C  0E40               	movlw	64
 40183  00C86E  5C1B               	subwf	drawHLine@y^0,w,c
 40184  00C870  0E01               	movlw	1
 40185  00C872  581C               	subwfb	(drawHLine@y+1)^0,w,c
 40186  00C874  B0D8               	btfsc	status,0,c
 40187  00C876  0012               	return	
 40188  00C878  501D               	movf	drawHLine@w^0,w,c
 40189  00C87A  101E               	iorwf	(drawHLine@w+1)^0,w,c
 40190  00C87C  B4D8               	btfsc	status,2,c
 40191  00C87E  0012               	return	
 40192                           
 40193                           ;LCD320x240color.c: 413: uint8_t hi = color >>8;
 40194  00C880  C020  F025         	movff	drawHLine@color+1,drawHLine@hi
 40195                           
 40196                           ;LCD320x240color.c: 414: uint8_t lo = color & 0xff;
 40197  00C884  C01F  F026         	movff	drawHLine@color,drawHLine@lo
 40198                           
 40199                           ;LCD320x240color.c: 416: if ((x + w - 1) >= 320) w = 320 - x;
 40200  00C888  0EFF               	movlw	255
 40201  00C88A  6E21               	movwf	??_drawHLine^0,c
 40202  00C88C  0EFF               	movlw	255
 40203  00C88E  6E22               	movwf	(??_drawHLine+1)^0,c
 40204  00C890  501D               	movf	drawHLine@w^0,w,c
 40205  00C892  2419               	addwf	drawHLine@x^0,w,c
 40206  00C894  6E23               	movwf	(??_drawHLine+2)^0,c
 40207  00C896  501E               	movf	(drawHLine@w+1)^0,w,c
 40208  00C898  201A               	addwfc	(drawHLine@x+1)^0,w,c
 40209  00C89A  6E24               	movwf	(??_drawHLine+3)^0,c
 40210  00C89C  5021               	movf	??_drawHLine^0,w,c
 40211  00C89E  2623               	addwf	(??_drawHLine+2)^0,f,c
 40212  00C8A0  5022               	movf	(??_drawHLine+1)^0,w,c
 40213  00C8A2  2224               	addwfc	(??_drawHLine+3)^0,f,c
 40214  00C8A4  0E40               	movlw	64
 40215  00C8A6  5C23               	subwf	(??_drawHLine+2)^0,w,c
 40216  00C8A8  0E01               	movlw	1
 40217  00C8AA  5824               	subwfb	(??_drawHLine+3)^0,w,c
 40218  00C8AC  A0D8               	btfss	status,0,c
 40219  00C8AE  D008               	goto	l19633
 40220  00C8B0  5019               	movf	drawHLine@x^0,w,c
 40221  00C8B2  0840               	sublw	64
 40222  00C8B4  6E1D               	movwf	drawHLine@w^0,c
 40223  00C8B6  501A               	movf	(drawHLine@x+1)^0,w,c
 40224  00C8B8  A0D8               	btfss	status,0,c
 40225  00C8BA  2AE8               	incf	wreg,f,c
 40226  00C8BC  0801               	sublw	1
 40227  00C8BE  6E1E               	movwf	(drawHLine@w+1)^0,c
 40228  00C8C0                     l19633:
 40229                           
 40230                           ;LCD320x240color.c: 417: addset(x, y, x + w-1, y);
 40231  00C8C0  C019  F011         	movff	drawHLine@x,addset@x
 40232  00C8C4  C01A  F012         	movff	drawHLine@x+1,addset@x+1
 40233  00C8C8  C01B  F013         	movff	drawHLine@y,addset@y
 40234  00C8CC  C01C  F014         	movff	drawHLine@y+1,addset@y+1
 40235  00C8D0  501D               	movf	drawHLine@w^0,w,c
 40236  00C8D2  2419               	addwf	drawHLine@x^0,w,c
 40237  00C8D4  6E21               	movwf	??_drawHLine^0,c
 40238  00C8D6  501E               	movf	(drawHLine@w+1)^0,w,c
 40239  00C8D8  201A               	addwfc	(drawHLine@x+1)^0,w,c
 40240  00C8DA  6E22               	movwf	(??_drawHLine+1)^0,c
 40241  00C8DC  0EFF               	movlw	255
 40242  00C8DE  2421               	addwf	??_drawHLine^0,w,c
 40243  00C8E0  6E15               	movwf	addset@xx^0,c
 40244  00C8E2  0EFF               	movlw	255
 40245  00C8E4  2022               	addwfc	(??_drawHLine+1)^0,w,c
 40246  00C8E6  6E16               	movwf	(addset@xx+1)^0,c
 40247  00C8E8  C01B  F017         	movff	drawHLine@y,addset@yy
 40248  00C8EC  C01C  F018         	movff	drawHLine@y+1,addset@yy+1
 40249  00C8F0  ECBF  F071         	call	_addset	;wreg free
 40250                           
 40251                           ;LCD320x240color.c: 418: if (spi_master_open(LCD8M)) {
 40252  00C8F4  0E01               	movlw	1
 40253  00C8F6  EC3E  F076         	call	_spi_master_open
 40254  00C8FA  0900               	iorlw	0
 40255  00C8FC  B4D8               	btfsc	status,2,c
 40256  00C8FE  0012               	return	
 40257                           
 40258                           ;LCD320x240color.c: 420: do { LATAbits.LATA0 = 0; } while(0);
 40259  00C900  9089               	bcf	137,0,c	;volatile
 40260  00C902  D006               	goto	l19639
 40261  00C904                     l19637:
 40262                           
 40263                           ;LCD320x240color.c: 422: write_data(hi);
 40264  00C904  5025               	movf	drawHLine@hi^0,w,c
 40265  00C906  EC4B  F07B         	call	_write_data
 40266                           
 40267                           ;LCD320x240color.c: 423: write_data(lo);
 40268  00C90A  5026               	movf	drawHLine@lo^0,w,c
 40269  00C90C  EC4B  F07B         	call	_write_data
 40270  00C910                     l19639:
 40271  00C910  061D               	decf	drawHLine@w^0,f,c
 40272  00C912  A0D8               	btfss	status,0,c
 40273  00C914  061E               	decf	(drawHLine@w+1)^0,f,c
 40274  00C916  281D               	incf	drawHLine@w^0,w,c
 40275  00C918  E1F5               	bnz	l19637
 40276  00C91A  281E               	incf	(drawHLine@w+1)^0,w,c
 40277  00C91C  A4D8               	btfss	status,2,c
 40278  00C91E  D7F2               	goto	l19637
 40279                           
 40280                           ;LCD320x240color.c: 424: };LCD320x240color.c: 425: do { LATAbits.LATA0 = 1; } while(0);
 40281  00C920  8089               	bsf	137,0,c	;volatile
 40282                           
 40283                           ;LCD320x240color.c: 426: SPI1_Close();
 40284  00C922  ECFF  F07B         	call	_SPI1_Close	;wreg free
 40285  00C926  0012               	return		;funcret
 40286  00C928                     __end_of_drawHLine:
 40287                           	callstack 0
 40288                           
 40289 ;; *************** function _display_drawCircle *****************
 40290 ;; Defined at:
 40291 ;;		line 707 in file "LCD320x240color.c"
 40292 ;; Parameters:    Size  Location     Type
 40293 ;;  x0              2   30[COMRAM] unsigned int 
 40294 ;;  y0              2   32[COMRAM] unsigned int 
 40295 ;;  r               2   34[COMRAM] unsigned int 
 40296 ;;  color           2   36[COMRAM] unsigned int 
 40297 ;; Auto vars:     Size  Location     Type
 40298 ;;  y               2   48[COMRAM] int 
 40299 ;;  x               2   46[COMRAM] int 
 40300 ;;  f               2   44[COMRAM] int 
 40301 ;;  ddF_y           2   42[COMRAM] int 
 40302 ;;  ddF_x           2   40[COMRAM] int 
 40303 ;; Return value:  Size  Location     Type
 40304 ;;                  1    wreg      void 
 40305 ;; Registers used:
 40306 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 40307 ;; Tracked objects:
 40308 ;;		On entry : 0/1
 40309 ;;		On exit  : 0/0
 40310 ;;		Unchanged: 0/0
 40311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40312 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40313 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40314 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40315 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40316 ;;Total ram usage:       20 bytes
 40317 ;; Hardware stack levels used:    1
 40318 ;; Hardware stack levels required when called:   12
 40319 ;; This function calls:
 40320 ;;		_lcd_draw_pixel_at
 40321 ;; This function is called by:
 40322 ;;		_DrawAnalogClock
 40323 ;; This function uses a non-reentrant model
 40324 ;;
 40325                           
 40326                           	psect	text131
 40327  009806                     __ptext131:
 40328                           	callstack 0
 40329  009806                     _display_drawCircle:
 40330                           	callstack 15
 40331                           
 40332                           ;LCD320x240color.c: 708: int16_t f = 1 - r;
 40333                           
 40334                           ;incstack = 0
 40335  009806  5023               	movf	display_drawCircle@r^0,w,c
 40336  009808  0801               	sublw	1
 40337  00980A  6E2D               	movwf	display_drawCircle@f^0,c
 40338  00980C  5024               	movf	(display_drawCircle@r+1)^0,w,c
 40339  00980E  A0D8               	btfss	status,0,c
 40340  009810  2AE8               	incf	wreg,f,c
 40341  009812  0800               	sublw	0
 40342  009814  6E2E               	movwf	(display_drawCircle@f+1)^0,c
 40343                           
 40344                           ;LCD320x240color.c: 709: int16_t ddF_x = 1;
 40345  009816  0E00               	movlw	0
 40346  009818  6E2A               	movwf	(display_drawCircle@ddF_x+1)^0,c
 40347  00981A  0E01               	movlw	1
 40348  00981C  6E29               	movwf	display_drawCircle@ddF_x^0,c
 40349                           
 40350                           ;LCD320x240color.c: 710: int16_t ddF_y = -2 * r;
 40351  00981E  C023  F027         	movff	display_drawCircle@r,??_display_drawCircle
 40352  009822  C024  F028         	movff	display_drawCircle@r+1,??_display_drawCircle+1
 40353  009826  90D8               	bcf	status,0,c
 40354  009828  3627               	rlcf	??_display_drawCircle^0,f,c
 40355  00982A  3628               	rlcf	(??_display_drawCircle+1)^0,f,c
 40356  00982C  1E27               	comf	??_display_drawCircle^0,f,c
 40357  00982E  1E28               	comf	(??_display_drawCircle+1)^0,f,c
 40358  009830  4A27               	infsnz	??_display_drawCircle^0,f,c
 40359  009832  2A28               	incf	(??_display_drawCircle+1)^0,f,c
 40360  009834  C027  F02B         	movff	??_display_drawCircle,display_drawCircle@ddF_y
 40361  009838  C028  F02C         	movff	??_display_drawCircle+1,display_drawCircle@ddF_y+1
 40362                           
 40363                           ;LCD320x240color.c: 711: int16_t x = 0;
 40364  00983C  0E00               	movlw	0
 40365  00983E  6E30               	movwf	(display_drawCircle@x+1)^0,c
 40366  009840  0E00               	movlw	0
 40367  009842  6E2F               	movwf	display_drawCircle@x^0,c
 40368                           
 40369                           ;LCD320x240color.c: 712: int16_t y = r;
 40370  009844  C023  F031         	movff	display_drawCircle@r,display_drawCircle@y
 40371  009848  C024  F032         	movff	display_drawCircle@r+1,display_drawCircle@y+1
 40372                           
 40373                           ;LCD320x240color.c: 714: lcd_draw_pixel_at(x0 , y0+r, color);
 40374  00984C  C01F  F019         	movff	display_drawCircle@x0,lcd_draw_pixel_at@x
 40375  009850  C020  F01A         	movff	display_drawCircle@x0+1,lcd_draw_pixel_at@x+1
 40376  009854  5023               	movf	display_drawCircle@r^0,w,c
 40377  009856  2421               	addwf	display_drawCircle@y0^0,w,c
 40378  009858  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40379  00985A  5024               	movf	(display_drawCircle@r+1)^0,w,c
 40380  00985C  2022               	addwfc	(display_drawCircle@y0+1)^0,w,c
 40381  00985E  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40382  009860  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40383  009864  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40384  009868  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40385                           
 40386                           ;LCD320x240color.c: 715: lcd_draw_pixel_at(x0 , y0-r, color);
 40387  00986C  C01F  F019         	movff	display_drawCircle@x0,lcd_draw_pixel_at@x
 40388  009870  C020  F01A         	movff	display_drawCircle@x0+1,lcd_draw_pixel_at@x+1
 40389  009874  5023               	movf	display_drawCircle@r^0,w,c
 40390  009876  5C21               	subwf	display_drawCircle@y0^0,w,c
 40391  009878  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40392  00987A  5024               	movf	(display_drawCircle@r+1)^0,w,c
 40393  00987C  5822               	subwfb	(display_drawCircle@y0+1)^0,w,c
 40394  00987E  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40395  009880  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40396  009884  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40397  009888  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40398                           
 40399                           ;LCD320x240color.c: 716: lcd_draw_pixel_at(x0+r, y0 , color);
 40400  00988C  5023               	movf	display_drawCircle@r^0,w,c
 40401  00988E  241F               	addwf	display_drawCircle@x0^0,w,c
 40402  009890  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40403  009892  5024               	movf	(display_drawCircle@r+1)^0,w,c
 40404  009894  2020               	addwfc	(display_drawCircle@x0+1)^0,w,c
 40405  009896  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40406  009898  C021  F01B         	movff	display_drawCircle@y0,lcd_draw_pixel_at@y
 40407  00989C  C022  F01C         	movff	display_drawCircle@y0+1,lcd_draw_pixel_at@y+1
 40408  0098A0  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40409  0098A4  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40410  0098A8  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40411                           
 40412                           ;LCD320x240color.c: 717: lcd_draw_pixel_at(x0-r, y0 , color);
 40413  0098AC  5023               	movf	display_drawCircle@r^0,w,c
 40414  0098AE  5C1F               	subwf	display_drawCircle@x0^0,w,c
 40415  0098B0  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40416  0098B2  5024               	movf	(display_drawCircle@r+1)^0,w,c
 40417  0098B4  5820               	subwfb	(display_drawCircle@x0+1)^0,w,c
 40418  0098B6  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40419  0098B8  C021  F01B         	movff	display_drawCircle@y0,lcd_draw_pixel_at@y
 40420  0098BC  C022  F01C         	movff	display_drawCircle@y0+1,lcd_draw_pixel_at@y+1
 40421  0098C0  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40422  0098C4  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40423  0098C8  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40424                           
 40425                           ;LCD320x240color.c: 719: while (x < y) {
 40426  0098CC  D0A7               	goto	l20849
 40427  0098CE                     l20821:
 40428                           
 40429                           ;LCD320x240color.c: 720: if (f >= 0) {
 40430  0098CE  BE2E               	btfsc	(display_drawCircle@f+1)^0,7,c
 40431  0098D0  D00B               	goto	l3332
 40432                           
 40433                           ;LCD320x240color.c: 721: y--;
 40434  0098D2  0631               	decf	display_drawCircle@y^0,f,c
 40435  0098D4  A0D8               	btfss	status,0,c
 40436  0098D6  0632               	decf	(display_drawCircle@y+1)^0,f,c
 40437                           
 40438                           ;LCD320x240color.c: 722: ddF_y += 2;
 40439  0098D8  0E02               	movlw	2
 40440  0098DA  262B               	addwf	display_drawCircle@ddF_y^0,f,c
 40441  0098DC  0E00               	movlw	0
 40442  0098DE  222C               	addwfc	(display_drawCircle@ddF_y+1)^0,f,c
 40443                           
 40444                           ;LCD320x240color.c: 723: f += ddF_y;
 40445  0098E0  502B               	movf	display_drawCircle@ddF_y^0,w,c
 40446  0098E2  262D               	addwf	display_drawCircle@f^0,f,c
 40447  0098E4  502C               	movf	(display_drawCircle@ddF_y+1)^0,w,c
 40448  0098E6  222E               	addwfc	(display_drawCircle@f+1)^0,f,c
 40449  0098E8                     l3332:
 40450                           
 40451                           ;LCD320x240color.c: 724: };LCD320x240color.c: 725: x++;
 40452  0098E8  4A2F               	infsnz	display_drawCircle@x^0,f,c
 40453  0098EA  2A30               	incf	(display_drawCircle@x+1)^0,f,c
 40454                           
 40455                           ;LCD320x240color.c: 726: ddF_x += 2;
 40456  0098EC  0E02               	movlw	2
 40457  0098EE  2629               	addwf	display_drawCircle@ddF_x^0,f,c
 40458  0098F0  0E00               	movlw	0
 40459  0098F2  222A               	addwfc	(display_drawCircle@ddF_x+1)^0,f,c
 40460                           
 40461                           ;LCD320x240color.c: 727: f += ddF_x;
 40462  0098F4  5029               	movf	display_drawCircle@ddF_x^0,w,c
 40463  0098F6  262D               	addwf	display_drawCircle@f^0,f,c
 40464  0098F8  502A               	movf	(display_drawCircle@ddF_x+1)^0,w,c
 40465  0098FA  222E               	addwfc	(display_drawCircle@f+1)^0,f,c
 40466                           
 40467                           ;LCD320x240color.c: 729: lcd_draw_pixel_at(x0 + x, y0 + y, color);
 40468  0098FC  501F               	movf	display_drawCircle@x0^0,w,c
 40469  0098FE  242F               	addwf	display_drawCircle@x^0,w,c
 40470  009900  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40471  009902  5020               	movf	(display_drawCircle@x0+1)^0,w,c
 40472  009904  2030               	addwfc	(display_drawCircle@x+1)^0,w,c
 40473  009906  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40474  009908  5021               	movf	display_drawCircle@y0^0,w,c
 40475  00990A  2431               	addwf	display_drawCircle@y^0,w,c
 40476  00990C  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40477  00990E  5022               	movf	(display_drawCircle@y0+1)^0,w,c
 40478  009910  2032               	addwfc	(display_drawCircle@y+1)^0,w,c
 40479  009912  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40480  009914  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40481  009918  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40482  00991C  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40483                           
 40484                           ;LCD320x240color.c: 730: lcd_draw_pixel_at(x0 - x, y0 + y, color);
 40485  009920  502F               	movf	display_drawCircle@x^0,w,c
 40486  009922  5C1F               	subwf	display_drawCircle@x0^0,w,c
 40487  009924  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40488  009926  5030               	movf	(display_drawCircle@x+1)^0,w,c
 40489  009928  5820               	subwfb	(display_drawCircle@x0+1)^0,w,c
 40490  00992A  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40491  00992C  5021               	movf	display_drawCircle@y0^0,w,c
 40492  00992E  2431               	addwf	display_drawCircle@y^0,w,c
 40493  009930  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40494  009932  5022               	movf	(display_drawCircle@y0+1)^0,w,c
 40495  009934  2032               	addwfc	(display_drawCircle@y+1)^0,w,c
 40496  009936  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40497  009938  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40498  00993C  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40499  009940  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40500                           
 40501                           ;LCD320x240color.c: 731: lcd_draw_pixel_at(x0 + x, y0 - y, color);
 40502  009944  501F               	movf	display_drawCircle@x0^0,w,c
 40503  009946  242F               	addwf	display_drawCircle@x^0,w,c
 40504  009948  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40505  00994A  5020               	movf	(display_drawCircle@x0+1)^0,w,c
 40506  00994C  2030               	addwfc	(display_drawCircle@x+1)^0,w,c
 40507  00994E  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40508  009950  5031               	movf	display_drawCircle@y^0,w,c
 40509  009952  5C21               	subwf	display_drawCircle@y0^0,w,c
 40510  009954  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40511  009956  5032               	movf	(display_drawCircle@y+1)^0,w,c
 40512  009958  5822               	subwfb	(display_drawCircle@y0+1)^0,w,c
 40513  00995A  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40514  00995C  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40515  009960  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40516  009964  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40517                           
 40518                           ;LCD320x240color.c: 732: lcd_draw_pixel_at(x0 - x, y0 - y, color);
 40519  009968  502F               	movf	display_drawCircle@x^0,w,c
 40520  00996A  5C1F               	subwf	display_drawCircle@x0^0,w,c
 40521  00996C  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40522  00996E  5030               	movf	(display_drawCircle@x+1)^0,w,c
 40523  009970  5820               	subwfb	(display_drawCircle@x0+1)^0,w,c
 40524  009972  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40525  009974  5031               	movf	display_drawCircle@y^0,w,c
 40526  009976  5C21               	subwf	display_drawCircle@y0^0,w,c
 40527  009978  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40528  00997A  5032               	movf	(display_drawCircle@y+1)^0,w,c
 40529  00997C  5822               	subwfb	(display_drawCircle@y0+1)^0,w,c
 40530  00997E  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40531  009980  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40532  009984  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40533  009988  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40534                           
 40535                           ;LCD320x240color.c: 733: lcd_draw_pixel_at(x0 + y, y0 + x, color);
 40536  00998C  501F               	movf	display_drawCircle@x0^0,w,c
 40537  00998E  2431               	addwf	display_drawCircle@y^0,w,c
 40538  009990  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40539  009992  5020               	movf	(display_drawCircle@x0+1)^0,w,c
 40540  009994  2032               	addwfc	(display_drawCircle@y+1)^0,w,c
 40541  009996  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40542  009998  5021               	movf	display_drawCircle@y0^0,w,c
 40543  00999A  242F               	addwf	display_drawCircle@x^0,w,c
 40544  00999C  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40545  00999E  5022               	movf	(display_drawCircle@y0+1)^0,w,c
 40546  0099A0  2030               	addwfc	(display_drawCircle@x+1)^0,w,c
 40547  0099A2  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40548  0099A4  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40549  0099A8  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40550  0099AC  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40551                           
 40552                           ;LCD320x240color.c: 734: lcd_draw_pixel_at(x0 - y, y0 + x, color);
 40553  0099B0  5031               	movf	display_drawCircle@y^0,w,c
 40554  0099B2  5C1F               	subwf	display_drawCircle@x0^0,w,c
 40555  0099B4  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40556  0099B6  5032               	movf	(display_drawCircle@y+1)^0,w,c
 40557  0099B8  5820               	subwfb	(display_drawCircle@x0+1)^0,w,c
 40558  0099BA  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40559  0099BC  5021               	movf	display_drawCircle@y0^0,w,c
 40560  0099BE  242F               	addwf	display_drawCircle@x^0,w,c
 40561  0099C0  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40562  0099C2  5022               	movf	(display_drawCircle@y0+1)^0,w,c
 40563  0099C4  2030               	addwfc	(display_drawCircle@x+1)^0,w,c
 40564  0099C6  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40565  0099C8  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40566  0099CC  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40567  0099D0  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40568                           
 40569                           ;LCD320x240color.c: 735: lcd_draw_pixel_at(x0 + y, y0 - x, color);
 40570  0099D4  501F               	movf	display_drawCircle@x0^0,w,c
 40571  0099D6  2431               	addwf	display_drawCircle@y^0,w,c
 40572  0099D8  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40573  0099DA  5020               	movf	(display_drawCircle@x0+1)^0,w,c
 40574  0099DC  2032               	addwfc	(display_drawCircle@y+1)^0,w,c
 40575  0099DE  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40576  0099E0  502F               	movf	display_drawCircle@x^0,w,c
 40577  0099E2  5C21               	subwf	display_drawCircle@y0^0,w,c
 40578  0099E4  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40579  0099E6  5030               	movf	(display_drawCircle@x+1)^0,w,c
 40580  0099E8  5822               	subwfb	(display_drawCircle@y0+1)^0,w,c
 40581  0099EA  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40582  0099EC  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40583  0099F0  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40584  0099F4  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40585                           
 40586                           ;LCD320x240color.c: 736: lcd_draw_pixel_at(x0 - y, y0 - x, color);
 40587  0099F8  5031               	movf	display_drawCircle@y^0,w,c
 40588  0099FA  5C1F               	subwf	display_drawCircle@x0^0,w,c
 40589  0099FC  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 40590  0099FE  5032               	movf	(display_drawCircle@y+1)^0,w,c
 40591  009A00  5820               	subwfb	(display_drawCircle@x0+1)^0,w,c
 40592  009A02  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 40593  009A04  502F               	movf	display_drawCircle@x^0,w,c
 40594  009A06  5C21               	subwf	display_drawCircle@y0^0,w,c
 40595  009A08  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 40596  009A0A  5030               	movf	(display_drawCircle@x+1)^0,w,c
 40597  009A0C  5822               	subwfb	(display_drawCircle@y0+1)^0,w,c
 40598  009A0E  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 40599  009A10  C025  F01D         	movff	display_drawCircle@color,lcd_draw_pixel_at@color
 40600  009A14  C026  F01E         	movff	display_drawCircle@color+1,lcd_draw_pixel_at@color+1
 40601  009A18  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 40602  009A1C                     l20849:
 40603  009A1C  5031               	movf	display_drawCircle@y^0,w,c
 40604  009A1E  5C2F               	subwf	display_drawCircle@x^0,w,c
 40605  009A20  5030               	movf	(display_drawCircle@x+1)^0,w,c
 40606  009A22  0A80               	xorlw	128
 40607  009A24  6E27               	movwf	??_display_drawCircle^0,c
 40608  009A26  5032               	movf	(display_drawCircle@y+1)^0,w,c
 40609  009A28  0A80               	xorlw	128
 40610  009A2A  5827               	subwfb	??_display_drawCircle^0,w,c
 40611  009A2C  B0D8               	btfsc	status,0,c
 40612  009A2E  0012               	return	
 40613  009A30  D74E               	goto	l20821
 40614  009A32                     __end_of_display_drawCircle:
 40615                           	callstack 0
 40616                           
 40617 ;; *************** function _display_drawChars *****************
 40618 ;; Defined at:
 40619 ;;		line 355 in file "LCD320x240color.c"
 40620 ;; Parameters:    Size  Location     Type
 40621 ;;  x               2   10[BANK0 ] unsigned int 
 40622 ;;  y               2   12[BANK0 ] unsigned int 
 40623 ;;  s               2   14[BANK0 ] PTR unsigned char 
 40624 ;;		 -> drawTempHumidity@str2(50), drawTempHumidity@str1(50), drawDateTime@str(100), drawAlarmTime@str(100), 
 40625 ;;		 -> DrawSmallCalendar@str(5), DrawBigCalendar@str(5), DrawAnalogClock@str(3), TouchAdjMsg@str(100), 
 40626 ;;		 -> ButtonName(48), DrawSetBox@str(100), 
 40627 ;;  color           2   16[BANK0 ] unsigned int 
 40628 ;;  bg              2   18[BANK0 ] unsigned int 
 40629 ;;  size            1   20[BANK0 ] unsigned char 
 40630 ;; Auto vars:     Size  Location     Type
 40631 ;;  prev_bg         2   27[BANK0 ] unsigned int 
 40632 ;;  prev_color      2   25[BANK0 ] unsigned int 
 40633 ;;  prev_y          2   23[BANK0 ] unsigned int 
 40634 ;;  prev_x          2   21[BANK0 ] unsigned int 
 40635 ;;  prev_size       1   29[BANK0 ] unsigned char 
 40636 ;; Return value:  Size  Location     Type
 40637 ;;                  1    wreg      void 
 40638 ;; Registers used:
 40639 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 40640 ;; Tracked objects:
 40641 ;;		On entry : 3F/0
 40642 ;;		On exit  : 0/0
 40643 ;;		Unchanged: 0/0
 40644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40645 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40646 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40648 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40649 ;;Total ram usage:       20 bytes
 40650 ;; Hardware stack levels used:    1
 40651 ;; Hardware stack levels required when called:   14
 40652 ;; This function calls:
 40653 ;;		_display_puts
 40654 ;;		_display_setCursor
 40655 ;;		_display_setTextColor
 40656 ;;		_display_setTextSize
 40657 ;; This function is called by:
 40658 ;;		_DrawSetBox
 40659 ;;		_SettingProc
 40660 ;;		_TouchAdjMsg
 40661 ;;		_DrawAnalogClock
 40662 ;;		_DrawBigCalendar
 40663 ;;		_DrawSmallCalendar
 40664 ;;		_drawAlarmTime
 40665 ;;		_drawDateTime
 40666 ;;		_drawTempHumidity
 40667 ;; This function uses a non-reentrant model
 40668 ;;
 40669                           
 40670                           	psect	text132
 40671  00DA26                     __ptext132:
 40672                           	callstack 0
 40673  00DA26                     _display_drawChars:
 40674                           	callstack 14
 40675                           
 40676                           ; BSR set to: 0
 40677                           ;LCD320x240color.c: 357: uint16_t prev_x = Cursor_x,
 40678                           
 40679                           ;incstack = 0
 40680  00DA26  C2DD  F075         	movff	_Cursor_x,display_drawChars@prev_x
 40681  00DA2A  C2DE  F076         	movff	_Cursor_x+1,display_drawChars@prev_x+1
 40682                           
 40683                           ;LCD320x240color.c: 358: prev_y = Cursor_y,
 40684  00DA2E  C2DB  F077         	movff	_Cursor_y,display_drawChars@prev_y
 40685  00DA32  C2DC  F078         	movff	_Cursor_y+1,display_drawChars@prev_y+1
 40686                           
 40687                           ;LCD320x240color.c: 359: prev_color = Textcolor,
 40688  00DA36  C3F2  F079         	movff	_Textcolor,display_drawChars@prev_color
 40689  00DA3A  C3F3  F07A         	movff	_Textcolor+1,display_drawChars@prev_color+1
 40690                           
 40691                           ;LCD320x240color.c: 360: prev_bg = Textbgcolor;
 40692  00DA3E  C3F0  F07B         	movff	_Textbgcolor,display_drawChars@prev_bg
 40693  00DA42  C3F1  F07C         	movff	_Textbgcolor+1,display_drawChars@prev_bg+1
 40694                           
 40695                           ;LCD320x240color.c: 361: uint8_t prev_size = Textsize;
 40696  00DA46  C050  F07D         	movff	_Textsize,display_drawChars@prev_size
 40697                           
 40698                           ; BSR set to: 0
 40699                           ;LCD320x240color.c: 363: display_setCursor(x, y);
 40700  00DA4A  C06A  F00E         	movff	display_drawChars@x,display_setCursor@x
 40701  00DA4E  C06B  F00F         	movff	display_drawChars@x+1,display_setCursor@x+1
 40702  00DA52  C06C  F010         	movff	display_drawChars@y,display_setCursor@y
 40703  00DA56  C06D  F011         	movff	display_drawChars@y+1,display_setCursor@y+1
 40704  00DA5A  ECD2  F07A         	call	_display_setCursor	;wreg free
 40705                           
 40706                           ; BSR set to: 0
 40707                           ;LCD320x240color.c: 364: display_setTextSize(size);
 40708  00DA5E  5174               	movf	display_drawChars@size& (0+255),w,b
 40709  00DA60  ECE9  F079         	call	_display_setTextSize
 40710                           
 40711                           ;LCD320x240color.c: 365: display_setTextColor(color, bg);
 40712  00DA64  C070  F00E         	movff	display_drawChars@color,display_setTextColor@c
 40713  00DA68  C071  F00F         	movff	display_drawChars@color+1,display_setTextColor@c+1
 40714  00DA6C  C072  F010         	movff	display_drawChars@bg,display_setTextColor@b
 40715  00DA70  C073  F011         	movff	display_drawChars@bg+1,display_setTextColor@b+1
 40716  00DA74  ECC9  F07A         	call	_display_setTextColor	;wreg free
 40717                           
 40718                           ;LCD320x240color.c: 368: display_puts(s);
 40719  00DA78  C06E  F040         	movff	display_drawChars@s,display_puts@s
 40720  00DA7C  C06F  F041         	movff	display_drawChars@s+1,display_puts@s+1
 40721  00DA80  ECEB  F071         	call	_display_puts	;wreg free
 40722                           
 40723                           ;LCD320x240color.c: 370: Cursor_x = prev_x;
 40724  00DA84  C075  F2DD         	movff	display_drawChars@prev_x,_Cursor_x
 40725  00DA88  C076  F2DE         	movff	display_drawChars@prev_x+1,_Cursor_x+1
 40726                           
 40727                           ;LCD320x240color.c: 371: Cursor_y = prev_y;
 40728  00DA8C  C077  F2DB         	movff	display_drawChars@prev_y,_Cursor_y
 40729  00DA90  C078  F2DC         	movff	display_drawChars@prev_y+1,_Cursor_y+1
 40730                           
 40731                           ;LCD320x240color.c: 372: Textcolor = prev_color;
 40732  00DA94  C079  F3F2         	movff	display_drawChars@prev_color,_Textcolor
 40733  00DA98  C07A  F3F3         	movff	display_drawChars@prev_color+1,_Textcolor+1
 40734                           
 40735                           ;LCD320x240color.c: 373: Textbgcolor = prev_bg;
 40736  00DA9C  C07B  F3F0         	movff	display_drawChars@prev_bg,_Textbgcolor
 40737  00DAA0  C07C  F3F1         	movff	display_drawChars@prev_bg+1,_Textbgcolor+1
 40738                           
 40739                           ;LCD320x240color.c: 374: Textsize = prev_size;
 40740  00DAA4  C07D  F050         	movff	display_drawChars@prev_size,_Textsize
 40741  00DAA8  0012               	return		;funcret
 40742  00DAAA                     __end_of_display_drawChars:
 40743                           	callstack 0
 40744                           
 40745 ;; *************** function _display_setTextSize *****************
 40746 ;; Defined at:
 40747 ;;		line 96 in file "LCD320x240color.c"
 40748 ;; Parameters:    Size  Location     Type
 40749 ;;  s               1    wreg     unsigned char 
 40750 ;; Auto vars:     Size  Location     Type
 40751 ;;  s               1   15[COMRAM] unsigned char 
 40752 ;; Return value:  Size  Location     Type
 40753 ;;                  1    wreg      void 
 40754 ;; Registers used:
 40755 ;;		wreg, status,2
 40756 ;; Tracked objects:
 40757 ;;		On entry : 3F/0
 40758 ;;		On exit  : 0/0
 40759 ;;		Unchanged: 0/0
 40760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40762 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40764 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40765 ;;Total ram usage:        3 bytes
 40766 ;; Hardware stack levels used:    1
 40767 ;; Hardware stack levels required when called:    6
 40768 ;; This function calls:
 40769 ;;		Nothing
 40770 ;; This function is called by:
 40771 ;;		_display_drawChars
 40772 ;; This function uses a non-reentrant model
 40773 ;;
 40774                           
 40775                           	psect	text133
 40776  00F3D2                     __ptext133:
 40777                           	callstack 0
 40778  00F3D2                     _display_setTextSize:
 40779                           	callstack 21
 40780                           
 40781                           ;incstack = 0
 40782                           ;display_setTextSize@s stored from wreg
 40783  00F3D2  6E10               	movwf	display_setTextSize@s^0,c
 40784                           
 40785                           ;LCD320x240color.c: 97: Textsize = (s > 0) ? s : 1;
 40786  00F3D4  5010               	movf	display_setTextSize@s^0,w,c
 40787  00F3D6  A4D8               	btfss	status,2,c
 40788  00F3D8  D005               	goto	l20139
 40789  00F3DA  0E00               	movlw	0
 40790  00F3DC  6E0F               	movwf	(_display_setTextSize$6973+1)^0,c
 40791  00F3DE  0E01               	movlw	1
 40792  00F3E0  6E0E               	movwf	_display_setTextSize$6973^0,c
 40793  00F3E2  D003               	goto	l20141
 40794  00F3E4                     l20139:
 40795  00F3E4  C010  F00E         	movff	display_setTextSize@s,_display_setTextSize$6973
 40796  00F3E8  6A0F               	clrf	(_display_setTextSize$6973+1)^0,c
 40797  00F3EA                     l20141:
 40798  00F3EA  C00E  F050         	movff	_display_setTextSize$6973,_Textsize
 40799  00F3EE  0012               	return		;funcret
 40800  00F3F0                     __end_of_display_setTextSize:
 40801                           	callstack 0
 40802                           
 40803 ;; *************** function _display_setTextColor *****************
 40804 ;; Defined at:
 40805 ;;		line 87 in file "LCD320x240color.c"
 40806 ;; Parameters:    Size  Location     Type
 40807 ;;  c               2   13[COMRAM] unsigned int 
 40808 ;;  b               2   15[COMRAM] unsigned int 
 40809 ;; Auto vars:     Size  Location     Type
 40810 ;;		None
 40811 ;; Return value:  Size  Location     Type
 40812 ;;                  1    wreg      void 
 40813 ;; Registers used:
 40814 ;;		None
 40815 ;; Tracked objects:
 40816 ;;		On entry : 0/0
 40817 ;;		On exit  : 0/0
 40818 ;;		Unchanged: 0/0
 40819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40823 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40824 ;;Total ram usage:        4 bytes
 40825 ;; Hardware stack levels used:    1
 40826 ;; Hardware stack levels required when called:    6
 40827 ;; This function calls:
 40828 ;;		Nothing
 40829 ;; This function is called by:
 40830 ;;		_display_drawChars
 40831 ;; This function uses a non-reentrant model
 40832 ;;
 40833                           
 40834                           	psect	text134
 40835  00F592                     __ptext134:
 40836                           	callstack 0
 40837  00F592                     _display_setTextColor:
 40838                           	callstack 21
 40839                           
 40840                           ;LCD320x240color.c: 88: Textcolor = c;
 40841                           
 40842                           ;incstack = 0
 40843  00F592  C00E  F3F2         	movff	display_setTextColor@c,_Textcolor
 40844  00F596  C00F  F3F3         	movff	display_setTextColor@c+1,_Textcolor+1
 40845                           
 40846                           ;LCD320x240color.c: 89: Textbgcolor = b;
 40847  00F59A  C010  F3F0         	movff	display_setTextColor@b,_Textbgcolor
 40848  00F59E  C011  F3F1         	movff	display_setTextColor@b+1,_Textbgcolor+1
 40849  00F5A2  0012               	return		;funcret
 40850  00F5A4                     __end_of_display_setTextColor:
 40851                           	callstack 0
 40852                           
 40853 ;; *************** function _display_setCursor *****************
 40854 ;; Defined at:
 40855 ;;		line 197 in file "LCD320x240color.c"
 40856 ;; Parameters:    Size  Location     Type
 40857 ;;  x               2   13[COMRAM] unsigned int 
 40858 ;;  y               2   15[COMRAM] unsigned int 
 40859 ;; Auto vars:     Size  Location     Type
 40860 ;;		None
 40861 ;; Return value:  Size  Location     Type
 40862 ;;                  1    wreg      void 
 40863 ;; Registers used:
 40864 ;;		None
 40865 ;; Tracked objects:
 40866 ;;		On entry : 3F/0
 40867 ;;		On exit  : 3F/0
 40868 ;;		Unchanged: 3F/0
 40869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40870 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40873 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40874 ;;Total ram usage:        4 bytes
 40875 ;; Hardware stack levels used:    1
 40876 ;; Hardware stack levels required when called:    6
 40877 ;; This function calls:
 40878 ;;		Nothing
 40879 ;; This function is called by:
 40880 ;;		_display_drawChars
 40881 ;; This function uses a non-reentrant model
 40882 ;;
 40883                           
 40884                           	psect	text135
 40885  00F5A4                     __ptext135:
 40886                           	callstack 0
 40887  00F5A4                     _display_setCursor:
 40888                           	callstack 21
 40889                           
 40890                           ; BSR set to: 0
 40891                           ;LCD320x240color.c: 198: Cursor_x = x;
 40892                           
 40893                           ;incstack = 0
 40894  00F5A4  C00E  F2DD         	movff	display_setCursor@x,_Cursor_x
 40895  00F5A8  C00F  F2DE         	movff	display_setCursor@x+1,_Cursor_x+1
 40896                           
 40897                           ;LCD320x240color.c: 199: Cursor_y = y;
 40898  00F5AC  C010  F2DB         	movff	display_setCursor@y,_Cursor_y
 40899  00F5B0  C011  F2DC         	movff	display_setCursor@y+1,_Cursor_y+1
 40900                           
 40901                           ; BSR set to: 0
 40902  00F5B4  0012               	return		;funcret
 40903  00F5B6                     __end_of_display_setCursor:
 40904                           	callstack 0
 40905                           
 40906 ;; *************** function _display_puts *****************
 40907 ;; Defined at:
 40908 ;;		line 340 in file "LCD320x240color.c"
 40909 ;; Parameters:    Size  Location     Type
 40910 ;;  s               2   63[COMRAM] PTR unsigned char 
 40911 ;;		 -> drawTempHumidity@str2(50), drawTempHumidity@str1(50), drawDateTime@str(100), drawAlarmTime@str(100), 
 40912 ;;		 -> DrawSmallCalendar@str(5), DrawBigCalendar@str(5), DrawAnalogClock@str(3), TouchAdjMsg@str(100), 
 40913 ;;		 -> ButtonName(48), DrawSetBox@str(100), 
 40914 ;; Auto vars:     Size  Location     Type
 40915 ;;		None
 40916 ;; Return value:  Size  Location     Type
 40917 ;;                  1    wreg      void 
 40918 ;; Registers used:
 40919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 40920 ;; Tracked objects:
 40921 ;;		On entry : 0/0
 40922 ;;		On exit  : 0/0
 40923 ;;		Unchanged: 0/0
 40924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 40925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 40929 ;;Total ram usage:        2 bytes
 40930 ;; Hardware stack levels used:    1
 40931 ;; Hardware stack levels required when called:   13
 40932 ;; This function calls:
 40933 ;;		_display_putc
 40934 ;; This function is called by:
 40935 ;;		_display_drawChars
 40936 ;; This function uses a non-reentrant model
 40937 ;;
 40938                           
 40939                           	psect	text136
 40940  00E3D6                     __ptext136:
 40941                           	callstack 0
 40942  00E3D6                     _display_puts:
 40943                           	callstack 14
 40944                           
 40945                           ;LCD320x240color.c: 341: while(*s)
 40946                           
 40947                           ; BSR set to: 0
 40948                           ;incstack = 0
 40949  00E3D6  D015               	goto	l20151
 40950  00E3D8                     l20147:
 40951                           
 40952                           ;LCD320x240color.c: 342: display_putc(*s++);
 40953  00E3D8  C040  FFF6         	movff	display_puts@s,tblptrl
 40954  00E3DC  C041  FFF7         	movff	display_puts@s+1,tblptrh
 40955  00E3E0  0E00               	movlw	low (__mediumconst shr (0+16))
 40956  00E3E2  6EF8               	movwf	tblptru,c
 40957  00E3E4  0E0F               	movlw	(high __ramtop+-1)
 40958  00E3E6  64F7               	cpfsgt	tblptrh,c
 40959  00E3E8  D003               	bra	u21967
 40960  00E3EA  0008               	tblrd		*
 40961  00E3EC  50F5               	movf	tablat,w,c
 40962  00E3EE  D005               	bra	u21960
 40963  00E3F0                     u21967:
 40964  00E3F0  CFF6 FFE9          	movff	tblptrl,fsr0l
 40965  00E3F4  CFF7 FFEA          	movff	tblptrh,fsr0h
 40966  00E3F8  50EF               	movf	indf0,w,c
 40967  00E3FA                     u21960:
 40968  00E3FA  EC33  F042         	call	_display_putc
 40969                           
 40970                           ; BSR set to: 2
 40971  00E3FE  4A40               	infsnz	display_puts@s^0,f,c
 40972  00E400  2A41               	incf	(display_puts@s+1)^0,f,c
 40973  00E402                     l20151:
 40974  00E402  C040  FFF6         	movff	display_puts@s,tblptrl
 40975  00E406  C041  FFF7         	movff	display_puts@s+1,tblptrh
 40976  00E40A  0E00               	movlw	low (__mediumconst shr (0+16))
 40977  00E40C  6EF8               	movwf	tblptru,c
 40978  00E40E  0E0F               	movlw	(high __ramtop+-1)
 40979  00E410  64F7               	cpfsgt	tblptrh,c
 40980  00E412  D003               	bra	u21977
 40981  00E414  0008               	tblrd		*
 40982  00E416  50F5               	movf	tablat,w,c
 40983  00E418  D005               	bra	u21970
 40984  00E41A                     u21977:
 40985  00E41A  CFF6 FFE9          	movff	tblptrl,fsr0l
 40986  00E41E  CFF7 FFEA          	movff	tblptrh,fsr0h
 40987  00E422  50EF               	movf	indf0,w,c
 40988  00E424                     u21970:
 40989  00E424  0900               	iorlw	0
 40990  00E426  B4D8               	btfsc	status,2,c
 40991  00E428  0012               	return	
 40992  00E42A  D7D6               	goto	l20147
 40993  00E42C                     __end_of_display_puts:
 40994                           	callstack 0
 40995                           
 40996 ;; *************** function _display_putc *****************
 40997 ;; Defined at:
 40998 ;;		line 278 in file "LCD320x240color.c"
 40999 ;; Parameters:    Size  Location     Type
 41000 ;;  c               1    wreg     unsigned char 
 41001 ;; Auto vars:     Size  Location     Type
 41002 ;;  c               1    5[BANK0 ] unsigned char 
 41003 ;;  line            1    0[BANK0 ] unsigned char 
 41004 ;;  textsizeY       1    9[BANK0 ] unsigned char 
 41005 ;;  i               1    8[BANK0 ] unsigned char 
 41006 ;;  textsizeX       1    7[BANK0 ] unsigned char 
 41007 ;;  j               1    6[BANK0 ] unsigned char 
 41008 ;;  pitchX          1    4[BANK0 ] unsigned char 
 41009 ;;  fontYsize       1    3[BANK0 ] unsigned char 
 41010 ;;  fontXsize       1    2[BANK0 ] unsigned char 
 41011 ;;  pitchY          1    1[BANK0 ] unsigned char 
 41012 ;; Return value:  Size  Location     Type
 41013 ;;                  1    wreg      void 
 41014 ;; Registers used:
 41015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 41016 ;; Tracked objects:
 41017 ;;		On entry : 0/0
 41018 ;;		On exit  : 3F/2
 41019 ;;		Unchanged: 0/0
 41020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41022 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41023 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41024 ;;      Totals:         5      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41025 ;;Total ram usage:       15 bytes
 41026 ;; Hardware stack levels used:    1
 41027 ;; Hardware stack levels required when called:   12
 41028 ;; This function calls:
 41029 ;;		___wmul
 41030 ;;		_fillRect
 41031 ;;		_lcd_draw_pixel_at
 41032 ;; This function is called by:
 41033 ;;		_display_puts
 41034 ;; This function uses a non-reentrant model
 41035 ;;
 41036                           
 41037                           	psect	text137
 41038  008466                     __ptext137:
 41039                           	callstack 0
 41040  008466                     _display_putc:
 41041                           	callstack 14
 41042                           
 41043                           ;incstack = 0
 41044                           ;display_putc@c stored from wreg
 41045  008466  0100               	movlb	0	; () banked
 41046  008468  6F65               	movwf	display_putc@c& (0+255),b
 41047                           
 41048                           ;LCD320x240color.c: 279: uint8_t i, j;;LCD320x240color.c: 280: uint8_t textsizeX, textsi
      +                          zeY, pitchX, pitchY;;LCD320x240color.c: 282: uint8_t fontXsize = Font.xsize;
 41049  00846A  C3E0  F062         	movff	_Font,display_putc@fontXsize
 41050                           
 41051                           ;LCD320x240color.c: 283: uint8_t fontYsize = Font.ysize;
 41052  00846E  C3E1  F063         	movff	_Font+1,display_putc@fontYsize
 41053                           
 41054                           ;LCD320x240color.c: 285: if (Textsize < 0x10) {
 41055  008472  0E10               	movlw	16
 41056  008474  6050               	cpfslt	_Textsize^0,c
 41057  008476  D005               	goto	l19553
 41058                           
 41059                           ;LCD320x240color.c: 286: textsizeX = Textsize;
 41060  008478  C050  F067         	movff	_Textsize,display_putc@textsizeX
 41061                           
 41062                           ;LCD320x240color.c: 287: textsizeY = Textsize;
 41063  00847C  C050  F069         	movff	_Textsize,display_putc@textsizeY
 41064                           
 41065                           ;LCD320x240color.c: 288: } else {
 41066  008480  D007               	goto	l19555
 41067  008482                     l19553:
 41068                           
 41069                           ;LCD320x240color.c: 289: textsizeX = Textsize >> 4;
 41070  008482  3850               	swapf	_Textsize^0,w,c
 41071  008484  0B0F               	andlw	15
 41072  008486  0100               	movlb	0	; () banked
 41073  008488  6F67               	movwf	display_putc@textsizeX& (0+255),b
 41074                           
 41075                           ;LCD320x240color.c: 290: textsizeY = Textsize & 0x0f;
 41076  00848A  5050               	movf	_Textsize^0,w,c
 41077  00848C  0B0F               	andlw	15
 41078  00848E  6F69               	movwf	display_putc@textsizeY& (0+255),b
 41079  008490                     l19555:
 41080                           
 41081                           ;LCD320x240color.c: 291: };LCD320x240color.c: 293: pitchX = Font.xpitch * textsizeX;
 41082  008490  0103               	movlb	3	; () banked
 41083  008492  51E2               	movf	(_Font+2)& (0+255),w,b
 41084  008494  0100               	movlb	0	; () banked
 41085  008496  0367               	mulwf	display_putc@textsizeX& (0+255),b
 41086  008498  CFF3 F064          	movff	prodl,display_putc@pitchX
 41087                           
 41088                           ; BSR set to: 0
 41089                           ;LCD320x240color.c: 294: pitchY = Font.ypitch * textsizeY;
 41090  00849C  0103               	movlb	3	; () banked
 41091  00849E  51E3               	movf	(_Font+3)& (0+255),w,b
 41092  0084A0  0100               	movlb	0	; () banked
 41093  0084A2  0369               	mulwf	display_putc@textsizeY& (0+255),b
 41094  0084A4  CFF3 F061          	movff	prodl,display_putc@pitchY
 41095                           
 41096                           ;LCD320x240color.c: 296: if (c == ' ' && Cursor_x == 0 && wrap)
 41097  0084A8  0E20               	movlw	32
 41098  0084AA  1965               	xorwf	display_putc@c& (0+255),w,b
 41099  0084AC  A4D8               	btfss	status,2,c
 41100  0084AE  D005               	goto	l19563
 41101                           
 41102                           ; BSR set to: 0
 41103  0084B0  0102               	movlb	2	; () banked
 41104  0084B2  51DD               	movf	_Cursor_x& (0+255),w,b
 41105  0084B4  11DE               	iorwf	(_Cursor_x+1)& (0+255),w,b
 41106  0084B6  B4D8               	btfsc	status,2,c
 41107  0084B8  0012               	return	
 41108  0084BA                     l19563:
 41109                           
 41110                           ;LCD320x240color.c: 298: if (c == '\r') {
 41111  0084BA  0E0D               	movlw	13
 41112  0084BC  0100               	movlb	0	; () banked
 41113  0084BE  1965               	xorwf	display_putc@c& (0+255),w,b
 41114  0084C0  A4D8               	btfss	status,2,c
 41115  0084C2  D006               	goto	l19569
 41116                           
 41117                           ; BSR set to: 0
 41118                           ;LCD320x240color.c: 299: Cursor_x = 0;
 41119  0084C4  0E00               	movlw	0
 41120  0084C6  0102               	movlb	2	; () banked
 41121  0084C8  6FDE               	movwf	(_Cursor_x+1)& (0+255),b
 41122  0084CA  0E00               	movlw	0
 41123  0084CC  6FDD               	movwf	_Cursor_x& (0+255),b
 41124  0084CE  0012               	return	
 41125  0084D0                     l19569:
 41126                           
 41127                           ; BSR set to: 0
 41128                           ;LCD320x240color.c: 301: };LCD320x240color.c: 302: if (c == '\n') {
 41129  0084D0  0E0A               	movlw	10
 41130  0084D2  1965               	xorwf	display_putc@c& (0+255),w,b
 41131  0084D4  A4D8               	btfss	status,2,c
 41132  0084D6  D006               	goto	l19575
 41133                           
 41134                           ; BSR set to: 0
 41135                           ;LCD320x240color.c: 303: Cursor_y += pitchY;
 41136  0084D8  5161               	movf	display_putc@pitchY& (0+255),w,b
 41137  0084DA  0102               	movlb	2	; () banked
 41138  0084DC  27DB               	addwf	_Cursor_y& (0+255),f,b
 41139  0084DE  0E00               	movlw	0
 41140  0084E0  23DC               	addwfc	(_Cursor_y+1)& (0+255),f,b
 41141  0084E2  0012               	return	
 41142  0084E4                     l19575:
 41143                           
 41144                           ; BSR set to: 0
 41145                           ;LCD320x240color.c: 305: };LCD320x240color.c: 307: for(i = 0; i < fontXsize; i++ ) {
 41146  0084E4  0E00               	movlw	0
 41147  0084E6  6F68               	movwf	display_putc@i& (0+255),b
 41148  0084E8  D0C7               	goto	l19605
 41149  0084EA                     l19577:
 41150                           
 41151                           ; BSR set to: 0
 41152                           ;LCD320x240color.c: 308: uint8_t line = Font.font[8+ fontXsize * (c - Font.offset) + i];
 41153  0084EA  C062  F01D         	movff	display_putc@fontXsize,___wmul@multiplier
 41154  0084EE  6A1E               	clrf	(___wmul@multiplier+1)^0,c
 41155  0084F0  0103               	movlb	3	; () banked
 41156  0084F2  51E6               	movf	(_Font+6)& (0+255),w,b
 41157  0084F4  0100               	movlb	0	; () banked
 41158  0084F6  5D65               	subwf	display_putc@c& (0+255),w,b
 41159  0084F8  6E1F               	movwf	___wmul@multiplicand^0,c
 41160  0084FA  6A20               	clrf	(___wmul@multiplicand+1)^0,c
 41161  0084FC  A0D8               	btfss	status,0,c
 41162  0084FE  0620               	decf	(___wmul@multiplicand+1)^0,f,c
 41163  008500  EC12  F079         	call	___wmul	;wreg free
 41164  008504  EE23  F0E4         	lfsr	2,_Font+4
 41165  008508  CFDE F03B          	movff	postinc2,??_display_putc
 41166  00850C  CFDD F03C          	movff	postdec2,??_display_putc+1
 41167  008510  501D               	movf	?___wmul^0,w,c
 41168  008512  263B               	addwf	??_display_putc^0,f,c
 41169  008514  501E               	movf	(?___wmul+1)^0,w,c
 41170  008516  223C               	addwfc	(??_display_putc+1)^0,f,c
 41171  008518  0100               	movlb	0	; () banked
 41172  00851A  5168               	movf	display_putc@i& (0+255),w,b
 41173  00851C  263B               	addwf	??_display_putc^0,f,c
 41174  00851E  0E00               	movlw	0
 41175  008520  223C               	addwfc	(??_display_putc+1)^0,f,c
 41176  008522  0E08               	movlw	8
 41177  008524  263B               	addwf	??_display_putc^0,f,c
 41178  008526  0E00               	movlw	0
 41179  008528  223C               	addwfc	(??_display_putc+1)^0,f,c
 41180  00852A  C03B  FFF6         	movff	??_display_putc,tblptrl
 41181  00852E  C03C  FFF7         	movff	??_display_putc+1,tblptrh
 41182  008532                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 41183  008532  6AF8               	clrf	tblptru,c
 41184  008534                     	endif
 41185  008534                     	if	0	;tblptru may be non-zero
 41186  008534                     	endif
 41187  008534  0008               	tblrd		*
 41188  008536  CFF5 F060          	movff	tablat,display_putc@line
 41189                           
 41190                           ; BSR set to: 0
 41191                           ;LCD320x240color.c: 309: if (c == ' ') line = 0;
 41192  00853A  0E20               	movlw	32
 41193  00853C  1965               	xorwf	display_putc@c& (0+255),w,b
 41194  00853E  A4D8               	btfss	status,2,c
 41195  008540  D002               	goto	l3174
 41196                           
 41197                           ; BSR set to: 0
 41198  008542  0E00               	movlw	0
 41199  008544  6F60               	movwf	display_putc@line& (0+255),b
 41200  008546                     l3174:
 41201                           
 41202                           ; BSR set to: 0
 41203                           ;LCD320x240color.c: 310: for(j = 0; j < fontYsize; j++, line >>= 1) {
 41204  008546  0E00               	movlw	0
 41205  008548  6F66               	movwf	display_putc@j& (0+255),b
 41206  00854A  D091               	goto	l19601
 41207  00854C                     l3176:
 41208                           
 41209                           ; BSR set to: 0
 41210                           ;LCD320x240color.c: 311: if (line & 1) {
 41211  00854C  A160               	btfss	display_putc@line& (0+255),0,b
 41212  00854E  D041               	goto	l19589
 41213                           
 41214                           ; BSR set to: 0
 41215                           ;LCD320x240color.c: 312: if (Textsize == 1)
 41216  008550  0450               	decf	_Textsize^0,w,c
 41217  008552  A4D8               	btfss	status,2,c
 41218  008554  D016               	goto	l19587
 41219                           
 41220                           ; BSR set to: 0
 41221                           ;LCD320x240color.c: 313: lcd_draw_pixel_at(Cursor_x + i, Cursor_y + j, Textcolor);
 41222  008556  5168               	movf	display_putc@i& (0+255),w,b
 41223  008558  0102               	movlb	2	; () banked
 41224  00855A  25DD               	addwf	_Cursor_x& (0+255),w,b
 41225  00855C  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 41226  00855E  0E00               	movlw	0
 41227  008560  21DE               	addwfc	(_Cursor_x+1)& (0+255),w,b
 41228  008562  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 41229  008564  0100               	movlb	0	; () banked
 41230  008566  5166               	movf	display_putc@j& (0+255),w,b
 41231  008568  0102               	movlb	2	; () banked
 41232  00856A  25DB               	addwf	_Cursor_y& (0+255),w,b
 41233  00856C  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 41234  00856E  0E00               	movlw	0
 41235  008570  21DC               	addwfc	(_Cursor_y+1)& (0+255),w,b
 41236  008572  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 41237  008574  C3F2  F01D         	movff	_Textcolor,lcd_draw_pixel_at@color
 41238  008578  C3F3  F01E         	movff	_Textcolor+1,lcd_draw_pixel_at@color+1
 41239  00857C  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 41240  008580  D072               	goto	l19597
 41241  008582                     l19587:
 41242                           
 41243                           ; BSR set to: 0
 41244                           ;LCD320x240color.c: 314: else;LCD320x240color.c: 315: fillRect(Cursor_x + i * textsizeX,
      +                           Cursor_y + j * textsizeY, textsizeX, textsizeY, Textcolor);
 41245  008582  5168               	movf	display_putc@i& (0+255),w,b
 41246  008584  0367               	mulwf	display_putc@textsizeX& (0+255),b
 41247  008586  CFF3 F03B          	movff	prodl,??_display_putc
 41248  00858A  CFF4 F03C          	movff	prodh,??_display_putc+1
 41249  00858E  0102               	movlb	2	; () banked
 41250  008590  51DD               	movf	_Cursor_x& (0+255),w,b
 41251  008592  243B               	addwf	??_display_putc^0,w,c
 41252  008594  6E2D               	movwf	fillRect@x^0,c
 41253  008596  51DE               	movf	(_Cursor_x+1)& (0+255),w,b
 41254  008598  203C               	addwfc	(??_display_putc+1)^0,w,c
 41255  00859A  6E2E               	movwf	(fillRect@x+1)^0,c
 41256  00859C  0100               	movlb	0	; () banked
 41257  00859E  5166               	movf	display_putc@j& (0+255),w,b
 41258  0085A0  0369               	mulwf	display_putc@textsizeY& (0+255),b
 41259  0085A2  CFF3 F03D          	movff	prodl,??_display_putc+2
 41260  0085A6  CFF4 F03E          	movff	prodh,??_display_putc+3
 41261  0085AA  0102               	movlb	2	; () banked
 41262  0085AC  51DB               	movf	_Cursor_y& (0+255),w,b
 41263  0085AE  243D               	addwf	(??_display_putc+2)^0,w,c
 41264  0085B0  6E2F               	movwf	fillRect@y^0,c
 41265  0085B2  51DC               	movf	(_Cursor_y+1)& (0+255),w,b
 41266  0085B4  203E               	addwfc	(??_display_putc+3)^0,w,c
 41267  0085B6  6E30               	movwf	(fillRect@y+1)^0,c
 41268  0085B8  C067  F031         	movff	display_putc@textsizeX,fillRect@w
 41269  0085BC  6A32               	clrf	(fillRect@w+1)^0,c
 41270  0085BE  C069  F033         	movff	display_putc@textsizeY,fillRect@h
 41271  0085C2  6A34               	clrf	(fillRect@h+1)^0,c
 41272  0085C4  C3F2  F035         	movff	_Textcolor,fillRect@color
 41273  0085C8  C3F3  F036         	movff	_Textcolor+1,fillRect@color+1
 41274  0085CC  EC07  F071         	call	_fillRect	;wreg free
 41275  0085D0  D04A               	goto	l19597
 41276  0085D2                     l19589:
 41277                           
 41278                           ; BSR set to: 0
 41279                           ;LCD320x240color.c: 317: else if (Textbgcolor != Textcolor) {
 41280  0085D2  0103               	movlb	3	; () banked
 41281  0085D4  51F2               	movf	_Textcolor& (0+255),w,b
 41282  0085D6  19F0               	xorwf	_Textbgcolor& (0+255),w,b
 41283  0085D8  E104               	bnz	u20940
 41284  0085DA  51F3               	movf	(_Textcolor+1)& (0+255),w,b
 41285  0085DC  19F1               	xorwf	(_Textbgcolor+1)& (0+255),w,b
 41286  0085DE  B4D8               	btfsc	status,2,c
 41287  0085E0  D042               	goto	l19597
 41288  0085E2                     u20940:
 41289                           
 41290                           ; BSR set to: 3
 41291                           ;LCD320x240color.c: 319: if (Textsize == 1)
 41292  0085E2  0450               	decf	_Textsize^0,w,c
 41293  0085E4  A4D8               	btfss	status,2,c
 41294  0085E6  D017               	goto	l19595
 41295                           
 41296                           ; BSR set to: 3
 41297                           ;LCD320x240color.c: 320: lcd_draw_pixel_at(Cursor_x + i, Cursor_y + j, Textbgcolor);
 41298  0085E8  0100               	movlb	0	; () banked
 41299  0085EA  5168               	movf	display_putc@i& (0+255),w,b
 41300  0085EC  0102               	movlb	2	; () banked
 41301  0085EE  25DD               	addwf	_Cursor_x& (0+255),w,b
 41302  0085F0  6E19               	movwf	lcd_draw_pixel_at@x^0,c
 41303  0085F2  0E00               	movlw	0
 41304  0085F4  21DE               	addwfc	(_Cursor_x+1)& (0+255),w,b
 41305  0085F6  6E1A               	movwf	(lcd_draw_pixel_at@x+1)^0,c
 41306  0085F8  0100               	movlb	0	; () banked
 41307  0085FA  5166               	movf	display_putc@j& (0+255),w,b
 41308  0085FC  0102               	movlb	2	; () banked
 41309  0085FE  25DB               	addwf	_Cursor_y& (0+255),w,b
 41310  008600  6E1B               	movwf	lcd_draw_pixel_at@y^0,c
 41311  008602  0E00               	movlw	0
 41312  008604  21DC               	addwfc	(_Cursor_y+1)& (0+255),w,b
 41313  008606  6E1C               	movwf	(lcd_draw_pixel_at@y+1)^0,c
 41314  008608  C3F0  F01D         	movff	_Textbgcolor,lcd_draw_pixel_at@color
 41315  00860C  C3F1  F01E         	movff	_Textbgcolor+1,lcd_draw_pixel_at@color+1
 41316  008610  ECC3  F078         	call	_lcd_draw_pixel_at	;wreg free
 41317  008614  D028               	goto	l19597
 41318  008616                     l19595:
 41319                           
 41320                           ; BSR set to: 3
 41321                           ;LCD320x240color.c: 321: else;LCD320x240color.c: 322: fillRect(Cursor_x + i * textsizeX,
      +                           Cursor_y + j * textsizeY, textsizeX, textsizeY, Textbgcolor);
 41322  008616  0100               	movlb	0	; () banked
 41323  008618  5168               	movf	display_putc@i& (0+255),w,b
 41324  00861A  0367               	mulwf	display_putc@textsizeX& (0+255),b
 41325  00861C  CFF3 F03B          	movff	prodl,??_display_putc
 41326  008620  CFF4 F03C          	movff	prodh,??_display_putc+1
 41327  008624  0102               	movlb	2	; () banked
 41328  008626  51DD               	movf	_Cursor_x& (0+255),w,b
 41329  008628  243B               	addwf	??_display_putc^0,w,c
 41330  00862A  6E2D               	movwf	fillRect@x^0,c
 41331  00862C  51DE               	movf	(_Cursor_x+1)& (0+255),w,b
 41332  00862E  203C               	addwfc	(??_display_putc+1)^0,w,c
 41333  008630  6E2E               	movwf	(fillRect@x+1)^0,c
 41334  008632  0100               	movlb	0	; () banked
 41335  008634  5166               	movf	display_putc@j& (0+255),w,b
 41336  008636  0369               	mulwf	display_putc@textsizeY& (0+255),b
 41337  008638  CFF3 F03D          	movff	prodl,??_display_putc+2
 41338  00863C  CFF4 F03E          	movff	prodh,??_display_putc+3
 41339  008640  0102               	movlb	2	; () banked
 41340  008642  51DB               	movf	_Cursor_y& (0+255),w,b
 41341  008644  243D               	addwf	(??_display_putc+2)^0,w,c
 41342  008646  6E2F               	movwf	fillRect@y^0,c
 41343  008648  51DC               	movf	(_Cursor_y+1)& (0+255),w,b
 41344  00864A  203E               	addwfc	(??_display_putc+3)^0,w,c
 41345  00864C  6E30               	movwf	(fillRect@y+1)^0,c
 41346  00864E  C067  F031         	movff	display_putc@textsizeX,fillRect@w
 41347  008652  6A32               	clrf	(fillRect@w+1)^0,c
 41348  008654  C069  F033         	movff	display_putc@textsizeY,fillRect@h
 41349  008658  6A34               	clrf	(fillRect@h+1)^0,c
 41350  00865A  C3F0  F035         	movff	_Textbgcolor,fillRect@color
 41351  00865E  C3F1  F036         	movff	_Textbgcolor+1,fillRect@color+1
 41352  008662  EC07  F071         	call	_fillRect	;wreg free
 41353  008666                     l19597:
 41354  008666  0100               	movlb	0	; () banked
 41355  008668  2B66               	incf	display_putc@j& (0+255),f,b
 41356                           
 41357                           ; BSR set to: 0
 41358  00866A  90D8               	bcf	status,0,c
 41359  00866C  3360               	rrcf	display_putc@line& (0+255),f,b
 41360  00866E                     l19601:
 41361                           
 41362                           ; BSR set to: 0
 41363  00866E  5163               	movf	display_putc@fontYsize& (0+255),w,b
 41364  008670  5D66               	subwf	display_putc@j& (0+255),w,b
 41365  008672  A0D8               	btfss	status,0,c
 41366  008674  D76B               	goto	l3176
 41367                           
 41368                           ; BSR set to: 0
 41369  008676  2B68               	incf	display_putc@i& (0+255),f,b
 41370  008678                     l19605:
 41371                           
 41372                           ; BSR set to: 0
 41373  008678  5162               	movf	display_putc@fontXsize& (0+255),w,b
 41374  00867A  5D68               	subwf	display_putc@i& (0+255),w,b
 41375  00867C  A0D8               	btfss	status,0,c
 41376  00867E  D735               	goto	l19577
 41377                           
 41378                           ; BSR set to: 0
 41379                           ;LCD320x240color.c: 323: };LCD320x240color.c: 324: };LCD320x240color.c: 325: };LCD320x24
      +                          0color.c: 327: Cursor_x += pitchX;
 41380  008680  5164               	movf	display_putc@pitchX& (0+255),w,b
 41381  008682  0102               	movlb	2	; () banked
 41382  008684  27DD               	addwf	_Cursor_x& (0+255),f,b
 41383  008686  0E00               	movlw	0
 41384  008688  23DE               	addwfc	(_Cursor_x+1)& (0+255),f,b
 41385                           
 41386                           ;LCD320x240color.c: 328: if ( Cursor_x > (320 + pitchX) ) Cursor_x = 320;
 41387  00868A  0E40               	movlw	64
 41388  00868C  6E3B               	movwf	??_display_putc^0,c
 41389  00868E  0E01               	movlw	1
 41390  008690  6E3C               	movwf	(??_display_putc+1)^0,c
 41391  008692  0100               	movlb	0	; () banked
 41392  008694  5164               	movf	display_putc@pitchX& (0+255),w,b
 41393  008696  6E3D               	movwf	(??_display_putc+2)^0,c
 41394  008698  6A3E               	clrf	(??_display_putc+3)^0,c
 41395  00869A  503B               	movf	??_display_putc^0,w,c
 41396  00869C  263D               	addwf	(??_display_putc+2)^0,f,c
 41397  00869E  503C               	movf	(??_display_putc+1)^0,w,c
 41398  0086A0  223E               	addwfc	(??_display_putc+3)^0,f,c
 41399  0086A2  0102               	movlb	2	; () banked
 41400  0086A4  51DD               	movf	_Cursor_x& (0+255),w,b
 41401  0086A6  5C3D               	subwf	(??_display_putc+2)^0,w,c
 41402  0086A8  503E               	movf	(??_display_putc+3)^0,w,c
 41403  0086AA  0A80               	xorlw	128
 41404  0086AC  6E3F               	movwf	(??_display_putc+4)^0,c
 41405  0086AE  51DE               	movf	(_Cursor_x+1)& (0+255),w,b
 41406  0086B0  0A80               	xorlw	128
 41407  0086B2  583F               	subwfb	(??_display_putc+4)^0,w,c
 41408  0086B4  B0D8               	btfsc	status,0,c
 41409  0086B6  D004               	goto	l19611
 41410                           
 41411                           ; BSR set to: 2
 41412  0086B8  0E01               	movlw	1
 41413  0086BA  6FDE               	movwf	(_Cursor_x+1)& (0+255),b
 41414  0086BC  0E40               	movlw	64
 41415  0086BE  6FDD               	movwf	_Cursor_x& (0+255),b
 41416  0086C0                     l19611:
 41417                           
 41418                           ; BSR set to: 2
 41419  0086C0  0100               	movlb	0	; () banked
 41420  0086C2  5164               	movf	display_putc@pitchX& (0+255),w,b
 41421  0086C4  0102               	movlb	2	; () banked
 41422  0086C6  25DD               	addwf	_Cursor_x& (0+255),w,b
 41423  0086C8  6E3B               	movwf	??_display_putc^0,c
 41424  0086CA  0E00               	movlw	0
 41425  0086CC  21DE               	addwfc	(_Cursor_x+1)& (0+255),w,b
 41426  0086CE  6E3C               	movwf	(??_display_putc+1)^0,c
 41427  0086D0  BE3C               	btfsc	(??_display_putc+1)^0,7,c
 41428  0086D2  0012               	return	
 41429  0086D4  0E41               	movlw	65
 41430  0086D6  5C3B               	subwf	??_display_putc^0,w,c
 41431  0086D8  0E01               	movlw	1
 41432  0086DA  583C               	subwfb	(??_display_putc+1)^0,w,c
 41433  0086DC  A0D8               	btfss	status,0,c
 41434  0086DE  0012               	return	
 41435                           
 41436                           ; BSR set to: 2
 41437                           ;LCD320x240color.c: 330: Cursor_x = 0;
 41438  0086E0  0E00               	movlw	0
 41439  0086E2  6FDE               	movwf	(_Cursor_x+1)& (0+255),b
 41440  0086E4  0E00               	movlw	0
 41441  0086E6  6FDD               	movwf	_Cursor_x& (0+255),b
 41442                           
 41443                           ; BSR set to: 2
 41444                           ;LCD320x240color.c: 331: Cursor_y += textsizeY * fontYsize;
 41445  0086E8  0100               	movlb	0	; () banked
 41446  0086EA  5169               	movf	display_putc@textsizeY& (0+255),w,b
 41447  0086EC  0363               	mulwf	display_putc@fontYsize& (0+255),b
 41448  0086EE  50F3               	movf	243,w,c
 41449  0086F0  0102               	movlb	2	; () banked
 41450  0086F2  27DB               	addwf	_Cursor_y& (0+255),f,b
 41451  0086F4  50F4               	movf	244,w,c
 41452  0086F6  23DC               	addwfc	(_Cursor_y+1)& (0+255),f,b
 41453                           
 41454                           ; BSR set to: 2
 41455                           ;LCD320x240color.c: 332: if ( Cursor_y > (240 + pitchY) )
 41456  0086F8  0100               	movlb	0	; () banked
 41457  0086FA  5161               	movf	display_putc@pitchY& (0+255),w,b
 41458  0086FC  6E3B               	movwf	??_display_putc^0,c
 41459  0086FE  6A3C               	clrf	(??_display_putc+1)^0,c
 41460  008700  0EF0               	movlw	240
 41461  008702  263B               	addwf	??_display_putc^0,f,c
 41462  008704  0E00               	movlw	0
 41463  008706  223C               	addwfc	(??_display_putc+1)^0,f,c
 41464  008708  0102               	movlb	2	; () banked
 41465  00870A  51DB               	movf	_Cursor_y& (0+255),w,b
 41466  00870C  5C3B               	subwf	??_display_putc^0,w,c
 41467  00870E  503C               	movf	(??_display_putc+1)^0,w,c
 41468  008710  0A80               	xorlw	128
 41469  008712  6E3D               	movwf	(??_display_putc+2)^0,c
 41470  008714  51DC               	movf	(_Cursor_y+1)& (0+255),w,b
 41471  008716  0A80               	xorlw	128
 41472  008718  583D               	subwfb	(??_display_putc+2)^0,w,c
 41473  00871A  B0D8               	btfsc	status,0,c
 41474  00871C  0012               	return	
 41475                           
 41476                           ; BSR set to: 2
 41477                           ;LCD320x240color.c: 333: Cursor_y = 240;
 41478  00871E  0E00               	movlw	0
 41479  008720  6FDC               	movwf	(_Cursor_y+1)& (0+255),b
 41480  008722  0EF0               	movlw	240
 41481  008724  6FDB               	movwf	_Cursor_y& (0+255),b
 41482                           
 41483                           ; BSR set to: 2
 41484  008726  0012               	return		;funcret
 41485  008728                     __end_of_display_putc:
 41486                           	callstack 0
 41487                           
 41488 ;; *************** function _lcd_draw_pixel_at *****************
 41489 ;; Defined at:
 41490 ;;		line 238 in file "LCD320x240color.c"
 41491 ;; Parameters:    Size  Location     Type
 41492 ;;  x               2   24[COMRAM] unsigned int 
 41493 ;;  y               2   26[COMRAM] unsigned int 
 41494 ;;  color           2   28[COMRAM] unsigned int 
 41495 ;; Auto vars:     Size  Location     Type
 41496 ;;		None
 41497 ;; Return value:  Size  Location     Type
 41498 ;;                  1    wreg      void 
 41499 ;; Registers used:
 41500 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 41501 ;; Tracked objects:
 41502 ;;		On entry : 0/0
 41503 ;;		On exit  : 0/0
 41504 ;;		Unchanged: 0/0
 41505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41506 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41509 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41510 ;;Total ram usage:        6 bytes
 41511 ;; Hardware stack levels used:    1
 41512 ;; Hardware stack levels required when called:   11
 41513 ;; This function calls:
 41514 ;;		_draw_pixel
 41515 ;;		_lcd_set_cursor
 41516 ;; This function is called by:
 41517 ;;		_display_putc
 41518 ;;		_writeLine
 41519 ;;		_display_drawCircleHelper
 41520 ;;		_display_drawCircle
 41521 ;; This function uses a non-reentrant model
 41522 ;;
 41523                           
 41524                           	psect	text138
 41525  00F186                     __ptext138:
 41526                           	callstack 0
 41527  00F186                     _lcd_draw_pixel_at:
 41528                           	callstack 16
 41529                           
 41530                           ;LCD320x240color.c: 239: if( !lcd_set_cursor(x, y) ) {
 41531                           
 41532                           ; BSR set to: 2
 41533                           ;incstack = 0
 41534  00F186  C019  F015         	movff	lcd_draw_pixel_at@x,lcd_set_cursor@x
 41535  00F18A  C01A  F016         	movff	lcd_draw_pixel_at@x+1,lcd_set_cursor@x+1
 41536  00F18E  C01B  F017         	movff	lcd_draw_pixel_at@y,lcd_set_cursor@y
 41537  00F192  C01C  F018         	movff	lcd_draw_pixel_at@y+1,lcd_set_cursor@y+1
 41538  00F196  ECC3  F077         	call	_lcd_set_cursor	;wreg free
 41539  00F19A  0900               	iorlw	0
 41540  00F19C  A4D8               	btfss	status,2,c
 41541  00F19E  0012               	return	
 41542                           
 41543                           ;LCD320x240color.c: 240: draw_pixel(color);
 41544  00F1A0  C01D  F011         	movff	lcd_draw_pixel_at@color,draw_pixel@color
 41545  00F1A4  C01E  F012         	movff	lcd_draw_pixel_at@color+1,draw_pixel@color+1
 41546  00F1A8  EC36  F079         	call	_draw_pixel	;wreg free
 41547  00F1AC  0012               	return		;funcret
 41548  00F1AE                     __end_of_lcd_draw_pixel_at:
 41549                           	callstack 0
 41550                           
 41551 ;; *************** function _lcd_set_cursor *****************
 41552 ;; Defined at:
 41553 ;;		line 185 in file "LCD320x240color.c"
 41554 ;; Parameters:    Size  Location     Type
 41555 ;;  x               2   20[COMRAM] unsigned int 
 41556 ;;  y               2   22[COMRAM] unsigned int 
 41557 ;; Auto vars:     Size  Location     Type
 41558 ;;		None
 41559 ;; Return value:  Size  Location     Type
 41560 ;;                  1    wreg      unsigned char 
 41561 ;; Registers used:
 41562 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 41563 ;; Tracked objects:
 41564 ;;		On entry : 0/0
 41565 ;;		On exit  : 0/0
 41566 ;;		Unchanged: 0/0
 41567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41568 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41571 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41572 ;;Total ram usage:        4 bytes
 41573 ;; Hardware stack levels used:    1
 41574 ;; Hardware stack levels required when called:   10
 41575 ;; This function calls:
 41576 ;;		_lcd_set_cursor_x
 41577 ;;		_lcd_set_cursor_y
 41578 ;; This function is called by:
 41579 ;;		_lcd_draw_pixel_at
 41580 ;; This function uses a non-reentrant model
 41581 ;;
 41582                           
 41583                           	psect	text139
 41584  00EF86                     __ptext139:
 41585                           	callstack 0
 41586  00EF86                     _lcd_set_cursor:
 41587                           	callstack 16
 41588                           
 41589                           ;LCD320x240color.c: 186: if( lcd_set_cursor_x(x) || lcd_set_cursor_y(y) ) {
 41590                           
 41591                           ;incstack = 0
 41592  00EF86  C015  F011         	movff	lcd_set_cursor@x,lcd_set_cursor_x@x
 41593  00EF8A  C016  F012         	movff	lcd_set_cursor@x+1,lcd_set_cursor_x@x+1
 41594  00EF8E  EC96  F072         	call	_lcd_set_cursor_x	;wreg free
 41595  00EF92  0900               	iorlw	0
 41596  00EF94  A4D8               	btfss	status,2,c
 41597  00EF96  D009               	goto	u20510
 41598  00EF98  C017  F011         	movff	lcd_set_cursor@y,lcd_set_cursor_y@y
 41599  00EF9C  C018  F012         	movff	lcd_set_cursor@y+1,lcd_set_cursor_y@y+1
 41600  00EFA0  EC6C  F072         	call	_lcd_set_cursor_y	;wreg free
 41601  00EFA4  0900               	iorlw	0
 41602  00EFA6  B4D8               	btfsc	status,2,c
 41603  00EFA8  D002               	goto	l19093
 41604  00EFAA                     u20510:
 41605                           
 41606                           ;LCD320x240color.c: 187: return 1;
 41607  00EFAA  0E01               	movlw	1
 41608  00EFAC  0012               	return	
 41609  00EFAE                     l19093:
 41610                           
 41611                           ;LCD320x240color.c: 188: };LCD320x240color.c: 189: return 0;
 41612  00EFAE  0E00               	movlw	0
 41613  00EFB0  0012               	return		;funcret
 41614  00EFB2                     __end_of_lcd_set_cursor:
 41615                           	callstack 0
 41616                           
 41617 ;; *************** function _lcd_set_cursor_y *****************
 41618 ;; Defined at:
 41619 ;;		line 158 in file "LCD320x240color.c"
 41620 ;; Parameters:    Size  Location     Type
 41621 ;;  y               2   16[COMRAM] unsigned int 
 41622 ;; Auto vars:     Size  Location     Type
 41623 ;;  lo              1   19[COMRAM] unsigned char 
 41624 ;;  hi              1   18[COMRAM] unsigned char 
 41625 ;; Return value:  Size  Location     Type
 41626 ;;                  1    wreg      unsigned char 
 41627 ;; Registers used:
 41628 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 41629 ;; Tracked objects:
 41630 ;;		On entry : 0/0
 41631 ;;		On exit  : 0/0
 41632 ;;		Unchanged: 0/0
 41633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41634 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41635 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41637 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41638 ;;Total ram usage:        4 bytes
 41639 ;; Hardware stack levels used:    1
 41640 ;; Hardware stack levels required when called:    9
 41641 ;; This function calls:
 41642 ;;		_SPI1_Close
 41643 ;;		_spi_master_open
 41644 ;;		_write_command
 41645 ;;		_write_data
 41646 ;; This function is called by:
 41647 ;;		_lcd_set_cursor
 41648 ;; This function uses a non-reentrant model
 41649 ;;
 41650                           
 41651                           	psect	text140
 41652  00E4D8                     __ptext140:
 41653                           	callstack 0
 41654  00E4D8                     _lcd_set_cursor_y:
 41655                           	callstack 16
 41656                           
 41657                           ;LCD320x240color.c: 160: if( y >= 240 ) {
 41658                           
 41659                           ;incstack = 0
 41660  00E4D8  5012               	movf	(lcd_set_cursor_y@y+1)^0,w,c
 41661  00E4DA  E104               	bnz	u20320
 41662  00E4DC  0EF0               	movlw	240
 41663  00E4DE  5C11               	subwf	lcd_set_cursor_y@y^0,w,c
 41664  00E4E0  A0D8               	btfss	status,0,c
 41665  00E4E2  D002               	goto	l3124
 41666  00E4E4                     u20320:
 41667                           
 41668                           ;LCD320x240color.c: 161: return 1;
 41669  00E4E4  0E01               	movlw	1
 41670  00E4E6  0012               	return	
 41671  00E4E8                     l3124:
 41672                           
 41673                           ;LCD320x240color.c: 162: };LCD320x240color.c: 163: uint8_t hi = y >>8;
 41674  00E4E8  C012  F013         	movff	lcd_set_cursor_y@y+1,lcd_set_cursor_y@hi
 41675                           
 41676                           ;LCD320x240color.c: 164: uint8_t lo = y & 0xff;
 41677  00E4EC  C011  F014         	movff	lcd_set_cursor_y@y,lcd_set_cursor_y@lo
 41678                           
 41679                           ;LCD320x240color.c: 166: if (spi_master_open(LCD8M)) {
 41680  00E4F0  0E01               	movlw	1
 41681  00E4F2  EC3E  F076         	call	_spi_master_open
 41682  00E4F6  0900               	iorlw	0
 41683  00E4F8  B4D8               	btfsc	status,2,c
 41684  00E4FA  D016               	goto	l18983
 41685                           
 41686                           ;LCD320x240color.c: 168: do { LATAbits.LATA0 = 0; } while(0);
 41687  00E4FC  9089               	bcf	137,0,c	;volatile
 41688                           
 41689                           ;LCD320x240color.c: 169: write_command(0x2B);
 41690  00E4FE  0E2B               	movlw	43
 41691  00E500  EC51  F07B         	call	_write_command
 41692                           
 41693                           ;LCD320x240color.c: 170: write_data(hi);
 41694  00E504  5013               	movf	lcd_set_cursor_y@hi^0,w,c
 41695  00E506  EC4B  F07B         	call	_write_data
 41696                           
 41697                           ;LCD320x240color.c: 171: write_data(lo);
 41698  00E50A  5014               	movf	lcd_set_cursor_y@lo^0,w,c
 41699  00E50C  EC4B  F07B         	call	_write_data
 41700                           
 41701                           ;LCD320x240color.c: 172: write_data(hi);
 41702  00E510  5013               	movf	lcd_set_cursor_y@hi^0,w,c
 41703  00E512  EC4B  F07B         	call	_write_data
 41704                           
 41705                           ;LCD320x240color.c: 173: write_data(lo);
 41706  00E516  5014               	movf	lcd_set_cursor_y@lo^0,w,c
 41707  00E518  EC4B  F07B         	call	_write_data
 41708                           
 41709                           ;LCD320x240color.c: 174: write_command(0x2C);
 41710  00E51C  0E2C               	movlw	44
 41711  00E51E  EC51  F07B         	call	_write_command
 41712  00E522  8089               	bsf	137,0,c	;volatile
 41713                           
 41714                           ;LCD320x240color.c: 176: SPI1_Close();
 41715  00E524  ECFF  F07B         	call	_SPI1_Close	;wreg free
 41716  00E528                     l18983:
 41717                           
 41718                           ;LCD320x240color.c: 177: };LCD320x240color.c: 179: return 0;
 41719  00E528  0E00               	movlw	0
 41720  00E52A  0012               	return		;funcret
 41721  00E52C                     __end_of_lcd_set_cursor_y:
 41722                           	callstack 0
 41723                           
 41724 ;; *************** function _lcd_set_cursor_x *****************
 41725 ;; Defined at:
 41726 ;;		line 131 in file "LCD320x240color.c"
 41727 ;; Parameters:    Size  Location     Type
 41728 ;;  x               2   16[COMRAM] unsigned int 
 41729 ;; Auto vars:     Size  Location     Type
 41730 ;;  lo              1   19[COMRAM] unsigned char 
 41731 ;;  hi              1   18[COMRAM] unsigned char 
 41732 ;; Return value:  Size  Location     Type
 41733 ;;                  1    wreg      unsigned char 
 41734 ;; Registers used:
 41735 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 41736 ;; Tracked objects:
 41737 ;;		On entry : 0/0
 41738 ;;		On exit  : 0/0
 41739 ;;		Unchanged: 0/0
 41740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41741 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41742 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41744 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41745 ;;Total ram usage:        4 bytes
 41746 ;; Hardware stack levels used:    1
 41747 ;; Hardware stack levels required when called:    9
 41748 ;; This function calls:
 41749 ;;		_SPI1_Close
 41750 ;;		_spi_master_open
 41751 ;;		_write_command
 41752 ;;		_write_data
 41753 ;; This function is called by:
 41754 ;;		_lcd_set_cursor
 41755 ;; This function uses a non-reentrant model
 41756 ;;
 41757                           
 41758                           	psect	text141
 41759  00E52C                     __ptext141:
 41760                           	callstack 0
 41761  00E52C                     _lcd_set_cursor_x:
 41762                           	callstack 16
 41763                           
 41764                           ;LCD320x240color.c: 133: if ( x >= 320 ) {
 41765                           
 41766                           ;incstack = 0
 41767  00E52C  0E40               	movlw	64
 41768  00E52E  5C11               	subwf	lcd_set_cursor_x@x^0,w,c
 41769  00E530  0E01               	movlw	1
 41770  00E532  5812               	subwfb	(lcd_set_cursor_x@x+1)^0,w,c
 41771  00E534  A0D8               	btfss	status,0,c
 41772  00E536  D002               	goto	l3115
 41773                           
 41774                           ;LCD320x240color.c: 134: return 1;
 41775  00E538  0E01               	movlw	1
 41776  00E53A  0012               	return	
 41777  00E53C                     l3115:
 41778                           
 41779                           ;LCD320x240color.c: 135: };LCD320x240color.c: 136: uint8_t hi = x >>8;
 41780  00E53C  C012  F013         	movff	lcd_set_cursor_x@x+1,lcd_set_cursor_x@hi
 41781                           
 41782                           ;LCD320x240color.c: 137: uint8_t lo = x & 0xff;
 41783  00E540  C011  F014         	movff	lcd_set_cursor_x@x,lcd_set_cursor_x@lo
 41784                           
 41785                           ;LCD320x240color.c: 139: if (spi_master_open(LCD8M)) {
 41786  00E544  0E01               	movlw	1
 41787  00E546  EC3E  F076         	call	_spi_master_open
 41788  00E54A  0900               	iorlw	0
 41789  00E54C  B4D8               	btfsc	status,2,c
 41790  00E54E  D016               	goto	l18965
 41791                           
 41792                           ;LCD320x240color.c: 141: do { LATAbits.LATA0 = 0; } while(0);
 41793  00E550  9089               	bcf	137,0,c	;volatile
 41794                           
 41795                           ;LCD320x240color.c: 142: write_command(0x2A);
 41796  00E552  0E2A               	movlw	42
 41797  00E554  EC51  F07B         	call	_write_command
 41798                           
 41799                           ;LCD320x240color.c: 143: write_data(hi);
 41800  00E558  5013               	movf	lcd_set_cursor_x@hi^0,w,c
 41801  00E55A  EC4B  F07B         	call	_write_data
 41802                           
 41803                           ;LCD320x240color.c: 144: write_data(lo);
 41804  00E55E  5014               	movf	lcd_set_cursor_x@lo^0,w,c
 41805  00E560  EC4B  F07B         	call	_write_data
 41806                           
 41807                           ;LCD320x240color.c: 145: write_data(hi);
 41808  00E564  5013               	movf	lcd_set_cursor_x@hi^0,w,c
 41809  00E566  EC4B  F07B         	call	_write_data
 41810                           
 41811                           ;LCD320x240color.c: 146: write_data(lo);
 41812  00E56A  5014               	movf	lcd_set_cursor_x@lo^0,w,c
 41813  00E56C  EC4B  F07B         	call	_write_data
 41814                           
 41815                           ;LCD320x240color.c: 147: write_command(0x2C);
 41816  00E570  0E2C               	movlw	44
 41817  00E572  EC51  F07B         	call	_write_command
 41818  00E576  8089               	bsf	137,0,c	;volatile
 41819                           
 41820                           ;LCD320x240color.c: 149: SPI1_Close();
 41821  00E578  ECFF  F07B         	call	_SPI1_Close	;wreg free
 41822  00E57C                     l18965:
 41823                           
 41824                           ;LCD320x240color.c: 150: };LCD320x240color.c: 152: return 0;
 41825  00E57C  0E00               	movlw	0
 41826  00E57E  0012               	return		;funcret
 41827  00E580                     __end_of_lcd_set_cursor_x:
 41828                           	callstack 0
 41829                           
 41830 ;; *************** function _draw_pixel *****************
 41831 ;; Defined at:
 41832 ;;		line 221 in file "LCD320x240color.c"
 41833 ;; Parameters:    Size  Location     Type
 41834 ;;  color           2   16[COMRAM] unsigned int 
 41835 ;; Auto vars:     Size  Location     Type
 41836 ;;		None
 41837 ;; Return value:  Size  Location     Type
 41838 ;;                  1    wreg      unsigned char 
 41839 ;; Registers used:
 41840 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 41841 ;; Tracked objects:
 41842 ;;		On entry : 0/0
 41843 ;;		On exit  : 0/0
 41844 ;;		Unchanged: 0/0
 41845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41846 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41849 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41850 ;;Total ram usage:        2 bytes
 41851 ;; Hardware stack levels used:    1
 41852 ;; Hardware stack levels required when called:    9
 41853 ;; This function calls:
 41854 ;;		_SPI1_Close
 41855 ;;		_spi_master_open
 41856 ;;		_write_data
 41857 ;; This function is called by:
 41858 ;;		_lcd_draw_pixel_at
 41859 ;; This function uses a non-reentrant model
 41860 ;;
 41861                           
 41862                           	psect	text142
 41863  00F26C                     __ptext142:
 41864                           	callstack 0
 41865  00F26C                     _draw_pixel:
 41866                           	callstack 17
 41867                           
 41868                           ;LCD320x240color.c: 223: if (spi_master_open(LCD8M)) {
 41869                           
 41870                           ;incstack = 0
 41871  00F26C  0E01               	movlw	1
 41872  00F26E  EC3E  F076         	call	_spi_master_open
 41873  00F272  0900               	iorlw	0
 41874  00F274  B4D8               	btfsc	status,2,c
 41875  00F276  0012               	return	
 41876                           
 41877                           ;LCD320x240color.c: 225: do { LATAbits.LATA0 = 0; } while(0);
 41878  00F278  9089               	bcf	137,0,c	;volatile
 41879                           
 41880                           ;LCD320x240color.c: 226: write_data(color >>8);
 41881  00F27A  5012               	movf	(draw_pixel@color+1)^0,w,c
 41882  00F27C  EC4B  F07B         	call	_write_data
 41883                           
 41884                           ;LCD320x240color.c: 227: write_data(color & 0xff);
 41885  00F280  5011               	movf	draw_pixel@color^0,w,c
 41886  00F282  EC4B  F07B         	call	_write_data
 41887  00F286  8089               	bsf	137,0,c	;volatile
 41888                           
 41889                           ;LCD320x240color.c: 229: SPI1_Close();
 41890  00F288  ECFF  F07B         	call	_SPI1_Close	;wreg free
 41891  00F28C  0012               	return		;funcret
 41892  00F28E                     __end_of_draw_pixel:
 41893                           	callstack 0
 41894                           
 41895 ;; *************** function _fillRect *****************
 41896 ;; Defined at:
 41897 ;;		line 583 in file "LCD320x240color.c"
 41898 ;; Parameters:    Size  Location     Type
 41899 ;;  x               2   44[COMRAM] unsigned int 
 41900 ;;  y               2   46[COMRAM] unsigned int 
 41901 ;;  w               2   48[COMRAM] unsigned int 
 41902 ;;  h               2   50[COMRAM] unsigned int 
 41903 ;;  color           2   52[COMRAM] unsigned int 
 41904 ;; Auto vars:     Size  Location     Type
 41905 ;;		None
 41906 ;; Return value:  Size  Location     Type
 41907 ;;                  1    wreg      void 
 41908 ;; Registers used:
 41909 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 41910 ;; Tracked objects:
 41911 ;;		On entry : 3D/0
 41912 ;;		On exit  : 0/0
 41913 ;;		Unchanged: 0/0
 41914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 41915 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41917 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41918 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 41919 ;;Total ram usage:       14 bytes
 41920 ;; Hardware stack levels used:    1
 41921 ;; Hardware stack levels required when called:   11
 41922 ;; This function calls:
 41923 ;;		_lcd_fill_rect
 41924 ;; This function is called by:
 41925 ;;		_DispTime
 41926 ;;		_display_putc
 41927 ;; This function uses a non-reentrant model
 41928 ;;
 41929                           
 41930                           	psect	text143
 41931  00E20E                     __ptext143:
 41932                           	callstack 0
 41933  00E20E                     _fillRect:
 41934                           	callstack 14
 41935                           
 41936                           ;LCD320x240color.c: 585: if( w && h) {
 41937                           
 41938                           ;incstack = 0
 41939  00E20E  5031               	movf	fillRect@w^0,w,c
 41940  00E210  1032               	iorwf	(fillRect@w+1)^0,w,c
 41941  00E212  B4D8               	btfsc	status,2,c
 41942  00E214  0012               	return	
 41943  00E216  5033               	movf	fillRect@h^0,w,c
 41944  00E218  1034               	iorwf	(fillRect@h+1)^0,w,c
 41945  00E21A  B4D8               	btfsc	status,2,c
 41946  00E21C  0012               	return	
 41947                           
 41948                           ;LCD320x240color.c: 586: lcd_fill_rect(x, y, x+w-1, y+h-1, color);
 41949  00E21E  C02D  F019         	movff	fillRect@x,lcd_fill_rect@x0
 41950  00E222  C02E  F01A         	movff	fillRect@x+1,lcd_fill_rect@x0+1
 41951  00E226  C02F  F01B         	movff	fillRect@y,lcd_fill_rect@y0
 41952  00E22A  C030  F01C         	movff	fillRect@y+1,lcd_fill_rect@y0+1
 41953  00E22E  5031               	movf	fillRect@w^0,w,c
 41954  00E230  242D               	addwf	fillRect@x^0,w,c
 41955  00E232  6E37               	movwf	??_fillRect^0,c
 41956  00E234  5032               	movf	(fillRect@w+1)^0,w,c
 41957  00E236  202E               	addwfc	(fillRect@x+1)^0,w,c
 41958  00E238  6E38               	movwf	(??_fillRect+1)^0,c
 41959  00E23A  0EFF               	movlw	255
 41960  00E23C  2437               	addwf	??_fillRect^0,w,c
 41961  00E23E  6E1D               	movwf	lcd_fill_rect@x1^0,c
 41962  00E240  0EFF               	movlw	255
 41963  00E242  2038               	addwfc	(??_fillRect+1)^0,w,c
 41964  00E244  6E1E               	movwf	(lcd_fill_rect@x1+1)^0,c
 41965  00E246  5033               	movf	fillRect@h^0,w,c
 41966  00E248  242F               	addwf	fillRect@y^0,w,c
 41967  00E24A  6E39               	movwf	(??_fillRect+2)^0,c
 41968  00E24C  5034               	movf	(fillRect@h+1)^0,w,c
 41969  00E24E  2030               	addwfc	(fillRect@y+1)^0,w,c
 41970  00E250  6E3A               	movwf	(??_fillRect+3)^0,c
 41971  00E252  0EFF               	movlw	255
 41972  00E254  2439               	addwf	(??_fillRect+2)^0,w,c
 41973  00E256  6E1F               	movwf	lcd_fill_rect@y1^0,c
 41974  00E258  0EFF               	movlw	255
 41975  00E25A  203A               	addwfc	(??_fillRect+3)^0,w,c
 41976  00E25C  6E20               	movwf	(lcd_fill_rect@y1+1)^0,c
 41977  00E25E  C035  F021         	movff	fillRect@color,lcd_fill_rect@color
 41978  00E262  C036  F022         	movff	fillRect@color+1,lcd_fill_rect@color+1
 41979  00E266  EC21  F05E         	call	_lcd_fill_rect	;wreg free
 41980  00E26A  0012               	return		;funcret
 41981  00E26C                     __end_of_fillRect:
 41982                           	callstack 0
 41983                           
 41984 ;; *************** function _lcd_fill_rect *****************
 41985 ;; Defined at:
 41986 ;;		line 547 in file "LCD320x240color.c"
 41987 ;; Parameters:    Size  Location     Type
 41988 ;;  x0              2   24[COMRAM] unsigned int 
 41989 ;;  y0              2   26[COMRAM] unsigned int 
 41990 ;;  x1              2   28[COMRAM] unsigned int 
 41991 ;;  y1              2   30[COMRAM] unsigned int 
 41992 ;;  color           2   32[COMRAM] unsigned int 
 41993 ;; Auto vars:     Size  Location     Type
 41994 ;;  jj              2   40[COMRAM] unsigned int 
 41995 ;;  ii              2   38[COMRAM] unsigned int 
 41996 ;;  lo              1   43[COMRAM] unsigned char 
 41997 ;;  hi              1   42[COMRAM] unsigned char 
 41998 ;; Return value:  Size  Location     Type
 41999 ;;                  1    wreg      void 
 42000 ;; Registers used:
 42001 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 42002 ;; Tracked objects:
 42003 ;;		On entry : 3D/0
 42004 ;;		On exit  : 0/0
 42005 ;;		Unchanged: 0/0
 42006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42007 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42008 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42009 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42010 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42011 ;;Total ram usage:       20 bytes
 42012 ;; Hardware stack levels used:    1
 42013 ;; Hardware stack levels required when called:   10
 42014 ;; This function calls:
 42015 ;;		_SPI1_Close
 42016 ;;		_addset
 42017 ;;		_spi_master_open
 42018 ;;		_write_data
 42019 ;; This function is called by:
 42020 ;;		_DrawBigCalendar
 42021 ;;		_DrawSmallCalendar
 42022 ;;		_fillRect
 42023 ;; This function uses a non-reentrant model
 42024 ;;
 42025                           
 42026                           	psect	text144
 42027  00BC42                     __ptext144:
 42028                           	callstack 0
 42029  00BC42                     _lcd_fill_rect:
 42030                           	callstack 14
 42031                           
 42032                           ;LCD320x240color.c: 548: uint16_t ii, jj;;LCD320x240color.c: 549: uint8_t hi = color >> 
      +                          8, lo = color;
 42033                           
 42034                           ;incstack = 0
 42035  00BC42  C022  F02B         	movff	lcd_fill_rect@color+1,lcd_fill_rect@hi
 42036  00BC46  C021  F02C         	movff	lcd_fill_rect@color,lcd_fill_rect@lo
 42037                           
 42038                           ;LCD320x240color.c: 551: if( (y0 >= 240) || (x0 >= 320) ) {
 42039  00BC4A  501C               	movf	(lcd_fill_rect@y0+1)^0,w,c
 42040  00BC4C  E103               	bnz	u20431
 42041  00BC4E  0EF0               	movlw	240
 42042  00BC50  5C1B               	subwf	lcd_fill_rect@y0^0,w,c
 42043  00BC52  B0D8               	btfsc	status,0,c
 42044  00BC54                     u20431:
 42045  00BC54  0012               	return	
 42046  00BC56  0E40               	movlw	64
 42047  00BC58  5C19               	subwf	lcd_fill_rect@x0^0,w,c
 42048  00BC5A  0E01               	movlw	1
 42049  00BC5C  581A               	subwfb	(lcd_fill_rect@x0+1)^0,w,c
 42050  00BC5E  B0D8               	btfsc	status,0,c
 42051  00BC60  0012               	return	
 42052                           
 42053                           ;LCD320x240color.c: 553: };LCD320x240color.c: 555: if( x1 >= 320 ) x1 = 320;
 42054  00BC62  0E40               	movlw	64
 42055  00BC64  5C1D               	subwf	lcd_fill_rect@x1^0,w,c
 42056  00BC66  0E01               	movlw	1
 42057  00BC68  581E               	subwfb	(lcd_fill_rect@x1+1)^0,w,c
 42058  00BC6A  A0D8               	btfss	status,0,c
 42059  00BC6C  D004               	goto	l19065
 42060  00BC6E  0E01               	movlw	1
 42061  00BC70  6E1E               	movwf	(lcd_fill_rect@x1+1)^0,c
 42062  00BC72  0E40               	movlw	64
 42063  00BC74  6E1D               	movwf	lcd_fill_rect@x1^0,c
 42064  00BC76                     l19065:
 42065                           
 42066                           ;LCD320x240color.c: 556: if( y1 >= 240 ) y1 = 240;
 42067  00BC76  5020               	movf	(lcd_fill_rect@y1+1)^0,w,c
 42068  00BC78  E104               	bnz	u20460
 42069  00BC7A  0EF0               	movlw	240
 42070  00BC7C  5C1F               	subwf	lcd_fill_rect@y1^0,w,c
 42071  00BC7E  A0D8               	btfss	status,0,c
 42072  00BC80  D004               	goto	l19069
 42073  00BC82                     u20460:
 42074  00BC82  0E00               	movlw	0
 42075  00BC84  6E20               	movwf	(lcd_fill_rect@y1+1)^0,c
 42076  00BC86  0EF0               	movlw	240
 42077  00BC88  6E1F               	movwf	lcd_fill_rect@y1^0,c
 42078  00BC8A                     l19069:
 42079                           
 42080                           ;LCD320x240color.c: 558: addset(x0, y0, x1, y1);
 42081  00BC8A  C019  F011         	movff	lcd_fill_rect@x0,addset@x
 42082  00BC8E  C01A  F012         	movff	lcd_fill_rect@x0+1,addset@x+1
 42083  00BC92  C01B  F013         	movff	lcd_fill_rect@y0,addset@y
 42084  00BC96  C01C  F014         	movff	lcd_fill_rect@y0+1,addset@y+1
 42085  00BC9A  C01D  F015         	movff	lcd_fill_rect@x1,addset@xx
 42086  00BC9E  C01E  F016         	movff	lcd_fill_rect@x1+1,addset@xx+1
 42087  00BCA2  C01F  F017         	movff	lcd_fill_rect@y1,addset@yy
 42088  00BCA6  C020  F018         	movff	lcd_fill_rect@y1+1,addset@yy+1
 42089  00BCAA  ECBF  F071         	call	_addset	;wreg free
 42090                           
 42091                           ;LCD320x240color.c: 560: if (spi_master_open(LCD8M)) {
 42092  00BCAE  0E01               	movlw	1
 42093  00BCB0  EC3E  F076         	call	_spi_master_open
 42094  00BCB4  0900               	iorlw	0
 42095  00BCB6  B4D8               	btfsc	status,2,c
 42096  00BCB8  0012               	return	
 42097                           
 42098                           ;LCD320x240color.c: 562: do { LATAbits.LATA0 = 0; } while(0);
 42099  00BCBA  9089               	bcf	137,0,c	;volatile
 42100                           
 42101                           ;LCD320x240color.c: 563: jj=0;
 42102  00BCBC  0E00               	movlw	0
 42103  00BCBE  6E2A               	movwf	(lcd_fill_rect@jj+1)^0,c
 42104  00BCC0  0E00               	movlw	0
 42105  00BCC2  6E29               	movwf	lcd_fill_rect@jj^0,c
 42106                           
 42107                           ;LCD320x240color.c: 564: while (jj++ < y1 - y0 +1) {
 42108  00BCC4  D021               	goto	u20480
 42109  00BCC6                     l19075:
 42110                           
 42111                           ;LCD320x240color.c: 565: ii=0;
 42112  00BCC6  0E00               	movlw	0
 42113  00BCC8  6E28               	movwf	(lcd_fill_rect@ii+1)^0,c
 42114  00BCCA  0E00               	movlw	0
 42115  00BCCC  6E27               	movwf	lcd_fill_rect@ii^0,c
 42116                           
 42117                           ;LCD320x240color.c: 566: while (ii++ < x1 - x0 +1) {
 42118  00BCCE  D006               	goto	l19079
 42119  00BCD0                     l19077:
 42120                           
 42121                           ;LCD320x240color.c: 567: write_data(hi);
 42122  00BCD0  502B               	movf	lcd_fill_rect@hi^0,w,c
 42123  00BCD2  EC4B  F07B         	call	_write_data
 42124                           
 42125                           ;LCD320x240color.c: 568: write_data(lo);
 42126  00BCD6  502C               	movf	lcd_fill_rect@lo^0,w,c
 42127  00BCD8  EC4B  F07B         	call	_write_data
 42128  00BCDC                     l19079:
 42129  00BCDC  5019               	movf	lcd_fill_rect@x0^0,w,c
 42130  00BCDE  5C1D               	subwf	lcd_fill_rect@x1^0,w,c
 42131  00BCE0  6E23               	movwf	??_lcd_fill_rect^0,c
 42132  00BCE2  501A               	movf	(lcd_fill_rect@x0+1)^0,w,c
 42133  00BCE4  581E               	subwfb	(lcd_fill_rect@x1+1)^0,w,c
 42134  00BCE6  6E24               	movwf	(??_lcd_fill_rect+1)^0,c
 42135  00BCE8  0E01               	movlw	1
 42136  00BCEA  2623               	addwf	??_lcd_fill_rect^0,f,c
 42137  00BCEC  0E00               	movlw	0
 42138  00BCEE  2224               	addwfc	(??_lcd_fill_rect+1)^0,f,c
 42139  00BCF0  5027               	movf	lcd_fill_rect@ii^0,w,c
 42140  00BCF2  6E25               	movwf	(??_lcd_fill_rect+2)^0,c
 42141  00BCF4  5028               	movf	(lcd_fill_rect@ii+1)^0,w,c
 42142  00BCF6  6E26               	movwf	(??_lcd_fill_rect+3)^0,c
 42143  00BCF8  4A27               	infsnz	lcd_fill_rect@ii^0,f,c
 42144  00BCFA  2A28               	incf	(lcd_fill_rect@ii+1)^0,f,c
 42145  00BCFC  5023               	movf	??_lcd_fill_rect^0,w,c
 42146  00BCFE  5C25               	subwf	(??_lcd_fill_rect+2)^0,w,c
 42147  00BD00  5024               	movf	(??_lcd_fill_rect+1)^0,w,c
 42148  00BD02  5826               	subwfb	(??_lcd_fill_rect+3)^0,w,c
 42149  00BD04  A0D8               	btfss	status,0,c
 42150  00BD06  D7E4               	goto	l19077
 42151  00BD08                     u20480:
 42152  00BD08  501B               	movf	lcd_fill_rect@y0^0,w,c
 42153  00BD0A  5C1F               	subwf	lcd_fill_rect@y1^0,w,c
 42154  00BD0C  6E23               	movwf	??_lcd_fill_rect^0,c
 42155  00BD0E  501C               	movf	(lcd_fill_rect@y0+1)^0,w,c
 42156  00BD10  5820               	subwfb	(lcd_fill_rect@y1+1)^0,w,c
 42157  00BD12  6E24               	movwf	(??_lcd_fill_rect+1)^0,c
 42158  00BD14  0E01               	movlw	1
 42159  00BD16  2623               	addwf	??_lcd_fill_rect^0,f,c
 42160  00BD18  0E00               	movlw	0
 42161  00BD1A  2224               	addwfc	(??_lcd_fill_rect+1)^0,f,c
 42162  00BD1C  5029               	movf	lcd_fill_rect@jj^0,w,c
 42163  00BD1E  6E25               	movwf	(??_lcd_fill_rect+2)^0,c
 42164  00BD20  502A               	movf	(lcd_fill_rect@jj+1)^0,w,c
 42165  00BD22  6E26               	movwf	(??_lcd_fill_rect+3)^0,c
 42166  00BD24  4A29               	infsnz	lcd_fill_rect@jj^0,f,c
 42167  00BD26  2A2A               	incf	(lcd_fill_rect@jj+1)^0,f,c
 42168  00BD28  5023               	movf	??_lcd_fill_rect^0,w,c
 42169  00BD2A  5C25               	subwf	(??_lcd_fill_rect+2)^0,w,c
 42170  00BD2C  5024               	movf	(??_lcd_fill_rect+1)^0,w,c
 42171  00BD2E  5826               	subwfb	(??_lcd_fill_rect+3)^0,w,c
 42172  00BD30  A0D8               	btfss	status,0,c
 42173  00BD32  D7C9               	goto	l19075
 42174                           
 42175                           ;LCD320x240color.c: 569: };LCD320x240color.c: 570: };LCD320x240color.c: 571: do { LATAbi
      +                          ts.LATA0 = 1; } while(0);
 42176  00BD34  8089               	bsf	137,0,c	;volatile
 42177                           
 42178                           ;LCD320x240color.c: 572: SPI1_Close();
 42179  00BD36  ECFF  F07B         	call	_SPI1_Close	;wreg free
 42180  00BD3A  0012               	return		;funcret
 42181  00BD3C                     __end_of_lcd_fill_rect:
 42182                           	callstack 0
 42183                           
 42184 ;; *************** function _addset *****************
 42185 ;; Defined at:
 42186 ;;		line 103 in file "LCD320x240color.c"
 42187 ;; Parameters:    Size  Location     Type
 42188 ;;  x               2   16[COMRAM] unsigned int 
 42189 ;;  y               2   18[COMRAM] unsigned int 
 42190 ;;  xx              2   20[COMRAM] unsigned int 
 42191 ;;  yy              2   22[COMRAM] unsigned int 
 42192 ;; Auto vars:     Size  Location     Type
 42193 ;;		None
 42194 ;; Return value:  Size  Location     Type
 42195 ;;                  1    wreg      void 
 42196 ;; Registers used:
 42197 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 42198 ;; Tracked objects:
 42199 ;;		On entry : 0/2
 42200 ;;		On exit  : 0/0
 42201 ;;		Unchanged: 0/0
 42202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42203 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42206 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42207 ;;Total ram usage:        8 bytes
 42208 ;; Hardware stack levels used:    1
 42209 ;; Hardware stack levels required when called:    9
 42210 ;; This function calls:
 42211 ;;		_SPI1_Close
 42212 ;;		_spi_master_open
 42213 ;;		_write_command
 42214 ;;		_write_data
 42215 ;; This function is called by:
 42216 ;;		_lcd_fill
 42217 ;;		_drawHLine
 42218 ;;		_drawVLine
 42219 ;;		_lcd_fill_rect
 42220 ;; This function uses a non-reentrant model
 42221 ;;
 42222                           
 42223                           	psect	text145
 42224  00E37E                     __ptext145:
 42225                           	callstack 0
 42226  00E37E                     _addset:
 42227                           	callstack 20
 42228                           
 42229                           ;LCD320x240color.c: 105: if (spi_master_open(LCD8M)) {
 42230                           
 42231                           ;incstack = 0
 42232  00E37E  0E01               	movlw	1
 42233  00E380  EC3E  F076         	call	_spi_master_open
 42234  00E384  0900               	iorlw	0
 42235  00E386  B4D8               	btfsc	status,2,c
 42236  00E388  0012               	return	
 42237                           
 42238                           ;LCD320x240color.c: 107: do { LATAbits.LATA0 = 0; } while(0);
 42239  00E38A  9089               	bcf	137,0,c	;volatile
 42240                           
 42241                           ;LCD320x240color.c: 109: write_command(0x2A);
 42242  00E38C  0E2A               	movlw	42
 42243  00E38E  EC51  F07B         	call	_write_command
 42244                           
 42245                           ;LCD320x240color.c: 110: write_data(x >> 8);
 42246  00E392  5012               	movf	(addset@x+1)^0,w,c
 42247  00E394  EC4B  F07B         	call	_write_data
 42248                           
 42249                           ;LCD320x240color.c: 111: write_data(x & 0xff);
 42250  00E398  5011               	movf	addset@x^0,w,c
 42251  00E39A  EC4B  F07B         	call	_write_data
 42252                           
 42253                           ;LCD320x240color.c: 112: write_data(xx >> 8);
 42254  00E39E  5016               	movf	(addset@xx+1)^0,w,c
 42255  00E3A0  EC4B  F07B         	call	_write_data
 42256                           
 42257                           ;LCD320x240color.c: 113: write_data(xx & 0xff);
 42258  00E3A4  5015               	movf	addset@xx^0,w,c
 42259  00E3A6  EC4B  F07B         	call	_write_data
 42260                           
 42261                           ;LCD320x240color.c: 114: write_command(0x2B);
 42262  00E3AA  0E2B               	movlw	43
 42263  00E3AC  EC51  F07B         	call	_write_command
 42264                           
 42265                           ;LCD320x240color.c: 115: write_data(y >> 8);
 42266  00E3B0  5014               	movf	(addset@y+1)^0,w,c
 42267  00E3B2  EC4B  F07B         	call	_write_data
 42268                           
 42269                           ;LCD320x240color.c: 116: write_data(y & 0xff);
 42270  00E3B6  5013               	movf	addset@y^0,w,c
 42271  00E3B8  EC4B  F07B         	call	_write_data
 42272                           
 42273                           ;LCD320x240color.c: 117: write_data(yy >> 8);
 42274  00E3BC  5018               	movf	(addset@yy+1)^0,w,c
 42275  00E3BE  EC4B  F07B         	call	_write_data
 42276                           
 42277                           ;LCD320x240color.c: 118: write_data(yy & 0xff);
 42278  00E3C2  5017               	movf	addset@yy^0,w,c
 42279  00E3C4  EC4B  F07B         	call	_write_data
 42280                           
 42281                           ;LCD320x240color.c: 119: write_command(0x2C);
 42282  00E3C8  0E2C               	movlw	44
 42283  00E3CA  EC51  F07B         	call	_write_command
 42284  00E3CE  8089               	bsf	137,0,c	;volatile
 42285                           
 42286                           ;LCD320x240color.c: 122: SPI1_Close();
 42287  00E3D0  ECFF  F07B         	call	_SPI1_Close	;wreg free
 42288  00E3D4  0012               	return		;funcret
 42289  00E3D6                     __end_of_addset:
 42290                           	callstack 0
 42291                           
 42292 ;; *************** function _write_data *****************
 42293 ;; Defined at:
 42294 ;;		line 67 in file "LCD320x240color.c"
 42295 ;; Parameters:    Size  Location     Type
 42296 ;;  data            1    wreg     unsigned char 
 42297 ;; Auto vars:     Size  Location     Type
 42298 ;;  data            1   14[COMRAM] unsigned char 
 42299 ;; Return value:  Size  Location     Type
 42300 ;;                  1    wreg      void 
 42301 ;; Registers used:
 42302 ;;		wreg, status,2, cstack
 42303 ;; Tracked objects:
 42304 ;;		On entry : 0/2
 42305 ;;		On exit  : 0/0
 42306 ;;		Unchanged: 0/0
 42307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42309 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42311 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42312 ;;Total ram usage:        1 bytes
 42313 ;; Hardware stack levels used:    1
 42314 ;; Hardware stack levels required when called:    7
 42315 ;; This function calls:
 42316 ;;		_SPI1_ExchangeByte
 42317 ;; This function is called by:
 42318 ;;		_addset
 42319 ;;		_lcd_set_cursor_x
 42320 ;;		_lcd_set_cursor_y
 42321 ;;		_draw_pixel
 42322 ;;		_lcd_fill
 42323 ;;		_drawHLine
 42324 ;;		_drawVLine
 42325 ;;		_lcd_fill_rect
 42326 ;;		_glcd_init
 42327 ;; This function uses a non-reentrant model
 42328 ;;
 42329                           
 42330                           	psect	text146
 42331  00F696                     __ptext146:
 42332                           	callstack 0
 42333  00F696                     _write_data:
 42334                           	callstack 22
 42335                           
 42336                           ;incstack = 0
 42337                           ;write_data@data stored from wreg
 42338  00F696  6E0F               	movwf	write_data@data^0,c
 42339                           
 42340                           ;LCD320x240color.c: 68: do { LATAbits.LATA2 = 1; } while(0);
 42341  00F698  8489               	bsf	137,2,c	;volatile
 42342                           
 42343                           ;LCD320x240color.c: 70: SPI1_ExchangeByte(data);
 42344  00F69A  500F               	movf	write_data@data^0,w,c
 42345  00F69C  EC0D  F07B         	call	_SPI1_ExchangeByte
 42346  00F6A0  0012               	return		;funcret
 42347  00F6A2                     __end_of_write_data:
 42348                           	callstack 0
 42349                           
 42350 ;; *************** function _write_command *****************
 42351 ;; Defined at:
 42352 ;;		line 58 in file "LCD320x240color.c"
 42353 ;; Parameters:    Size  Location     Type
 42354 ;;  cmd             1    wreg     unsigned char 
 42355 ;; Auto vars:     Size  Location     Type
 42356 ;;  cmd             1   14[COMRAM] unsigned char 
 42357 ;; Return value:  Size  Location     Type
 42358 ;;                  1    wreg      void 
 42359 ;; Registers used:
 42360 ;;		wreg, status,2, cstack
 42361 ;; Tracked objects:
 42362 ;;		On entry : 0/2
 42363 ;;		On exit  : 0/0
 42364 ;;		Unchanged: 0/0
 42365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42367 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42369 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42370 ;;Total ram usage:        1 bytes
 42371 ;; Hardware stack levels used:    1
 42372 ;; Hardware stack levels required when called:    7
 42373 ;; This function calls:
 42374 ;;		_SPI1_ExchangeByte
 42375 ;; This function is called by:
 42376 ;;		_addset
 42377 ;;		_lcd_set_cursor_x
 42378 ;;		_lcd_set_cursor_y
 42379 ;;		_glcd_init
 42380 ;;		_glcd_init2
 42381 ;; This function uses a non-reentrant model
 42382 ;;
 42383                           
 42384                           	psect	text147
 42385  00F6A2                     __ptext147:
 42386                           	callstack 0
 42387  00F6A2                     _write_command:
 42388                           	callstack 21
 42389                           
 42390                           ;incstack = 0
 42391                           ;write_command@cmd stored from wreg
 42392  00F6A2  6E0F               	movwf	write_command@cmd^0,c
 42393                           
 42394                           ;LCD320x240color.c: 59: do { LATAbits.LATA2 = 0; } while(0);
 42395  00F6A4  9489               	bcf	137,2,c	;volatile
 42396                           
 42397                           ;LCD320x240color.c: 65: SPI1_ExchangeByte(cmd);
 42398  00F6A6  500F               	movf	write_command@cmd^0,w,c
 42399  00F6A8  EC0D  F07B         	call	_SPI1_ExchangeByte
 42400  00F6AC  0012               	return		;funcret
 42401  00F6AE                     __end_of_write_command:
 42402                           	callstack 0
 42403                           
 42404 ;; *************** function _spi_master_open *****************
 42405 ;; Defined at:
 42406 ;;		line 74 in file "mcc_generated_files/drivers/spi_master.c"
 42407 ;; Parameters:    Size  Location     Type
 42408 ;;  config          1    wreg     enum E120
 42409 ;; Auto vars:     Size  Location     Type
 42410 ;;  config          1   15[COMRAM] enum E120
 42411 ;; Return value:  Size  Location     Type
 42412 ;;                  1    wreg      unsigned char 
 42413 ;; Registers used:
 42414 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 42415 ;; Tracked objects:
 42416 ;;		On entry : 0/2
 42417 ;;		On exit  : 0/0
 42418 ;;		Unchanged: 0/0
 42419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42421 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42423 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42424 ;;Total ram usage:        1 bytes
 42425 ;; Hardware stack levels used:    1
 42426 ;; Hardware stack levels required when called:    8
 42427 ;; This function calls:
 42428 ;;		_LCD8M_open
 42429 ;;		_SDFAST_open
 42430 ;;		_SDSLOW_open
 42431 ;;		_Touch2M_open
 42432 ;; This function is called by:
 42433 ;;		_addset
 42434 ;;		_lcd_set_cursor_x
 42435 ;;		_lcd_set_cursor_y
 42436 ;;		_draw_pixel
 42437 ;;		_lcd_fill
 42438 ;;		_drawHLine
 42439 ;;		_drawVLine
 42440 ;;		_lcd_fill_rect
 42441 ;;		_glcd_init
 42442 ;;		_glcd_init2
 42443 ;; This function uses a non-reentrant model
 42444 ;;
 42445                           
 42446                           	psect	text148
 42447  00EC7C                     __ptext148:
 42448                           	callstack 0
 42449  00EC7C                     _spi_master_open:
 42450                           	callstack 21
 42451                           
 42452                           ;incstack = 0
 42453                           ;spi_master_open@config stored from wreg
 42454  00EC7C  6E10               	movwf	spi_master_open@config^0,c
 42455                           
 42456                           ;spi_master.c: 75: switch(config){
 42457  00EC7E  D00E               	goto	l18555
 42458  00EC80                     l18533:
 42459                           
 42460                           ;spi_master.c: 77: return SDFAST_open();
 42461  00EC80  ECB4  F07B         	call	_SDFAST_open	;wreg free
 42462  00EC84  0012               	return	
 42463  00EC86                     l18537:
 42464                           
 42465                           ;spi_master.c: 79: return LCD8M_open();
 42466  00EC86  ECB0  F07B         	call	_LCD8M_open	;wreg free
 42467  00EC8A  0012               	return	
 42468  00EC8C                     l18541:
 42469                           
 42470                           ;spi_master.c: 81: return SDSLOW_open();
 42471  00EC8C  ECAC  F07B         	call	_SDSLOW_open	;wreg free
 42472  00EC90  0012               	return	
 42473  00EC92                     l18545:
 42474                           
 42475                           ;spi_master.c: 83: return Touch2M_open();
 42476  00EC92  ECB8  F07B         	call	_Touch2M_open	;wreg free
 42477  00EC96  0012               	return	
 42478  00EC98                     l18549:
 42479                           
 42480                           ;spi_master.c: 85: return 0;
 42481  00EC98  0E00               	movlw	0
 42482  00EC9A  0012               	return	
 42483  00EC9C                     l18555:
 42484  00EC9C  5010               	movf	spi_master_open@config^0,w,c
 42485                           
 42486                           ; Switch size 1, requested type "simple"
 42487                           ; Number of cases is 4, Range of values is 0 to 3
 42488                           ; switch strategies available:
 42489                           ; Name         Instructions Cycles
 42490                           ; simple_byte           13     7 (average)
 42491                           ;	Chosen strategy is simple_byte
 42492  00EC9E  0A00               	xorlw	0	; case 0
 42493  00ECA0  B4D8               	btfsc	status,2,c
 42494  00ECA2  D7EE               	goto	l18533
 42495  00ECA4  0A01               	xorlw	1	; case 1
 42496  00ECA6  B4D8               	btfsc	status,2,c
 42497  00ECA8  D7EE               	goto	l18537
 42498  00ECAA  0A03               	xorlw	3	; case 2
 42499  00ECAC  B4D8               	btfsc	status,2,c
 42500  00ECAE  D7EE               	goto	l18541
 42501  00ECB0  0A01               	xorlw	1	; case 3
 42502  00ECB2  B4D8               	btfsc	status,2,c
 42503  00ECB4  D7EE               	goto	l18545
 42504  00ECB6  D7F0               	goto	l18549
 42505  00ECB8                     __end_of_spi_master_open:
 42506                           	callstack 0
 42507                           
 42508 ;; *************** function _SDSLOW_open *****************
 42509 ;; Defined at:
 42510 ;;		line 55 in file "mcc_generated_files/drivers/spi_master.c"
 42511 ;; Parameters:    Size  Location     Type
 42512 ;;		None
 42513 ;; Auto vars:     Size  Location     Type
 42514 ;;		None
 42515 ;; Return value:  Size  Location     Type
 42516 ;;                  1    wreg      unsigned char 
 42517 ;; Registers used:
 42518 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 42519 ;; Tracked objects:
 42520 ;;		On entry : 0/3
 42521 ;;		On exit  : 0/0
 42522 ;;		Unchanged: 0/0
 42523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42528 ;;Total ram usage:        0 bytes
 42529 ;; Hardware stack levels used:    1
 42530 ;; Hardware stack levels required when called:    7
 42531 ;; This function calls:
 42532 ;;		_SPI1_Open
 42533 ;; This function is called by:
 42534 ;;		_spi_master_open
 42535 ;;		_SD_SPI_SectorWrite
 42536 ;;		_SD_SPI_SectorRead
 42537 ;;		_SD_SPI_MediaInitialize
 42538 ;; This function uses a non-reentrant model
 42539 ;;
 42540                           
 42541                           	psect	text149
 42542  00F758                     __ptext149:
 42543                           	callstack 0
 42544  00F758                     _SDSLOW_open:
 42545                           	callstack 21
 42546                           
 42547                           ;spi_master.c: 56: return SPI1_Open(SDSLOW_CONFIG);
 42548                           
 42549                           ;incstack = 0
 42550  00F758  0E02               	movlw	2
 42551  00F75A  EC71  F067         	call	_SPI1_Open
 42552  00F75E  0012               	return		;funcret
 42553  00F760                     __end_of_SDSLOW_open:
 42554                           	callstack 0
 42555                           
 42556 ;; *************** function _LCD8M_open *****************
 42557 ;; Defined at:
 42558 ;;		line 51 in file "mcc_generated_files/drivers/spi_master.c"
 42559 ;; Parameters:    Size  Location     Type
 42560 ;;		None
 42561 ;; Auto vars:     Size  Location     Type
 42562 ;;		None
 42563 ;; Return value:  Size  Location     Type
 42564 ;;                  1    wreg      unsigned char 
 42565 ;; Registers used:
 42566 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 42567 ;; Tracked objects:
 42568 ;;		On entry : 0/3
 42569 ;;		On exit  : 0/0
 42570 ;;		Unchanged: 0/0
 42571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42576 ;;Total ram usage:        0 bytes
 42577 ;; Hardware stack levels used:    1
 42578 ;; Hardware stack levels required when called:    7
 42579 ;; This function calls:
 42580 ;;		_SPI1_Open
 42581 ;; This function is called by:
 42582 ;;		_spi_master_open
 42583 ;;		_SD_SPI_SectorWrite
 42584 ;;		_SD_SPI_SectorRead
 42585 ;;		_SD_SPI_MediaInitialize
 42586 ;; This function uses a non-reentrant model
 42587 ;;
 42588                           
 42589                           	psect	text150
 42590  00F760                     __ptext150:
 42591                           	callstack 0
 42592  00F760                     _LCD8M_open:
 42593                           	callstack 21
 42594                           
 42595                           ;spi_master.c: 52: return SPI1_Open(LCD8M_CONFIG);
 42596                           
 42597                           ;incstack = 0
 42598  00F760  0E01               	movlw	1
 42599  00F762  EC71  F067         	call	_SPI1_Open
 42600  00F766  0012               	return		;funcret
 42601  00F768                     __end_of_LCD8M_open:
 42602                           	callstack 0
 42603                           
 42604 ;; *************** function _SDFAST_open *****************
 42605 ;; Defined at:
 42606 ;;		line 47 in file "mcc_generated_files/drivers/spi_master.c"
 42607 ;; Parameters:    Size  Location     Type
 42608 ;;		None
 42609 ;; Auto vars:     Size  Location     Type
 42610 ;;		None
 42611 ;; Return value:  Size  Location     Type
 42612 ;;                  1    wreg      unsigned char 
 42613 ;; Registers used:
 42614 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 42615 ;; Tracked objects:
 42616 ;;		On entry : 0/3
 42617 ;;		On exit  : 0/0
 42618 ;;		Unchanged: 0/0
 42619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42624 ;;Total ram usage:        0 bytes
 42625 ;; Hardware stack levels used:    1
 42626 ;; Hardware stack levels required when called:    7
 42627 ;; This function calls:
 42628 ;;		_SPI1_Open
 42629 ;; This function is called by:
 42630 ;;		_spi_master_open
 42631 ;;		_SD_SPI_SectorWrite
 42632 ;;		_SD_SPI_SectorRead
 42633 ;;		_SD_SPI_MediaInitialize
 42634 ;; This function uses a non-reentrant model
 42635 ;;
 42636                           
 42637                           	psect	text151
 42638  00F768                     __ptext151:
 42639                           	callstack 0
 42640  00F768                     _SDFAST_open:
 42641                           	callstack 21
 42642                           
 42643                           ;spi_master.c: 48: return SPI1_Open(SDFAST_CONFIG);
 42644                           
 42645                           ;incstack = 0
 42646  00F768  0E00               	movlw	0
 42647  00F76A  EC71  F067         	call	_SPI1_Open
 42648  00F76E  0012               	return		;funcret
 42649  00F770                     __end_of_SDFAST_open:
 42650                           	callstack 0
 42651                           
 42652 ;; *************** function _Touch2M_open *****************
 42653 ;; Defined at:
 42654 ;;		line 59 in file "mcc_generated_files/drivers/spi_master.c"
 42655 ;; Parameters:    Size  Location     Type
 42656 ;;		None
 42657 ;; Auto vars:     Size  Location     Type
 42658 ;;		None
 42659 ;; Return value:  Size  Location     Type
 42660 ;;                  1    wreg      unsigned char 
 42661 ;; Registers used:
 42662 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 42663 ;; Tracked objects:
 42664 ;;		On entry : 0/3
 42665 ;;		On exit  : 0/0
 42666 ;;		Unchanged: 0/0
 42667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42672 ;;Total ram usage:        0 bytes
 42673 ;; Hardware stack levels used:    1
 42674 ;; Hardware stack levels required when called:    7
 42675 ;; This function calls:
 42676 ;;		_SPI1_Open
 42677 ;; This function is called by:
 42678 ;;		_spi_master_open
 42679 ;;		_SD_SPI_SectorWrite
 42680 ;;		_SD_SPI_SectorRead
 42681 ;;		_SD_SPI_MediaInitialize
 42682 ;; This function uses a non-reentrant model
 42683 ;;
 42684                           
 42685                           	psect	text152
 42686  00F770                     __ptext152:
 42687                           	callstack 0
 42688  00F770                     _Touch2M_open:
 42689                           	callstack 21
 42690                           
 42691                           ;spi_master.c: 60: return SPI1_Open(Touch2M_CONFIG);
 42692                           
 42693                           ;incstack = 0
 42694  00F770  0E04               	movlw	4
 42695  00F772  EC71  F067         	call	_SPI1_Open
 42696  00F776  0012               	return		;funcret
 42697  00F778                     __end_of_Touch2M_open:
 42698                           	callstack 0
 42699                           
 42700 ;; *************** function _cosd *****************
 42701 ;; Defined at:
 42702 ;;		line 273 in file "Draw.c"
 42703 ;; Parameters:    Size  Location     Type
 42704 ;;  theta           2   26[COMRAM] unsigned int 
 42705 ;; Auto vars:     Size  Location     Type
 42706 ;;		None
 42707 ;; Return value:  Size  Location     Type
 42708 ;;                  2   26[COMRAM] int 
 42709 ;; Registers used:
 42710 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42711 ;; Tracked objects:
 42712 ;;		On entry : 3F/1
 42713 ;;		On exit  : 0/0
 42714 ;;		Unchanged: 0/0
 42715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42716 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42719 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42720 ;;Total ram usage:        2 bytes
 42721 ;; Hardware stack levels used:    1
 42722 ;; Hardware stack levels required when called:    8
 42723 ;; This function calls:
 42724 ;;		_sind
 42725 ;; This function is called by:
 42726 ;;		_DrawAnalogClock
 42727 ;; This function uses a non-reentrant model
 42728 ;;
 42729                           
 42730                           	psect	text153
 42731  00F28E                     __ptext153:
 42732                           	callstack 0
 42733  00F28E                     _cosd:
 42734                           	callstack 19
 42735                           
 42736                           ; BSR set to: 1
 42737                           ;Draw.c: 274: theta = theta+90;
 42738                           
 42739                           ;incstack = 0
 42740  00F28E  0E5A               	movlw	90
 42741  00F290  241B               	addwf	cosd@theta^0,w,c
 42742  00F292  6E1B               	movwf	cosd@theta^0,c
 42743  00F294  0E00               	movlw	0
 42744  00F296  201C               	addwfc	(cosd@theta+1)^0,w,c
 42745  00F298  6E1C               	movwf	(cosd@theta+1)^0,c
 42746                           
 42747                           ; BSR set to: 1
 42748                           ;Draw.c: 275: return sind(theta);
 42749  00F29A  C01B  F013         	movff	cosd@theta,sind@theta
 42750  00F29E  C01C  F014         	movff	cosd@theta+1,sind@theta+1
 42751  00F2A2  ECBE  F069         	call	_sind	;wreg free
 42752  00F2A6  C013  F01B         	movff	?_sind,?_cosd
 42753  00F2AA  C014  F01C         	movff	?_sind+1,?_cosd+1
 42754  00F2AE  0012               	return		;funcret
 42755  00F2B0                     __end_of_cosd:
 42756                           	callstack 0
 42757                           
 42758 ;; *************** function _sind *****************
 42759 ;; Defined at:
 42760 ;;		line 259 in file "Draw.c"
 42761 ;; Parameters:    Size  Location     Type
 42762 ;;  theta           2   18[COMRAM] unsigned int 
 42763 ;; Auto vars:     Size  Location     Type
 42764 ;;		None
 42765 ;; Return value:  Size  Location     Type
 42766 ;;                  2   18[COMRAM] int 
 42767 ;; Registers used:
 42768 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42769 ;; Tracked objects:
 42770 ;;		On entry : 0/1
 42771 ;;		On exit  : 0/0
 42772 ;;		Unchanged: 0/0
 42773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42774 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42776 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42777 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42778 ;;Total ram usage:        8 bytes
 42779 ;; Hardware stack levels used:    1
 42780 ;; Hardware stack levels required when called:    7
 42781 ;; This function calls:
 42782 ;;		___lwmod
 42783 ;; This function is called by:
 42784 ;;		_cosd
 42785 ;;		_DrawAnalogClock
 42786 ;; This function uses a non-reentrant model
 42787 ;;
 42788                           
 42789                           	psect	text154
 42790  00D37C                     __ptext154:
 42791                           	callstack 0
 42792  00D37C                     _sind:
 42793                           	callstack 20
 42794                           
 42795                           ;Draw.c: 260: theta = theta % 360;
 42796                           
 42797                           ;incstack = 0
 42798  00D37C  C013  F00E         	movff	sind@theta,___lwmod@dividend
 42799  00D380  C014  F00F         	movff	sind@theta+1,___lwmod@dividend+1
 42800  00D384  0E01               	movlw	1
 42801  00D386  6E11               	movwf	(___lwmod@divisor+1)^0,c
 42802  00D388  0E68               	movlw	104
 42803  00D38A  6E10               	movwf	___lwmod@divisor^0,c
 42804  00D38C  EC42  F075         	call	___lwmod	;wreg free
 42805  00D390  C00E  F013         	movff	?___lwmod,sind@theta
 42806  00D394  C00F  F014         	movff	?___lwmod+1,sind@theta+1
 42807                           
 42808                           ;Draw.c: 262: if (theta >= 180) {
 42809  00D398  5014               	movf	(sind@theta+1)^0,w,c
 42810  00D39A  E104               	bnz	u21940
 42811  00D39C  0EB4               	movlw	180
 42812  00D39E  5C13               	subwf	sind@theta^0,w,c
 42813  00D3A0  A0D8               	btfss	status,0,c
 42814  00D3A2  D027               	goto	l20129
 42815  00D3A4                     u21940:
 42816                           
 42817                           ;Draw.c: 264: return -sin_table[theta-180];
 42818  00D3A4  0E98               	movlw	152
 42819  00D3A6  6E15               	movwf	??_sind^0,c
 42820  00D3A8  0EFE               	movlw	254
 42821  00D3AA  6E16               	movwf	(??_sind+1)^0,c
 42822  00D3AC  C013  F017         	movff	sind@theta,??_sind+2
 42823  00D3B0  C014  F018         	movff	sind@theta+1,??_sind+3
 42824  00D3B4  90D8               	bcf	status,0,c
 42825  00D3B6  3617               	rlcf	(??_sind+2)^0,f,c
 42826  00D3B8  3618               	rlcf	(??_sind+3)^0,f,c
 42827  00D3BA  5015               	movf	??_sind^0,w,c
 42828  00D3BC  2617               	addwf	(??_sind+2)^0,f,c
 42829  00D3BE  5016               	movf	(??_sind+1)^0,w,c
 42830  00D3C0  2218               	addwfc	(??_sind+3)^0,f,c
 42831  00D3C2  0E67               	movlw	low _sin_table
 42832  00D3C4  2417               	addwf	(??_sind+2)^0,w,c
 42833  00D3C6  6EF6               	movwf	tblptrl,c
 42834  00D3C8  0EF8               	movlw	high _sin_table
 42835  00D3CA  2018               	addwfc	(??_sind+3)^0,w,c
 42836  00D3CC  6EF7               	movwf	tblptrh,c
 42837  00D3CE                     	if	1	;There are 3 active tblptr bytes
 42838  00D3CE  6AF8               	clrf	tblptru,c
 42839  00D3D0  0E00               	movlw	low (__mediumconst shr (0+16))
 42840  00D3D2  22F8               	addwfc	tblptru,f,c
 42841  00D3D4                     	endif
 42842  00D3D4  0009               	tblrd		*+
 42843  00D3D6  CFF5 F019          	movff	tablat,??_sind+4
 42844  00D3DA  0009               	tblrd		*+
 42845  00D3DC  CFF5 F01A          	movff	tablat,??_sind+5
 42846  00D3E0  1E19               	comf	(??_sind+4)^0,f,c
 42847  00D3E2  1E1A               	comf	(??_sind+5)^0,f,c
 42848  00D3E4  4A19               	infsnz	(??_sind+4)^0,f,c
 42849  00D3E6  2A1A               	incf	(??_sind+5)^0,f,c
 42850  00D3E8  C019  F013         	movff	??_sind+4,?_sind
 42851  00D3EC  C01A  F014         	movff	??_sind+5,?_sind+1
 42852  00D3F0  0012               	return	
 42853  00D3F2                     l20129:
 42854                           
 42855                           ;Draw.c: 267: return sin_table[theta];
 42856  00D3F2  90D8               	bcf	status,0,c
 42857  00D3F4  3413               	rlcf	sind@theta^0,w,c
 42858  00D3F6  6EF6               	movwf	tblptrl,c
 42859  00D3F8  3414               	rlcf	(sind@theta+1)^0,w,c
 42860  00D3FA  6EF7               	movwf	tblptrh,c
 42861  00D3FC  0E67               	movlw	low _sin_table
 42862  00D3FE  26F6               	addwf	tblptrl,f,c
 42863  00D400  0EF8               	movlw	high _sin_table
 42864  00D402  22F7               	addwfc	tblptrh,f,c
 42865  00D404                     	if	1	;There are 3 active tblptr bytes
 42866  00D404  6AF8               	clrf	tblptru,c
 42867  00D406  0E00               	movlw	low (__mediumconst shr (0+16))
 42868  00D408  22F8               	addwfc	tblptru,f,c
 42869  00D40A                     	endif
 42870  00D40A  0009               	tblrd		*+
 42871  00D40C  CFF5 F013          	movff	tablat,?_sind
 42872  00D410  000A               	tblrd		*-
 42873  00D412  CFF5 F014          	movff	tablat,?_sind+1
 42874  00D416  0012               	return		;funcret
 42875  00D418                     __end_of_sind:
 42876                           	callstack 0
 42877                           
 42878 ;; *************** function _WriteYMD *****************
 42879 ;; Defined at:
 42880 ;;		line 349 in file "main.c"
 42881 ;; Parameters:    Size  Location     Type
 42882 ;;		None
 42883 ;; Auto vars:     Size  Location     Type
 42884 ;;  tmp             4   21[COMRAM] unsigned char [4]
 42885 ;;  jj              1   25[COMRAM] char 
 42886 ;; Return value:  Size  Location     Type
 42887 ;;                  1    wreg      void 
 42888 ;; Registers used:
 42889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 42890 ;; Tracked objects:
 42891 ;;		On entry : 0/3
 42892 ;;		On exit  : 0/0
 42893 ;;		Unchanged: 0/0
 42894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 42895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42896 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42897 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42898 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 42899 ;;Total ram usage:        9 bytes
 42900 ;; Hardware stack levels used:    1
 42901 ;; Hardware stack levels required when called:    7
 42902 ;; This function calls:
 42903 ;;		_DATAEE_ReadByte
 42904 ;;		_DATAEE_WriteByte
 42905 ;; This function is called by:
 42906 ;;		_NormalProc
 42907 ;;		_SettingProc
 42908 ;; This function uses a non-reentrant model
 42909 ;;
 42910                           
 42911                           	psect	text155
 42912  00D6F6                     __ptext155:
 42913                           	callstack 0
 42914  00D6F6                     _WriteYMD:
 42915                           	callstack 22
 42916                           
 42917                           ;main.c: 350: int8_t jj;;main.c: 351: char tmp[4];;main.c: 354: for (jj = 0; jj < 4; jj+
      +                          +) {
 42918                           
 42919                           ;incstack = 0
 42920  00D6F6  0E00               	movlw	0
 42921  00D6F8  6E1A               	movwf	WriteYMD@jj^0,c
 42922  00D6FA                     l23735:
 42923                           
 42924                           ;main.c: 355: tmp[jj] = (unsigned)DATAEE_ReadByte(0x08 + jj);
 42925  00D6FA  501A               	movf	WriteYMD@jj^0,w,c
 42926  00D6FC  0F16               	addlw	low WriteYMD@tmp
 42927  00D6FE  6ED9               	movwf	fsr2l,c
 42928  00D700  6ADA               	clrf	fsr2h,c
 42929  00D702  0E08               	movlw	8
 42930  00D704  241A               	addwf	WriteYMD@jj^0,w,c
 42931  00D706  6E0E               	movwf	DATAEE_ReadByte@bAdd^0,c
 42932  00D708  6AE8               	clrf	wreg,c
 42933  00D70A  B0D8               	btfsc	status,0,c
 42934  00D70C  2AE8               	incf	wreg,f,c
 42935  00D70E  BE1A               	btfsc	WriteYMD@jj^0,7,c
 42936  00D710  06E8               	decf	wreg,f,c
 42937  00D712  6E0F               	movwf	(DATAEE_ReadByte@bAdd+1)^0,c
 42938  00D714  EC3E  F07A         	call	_DATAEE_ReadByte	;wreg free
 42939  00D718  6EDF               	movwf	indf2,c
 42940                           
 42941                           ;main.c: 356: if (tmp[jj] != DateTime[jj+3]) {
 42942  00D71A  C01A  F012         	movff	WriteYMD@jj,??_WriteYMD
 42943  00D71E  6A13               	clrf	(??_WriteYMD+1)^0,c
 42944  00D720  BE12               	btfsc	??_WriteYMD^0,7,c
 42945  00D722  0613               	decf	(??_WriteYMD+1)^0,f,c
 42946  00D724  0EF9               	movlw	low (_DateTime+3)
 42947  00D726  2412               	addwf	??_WriteYMD^0,w,c
 42948  00D728  6ED9               	movwf	fsr2l,c
 42949  00D72A  0E02               	movlw	high (_DateTime+3)
 42950  00D72C  2013               	addwfc	(??_WriteYMD+1)^0,w,c
 42951  00D72E  6EDA               	movwf	fsr2h,c
 42952  00D730  501A               	movf	WriteYMD@jj^0,w,c
 42953  00D732  0F16               	addlw	low WriteYMD@tmp
 42954  00D734  6EE1               	movwf	fsr1l,c
 42955  00D736  6AE2               	clrf	fsr1h,c
 42956  00D738  50DE               	movf	postinc2,w,c
 42957  00D73A  18E6               	xorwf	postinc1,w,c
 42958  00D73C  B4D8               	btfsc	status,2,c
 42959  00D73E  D01A               	goto	l23743
 42960                           
 42961                           ;main.c: 357: DATAEE_WriteByte(0x08 + jj, DateTime[jj+3]);
 42962  00D740  0E08               	movlw	8
 42963  00D742  241A               	addwf	WriteYMD@jj^0,w,c
 42964  00D744  6E0E               	movwf	DATAEE_WriteByte@bAdd^0,c
 42965  00D746  6AE8               	clrf	wreg,c
 42966  00D748  B0D8               	btfsc	status,0,c
 42967  00D74A  2AE8               	incf	wreg,f,c
 42968  00D74C  BE1A               	btfsc	WriteYMD@jj^0,7,c
 42969  00D74E  06E8               	decf	wreg,f,c
 42970  00D750  6E0F               	movwf	(DATAEE_WriteByte@bAdd+1)^0,c
 42971  00D752  C01A  F012         	movff	WriteYMD@jj,??_WriteYMD
 42972  00D756  6A13               	clrf	(??_WriteYMD+1)^0,c
 42973  00D758  BE12               	btfsc	??_WriteYMD^0,7,c
 42974  00D75A  0613               	decf	(??_WriteYMD+1)^0,f,c
 42975  00D75C  0EF9               	movlw	low (_DateTime+3)
 42976  00D75E  2412               	addwf	??_WriteYMD^0,w,c
 42977  00D760  6ED9               	movwf	fsr2l,c
 42978  00D762  0E02               	movlw	high (_DateTime+3)
 42979  00D764  2013               	addwfc	(??_WriteYMD+1)^0,w,c
 42980  00D766  6EDA               	movwf	fsr2h,c
 42981  00D768  50DF               	movf	indf2,w,c
 42982  00D76A  6E10               	movwf	DATAEE_WriteByte@bData^0,c
 42983  00D76C  EC5C  F076         	call	_DATAEE_WriteByte	;wreg free
 42984                           
 42985                           ;main.c: 358: UpdateFlag |= 0x20;
 42986  00D770  0103               	movlb	3	; () banked
 42987  00D772  8BA5               	bsf	_UpdateFlag& (0+255),5,b
 42988  00D774                     l23743:
 42989  00D774  2A1A               	incf	WriteYMD@jj^0,f,c
 42990  00D776  501A               	movf	WriteYMD@jj^0,w,c
 42991  00D778  0A80               	xorlw	128
 42992  00D77A  0F7C               	addlw	-132
 42993  00D77C  B0D8               	btfsc	status,0,c
 42994  00D77E  0012               	return	
 42995  00D780  D7BC               	goto	l23735
 42996  00D782                     __end_of_WriteYMD:
 42997                           	callstack 0
 42998                           
 42999 ;; *************** function _DATAEE_WriteByte *****************
 43000 ;; Defined at:
 43001 ;;		line 176 in file "mcc_generated_files/memory.c"
 43002 ;; Parameters:    Size  Location     Type
 43003 ;;  bAdd            2   13[COMRAM] unsigned int 
 43004 ;;  bData           1   15[COMRAM] unsigned char 
 43005 ;; Auto vars:     Size  Location     Type
 43006 ;;  GIEBitValue     1   16[COMRAM] unsigned char 
 43007 ;; Return value:  Size  Location     Type
 43008 ;;                  1    wreg      void 
 43009 ;; Registers used:
 43010 ;;		wreg, status,2, status,0
 43011 ;; Tracked objects:
 43012 ;;		On entry : 0/2
 43013 ;;		On exit  : 0/0
 43014 ;;		Unchanged: 0/0
 43015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43016 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43017 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43019 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43020 ;;Total ram usage:        4 bytes
 43021 ;; Hardware stack levels used:    1
 43022 ;; Hardware stack levels required when called:    6
 43023 ;; This function calls:
 43024 ;;		Nothing
 43025 ;; This function is called by:
 43026 ;;		_WriteYMD
 43027 ;;		_NormalProc
 43028 ;;		_SlideSWProc
 43029 ;;		_main
 43030 ;; This function uses a non-reentrant model
 43031 ;;
 43032                           
 43033                           	psect	text156
 43034  00ECB8                     __ptext156:
 43035                           	callstack 0
 43036  00ECB8                     _DATAEE_WriteByte:
 43037                           	callstack 23
 43038                           
 43039                           ;memory.c: 178: uint8_t GIEBitValue = INTCONbits.GIE;
 43040                           
 43041                           ;incstack = 0
 43042  00ECB8  0E00               	movlw	0
 43043  00ECBA  BEF2               	btfsc	242,7,c	;volatile
 43044  00ECBC  0E01               	movlw	1
 43045  00ECBE  6E11               	movwf	DATAEE_WriteByte@GIEBitValue^0,c
 43046                           
 43047                           ;memory.c: 180: EEADRH = ((bAdd >> 8) & 0x03);
 43048  00ECC0  500F               	movf	(DATAEE_WriteByte@bAdd+1)^0,w,c
 43049  00ECC2  0B03               	andlw	3
 43050  00ECC4  6EAA               	movwf	170,c	;volatile
 43051                           
 43052                           ;memory.c: 181: EEADR = (bAdd & 0xFF);
 43053  00ECC6  C00E  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 43054                           
 43055                           ;memory.c: 182: EEDATA = bData;
 43056  00ECCA  C010  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 43057                           
 43058                           ;memory.c: 183: EECON1bits.EEPGD = 0;
 43059  00ECCE  9EA6               	bcf	166,7,c	;volsfr
 43060                           
 43061                           ;memory.c: 184: EECON1bits.CFGS = 0;
 43062  00ECD0  9CA6               	bcf	166,6,c	;volsfr
 43063                           
 43064                           ;memory.c: 185: EECON1bits.WREN = 1;
 43065  00ECD2  84A6               	bsf	166,2,c	;volsfr
 43066                           
 43067                           ;memory.c: 186: INTCONbits.GIE = 0;
 43068  00ECD4  9EF2               	bcf	242,7,c	;volatile
 43069                           
 43070                           ;memory.c: 187: EECON2 = 0x55;
 43071  00ECD6  0E55               	movlw	85
 43072  00ECD8  6EA7               	movwf	167,c	;volsfr
 43073                           
 43074                           ;memory.c: 188: EECON2 = 0xAA;
 43075  00ECDA  0EAA               	movlw	170
 43076  00ECDC  6EA7               	movwf	167,c	;volsfr
 43077                           
 43078                           ;memory.c: 189: EECON1bits.WR = 1;
 43079  00ECDE  82A6               	bsf	166,1,c	;volsfr
 43080  00ECE0                     l1647:
 43081  00ECE0  B2A6               	btfsc	166,1,c	;volsfr
 43082  00ECE2  D7FE               	goto	l1647
 43083                           
 43084                           ;memory.c: 193: };memory.c: 195: EECON1bits.WREN = 0;
 43085  00ECE4  94A6               	bcf	166,2,c	;volsfr
 43086                           
 43087                           ;memory.c: 196: INTCONbits.GIE = GIEBitValue;
 43088  00ECE6  B011               	btfsc	DATAEE_WriteByte@GIEBitValue^0,0,c
 43089  00ECE8  D002               	bra	u25855
 43090  00ECEA  9EF2               	bcf	242,7,c	;volatile
 43091  00ECEC  D001               	bra	u25856
 43092  00ECEE                     u25855:
 43093  00ECEE  8EF2               	bsf	242,7,c	;volatile
 43094  00ECF0                     u25856:
 43095  00ECF0  0012               	return		;funcret
 43096  00ECF2                     __end_of_DATAEE_WriteByte:
 43097                           	callstack 0
 43098                           
 43099 ;; *************** function _DATAEE_ReadByte *****************
 43100 ;; Defined at:
 43101 ;;		line 199 in file "mcc_generated_files/memory.c"
 43102 ;; Parameters:    Size  Location     Type
 43103 ;;  bAdd            2   13[COMRAM] unsigned int 
 43104 ;; Auto vars:     Size  Location     Type
 43105 ;;		None
 43106 ;; Return value:  Size  Location     Type
 43107 ;;                  1    wreg      unsigned char 
 43108 ;; Registers used:
 43109 ;;		wreg, status,2, status,0
 43110 ;; Tracked objects:
 43111 ;;		On entry : 0/2
 43112 ;;		On exit  : 0/0
 43113 ;;		Unchanged: 0/0
 43114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43119 ;;Total ram usage:        2 bytes
 43120 ;; Hardware stack levels used:    1
 43121 ;; Hardware stack levels required when called:    6
 43122 ;; This function calls:
 43123 ;;		Nothing
 43124 ;; This function is called by:
 43125 ;;		_WriteYMD
 43126 ;;		_main
 43127 ;; This function uses a non-reentrant model
 43128 ;;
 43129                           
 43130                           	psect	text157
 43131  00F47C                     __ptext157:
 43132                           	callstack 0
 43133  00F47C                     _DATAEE_ReadByte:
 43134                           	callstack 22
 43135                           
 43136                           ;memory.c: 201: EEADRH = ((bAdd >> 8) & 0x03);
 43137                           
 43138                           ;incstack = 0
 43139  00F47C  500F               	movf	(DATAEE_ReadByte@bAdd+1)^0,w,c
 43140  00F47E  0B03               	andlw	3
 43141  00F480  6EAA               	movwf	170,c	;volatile
 43142                           
 43143                           ;memory.c: 202: EEADR = (bAdd & 0xFF);
 43144  00F482  C00E  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 43145                           
 43146                           ;memory.c: 203: EECON1bits.CFGS = 0;
 43147  00F486  9CA6               	bcf	166,6,c	;volsfr
 43148                           
 43149                           ;memory.c: 204: EECON1bits.EEPGD = 0;
 43150  00F488  9EA6               	bcf	166,7,c	;volsfr
 43151                           
 43152                           ;memory.c: 205: EECON1bits.RD = 1;
 43153  00F48A  80A6               	bsf	166,0,c	;volsfr
 43154                           
 43155                           ;memory.c: 206: __nop();
 43156  00F48C  F000               	nop	
 43157                           
 43158                           ;memory.c: 207: __nop();
 43159  00F48E  F000               	nop	
 43160                           
 43161                           ;memory.c: 209: return (EEDATA);
 43162  00F490  50A8               	movf	168,w,c	;volatile
 43163  00F492  0012               	return		;funcret
 43164  00F494                     __end_of_DATAEE_ReadByte:
 43165                           	callstack 0
 43166                           
 43167 ;; *************** function _TransCoordination *****************
 43168 ;; Defined at:
 43169 ;;		line 140 in file "TouchXT2046.c"
 43170 ;; Parameters:    Size  Location     Type
 43171 ;;  x               2   39[COMRAM] unsigned int 
 43172 ;;  y               2   41[COMRAM] unsigned int 
 43173 ;;  xg              2   43[COMRAM] PTR unsigned int 
 43174 ;;		 -> Test_x(2), 
 43175 ;;  yg              2   45[COMRAM] PTR unsigned int 
 43176 ;;		 -> Test_y(2), 
 43177 ;; Auto vars:     Size  Location     Type
 43178 ;;  str           100    0        unsigned char [100]
 43179 ;;  yy              4   53[COMRAM] long 
 43180 ;;  xx              4   49[COMRAM] long 
 43181 ;; Return value:  Size  Location     Type
 43182 ;;                  1    wreg      void 
 43183 ;; Registers used:
 43184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 43185 ;; Tracked objects:
 43186 ;;		On entry : 0/2
 43187 ;;		On exit  : 0/0
 43188 ;;		Unchanged: 0/0
 43189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43190 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43191 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43192 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43193 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43194 ;;Total ram usage:       18 bytes
 43195 ;; Hardware stack levels used:    1
 43196 ;; Hardware stack levels required when called:    7
 43197 ;; This function calls:
 43198 ;;		___aldiv
 43199 ;;		___lmul
 43200 ;; This function is called by:
 43201 ;;		_NormalProc
 43202 ;;		_SettingProc
 43203 ;; This function uses a non-reentrant model
 43204 ;;
 43205                           
 43206                           	psect	text158
 43207  00A400                     __ptext158:
 43208                           	callstack 0
 43209  00A400                     _TransCoordination:
 43210                           	callstack 22
 43211                           
 43212                           ;TouchXT2046.c: 141: int32_t xx, yy;;TouchXT2046.c: 142: char str[100];;TouchXT2046.c: 1
      +                          49: if ((T_x2 == T_x1) || (T_y2 == T_y1)) {
 43213                           
 43214                           ;incstack = 0
 43215  00A400  504D               	movf	_T_x1^0,w,c
 43216  00A402  0102               	movlb	2	; () banked
 43217  00A404  19E8               	xorwf	_T_x2& (0+255),w,b
 43218  00A406  E104               	bnz	u27090
 43219  00A408  504E               	movf	(_T_x1+1)^0,w,c
 43220  00A40A  19E9               	xorwf	(_T_x2+1)& (0+255),w,b
 43221  00A40C  B4D8               	btfsc	status,2,c
 43222  00A40E  D007               	goto	u27100
 43223  00A410                     u27090:
 43224                           
 43225                           ; BSR set to: 2
 43226  00A410  51EA               	movf	_T_y1& (0+255),w,b
 43227  00A412  19E6               	xorwf	_T_y2& (0+255),w,b
 43228  00A414  E115               	bnz	l23939
 43229  00A416  51EB               	movf	(_T_y1+1)& (0+255),w,b
 43230  00A418  19E7               	xorwf	(_T_y2+1)& (0+255),w,b
 43231  00A41A  A4D8               	btfss	status,2,c
 43232  00A41C  D011               	goto	l23939
 43233  00A41E                     u27100:
 43234                           
 43235                           ; BSR set to: 2
 43236                           ;TouchXT2046.c: 150: *xg = x;
 43237  00A41E  C02C  FFD9         	movff	TransCoordination@xg,fsr2l
 43238  00A422  C02D  FFDA         	movff	TransCoordination@xg+1,fsr2h
 43239  00A426  C028  FFDE         	movff	TransCoordination@x,postinc2
 43240  00A42A  C029  FFDD         	movff	TransCoordination@x+1,postdec2
 43241                           
 43242                           ;TouchXT2046.c: 151: *yg = y;
 43243  00A42E  C02E  FFD9         	movff	TransCoordination@yg,fsr2l
 43244  00A432  C02F  FFDA         	movff	TransCoordination@yg+1,fsr2h
 43245  00A436  C02A  FFDE         	movff	TransCoordination@y,postinc2
 43246  00A43A  C02B  FFDD         	movff	TransCoordination@y+1,postdec2
 43247  00A43E  0012               	return	
 43248  00A440                     l23939:
 43249                           
 43250                           ; BSR set to: 2
 43251                           ;TouchXT2046.c: 153: };TouchXT2046.c: 156: xx = 280 * ((int32_t)x - T_x1) ;
 43252  00A440  504D               	movf	_T_x1^0,w,c
 43253  00A442  5C28               	subwf	TransCoordination@x^0,w,c
 43254  00A444  6E0E               	movwf	___lmul@multiplier^0,c
 43255  00A446  504E               	movf	(_T_x1+1)^0,w,c
 43256  00A448  5829               	subwfb	(TransCoordination@x+1)^0,w,c
 43257  00A44A  6E0F               	movwf	(___lmul@multiplier+1)^0,c
 43258  00A44C  6A10               	clrf	(___lmul@multiplier+2)^0,c
 43259  00A44E  A0D8               	btfss	status,0,c
 43260  00A450  0610               	decf	(___lmul@multiplier+2)^0,f,c
 43261  00A452  5010               	movf	(___lmul@multiplier+2)^0,w,c
 43262  00A454  6E11               	movwf	(___lmul@multiplier+3)^0,c
 43263  00A456  0E18               	movlw	24
 43264  00A458  6E12               	movwf	___lmul@multiplicand^0,c
 43265  00A45A  0E01               	movlw	1
 43266  00A45C  6E13               	movwf	(___lmul@multiplicand+1)^0,c
 43267  00A45E  0E00               	movlw	0
 43268  00A460  6E14               	movwf	(___lmul@multiplicand+2)^0,c
 43269  00A462  0E00               	movlw	0
 43270  00A464  6E15               	movwf	(___lmul@multiplicand+3)^0,c
 43271  00A466  EC16  F072         	call	___lmul	;wreg free
 43272  00A46A  C00E  F032         	movff	?___lmul,TransCoordination@xx
 43273  00A46E  C00F  F033         	movff	?___lmul+1,TransCoordination@xx+1
 43274  00A472  C010  F034         	movff	?___lmul+2,TransCoordination@xx+2
 43275  00A476  C011  F035         	movff	?___lmul+3,TransCoordination@xx+3
 43276                           
 43277                           ;TouchXT2046.c: 157: xx = xx/(T_x2 - T_x1) + 20;
 43278  00A47A  C032  F01A         	movff	TransCoordination@xx,___aldiv@dividend
 43279  00A47E  C033  F01B         	movff	TransCoordination@xx+1,___aldiv@dividend+1
 43280  00A482  C034  F01C         	movff	TransCoordination@xx+2,___aldiv@dividend+2
 43281  00A486  C035  F01D         	movff	TransCoordination@xx+3,___aldiv@dividend+3
 43282  00A48A  504D               	movf	_T_x1^0,w,c
 43283  00A48C  0102               	movlb	2	; () banked
 43284  00A48E  5DE8               	subwf	_T_x2& (0+255),w,b
 43285  00A490  6E30               	movwf	??_TransCoordination^0,c
 43286  00A492  504E               	movf	(_T_x1+1)^0,w,c
 43287  00A494  59E9               	subwfb	(_T_x2+1)& (0+255),w,b
 43288  00A496  6E31               	movwf	(??_TransCoordination+1)^0,c
 43289  00A498  C030  F01E         	movff	??_TransCoordination,___aldiv@divisor
 43290  00A49C  C031  F01F         	movff	??_TransCoordination+1,___aldiv@divisor+1
 43291  00A4A0  6A20               	clrf	(___aldiv@divisor+2)^0,c
 43292  00A4A2  6A21               	clrf	(___aldiv@divisor+3)^0,c
 43293  00A4A4  EC66  F063         	call	___aldiv	;wreg free
 43294  00A4A8  0E14               	movlw	20
 43295  00A4AA  241A               	addwf	?___aldiv^0,w,c
 43296  00A4AC  6E32               	movwf	TransCoordination@xx^0,c
 43297  00A4AE  0E00               	movlw	0
 43298  00A4B0  201B               	addwfc	(?___aldiv+1)^0,w,c
 43299  00A4B2  6E33               	movwf	(TransCoordination@xx+1)^0,c
 43300  00A4B4  0E00               	movlw	0
 43301  00A4B6  201C               	addwfc	(?___aldiv+2)^0,w,c
 43302  00A4B8  6E34               	movwf	(TransCoordination@xx+2)^0,c
 43303  00A4BA  0E00               	movlw	0
 43304  00A4BC  201D               	addwfc	(?___aldiv+3)^0,w,c
 43305  00A4BE  6E35               	movwf	(TransCoordination@xx+3)^0,c
 43306                           
 43307                           ;TouchXT2046.c: 158: if (xx<0) *xg = 0;
 43308  00A4C0  AE35               	btfss	(TransCoordination@xx+3)^0,7,c
 43309  00A4C2  D008               	goto	l23945
 43310  00A4C4  C02C  FFD9         	movff	TransCoordination@xg,fsr2l
 43311  00A4C8  C02D  FFDA         	movff	TransCoordination@xg+1,fsr2h
 43312  00A4CC  0E00               	movlw	0
 43313  00A4CE  6EDE               	movwf	postinc2,c
 43314  00A4D0  0E00               	movlw	0
 43315  00A4D2  D012               	goto	L38
 43316  00A4D4                     l23945:
 43317                           
 43318                           ;TouchXT2046.c: 159: else if (xx>=320) *xg = 319;
 43319  00A4D4  BE35               	btfsc	(TransCoordination@xx+3)^0,7,c
 43320  00A4D6  D012               	goto	l23949
 43321  00A4D8  5035               	movf	(TransCoordination@xx+3)^0,w,c
 43322  00A4DA  1034               	iorwf	(TransCoordination@xx+2)^0,w,c
 43323  00A4DC  E106               	bnz	u27120
 43324  00A4DE  0E40               	movlw	64
 43325  00A4E0  5C32               	subwf	TransCoordination@xx^0,w,c
 43326  00A4E2  0E01               	movlw	1
 43327  00A4E4  5833               	subwfb	(TransCoordination@xx+1)^0,w,c
 43328  00A4E6  A0D8               	btfss	status,0,c
 43329  00A4E8  D009               	goto	l23949
 43330  00A4EA                     u27120:
 43331  00A4EA  C02C  FFD9         	movff	TransCoordination@xg,fsr2l
 43332  00A4EE  C02D  FFDA         	movff	TransCoordination@xg+1,fsr2h
 43333  00A4F2  0E3F               	movlw	63
 43334  00A4F4  6EDE               	movwf	postinc2,c
 43335  00A4F6  0E01               	movlw	1
 43336  00A4F8                     L38:
 43337  00A4F8  6EDD               	movwf	postdec2,c
 43338  00A4FA  D008               	goto	l23951
 43339  00A4FC                     l23949:
 43340                           
 43341                           ;TouchXT2046.c: 160: else *xg = (uint16_t) xx;
 43342  00A4FC  C02C  FFD9         	movff	TransCoordination@xg,fsr2l
 43343  00A500  C02D  FFDA         	movff	TransCoordination@xg+1,fsr2h
 43344  00A504  C032  FFDE         	movff	TransCoordination@xx,postinc2
 43345  00A508  C033  FFDD         	movff	TransCoordination@xx+1,postdec2
 43346  00A50C                     l23951:
 43347                           
 43348                           ;TouchXT2046.c: 162: yy = (int32_t)y - T_y1;
 43349  00A50C  0102               	movlb	2	; () banked
 43350  00A50E  51EA               	movf	_T_y1& (0+255),w,b
 43351  00A510  5C2A               	subwf	TransCoordination@y^0,w,c
 43352  00A512  6E36               	movwf	TransCoordination@yy^0,c
 43353  00A514  51EB               	movf	(_T_y1+1)& (0+255),w,b
 43354  00A516  582B               	subwfb	(TransCoordination@y+1)^0,w,c
 43355  00A518  6E37               	movwf	(TransCoordination@yy+1)^0,c
 43356  00A51A  6A38               	clrf	(TransCoordination@yy+2)^0,c
 43357  00A51C  A0D8               	btfss	status,0,c
 43358  00A51E  0638               	decf	(TransCoordination@yy+2)^0,f,c
 43359  00A520  5038               	movf	(TransCoordination@yy+2)^0,w,c
 43360  00A522  6E39               	movwf	(TransCoordination@yy+3)^0,c
 43361                           
 43362                           ; BSR set to: 2
 43363                           ;TouchXT2046.c: 163: yy = yy*200/(T_y2 - T_y1) + 20;
 43364  00A524  C036  F00E         	movff	TransCoordination@yy,___lmul@multiplier
 43365  00A528  C037  F00F         	movff	TransCoordination@yy+1,___lmul@multiplier+1
 43366  00A52C  C038  F010         	movff	TransCoordination@yy+2,___lmul@multiplier+2
 43367  00A530  C039  F011         	movff	TransCoordination@yy+3,___lmul@multiplier+3
 43368  00A534  0EC8               	movlw	200
 43369  00A536  6E12               	movwf	___lmul@multiplicand^0,c
 43370  00A538  0E00               	movlw	0
 43371  00A53A  6E13               	movwf	(___lmul@multiplicand+1)^0,c
 43372  00A53C  0E00               	movlw	0
 43373  00A53E  6E14               	movwf	(___lmul@multiplicand+2)^0,c
 43374  00A540  0E00               	movlw	0
 43375  00A542  6E15               	movwf	(___lmul@multiplicand+3)^0,c
 43376  00A544  EC16  F072         	call	___lmul	;wreg free
 43377  00A548  C00E  F01A         	movff	?___lmul,___aldiv@dividend
 43378  00A54C  C00F  F01B         	movff	?___lmul+1,___aldiv@dividend+1
 43379  00A550  C010  F01C         	movff	?___lmul+2,___aldiv@dividend+2
 43380  00A554  C011  F01D         	movff	?___lmul+3,___aldiv@dividend+3
 43381  00A558  0102               	movlb	2	; () banked
 43382  00A55A  51EA               	movf	_T_y1& (0+255),w,b
 43383  00A55C  5DE6               	subwf	_T_y2& (0+255),w,b
 43384  00A55E  6E30               	movwf	??_TransCoordination^0,c
 43385  00A560  51EB               	movf	(_T_y1+1)& (0+255),w,b
 43386  00A562  59E7               	subwfb	(_T_y2+1)& (0+255),w,b
 43387  00A564  6E31               	movwf	(??_TransCoordination+1)^0,c
 43388  00A566  C030  F01E         	movff	??_TransCoordination,___aldiv@divisor
 43389  00A56A  C031  F01F         	movff	??_TransCoordination+1,___aldiv@divisor+1
 43390  00A56E  6A20               	clrf	(___aldiv@divisor+2)^0,c
 43391  00A570  6A21               	clrf	(___aldiv@divisor+3)^0,c
 43392  00A572  EC66  F063         	call	___aldiv	;wreg free
 43393  00A576  0E14               	movlw	20
 43394  00A578  241A               	addwf	?___aldiv^0,w,c
 43395  00A57A  6E36               	movwf	TransCoordination@yy^0,c
 43396  00A57C  0E00               	movlw	0
 43397  00A57E  201B               	addwfc	(?___aldiv+1)^0,w,c
 43398  00A580  6E37               	movwf	(TransCoordination@yy+1)^0,c
 43399  00A582  0E00               	movlw	0
 43400  00A584  201C               	addwfc	(?___aldiv+2)^0,w,c
 43401  00A586  6E38               	movwf	(TransCoordination@yy+2)^0,c
 43402  00A588  0E00               	movlw	0
 43403  00A58A  201D               	addwfc	(?___aldiv+3)^0,w,c
 43404  00A58C  6E39               	movwf	(TransCoordination@yy+3)^0,c
 43405                           
 43406                           ;TouchXT2046.c: 164: if (yy < 0) *yg = 0;
 43407  00A58E  AE39               	btfss	(TransCoordination@yy+3)^0,7,c
 43408  00A590  D009               	goto	l23959
 43409  00A592  C02E  FFD9         	movff	TransCoordination@yg,fsr2l
 43410  00A596  C02F  FFDA         	movff	TransCoordination@yg+1,fsr2h
 43411  00A59A  0E00               	movlw	0
 43412  00A59C  6EDE               	movwf	postinc2,c
 43413  00A59E  0E00               	movlw	0
 43414  00A5A0  6EDD               	movwf	postdec2,c
 43415  00A5A2  0012               	return	
 43416  00A5A4                     l23959:
 43417                           
 43418                           ;TouchXT2046.c: 165: else if (yy>=240) *yg = 239;
 43419  00A5A4  BE39               	btfsc	(TransCoordination@yy+3)^0,7,c
 43420  00A5A6  D011               	goto	l23963
 43421  00A5A8  5039               	movf	(TransCoordination@yy+3)^0,w,c
 43422  00A5AA  1038               	iorwf	(TransCoordination@yy+2)^0,w,c
 43423  00A5AC  1037               	iorwf	(TransCoordination@yy+1)^0,w,c
 43424  00A5AE  E104               	bnz	u27140
 43425  00A5B0  0EF0               	movlw	240
 43426  00A5B2  5C36               	subwf	TransCoordination@yy^0,w,c
 43427  00A5B4  A0D8               	btfss	status,0,c
 43428  00A5B6  D009               	goto	l23963
 43429  00A5B8                     u27140:
 43430  00A5B8  C02E  FFD9         	movff	TransCoordination@yg,fsr2l
 43431  00A5BC  C02F  FFDA         	movff	TransCoordination@yg+1,fsr2h
 43432  00A5C0  0EEF               	movlw	239
 43433  00A5C2  6EDE               	movwf	postinc2,c
 43434  00A5C4  0E00               	movlw	0
 43435  00A5C6  6EDD               	movwf	postdec2,c
 43436  00A5C8  0012               	return	
 43437  00A5CA                     l23963:
 43438                           
 43439                           ;TouchXT2046.c: 166: else *yg = (uint16_t) yy;
 43440  00A5CA  C02E  FFD9         	movff	TransCoordination@yg,fsr2l
 43441  00A5CE  C02F  FFDA         	movff	TransCoordination@yg+1,fsr2h
 43442  00A5D2  C036  FFDE         	movff	TransCoordination@yy,postinc2
 43443  00A5D6  C037  FFDD         	movff	TransCoordination@yy+1,postdec2
 43444  00A5DA  0012               	return		;funcret
 43445  00A5DC                     __end_of_TransCoordination:
 43446                           	callstack 0
 43447                           
 43448 ;; *************** function _RTC_setAlarmTime *****************
 43449 ;; Defined at:
 43450 ;;		line 85 in file "RTC8025.c"
 43451 ;; Parameters:    Size  Location     Type
 43452 ;;  alarmtime       2   33[COMRAM] PTR unsigned char 
 43453 ;;		 -> SmoothAlarmTime(3), AlarmTime(3), 
 43454 ;; Auto vars:     Size  Location     Type
 43455 ;;		None
 43456 ;; Return value:  Size  Location     Type
 43457 ;;                  1    wreg      void 
 43458 ;; Registers used:
 43459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 43460 ;; Tracked objects:
 43461 ;;		On entry : 3E/3
 43462 ;;		On exit  : 0/0
 43463 ;;		Unchanged: 0/0
 43464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43465 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43469 ;;Total ram usage:        2 bytes
 43470 ;; Hardware stack levels used:    1
 43471 ;; Hardware stack levels required when called:   15
 43472 ;; This function calls:
 43473 ;;		_I2C2_Write1ByteRegister
 43474 ;; This function is called by:
 43475 ;;		_NormalProc
 43476 ;;		_SlideSWProc
 43477 ;; This function uses a non-reentrant model
 43478 ;;
 43479                           
 43480                           	psect	text159
 43481  00BF24                     __ptext159:
 43482                           	callstack 0
 43483  00BF24                     _RTC_setAlarmTime:
 43484                           	callstack 14
 43485                           
 43486                           ;RTC8025.c: 89: I2C2_Write1ByteRegister(0x32, 0xe0, RTC_regE & ~0x80);
 43487                           
 43488                           ;incstack = 0
 43489  00BF24  0EE0               	movlw	224
 43490  00BF26  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 43491  00BF28  0100               	movlb	0	; () banked
 43492  00BF2A  51FF               	movf	_RTC_regE& (0+255),w,b
 43493  00BF2C  0B7F               	andlw	127
 43494  00BF2E  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 43495  00BF30  0E32               	movlw	50
 43496  00BF32  EC41  F072         	call	_I2C2_Write1ByteRegister
 43497                           
 43498                           ; BSR set to: 4
 43499                           ;RTC8025.c: 90: _delay((unsigned long)((80)*(64000000/4000000.0)));
 43500  00BF36  0EB6               	movlw	182
 43501  00BF38                     u30197:
 43502  00BF38  D000               	nop2	
 43503  00BF3A  D000               	nop2	
 43504  00BF3C  2EE8               	decfsz	wreg,f,c
 43505  00BF3E  D7FC               	bra	u30197
 43506  00BF40  D000               	nop2	
 43507  00BF42  D000               	nop2	
 43508  00BF44  D000               	nop2	
 43509                           
 43510                           ;RTC8025.c: 92: I2C2_Write1ByteRegister(0x32, 0x80, alarmtime[0]);
 43511  00BF46  0E80               	movlw	128
 43512  00BF48  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 43513  00BF4A  C022  FFD9         	movff	RTC_setAlarmTime@alarmtime,fsr2l
 43514  00BF4E  C023  FFDA         	movff	RTC_setAlarmTime@alarmtime+1,fsr2h
 43515  00BF52  50DF               	movf	indf2,w,c
 43516  00BF54  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 43517  00BF56  0E32               	movlw	50
 43518  00BF58  EC41  F072         	call	_I2C2_Write1ByteRegister
 43519                           
 43520                           ;RTC8025.c: 93: _delay((unsigned long)((80)*(64000000/4000000.0)));
 43521  00BF5C  0EB6               	movlw	182
 43522  00BF5E                     u30207:
 43523  00BF5E  D000               	nop2	
 43524  00BF60  D000               	nop2	
 43525  00BF62  2EE8               	decfsz	wreg,f,c
 43526  00BF64  D7FC               	bra	u30207
 43527  00BF66  D000               	nop2	
 43528  00BF68  D000               	nop2	
 43529  00BF6A  D000               	nop2	
 43530                           
 43531                           ;RTC8025.c: 94: I2C2_Write1ByteRegister(0x32, 0x90, alarmtime[1]);
 43532  00BF6C  0E90               	movlw	144
 43533  00BF6E  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 43534  00BF70  EE20 F001          	lfsr	2,1
 43535  00BF74  5022               	movf	RTC_setAlarmTime@alarmtime^0,w,c
 43536  00BF76  26D9               	addwf	fsr2l,f,c
 43537  00BF78  5023               	movf	(RTC_setAlarmTime@alarmtime+1)^0,w,c
 43538  00BF7A  22DA               	addwfc	fsr2h,f,c
 43539  00BF7C  50DF               	movf	indf2,w,c
 43540  00BF7E  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 43541  00BF80  0E32               	movlw	50
 43542  00BF82  EC41  F072         	call	_I2C2_Write1ByteRegister
 43543                           
 43544                           ; BSR set to: 4
 43545                           ;RTC8025.c: 95: _delay((unsigned long)((80)*(64000000/4000000.0)));
 43546  00BF86  0EB6               	movlw	182
 43547  00BF88                     u30217:
 43548  00BF88  D000               	nop2	
 43549  00BF8A  D000               	nop2	
 43550  00BF8C  2EE8               	decfsz	wreg,f,c
 43551  00BF8E  D7FC               	bra	u30217
 43552  00BF90  D000               	nop2	
 43553  00BF92  D000               	nop2	
 43554  00BF94  D000               	nop2	
 43555                           
 43556                           ;RTC8025.c: 96: I2C2_Write1ByteRegister(0x32, 0xa0, alarmtime[2]);
 43557  00BF96  0EA0               	movlw	160
 43558  00BF98  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 43559  00BF9A  EE20 F002          	lfsr	2,2
 43560  00BF9E  5022               	movf	RTC_setAlarmTime@alarmtime^0,w,c
 43561  00BFA0  26D9               	addwf	fsr2l,f,c
 43562  00BFA2  5023               	movf	(RTC_setAlarmTime@alarmtime+1)^0,w,c
 43563  00BFA4  22DA               	addwfc	fsr2h,f,c
 43564  00BFA6  50DF               	movf	indf2,w,c
 43565  00BFA8  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 43566  00BFAA  0E32               	movlw	50
 43567  00BFAC  EC41  F072         	call	_I2C2_Write1ByteRegister
 43568                           
 43569                           ; BSR set to: 4
 43570                           ;RTC8025.c: 97: _delay((unsigned long)((80)*(64000000/4000000.0)));
 43571  00BFB0  0EB6               	movlw	182
 43572  00BFB2                     u30227:
 43573  00BFB2  D000               	nop2	
 43574  00BFB4  D000               	nop2	
 43575  00BFB6  2EE8               	decfsz	wreg,f,c
 43576  00BFB8  D7FC               	bra	u30227
 43577  00BFBA  D000               	nop2	
 43578  00BFBC  D000               	nop2	
 43579  00BFBE  D000               	nop2	
 43580                           
 43581                           ;RTC8025.c: 101: RTC_regE = RTC_regE | 0x80;
 43582  00BFC0  0100               	movlb	0	; () banked
 43583  00BFC2  51FF               	movf	_RTC_regE& (0+255),w,b
 43584  00BFC4  0980               	iorlw	128
 43585  00BFC6  6FFF               	movwf	_RTC_regE& (0+255),b
 43586                           
 43587                           ; BSR set to: 0
 43588                           ;RTC8025.c: 102: I2C2_Write1ByteRegister(0x32, 0xe0, RTC_regE);
 43589  00BFC8  0EE0               	movlw	224
 43590  00BFCA  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 43591  00BFCC  C0FF  F020         	movff	_RTC_regE,I2C2_Write1ByteRegister@data
 43592  00BFD0  0E32               	movlw	50
 43593  00BFD2  EC41  F072         	call	_I2C2_Write1ByteRegister
 43594                           
 43595                           ; BSR set to: 4
 43596                           ;RTC8025.c: 103: _delay((unsigned long)((80)*(64000000/4000000.0)));
 43597  00BFD6  0EB6               	movlw	182
 43598  00BFD8                     u30237:
 43599  00BFD8  D000               	nop2	
 43600  00BFDA  D000               	nop2	
 43601  00BFDC  2EE8               	decfsz	wreg,f,c
 43602  00BFDE  D7FC               	bra	u30237
 43603  00BFE0  D000               	nop2	
 43604  00BFE2  D000               	nop2	
 43605  00BFE4  D000               	nop2	
 43606                           
 43607                           ;RTC8025.c: 104: RTC_regF = RTC_regF & ~0x02;
 43608  00BFE6  504F               	movf	_RTC_regF^0,w,c
 43609  00BFE8  0BFD               	andlw	253
 43610  00BFEA  6E4F               	movwf	_RTC_regF^0,c
 43611                           
 43612                           ;RTC8025.c: 105: I2C2_Write1ByteRegister(0x32, 0xf0, RTC_regF);
 43613  00BFEC  0EF0               	movlw	240
 43614  00BFEE  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 43615  00BFF0  C04F  F020         	movff	_RTC_regF,I2C2_Write1ByteRegister@data
 43616  00BFF4  0E32               	movlw	50
 43617  00BFF6  EC41  F072         	call	_I2C2_Write1ByteRegister
 43618                           
 43619                           ; BSR set to: 4
 43620                           ;RTC8025.c: 106: _delay((unsigned long)((80)*(64000000/4000000.0)));
 43621  00BFFA  0EB6               	movlw	182
 43622  00BFFC                     u30247:
 43623  00BFFC  D000               	nop2	
 43624  00BFFE  D000               	nop2	
 43625  00C000  2EE8               	decfsz	wreg,f,c
 43626  00C002  D7FC               	bra	u30247
 43627  00C004  D000               	nop2	
 43628  00C006  D000               	nop2	
 43629  00C008  D000               	nop2	
 43630  00C00A  888A               	bsf	138,4,c	;volatile
 43631  00C00C  0012               	return		;funcret
 43632  00C00E                     __end_of_RTC_setAlarmTime:
 43633                           	callstack 0
 43634                           
 43635 ;; *************** function _RTC_resetAlarm *****************
 43636 ;; Defined at:
 43637 ;;		line 66 in file "RTC8025.c"
 43638 ;; Parameters:    Size  Location     Type
 43639 ;;		None
 43640 ;; Auto vars:     Size  Location     Type
 43641 ;;		None
 43642 ;; Return value:  Size  Location     Type
 43643 ;;                  1    wreg      void 
 43644 ;; Registers used:
 43645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 43646 ;; Tracked objects:
 43647 ;;		On entry : 3F/3
 43648 ;;		On exit  : 0/0
 43649 ;;		Unchanged: 0/0
 43650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43655 ;;Total ram usage:        0 bytes
 43656 ;; Hardware stack levels used:    1
 43657 ;; Hardware stack levels required when called:   15
 43658 ;; This function calls:
 43659 ;;		_I2C2_Write1ByteRegister
 43660 ;; This function is called by:
 43661 ;;		_NormalProc
 43662 ;;		_SlideSWProc
 43663 ;; This function uses a non-reentrant model
 43664 ;;
 43665                           
 43666                           	psect	text160
 43667  00E858                     __ptext160:
 43668                           	callstack 0
 43669  00E858                     _RTC_resetAlarm:
 43670                           	callstack 14
 43671                           
 43672                           ; BSR set to: 3
 43673                           
 43674                           ;incstack = 0
 43675                           ;RTC8025.c: 68: do { LATBbits.LATB4 = 0; } while(0);
 43676  00E858  988A               	bcf	138,4,c	;volatile
 43677                           
 43678                           ; BSR set to: 3
 43679                           ;RTC8025.c: 70: I2C2_Write1ByteRegister(0x32, 0xe0, RTC_regE & ~0x80);
 43680  00E85A  0EE0               	movlw	224
 43681  00E85C  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 43682  00E85E  0100               	movlb	0	; () banked
 43683  00E860  51FF               	movf	_RTC_regE& (0+255),w,b
 43684  00E862  0B7F               	andlw	127
 43685  00E864  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 43686  00E866  0E32               	movlw	50
 43687  00E868  EC41  F072         	call	_I2C2_Write1ByteRegister
 43688                           
 43689                           ; BSR set to: 4
 43690                           ;RTC8025.c: 71: _delay((unsigned long)((80)*(64000000/4000000.0)));
 43691  00E86C  0EB6               	movlw	182
 43692  00E86E                     u30257:
 43693  00E86E  D000               	nop2	
 43694  00E870  D000               	nop2	
 43695  00E872  2EE8               	decfsz	wreg,f,c
 43696  00E874  D7FC               	bra	u30257
 43697  00E876  D000               	nop2	
 43698  00E878  D000               	nop2	
 43699  00E87A  D000               	nop2	
 43700                           
 43701                           ;RTC8025.c: 73: RTC_regF = RTC_regF & ~0x02;
 43702  00E87C  504F               	movf	_RTC_regF^0,w,c
 43703  00E87E  0BFD               	andlw	253
 43704  00E880  6E4F               	movwf	_RTC_regF^0,c
 43705                           
 43706                           ;RTC8025.c: 74: I2C2_Write1ByteRegister(0x32, 0xf0, RTC_regF);
 43707  00E882  0EF0               	movlw	240
 43708  00E884  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 43709  00E886  C04F  F020         	movff	_RTC_regF,I2C2_Write1ByteRegister@data
 43710  00E88A  0E32               	movlw	50
 43711  00E88C  EC41  F072         	call	_I2C2_Write1ByteRegister
 43712                           
 43713                           ; BSR set to: 4
 43714                           ;RTC8025.c: 75: _delay((unsigned long)((80)*(64000000/4000000.0)));
 43715  00E890  0EB6               	movlw	182
 43716  00E892                     u30267:
 43717  00E892  D000               	nop2	
 43718  00E894  D000               	nop2	
 43719  00E896  2EE8               	decfsz	wreg,f,c
 43720  00E898  D7FC               	bra	u30267
 43721  00E89A  D000               	nop2	
 43722  00E89C  D000               	nop2	
 43723  00E89E  D000               	nop2	
 43724  00E8A0  0012               	return		;funcret
 43725  00E8A2                     __end_of_RTC_resetAlarm:
 43726                           	callstack 0
 43727                           
 43728 ;; *************** function _RTC_read *****************
 43729 ;; Defined at:
 43730 ;;		line 230 in file "RTC8025.c"
 43731 ;; Parameters:    Size  Location     Type
 43732 ;;  datetime        2   40[COMRAM] PTR unsigned char 
 43733 ;;		 -> DateTime(7), 
 43734 ;; Auto vars:     Size  Location     Type
 43735 ;;		None
 43736 ;; Return value:  Size  Location     Type
 43737 ;;                  1    wreg      void 
 43738 ;; Registers used:
 43739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 43740 ;; Tracked objects:
 43741 ;;		On entry : 3F/3
 43742 ;;		On exit  : 3F/4
 43743 ;;		Unchanged: 0/0
 43744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43745 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43748 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43749 ;;Total ram usage:        2 bytes
 43750 ;; Hardware stack levels used:    1
 43751 ;; Hardware stack levels required when called:   15
 43752 ;; This function calls:
 43753 ;;		_I2C2_ReadDataBlock
 43754 ;; This function is called by:
 43755 ;;		_NormalProc
 43756 ;; This function uses a non-reentrant model
 43757 ;;
 43758                           
 43759                           	psect	text161
 43760  00EFB2                     __ptext161:
 43761                           	callstack 0
 43762  00EFB2                     _RTC_read:
 43763                           	callstack 14
 43764                           
 43765                           ; BSR set to: 3
 43766                           ;RTC8025.c: 232: _delay((unsigned long)((80)*(64000000/4000000.0)));
 43767                           
 43768                           ;incstack = 0
 43769  00EFB2  0EB6               	movlw	182
 43770  00EFB4                     u30277:
 43771  00EFB4  D000               	nop2	
 43772  00EFB6  D000               	nop2	
 43773  00EFB8  2EE8               	decfsz	wreg,f,c
 43774  00EFBA  D7FC               	bra	u30277
 43775  00EFBC  D000               	nop2	
 43776  00EFBE  D000               	nop2	
 43777  00EFC0  D000               	nop2	
 43778                           
 43779                           ;RTC8025.c: 234: I2C2_ReadDataBlock(0x32, 0x00, datetime, 7);
 43780  00EFC2  0E00               	movlw	0
 43781  00EFC4  6E1F               	movwf	I2C2_ReadDataBlock@reg^0,c
 43782  00EFC6  C029  F020         	movff	RTC_read@datetime,I2C2_ReadDataBlock@data
 43783  00EFCA  C02A  F021         	movff	RTC_read@datetime+1,I2C2_ReadDataBlock@data+1
 43784  00EFCE  0E00               	movlw	0
 43785  00EFD0  6E23               	movwf	(I2C2_ReadDataBlock@len+1)^0,c
 43786  00EFD2  0E07               	movlw	7
 43787  00EFD4  6E22               	movwf	I2C2_ReadDataBlock@len^0,c
 43788  00EFD6  0E32               	movlw	50
 43789  00EFD8  EC44  F070         	call	_I2C2_ReadDataBlock
 43790                           
 43791                           ; BSR set to: 4
 43792  00EFDC  0012               	return		;funcret
 43793  00EFDE                     __end_of_RTC_read:
 43794                           	callstack 0
 43795                           
 43796 ;; *************** function _I2C2_ReadDataBlock *****************
 43797 ;; Defined at:
 43798 ;;		line 128 in file "mcc_generated_files/examples/i2c2_master_example.c"
 43799 ;; Parameters:    Size  Location     Type
 43800 ;;  address         1    wreg     unsigned char 
 43801 ;;  reg             1   30[COMRAM] unsigned char 
 43802 ;;  data            2   31[COMRAM] PTR unsigned char 
 43803 ;;		 -> DateTime(7), 
 43804 ;;  len             2   33[COMRAM] unsigned int 
 43805 ;; Auto vars:     Size  Location     Type
 43806 ;;  address         1   35[COMRAM] unsigned char 
 43807 ;;  bufferBlock     4   36[COMRAM] struct .
 43808 ;; Return value:  Size  Location     Type
 43809 ;;                  1    wreg      void 
 43810 ;; Registers used:
 43811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 43812 ;; Tracked objects:
 43813 ;;		On entry : 0/3
 43814 ;;		On exit  : 3F/4
 43815 ;;		Unchanged: 0/0
 43816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43817 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43818 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43820 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43821 ;;Total ram usage:       10 bytes
 43822 ;; Hardware stack levels used:    1
 43823 ;; Hardware stack levels required when called:   14
 43824 ;; This function calls:
 43825 ;;		_I2C2_Close
 43826 ;;		_I2C2_MasterWrite
 43827 ;;		_I2C2_Open
 43828 ;;		_I2C2_SetAddressNackCallback
 43829 ;;		_I2C2_SetBuffer
 43830 ;;		_I2C2_SetDataCompleteCallback
 43831 ;; This function is called by:
 43832 ;;		_RTC_read
 43833 ;; This function uses a non-reentrant model
 43834 ;;
 43835                           
 43836                           	psect	text162
 43837  00E088                     __ptext162:
 43838                           	callstack 0
 43839  00E088                     _I2C2_ReadDataBlock:
 43840                           	callstack 14
 43841                           
 43842                           ; BSR set to: 4
 43843                           ;incstack = 0
 43844                           ;I2C2_ReadDataBlock@address stored from wreg
 43845  00E088  6E24               	movwf	I2C2_ReadDataBlock@address^0,c
 43846                           
 43847                           ;i2c2_master_example.c: 130: i2c2_buffer_t bufferBlock;;i2c2_master_example.c: 131: buff
      +                          erBlock.data = data;
 43848  00E08A  C020  F027         	movff	I2C2_ReadDataBlock@data,I2C2_ReadDataBlock@bufferBlock+2
 43849  00E08E  C021  F028         	movff	I2C2_ReadDataBlock@data+1,I2C2_ReadDataBlock@bufferBlock+3
 43850                           
 43851                           ;i2c2_master_example.c: 132: bufferBlock.len = len;
 43852  00E092  C022  F025         	movff	I2C2_ReadDataBlock@len,I2C2_ReadDataBlock@bufferBlock
 43853  00E096  C023  F026         	movff	I2C2_ReadDataBlock@len+1,I2C2_ReadDataBlock@bufferBlock+1
 43854  00E09A                     l22449:
 43855  00E09A  5024               	movf	I2C2_ReadDataBlock@address^0,w,c
 43856  00E09C  EC55  F06D         	call	_I2C2_Open
 43857  00E0A0  0900               	iorlw	0
 43858  00E0A2  B4D8               	btfsc	status,2,c
 43859  00E0A4  D7FA               	goto	l22449
 43860                           
 43861                           ; BSR set to: 4
 43862                           ;i2c2_master_example.c: 135: I2C2_SetDataCompleteCallback(rdBlkRegCompleteHandler,&buffe
      +                          rBlock);
 43863  00E0A6  0E48               	movlw	low _rdBlkRegCompleteHandler
 43864  00E0A8  6E13               	movwf	I2C2_SetDataCompleteCallback@cb^0,c
 43865  00E0AA  0EEB               	movlw	high _rdBlkRegCompleteHandler
 43866  00E0AC  6E14               	movwf	(I2C2_SetDataCompleteCallback@cb+1)^0,c
 43867  00E0AE  0E25               	movlw	low I2C2_ReadDataBlock@bufferBlock
 43868  00E0B0  6E15               	movwf	I2C2_SetDataCompleteCallback@ptr^0,c
 43869  00E0B2  6A16               	clrf	(I2C2_SetDataCompleteCallback@ptr+1)^0,c
 43870  00E0B4  EC62  F07A         	call	_I2C2_SetDataCompleteCallback	;wreg free
 43871                           
 43872                           ;i2c2_master_example.c: 136: I2C2_SetBuffer(&reg,1);
 43873  00E0B8  0E1F               	movlw	low I2C2_ReadDataBlock@reg
 43874  00E0BA  6E0E               	movwf	I2C2_SetBuffer@buffer^0,c
 43875  00E0BC  6A0F               	clrf	(I2C2_SetBuffer@buffer+1)^0,c
 43876  00E0BE  0E00               	movlw	0
 43877  00E0C0  6E11               	movwf	(I2C2_SetBuffer@bufferSize+1)^0,c
 43878  00E0C2  0E01               	movlw	1
 43879  00E0C4  6E10               	movwf	I2C2_SetBuffer@bufferSize^0,c
 43880  00E0C6  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 43881                           
 43882                           ; BSR set to: 4
 43883                           ;i2c2_master_example.c: 137: I2C2_SetAddressNackCallback((0),(0));
 43884  00E0CA  0E00               	movlw	0
 43885  00E0CC  6E13               	movwf	I2C2_SetAddressNackCallback@cb^0,c
 43886  00E0CE  0E00               	movlw	0
 43887  00E0D0  6E14               	movwf	(I2C2_SetAddressNackCallback@cb+1)^0,c
 43888  00E0D2  0E00               	movlw	0
 43889  00E0D4  6E15               	movwf	I2C2_SetAddressNackCallback@ptr^0,c
 43890  00E0D6  0E00               	movlw	0
 43891  00E0D8  6E16               	movwf	(I2C2_SetAddressNackCallback@ptr+1)^0,c
 43892  00E0DA  EC4A  F07A         	call	_I2C2_SetAddressNackCallback	;wreg free
 43893                           
 43894                           ;i2c2_master_example.c: 138: I2C2_MasterWrite();
 43895  00E0DE  ECBC  F07B         	call	_I2C2_MasterWrite	;wreg free
 43896  00E0E2                     l22459:
 43897                           
 43898                           ; BSR set to: 4
 43899  00E0E2  EC58  F079         	call	_I2C2_Close	;wreg free
 43900  00E0E6  06E8               	decf	wreg,f,c
 43901  00E0E8  A4D8               	btfss	status,2,c
 43902  00E0EA  0012               	return	
 43903  00E0EC  D7FA               	goto	l22459
 43904  00E0EE                     __end_of_I2C2_ReadDataBlock:
 43905                           	callstack 0
 43906                           
 43907 ;; *************** function _IncDecTime *****************
 43908 ;; Defined at:
 43909 ;;		line 118 in file "RTC8025.c"
 43910 ;; Parameters:    Size  Location     Type
 43911 ;;  dmm             2   13[COMRAM] int 
 43912 ;;  hh              2   15[COMRAM] PTR char 
 43913 ;;		 -> SettingProc@hh(1), NormalProc@hh(1), 
 43914 ;;  mm              2   17[COMRAM] PTR char 
 43915 ;;		 -> SettingProc@mm(1), NormalProc@mm(1), 
 43916 ;; Auto vars:     Size  Location     Type
 43917 ;;  hour            2   21[COMRAM] int 
 43918 ;;  min             2   19[COMRAM] int 
 43919 ;; Return value:  Size  Location     Type
 43920 ;;                  1    wreg      void 
 43921 ;; Registers used:
 43922 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 43923 ;; Tracked objects:
 43924 ;;		On entry : 3C/0
 43925 ;;		On exit  : 3C/0
 43926 ;;		Unchanged: 3C/0
 43927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 43928 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43929 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43931 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 43932 ;;Total ram usage:       10 bytes
 43933 ;; Hardware stack levels used:    1
 43934 ;; Hardware stack levels required when called:    6
 43935 ;; This function calls:
 43936 ;;		Nothing
 43937 ;; This function is called by:
 43938 ;;		_NormalProc
 43939 ;;		_SettingProc
 43940 ;; This function uses a non-reentrant model
 43941 ;;
 43942                           
 43943                           	psect	text163
 43944  00CAA8                     __ptext163:
 43945                           	callstack 0
 43946  00CAA8                     _IncDecTime:
 43947                           	callstack 23
 43948                           
 43949                           ;RTC8025.c: 119: int16_t min, hour;;RTC8025.c: 121: min = *mm;
 43950                           
 43951                           ; BSR set to: 4
 43952                           ;incstack = 0
 43953  00CAA8  C012  FFD9         	movff	IncDecTime@mm,fsr2l
 43954  00CAAC  C013  FFDA         	movff	IncDecTime@mm+1,fsr2h
 43955  00CAB0  50DF               	movf	indf2,w,c
 43956  00CAB2  6E14               	movwf	IncDecTime@min^0,c
 43957  00CAB4  6A15               	clrf	(IncDecTime@min+1)^0,c
 43958  00CAB6  BE14               	btfsc	IncDecTime@min^0,7,c
 43959  00CAB8  0615               	decf	(IncDecTime@min+1)^0,f,c
 43960                           
 43961                           ;RTC8025.c: 122: hour = *hh;
 43962  00CABA  C010  FFD9         	movff	IncDecTime@hh,fsr2l
 43963  00CABE  C011  FFDA         	movff	IncDecTime@hh+1,fsr2h
 43964  00CAC2  50DF               	movf	indf2,w,c
 43965  00CAC4  6E16               	movwf	IncDecTime@hour^0,c
 43966  00CAC6  6A17               	clrf	(IncDecTime@hour+1)^0,c
 43967  00CAC8  BE16               	btfsc	IncDecTime@hour^0,7,c
 43968  00CACA  0617               	decf	(IncDecTime@hour+1)^0,f,c
 43969                           
 43970                           ;RTC8025.c: 123: min = min + dmm;
 43971  00CACC  500E               	movf	IncDecTime@dmm^0,w,c
 43972  00CACE  2414               	addwf	IncDecTime@min^0,w,c
 43973  00CAD0  6E14               	movwf	IncDecTime@min^0,c
 43974  00CAD2  500F               	movf	(IncDecTime@dmm+1)^0,w,c
 43975  00CAD4  2015               	addwfc	(IncDecTime@min+1)^0,w,c
 43976  00CAD6  6E15               	movwf	(IncDecTime@min+1)^0,c
 43977                           
 43978                           ;RTC8025.c: 125: if (dmm >= 0) {
 43979  00CAD8  AE0F               	btfss	(IncDecTime@dmm+1)^0,7,c
 43980  00CADA  D00D               	goto	l3437
 43981  00CADC  D021               	goto	l3441
 43982  00CADE                     l23983:
 43983                           
 43984                           ;RTC8025.c: 128: min = min - 60;
 43985  00CADE  0EC4               	movlw	196
 43986  00CAE0  2414               	addwf	IncDecTime@min^0,w,c
 43987  00CAE2  6E14               	movwf	IncDecTime@min^0,c
 43988  00CAE4  0EFF               	movlw	255
 43989  00CAE6  2015               	addwfc	(IncDecTime@min+1)^0,w,c
 43990  00CAE8  6E15               	movwf	(IncDecTime@min+1)^0,c
 43991                           
 43992                           ;RTC8025.c: 129: hour = hour + 1;
 43993  00CAEA  0E01               	movlw	1
 43994  00CAEC  2416               	addwf	IncDecTime@hour^0,w,c
 43995  00CAEE  6E16               	movwf	IncDecTime@hour^0,c
 43996  00CAF0  0E00               	movlw	0
 43997  00CAF2  2017               	addwfc	(IncDecTime@hour+1)^0,w,c
 43998  00CAF4  6E17               	movwf	(IncDecTime@hour+1)^0,c
 43999  00CAF6                     l3437:
 44000  00CAF6  BE15               	btfsc	(IncDecTime@min+1)^0,7,c
 44001  00CAF8  D015               	goto	u27170
 44002  00CAFA  5015               	movf	(IncDecTime@min+1)^0,w,c
 44003  00CAFC  E1F0               	bnz	l23983
 44004  00CAFE  0E3C               	movlw	60
 44005  00CB00  5C14               	subwf	IncDecTime@min^0,w,c
 44006  00CB02  A0D8               	btfss	status,0,c
 44007  00CB04  D00F               	goto	u27170
 44008  00CB06  D7EB               	goto	l23983
 44009  00CB08                     l23985:
 44010                           
 44011                           ;RTC8025.c: 134: min = min + 60;
 44012  00CB08  0E3C               	movlw	60
 44013  00CB0A  2414               	addwf	IncDecTime@min^0,w,c
 44014  00CB0C  6E14               	movwf	IncDecTime@min^0,c
 44015  00CB0E  0E00               	movlw	0
 44016  00CB10  2015               	addwfc	(IncDecTime@min+1)^0,w,c
 44017  00CB12  6E15               	movwf	(IncDecTime@min+1)^0,c
 44018                           
 44019                           ;RTC8025.c: 135: hour = hour -1;
 44020  00CB14  0EFF               	movlw	255
 44021  00CB16  2416               	addwf	IncDecTime@hour^0,w,c
 44022  00CB18  6E16               	movwf	IncDecTime@hour^0,c
 44023  00CB1A  0EFF               	movlw	255
 44024  00CB1C  2017               	addwfc	(IncDecTime@hour+1)^0,w,c
 44025  00CB1E  6E17               	movwf	(IncDecTime@hour+1)^0,c
 44026  00CB20                     l3441:
 44027  00CB20  BE15               	btfsc	(IncDecTime@min+1)^0,7,c
 44028  00CB22  D7F2               	goto	l23985
 44029  00CB24                     u27170:
 44030                           
 44031                           ;RTC8025.c: 136: };RTC8025.c: 137: };RTC8025.c: 138: if (hour > 23) hour = hour - 24;
 44032  00CB24  BE17               	btfsc	(IncDecTime@hour+1)^0,7,c
 44033  00CB26  D00B               	goto	l23991
 44034  00CB28  5017               	movf	(IncDecTime@hour+1)^0,w,c
 44035  00CB2A  E104               	bnz	u27180
 44036  00CB2C  0E18               	movlw	24
 44037  00CB2E  5C16               	subwf	IncDecTime@hour^0,w,c
 44038  00CB30  A0D8               	btfss	status,0,c
 44039  00CB32  D005               	goto	l23991
 44040  00CB34                     u27180:
 44041  00CB34  0EE8               	movlw	232
 44042  00CB36  2416               	addwf	IncDecTime@hour^0,w,c
 44043  00CB38  6E16               	movwf	IncDecTime@hour^0,c
 44044  00CB3A  0EFF               	movlw	255
 44045  00CB3C  D006               	goto	L39
 44046  00CB3E                     l23991:
 44047                           
 44048                           ;RTC8025.c: 139: else if (hour < 0) hour = 24 + hour;
 44049  00CB3E  AE17               	btfss	(IncDecTime@hour+1)^0,7,c
 44050  00CB40  D006               	goto	l23995
 44051  00CB42  0E18               	movlw	24
 44052  00CB44  2416               	addwf	IncDecTime@hour^0,w,c
 44053  00CB46  6E16               	movwf	IncDecTime@hour^0,c
 44054  00CB48  0E00               	movlw	0
 44055  00CB4A                     L39:
 44056  00CB4A  2017               	addwfc	(IncDecTime@hour+1)^0,w,c
 44057  00CB4C  6E17               	movwf	(IncDecTime@hour+1)^0,c
 44058  00CB4E                     l23995:
 44059                           
 44060                           ;RTC8025.c: 140: *hh = hour;
 44061  00CB4E  C010  FFD9         	movff	IncDecTime@hh,fsr2l
 44062  00CB52  C011  FFDA         	movff	IncDecTime@hh+1,fsr2h
 44063  00CB56  C016  FFDF         	movff	IncDecTime@hour,indf2
 44064                           
 44065                           ;RTC8025.c: 141: *mm = min;
 44066  00CB5A  C012  FFD9         	movff	IncDecTime@mm,fsr2l
 44067  00CB5E  C013  FFDA         	movff	IncDecTime@mm+1,fsr2h
 44068  00CB62  C014  FFDF         	movff	IncDecTime@min,indf2
 44069  00CB66  0012               	return		;funcret
 44070  00CB68                     __end_of_IncDecTime:
 44071                           	callstack 0
 44072                           
 44073 ;; *************** function _GetTouchLocation *****************
 44074 ;; Defined at:
 44075 ;;		line 67 in file "TouchXT2046.c"
 44076 ;; Parameters:    Size  Location     Type
 44077 ;;  tx              2   41[COMRAM] PTR unsigned int 
 44078 ;;		 -> T_x2(2), T_x1(2), TouchX(2), 
 44079 ;;  ty              2   43[COMRAM] PTR unsigned int 
 44080 ;;		 -> T_y2(2), T_y1(2), TouchY(2), 
 44081 ;; Auto vars:     Size  Location     Type
 44082 ;;  str           100    0        unsigned char [100]
 44083 ;;  samplesY       32   32[BANK0 ] unsigned int [16]
 44084 ;;  samplesX       32    0[BANK0 ] unsigned int [16]
 44085 ;;  avg             2   74[BANK0 ] unsigned int 
 44086 ;;  diff            2   70[BANK0 ] unsigned int 
 44087 ;;  sample_sumY     2   68[BANK0 ] unsigned int 
 44088 ;;  sample_sumX     2   66[BANK0 ] unsigned int 
 44089 ;;  overrange       2   64[BANK0 ] unsigned int 
 44090 ;;  jj              1   76[BANK0 ] char 
 44091 ;;  oversampling    1   73[BANK0 ] unsigned char 
 44092 ;;  num             1   72[BANK0 ] unsigned char 
 44093 ;; Return value:  Size  Location     Type
 44094 ;;                  1    wreg      char 
 44095 ;; Registers used:
 44096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 44097 ;; Tracked objects:
 44098 ;;		On entry : 0/0
 44099 ;;		On exit  : 0/0
 44100 ;;		Unchanged: 0/0
 44101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44103 ;;      Locals:         0      77       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44104 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44105 ;;      Totals:         9      77       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44106 ;;Total ram usage:       86 bytes
 44107 ;; Hardware stack levels used:    1
 44108 ;; Hardware stack levels required when called:    9
 44109 ;; This function calls:
 44110 ;;		_GetTouchRawXY
 44111 ;;		_SPI1_Close
 44112 ;;		_SPI1_ExchangeByte
 44113 ;;		_SPI1_Open
 44114 ;;		___lwdiv
 44115 ;; This function is called by:
 44116 ;;		_NormalProc
 44117 ;;		_SettingProc
 44118 ;;		_TouchAdjust
 44119 ;; This function uses a non-reentrant model
 44120 ;;
 44121                           
 44122                           	psect	text164
 44123  008728                     __ptext164:
 44124                           	callstack 0
 44125  008728                     _GetTouchLocation:
 44126                           	callstack 20
 44127                           
 44128                           ;TouchXT2046.c: 68: int8_t jj;;TouchXT2046.c: 69: uint8_t oversampling = 15;
 44129                           
 44130                           ;incstack = 0
 44131  008728  0E0F               	movlw	15
 44132  00872A  0100               	movlb	0	; () banked
 44133  00872C  6FA9               	movwf	GetTouchLocation@oversampling& (0+255),b
 44134                           
 44135                           ; BSR set to: 0
 44136                           ;TouchXT2046.c: 70: uint16_t sample_sumX;;TouchXT2046.c: 71: uint16_t sample_sumY;;Touch
      +                          XT2046.c: 72: uint16_t samplesX[16], samplesY[16];;TouchXT2046.c: 73: uint8_t num;;Touch
      +                          XT2046.c: 74: uint16_t avg, diff, overrange;;TouchXT2046.c: 75: char str[100];;TouchXT20
      +                          46.c: 77: if (PORTAbits.RA4 != 0) return -1;
 44137  00872E  A880               	btfss	128,4,c	;volatile
 44138  008730  D002               	goto	l23847
 44139  008732                     u26980:
 44140                           
 44141                           ; BSR set to: 0
 44142  008732  0EFF               	movlw	255
 44143  008734  0012               	return	
 44144  008736                     l23847:
 44145                           
 44146                           ; BSR set to: 0
 44147                           ;TouchXT2046.c: 79: if (SPI1_Open(Touch2M)) {
 44148  008736  0E03               	movlw	3
 44149  008738  EC71  F067         	call	_SPI1_Open
 44150  00873C  0900               	iorlw	0
 44151  00873E  B4D8               	btfsc	status,2,c
 44152  008740  D047               	goto	l23867
 44153                           
 44154                           ;TouchXT2046.c: 81: do { LATAbits.LATA5 = 0; } while(0);
 44155  008742  9A89               	bcf	137,5,c	;volatile
 44156                           
 44157                           ;TouchXT2046.c: 84: sample_sumX = 0;
 44158  008744  0E00               	movlw	0
 44159  008746  0100               	movlb	0	; () banked
 44160  008748  6FA3               	movwf	(GetTouchLocation@sample_sumX+1)& (0+255),b
 44161  00874A  0E00               	movlw	0
 44162  00874C  6FA2               	movwf	GetTouchLocation@sample_sumX& (0+255),b
 44163                           
 44164                           ;TouchXT2046.c: 85: sample_sumY = 0;
 44165  00874E  0E00               	movlw	0
 44166  008750  6FA5               	movwf	(GetTouchLocation@sample_sumY+1)& (0+255),b
 44167  008752  0E00               	movlw	0
 44168  008754  6FA4               	movwf	GetTouchLocation@sample_sumY& (0+255),b
 44169                           
 44170                           ;TouchXT2046.c: 86: for (jj = 0; jj < oversampling; jj++) {
 44171  008756  0E00               	movlw	0
 44172  008758  6FAC               	movwf	GetTouchLocation@jj& (0+255),b
 44173  00875A  D022               	goto	l23859
 44174  00875C                     l23851:
 44175                           
 44176                           ; BSR set to: 0
 44177                           ;TouchXT2046.c: 87: GetTouchRawXY(&samplesX[jj], &samplesY[jj]);
 44178  00875C  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44179  00875E  0D02               	mullw	2
 44180  008760  50F3               	movf	243,w,c
 44181  008762  0F60               	addlw	low GetTouchLocation@samplesX
 44182  008764  6E13               	movwf	GetTouchRawXY@tx^0,c
 44183  008766  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44184  008768  0D02               	mullw	2
 44185  00876A  50F3               	movf	243,w,c
 44186  00876C  0F80               	addlw	low GetTouchLocation@samplesY
 44187  00876E  6E14               	movwf	GetTouchRawXY@ty^0,c
 44188  008770  EC78  F060         	call	_GetTouchRawXY	;wreg free
 44189                           
 44190                           ;TouchXT2046.c: 88: sample_sumX += samplesX[jj];
 44191  008774  0100               	movlb	0	; () banked
 44192  008776  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44193  008778  0D02               	mullw	2
 44194  00877A  50F3               	movf	243,w,c
 44195  00877C  0F60               	addlw	low GetTouchLocation@samplesX
 44196  00877E  6ED9               	movwf	fsr2l,c
 44197  008780  6ADA               	clrf	fsr2h,c
 44198  008782  50DE               	movf	postinc2,w,c
 44199  008784  27A2               	addwf	GetTouchLocation@sample_sumX& (0+255),f,b
 44200  008786  50DD               	movf	postdec2,w,c
 44201  008788  23A3               	addwfc	(GetTouchLocation@sample_sumX+1)& (0+255),f,b
 44202                           
 44203                           ; BSR set to: 0
 44204                           ;TouchXT2046.c: 89: sample_sumY += samplesY[jj];
 44205  00878A  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44206  00878C  0D02               	mullw	2
 44207  00878E  50F3               	movf	243,w,c
 44208  008790  0F80               	addlw	low GetTouchLocation@samplesY
 44209  008792  6ED9               	movwf	fsr2l,c
 44210  008794  6ADA               	clrf	fsr2h,c
 44211  008796  50DE               	movf	postinc2,w,c
 44212  008798  27A4               	addwf	GetTouchLocation@sample_sumY& (0+255),f,b
 44213  00879A  50DD               	movf	postdec2,w,c
 44214  00879C  23A5               	addwfc	(GetTouchLocation@sample_sumY+1)& (0+255),f,b
 44215                           
 44216                           ; BSR set to: 0
 44217  00879E  2BAC               	incf	GetTouchLocation@jj& (0+255),f,b
 44218  0087A0                     l23859:
 44219                           
 44220                           ; BSR set to: 0
 44221  0087A0  51A9               	movf	GetTouchLocation@oversampling& (0+255),w,b
 44222  0087A2  6E2E               	movwf	??_GetTouchLocation^0,c
 44223  0087A4  6A2F               	clrf	(??_GetTouchLocation+1)^0,c
 44224  0087A6  C0AC  F030         	movff	GetTouchLocation@jj,??_GetTouchLocation+2
 44225  0087AA  6A31               	clrf	(??_GetTouchLocation+3)^0,c
 44226  0087AC  BE30               	btfsc	(??_GetTouchLocation+2)^0,7,c
 44227  0087AE  0631               	decf	(??_GetTouchLocation+3)^0,f,c
 44228  0087B0  502E               	movf	??_GetTouchLocation^0,w,c
 44229  0087B2  5C30               	subwf	(??_GetTouchLocation+2)^0,w,c
 44230  0087B4  5031               	movf	(??_GetTouchLocation+3)^0,w,c
 44231  0087B6  0A80               	xorlw	128
 44232  0087B8  6E32               	movwf	(??_GetTouchLocation+4)^0,c
 44233  0087BA  502F               	movf	(??_GetTouchLocation+1)^0,w,c
 44234  0087BC  0A80               	xorlw	128
 44235  0087BE  5832               	subwfb	(??_GetTouchLocation+4)^0,w,c
 44236  0087C0  A0D8               	btfss	status,0,c
 44237  0087C2  D7CC               	goto	l23851
 44238                           
 44239                           ; BSR set to: 0
 44240                           ;TouchXT2046.c: 90: };TouchXT2046.c: 91: SPI1_ExchangeByte(0b10000000);
 44241  0087C4  0E80               	movlw	128
 44242  0087C6  EC0D  F07B         	call	_SPI1_ExchangeByte
 44243  0087CA  8A89               	bsf	137,5,c	;volatile
 44244                           
 44245                           ;TouchXT2046.c: 95: SPI1_Close();
 44246  0087CC  ECFF  F07B         	call	_SPI1_Close	;wreg free
 44247  0087D0                     l23867:
 44248                           
 44249                           ;TouchXT2046.c: 96: };TouchXT2046.c: 98: avg = sample_sumX / oversampling;
 44250  0087D0  C0A2  F023         	movff	GetTouchLocation@sample_sumX,___lwdiv@dividend
 44251  0087D4  C0A3  F024         	movff	GetTouchLocation@sample_sumX+1,___lwdiv@dividend+1
 44252  0087D8  C0A9  F025         	movff	GetTouchLocation@oversampling,___lwdiv@divisor
 44253  0087DC  6A26               	clrf	(___lwdiv@divisor+1)^0,c
 44254  0087DE  EC66  F073         	call	___lwdiv	;wreg free
 44255  0087E2  C023  F0AA         	movff	?___lwdiv,GetTouchLocation@avg
 44256  0087E6  C024  F0AB         	movff	?___lwdiv+1,GetTouchLocation@avg+1
 44257                           
 44258                           ;TouchXT2046.c: 99: num = oversampling;
 44259  0087EA  C0A9  F0A8         	movff	GetTouchLocation@oversampling,GetTouchLocation@num
 44260                           
 44261                           ;TouchXT2046.c: 100: overrange = avg / 10;
 44262  0087EE  C0AA  F023         	movff	GetTouchLocation@avg,___lwdiv@dividend
 44263  0087F2  C0AB  F024         	movff	GetTouchLocation@avg+1,___lwdiv@dividend+1
 44264  0087F6  0E00               	movlw	0
 44265  0087F8  6E26               	movwf	(___lwdiv@divisor+1)^0,c
 44266  0087FA  0E0A               	movlw	10
 44267  0087FC  6E25               	movwf	___lwdiv@divisor^0,c
 44268  0087FE  EC66  F073         	call	___lwdiv	;wreg free
 44269  008802  C023  F0A0         	movff	?___lwdiv,GetTouchLocation@overrange
 44270  008806  C024  F0A1         	movff	?___lwdiv+1,GetTouchLocation@overrange+1
 44271                           
 44272                           ;TouchXT2046.c: 101: for (jj = 0; jj < oversampling; jj++) {
 44273  00880A  0E00               	movlw	0
 44274  00880C  0100               	movlb	0	; () banked
 44275  00880E  6FAC               	movwf	GetTouchLocation@jj& (0+255),b
 44276  008810  D03E               	goto	l23887
 44277  008812                     l23873:
 44278                           
 44279                           ; BSR set to: 0
 44280                           ;TouchXT2046.c: 102: if (avg > samplesX[jj]) diff = avg - samplesX[jj];
 44281  008812  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44282  008814  0D02               	mullw	2
 44283  008816  50F3               	movf	243,w,c
 44284  008818  0F60               	addlw	low GetTouchLocation@samplesX
 44285  00881A  6ED9               	movwf	fsr2l,c
 44286  00881C  6ADA               	clrf	fsr2h,c
 44287  00881E  51AA               	movf	GetTouchLocation@avg& (0+255),w,b
 44288  008820  5CDE               	subwf	postinc2,w,c
 44289  008822  51AB               	movf	(GetTouchLocation@avg+1)& (0+255),w,b
 44290  008824  58DE               	subwfb	postinc2,w,c
 44291  008826  B0D8               	btfsc	status,0,c
 44292  008828  D010               	goto	l23877
 44293                           
 44294                           ; BSR set to: 0
 44295  00882A  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44296  00882C  0D02               	mullw	2
 44297  00882E  50F3               	movf	243,w,c
 44298  008830  0F60               	addlw	low GetTouchLocation@samplesX
 44299  008832  6ED9               	movwf	fsr2l,c
 44300  008834  6ADA               	clrf	fsr2h,c
 44301  008836  CFDE F02E          	movff	postinc2,??_GetTouchLocation
 44302  00883A  CFDD F02F          	movff	postdec2,??_GetTouchLocation+1
 44303  00883E  502E               	movf	??_GetTouchLocation^0,w,c
 44304  008840  5DAA               	subwf	GetTouchLocation@avg& (0+255),w,b
 44305  008842  6FA6               	movwf	GetTouchLocation@diff& (0+255),b
 44306  008844  502F               	movf	(??_GetTouchLocation+1)^0,w,c
 44307  008846  59AB               	subwfb	(GetTouchLocation@avg+1)& (0+255),w,b
 44308  008848  D00F               	goto	L40
 44309  00884A                     l23877:
 44310                           
 44311                           ; BSR set to: 0
 44312                           ;TouchXT2046.c: 103: else diff = samplesX[jj] - avg;
 44313  00884A  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44314  00884C  0D02               	mullw	2
 44315  00884E  50F3               	movf	243,w,c
 44316  008850  0F60               	addlw	low GetTouchLocation@samplesX
 44317  008852  6ED9               	movwf	fsr2l,c
 44318  008854  6ADA               	clrf	fsr2h,c
 44319  008856  CFDE F02E          	movff	postinc2,??_GetTouchLocation
 44320  00885A  CFDD F02F          	movff	postdec2,??_GetTouchLocation+1
 44321  00885E  51AA               	movf	GetTouchLocation@avg& (0+255),w,b
 44322  008860  5C2E               	subwf	??_GetTouchLocation^0,w,c
 44323  008862  6FA6               	movwf	GetTouchLocation@diff& (0+255),b
 44324  008864  51AB               	movf	(GetTouchLocation@avg+1)& (0+255),w,b
 44325  008866  582F               	subwfb	(??_GetTouchLocation+1)^0,w,c
 44326  008868                     L40:
 44327  008868  6FA7               	movwf	(GetTouchLocation@diff+1)& (0+255),b
 44328                           
 44329                           ; BSR set to: 0
 44330                           ;TouchXT2046.c: 104: if (diff > overrange) {
 44331  00886A  51A6               	movf	GetTouchLocation@diff& (0+255),w,b
 44332  00886C  5DA0               	subwf	GetTouchLocation@overrange& (0+255),w,b
 44333  00886E  51A7               	movf	(GetTouchLocation@diff+1)& (0+255),w,b
 44334  008870  59A1               	subwfb	(GetTouchLocation@overrange+1)& (0+255),w,b
 44335  008872  B0D8               	btfsc	status,0,c
 44336  008874  D00B               	goto	l23885
 44337                           
 44338                           ; BSR set to: 0
 44339                           ;TouchXT2046.c: 106: sample_sumX -= samplesX[jj];
 44340  008876  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44341  008878  0D02               	mullw	2
 44342  00887A  50F3               	movf	243,w,c
 44343  00887C  0F60               	addlw	low GetTouchLocation@samplesX
 44344  00887E  6ED9               	movwf	fsr2l,c
 44345  008880  6ADA               	clrf	fsr2h,c
 44346  008882  50DE               	movf	postinc2,w,c
 44347  008884  5FA2               	subwf	GetTouchLocation@sample_sumX& (0+255),f,b
 44348  008886  50DD               	movf	postdec2,w,c
 44349  008888  5BA3               	subwfb	(GetTouchLocation@sample_sumX+1)& (0+255),f,b
 44350                           
 44351                           ; BSR set to: 0
 44352                           ;TouchXT2046.c: 107: num--;
 44353  00888A  07A8               	decf	GetTouchLocation@num& (0+255),f,b
 44354  00888C                     l23885:
 44355                           
 44356                           ; BSR set to: 0
 44357  00888C  2BAC               	incf	GetTouchLocation@jj& (0+255),f,b
 44358  00888E                     l23887:
 44359                           
 44360                           ; BSR set to: 0
 44361  00888E  51A9               	movf	GetTouchLocation@oversampling& (0+255),w,b
 44362  008890  6E2E               	movwf	??_GetTouchLocation^0,c
 44363  008892  6A2F               	clrf	(??_GetTouchLocation+1)^0,c
 44364  008894  C0AC  F030         	movff	GetTouchLocation@jj,??_GetTouchLocation+2
 44365  008898  6A31               	clrf	(??_GetTouchLocation+3)^0,c
 44366  00889A  BE30               	btfsc	(??_GetTouchLocation+2)^0,7,c
 44367  00889C  0631               	decf	(??_GetTouchLocation+3)^0,f,c
 44368  00889E  502E               	movf	??_GetTouchLocation^0,w,c
 44369  0088A0  5C30               	subwf	(??_GetTouchLocation+2)^0,w,c
 44370  0088A2  5031               	movf	(??_GetTouchLocation+3)^0,w,c
 44371  0088A4  0A80               	xorlw	128
 44372  0088A6  6E32               	movwf	(??_GetTouchLocation+4)^0,c
 44373  0088A8  502F               	movf	(??_GetTouchLocation+1)^0,w,c
 44374  0088AA  0A80               	xorlw	128
 44375  0088AC  5832               	subwfb	(??_GetTouchLocation+4)^0,w,c
 44376  0088AE  A0D8               	btfss	status,0,c
 44377  0088B0  D7B0               	goto	l23873
 44378                           
 44379                           ; BSR set to: 0
 44380                           ;TouchXT2046.c: 108: };TouchXT2046.c: 109: };TouchXT2046.c: 110: if (num > 0) *tx = samp
      +                          le_sumX / num;
 44381  0088B2  51A8               	movf	GetTouchLocation@num& (0+255),w,b
 44382  0088B4  B4D8               	btfsc	status,2,c
 44383  0088B6  D73D               	goto	u26980
 44384                           
 44385                           ; BSR set to: 0
 44386  0088B8  C0A2  F023         	movff	GetTouchLocation@sample_sumX,___lwdiv@dividend
 44387  0088BC  C0A3  F024         	movff	GetTouchLocation@sample_sumX+1,___lwdiv@dividend+1
 44388  0088C0  C0A8  F025         	movff	GetTouchLocation@num,___lwdiv@divisor
 44389  0088C4  6A26               	clrf	(___lwdiv@divisor+1)^0,c
 44390  0088C6  EC66  F073         	call	___lwdiv	;wreg free
 44391  0088CA  C02A  FFD9         	movff	GetTouchLocation@tx,fsr2l
 44392  0088CE  C02B  FFDA         	movff	GetTouchLocation@tx+1,fsr2h
 44393  0088D2  C023  FFDE         	movff	?___lwdiv,postinc2
 44394  0088D6  C024  FFDD         	movff	?___lwdiv+1,postdec2
 44395                           
 44396                           ;TouchXT2046.c: 113: avg = sample_sumY / oversampling;
 44397  0088DA  C0A4  F023         	movff	GetTouchLocation@sample_sumY,___lwdiv@dividend
 44398  0088DE  C0A5  F024         	movff	GetTouchLocation@sample_sumY+1,___lwdiv@dividend+1
 44399  0088E2  C0A9  F025         	movff	GetTouchLocation@oversampling,___lwdiv@divisor
 44400  0088E6  6A26               	clrf	(___lwdiv@divisor+1)^0,c
 44401  0088E8  EC66  F073         	call	___lwdiv	;wreg free
 44402  0088EC  C023  F0AA         	movff	?___lwdiv,GetTouchLocation@avg
 44403  0088F0  C024  F0AB         	movff	?___lwdiv+1,GetTouchLocation@avg+1
 44404                           
 44405                           ;TouchXT2046.c: 114: num = oversampling;
 44406  0088F4  C0A9  F0A8         	movff	GetTouchLocation@oversampling,GetTouchLocation@num
 44407                           
 44408                           ;TouchXT2046.c: 115: overrange = avg / 10;
 44409  0088F8  C0AA  F023         	movff	GetTouchLocation@avg,___lwdiv@dividend
 44410  0088FC  C0AB  F024         	movff	GetTouchLocation@avg+1,___lwdiv@dividend+1
 44411  008900  0E00               	movlw	0
 44412  008902  6E26               	movwf	(___lwdiv@divisor+1)^0,c
 44413  008904  0E0A               	movlw	10
 44414  008906  6E25               	movwf	___lwdiv@divisor^0,c
 44415  008908  EC66  F073         	call	___lwdiv	;wreg free
 44416  00890C  C023  F0A0         	movff	?___lwdiv,GetTouchLocation@overrange
 44417  008910  C024  F0A1         	movff	?___lwdiv+1,GetTouchLocation@overrange+1
 44418                           
 44419                           ;TouchXT2046.c: 116: for (jj = 0; jj < oversampling; jj++) {
 44420  008914  0E00               	movlw	0
 44421  008916  0100               	movlb	0	; () banked
 44422  008918  6FAC               	movwf	GetTouchLocation@jj& (0+255),b
 44423  00891A  D03E               	goto	l23917
 44424  00891C                     l23903:
 44425                           
 44426                           ; BSR set to: 0
 44427                           ;TouchXT2046.c: 117: if (avg > samplesY[jj]) diff = avg - samplesY[jj];
 44428  00891C  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44429  00891E  0D02               	mullw	2
 44430  008920  50F3               	movf	243,w,c
 44431  008922  0F80               	addlw	low GetTouchLocation@samplesY
 44432  008924  6ED9               	movwf	fsr2l,c
 44433  008926  6ADA               	clrf	fsr2h,c
 44434  008928  51AA               	movf	GetTouchLocation@avg& (0+255),w,b
 44435  00892A  5CDE               	subwf	postinc2,w,c
 44436  00892C  51AB               	movf	(GetTouchLocation@avg+1)& (0+255),w,b
 44437  00892E  58DE               	subwfb	postinc2,w,c
 44438  008930  B0D8               	btfsc	status,0,c
 44439  008932  D010               	goto	l23907
 44440                           
 44441                           ; BSR set to: 0
 44442  008934  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44443  008936  0D02               	mullw	2
 44444  008938  50F3               	movf	243,w,c
 44445  00893A  0F80               	addlw	low GetTouchLocation@samplesY
 44446  00893C  6ED9               	movwf	fsr2l,c
 44447  00893E  6ADA               	clrf	fsr2h,c
 44448  008940  CFDE F02E          	movff	postinc2,??_GetTouchLocation
 44449  008944  CFDD F02F          	movff	postdec2,??_GetTouchLocation+1
 44450  008948  502E               	movf	??_GetTouchLocation^0,w,c
 44451  00894A  5DAA               	subwf	GetTouchLocation@avg& (0+255),w,b
 44452  00894C  6FA6               	movwf	GetTouchLocation@diff& (0+255),b
 44453  00894E  502F               	movf	(??_GetTouchLocation+1)^0,w,c
 44454  008950  59AB               	subwfb	(GetTouchLocation@avg+1)& (0+255),w,b
 44455  008952  D00F               	goto	L41
 44456  008954                     l23907:
 44457                           
 44458                           ; BSR set to: 0
 44459                           ;TouchXT2046.c: 118: else diff = samplesY[jj] - avg;
 44460  008954  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44461  008956  0D02               	mullw	2
 44462  008958  50F3               	movf	243,w,c
 44463  00895A  0F80               	addlw	low GetTouchLocation@samplesY
 44464  00895C  6ED9               	movwf	fsr2l,c
 44465  00895E  6ADA               	clrf	fsr2h,c
 44466  008960  CFDE F02E          	movff	postinc2,??_GetTouchLocation
 44467  008964  CFDD F02F          	movff	postdec2,??_GetTouchLocation+1
 44468  008968  51AA               	movf	GetTouchLocation@avg& (0+255),w,b
 44469  00896A  5C2E               	subwf	??_GetTouchLocation^0,w,c
 44470  00896C  6FA6               	movwf	GetTouchLocation@diff& (0+255),b
 44471  00896E  51AB               	movf	(GetTouchLocation@avg+1)& (0+255),w,b
 44472  008970  582F               	subwfb	(??_GetTouchLocation+1)^0,w,c
 44473  008972                     L41:
 44474  008972  6FA7               	movwf	(GetTouchLocation@diff+1)& (0+255),b
 44475                           
 44476                           ; BSR set to: 0
 44477                           ;TouchXT2046.c: 119: if (diff > overrange) {
 44478  008974  51A6               	movf	GetTouchLocation@diff& (0+255),w,b
 44479  008976  5DA0               	subwf	GetTouchLocation@overrange& (0+255),w,b
 44480  008978  51A7               	movf	(GetTouchLocation@diff+1)& (0+255),w,b
 44481  00897A  59A1               	subwfb	(GetTouchLocation@overrange+1)& (0+255),w,b
 44482  00897C  B0D8               	btfsc	status,0,c
 44483  00897E  D00B               	goto	l23915
 44484                           
 44485                           ; BSR set to: 0
 44486                           ;TouchXT2046.c: 121: sample_sumY -= samplesY[jj];
 44487  008980  51AC               	movf	GetTouchLocation@jj& (0+255),w,b
 44488  008982  0D02               	mullw	2
 44489  008984  50F3               	movf	243,w,c
 44490  008986  0F80               	addlw	low GetTouchLocation@samplesY
 44491  008988  6ED9               	movwf	fsr2l,c
 44492  00898A  6ADA               	clrf	fsr2h,c
 44493  00898C  50DE               	movf	postinc2,w,c
 44494  00898E  5FA4               	subwf	GetTouchLocation@sample_sumY& (0+255),f,b
 44495  008990  50DD               	movf	postdec2,w,c
 44496  008992  5BA5               	subwfb	(GetTouchLocation@sample_sumY+1)& (0+255),f,b
 44497                           
 44498                           ; BSR set to: 0
 44499                           ;TouchXT2046.c: 122: num--;
 44500  008994  07A8               	decf	GetTouchLocation@num& (0+255),f,b
 44501  008996                     l23915:
 44502                           
 44503                           ; BSR set to: 0
 44504  008996  2BAC               	incf	GetTouchLocation@jj& (0+255),f,b
 44505  008998                     l23917:
 44506                           
 44507                           ; BSR set to: 0
 44508  008998  51A9               	movf	GetTouchLocation@oversampling& (0+255),w,b
 44509  00899A  6E2E               	movwf	??_GetTouchLocation^0,c
 44510  00899C  6A2F               	clrf	(??_GetTouchLocation+1)^0,c
 44511  00899E  C0AC  F030         	movff	GetTouchLocation@jj,??_GetTouchLocation+2
 44512  0089A2  6A31               	clrf	(??_GetTouchLocation+3)^0,c
 44513  0089A4  BE30               	btfsc	(??_GetTouchLocation+2)^0,7,c
 44514  0089A6  0631               	decf	(??_GetTouchLocation+3)^0,f,c
 44515  0089A8  502E               	movf	??_GetTouchLocation^0,w,c
 44516  0089AA  5C30               	subwf	(??_GetTouchLocation+2)^0,w,c
 44517  0089AC  5031               	movf	(??_GetTouchLocation+3)^0,w,c
 44518  0089AE  0A80               	xorlw	128
 44519  0089B0  6E32               	movwf	(??_GetTouchLocation+4)^0,c
 44520  0089B2  502F               	movf	(??_GetTouchLocation+1)^0,w,c
 44521  0089B4  0A80               	xorlw	128
 44522  0089B6  5832               	subwfb	(??_GetTouchLocation+4)^0,w,c
 44523  0089B8  A0D8               	btfss	status,0,c
 44524  0089BA  D7B0               	goto	l23903
 44525                           
 44526                           ; BSR set to: 0
 44527                           ;TouchXT2046.c: 123: };TouchXT2046.c: 124: };TouchXT2046.c: 125: if (num > 0) *ty = samp
      +                          le_sumY / num;
 44528  0089BC  51A8               	movf	GetTouchLocation@num& (0+255),w,b
 44529  0089BE  B4D8               	btfsc	status,2,c
 44530  0089C0  D6B8               	goto	u26980
 44531                           
 44532                           ; BSR set to: 0
 44533  0089C2  C0A4  F023         	movff	GetTouchLocation@sample_sumY,___lwdiv@dividend
 44534  0089C6  C0A5  F024         	movff	GetTouchLocation@sample_sumY+1,___lwdiv@dividend+1
 44535  0089CA  C0A8  F025         	movff	GetTouchLocation@num,___lwdiv@divisor
 44536  0089CE  6A26               	clrf	(___lwdiv@divisor+1)^0,c
 44537  0089D0  EC66  F073         	call	___lwdiv	;wreg free
 44538  0089D4  C02C  FFD9         	movff	GetTouchLocation@ty,fsr2l
 44539  0089D8  C02D  FFDA         	movff	GetTouchLocation@ty+1,fsr2h
 44540  0089DC  C023  FFDE         	movff	?___lwdiv,postinc2
 44541  0089E0  C024  FFDD         	movff	?___lwdiv+1,postdec2
 44542                           
 44543                           ;TouchXT2046.c: 133: return 0;
 44544  0089E4  0E00               	movlw	0
 44545  0089E6  0012               	return		;funcret
 44546  0089E8                     __end_of_GetTouchLocation:
 44547                           	callstack 0
 44548                           
 44549 ;; *************** function _SPI1_Open *****************
 44550 ;; Defined at:
 44551 ;;		line 76 in file "mcc_generated_files/spi1.c"
 44552 ;; Parameters:    Size  Location     Type
 44553 ;;  spi1UniqueCo    1    wreg     enum E92
 44554 ;; Auto vars:     Size  Location     Type
 44555 ;;  spi1UniqueCo    1   14[COMRAM] enum E92
 44556 ;; Return value:  Size  Location     Type
 44557 ;;                  1    wreg      unsigned char 
 44558 ;; Registers used:
 44559 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 44560 ;; Tracked objects:
 44561 ;;		On entry : 0/3
 44562 ;;		On exit  : 0/0
 44563 ;;		Unchanged: 0/0
 44564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44566 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44567 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44568 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44569 ;;Total ram usage:        2 bytes
 44570 ;; Hardware stack levels used:    1
 44571 ;; Hardware stack levels required when called:    6
 44572 ;; This function calls:
 44573 ;;		Nothing
 44574 ;; This function is called by:
 44575 ;;		_SDFAST_open
 44576 ;;		_LCD8M_open
 44577 ;;		_SDSLOW_open
 44578 ;;		_Touch2M_open
 44579 ;;		_GetTouchLocation
 44580 ;; This function uses a non-reentrant model
 44581 ;;
 44582                           
 44583                           	psect	text165
 44584  00CEE2                     __ptext165:
 44585                           	callstack 0
 44586  00CEE2                     _SPI1_Open:
 44587                           	callstack 21
 44588                           
 44589                           ;incstack = 0
 44590                           ;SPI1_Open@spi1UniqueConfiguration stored from wreg
 44591  00CEE2  6E0F               	movwf	SPI1_Open@spi1UniqueConfiguration^0,c
 44592                           
 44593                           ;spi1.c: 78: if(!SSP1CON1bits.SSPEN)
 44594  00CEE4  BAC6               	btfsc	198,5,c	;volatile
 44595  00CEE6  D051               	goto	l18431
 44596                           
 44597                           ;spi1.c: 79: {;spi1.c: 80: SSP1STAT = spi1_configuration[spi1UniqueConfiguration].stat;
 44598  00CEE8  500F               	movf	SPI1_Open@spi1UniqueConfiguration^0,w,c
 44599  00CEEA  0D04               	mullw	4
 44600  00CEEC  0E01               	movlw	1
 44601  00CEEE  26F3               	addwf	243,f,c
 44602  00CEF0  0E00               	movlw	0
 44603  00CEF2  22F4               	addwfc	244,f,c
 44604  00CEF4  0E8F               	movlw	low _spi1_configuration
 44605  00CEF6  24F3               	addwf	243,w,c
 44606  00CEF8  6EF6               	movwf	tblptrl,c
 44607  00CEFA  0EFA               	movlw	high _spi1_configuration
 44608  00CEFC  20F4               	addwfc	244,w,c
 44609  00CEFE  6EF7               	movwf	tblptrh,c
 44610  00CF00                     	if	1	;There are 3 active tblptr bytes
 44611  00CF00  6AF8               	clrf	tblptru,c
 44612  00CF02  0E00               	movlw	low (__mediumconst shr (0+16))
 44613  00CF04  22F8               	addwfc	tblptru,f,c
 44614  00CF06                     	endif
 44615  00CF06  0008               	tblrd		*
 44616  00CF08  CFF5 FFC7          	movff	tablat,4039	;volatile
 44617                           
 44618                           ;spi1.c: 81: SSP1CON1 = spi1_configuration[spi1UniqueConfiguration].con1;
 44619  00CF0C  500F               	movf	SPI1_Open@spi1UniqueConfiguration^0,w,c
 44620  00CF0E  0D04               	mullw	4
 44621  00CF10  0E8F               	movlw	low _spi1_configuration
 44622  00CF12  24F3               	addwf	243,w,c
 44623  00CF14  6EF6               	movwf	tblptrl,c
 44624  00CF16  0EFA               	movlw	high _spi1_configuration
 44625  00CF18  20F4               	addwfc	244,w,c
 44626  00CF1A  6EF7               	movwf	tblptrh,c
 44627  00CF1C                     	if	1	;There are 3 active tblptr bytes
 44628  00CF1C  6AF8               	clrf	tblptru,c
 44629  00CF1E  0E00               	movlw	low (__mediumconst shr (0+16))
 44630  00CF20  22F8               	addwfc	tblptru,f,c
 44631  00CF22                     	endif
 44632  00CF22  0008               	tblrd		*
 44633  00CF24  CFF5 FFC6          	movff	tablat,4038	;volatile
 44634                           
 44635                           ;spi1.c: 82: SSP1CON2 = 0x00;
 44636  00CF28  0E00               	movlw	0
 44637  00CF2A  6EC5               	movwf	197,c	;volatile
 44638                           
 44639                           ;spi1.c: 83: SSP1ADD = spi1_configuration[spi1UniqueConfiguration].add;
 44640  00CF2C  500F               	movf	SPI1_Open@spi1UniqueConfiguration^0,w,c
 44641  00CF2E  0D04               	mullw	4
 44642  00CF30  0E02               	movlw	2
 44643  00CF32  26F3               	addwf	243,f,c
 44644  00CF34  0E00               	movlw	0
 44645  00CF36  22F4               	addwfc	244,f,c
 44646  00CF38  0E8F               	movlw	low _spi1_configuration
 44647  00CF3A  24F3               	addwf	243,w,c
 44648  00CF3C  6EF6               	movwf	tblptrl,c
 44649  00CF3E  0EFA               	movlw	high _spi1_configuration
 44650  00CF40  20F4               	addwfc	244,w,c
 44651  00CF42  6EF7               	movwf	tblptrh,c
 44652  00CF44                     	if	1	;There are 3 active tblptr bytes
 44653  00CF44  6AF8               	clrf	tblptru,c
 44654  00CF46  0E00               	movlw	low (__mediumconst shr (0+16))
 44655  00CF48  22F8               	addwfc	tblptru,f,c
 44656  00CF4A                     	endif
 44657  00CF4A  0008               	tblrd		*
 44658  00CF4C  CFF5 FFC8          	movff	tablat,4040	;volatile
 44659                           
 44660                           ;spi1.c: 84: TRISCbits.TRISC3 = spi1_configuration[spi1UniqueConfiguration].operation;
 44661  00CF50  500F               	movf	SPI1_Open@spi1UniqueConfiguration^0,w,c
 44662  00CF52  0D04               	mullw	4
 44663  00CF54  0E03               	movlw	3
 44664  00CF56  26F3               	addwf	243,f,c
 44665  00CF58  0E00               	movlw	0
 44666  00CF5A  22F4               	addwfc	244,f,c
 44667  00CF5C  0E8F               	movlw	low _spi1_configuration
 44668  00CF5E  24F3               	addwf	243,w,c
 44669  00CF60  6EF6               	movwf	tblptrl,c
 44670  00CF62  0EFA               	movlw	high _spi1_configuration
 44671  00CF64  20F4               	addwfc	244,w,c
 44672  00CF66  6EF7               	movwf	tblptrh,c
 44673  00CF68                     	if	1	;There are 3 active tblptr bytes
 44674  00CF68  6AF8               	clrf	tblptru,c
 44675  00CF6A  0E00               	movlw	low (__mediumconst shr (0+16))
 44676  00CF6C  22F8               	addwfc	tblptru,f,c
 44677  00CF6E                     	endif
 44678  00CF6E  0008               	tblrd		*
 44679  00CF70  CFF5 F00E          	movff	tablat,??_SPI1_Open
 44680  00CF74  460E               	rlncf	??_SPI1_Open^0,f,c
 44681  00CF76  460E               	rlncf	??_SPI1_Open^0,f,c
 44682  00CF78  460E               	rlncf	??_SPI1_Open^0,f,c
 44683  00CF7A  5094               	movf	148,w,c	;volatile
 44684  00CF7C  180E               	xorwf	??_SPI1_Open^0,w,c
 44685  00CF7E  0BF7               	andlw	-9
 44686  00CF80  180E               	xorwf	??_SPI1_Open^0,w,c
 44687  00CF82  6E94               	movwf	148,c	;volatile
 44688                           
 44689                           ;spi1.c: 85: SSP1CON1bits.SSPEN = 1;
 44690  00CF84  8AC6               	bsf	198,5,c	;volatile
 44691                           
 44692                           ;spi1.c: 86: return 1;
 44693  00CF86  0E01               	movlw	1
 44694  00CF88  0012               	return	
 44695  00CF8A                     l18431:
 44696                           
 44697                           ;spi1.c: 87: };spi1.c: 88: return 0;
 44698  00CF8A  0E00               	movlw	0
 44699  00CF8C  0012               	return		;funcret
 44700  00CF8E                     __end_of_SPI1_Open:
 44701                           	callstack 0
 44702                           
 44703 ;; *************** function _SPI1_Close *****************
 44704 ;; Defined at:
 44705 ;;		line 91 in file "mcc_generated_files/spi1.c"
 44706 ;; Parameters:    Size  Location     Type
 44707 ;;		None
 44708 ;; Auto vars:     Size  Location     Type
 44709 ;;		None
 44710 ;; Return value:  Size  Location     Type
 44711 ;;                  1    wreg      void 
 44712 ;; Registers used:
 44713 ;;		None
 44714 ;; Tracked objects:
 44715 ;;		On entry : 0/2
 44716 ;;		On exit  : 0/0
 44717 ;;		Unchanged: 0/0
 44718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44723 ;;Total ram usage:        0 bytes
 44724 ;; Hardware stack levels used:    1
 44725 ;; Hardware stack levels required when called:    6
 44726 ;; This function calls:
 44727 ;;		Nothing
 44728 ;; This function is called by:
 44729 ;;		_addset
 44730 ;;		_lcd_set_cursor_x
 44731 ;;		_lcd_set_cursor_y
 44732 ;;		_draw_pixel
 44733 ;;		_lcd_fill
 44734 ;;		_drawHLine
 44735 ;;		_drawVLine
 44736 ;;		_lcd_fill_rect
 44737 ;;		_glcd_init
 44738 ;;		_glcd_init2
 44739 ;;		_GetTouchLocation
 44740 ;;		_SD_SPI_SectorWrite
 44741 ;;		_SD_SPI_SectorRead
 44742 ;;		_SD_SPI_MediaInitialize
 44743 ;; This function uses a non-reentrant model
 44744 ;;
 44745                           
 44746                           	psect	text166
 44747  00F7FE                     __ptext166:
 44748                           	callstack 0
 44749  00F7FE                     _SPI1_Close:
 44750                           	callstack 22
 44751                           
 44752                           ;spi1.c: 93: SSP1CON1bits.SSPEN = 0;
 44753                           
 44754                           ;incstack = 0
 44755  00F7FE  9AC6               	bcf	198,5,c	;volatile
 44756  00F800  0012               	return		;funcret
 44757  00F802                     __end_of_SPI1_Close:
 44758                           	callstack 0
 44759                           
 44760 ;; *************** function _GetTouchRawXY *****************
 44761 ;; Defined at:
 44762 ;;		line 41 in file "TouchXT2046.c"
 44763 ;; Parameters:    Size  Location     Type
 44764 ;;  tx              1   18[COMRAM] PTR unsigned int 
 44765 ;;		 -> GetTouchLocation@samplesX(32), 
 44766 ;;  ty              1   19[COMRAM] PTR unsigned int 
 44767 ;;		 -> GetTouchLocation@samplesY(32), 
 44768 ;; Auto vars:     Size  Location     Type
 44769 ;;  data            2   23[COMRAM] unsigned char [2]
 44770 ;; Return value:  Size  Location     Type
 44771 ;;                  1    wreg      void 
 44772 ;; Registers used:
 44773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 44774 ;; Tracked objects:
 44775 ;;		On entry : 3F/0
 44776 ;;		On exit  : 0/0
 44777 ;;		Unchanged: 0/0
 44778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44780 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44781 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44782 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44783 ;;Total ram usage:        7 bytes
 44784 ;; Hardware stack levels used:    1
 44785 ;; Hardware stack levels required when called:    8
 44786 ;; This function calls:
 44787 ;;		_SPI1_ExchangeByte
 44788 ;;		_SPI1_ReadBlock
 44789 ;; This function is called by:
 44790 ;;		_GetTouchLocation
 44791 ;; This function uses a non-reentrant model
 44792 ;;
 44793                           
 44794                           	psect	text167
 44795  00C0F0                     __ptext167:
 44796                           	callstack 0
 44797  00C0F0                     _GetTouchRawXY:
 44798                           	callstack 20
 44799                           
 44800                           ; BSR set to: 0
 44801                           ;TouchXT2046.c: 42: uint8_t data[2];;TouchXT2046.c: 47: SPI1_ExchangeByte(0b11010011);
 44802                           
 44803                           ;incstack = 0
 44804  00C0F0  0ED3               	movlw	211
 44805  00C0F2  EC0D  F07B         	call	_SPI1_ExchangeByte
 44806                           
 44807                           ;TouchXT2046.c: 48: SPI1_ReadBlock(data, 2);
 44808  00C0F6  0E18               	movlw	low GetTouchRawXY@data
 44809  00C0F8  6E0F               	movwf	SPI1_ReadBlock@block^0,c
 44810  00C0FA  0E00               	movlw	0
 44811  00C0FC  6E11               	movwf	(SPI1_ReadBlock@blockSize+1)^0,c
 44812  00C0FE  0E02               	movlw	2
 44813  00C100  6E10               	movwf	SPI1_ReadBlock@blockSize^0,c
 44814  00C102  ECD7  F078         	call	_SPI1_ReadBlock	;wreg free
 44815                           
 44816                           ;TouchXT2046.c: 49: *ty = data[0];
 44817  00C106  5018               	movf	GetTouchRawXY@data^0,w,c
 44818  00C108  6E15               	movwf	??_GetTouchRawXY^0,c
 44819  00C10A  6A16               	clrf	(??_GetTouchRawXY+1)^0,c
 44820  00C10C  5014               	movf	GetTouchRawXY@ty^0,w,c
 44821  00C10E  6ED9               	movwf	fsr2l,c
 44822  00C110  6ADA               	clrf	fsr2h,c
 44823  00C112  C015  FFDE         	movff	??_GetTouchRawXY,postinc2
 44824  00C116  C016  FFDD         	movff	??_GetTouchRawXY+1,postdec2
 44825                           
 44826                           ;TouchXT2046.c: 50: *ty = (*ty << 4) + ((data[1] >> 4) & 0x0f);
 44827  00C11A  5014               	movf	GetTouchRawXY@ty^0,w,c
 44828  00C11C  6ED9               	movwf	fsr2l,c
 44829  00C11E  6ADA               	clrf	fsr2h,c
 44830  00C120  CFDE F015          	movff	postinc2,??_GetTouchRawXY
 44831  00C124  CFDD F016          	movff	postdec2,??_GetTouchRawXY+1
 44832  00C128  3A15               	swapf	??_GetTouchRawXY^0,f,c
 44833  00C12A  3A16               	swapf	(??_GetTouchRawXY+1)^0,f,c
 44834  00C12C  0EF0               	movlw	240
 44835  00C12E  1616               	andwf	(??_GetTouchRawXY+1)^0,f,c
 44836  00C130  5015               	movf	??_GetTouchRawXY^0,w,c
 44837  00C132  0B0F               	andlw	15
 44838  00C134  1216               	iorwf	(??_GetTouchRawXY+1)^0,f,c
 44839  00C136  0EF0               	movlw	240
 44840  00C138  1615               	andwf	??_GetTouchRawXY^0,f,c
 44841  00C13A  C019  F017         	movff	GetTouchRawXY@data+1,??_GetTouchRawXY+2
 44842  00C13E  3A17               	swapf	(??_GetTouchRawXY+2)^0,f,c
 44843  00C140  0E0F               	movlw	15
 44844  00C142  1617               	andwf	(??_GetTouchRawXY+2)^0,f,c
 44845  00C144  0E0F               	movlw	15
 44846  00C146  1617               	andwf	(??_GetTouchRawXY+2)^0,f,c
 44847  00C148  5017               	movf	(??_GetTouchRawXY+2)^0,w,c
 44848  00C14A  2615               	addwf	??_GetTouchRawXY^0,f,c
 44849  00C14C  0E00               	movlw	0
 44850  00C14E  2216               	addwfc	(??_GetTouchRawXY+1)^0,f,c
 44851  00C150  5014               	movf	GetTouchRawXY@ty^0,w,c
 44852  00C152  6ED9               	movwf	fsr2l,c
 44853  00C154  6ADA               	clrf	fsr2h,c
 44854  00C156  C015  FFDE         	movff	??_GetTouchRawXY,postinc2
 44855  00C15A  C016  FFDD         	movff	??_GetTouchRawXY+1,postdec2
 44856                           
 44857                           ;TouchXT2046.c: 53: SPI1_ExchangeByte(0b10010011);
 44858  00C15E  0E93               	movlw	147
 44859  00C160  EC0D  F07B         	call	_SPI1_ExchangeByte
 44860                           
 44861                           ;TouchXT2046.c: 54: SPI1_ReadBlock(data, 2);
 44862  00C164  0E18               	movlw	low GetTouchRawXY@data
 44863  00C166  6E0F               	movwf	SPI1_ReadBlock@block^0,c
 44864  00C168  0E00               	movlw	0
 44865  00C16A  6E11               	movwf	(SPI1_ReadBlock@blockSize+1)^0,c
 44866  00C16C  0E02               	movlw	2
 44867  00C16E  6E10               	movwf	SPI1_ReadBlock@blockSize^0,c
 44868  00C170  ECD7  F078         	call	_SPI1_ReadBlock	;wreg free
 44869                           
 44870                           ;TouchXT2046.c: 55: *tx = data[0];
 44871  00C174  5018               	movf	GetTouchRawXY@data^0,w,c
 44872  00C176  6E15               	movwf	??_GetTouchRawXY^0,c
 44873  00C178  6A16               	clrf	(??_GetTouchRawXY+1)^0,c
 44874  00C17A  5013               	movf	GetTouchRawXY@tx^0,w,c
 44875  00C17C  6ED9               	movwf	fsr2l,c
 44876  00C17E  6ADA               	clrf	fsr2h,c
 44877  00C180  C015  FFDE         	movff	??_GetTouchRawXY,postinc2
 44878  00C184  C016  FFDD         	movff	??_GetTouchRawXY+1,postdec2
 44879                           
 44880                           ;TouchXT2046.c: 56: *tx = (*tx << 4) + ((data[1] >> 4) & 0x0f);
 44881  00C188  5013               	movf	GetTouchRawXY@tx^0,w,c
 44882  00C18A  6ED9               	movwf	fsr2l,c
 44883  00C18C  6ADA               	clrf	fsr2h,c
 44884  00C18E  CFDE F015          	movff	postinc2,??_GetTouchRawXY
 44885  00C192  CFDD F016          	movff	postdec2,??_GetTouchRawXY+1
 44886  00C196  3A15               	swapf	??_GetTouchRawXY^0,f,c
 44887  00C198  3A16               	swapf	(??_GetTouchRawXY+1)^0,f,c
 44888  00C19A  0EF0               	movlw	240
 44889  00C19C  1616               	andwf	(??_GetTouchRawXY+1)^0,f,c
 44890  00C19E  5015               	movf	??_GetTouchRawXY^0,w,c
 44891  00C1A0  0B0F               	andlw	15
 44892  00C1A2  1216               	iorwf	(??_GetTouchRawXY+1)^0,f,c
 44893  00C1A4  0EF0               	movlw	240
 44894  00C1A6  1615               	andwf	??_GetTouchRawXY^0,f,c
 44895  00C1A8  C019  F017         	movff	GetTouchRawXY@data+1,??_GetTouchRawXY+2
 44896  00C1AC  3A17               	swapf	(??_GetTouchRawXY+2)^0,f,c
 44897  00C1AE  0E0F               	movlw	15
 44898  00C1B0  1617               	andwf	(??_GetTouchRawXY+2)^0,f,c
 44899  00C1B2  0E0F               	movlw	15
 44900  00C1B4  1617               	andwf	(??_GetTouchRawXY+2)^0,f,c
 44901  00C1B6  5017               	movf	(??_GetTouchRawXY+2)^0,w,c
 44902  00C1B8  2615               	addwf	??_GetTouchRawXY^0,f,c
 44903  00C1BA  0E00               	movlw	0
 44904  00C1BC  2216               	addwfc	(??_GetTouchRawXY+1)^0,f,c
 44905  00C1BE  5013               	movf	GetTouchRawXY@tx^0,w,c
 44906  00C1C0  6ED9               	movwf	fsr2l,c
 44907  00C1C2  6ADA               	clrf	fsr2h,c
 44908  00C1C4  C015  FFDE         	movff	??_GetTouchRawXY,postinc2
 44909  00C1C8  C016  FFDD         	movff	??_GetTouchRawXY+1,postdec2
 44910  00C1CC  0012               	return		;funcret
 44911  00C1CE                     __end_of_GetTouchRawXY:
 44912                           	callstack 0
 44913                           
 44914 ;; *************** function _SPI1_ReadBlock *****************
 44915 ;; Defined at:
 44916 ;;		line 126 in file "mcc_generated_files/spi1.c"
 44917 ;; Parameters:    Size  Location     Type
 44918 ;;  block           1   14[COMRAM] PTR void 
 44919 ;;		 -> GetTouchRawXY@data(2), 
 44920 ;;  blockSize       2   15[COMRAM] unsigned int 
 44921 ;; Auto vars:     Size  Location     Type
 44922 ;;  data            1   17[COMRAM] PTR unsigned char 
 44923 ;;		 -> GetTouchRawXY@data(2), 
 44924 ;; Return value:  Size  Location     Type
 44925 ;;                  1    wreg      void 
 44926 ;; Registers used:
 44927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 44928 ;; Tracked objects:
 44929 ;;		On entry : 0/0
 44930 ;;		On exit  : 0/0
 44931 ;;		Unchanged: 0/0
 44932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44933 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44936 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 44937 ;;Total ram usage:        4 bytes
 44938 ;; Hardware stack levels used:    1
 44939 ;; Hardware stack levels required when called:    7
 44940 ;; This function calls:
 44941 ;;		_SPI1_ExchangeByte
 44942 ;; This function is called by:
 44943 ;;		_GetTouchRawXY
 44944 ;; This function uses a non-reentrant model
 44945 ;;
 44946                           
 44947                           	psect	text168
 44948  00F1AE                     __ptext168:
 44949                           	callstack 0
 44950  00F1AE                     _SPI1_ReadBlock:
 44951                           	callstack 20
 44952                           
 44953                           ;spi1.c: 128: uint8_t *data = block;
 44954                           
 44955                           ;incstack = 0
 44956  00F1AE  C00F  F012         	movff	SPI1_ReadBlock@block,SPI1_ReadBlock@data
 44957                           
 44958                           ;spi1.c: 129: while(blockSize--)
 44959  00F1B2  D008               	goto	l22199
 44960  00F1B4                     l22195:
 44961                           
 44962                           ;spi1.c: 130: {;spi1.c: 131: *data++ = SPI1_ExchangeByte(0);
 44963  00F1B4  5012               	movf	SPI1_ReadBlock@data^0,w,c
 44964  00F1B6  6ED9               	movwf	fsr2l,c
 44965  00F1B8  6ADA               	clrf	fsr2h,c
 44966  00F1BA  0E00               	movlw	0
 44967  00F1BC  EC0D  F07B         	call	_SPI1_ExchangeByte
 44968  00F1C0  6EDF               	movwf	indf2,c
 44969  00F1C2  2A12               	incf	SPI1_ReadBlock@data^0,f,c
 44970  00F1C4                     l22199:
 44971  00F1C4  0610               	decf	SPI1_ReadBlock@blockSize^0,f,c
 44972  00F1C6  A0D8               	btfss	status,0,c
 44973  00F1C8  0611               	decf	(SPI1_ReadBlock@blockSize+1)^0,f,c
 44974  00F1CA  2810               	incf	SPI1_ReadBlock@blockSize^0,w,c
 44975  00F1CC  E1F3               	bnz	l22195
 44976  00F1CE  2811               	incf	(SPI1_ReadBlock@blockSize+1)^0,w,c
 44977  00F1D0  B4D8               	btfsc	status,2,c
 44978  00F1D2  0012               	return	
 44979  00F1D4  D7EF               	goto	l22195
 44980  00F1D6                     __end_of_SPI1_ReadBlock:
 44981                           	callstack 0
 44982                           
 44983 ;; *************** function _SPI1_ExchangeByte *****************
 44984 ;; Defined at:
 44985 ;;		line 96 in file "mcc_generated_files/spi1.c"
 44986 ;; Parameters:    Size  Location     Type
 44987 ;;  data            1    wreg     unsigned char 
 44988 ;; Auto vars:     Size  Location     Type
 44989 ;;  data            1   13[COMRAM] unsigned char 
 44990 ;; Return value:  Size  Location     Type
 44991 ;;                  1    wreg      unsigned char 
 44992 ;; Registers used:
 44993 ;;		wreg, status,2
 44994 ;; Tracked objects:
 44995 ;;		On entry : 0/0
 44996 ;;		On exit  : 0/0
 44997 ;;		Unchanged: 0/0
 44998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 44999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45000 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45002 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45003 ;;Total ram usage:        1 bytes
 45004 ;; Hardware stack levels used:    1
 45005 ;; Hardware stack levels required when called:    6
 45006 ;; This function calls:
 45007 ;;		Nothing
 45008 ;; This function is called by:
 45009 ;;		_SPI1_ReadBlock
 45010 ;;		_write_command
 45011 ;;		_write_data
 45012 ;;		_glcd_init2
 45013 ;;		_GetTouchRawXY
 45014 ;;		_GetTouchLocation
 45015 ;;		_SPI1_WriteBlock
 45016 ;;		_SD_SendCmd
 45017 ;;		_SD_SPI_AsyncWriteTasks
 45018 ;;		_SD_SPI_AsyncReadTasks
 45019 ;;		_SD_SPI_DelayMilliseconds
 45020 ;;		_SD_SPI_MediaInitialize
 45021 ;; This function uses a non-reentrant model
 45022 ;;
 45023                           
 45024                           	psect	text169
 45025  00F61A                     __ptext169:
 45026                           	callstack 0
 45027  00F61A                     _SPI1_ExchangeByte:
 45028                           	callstack 22
 45029                           
 45030                           ;incstack = 0
 45031                           ;SPI1_ExchangeByte@data stored from wreg
 45032  00F61A  6E0E               	movwf	SPI1_ExchangeByte@data^0,c
 45033                           
 45034                           ;spi1.c: 98: SSP1BUF = data;
 45035  00F61C  C00E  FFC9         	movff	SPI1_ExchangeByte@data,4041	;volatile
 45036  00F620                     l1882:
 45037  00F620  A69E               	btfss	158,3,c	;volatile
 45038  00F622  D7FE               	goto	l1882
 45039                           
 45040                           ;spi1.c: 100: PIR1bits.SSP1IF = 0;
 45041  00F624  969E               	bcf	158,3,c	;volatile
 45042                           
 45043                           ;spi1.c: 101: return SSP1BUF;
 45044  00F626  50C9               	movf	201,w,c	;volatile
 45045  00F628  0012               	return		;funcret
 45046  00F62A                     __end_of_SPI1_ExchangeByte:
 45047                           	callstack 0
 45048                           
 45049 ;; *************** function _EPWM1_LoadDutyValue *****************
 45050 ;; Defined at:
 45051 ;;		line 90 in file "mcc_generated_files/epwm1.c"
 45052 ;; Parameters:    Size  Location     Type
 45053 ;;  dutyValue       2   13[COMRAM] unsigned int 
 45054 ;; Auto vars:     Size  Location     Type
 45055 ;;		None
 45056 ;; Return value:  Size  Location     Type
 45057 ;;                  1    wreg      void 
 45058 ;; Registers used:
 45059 ;;		wreg, status,2, status,0
 45060 ;; Tracked objects:
 45061 ;;		On entry : 3F/2
 45062 ;;		On exit  : 3F/2
 45063 ;;		Unchanged: 3F/0
 45064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45067 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45068 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45069 ;;Total ram usage:        4 bytes
 45070 ;; Hardware stack levels used:    1
 45071 ;; Hardware stack levels required when called:    6
 45072 ;; This function calls:
 45073 ;;		Nothing
 45074 ;; This function is called by:
 45075 ;;		_NormalProc
 45076 ;; This function uses a non-reentrant model
 45077 ;;
 45078                           
 45079                           	psect	text170
 45080  00EEA0                     __ptext170:
 45081                           	callstack 0
 45082  00EEA0                     _EPWM1_LoadDutyValue:
 45083                           	callstack 23
 45084                           
 45085                           ; BSR set to: 2
 45086                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
 45087                           
 45088                           ;incstack = 0
 45089  00EEA0  C00E  F010         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 45090  00EEA4  C00F  F011         	movff	EPWM1_LoadDutyValue@dutyValue+1,??_EPWM1_LoadDutyValue+1
 45091  00EEA8  90D8               	bcf	status,0,c
 45092  00EEAA  3211               	rrcf	(??_EPWM1_LoadDutyValue+1)^0,f,c
 45093  00EEAC  3210               	rrcf	??_EPWM1_LoadDutyValue^0,f,c
 45094  00EEAE  90D8               	bcf	status,0,c
 45095  00EEB0  3211               	rrcf	(??_EPWM1_LoadDutyValue+1)^0,f,c
 45096  00EEB2  3210               	rrcf	??_EPWM1_LoadDutyValue^0,f,c
 45097  00EEB4  5010               	movf	??_EPWM1_LoadDutyValue^0,w,c
 45098  00EEB6  6EBE               	movwf	190,c	;volatile
 45099                           
 45100                           ;epwm1.c: 96: CCP1CON = ((uint8_t)(CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4));
 45101  00EEB8  C00E  F010         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 45102  00EEBC  0E03               	movlw	3
 45103  00EEBE  1610               	andwf	??_EPWM1_LoadDutyValue^0,f,c
 45104  00EEC0  3A10               	swapf	??_EPWM1_LoadDutyValue^0,f,c
 45105  00EEC2  0EF0               	movlw	240
 45106  00EEC4  1610               	andwf	??_EPWM1_LoadDutyValue^0,f,c
 45107  00EEC6  50BD               	movf	189,w,c	;volatile
 45108  00EEC8  0BCF               	andlw	207
 45109  00EECA  1010               	iorwf	??_EPWM1_LoadDutyValue^0,w,c
 45110  00EECC  6EBD               	movwf	189,c	;volatile
 45111                           
 45112                           ; BSR set to: 2
 45113  00EECE  0012               	return		;funcret
 45114  00EED0                     __end_of_EPWM1_LoadDutyValue:
 45115                           	callstack 0
 45116                           
 45117 ;; *************** function _ButtonPush *****************
 45118 ;; Defined at:
 45119 ;;		line 371 in file "main.c"
 45120 ;; Parameters:    Size  Location     Type
 45121 ;;  x               2   13[COMRAM] unsigned int 
 45122 ;;  y               2   15[COMRAM] unsigned int 
 45123 ;;  btn             1   17[COMRAM] unsigned char 
 45124 ;; Auto vars:     Size  Location     Type
 45125 ;;  yy              2   22[COMRAM] int 
 45126 ;;  xx              2   20[COMRAM] int 
 45127 ;; Return value:  Size  Location     Type
 45128 ;;                  1    wreg      char 
 45129 ;; Registers used:
 45130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 45131 ;; Tracked objects:
 45132 ;;		On entry : 0/0
 45133 ;;		On exit  : 0/0
 45134 ;;		Unchanged: 0/0
 45135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45136 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45137 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45138 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45139 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45140 ;;Total ram usage:       11 bytes
 45141 ;; Hardware stack levels used:    1
 45142 ;; Hardware stack levels required when called:    6
 45143 ;; This function calls:
 45144 ;;		Nothing
 45145 ;; This function is called by:
 45146 ;;		_NormalProc
 45147 ;;		_ButtonCheck
 45148 ;; This function uses a non-reentrant model
 45149 ;;
 45150                           
 45151                           	psect	text171
 45152  00D668                     __ptext171:
 45153                           	callstack 0
 45154  00D668                     _ButtonPush:
 45155                           	callstack 22
 45156                           
 45157                           ;main.c: 372: int16_t xx, yy;;main.c: 374: xx = x - ButtonObj3[btn].x;
 45158                           
 45159                           ; BSR set to: 2
 45160                           ;incstack = 0
 45161  00D668  5012               	movf	ButtonPush@btn^0,w,c
 45162  00D66A  0D0A               	mullw	10
 45163  00D66C  0E00               	movlw	low _ButtonObj3
 45164  00D66E  24F3               	addwf	243,w,c
 45165  00D670  6ED9               	movwf	fsr2l,c
 45166  00D672  0E04               	movlw	high _ButtonObj3
 45167  00D674  20F4               	addwfc	prodh,w,c
 45168  00D676  6EDA               	movwf	fsr2h,c
 45169  00D678  CFDE F013          	movff	postinc2,??_ButtonPush
 45170  00D67C  CFDD F014          	movff	postdec2,??_ButtonPush+1
 45171  00D680  5013               	movf	??_ButtonPush^0,w,c
 45172  00D682  5C0E               	subwf	ButtonPush@x^0,w,c
 45173  00D684  6E15               	movwf	ButtonPush@xx^0,c
 45174  00D686  5014               	movf	(??_ButtonPush+1)^0,w,c
 45175  00D688  580F               	subwfb	(ButtonPush@x+1)^0,w,c
 45176  00D68A  6E16               	movwf	(ButtonPush@xx+1)^0,c
 45177                           
 45178                           ;main.c: 375: yy = y - ButtonObj3[btn].y;
 45179  00D68C  5012               	movf	ButtonPush@btn^0,w,c
 45180  00D68E  0D0A               	mullw	10
 45181  00D690  0E02               	movlw	low (_ButtonObj3+2)
 45182  00D692  24F3               	addwf	243,w,c
 45183  00D694  6ED9               	movwf	fsr2l,c
 45184  00D696  0E04               	movlw	high (_ButtonObj3+2)
 45185  00D698  20F4               	addwfc	prodh,w,c
 45186  00D69A  6EDA               	movwf	fsr2h,c
 45187  00D69C  CFDE F013          	movff	postinc2,??_ButtonPush
 45188  00D6A0  CFDD F014          	movff	postdec2,??_ButtonPush+1
 45189  00D6A4  5013               	movf	??_ButtonPush^0,w,c
 45190  00D6A6  5C10               	subwf	ButtonPush@y^0,w,c
 45191  00D6A8  6E17               	movwf	ButtonPush@yy^0,c
 45192  00D6AA  5014               	movf	(??_ButtonPush+1)^0,w,c
 45193  00D6AC  5811               	subwfb	(ButtonPush@y+1)^0,w,c
 45194  00D6AE  6E18               	movwf	(ButtonPush@yy+1)^0,c
 45195                           
 45196                           ;main.c: 376: if ((xx >= 0) && (xx < ButtonObj3[btn].xw)) {
 45197  00D6B0  BE16               	btfsc	(ButtonPush@xx+1)^0,7,c
 45198  00D6B2  D01F               	goto	l22989
 45199  00D6B4  5012               	movf	ButtonPush@btn^0,w,c
 45200  00D6B6  0D0A               	mullw	10
 45201  00D6B8  0E04               	movlw	low (_ButtonObj3+4)
 45202  00D6BA  24F3               	addwf	243,w,c
 45203  00D6BC  6ED9               	movwf	fsr2l,c
 45204  00D6BE  0E04               	movlw	high (_ButtonObj3+4)
 45205  00D6C0  20F4               	addwfc	prodh,w,c
 45206  00D6C2  6EDA               	movwf	fsr2h,c
 45207  00D6C4  50DE               	movf	postinc2,w,c
 45208  00D6C6  5C15               	subwf	ButtonPush@xx^0,w,c
 45209  00D6C8  50DE               	movf	postinc2,w,c
 45210  00D6CA  5816               	subwfb	(ButtonPush@xx+1)^0,w,c
 45211  00D6CC  A0D8               	btfss	status,0,c
 45212                           
 45213                           ;main.c: 377: if ((yy >= 0) && (yy < ButtonObj3[btn].yw)) {
 45214  00D6CE  BE18               	btfsc	(ButtonPush@yy+1)^0,7,c
 45215  00D6D0  D010               	goto	l22989
 45216  00D6D2  5012               	movf	ButtonPush@btn^0,w,c
 45217  00D6D4  0D0A               	mullw	10
 45218  00D6D6  0E06               	movlw	low (_ButtonObj3+6)
 45219  00D6D8  24F3               	addwf	243,w,c
 45220  00D6DA  6ED9               	movwf	fsr2l,c
 45221  00D6DC  0E04               	movlw	high (_ButtonObj3+6)
 45222  00D6DE  20F4               	addwfc	prodh,w,c
 45223  00D6E0  6EDA               	movwf	fsr2h,c
 45224  00D6E2  50DE               	movf	postinc2,w,c
 45225  00D6E4  5C17               	subwf	ButtonPush@yy^0,w,c
 45226  00D6E6  50DE               	movf	postinc2,w,c
 45227  00D6E8  5818               	subwfb	(ButtonPush@yy+1)^0,w,c
 45228  00D6EA  B0D8               	btfsc	status,0,c
 45229  00D6EC  D002               	goto	l22989
 45230                           
 45231                           ;main.c: 379: return 1;
 45232  00D6EE  0E01               	movlw	1
 45233  00D6F0  0012               	return	
 45234  00D6F2                     l22989:
 45235                           
 45236                           ;main.c: 380: };main.c: 381: };main.c: 382: return 0;
 45237  00D6F2  0E00               	movlw	0
 45238  00D6F4  0012               	return		;funcret
 45239  00D6F6                     __end_of_ButtonPush:
 45240                           	callstack 0
 45241                           
 45242 ;; *************** function _AlarmSoundOn *****************
 45243 ;; Defined at:
 45244 ;;		line 80 in file "AlarmSound.c"
 45245 ;; Parameters:    Size  Location     Type
 45246 ;;  sn              1    wreg     unsigned char 
 45247 ;; Auto vars:     Size  Location     Type
 45248 ;;  sn              1   15[COMRAM] unsigned char 
 45249 ;; Return value:  Size  Location     Type
 45250 ;;                  1    wreg      void 
 45251 ;; Registers used:
 45252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 45253 ;; Tracked objects:
 45254 ;;		On entry : 0/2
 45255 ;;		On exit  : 0/0
 45256 ;;		Unchanged: 0/0
 45257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45260 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45261 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45262 ;;Total ram usage:        3 bytes
 45263 ;; Hardware stack levels used:    1
 45264 ;; Hardware stack levels required when called:    7
 45265 ;; This function calls:
 45266 ;;		_TMR0_Reload
 45267 ;;		_TMR0_StartTimer
 45268 ;;		_TMR2_StartTimer
 45269 ;; This function is called by:
 45270 ;;		_NormalProc
 45271 ;;		_TouchAdjust
 45272 ;;		_main
 45273 ;; This function uses a non-reentrant model
 45274 ;;
 45275                           
 45276                           	psect	text172
 45277  00E7BC                     __ptext172:
 45278                           	callstack 0
 45279  00E7BC                     _AlarmSoundOn:
 45280                           	callstack 22
 45281                           
 45282                           ;incstack = 0
 45283                           ;AlarmSoundOn@sn stored from wreg
 45284  00E7BC  6E10               	movwf	AlarmSoundOn@sn^0,c
 45285                           
 45286                           ;AlarmSound.c: 82: if (SoundDataPos != 0) return;
 45287  00E7BE  5049               	movf	_SoundDataPos^0,w,c
 45288  00E7C0  A4D8               	btfss	status,2,c
 45289  00E7C2  0012               	return	
 45290                           
 45291                           ;AlarmSound.c: 84: SoundNum = sn;
 45292  00E7C4  C010  F048         	movff	AlarmSoundOn@sn,_SoundNum
 45293                           
 45294                           ;AlarmSound.c: 85: SoundDataPos = 1;
 45295  00E7C8  0E01               	movlw	1
 45296  00E7CA  6E49               	movwf	_SoundDataPos^0,c
 45297                           
 45298                           ;AlarmSound.c: 86: SoundCount = SoundData[SoundNum][SoundDataPos];
 45299  00E7CC  5048               	movf	_SoundNum^0,w,c
 45300  00E7CE  0D07               	mullw	7
 45301  00E7D0  0EBE               	movlw	low _SoundData
 45302  00E7D2  6E0E               	movwf	??_AlarmSoundOn^0,c
 45303  00E7D4  0E04               	movlw	high _SoundData
 45304  00E7D6  6E0F               	movwf	(??_AlarmSoundOn+1)^0,c
 45305  00E7D8  50F3               	movf	243,w,c
 45306  00E7DA  260E               	addwf	??_AlarmSoundOn^0,f,c
 45307  00E7DC  50F4               	movf	244,w,c
 45308  00E7DE  220F               	addwfc	(??_AlarmSoundOn+1)^0,f,c
 45309  00E7E0  5049               	movf	_SoundDataPos^0,w,c
 45310  00E7E2  240E               	addwf	??_AlarmSoundOn^0,w,c
 45311  00E7E4  6ED9               	movwf	fsr2l,c
 45312  00E7E6  0E00               	movlw	0
 45313  00E7E8  200F               	addwfc	(??_AlarmSoundOn+1)^0,w,c
 45314  00E7EA  6EDA               	movwf	fsr2h,c
 45315  00E7EC  50DF               	movf	indf2,w,c
 45316  00E7EE  0103               	movlb	3	; () banked
 45317  00E7F0  6F9C               	movwf	_SoundCount& (0+255),b
 45318                           
 45319                           ; BSR set to: 3
 45320                           ;AlarmSound.c: 87: SoundTime = 0;
 45321  00E7F2  0E00               	movlw	0
 45322  00E7F4  6F75               	movwf	(_SoundTime+1)& (0+255),b
 45323  00E7F6  0E00               	movlw	0
 45324  00E7F8  6F74               	movwf	_SoundTime& (0+255),b
 45325                           
 45326                           ; BSR set to: 3
 45327  00E7FA  9693               	bcf	147,3,c	;volatile
 45328                           
 45329                           ; BSR set to: 3
 45330                           ;AlarmSound.c: 90: TMR2_StartTimer();
 45331  00E7FC  EC01  F07C         	call	_TMR2_StartTimer	;wreg free
 45332                           
 45333                           ; BSR set to: 3
 45334                           ;AlarmSound.c: 91: TMR0_Reload();
 45335  00E800  EC85  F07B         	call	_TMR0_Reload	;wreg free
 45336                           
 45337                           ; BSR set to: 3
 45338                           ;AlarmSound.c: 92: TMR0_StartTimer();
 45339  00E804  EC03  F07C         	call	_TMR0_StartTimer	;wreg free
 45340  00E808  0012               	return		;funcret
 45341  00E80A                     __end_of_AlarmSoundOn:
 45342                           	callstack 0
 45343                           
 45344 ;; *************** function _TMR2_StartTimer *****************
 45345 ;; Defined at:
 45346 ;;		line 79 in file "mcc_generated_files/tmr2.c"
 45347 ;; Parameters:    Size  Location     Type
 45348 ;;		None
 45349 ;; Auto vars:     Size  Location     Type
 45350 ;;		None
 45351 ;; Return value:  Size  Location     Type
 45352 ;;                  1    wreg      void 
 45353 ;; Registers used:
 45354 ;;		None
 45355 ;; Tracked objects:
 45356 ;;		On entry : 3F/3
 45357 ;;		On exit  : 3F/3
 45358 ;;		Unchanged: 3E/0
 45359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45364 ;;Total ram usage:        0 bytes
 45365 ;; Hardware stack levels used:    1
 45366 ;; Hardware stack levels required when called:    6
 45367 ;; This function calls:
 45368 ;;		Nothing
 45369 ;; This function is called by:
 45370 ;;		_AlarmSoundOn
 45371 ;; This function uses a non-reentrant model
 45372 ;;
 45373                           
 45374                           	psect	text173
 45375  00F802                     __ptext173:
 45376                           	callstack 0
 45377  00F802                     _TMR2_StartTimer:
 45378                           	callstack 22
 45379                           
 45380                           ; BSR set to: 3
 45381                           ;tmr2.c: 82: T2CONbits.TMR2ON = 1;
 45382                           
 45383                           ;incstack = 0
 45384  00F802  84BA               	bsf	186,2,c	;volatile
 45385                           
 45386                           ; BSR set to: 3
 45387  00F804  0012               	return		;funcret
 45388  00F806                     __end_of_TMR2_StartTimer:
 45389                           	callstack 0
 45390                           
 45391 ;; *************** function _TMR0_StartTimer *****************
 45392 ;; Defined at:
 45393 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 45394 ;; Parameters:    Size  Location     Type
 45395 ;;		None
 45396 ;; Auto vars:     Size  Location     Type
 45397 ;;		None
 45398 ;; Return value:  Size  Location     Type
 45399 ;;                  1    wreg      void 
 45400 ;; Registers used:
 45401 ;;		None
 45402 ;; Tracked objects:
 45403 ;;		On entry : 3F/3
 45404 ;;		On exit  : 3F/3
 45405 ;;		Unchanged: 3E/0
 45406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45411 ;;Total ram usage:        0 bytes
 45412 ;; Hardware stack levels used:    1
 45413 ;; Hardware stack levels required when called:    6
 45414 ;; This function calls:
 45415 ;;		Nothing
 45416 ;; This function is called by:
 45417 ;;		_AlarmSoundOn
 45418 ;; This function uses a non-reentrant model
 45419 ;;
 45420                           
 45421                           	psect	text174
 45422  00F806                     __ptext174:
 45423                           	callstack 0
 45424  00F806                     _TMR0_StartTimer:
 45425                           	callstack 22
 45426                           
 45427                           ; BSR set to: 3
 45428                           ;tmr0.c: 100: T0CONbits.TMR0ON = 1;
 45429                           
 45430                           ; BSR set to: 3
 45431                           ;incstack = 0
 45432  00F806  8ED5               	bsf	213,7,c	;volatile
 45433                           
 45434                           ; BSR set to: 3
 45435  00F808  0012               	return		;funcret
 45436  00F80A                     __end_of_TMR0_StartTimer:
 45437                           	callstack 0
 45438                           
 45439 ;; *************** function _TMR0_Reload *****************
 45440 ;; Defined at:
 45441 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 45442 ;; Parameters:    Size  Location     Type
 45443 ;;		None
 45444 ;; Auto vars:     Size  Location     Type
 45445 ;;		None
 45446 ;; Return value:  Size  Location     Type
 45447 ;;                  1    wreg      void 
 45448 ;; Registers used:
 45449 ;;		None
 45450 ;; Tracked objects:
 45451 ;;		On entry : 3F/3
 45452 ;;		On exit  : 3F/3
 45453 ;;		Unchanged: 3E/0
 45454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45459 ;;Total ram usage:        0 bytes
 45460 ;; Hardware stack levels used:    1
 45461 ;; Hardware stack levels required when called:    6
 45462 ;; This function calls:
 45463 ;;		Nothing
 45464 ;; This function is called by:
 45465 ;;		_AlarmSoundOn
 45466 ;; This function uses a non-reentrant model
 45467 ;;
 45468                           
 45469                           	psect	text175
 45470  00F70A                     __ptext175:
 45471                           	callstack 0
 45472  00F70A                     _TMR0_Reload:
 45473                           	callstack 22
 45474                           
 45475                           ; BSR set to: 3
 45476                           ;tmr0.c: 132: TMR0H = timer0ReloadVal >> 8;
 45477                           
 45478                           ; BSR set to: 3
 45479                           ;incstack = 0
 45480  00F70A  C047  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 45481                           
 45482                           ;tmr0.c: 133: TMR0L = (uint8_t) timer0ReloadVal;
 45483  00F70E  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 45484                           
 45485                           ; BSR set to: 3
 45486  00F712  0012               	return		;funcret
 45487  00F714                     __end_of_TMR0_Reload:
 45488                           	callstack 0
 45489                           
 45490 ;; *************** function _ADC_GetConversion *****************
 45491 ;; Defined at:
 45492 ;;		line 110 in file "mcc_generated_files/adc.c"
 45493 ;; Parameters:    Size  Location     Type
 45494 ;;  channel         1    wreg     enum E5611
 45495 ;; Auto vars:     Size  Location     Type
 45496 ;;  channel         1   17[COMRAM] enum E5611
 45497 ;; Return value:  Size  Location     Type
 45498 ;;                  2   13[COMRAM] unsigned int 
 45499 ;; Registers used:
 45500 ;;		wreg, status,2, status,0
 45501 ;; Tracked objects:
 45502 ;;		On entry : 0/1
 45503 ;;		On exit  : 0/0
 45504 ;;		Unchanged: 0/0
 45505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45506 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45507 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45508 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45509 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45510 ;;Total ram usage:        5 bytes
 45511 ;; Hardware stack levels used:    1
 45512 ;; Hardware stack levels required when called:    6
 45513 ;; This function calls:
 45514 ;;		Nothing
 45515 ;; This function is called by:
 45516 ;;		_NormalProc
 45517 ;; This function uses a non-reentrant model
 45518 ;;
 45519                           
 45520                           	psect	text176
 45521  00EED0                     __ptext176:
 45522                           	callstack 0
 45523  00EED0                     _ADC_GetConversion:
 45524                           	callstack 23
 45525                           
 45526                           ; BSR set to: 3
 45527                           ;incstack = 0
 45528                           ;ADC_GetConversion@channel stored from wreg
 45529  00EED0  6E12               	movwf	ADC_GetConversion@channel^0,c
 45530                           
 45531                           ;adc.c: 113: ADCON0bits.CHS = channel;
 45532  00EED2  C012  F010         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 45533  00EED6  4610               	rlncf	??_ADC_GetConversion^0,f,c
 45534  00EED8  4610               	rlncf	??_ADC_GetConversion^0,f,c
 45535  00EEDA  50C2               	movf	194,w,c	;volatile
 45536  00EEDC  1810               	xorwf	??_ADC_GetConversion^0,w,c
 45537  00EEDE  0B83               	andlw	-125
 45538  00EEE0  1810               	xorwf	??_ADC_GetConversion^0,w,c
 45539  00EEE2  6EC2               	movwf	194,c	;volatile
 45540                           
 45541                           ;adc.c: 116: ADCON0bits.ADON = 1;
 45542  00EEE4  80C2               	bsf	194,0,c	;volatile
 45543                           
 45544                           ;adc.c: 119: ADCON0bits.GO_nDONE = 1;
 45545  00EEE6  82C2               	bsf	194,1,c	;volatile
 45546  00EEE8                     l1156:
 45547  00EEE8  B2C2               	btfsc	194,1,c	;volatile
 45548  00EEEA  D7FE               	goto	l1156
 45549                           
 45550                           ;adc.c: 124: };adc.c: 127: return ((adc_result_t)((ADRESH << 8) + ADRESL));
 45551  00EEEC  50C4               	movf	196,w,c	;volatile
 45552  00EEEE  6E11               	movwf	(??_ADC_GetConversion+1)^0,c
 45553  00EEF0  6A10               	clrf	??_ADC_GetConversion^0,c
 45554  00EEF2  50C3               	movf	195,w,c	;volatile
 45555  00EEF4  2410               	addwf	??_ADC_GetConversion^0,w,c
 45556  00EEF6  6E0E               	movwf	?_ADC_GetConversion^0,c
 45557  00EEF8  0E00               	movlw	0
 45558  00EEFA  2011               	addwfc	(??_ADC_GetConversion+1)^0,w,c
 45559  00EEFC  6E0F               	movwf	(?_ADC_GetConversion+1)^0,c
 45560  00EEFE  0012               	return		;funcret
 45561  00EF00                     __end_of_ADC_GetConversion:
 45562                           	callstack 0
 45563                           
 45564 ;; *************** function _GPRMCdatacheck *****************
 45565 ;; Defined at:
 45566 ;;		line 898 in file "main.c"
 45567 ;; Parameters:    Size  Location     Type
 45568 ;;		None
 45569 ;; Auto vars:     Size  Location     Type
 45570 ;;  str           100    0        unsigned char [100]
 45571 ;;  p               2   54[BANK0 ] PTR unsigned char 
 45572 ;;		 -> HEX(17), Buffer(100), NULL(0), 
 45573 ;;  hh              1   53[BANK0 ] char 
 45574 ;;  jj              1   52[BANK0 ] unsigned char 
 45575 ;;  TZ              1    0        char 
 45576 ;; Return value:  Size  Location     Type
 45577 ;;                  1    wreg      unsigned char 
 45578 ;; Registers used:
 45579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 45580 ;; Tracked objects:
 45581 ;;		On entry : 3F/2
 45582 ;;		On exit  : 0/0
 45583 ;;		Unchanged: 0/0
 45584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 45585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45586 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45587 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45588 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 45589 ;;Total ram usage:       10 bytes
 45590 ;; Hardware stack levels used:    1
 45591 ;; Hardware stack levels required when called:   16
 45592 ;; This function calls:
 45593 ;;		_Bcd2Hex
 45594 ;;		_CheckCheckSum
 45595 ;;		_Hex2Bcd
 45596 ;;		_RTC_setDate
 45597 ;;		_RTC_setTime
 45598 ;;		_dateErrorCheck
 45599 ;;		_strchr
 45600 ;;		_strncmp
 45601 ;; This function is called by:
 45602 ;;		_main
 45603 ;; This function uses a non-reentrant model
 45604 ;;
 45605                           
 45606                           	psect	text177
 45607  0089E8                     __ptext177:
 45608                           	callstack 0
 45609  0089E8                     _GPRMCdatacheck:
 45610                           	callstack 14
 45611                           
 45612                           ; BSR set to: 2
 45613                           ;main.c: 899: uint8_t jj;;main.c: 900: char *p;;main.c: 901: char str[100];;main.c: 904:
      +                           if (strncmp(Buffer, "$GPRMC", 6) != 0) return 1;
 45614                           
 45615                           ;incstack = 0
 45616  0089E8  0E40               	movlw	low _Buffer
 45617  0089EA  6E0E               	movwf	strncmp@s1^0,c
 45618  0089EC  0E06               	movlw	high _Buffer
 45619  0089EE  6E0F               	movwf	(strncmp@s1+1)^0,c
 45620  0089F0  0ECD               	movlw	low STR_15
 45621  0089F2  6E10               	movwf	strncmp@s2^0,c
 45622  0089F4  0EFF               	movlw	high STR_15
 45623  0089F6  6E11               	movwf	(strncmp@s2+1)^0,c
 45624  0089F8  0E00               	movlw	0
 45625  0089FA  6E13               	movwf	(strncmp@len+1)^0,c
 45626  0089FC  0E06               	movlw	6
 45627  0089FE  6E12               	movwf	strncmp@len^0,c
 45628  008A00  EC16  F06E         	call	_strncmp	;wreg free
 45629  008A04  500E               	movf	?_strncmp^0,w,c
 45630  008A06  100F               	iorwf	(?_strncmp+1)^0,w,c
 45631  008A08  B4D8               	btfsc	status,2,c
 45632  008A0A  D002               	goto	l24645
 45633  008A0C                     u27950:
 45634  008A0C  0E01               	movlw	1
 45635  008A0E  0012               	return	
 45636  008A10                     l24645:
 45637                           
 45638                           ; BSR set to: 2
 45639                           ;main.c: 907: if (CheckCheckSum(Buffer)) {
 45640  008A10  0E40               	movlw	low _Buffer
 45641  008A12  6E14               	movwf	CheckCheckSum@buf^0,c
 45642  008A14  0E06               	movlw	high _Buffer
 45643  008A16  6E15               	movwf	(CheckCheckSum@buf+1)^0,c
 45644  008A18  EC81  F057         	call	_CheckCheckSum	;wreg free
 45645  008A1C  0900               	iorlw	0
 45646  008A1E  A4D8               	btfss	status,2,c
 45647  008A20  D7F5               	goto	u27950
 45648                           
 45649                           ;main.c: 912: };main.c: 918: DateTime[2] = ((Buffer[7]-'0')<<4) + (Buffer[8]-'0');
 45650  008A22  0106               	movlb	6	; () banked
 45651  008A24  5147               	movf	(_Buffer+7)& (0+255),w,b
 45652  008A26  0D10               	mullw	16
 45653  008A28  50F3               	movf	243,w,c
 45654  008A2A  2548               	addwf	(_Buffer+8)& (0+255),w,b
 45655  008A2C  0FD0               	addlw	208
 45656  008A2E  0102               	movlb	2	; () banked
 45657  008A30  6FF8               	movwf	(_DateTime+2)& (0+255),b
 45658                           
 45659                           ;main.c: 919: DateTime[1] = ((Buffer[9]-'0')<<4) + (Buffer[10]-'0');
 45660  008A32  0106               	movlb	6	; () banked
 45661  008A34  5149               	movf	(_Buffer+9)& (0+255),w,b
 45662  008A36  0D10               	mullw	16
 45663  008A38  50F3               	movf	243,w,c
 45664  008A3A  254A               	addwf	(_Buffer+10)& (0+255),w,b
 45665  008A3C  0FD0               	addlw	208
 45666  008A3E  0102               	movlb	2	; () banked
 45667  008A40  6FF7               	movwf	(_DateTime+1)& (0+255),b
 45668                           
 45669                           ;main.c: 920: DateTime[0] = ((Buffer[11]-'0')<<4) + (Buffer[12]-'0');
 45670  008A42  0106               	movlb	6	; () banked
 45671  008A44  514B               	movf	(_Buffer+11)& (0+255),w,b
 45672  008A46  0D10               	mullw	16
 45673  008A48  50F3               	movf	243,w,c
 45674  008A4A  254C               	addwf	(_Buffer+12)& (0+255),w,b
 45675  008A4C  0FD0               	addlw	208
 45676  008A4E  0102               	movlb	2	; () banked
 45677  008A50  6FF6               	movwf	_DateTime& (0+255),b
 45678                           
 45679                           ; BSR set to: 2
 45680                           ;main.c: 923: p = strchr(Buffer, '$');
 45681  008A52  0E40               	movlw	low _Buffer
 45682  008A54  6E0E               	movwf	strchr@ptr^0,c
 45683  008A56  0E06               	movlw	high _Buffer
 45684  008A58  6E0F               	movwf	(strchr@ptr+1)^0,c
 45685  008A5A  0E00               	movlw	0
 45686  008A5C  6E11               	movwf	(strchr@chr+1)^0,c
 45687  008A5E  0E24               	movlw	36
 45688  008A60  6E10               	movwf	strchr@chr^0,c
 45689  008A62  ECFF  F06E         	call	_strchr	;wreg free
 45690  008A66  C00E  F096         	movff	?_strchr,GPRMCdatacheck@p
 45691  008A6A  C00F  F097         	movff	?_strchr+1,GPRMCdatacheck@p+1
 45692                           
 45693                           ;main.c: 924: for (jj = 0; jj < 9; jj++) {
 45694  008A6E  0E00               	movlw	0
 45695  008A70  0100               	movlb	0	; () banked
 45696  008A72  6F94               	movwf	GPRMCdatacheck@jj& (0+255),b
 45697  008A74                     l24661:
 45698                           
 45699                           ; BSR set to: 0
 45700                           ;main.c: 925: p = strchr(p+1, ',');
 45701  008A74  0E01               	movlw	1
 45702  008A76  2596               	addwf	GPRMCdatacheck@p& (0+255),w,b
 45703  008A78  6E0E               	movwf	strchr@ptr^0,c
 45704  008A7A  0E00               	movlw	0
 45705  008A7C  2197               	addwfc	(GPRMCdatacheck@p+1)& (0+255),w,b
 45706  008A7E  6E0F               	movwf	(strchr@ptr+1)^0,c
 45707  008A80  0E00               	movlw	0
 45708  008A82  6E11               	movwf	(strchr@chr+1)^0,c
 45709  008A84  0E2C               	movlw	44
 45710  008A86  6E10               	movwf	strchr@chr^0,c
 45711  008A88  ECFF  F06E         	call	_strchr	;wreg free
 45712  008A8C  C00E  F096         	movff	?_strchr,GPRMCdatacheck@p
 45713  008A90  C00F  F097         	movff	?_strchr+1,GPRMCdatacheck@p+1
 45714                           
 45715                           ;main.c: 926: if (p == (0)) return 1;
 45716  008A94  0100               	movlb	0	; () banked
 45717  008A96  5196               	movf	GPRMCdatacheck@p& (0+255),w,b
 45718  008A98  1197               	iorwf	(GPRMCdatacheck@p+1)& (0+255),w,b
 45719  008A9A  B4D8               	btfsc	status,2,c
 45720  008A9C  D7B7               	goto	u27950
 45721                           
 45722                           ; BSR set to: 0
 45723  008A9E  2B94               	incf	GPRMCdatacheck@jj& (0+255),f,b
 45724                           
 45725                           ; BSR set to: 0
 45726  008AA0  0E08               	movlw	8
 45727  008AA2  6594               	cpfsgt	GPRMCdatacheck@jj& (0+255),b
 45728  008AA4  D7E7               	goto	l24661
 45729                           
 45730                           ; BSR set to: 0
 45731                           ;main.c: 927: };main.c: 928: DateTime[4] = ((p[1]-'0')<<4) + (p[2]-'0');
 45732  008AA6  0E02               	movlw	2
 45733  008AA8  2596               	addwf	GPRMCdatacheck@p& (0+255),w,b
 45734  008AAA  6F8E               	movwf	??_GPRMCdatacheck& (0+255),b
 45735  008AAC  0E00               	movlw	0
 45736  008AAE  2197               	addwfc	(GPRMCdatacheck@p+1)& (0+255),w,b
 45737  008AB0  6F8F               	movwf	(??_GPRMCdatacheck+1)& (0+255),b
 45738  008AB2  C08E  FFF6         	movff	??_GPRMCdatacheck,tblptrl
 45739  008AB6  C08F  FFF7         	movff	??_GPRMCdatacheck+1,tblptrh
 45740  008ABA  0E00               	movlw	low (__mediumconst shr (0+16))
 45741  008ABC  6EF8               	movwf	tblptru,c
 45742  008ABE  0E0F               	movlw	(high __ramtop+-1)
 45743  008AC0  64F7               	cpfsgt	tblptrh,c
 45744  008AC2  D003               	bra	u27997
 45745  008AC4  0008               	tblrd		*
 45746  008AC6  50F5               	movf	tablat,w,c
 45747  008AC8  D005               	bra	u27990
 45748  008ACA                     u27997:
 45749  008ACA  CFF6 FFE9          	movff	tblptrl,fsr0l
 45750  008ACE  CFF7 FFEA          	movff	tblptrh,fsr0h
 45751  008AD2  50EF               	movf	indf0,w,c
 45752  008AD4                     u27990:
 45753  008AD4  0100               	movlb	0	; () banked
 45754  008AD6  6F90               	movwf	(??_GPRMCdatacheck+2)& (0+255),b
 45755  008AD8  0E01               	movlw	1
 45756  008ADA  2596               	addwf	GPRMCdatacheck@p& (0+255),w,b
 45757  008ADC  6F91               	movwf	(??_GPRMCdatacheck+3)& (0+255),b
 45758  008ADE  0E00               	movlw	0
 45759  008AE0  2197               	addwfc	(GPRMCdatacheck@p+1)& (0+255),w,b
 45760  008AE2  6F92               	movwf	(??_GPRMCdatacheck+4)& (0+255),b
 45761  008AE4  C091  FFF6         	movff	??_GPRMCdatacheck+3,tblptrl
 45762  008AE8  C092  FFF7         	movff	??_GPRMCdatacheck+4,tblptrh
 45763  008AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 45764  008AEE  6EF8               	movwf	tblptru,c
 45765  008AF0  0E0F               	movlw	(high __ramtop+-1)
 45766  008AF2  64F7               	cpfsgt	tblptrh,c
 45767  008AF4  D003               	bra	u28007
 45768  008AF6  0008               	tblrd		*
 45769  008AF8  50F5               	movf	tablat,w,c
 45770  008AFA  D005               	bra	u28000
 45771  008AFC                     u28007:
 45772  008AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 45773  008B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 45774  008B04  50EF               	movf	indf0,w,c
 45775  008B06                     u28000:
 45776  008B06  0D10               	mullw	16
 45777  008B08  50F3               	movf	243,w,c
 45778  008B0A  0100               	movlb	0	; () banked
 45779  008B0C  2590               	addwf	(??_GPRMCdatacheck+2)& (0+255),w,b
 45780  008B0E  0FD0               	addlw	208
 45781  008B10  0102               	movlb	2	; () banked
 45782  008B12  6FFA               	movwf	(_DateTime+4)& (0+255),b
 45783                           
 45784                           ;main.c: 929: DateTime[5] = ((p[3]-'0')<<4) + (p[4]-'0');
 45785  008B14  0E04               	movlw	4
 45786  008B16  0100               	movlb	0	; () banked
 45787  008B18  2596               	addwf	GPRMCdatacheck@p& (0+255),w,b
 45788  008B1A  6F8E               	movwf	??_GPRMCdatacheck& (0+255),b
 45789  008B1C  0E00               	movlw	0
 45790  008B1E  2197               	addwfc	(GPRMCdatacheck@p+1)& (0+255),w,b
 45791  008B20  6F8F               	movwf	(??_GPRMCdatacheck+1)& (0+255),b
 45792  008B22  C08E  FFF6         	movff	??_GPRMCdatacheck,tblptrl
 45793  008B26  C08F  FFF7         	movff	??_GPRMCdatacheck+1,tblptrh
 45794  008B2A  0E00               	movlw	low (__mediumconst shr (0+16))
 45795  008B2C  6EF8               	movwf	tblptru,c
 45796  008B2E  0E0F               	movlw	(high __ramtop+-1)
 45797  008B30  64F7               	cpfsgt	tblptrh,c
 45798  008B32  D003               	bra	u28017
 45799  008B34  0008               	tblrd		*
 45800  008B36  50F5               	movf	tablat,w,c
 45801  008B38  D005               	bra	u28010
 45802  008B3A                     u28017:
 45803  008B3A  CFF6 FFE9          	movff	tblptrl,fsr0l
 45804  008B3E  CFF7 FFEA          	movff	tblptrh,fsr0h
 45805  008B42  50EF               	movf	indf0,w,c
 45806  008B44                     u28010:
 45807  008B44  0100               	movlb	0	; () banked
 45808  008B46  6F90               	movwf	(??_GPRMCdatacheck+2)& (0+255),b
 45809  008B48  0E03               	movlw	3
 45810  008B4A  2596               	addwf	GPRMCdatacheck@p& (0+255),w,b
 45811  008B4C  6F91               	movwf	(??_GPRMCdatacheck+3)& (0+255),b
 45812  008B4E  0E00               	movlw	0
 45813  008B50  2197               	addwfc	(GPRMCdatacheck@p+1)& (0+255),w,b
 45814  008B52  6F92               	movwf	(??_GPRMCdatacheck+4)& (0+255),b
 45815  008B54  C091  FFF6         	movff	??_GPRMCdatacheck+3,tblptrl
 45816  008B58  C092  FFF7         	movff	??_GPRMCdatacheck+4,tblptrh
 45817  008B5C  0E00               	movlw	low (__mediumconst shr (0+16))
 45818  008B5E  6EF8               	movwf	tblptru,c
 45819  008B60  0E0F               	movlw	(high __ramtop+-1)
 45820  008B62  64F7               	cpfsgt	tblptrh,c
 45821  008B64  D003               	bra	u28027
 45822  008B66  0008               	tblrd		*
 45823  008B68  50F5               	movf	tablat,w,c
 45824  008B6A  D005               	bra	u28020
 45825  008B6C                     u28027:
 45826  008B6C  CFF6 FFE9          	movff	tblptrl,fsr0l
 45827  008B70  CFF7 FFEA          	movff	tblptrh,fsr0h
 45828  008B74  50EF               	movf	indf0,w,c
 45829  008B76                     u28020:
 45830  008B76  0D10               	mullw	16
 45831  008B78  50F3               	movf	243,w,c
 45832  008B7A  0100               	movlb	0	; () banked
 45833  008B7C  2590               	addwf	(??_GPRMCdatacheck+2)& (0+255),w,b
 45834  008B7E  0FD0               	addlw	208
 45835  008B80  0102               	movlb	2	; () banked
 45836  008B82  6FFB               	movwf	(_DateTime+5)& (0+255),b
 45837                           
 45838                           ;main.c: 930: DateTime[6] = ((p[5]-'0')<<4) + (p[6]-'0');
 45839  008B84  0E06               	movlw	6
 45840  008B86  0100               	movlb	0	; () banked
 45841  008B88  2596               	addwf	GPRMCdatacheck@p& (0+255),w,b
 45842  008B8A  6F8E               	movwf	??_GPRMCdatacheck& (0+255),b
 45843  008B8C  0E00               	movlw	0
 45844  008B8E  2197               	addwfc	(GPRMCdatacheck@p+1)& (0+255),w,b
 45845  008B90  6F8F               	movwf	(??_GPRMCdatacheck+1)& (0+255),b
 45846  008B92  C08E  FFF6         	movff	??_GPRMCdatacheck,tblptrl
 45847  008B96  C08F  FFF7         	movff	??_GPRMCdatacheck+1,tblptrh
 45848  008B9A  0E00               	movlw	low (__mediumconst shr (0+16))
 45849  008B9C  6EF8               	movwf	tblptru,c
 45850  008B9E  0E0F               	movlw	(high __ramtop+-1)
 45851  008BA0  64F7               	cpfsgt	tblptrh,c
 45852  008BA2  D003               	bra	u28037
 45853  008BA4  0008               	tblrd		*
 45854  008BA6  50F5               	movf	tablat,w,c
 45855  008BA8  D005               	bra	u28030
 45856  008BAA                     u28037:
 45857  008BAA  CFF6 FFE9          	movff	tblptrl,fsr0l
 45858  008BAE  CFF7 FFEA          	movff	tblptrh,fsr0h
 45859  008BB2  50EF               	movf	indf0,w,c
 45860  008BB4                     u28030:
 45861  008BB4  0100               	movlb	0	; () banked
 45862  008BB6  6F90               	movwf	(??_GPRMCdatacheck+2)& (0+255),b
 45863  008BB8  0E05               	movlw	5
 45864  008BBA  2596               	addwf	GPRMCdatacheck@p& (0+255),w,b
 45865  008BBC  6F91               	movwf	(??_GPRMCdatacheck+3)& (0+255),b
 45866  008BBE  0E00               	movlw	0
 45867  008BC0  2197               	addwfc	(GPRMCdatacheck@p+1)& (0+255),w,b
 45868  008BC2  6F92               	movwf	(??_GPRMCdatacheck+4)& (0+255),b
 45869  008BC4  C091  FFF6         	movff	??_GPRMCdatacheck+3,tblptrl
 45870  008BC8  C092  FFF7         	movff	??_GPRMCdatacheck+4,tblptrh
 45871  008BCC  0E00               	movlw	low (__mediumconst shr (0+16))
 45872  008BCE  6EF8               	movwf	tblptru,c
 45873  008BD0  0E0F               	movlw	(high __ramtop+-1)
 45874  008BD2  64F7               	cpfsgt	tblptrh,c
 45875  008BD4  D003               	bra	u28047
 45876  008BD6  0008               	tblrd		*
 45877  008BD8  50F5               	movf	tablat,w,c
 45878  008BDA  D005               	bra	u28040
 45879  008BDC                     u28047:
 45880  008BDC  CFF6 FFE9          	movff	tblptrl,fsr0l
 45881  008BE0  CFF7 FFEA          	movff	tblptrh,fsr0h
 45882  008BE4  50EF               	movf	indf0,w,c
 45883  008BE6                     u28040:
 45884  008BE6  0D10               	mullw	16
 45885  008BE8  50F3               	movf	243,w,c
 45886  008BEA  0100               	movlb	0	; () banked
 45887  008BEC  2590               	addwf	(??_GPRMCdatacheck+2)& (0+255),w,b
 45888  008BEE  0FD0               	addlw	208
 45889  008BF0  0102               	movlb	2	; () banked
 45890  008BF2  6FFC               	movwf	(_DateTime+6)& (0+255),b
 45891                           
 45892                           ; BSR set to: 2
 45893                           ;main.c: 952: int8_t hh;;main.c: 953: hh = Bcd2Hex(DateTime[2]) + TZ;
 45894                           
 45895                           ; BSR set to: 2
 45896  008BF4  51F8               	movf	(_DateTime+2)& (0+255),w,b
 45897  008BF6  EC84  F07A         	call	_Bcd2Hex
 45898  008BFA  0F09               	addlw	9
 45899  008BFC  0100               	movlb	0	; () banked
 45900  008BFE  6F95               	movwf	GPRMCdatacheck@hh& (0+255),b
 45901                           
 45902                           ; BSR set to: 0
 45903                           ;main.c: 954: if (hh >= 24) {
 45904  008C00  5195               	movf	GPRMCdatacheck@hh& (0+255),w,b
 45905  008C02  0A80               	xorlw	128
 45906  008C04  0F68               	addlw	-152
 45907  008C06  A0D8               	btfss	status,0,c
 45908  008C08  D006               	goto	l24683
 45909                           
 45910                           ; BSR set to: 0
 45911                           ;main.c: 956: hh = hh - 24;
 45912  008C0A  5195               	movf	GPRMCdatacheck@hh& (0+255),w,b
 45913  008C0C  0FE8               	addlw	232
 45914  008C0E  6F95               	movwf	GPRMCdatacheck@hh& (0+255),b
 45915                           
 45916                           ;main.c: 957: DateTime[4] = DateTime[4] + 1;
 45917  008C10  0102               	movlb	2	; () banked
 45918  008C12  29FA               	incf	(_DateTime+4)& (0+255),w,b
 45919  008C14  D007               	goto	L42
 45920  008C16                     l24683:
 45921                           
 45922                           ; BSR set to: 0
 45923  008C16  AF95               	btfss	GPRMCdatacheck@hh& (0+255),7,b
 45924  008C18  D006               	goto	l24687
 45925                           
 45926                           ; BSR set to: 0
 45927                           ;main.c: 960: hh = hh + 24;
 45928  008C1A  5195               	movf	GPRMCdatacheck@hh& (0+255),w,b
 45929  008C1C  0F18               	addlw	24
 45930  008C1E  6F95               	movwf	GPRMCdatacheck@hh& (0+255),b
 45931                           
 45932                           ;main.c: 961: DateTime[4] = DateTime[4] - 1;
 45933  008C20  0102               	movlb	2	; () banked
 45934  008C22  05FA               	decf	(_DateTime+4)& (0+255),w,b
 45935  008C24                     L42:
 45936  008C24  6FFA               	movwf	(_DateTime+4)& (0+255),b
 45937  008C26                     l24687:
 45938                           
 45939                           ;main.c: 962: };main.c: 963: DateTime[2] = Hex2Bcd(hh);
 45940  008C26  0100               	movlb	0	; () banked
 45941  008C28  5195               	movf	GPRMCdatacheck@hh& (0+255),w,b
 45942  008C2A  EC8A  F079         	call	_Hex2Bcd
 45943  008C2E  0102               	movlb	2	; () banked
 45944  008C30  6FF8               	movwf	(_DateTime+2)& (0+255),b
 45945                           
 45946                           ; BSR set to: 2
 45947                           ;main.c: 964: dateErrorCheck(DateTime);
 45948  008C32  0EF6               	movlw	low _DateTime
 45949  008C34  0100               	movlb	0	; () banked
 45950  008C36  6F89               	movwf	dateErrorCheck@dateTime& (0+255),b
 45951  008C38  0E02               	movlw	high _DateTime
 45952  008C3A  6F8A               	movwf	(dateErrorCheck@dateTime+1)& (0+255),b
 45953  008C3C  EC72  F068         	call	_dateErrorCheck	;wreg free
 45954                           
 45955                           ;main.c: 970: dateErrorCheck(DateTime);
 45956  008C40  0EF6               	movlw	low _DateTime
 45957  008C42  0100               	movlb	0	; () banked
 45958  008C44  6F89               	movwf	dateErrorCheck@dateTime& (0+255),b
 45959  008C46  0E02               	movlw	high _DateTime
 45960  008C48  6F8A               	movwf	(dateErrorCheck@dateTime+1)& (0+255),b
 45961  008C4A  EC72  F068         	call	_dateErrorCheck	;wreg free
 45962                           
 45963                           ;main.c: 972: RTC_setDate(DateTime);
 45964  008C4E  0EF6               	movlw	low _DateTime
 45965  008C50  6E22               	movwf	RTC_setDate@datetime^0,c
 45966  008C52  0E02               	movlw	high _DateTime
 45967  008C54  6E23               	movwf	(RTC_setDate@datetime+1)^0,c
 45968  008C56  EC1D  F068         	call	_RTC_setDate	;wreg free
 45969                           
 45970                           ;main.c: 973: RTC_setTime(DateTime);
 45971  008C5A  0EF6               	movlw	low _DateTime
 45972  008C5C  6E22               	movwf	RTC_setTime@datetime^0,c
 45973  008C5E  0E02               	movlw	high _DateTime
 45974  008C60  6E23               	movwf	(RTC_setTime@datetime+1)^0,c
 45975  008C62  ECD8  F06D         	call	_RTC_setTime	;wreg free
 45976                           
 45977                           ;main.c: 982: return 0;
 45978  008C66  0E00               	movlw	0
 45979  008C68  0012               	return		;funcret
 45980  008C6A                     __end_of_GPRMCdatacheck:
 45981                           	callstack 0
 45982                           
 45983 ;; *************** function _strncmp *****************
 45984 ;; Defined at:
 45985 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strncmp.c"
 45986 ;; Parameters:    Size  Location     Type
 45987 ;;  s1              2   13[COMRAM] PTR const unsigned char 
 45988 ;;		 -> Buffer(100), 
 45989 ;;  s2              2   15[COMRAM] PTR const unsigned char 
 45990 ;;		 -> STR_15(7), 
 45991 ;;  len             2   17[COMRAM] unsigned int 
 45992 ;; Auto vars:     Size  Location     Type
 45993 ;;		None
 45994 ;; Return value:  Size  Location     Type
 45995 ;;                  2   13[COMRAM] int 
 45996 ;; Registers used:
 45997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 45998 ;; Tracked objects:
 45999 ;;		On entry : 3F/2
 46000 ;;		On exit  : 3F/2
 46001 ;;		Unchanged: 3F/0
 46002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 46003 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46005 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46006 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46007 ;;Total ram usage:        7 bytes
 46008 ;; Hardware stack levels used:    1
 46009 ;; Hardware stack levels required when called:    6
 46010 ;; This function calls:
 46011 ;;		Nothing
 46012 ;; This function is called by:
 46013 ;;		_GPRMCdatacheck
 46014 ;; This function uses a non-reentrant model
 46015 ;;
 46016                           
 46017                           	psect	text178
 46018  00DC2C                     __ptext178:
 46019                           	callstack 0
 46020  00DC2C                     _strncmp:
 46021                           	callstack 23
 46022                           
 46023                           ; BSR set to: 2
 46024                           
 46025                           ;incstack = 0
 46026  00DC2C  D02E               	goto	l24169
 46027  00DC2E                     l24159:
 46028                           
 46029                           ; BSR set to: 2
 46030  00DC2E  C00E  FFD9         	movff	strncmp@s1,fsr2l
 46031  00DC32  C00F  FFDA         	movff	strncmp@s1+1,fsr2h
 46032  00DC36  50DF               	movf	indf2,w,c
 46033  00DC38  B4D8               	btfsc	status,2,c
 46034  00DC3A  D010               	goto	u27380
 46035                           
 46036                           ; BSR set to: 2
 46037  00DC3C  C00E  FFD9         	movff	strncmp@s1,fsr2l
 46038  00DC40  C00F  FFDA         	movff	strncmp@s1+1,fsr2h
 46039  00DC44  50DF               	movf	indf2,w,c
 46040  00DC46  6E14               	movwf	??_strncmp^0,c
 46041  00DC48  C010  FFF6         	movff	strncmp@s2,tblptrl
 46042  00DC4C  C011  FFF7         	movff	strncmp@s2+1,tblptrh
 46043  00DC50                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 46044  00DC50  6AF8               	clrf	tblptru,c
 46045  00DC52                     	endif
 46046  00DC52                     	if	0	;tblptru may be non-zero
 46047  00DC52                     	endif
 46048  00DC52  0008               	tblrd		*
 46049  00DC54  50F5               	movf	tablat,w,c
 46050  00DC56  1814               	xorwf	??_strncmp^0,w,c
 46051  00DC58  B4D8               	btfsc	status,2,c
 46052  00DC5A  D013               	goto	l24167
 46053  00DC5C                     u27380:
 46054                           
 46055                           ; BSR set to: 2
 46056  00DC5C  C00E  FFD9         	movff	strncmp@s1,fsr2l
 46057  00DC60  C00F  FFDA         	movff	strncmp@s1+1,fsr2h
 46058  00DC64  50DF               	movf	indf2,w,c
 46059  00DC66  6E14               	movwf	??_strncmp^0,c
 46060  00DC68  C010  FFF6         	movff	strncmp@s2,tblptrl
 46061  00DC6C  C011  FFF7         	movff	strncmp@s2+1,tblptrh
 46062  00DC70                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 46063  00DC70  6AF8               	clrf	tblptru,c
 46064  00DC72                     	endif
 46065  00DC72                     	if	0	;tblptru may be non-zero
 46066  00DC72                     	endif
 46067  00DC72  0008               	tblrd		*
 46068  00DC74  50F5               	movf	tablat,w,c
 46069  00DC76  5C14               	subwf	??_strncmp^0,w,c
 46070  00DC78  6E0E               	movwf	?_strncmp^0,c
 46071  00DC7A  6A0F               	clrf	(?_strncmp+1)^0,c
 46072  00DC7C  A0D8               	btfss	status,0,c
 46073  00DC7E  060F               	decf	(?_strncmp+1)^0,f,c
 46074  00DC80  0012               	return	
 46075  00DC82                     l24167:
 46076                           
 46077                           ; BSR set to: 2
 46078  00DC82  4A0E               	infsnz	strncmp@s1^0,f,c
 46079  00DC84  2A0F               	incf	(strncmp@s1+1)^0,f,c
 46080  00DC86  4A10               	infsnz	strncmp@s2^0,f,c
 46081  00DC88  2A11               	incf	(strncmp@s2+1)^0,f,c
 46082  00DC8A                     l24169:
 46083                           
 46084                           ; BSR set to: 2
 46085  00DC8A  0612               	decf	strncmp@len^0,f,c
 46086  00DC8C  A0D8               	btfss	status,0,c
 46087  00DC8E  0613               	decf	(strncmp@len+1)^0,f,c
 46088  00DC90  2812               	incf	strncmp@len^0,w,c
 46089  00DC92  E1CD               	bnz	l24159
 46090  00DC94  2813               	incf	(strncmp@len+1)^0,w,c
 46091  00DC96  A4D8               	btfss	status,2,c
 46092  00DC98  D7CA               	goto	l24159
 46093                           
 46094                           ; BSR set to: 2
 46095  00DC9A  0E00               	movlw	0
 46096  00DC9C  6E0F               	movwf	(?_strncmp+1)^0,c
 46097  00DC9E  0E00               	movlw	0
 46098  00DCA0  6E0E               	movwf	?_strncmp^0,c
 46099                           
 46100                           ; BSR set to: 2
 46101  00DCA2  0012               	return		;funcret
 46102  00DCA4                     __end_of_strncmp:
 46103                           	callstack 0
 46104                           
 46105 ;; *************** function _dateErrorCheck *****************
 46106 ;; Defined at:
 46107 ;;		line 180 in file "RTC8025.c"
 46108 ;; Parameters:    Size  Location     Type
 46109 ;;  dateTime        2   41[BANK0 ] PTR unsigned char 
 46110 ;;		 -> DateTime(7), 
 46111 ;; Auto vars:     Size  Location     Type
 46112 ;;  dd              1   45[BANK0 ] unsigned char 
 46113 ;;  mm              1   44[BANK0 ] unsigned char 
 46114 ;;  yy              1   43[BANK0 ] unsigned char 
 46115 ;; Return value:  Size  Location     Type
 46116 ;;                  1    wreg      void 
 46117 ;; Registers used:
 46118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 46119 ;; Tracked objects:
 46120 ;;		On entry : 0/4
 46121 ;;		On exit  : 0/0
 46122 ;;		Unchanged: 0/0
 46123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 46124 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46125 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46126 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46127 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46128 ;;Total ram usage:        6 bytes
 46129 ;; Hardware stack levels used:    1
 46130 ;; Hardware stack levels required when called:   11
 46131 ;; This function calls:
 46132 ;;		_Bcd2Hex
 46133 ;;		_Hex2Bcd
 46134 ;;		_getWeekdays
 46135 ;; This function is called by:
 46136 ;;		_GPRMCdatacheck
 46137 ;;		_init_RTC
 46138 ;; This function uses a non-reentrant model
 46139 ;;
 46140                           
 46141                           	psect	text179
 46142  00D0E4                     __ptext179:
 46143                           	callstack 0
 46144  00D0E4                     _dateErrorCheck:
 46145                           	callstack 18
 46146                           
 46147                           ;RTC8025.c: 181: uint8_t yy, mm, dd;;RTC8025.c: 183: yy = Bcd2Hex(dateTime[6]);
 46148                           
 46149                           ; BSR set to: 2
 46150                           ;incstack = 0
 46151  00D0E4  0100               	movlb	0	; () banked
 46152  00D0E6  EE20 F006          	lfsr	2,6
 46153  00D0EA  5189               	movf	dateErrorCheck@dateTime& (0+255),w,b
 46154  00D0EC  26D9               	addwf	fsr2l,f,c
 46155  00D0EE  518A               	movf	(dateErrorCheck@dateTime+1)& (0+255),w,b
 46156  00D0F0  22DA               	addwfc	fsr2h,f,c
 46157  00D0F2  50DF               	movf	indf2,w,c
 46158  00D0F4  EC84  F07A         	call	_Bcd2Hex
 46159  00D0F8  0100               	movlb	0	; () banked
 46160  00D0FA  6F8B               	movwf	dateErrorCheck@yy& (0+255),b
 46161                           
 46162                           ;RTC8025.c: 184: mm = Bcd2Hex(dateTime[5]);
 46163  00D0FC  EE20 F005          	lfsr	2,5
 46164  00D100  5189               	movf	dateErrorCheck@dateTime& (0+255),w,b
 46165  00D102  26D9               	addwf	fsr2l,f,c
 46166  00D104  518A               	movf	(dateErrorCheck@dateTime+1)& (0+255),w,b
 46167  00D106  22DA               	addwfc	fsr2h,f,c
 46168  00D108  50DF               	movf	indf2,w,c
 46169  00D10A  EC84  F07A         	call	_Bcd2Hex
 46170  00D10E  0100               	movlb	0	; () banked
 46171  00D110  6F8C               	movwf	dateErrorCheck@mm& (0+255),b
 46172                           
 46173                           ;RTC8025.c: 185: dd = Bcd2Hex(dateTime[4]);
 46174  00D112  EE20 F004          	lfsr	2,4
 46175  00D116  5189               	movf	dateErrorCheck@dateTime& (0+255),w,b
 46176  00D118  26D9               	addwf	fsr2l,f,c
 46177  00D11A  518A               	movf	(dateErrorCheck@dateTime+1)& (0+255),w,b
 46178  00D11C  22DA               	addwfc	fsr2h,f,c
 46179  00D11E  50DF               	movf	indf2,w,c
 46180  00D120  EC84  F07A         	call	_Bcd2Hex
 46181  00D124  0100               	movlb	0	; () banked
 46182  00D126  6F8D               	movwf	dateErrorCheck@dd& (0+255),b
 46183                           
 46184                           ; BSR set to: 0
 46185                           ;RTC8025.c: 187: dateTime[3] = getWeekdays(&yy, &mm, &dd);
 46186  00D128  0E8B               	movlw	low dateErrorCheck@yy
 46187  00D12A  6F6E               	movwf	getWeekdays@year& (0+255),b
 46188  00D12C  0E8C               	movlw	low dateErrorCheck@mm
 46189  00D12E  6F6F               	movwf	getWeekdays@month& (0+255),b
 46190  00D130  0E8D               	movlw	low dateErrorCheck@dd
 46191  00D132  6F70               	movwf	getWeekdays@day& (0+255),b
 46192  00D134  ECE7  F060         	call	_getWeekdays	;wreg free
 46193  00D138  6E45               	movwf	??_dateErrorCheck^0,c
 46194  00D13A  EE20 F003          	lfsr	2,3
 46195  00D13E  5189               	movf	dateErrorCheck@dateTime& (0+255),w,b
 46196  00D140  26D9               	addwf	fsr2l,f,c
 46197  00D142  518A               	movf	(dateErrorCheck@dateTime+1)& (0+255),w,b
 46198  00D144  22DA               	addwfc	fsr2h,f,c
 46199  00D146  C045  FFDF         	movff	??_dateErrorCheck,indf2
 46200                           
 46201                           ; BSR set to: 0
 46202                           ;RTC8025.c: 189: dateTime[6] = Hex2Bcd(yy);
 46203  00D14A  EE20 F006          	lfsr	2,6
 46204  00D14E  5189               	movf	dateErrorCheck@dateTime& (0+255),w,b
 46205  00D150  26D9               	addwf	fsr2l,f,c
 46206  00D152  518A               	movf	(dateErrorCheck@dateTime+1)& (0+255),w,b
 46207  00D154  22DA               	addwfc	fsr2h,f,c
 46208  00D156  518B               	movf	dateErrorCheck@yy& (0+255),w,b
 46209  00D158  EC8A  F079         	call	_Hex2Bcd
 46210  00D15C  6EDF               	movwf	indf2,c
 46211                           
 46212                           ;RTC8025.c: 190: dateTime[5] = Hex2Bcd(mm);
 46213  00D15E  0100               	movlb	0	; () banked
 46214  00D160  EE20 F005          	lfsr	2,5
 46215  00D164  5189               	movf	dateErrorCheck@dateTime& (0+255),w,b
 46216  00D166  26D9               	addwf	fsr2l,f,c
 46217  00D168  518A               	movf	(dateErrorCheck@dateTime+1)& (0+255),w,b
 46218  00D16A  22DA               	addwfc	fsr2h,f,c
 46219  00D16C  518C               	movf	dateErrorCheck@mm& (0+255),w,b
 46220  00D16E  EC8A  F079         	call	_Hex2Bcd
 46221  00D172  6EDF               	movwf	indf2,c
 46222                           
 46223                           ;RTC8025.c: 191: dateTime[4] = Hex2Bcd(dd);
 46224  00D174  0100               	movlb	0	; () banked
 46225  00D176  EE20 F004          	lfsr	2,4
 46226  00D17A  5189               	movf	dateErrorCheck@dateTime& (0+255),w,b
 46227  00D17C  26D9               	addwf	fsr2l,f,c
 46228  00D17E  518A               	movf	(dateErrorCheck@dateTime+1)& (0+255),w,b
 46229  00D180  22DA               	addwfc	fsr2h,f,c
 46230  00D182  518D               	movf	dateErrorCheck@dd& (0+255),w,b
 46231  00D184  EC8A  F079         	call	_Hex2Bcd
 46232  00D188  6EDF               	movwf	indf2,c
 46233  00D18A  0012               	return		;funcret
 46234  00D18C                     __end_of_dateErrorCheck:
 46235                           	callstack 0
 46236                           
 46237 ;; *************** function _getWeekdays *****************
 46238 ;; Defined at:
 46239 ;;		line 203 in file "RTC8025.c"
 46240 ;; Parameters:    Size  Location     Type
 46241 ;;  year            1   14[BANK0 ] PTR unsigned char 
 46242 ;;		 -> dateErrorCheck@yy(1), DrawSmallCalendar@yr(1), DrawBigCalendar@yr(1), SettingProc@y(1), 
 46243 ;;  month           1   15[BANK0 ] PTR unsigned char 
 46244 ;;		 -> dateErrorCheck@mm(1), DrawSmallCalendar@mm(1), DrawBigCalendar@mm(1), SettingProc@m(1), 
 46245 ;;  day             1   16[BANK0 ] PTR unsigned char 
 46246 ;;		 -> dateErrorCheck@dd(1), DrawSmallCalendar@dd(1), DrawBigCalendar@dd(1), SettingProc@d(1), 
 46247 ;; Auto vars:     Size  Location     Type
 46248 ;;  t              18   23[BANK0 ] struct tm
 46249 ;;  tim             4   17[BANK0 ] long 
 46250 ;;  t2              2   21[BANK0 ] PTR struct tm
 46251 ;;		 -> gmtime@tim(18), 
 46252 ;; Return value:  Size  Location     Type
 46253 ;;                  1    wreg      unsigned char 
 46254 ;; Registers used:
 46255 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 46256 ;; Tracked objects:
 46257 ;;		On entry : 3F/0
 46258 ;;		On exit  : 3F/0
 46259 ;;		Unchanged: 0/0
 46260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 46261 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46262 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46264 ;;      Totals:         1      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46265 ;;Total ram usage:       28 bytes
 46266 ;; Hardware stack levels used:    1
 46267 ;; Hardware stack levels required when called:   10
 46268 ;; This function calls:
 46269 ;;		_localtime
 46270 ;;		_mktime
 46271 ;; This function is called by:
 46272 ;;		_SettingProc
 46273 ;;		_DrawBigCalendar
 46274 ;;		_DrawSmallCalendar
 46275 ;;		_dateErrorCheck
 46276 ;; This function uses a non-reentrant model
 46277 ;;
 46278                           
 46279                           	psect	text180
 46280  00C1CE                     __ptext180:
 46281                           	callstack 0
 46282  00C1CE                     _getWeekdays:
 46283                           	callstack 18
 46284                           
 46285                           ; BSR set to: 0
 46286                           ;RTC8025.c: 204: struct tm t;;RTC8025.c: 205: struct tm *t2;;RTC8025.c: 206: time_t tim;
      +                          ;RTC8025.c: 208: t.tm_year = *year + 2000 - 1900;
 46287                           
 46288                           ;incstack = 0
 46289  00C1CE  516E               	movf	getWeekdays@year& (0+255),w,b
 46290  00C1D0  6ED9               	movwf	fsr2l,c
 46291  00C1D2  6ADA               	clrf	fsr2h,c
 46292  00C1D4  50DF               	movf	indf2,w,c
 46293  00C1D6  6E44               	movwf	??_getWeekdays^0,c
 46294  00C1D8  0E64               	movlw	100
 46295  00C1DA  2444               	addwf	??_getWeekdays^0,w,c
 46296  00C1DC  6F81               	movwf	(getWeekdays@t+10)& (0+255),b
 46297  00C1DE  6B82               	clrf	(getWeekdays@t+11)& (0+255),b
 46298  00C1E0  0E00               	movlw	0
 46299  00C1E2  2382               	addwfc	(getWeekdays@t+11)& (0+255),f,b
 46300                           
 46301                           ;RTC8025.c: 209: t.tm_mon = *month - 1;
 46302  00C1E4  516F               	movf	getWeekdays@month& (0+255),w,b
 46303  00C1E6  6ED9               	movwf	fsr2l,c
 46304  00C1E8  6ADA               	clrf	fsr2h,c
 46305  00C1EA  50DF               	movf	indf2,w,c
 46306  00C1EC  6E44               	movwf	??_getWeekdays^0,c
 46307  00C1EE  0EFF               	movlw	255
 46308  00C1F0  2444               	addwf	??_getWeekdays^0,w,c
 46309  00C1F2  6F7F               	movwf	(getWeekdays@t+8)& (0+255),b
 46310  00C1F4  6B80               	clrf	(getWeekdays@t+9)& (0+255),b
 46311  00C1F6  0EFF               	movlw	255
 46312  00C1F8  2380               	addwfc	(getWeekdays@t+9)& (0+255),f,b
 46313                           
 46314                           ;RTC8025.c: 210: t.tm_mday = *day;
 46315  00C1FA  5170               	movf	getWeekdays@day& (0+255),w,b
 46316  00C1FC  6ED9               	movwf	fsr2l,c
 46317  00C1FE  6ADA               	clrf	fsr2h,c
 46318  00C200  50DF               	movf	indf2,w,c
 46319  00C202  6E44               	movwf	??_getWeekdays^0,c
 46320  00C204  5044               	movf	??_getWeekdays^0,w,c
 46321  00C206  6F7D               	movwf	(getWeekdays@t+6)& (0+255),b
 46322  00C208  6B7E               	clrf	(getWeekdays@t+7)& (0+255),b
 46323                           
 46324                           ; BSR set to: 0
 46325                           ;RTC8025.c: 211: t.tm_wday = 5;
 46326  00C20A  0E00               	movlw	0
 46327  00C20C  6F84               	movwf	(getWeekdays@t+13)& (0+255),b
 46328  00C20E  0E05               	movlw	5
 46329  00C210  6F83               	movwf	(getWeekdays@t+12)& (0+255),b
 46330                           
 46331                           ; BSR set to: 0
 46332                           ;RTC8025.c: 212: t.tm_hour = 1;
 46333  00C212  0E00               	movlw	0
 46334  00C214  6F7C               	movwf	(getWeekdays@t+5)& (0+255),b
 46335  00C216  0E01               	movlw	1
 46336  00C218  6F7B               	movwf	(getWeekdays@t+4)& (0+255),b
 46337                           
 46338                           ; BSR set to: 0
 46339                           ;RTC8025.c: 213: t.tm_min = 0;
 46340  00C21A  0E00               	movlw	0
 46341  00C21C  6F7A               	movwf	(getWeekdays@t+3)& (0+255),b
 46342  00C21E  0E00               	movlw	0
 46343  00C220  6F79               	movwf	(getWeekdays@t+2)& (0+255),b
 46344                           
 46345                           ; BSR set to: 0
 46346                           ;RTC8025.c: 214: t.tm_sec = 0;
 46347  00C222  0E00               	movlw	0
 46348  00C224  6F78               	movwf	(getWeekdays@t+1)& (0+255),b
 46349  00C226  0E00               	movlw	0
 46350  00C228  6F77               	movwf	getWeekdays@t& (0+255),b
 46351                           
 46352                           ; BSR set to: 0
 46353                           ;RTC8025.c: 216: tim = mktime(&t);
 46354  00C22A  0E77               	movlw	low getWeekdays@t
 46355  00C22C  6F60               	movwf	mktime@timeptr& (0+255),b
 46356  00C22E  EC21  F04E         	call	_mktime	;wreg free
 46357  00C232  C060  F071         	movff	?_mktime,getWeekdays@tim
 46358  00C236  C061  F072         	movff	?_mktime+1,getWeekdays@tim+1
 46359  00C23A  C062  F073         	movff	?_mktime+2,getWeekdays@tim+2
 46360  00C23E  C063  F074         	movff	?_mktime+3,getWeekdays@tim+3
 46361                           
 46362                           ; BSR set to: 0
 46363                           ;RTC8025.c: 217: t2 = localtime(&tim);
 46364  00C242  0E71               	movlw	low getWeekdays@tim
 46365  00C244  6E31               	movwf	localtime@tp^0,c
 46366  00C246  ECEB  F078         	call	_localtime	;wreg free
 46367  00C24A  C031  F075         	movff	?_localtime,getWeekdays@t2
 46368  00C24E  C032  F076         	movff	?_localtime+1,getWeekdays@t2+1
 46369                           
 46370                           ; BSR set to: 3
 46371                           ;RTC8025.c: 219: *year = t2->tm_year - 100;
 46372  00C252  0100               	movlb	0	; () banked
 46373  00C254  516E               	movf	getWeekdays@year& (0+255),w,b
 46374  00C256  6ED9               	movwf	fsr2l,c
 46375  00C258  6ADA               	clrf	fsr2h,c
 46376  00C25A  EE10 F00A          	lfsr	1,10
 46377  00C25E  5175               	movf	getWeekdays@t2& (0+255),w,b
 46378  00C260  26E1               	addwf	fsr1l,f,c
 46379  00C262  5176               	movf	(getWeekdays@t2+1)& (0+255),w,b
 46380  00C264  22E2               	addwfc	fsr1h,f,c
 46381  00C266  50E7               	movf	indf1,w,c
 46382  00C268  0F9C               	addlw	156
 46383  00C26A  6EDF               	movwf	indf2,c
 46384                           
 46385                           ; BSR set to: 0
 46386                           ;RTC8025.c: 220: *month = (t2->tm_mon) + 1;
 46387  00C26C  516F               	movf	getWeekdays@month& (0+255),w,b
 46388  00C26E  6ED9               	movwf	fsr2l,c
 46389  00C270  6ADA               	clrf	fsr2h,c
 46390  00C272  EE10 F008          	lfsr	1,8
 46391  00C276  5175               	movf	getWeekdays@t2& (0+255),w,b
 46392  00C278  26E1               	addwf	fsr1l,f,c
 46393  00C27A  5176               	movf	(getWeekdays@t2+1)& (0+255),w,b
 46394  00C27C  22E2               	addwfc	fsr1h,f,c
 46395  00C27E  50E7               	movf	indf1,w,c
 46396  00C280  6E44               	movwf	??_getWeekdays^0,c
 46397  00C282  2844               	incf	??_getWeekdays^0,w,c
 46398  00C284  6EDF               	movwf	indf2,c
 46399                           
 46400                           ; BSR set to: 0
 46401                           ;RTC8025.c: 221: *day = t2->tm_mday;
 46402  00C286  EE20 F006          	lfsr	2,6
 46403  00C28A  5175               	movf	getWeekdays@t2& (0+255),w,b
 46404  00C28C  26D9               	addwf	fsr2l,f,c
 46405  00C28E  5176               	movf	(getWeekdays@t2+1)& (0+255),w,b
 46406  00C290  22DA               	addwfc	fsr2h,f,c
 46407  00C292  5170               	movf	getWeekdays@day& (0+255),w,b
 46408  00C294  6EE1               	movwf	fsr1l,c
 46409  00C296  6AE2               	clrf	fsr1h,c
 46410  00C298  CFDF FFE7          	movff	indf2,indf1
 46411                           
 46412                           ; BSR set to: 0
 46413                           ;RTC8025.c: 223: return t2->tm_wday;
 46414  00C29C  EE20 F00C          	lfsr	2,12
 46415  00C2A0  5175               	movf	getWeekdays@t2& (0+255),w,b
 46416  00C2A2  26D9               	addwf	fsr2l,f,c
 46417  00C2A4  5176               	movf	(getWeekdays@t2+1)& (0+255),w,b
 46418  00C2A6  22DA               	addwfc	fsr2h,f,c
 46419  00C2A8  50DF               	movf	indf2,w,c
 46420                           
 46421                           ; BSR set to: 0
 46422  00C2AA  0012               	return		;funcret
 46423  00C2AC                     __end_of_getWeekdays:
 46424                           	callstack 0
 46425                           
 46426 ;; *************** function _mktime *****************
 46427 ;; Defined at:
 46428 ;;		line 52 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\mktime.c"
 46429 ;; Parameters:    Size  Location     Type
 46430 ;;  timeptr         1    0[BANK0 ] PTR struct tm
 46431 ;;		 -> getWeekdays@t(18), 
 46432 ;; Auto vars:     Size  Location     Type
 46433 ;;  tt              4   10[BANK0 ] long 
 46434 ;; Return value:  Size  Location     Type
 46435 ;;                  4    0[BANK0 ] long 
 46436 ;; Registers used:
 46437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46438 ;; Tracked objects:
 46439 ;;		On entry : 3F/0
 46440 ;;		On exit  : 3F/0
 46441 ;;		Unchanged: 0/0
 46442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 46443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46444 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46445 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46446 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46447 ;;Total ram usage:       14 bytes
 46448 ;; Hardware stack levels used:    1
 46449 ;; Hardware stack levels required when called:    9
 46450 ;; This function calls:
 46451 ;;		___lmul
 46452 ;;		_ymd_to_scalar
 46453 ;; This function is called by:
 46454 ;;		_getWeekdays
 46455 ;; This function uses a non-reentrant model
 46456 ;;
 46457                           
 46458                           	psect	text181
 46459  009C42                     __ptext181:
 46460                           	callstack 0
 46461  009C42                     _mktime:
 46462                           	callstack 18
 46463                           
 46464                           ; BSR set to: 0
 46465                           
 46466                           ; BSR set to: 0
 46467                           ;incstack = 0
 46468  009C42  5160               	movf	mktime@timeptr& (0+255),w,b
 46469  009C44  6ED9               	movwf	fsr2l,c
 46470  009C46  6ADA               	clrf	fsr2h,c
 46471  009C48  0E0A               	movlw	10
 46472  009C4A  26D9               	addwf	fsr2l,f,c
 46473  009C4C  0E01               	movlw	1
 46474  009C4E  BEDB               	btfsc	plusw2,7,c
 46475  009C50  D016               	goto	u22880
 46476  009C52  0E01               	movlw	1
 46477  009C54  50DB               	movf	plusw2,w,c
 46478  009C56  E104               	bnz	u22870
 46479  009C58  0E46               	movlw	70
 46480  009C5A  5CDE               	subwf	postinc2,w,c
 46481  009C5C  A0D8               	btfss	status,0,c
 46482  009C5E  D00F               	goto	u22880
 46483  009C60                     u22870:
 46484                           
 46485                           ; BSR set to: 0
 46486  009C60  5160               	movf	mktime@timeptr& (0+255),w,b
 46487  009C62  6ED9               	movwf	fsr2l,c
 46488  009C64  6ADA               	clrf	fsr2h,c
 46489  009C66  0E0A               	movlw	10
 46490  009C68  26D9               	addwf	fsr2l,f,c
 46491  009C6A  0E01               	movlw	1
 46492  009C6C  BEDB               	btfsc	plusw2,7,c
 46493  009C6E  D00C               	goto	l20857
 46494  009C70  0E01               	movlw	1
 46495  009C72  50DB               	movf	plusw2,w,c
 46496  009C74  E104               	bnz	u22880
 46497  009C76  0E8B               	movlw	139
 46498  009C78  5CDE               	subwf	postinc2,w,c
 46499  009C7A  A0D8               	btfss	status,0,c
 46500  009C7C  D005               	goto	l20857
 46501  009C7E                     u22880:
 46502                           
 46503                           ; BSR set to: 0
 46504  009C7E  696A               	setf	mktime@tt& (0+255),b
 46505  009C80  696B               	setf	(mktime@tt+1)& (0+255),b
 46506  009C82  696C               	setf	(mktime@tt+2)& (0+255),b
 46507  009C84  696D               	setf	(mktime@tt+3)& (0+255),b
 46508  009C86  D0D9               	goto	l20867
 46509  009C88                     l20857:
 46510                           
 46511                           ; BSR set to: 0
 46512  009C88  5160               	movf	mktime@timeptr& (0+255),w,b
 46513  009C8A  6ED9               	movwf	fsr2l,c
 46514  009C8C  6ADA               	clrf	fsr2h,c
 46515  009C8E  0E0A               	movlw	10
 46516  009C90  26D9               	addwf	fsr2l,f,c
 46517  009C92  CFDE F064          	movff	postinc2,??_mktime
 46518  009C96  CFDD F065          	movff	postdec2,??_mktime+1
 46519  009C9A  0E6C               	movlw	108
 46520  009C9C  2564               	addwf	??_mktime& (0+255),w,b
 46521  009C9E  6E34               	movwf	ymd_to_scalar@yr^0,c
 46522  009CA0  0E07               	movlw	7
 46523  009CA2  2165               	addwfc	(??_mktime+1)& (0+255),w,b
 46524  009CA4  6E35               	movwf	(ymd_to_scalar@yr+1)^0,c
 46525  009CA6  5160               	movf	mktime@timeptr& (0+255),w,b
 46526  009CA8  6ED9               	movwf	fsr2l,c
 46527  009CAA  6ADA               	clrf	fsr2h,c
 46528  009CAC  0E08               	movlw	8
 46529  009CAE  26D9               	addwf	fsr2l,f,c
 46530  009CB0  CFDE F066          	movff	postinc2,??_mktime+2
 46531  009CB4  CFDD F067          	movff	postdec2,??_mktime+3
 46532  009CB8  0E01               	movlw	1
 46533  009CBA  2566               	addwf	(??_mktime+2)& (0+255),w,b
 46534  009CBC  6E36               	movwf	ymd_to_scalar@mo^0,c
 46535  009CBE  0E00               	movlw	0
 46536  009CC0  2167               	addwfc	(??_mktime+3)& (0+255),w,b
 46537  009CC2  6E37               	movwf	(ymd_to_scalar@mo+1)^0,c
 46538  009CC4  5160               	movf	mktime@timeptr& (0+255),w,b
 46539  009CC6  6ED9               	movwf	fsr2l,c
 46540  009CC8  6ADA               	clrf	fsr2h,c
 46541  009CCA  0E06               	movlw	6
 46542  009CCC  26D9               	addwf	fsr2l,f,c
 46543  009CCE  CFDE F038          	movff	postinc2,ymd_to_scalar@day
 46544  009CD2  CFDD F039          	movff	postdec2,ymd_to_scalar@day+1
 46545  009CD6  ECC6  F068         	call	_ymd_to_scalar	;wreg free
 46546  009CDA  C034  F06A         	movff	?_ymd_to_scalar,mktime@tt
 46547  009CDE  C035  F06B         	movff	?_ymd_to_scalar+1,mktime@tt+1
 46548  009CE2  C036  F06C         	movff	?_ymd_to_scalar+2,mktime@tt+2
 46549  009CE6  C037  F06D         	movff	?_ymd_to_scalar+3,mktime@tt+3
 46550  009CEA  0E07               	movlw	7
 46551  009CEC  6E35               	movwf	(ymd_to_scalar@yr+1)^0,c
 46552  009CEE  0EB2               	movlw	178
 46553  009CF0  6E34               	movwf	ymd_to_scalar@yr^0,c
 46554  009CF2  0E00               	movlw	0
 46555  009CF4  6E37               	movwf	(ymd_to_scalar@mo+1)^0,c
 46556  009CF6  0E01               	movlw	1
 46557  009CF8  6E36               	movwf	ymd_to_scalar@mo^0,c
 46558  009CFA  0E00               	movlw	0
 46559  009CFC  6E39               	movwf	(ymd_to_scalar@day+1)^0,c
 46560  009CFE  0E01               	movlw	1
 46561  009D00  6E38               	movwf	ymd_to_scalar@day^0,c
 46562  009D02  ECC6  F068         	call	_ymd_to_scalar	;wreg free
 46563  009D06  5034               	movf	?_ymd_to_scalar^0,w,c
 46564  009D08  0100               	movlb	0	; () banked
 46565  009D0A  5F6A               	subwf	mktime@tt& (0+255),f,b
 46566  009D0C  5035               	movf	(?_ymd_to_scalar+1)^0,w,c
 46567  009D0E  5B6B               	subwfb	(mktime@tt+1)& (0+255),f,b
 46568  009D10  5036               	movf	(?_ymd_to_scalar+2)^0,w,c
 46569  009D12  5B6C               	subwfb	(mktime@tt+2)& (0+255),f,b
 46570  009D14  5037               	movf	(?_ymd_to_scalar+3)^0,w,c
 46571  009D16  5B6D               	subwfb	(mktime@tt+3)& (0+255),f,b
 46572                           
 46573                           ; BSR set to: 0
 46574  009D18  5160               	movf	mktime@timeptr& (0+255),w,b
 46575  009D1A  6ED9               	movwf	fsr2l,c
 46576  009D1C  6ADA               	clrf	fsr2h,c
 46577  009D1E  0E04               	movlw	4
 46578  009D20  26D9               	addwf	fsr2l,f,c
 46579  009D22  CFDE F064          	movff	postinc2,??_mktime
 46580  009D26  CFDD F065          	movff	postdec2,??_mktime+1
 46581  009D2A  C064  F066         	movff	??_mktime,??_mktime+2
 46582  009D2E  C065  F067         	movff	??_mktime+1,??_mktime+3
 46583  009D32  0E00               	movlw	0
 46584  009D34  BF67               	btfsc	(??_mktime+3)& (0+255),7,b
 46585  009D36  0EFF               	movlw	255
 46586  009D38  6F68               	movwf	(??_mktime+4)& (0+255),b
 46587  009D3A  6F69               	movwf	(??_mktime+5)& (0+255),b
 46588  009D3C  C06A  F00E         	movff	mktime@tt,___lmul@multiplier
 46589  009D40  C06B  F00F         	movff	mktime@tt+1,___lmul@multiplier+1
 46590  009D44  C06C  F010         	movff	mktime@tt+2,___lmul@multiplier+2
 46591  009D48  C06D  F011         	movff	mktime@tt+3,___lmul@multiplier+3
 46592  009D4C  0E18               	movlw	24
 46593  009D4E  6E12               	movwf	___lmul@multiplicand^0,c
 46594  009D50  0E00               	movlw	0
 46595  009D52  6E13               	movwf	(___lmul@multiplicand+1)^0,c
 46596  009D54  0E00               	movlw	0
 46597  009D56  6E14               	movwf	(___lmul@multiplicand+2)^0,c
 46598  009D58  0E00               	movlw	0
 46599  009D5A  6E15               	movwf	(___lmul@multiplicand+3)^0,c
 46600  009D5C  EC16  F072         	call	___lmul	;wreg free
 46601  009D60  0100               	movlb	0	; () banked
 46602  009D62  5166               	movf	(??_mktime+2)& (0+255),w,b
 46603  009D64  240E               	addwf	?___lmul^0,w,c
 46604  009D66  6F6A               	movwf	mktime@tt& (0+255),b
 46605  009D68  5167               	movf	(??_mktime+3)& (0+255),w,b
 46606  009D6A  200F               	addwfc	(?___lmul+1)^0,w,c
 46607  009D6C  6F6B               	movwf	(mktime@tt+1)& (0+255),b
 46608  009D6E  5168               	movf	(??_mktime+4)& (0+255),w,b
 46609  009D70  2010               	addwfc	(?___lmul+2)^0,w,c
 46610  009D72  6F6C               	movwf	(mktime@tt+2)& (0+255),b
 46611  009D74  5169               	movf	(??_mktime+5)& (0+255),w,b
 46612  009D76  2011               	addwfc	(?___lmul+3)^0,w,c
 46613  009D78  6F6D               	movwf	(mktime@tt+3)& (0+255),b
 46614                           
 46615                           ; BSR set to: 0
 46616  009D7A  5160               	movf	mktime@timeptr& (0+255),w,b
 46617  009D7C  6ED9               	movwf	fsr2l,c
 46618  009D7E  6ADA               	clrf	fsr2h,c
 46619  009D80  0E02               	movlw	2
 46620  009D82  26D9               	addwf	fsr2l,f,c
 46621  009D84  CFDE F064          	movff	postinc2,??_mktime
 46622  009D88  CFDD F065          	movff	postdec2,??_mktime+1
 46623  009D8C  C064  F066         	movff	??_mktime,??_mktime+2
 46624  009D90  C065  F067         	movff	??_mktime+1,??_mktime+3
 46625  009D94  0E00               	movlw	0
 46626  009D96  BF67               	btfsc	(??_mktime+3)& (0+255),7,b
 46627  009D98  0EFF               	movlw	255
 46628  009D9A  6F68               	movwf	(??_mktime+4)& (0+255),b
 46629  009D9C  6F69               	movwf	(??_mktime+5)& (0+255),b
 46630  009D9E  C06A  F00E         	movff	mktime@tt,___lmul@multiplier
 46631  009DA2  C06B  F00F         	movff	mktime@tt+1,___lmul@multiplier+1
 46632  009DA6  C06C  F010         	movff	mktime@tt+2,___lmul@multiplier+2
 46633  009DAA  C06D  F011         	movff	mktime@tt+3,___lmul@multiplier+3
 46634  009DAE  0E3C               	movlw	60
 46635  009DB0  6E12               	movwf	___lmul@multiplicand^0,c
 46636  009DB2  0E00               	movlw	0
 46637  009DB4  6E13               	movwf	(___lmul@multiplicand+1)^0,c
 46638  009DB6  0E00               	movlw	0
 46639  009DB8  6E14               	movwf	(___lmul@multiplicand+2)^0,c
 46640  009DBA  0E00               	movlw	0
 46641  009DBC  6E15               	movwf	(___lmul@multiplicand+3)^0,c
 46642  009DBE  EC16  F072         	call	___lmul	;wreg free
 46643  009DC2  0100               	movlb	0	; () banked
 46644  009DC4  5166               	movf	(??_mktime+2)& (0+255),w,b
 46645  009DC6  240E               	addwf	?___lmul^0,w,c
 46646  009DC8  6F6A               	movwf	mktime@tt& (0+255),b
 46647  009DCA  5167               	movf	(??_mktime+3)& (0+255),w,b
 46648  009DCC  200F               	addwfc	(?___lmul+1)^0,w,c
 46649  009DCE  6F6B               	movwf	(mktime@tt+1)& (0+255),b
 46650  009DD0  5168               	movf	(??_mktime+4)& (0+255),w,b
 46651  009DD2  2010               	addwfc	(?___lmul+2)^0,w,c
 46652  009DD4  6F6C               	movwf	(mktime@tt+2)& (0+255),b
 46653  009DD6  5169               	movf	(??_mktime+5)& (0+255),w,b
 46654  009DD8  2011               	addwfc	(?___lmul+3)^0,w,c
 46655  009DDA  6F6D               	movwf	(mktime@tt+3)& (0+255),b
 46656                           
 46657                           ; BSR set to: 0
 46658  009DDC  5160               	movf	mktime@timeptr& (0+255),w,b
 46659  009DDE  6ED9               	movwf	fsr2l,c
 46660  009DE0  6ADA               	clrf	fsr2h,c
 46661  009DE2  CFDE F064          	movff	postinc2,??_mktime
 46662  009DE6  CFDD F065          	movff	postdec2,??_mktime+1
 46663  009DEA  C064  F066         	movff	??_mktime,??_mktime+2
 46664  009DEE  C065  F067         	movff	??_mktime+1,??_mktime+3
 46665  009DF2  0E00               	movlw	0
 46666  009DF4  BF67               	btfsc	(??_mktime+3)& (0+255),7,b
 46667  009DF6  0EFF               	movlw	255
 46668  009DF8  6F68               	movwf	(??_mktime+4)& (0+255),b
 46669  009DFA  6F69               	movwf	(??_mktime+5)& (0+255),b
 46670  009DFC  C06A  F00E         	movff	mktime@tt,___lmul@multiplier
 46671  009E00  C06B  F00F         	movff	mktime@tt+1,___lmul@multiplier+1
 46672  009E04  C06C  F010         	movff	mktime@tt+2,___lmul@multiplier+2
 46673  009E08  C06D  F011         	movff	mktime@tt+3,___lmul@multiplier+3
 46674  009E0C  0E3C               	movlw	60
 46675  009E0E  6E12               	movwf	___lmul@multiplicand^0,c
 46676  009E10  0E00               	movlw	0
 46677  009E12  6E13               	movwf	(___lmul@multiplicand+1)^0,c
 46678  009E14  0E00               	movlw	0
 46679  009E16  6E14               	movwf	(___lmul@multiplicand+2)^0,c
 46680  009E18  0E00               	movlw	0
 46681  009E1A  6E15               	movwf	(___lmul@multiplicand+3)^0,c
 46682  009E1C  EC16  F072         	call	___lmul	;wreg free
 46683  009E20  0100               	movlb	0	; () banked
 46684  009E22  5166               	movf	(??_mktime+2)& (0+255),w,b
 46685  009E24  240E               	addwf	?___lmul^0,w,c
 46686  009E26  6F6A               	movwf	mktime@tt& (0+255),b
 46687  009E28  5167               	movf	(??_mktime+3)& (0+255),w,b
 46688  009E2A  200F               	addwfc	(?___lmul+1)^0,w,c
 46689  009E2C  6F6B               	movwf	(mktime@tt+1)& (0+255),b
 46690  009E2E  5168               	movf	(??_mktime+4)& (0+255),w,b
 46691  009E30  2010               	addwfc	(?___lmul+2)^0,w,c
 46692  009E32  6F6C               	movwf	(mktime@tt+2)& (0+255),b
 46693  009E34  5169               	movf	(??_mktime+5)& (0+255),w,b
 46694  009E36  2011               	addwfc	(?___lmul+3)^0,w,c
 46695  009E38  6F6D               	movwf	(mktime@tt+3)& (0+255),b
 46696  009E3A                     l20867:
 46697                           
 46698                           ; BSR set to: 0
 46699  009E3A  C06A  F060         	movff	mktime@tt,?_mktime
 46700  009E3E  C06B  F061         	movff	mktime@tt+1,?_mktime+1
 46701  009E42  C06C  F062         	movff	mktime@tt+2,?_mktime+2
 46702  009E46  C06D  F063         	movff	mktime@tt+3,?_mktime+3
 46703                           
 46704                           ; BSR set to: 0
 46705  009E4A  0012               	return		;funcret
 46706  009E4C                     __end_of_mktime:
 46707                           	callstack 0
 46708                           
 46709 ;; *************** function _ymd_to_scalar *****************
 46710 ;; Defined at:
 46711 ;;		line 40 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\mktime.c"
 46712 ;; Parameters:    Size  Location     Type
 46713 ;;  yr              2   51[COMRAM] unsigned int 
 46714 ;;  mo              2   53[COMRAM] unsigned int 
 46715 ;;  day             2   55[COMRAM] unsigned int 
 46716 ;; Auto vars:     Size  Location     Type
 46717 ;;  scalar          4   63[COMRAM] long 
 46718 ;; Return value:  Size  Location     Type
 46719 ;;                  4   51[COMRAM] long 
 46720 ;; Registers used:
 46721 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 46722 ;; Tracked objects:
 46723 ;;		On entry : 0/0
 46724 ;;		On exit  : 0/0
 46725 ;;		Unchanged: 0/0
 46726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 46727 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46728 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46729 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46730 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46731 ;;Total ram usage:       16 bytes
 46732 ;; Hardware stack levels used:    1
 46733 ;; Hardware stack levels required when called:    8
 46734 ;; This function calls:
 46735 ;;		_isleap
 46736 ;;		_months_to_days
 46737 ;;		_years_to_days
 46738 ;; This function is called by:
 46739 ;;		_mktime
 46740 ;; This function uses a non-reentrant model
 46741 ;;
 46742                           
 46743                           	psect	text182
 46744  00D18C                     __ptext182:
 46745                           	callstack 0
 46746  00D18C                     _ymd_to_scalar:
 46747                           	callstack 18
 46748                           
 46749                           ; BSR set to: 0
 46750                           ;incstack = 0
 46751  00D18C  C036  F02A         	movff	ymd_to_scalar@mo,months_to_days@month
 46752  00D190  C037  F02B         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
 46753  00D194  ECE9  F076         	call	_months_to_days	;wreg free
 46754  00D198  5038               	movf	ymd_to_scalar@day^0,w,c
 46755  00D19A  262A               	addwf	?_months_to_days^0,f,c
 46756  00D19C  5039               	movf	(ymd_to_scalar@day+1)^0,w,c
 46757  00D19E  222B               	addwfc	(?_months_to_days+1)^0,f,c
 46758  00D1A0  C02A  F040         	movff	?_months_to_days,ymd_to_scalar@scalar
 46759  00D1A4  C02B  F041         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
 46760  00D1A8  6A42               	clrf	(ymd_to_scalar@scalar+2)^0,c
 46761  00D1AA  6A43               	clrf	(ymd_to_scalar@scalar+3)^0,c
 46762  00D1AC  5037               	movf	(ymd_to_scalar@mo+1)^0,w,c
 46763  00D1AE  E104               	bnz	u22110
 46764  00D1B0  0E03               	movlw	3
 46765  00D1B2  5C36               	subwf	ymd_to_scalar@mo^0,w,c
 46766  00D1B4  A0D8               	btfss	status,0,c
 46767  00D1B6  D023               	goto	l20275
 46768  00D1B8                     u22110:
 46769  00D1B8  C034  F013         	movff	ymd_to_scalar@yr,isleap@yr
 46770  00D1BC  C035  F014         	movff	ymd_to_scalar@yr+1,isleap@yr+1
 46771  00D1C0  ECC0  F072         	call	_isleap	;wreg free
 46772  00D1C4  5013               	movf	?_isleap^0,w,c
 46773  00D1C6  1014               	iorwf	(?_isleap+1)^0,w,c
 46774  00D1C8  A4D8               	btfss	status,2,c
 46775  00D1CA  D004               	goto	l20271
 46776  00D1CC  0E00               	movlw	0
 46777  00D1CE  6E3F               	movwf	(_ymd_to_scalar$8143+1)^0,c
 46778  00D1D0  0E02               	movlw	2
 46779  00D1D2  D003               	goto	L43
 46780  00D1D4                     l20271:
 46781  00D1D4  0E00               	movlw	0
 46782  00D1D6  6E3F               	movwf	(_ymd_to_scalar$8143+1)^0,c
 46783  00D1D8  0E01               	movlw	1
 46784  00D1DA                     L43:
 46785  00D1DA  6E3E               	movwf	_ymd_to_scalar$8143^0,c
 46786  00D1DC  C03E  F03A         	movff	_ymd_to_scalar$8143,??_ymd_to_scalar
 46787  00D1E0  C03F  F03B         	movff	_ymd_to_scalar$8143+1,??_ymd_to_scalar+1
 46788  00D1E4  0E00               	movlw	0
 46789  00D1E6  BE3B               	btfsc	(??_ymd_to_scalar+1)^0,7,c
 46790  00D1E8  0EFF               	movlw	255
 46791  00D1EA  6E3C               	movwf	(??_ymd_to_scalar+2)^0,c
 46792  00D1EC  6E3D               	movwf	(??_ymd_to_scalar+3)^0,c
 46793  00D1EE  503A               	movf	??_ymd_to_scalar^0,w,c
 46794  00D1F0  5E40               	subwf	ymd_to_scalar@scalar^0,f,c
 46795  00D1F2  503B               	movf	(??_ymd_to_scalar+1)^0,w,c
 46796  00D1F4  5A41               	subwfb	(ymd_to_scalar@scalar+1)^0,f,c
 46797  00D1F6  503C               	movf	(??_ymd_to_scalar+2)^0,w,c
 46798  00D1F8  5A42               	subwfb	(ymd_to_scalar@scalar+2)^0,f,c
 46799  00D1FA  503D               	movf	(??_ymd_to_scalar+3)^0,w,c
 46800  00D1FC  5A43               	subwfb	(ymd_to_scalar@scalar+3)^0,f,c
 46801  00D1FE                     l20275:
 46802  00D1FE  0634               	decf	ymd_to_scalar@yr^0,f,c
 46803  00D200  A0D8               	btfss	status,0,c
 46804  00D202  0635               	decf	(ymd_to_scalar@yr+1)^0,f,c
 46805  00D204  C034  F02A         	movff	ymd_to_scalar@yr,years_to_days@yr
 46806  00D208  C035  F02B         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
 46807  00D20C  EC19  F069         	call	_years_to_days	;wreg free
 46808  00D210  502A               	movf	?_years_to_days^0,w,c
 46809  00D212  2640               	addwf	ymd_to_scalar@scalar^0,f,c
 46810  00D214  502B               	movf	(?_years_to_days+1)^0,w,c
 46811  00D216  2241               	addwfc	(ymd_to_scalar@scalar+1)^0,f,c
 46812  00D218  502C               	movf	(?_years_to_days+2)^0,w,c
 46813  00D21A  2242               	addwfc	(ymd_to_scalar@scalar+2)^0,f,c
 46814  00D21C  502D               	movf	(?_years_to_days+3)^0,w,c
 46815  00D21E  2243               	addwfc	(ymd_to_scalar@scalar+3)^0,f,c
 46816  00D220  C040  F034         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
 46817  00D224  C041  F035         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
 46818  00D228  C042  F036         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
 46819  00D22C  C043  F037         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
 46820  00D230  0012               	return		;funcret
 46821  00D232                     __end_of_ymd_to_scalar:
 46822                           	callstack 0
 46823                           
 46824 ;; *************** function _years_to_days *****************
 46825 ;; Defined at:
 46826 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\mktime.c"
 46827 ;; Parameters:    Size  Location     Type
 46828 ;;  yr              2   41[COMRAM] unsigned int 
 46829 ;; Auto vars:     Size  Location     Type
 46830 ;;  ret             4   47[COMRAM] long 
 46831 ;; Return value:  Size  Location     Type
 46832 ;;                  4   41[COMRAM] long 
 46833 ;; Registers used:
 46834 ;;		wreg, status,2, status,0, cstack
 46835 ;; Tracked objects:
 46836 ;;		On entry : 0/0
 46837 ;;		On exit  : 0/0
 46838 ;;		Unchanged: 0/0
 46839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 46840 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46841 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46842 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46843 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46844 ;;Total ram usage:       10 bytes
 46845 ;; Hardware stack levels used:    1
 46846 ;; Hardware stack levels required when called:    7
 46847 ;; This function calls:
 46848 ;;		___lmul
 46849 ;;		___lwdiv
 46850 ;; This function is called by:
 46851 ;;		_ymd_to_scalar
 46852 ;; This function uses a non-reentrant model
 46853 ;;
 46854                           
 46855                           	psect	text183
 46856  00D232                     __ptext183:
 46857                           	callstack 0
 46858  00D232                     _years_to_days:
 46859                           	callstack 18
 46860                           
 46861                           ;incstack = 0
 46862  00D232  C02A  F00E         	movff	years_to_days@yr,___lmul@multiplier
 46863  00D236  C02B  F00F         	movff	years_to_days@yr+1,___lmul@multiplier+1
 46864  00D23A  6A10               	clrf	(___lmul@multiplier+2)^0,c
 46865  00D23C  6A11               	clrf	(___lmul@multiplier+3)^0,c
 46866  00D23E  0E6D               	movlw	109
 46867  00D240  6E12               	movwf	___lmul@multiplicand^0,c
 46868  00D242  0E01               	movlw	1
 46869  00D244  6E13               	movwf	(___lmul@multiplicand+1)^0,c
 46870  00D246  0E00               	movlw	0
 46871  00D248  6E14               	movwf	(___lmul@multiplicand+2)^0,c
 46872  00D24A  0E00               	movlw	0
 46873  00D24C  6E15               	movwf	(___lmul@multiplicand+3)^0,c
 46874  00D24E  EC16  F072         	call	___lmul	;wreg free
 46875  00D252  C00E  F030         	movff	?___lmul,years_to_days@ret
 46876  00D256  C00F  F031         	movff	?___lmul+1,years_to_days@ret+1
 46877  00D25A  C010  F032         	movff	?___lmul+2,years_to_days@ret+2
 46878  00D25E  C011  F033         	movff	?___lmul+3,years_to_days@ret+3
 46879  00D262  C02A  F023         	movff	years_to_days@yr,___lwdiv@dividend
 46880  00D266  C02B  F024         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 46881  00D26A  0E00               	movlw	0
 46882  00D26C  6E26               	movwf	(___lwdiv@divisor+1)^0,c
 46883  00D26E  0E64               	movlw	100
 46884  00D270  6E25               	movwf	___lwdiv@divisor^0,c
 46885  00D272  EC66  F073         	call	___lwdiv	;wreg free
 46886  00D276  C02A  F02E         	movff	years_to_days@yr,??_years_to_days
 46887  00D27A  C02B  F02F         	movff	years_to_days@yr+1,??_years_to_days+1
 46888  00D27E  90D8               	bcf	status,0,c
 46889  00D280  322F               	rrcf	(??_years_to_days+1)^0,f,c
 46890  00D282  322E               	rrcf	??_years_to_days^0,f,c
 46891  00D284  90D8               	bcf	status,0,c
 46892  00D286  322F               	rrcf	(??_years_to_days+1)^0,f,c
 46893  00D288  322E               	rrcf	??_years_to_days^0,f,c
 46894  00D28A  5023               	movf	?___lwdiv^0,w,c
 46895  00D28C  5E2E               	subwf	??_years_to_days^0,f,c
 46896  00D28E  5024               	movf	(?___lwdiv+1)^0,w,c
 46897  00D290  5A2F               	subwfb	(??_years_to_days+1)^0,f,c
 46898  00D292  502E               	movf	??_years_to_days^0,w,c
 46899  00D294  2630               	addwf	years_to_days@ret^0,f,c
 46900  00D296  502F               	movf	(??_years_to_days+1)^0,w,c
 46901  00D298  2231               	addwfc	(years_to_days@ret+1)^0,f,c
 46902  00D29A  0E00               	movlw	0
 46903  00D29C  2232               	addwfc	(years_to_days@ret+2)^0,f,c
 46904  00D29E  0E00               	movlw	0
 46905  00D2A0  2233               	addwfc	(years_to_days@ret+3)^0,f,c
 46906  00D2A2  C02A  F023         	movff	years_to_days@yr,___lwdiv@dividend
 46907  00D2A6  C02B  F024         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 46908  00D2AA  0E01               	movlw	1
 46909  00D2AC  6E26               	movwf	(___lwdiv@divisor+1)^0,c
 46910  00D2AE  0E90               	movlw	144
 46911  00D2B0  6E25               	movwf	___lwdiv@divisor^0,c
 46912  00D2B2  EC66  F073         	call	___lwdiv	;wreg free
 46913  00D2B6  5023               	movf	?___lwdiv^0,w,c
 46914  00D2B8  2630               	addwf	years_to_days@ret^0,f,c
 46915  00D2BA  5024               	movf	(?___lwdiv+1)^0,w,c
 46916  00D2BC  2231               	addwfc	(years_to_days@ret+1)^0,f,c
 46917  00D2BE  0E00               	movlw	0
 46918  00D2C0  2232               	addwfc	(years_to_days@ret+2)^0,f,c
 46919  00D2C2  0E00               	movlw	0
 46920  00D2C4  2233               	addwfc	(years_to_days@ret+3)^0,f,c
 46921  00D2C6  C030  F02A         	movff	years_to_days@ret,?_years_to_days
 46922  00D2CA  C031  F02B         	movff	years_to_days@ret+1,?_years_to_days+1
 46923  00D2CE  C032  F02C         	movff	years_to_days@ret+2,?_years_to_days+2
 46924  00D2D2  C033  F02D         	movff	years_to_days@ret+3,?_years_to_days+3
 46925  00D2D6  0012               	return		;funcret
 46926  00D2D8                     __end_of_years_to_days:
 46927                           	callstack 0
 46928                           
 46929 ;; *************** function ___lmul *****************
 46930 ;; Defined at:
 46931 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul32.c"
 46932 ;; Parameters:    Size  Location     Type
 46933 ;;  multiplier      4   13[COMRAM] unsigned long 
 46934 ;;  multiplicand    4   17[COMRAM] unsigned long 
 46935 ;; Auto vars:     Size  Location     Type
 46936 ;;  product         4   21[COMRAM] unsigned long 
 46937 ;; Return value:  Size  Location     Type
 46938 ;;                  4   13[COMRAM] unsigned long 
 46939 ;; Registers used:
 46940 ;;		wreg, status,2, status,0
 46941 ;; Tracked objects:
 46942 ;;		On entry : 0/0
 46943 ;;		On exit  : 0/0
 46944 ;;		Unchanged: 0/0
 46945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 46946 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46947 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46949 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 46950 ;;Total ram usage:       12 bytes
 46951 ;; Hardware stack levels used:    1
 46952 ;; Hardware stack levels required when called:    6
 46953 ;; This function calls:
 46954 ;;		Nothing
 46955 ;; This function is called by:
 46956 ;;		_clst2sect
 46957 ;;		_find_volume
 46958 ;;		_SD_SPI_MediaInitialize
 46959 ;;		_TransCoordination
 46960 ;;		_localtime
 46961 ;;		_years_to_days
 46962 ;;		_mktime
 46963 ;; This function uses a non-reentrant model
 46964 ;;
 46965                           
 46966                           	psect	text184
 46967  00E42C                     __ptext184:
 46968                           	callstack 0
 46969  00E42C                     ___lmul:
 46970                           	callstack 18
 46971                           
 46972                           ;incstack = 0
 46973  00E42C  0E00               	movlw	0
 46974  00E42E  6E16               	movwf	___lmul@product^0,c
 46975  00E430  0E00               	movlw	0
 46976  00E432  6E17               	movwf	(___lmul@product+1)^0,c
 46977  00E434  0E00               	movlw	0
 46978  00E436  6E18               	movwf	(___lmul@product+2)^0,c
 46979  00E438  0E00               	movlw	0
 46980  00E43A  6E19               	movwf	(___lmul@product+3)^0,c
 46981  00E43C                     l19259:
 46982  00E43C  A00E               	btfss	___lmul@multiplier^0,0,c
 46983  00E43E  D008               	goto	l19263
 46984  00E440  5012               	movf	___lmul@multiplicand^0,w,c
 46985  00E442  2616               	addwf	___lmul@product^0,f,c
 46986  00E444  5013               	movf	(___lmul@multiplicand+1)^0,w,c
 46987  00E446  2217               	addwfc	(___lmul@product+1)^0,f,c
 46988  00E448  5014               	movf	(___lmul@multiplicand+2)^0,w,c
 46989  00E44A  2218               	addwfc	(___lmul@product+2)^0,f,c
 46990  00E44C  5015               	movf	(___lmul@multiplicand+3)^0,w,c
 46991  00E44E  2219               	addwfc	(___lmul@product+3)^0,f,c
 46992  00E450                     l19263:
 46993  00E450  90D8               	bcf	status,0,c
 46994  00E452  3612               	rlcf	___lmul@multiplicand^0,f,c
 46995  00E454  3613               	rlcf	(___lmul@multiplicand+1)^0,f,c
 46996  00E456  3614               	rlcf	(___lmul@multiplicand+2)^0,f,c
 46997  00E458  3615               	rlcf	(___lmul@multiplicand+3)^0,f,c
 46998  00E45A  90D8               	bcf	status,0,c
 46999  00E45C  3211               	rrcf	(___lmul@multiplier+3)^0,f,c
 47000  00E45E  3210               	rrcf	(___lmul@multiplier+2)^0,f,c
 47001  00E460  320F               	rrcf	(___lmul@multiplier+1)^0,f,c
 47002  00E462  320E               	rrcf	___lmul@multiplier^0,f,c
 47003  00E464  500E               	movf	___lmul@multiplier^0,w,c
 47004  00E466  100F               	iorwf	(___lmul@multiplier+1)^0,w,c
 47005  00E468  1010               	iorwf	(___lmul@multiplier+2)^0,w,c
 47006  00E46A  1011               	iorwf	(___lmul@multiplier+3)^0,w,c
 47007  00E46C  A4D8               	btfss	status,2,c
 47008  00E46E  D7E6               	goto	l19259
 47009  00E470  C016  F00E         	movff	___lmul@product,?___lmul
 47010  00E474  C017  F00F         	movff	___lmul@product+1,?___lmul+1
 47011  00E478  C018  F010         	movff	___lmul@product+2,?___lmul+2
 47012  00E47C  C019  F011         	movff	___lmul@product+3,?___lmul+3
 47013  00E480  0012               	return		;funcret
 47014  00E482                     __end_of___lmul:
 47015                           	callstack 0
 47016                           
 47017 ;; *************** function _months_to_days *****************
 47018 ;; Defined at:
 47019 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\mktime.c"
 47020 ;; Parameters:    Size  Location     Type
 47021 ;;  month           2   41[COMRAM] unsigned int 
 47022 ;; Auto vars:     Size  Location     Type
 47023 ;;		None
 47024 ;; Return value:  Size  Location     Type
 47025 ;;                  2   41[COMRAM] unsigned int 
 47026 ;; Registers used:
 47027 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 47028 ;; Tracked objects:
 47029 ;;		On entry : 0/0
 47030 ;;		On exit  : 0/0
 47031 ;;		Unchanged: 0/0
 47032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47036 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47037 ;;Total ram usage:        2 bytes
 47038 ;; Hardware stack levels used:    1
 47039 ;; Hardware stack levels required when called:    7
 47040 ;; This function calls:
 47041 ;;		___lwdiv
 47042 ;;		___wmul
 47043 ;; This function is called by:
 47044 ;;		_ymd_to_scalar
 47045 ;; This function uses a non-reentrant model
 47046 ;;
 47047                           
 47048                           	psect	text185
 47049  00EDD2                     __ptext185:
 47050                           	callstack 0
 47051  00EDD2                     _months_to_days:
 47052                           	callstack 18
 47053                           
 47054                           ;incstack = 0
 47055  00EDD2  C02A  F01D         	movff	months_to_days@month,___wmul@multiplier
 47056  00EDD6  C02B  F01E         	movff	months_to_days@month+1,___wmul@multiplier+1
 47057  00EDDA  0E0B               	movlw	11
 47058  00EDDC  6E20               	movwf	(___wmul@multiplicand+1)^0,c
 47059  00EDDE  0EF1               	movlw	241
 47060  00EDE0  6E1F               	movwf	___wmul@multiplicand^0,c
 47061  00EDE2  EC12  F079         	call	___wmul	;wreg free
 47062  00EDE6  0E41               	movlw	65
 47063  00EDE8  241D               	addwf	?___wmul^0,w,c
 47064  00EDEA  6E23               	movwf	___lwdiv@dividend^0,c
 47065  00EDEC  0EF4               	movlw	244
 47066  00EDEE  201E               	addwfc	(?___wmul+1)^0,w,c
 47067  00EDF0  6E24               	movwf	(___lwdiv@dividend+1)^0,c
 47068  00EDF2  0E00               	movlw	0
 47069  00EDF4  6E26               	movwf	(___lwdiv@divisor+1)^0,c
 47070  00EDF6  0E64               	movlw	100
 47071  00EDF8  6E25               	movwf	___lwdiv@divisor^0,c
 47072  00EDFA  EC66  F073         	call	___lwdiv	;wreg free
 47073  00EDFE  C023  F02A         	movff	?___lwdiv,?_months_to_days
 47074  00EE02  C024  F02B         	movff	?___lwdiv+1,?_months_to_days+1
 47075  00EE06  0012               	return		;funcret
 47076  00EE08                     __end_of_months_to_days:
 47077                           	callstack 0
 47078                           
 47079 ;; *************** function ___wmul *****************
 47080 ;; Defined at:
 47081 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul16.c"
 47082 ;; Parameters:    Size  Location     Type
 47083 ;;  multiplier      2   28[COMRAM] unsigned int 
 47084 ;;  multiplicand    2   30[COMRAM] unsigned int 
 47085 ;; Auto vars:     Size  Location     Type
 47086 ;;  product         2   32[COMRAM] unsigned int 
 47087 ;; Return value:  Size  Location     Type
 47088 ;;                  2   28[COMRAM] unsigned int 
 47089 ;; Registers used:
 47090 ;;		wreg, status,2, status,0, prodl, prodh
 47091 ;; Tracked objects:
 47092 ;;		On entry : 0/0
 47093 ;;		On exit  : 0/0
 47094 ;;		Unchanged: 0/0
 47095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47096 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47097 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47099 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47100 ;;Total ram usage:        6 bytes
 47101 ;; Hardware stack levels used:    1
 47102 ;; Hardware stack levels required when called:    6
 47103 ;; This function calls:
 47104 ;;		Nothing
 47105 ;; This function is called by:
 47106 ;;		_NormalProc
 47107 ;;		_SettingProc
 47108 ;;		_DrawAnalogClock
 47109 ;;		_drawAlarmTime
 47110 ;;		_display_putc
 47111 ;;		_display_fillTriangle
 47112 ;;		_sprintf
 47113 ;;		_months_to_days
 47114 ;;		_asctime
 47115 ;; This function uses a non-reentrant model
 47116 ;;
 47117                           
 47118                           	psect	text186
 47119  00F224                     __ptext186:
 47120                           	callstack 0
 47121  00F224                     ___wmul:
 47122                           	callstack 18
 47123                           
 47124                           ;incstack = 0
 47125  00F224  501D               	movf	___wmul@multiplier^0,w,c
 47126  00F226  021F               	mulwf	___wmul@multiplicand^0,c
 47127  00F228  CFF3 F021          	movff	prodl,___wmul@product
 47128  00F22C  CFF4 F022          	movff	prodh,___wmul@product+1
 47129  00F230  501D               	movf	___wmul@multiplier^0,w,c
 47130  00F232  0220               	mulwf	(___wmul@multiplicand+1)^0,c
 47131  00F234  50F3               	movf	243,w,c
 47132  00F236  2622               	addwf	(___wmul@product+1)^0,f,c
 47133  00F238  501E               	movf	(___wmul@multiplier+1)^0,w,c
 47134  00F23A  021F               	mulwf	___wmul@multiplicand^0,c
 47135  00F23C  50F3               	movf	243,w,c
 47136  00F23E  2622               	addwf	(___wmul@product+1)^0,f,c
 47137  00F240  C021  F01D         	movff	___wmul@product,?___wmul
 47138  00F244  C022  F01E         	movff	___wmul@product+1,?___wmul+1
 47139  00F248  0012               	return		;funcret
 47140  00F24A                     __end_of___wmul:
 47141                           	callstack 0
 47142                           
 47143 ;; *************** function ___lwdiv *****************
 47144 ;; Defined at:
 47145 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwdiv.c"
 47146 ;; Parameters:    Size  Location     Type
 47147 ;;  dividend        2   34[COMRAM] unsigned int 
 47148 ;;  divisor         2   36[COMRAM] unsigned int 
 47149 ;; Auto vars:     Size  Location     Type
 47150 ;;  quotient        2   39[COMRAM] unsigned int 
 47151 ;;  counter         1   38[COMRAM] unsigned char 
 47152 ;; Return value:  Size  Location     Type
 47153 ;;                  2   34[COMRAM] unsigned int 
 47154 ;; Registers used:
 47155 ;;		wreg, status,2, status,0
 47156 ;; Tracked objects:
 47157 ;;		On entry : 0/1
 47158 ;;		On exit  : 0/0
 47159 ;;		Unchanged: 0/0
 47160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47161 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47162 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47164 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47165 ;;Total ram usage:        7 bytes
 47166 ;; Hardware stack levels used:    1
 47167 ;; Hardware stack levels required when called:    6
 47168 ;; This function calls:
 47169 ;;		Nothing
 47170 ;; This function is called by:
 47171 ;;		_DrawAnalogClock
 47172 ;;		_GetTouchLocation
 47173 ;;		_sprintf
 47174 ;;		_months_to_days
 47175 ;;		_years_to_days
 47176 ;; This function uses a non-reentrant model
 47177 ;;
 47178                           
 47179                           	psect	text187
 47180  00E6CC                     __ptext187:
 47181                           	callstack 0
 47182  00E6CC                     ___lwdiv:
 47183                           	callstack 18
 47184                           
 47185                           ;incstack = 0
 47186  00E6CC  0E00               	movlw	0
 47187  00E6CE  6E29               	movwf	(___lwdiv@quotient+1)^0,c
 47188  00E6D0  0E00               	movlw	0
 47189  00E6D2  6E28               	movwf	___lwdiv@quotient^0,c
 47190  00E6D4  5025               	movf	___lwdiv@divisor^0,w,c
 47191  00E6D6  1026               	iorwf	(___lwdiv@divisor+1)^0,w,c
 47192  00E6D8  B4D8               	btfsc	status,2,c
 47193  00E6DA  D01C               	goto	l4126
 47194  00E6DC  0E01               	movlw	1
 47195  00E6DE  6E27               	movwf	___lwdiv@counter^0,c
 47196  00E6E0  D004               	goto	l19319
 47197  00E6E2                     l19317:
 47198  00E6E2  90D8               	bcf	status,0,c
 47199  00E6E4  3625               	rlcf	___lwdiv@divisor^0,f,c
 47200  00E6E6  3626               	rlcf	(___lwdiv@divisor+1)^0,f,c
 47201  00E6E8  2A27               	incf	___lwdiv@counter^0,f,c
 47202  00E6EA                     l19319:
 47203  00E6EA  AE26               	btfss	(___lwdiv@divisor+1)^0,7,c
 47204  00E6EC  D7FA               	goto	l19317
 47205  00E6EE                     u20710:
 47206  00E6EE  90D8               	bcf	status,0,c
 47207  00E6F0  3628               	rlcf	___lwdiv@quotient^0,f,c
 47208  00E6F2  3629               	rlcf	(___lwdiv@quotient+1)^0,f,c
 47209  00E6F4  5025               	movf	___lwdiv@divisor^0,w,c
 47210  00E6F6  5C23               	subwf	___lwdiv@dividend^0,w,c
 47211  00E6F8  5026               	movf	(___lwdiv@divisor+1)^0,w,c
 47212  00E6FA  5824               	subwfb	(___lwdiv@dividend+1)^0,w,c
 47213  00E6FC  A0D8               	btfss	status,0,c
 47214  00E6FE  D005               	goto	l19329
 47215  00E700  5025               	movf	___lwdiv@divisor^0,w,c
 47216  00E702  5E23               	subwf	___lwdiv@dividend^0,f,c
 47217  00E704  5026               	movf	(___lwdiv@divisor+1)^0,w,c
 47218  00E706  5A24               	subwfb	(___lwdiv@dividend+1)^0,f,c
 47219  00E708  8028               	bsf	___lwdiv@quotient^0,0,c
 47220  00E70A                     l19329:
 47221  00E70A  90D8               	bcf	status,0,c
 47222  00E70C  3226               	rrcf	(___lwdiv@divisor+1)^0,f,c
 47223  00E70E  3225               	rrcf	___lwdiv@divisor^0,f,c
 47224  00E710  2E27               	decfsz	___lwdiv@counter^0,f,c
 47225  00E712  D7ED               	goto	u20710
 47226  00E714                     l4126:
 47227  00E714  C028  F023         	movff	___lwdiv@quotient,?___lwdiv
 47228  00E718  C029  F024         	movff	___lwdiv@quotient+1,?___lwdiv+1
 47229  00E71C  0012               	return		;funcret
 47230  00E71E                     __end_of___lwdiv:
 47231                           	callstack 0
 47232                           
 47233 ;; *************** function _isleap *****************
 47234 ;; Defined at:
 47235 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\mktime.c"
 47236 ;; Parameters:    Size  Location     Type
 47237 ;;  yr              2   18[COMRAM] unsigned int 
 47238 ;; Auto vars:     Size  Location     Type
 47239 ;;		None
 47240 ;; Return value:  Size  Location     Type
 47241 ;;                  2   18[COMRAM] int 
 47242 ;; Registers used:
 47243 ;;		wreg, status,2, status,0, cstack
 47244 ;; Tracked objects:
 47245 ;;		On entry : 0/0
 47246 ;;		On exit  : 0/0
 47247 ;;		Unchanged: 0/0
 47248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47249 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47251 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47252 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47253 ;;Total ram usage:        4 bytes
 47254 ;; Hardware stack levels used:    1
 47255 ;; Hardware stack levels required when called:    7
 47256 ;; This function calls:
 47257 ;;		___lwmod
 47258 ;; This function is called by:
 47259 ;;		_ymd_to_scalar
 47260 ;; This function uses a non-reentrant model
 47261 ;;
 47262                           
 47263                           	psect	text188
 47264  00E580                     __ptext188:
 47265                           	callstack 0
 47266  00E580                     _isleap:
 47267                           	callstack 18
 47268                           
 47269                           ;incstack = 0
 47270  00E580  0E01               	movlw	1
 47271  00E582  6E16               	movwf	_isleap$8130^0,c
 47272  00E584  C013  F00E         	movff	isleap@yr,___lwmod@dividend
 47273  00E588  C014  F00F         	movff	isleap@yr+1,___lwmod@dividend+1
 47274  00E58C  0E01               	movlw	1
 47275  00E58E  6E11               	movwf	(___lwmod@divisor+1)^0,c
 47276  00E590  0E90               	movlw	144
 47277  00E592  6E10               	movwf	___lwmod@divisor^0,c
 47278  00E594  EC42  F075         	call	___lwmod	;wreg free
 47279  00E598  500E               	movf	?___lwmod^0,w,c
 47280  00E59A  100F               	iorwf	(?___lwmod+1)^0,w,c
 47281  00E59C  B4D8               	btfsc	status,2,c
 47282  00E59E  D016               	goto	l19851
 47283  00E5A0  C013  F015         	movff	isleap@yr,??_isleap
 47284  00E5A4  0E03               	movlw	3
 47285  00E5A6  1615               	andwf	??_isleap^0,f,c
 47286  00E5A8  A4D8               	btfss	status,2,c
 47287  00E5AA  D00E               	goto	u21470
 47288  00E5AC  C013  F00E         	movff	isleap@yr,___lwmod@dividend
 47289  00E5B0  C014  F00F         	movff	isleap@yr+1,___lwmod@dividend+1
 47290  00E5B4  0E00               	movlw	0
 47291  00E5B6  6E11               	movwf	(___lwmod@divisor+1)^0,c
 47292  00E5B8  0E64               	movlw	100
 47293  00E5BA  6E10               	movwf	___lwmod@divisor^0,c
 47294  00E5BC  EC42  F075         	call	___lwmod	;wreg free
 47295  00E5C0  500E               	movf	?___lwmod^0,w,c
 47296  00E5C2  100F               	iorwf	(?___lwmod+1)^0,w,c
 47297  00E5C4  A4D8               	btfss	status,2,c
 47298  00E5C6  D002               	goto	l19851
 47299  00E5C8                     u21470:
 47300  00E5C8  0E00               	movlw	0
 47301  00E5CA  6E16               	movwf	_isleap$8130^0,c
 47302  00E5CC                     l19851:
 47303  00E5CC  C016  F013         	movff	_isleap$8130,?_isleap
 47304  00E5D0  6A14               	clrf	(?_isleap+1)^0,c
 47305  00E5D2  0012               	return		;funcret
 47306  00E5D4                     __end_of_isleap:
 47307                           	callstack 0
 47308                           
 47309 ;; *************** function _localtime *****************
 47310 ;; Defined at:
 47311 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ctime.c"
 47312 ;; Parameters:    Size  Location     Type
 47313 ;;  tp              1   48[COMRAM] PTR const long 
 47314 ;;		 -> getWeekdays@tim(4), 
 47315 ;; Auto vars:     Size  Location     Type
 47316 ;;  t               4   50[COMRAM] long 
 47317 ;; Return value:  Size  Location     Type
 47318 ;;                  2   48[COMRAM] PTR struct tm
 47319 ;; Registers used:
 47320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 47321 ;; Tracked objects:
 47322 ;;		On entry : 3F/0
 47323 ;;		On exit  : 3F/3
 47324 ;;		Unchanged: 0/0
 47325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47326 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47327 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47329 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47330 ;;Total ram usage:        6 bytes
 47331 ;; Hardware stack levels used:    1
 47332 ;; Hardware stack levels required when called:    9
 47333 ;; This function calls:
 47334 ;;		_gmtime
 47335 ;; This function is called by:
 47336 ;;		_getWeekdays
 47337 ;; This function uses a non-reentrant model
 47338 ;;
 47339                           
 47340                           	psect	text189
 47341  00F1D6                     __ptext189:
 47342                           	callstack 0
 47343  00F1D6                     _localtime:
 47344                           	callstack 18
 47345                           
 47346                           ; BSR set to: 0
 47347                           
 47348                           ;incstack = 0
 47349  00F1D6  5031               	movf	localtime@tp^0,w,c
 47350  00F1D8  6ED9               	movwf	fsr2l,c
 47351  00F1DA  6ADA               	clrf	fsr2h,c
 47352  00F1DC  CFDE F033          	movff	postinc2,localtime@t
 47353  00F1E0  CFDE F034          	movff	postinc2,localtime@t+1
 47354  00F1E4  CFDE F035          	movff	postinc2,localtime@t+2
 47355  00F1E8  CFDE F036          	movff	postinc2,localtime@t+3
 47356                           
 47357                           ; BSR set to: 0
 47358  00F1EC  0E33               	movlw	low localtime@t
 47359  00F1EE  6E28               	movwf	gmtime@tp^0,c
 47360  00F1F0  EC19  F04D         	call	_gmtime	;wreg free
 47361  00F1F4  C028  F031         	movff	?_gmtime,?_localtime
 47362  00F1F8  C029  F032         	movff	?_gmtime+1,?_localtime+1
 47363                           
 47364                           ; BSR set to: 3
 47365  00F1FC  0012               	return		;funcret
 47366  00F1FE                     __end_of_localtime:
 47367                           	callstack 0
 47368                           
 47369 ;; *************** function _gmtime *****************
 47370 ;; Defined at:
 47371 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ctime.c"
 47372 ;; Parameters:    Size  Location     Type
 47373 ;;  tp              1   39[COMRAM] PTR const long 
 47374 ;;		 -> localtime@t(4), 
 47375 ;; Auto vars:     Size  Location     Type
 47376 ;;  tc              4   44[COMRAM] struct .
 47377 ;; Return value:  Size  Location     Type
 47378 ;;                  2   39[COMRAM] PTR struct tm
 47379 ;; Registers used:
 47380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 47381 ;; Tracked objects:
 47382 ;;		On entry : 3F/0
 47383 ;;		On exit  : 3F/3
 47384 ;;		Unchanged: 0/0
 47385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47387 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47388 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47389 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47390 ;;Total ram usage:        9 bytes
 47391 ;; Hardware stack levels used:    1
 47392 ;; Hardware stack levels required when called:    8
 47393 ;; This function calls:
 47394 ;;		___aldiv
 47395 ;;		___almod
 47396 ;;		___awmod
 47397 ;;		_dylen
 47398 ;; This function is called by:
 47399 ;;		_localtime
 47400 ;; This function uses a non-reentrant model
 47401 ;;
 47402                           
 47403                           	psect	text190
 47404  009A32                     __ptext190:
 47405                           	callstack 0
 47406  009A32                     _gmtime:
 47407                           	callstack 18
 47408                           
 47409                           ; BSR set to: 0
 47410                           
 47411                           ; BSR set to: 3
 47412                           ;incstack = 0
 47413  009A32  5028               	movf	gmtime@tp^0,w,c
 47414  009A34  6ED9               	movwf	fsr2l,c
 47415  009A36  6ADA               	clrf	fsr2h,c
 47416  009A38  CFDE F02D          	movff	postinc2,gmtime@tc
 47417  009A3C  CFDE F02E          	movff	postinc2,gmtime@tc+1
 47418  009A40  CFDE F02F          	movff	postinc2,gmtime@tc+2
 47419  009A44  CFDE F030          	movff	postinc2,gmtime@tc+3
 47420                           
 47421                           ; BSR set to: 0
 47422  009A48  C02D  F00E         	movff	gmtime@tc,___almod@dividend
 47423  009A4C  C02E  F00F         	movff	gmtime@tc+1,___almod@dividend+1
 47424  009A50  C02F  F010         	movff	gmtime@tc+2,___almod@dividend+2
 47425  009A54  C030  F011         	movff	gmtime@tc+3,___almod@dividend+3
 47426  009A58  0E3C               	movlw	60
 47427  009A5A  6E12               	movwf	___almod@divisor^0,c
 47428  009A5C  0E00               	movlw	0
 47429  009A5E  6E13               	movwf	(___almod@divisor+1)^0,c
 47430  009A60  0E00               	movlw	0
 47431  009A62  6E14               	movwf	(___almod@divisor+2)^0,c
 47432  009A64  0E00               	movlw	0
 47433  009A66  6E15               	movwf	(___almod@divisor+3)^0,c
 47434  009A68  ECC7  F067         	call	___almod	;wreg free
 47435  009A6C  C00E  F3A9         	movff	?___almod,gmtime@tim
 47436  009A70  C00F  F3AA         	movff	?___almod+1,gmtime@tim+1
 47437  009A74  C02D  F01A         	movff	gmtime@tc,___aldiv@dividend
 47438  009A78  C02E  F01B         	movff	gmtime@tc+1,___aldiv@dividend+1
 47439  009A7C  C02F  F01C         	movff	gmtime@tc+2,___aldiv@dividend+2
 47440  009A80  C030  F01D         	movff	gmtime@tc+3,___aldiv@dividend+3
 47441  009A84  0E3C               	movlw	60
 47442  009A86  6E1E               	movwf	___aldiv@divisor^0,c
 47443  009A88  0E00               	movlw	0
 47444  009A8A  6E1F               	movwf	(___aldiv@divisor+1)^0,c
 47445  009A8C  0E00               	movlw	0
 47446  009A8E  6E20               	movwf	(___aldiv@divisor+2)^0,c
 47447  009A90  0E00               	movlw	0
 47448  009A92  6E21               	movwf	(___aldiv@divisor+3)^0,c
 47449  009A94  EC66  F063         	call	___aldiv	;wreg free
 47450  009A98  C01A  F02D         	movff	?___aldiv,gmtime@tc
 47451  009A9C  C01B  F02E         	movff	?___aldiv+1,gmtime@tc+1
 47452  009AA0  C01C  F02F         	movff	?___aldiv+2,gmtime@tc+2
 47453  009AA4  C01D  F030         	movff	?___aldiv+3,gmtime@tc+3
 47454  009AA8  C02D  F00E         	movff	gmtime@tc,___almod@dividend
 47455  009AAC  C02E  F00F         	movff	gmtime@tc+1,___almod@dividend+1
 47456  009AB0  C02F  F010         	movff	gmtime@tc+2,___almod@dividend+2
 47457  009AB4  C030  F011         	movff	gmtime@tc+3,___almod@dividend+3
 47458  009AB8  0E3C               	movlw	60
 47459  009ABA  6E12               	movwf	___almod@divisor^0,c
 47460  009ABC  0E00               	movlw	0
 47461  009ABE  6E13               	movwf	(___almod@divisor+1)^0,c
 47462  009AC0  0E00               	movlw	0
 47463  009AC2  6E14               	movwf	(___almod@divisor+2)^0,c
 47464  009AC4  0E00               	movlw	0
 47465  009AC6  6E15               	movwf	(___almod@divisor+3)^0,c
 47466  009AC8  ECC7  F067         	call	___almod	;wreg free
 47467  009ACC  C00E  F3AB         	movff	?___almod,gmtime@tim+2
 47468  009AD0  C00F  F3AC         	movff	?___almod+1,gmtime@tim+3
 47469  009AD4  C02D  F01A         	movff	gmtime@tc,___aldiv@dividend
 47470  009AD8  C02E  F01B         	movff	gmtime@tc+1,___aldiv@dividend+1
 47471  009ADC  C02F  F01C         	movff	gmtime@tc+2,___aldiv@dividend+2
 47472  009AE0  C030  F01D         	movff	gmtime@tc+3,___aldiv@dividend+3
 47473  009AE4  0E3C               	movlw	60
 47474  009AE6  6E1E               	movwf	___aldiv@divisor^0,c
 47475  009AE8  0E00               	movlw	0
 47476  009AEA  6E1F               	movwf	(___aldiv@divisor+1)^0,c
 47477  009AEC  0E00               	movlw	0
 47478  009AEE  6E20               	movwf	(___aldiv@divisor+2)^0,c
 47479  009AF0  0E00               	movlw	0
 47480  009AF2  6E21               	movwf	(___aldiv@divisor+3)^0,c
 47481  009AF4  EC66  F063         	call	___aldiv	;wreg free
 47482  009AF8  C01A  F02D         	movff	?___aldiv,gmtime@tc
 47483  009AFC  C01B  F02E         	movff	?___aldiv+1,gmtime@tc+1
 47484  009B00  C01C  F02F         	movff	?___aldiv+2,gmtime@tc+2
 47485  009B04  C01D  F030         	movff	?___aldiv+3,gmtime@tc+3
 47486  009B08  C02D  F00E         	movff	gmtime@tc,___almod@dividend
 47487  009B0C  C02E  F00F         	movff	gmtime@tc+1,___almod@dividend+1
 47488  009B10  C02F  F010         	movff	gmtime@tc+2,___almod@dividend+2
 47489  009B14  C030  F011         	movff	gmtime@tc+3,___almod@dividend+3
 47490  009B18  0E18               	movlw	24
 47491  009B1A  6E12               	movwf	___almod@divisor^0,c
 47492  009B1C  0E00               	movlw	0
 47493  009B1E  6E13               	movwf	(___almod@divisor+1)^0,c
 47494  009B20  0E00               	movlw	0
 47495  009B22  6E14               	movwf	(___almod@divisor+2)^0,c
 47496  009B24  0E00               	movlw	0
 47497  009B26  6E15               	movwf	(___almod@divisor+3)^0,c
 47498  009B28  ECC7  F067         	call	___almod	;wreg free
 47499  009B2C  C00E  F3AD         	movff	?___almod,gmtime@tim+4
 47500  009B30  C00F  F3AE         	movff	?___almod+1,gmtime@tim+5
 47501  009B34  C02D  F01A         	movff	gmtime@tc,___aldiv@dividend
 47502  009B38  C02E  F01B         	movff	gmtime@tc+1,___aldiv@dividend+1
 47503  009B3C  C02F  F01C         	movff	gmtime@tc+2,___aldiv@dividend+2
 47504  009B40  C030  F01D         	movff	gmtime@tc+3,___aldiv@dividend+3
 47505  009B44  0E18               	movlw	24
 47506  009B46  6E1E               	movwf	___aldiv@divisor^0,c
 47507  009B48  0E00               	movlw	0
 47508  009B4A  6E1F               	movwf	(___aldiv@divisor+1)^0,c
 47509  009B4C  0E00               	movlw	0
 47510  009B4E  6E20               	movwf	(___aldiv@divisor+2)^0,c
 47511  009B50  0E00               	movlw	0
 47512  009B52  6E21               	movwf	(___aldiv@divisor+3)^0,c
 47513  009B54  EC66  F063         	call	___aldiv	;wreg free
 47514  009B58  C01A  F3AF         	movff	?___aldiv,gmtime@tim+6
 47515  009B5C  C01B  F3B0         	movff	?___aldiv+1,gmtime@tim+7
 47516  009B60  0E04               	movlw	4
 47517  009B62  0103               	movlb	3	; () banked
 47518  009B64  25AF               	addwf	(gmtime@tim+6)& (0+255),w,b
 47519  009B66  6E0E               	movwf	___awmod@dividend^0,c
 47520  009B68  0E00               	movlw	0
 47521  009B6A  21B0               	addwfc	(gmtime@tim+7)& (0+255),w,b
 47522  009B6C  6E0F               	movwf	(___awmod@dividend+1)^0,c
 47523  009B6E  0E00               	movlw	0
 47524  009B70  6E11               	movwf	(___awmod@divisor+1)^0,c
 47525  009B72  0E07               	movlw	7
 47526  009B74  6E10               	movwf	___awmod@divisor^0,c
 47527  009B76  ECC7  F06E         	call	___awmod	;wreg free
 47528  009B7A  C00E  F3B5         	movff	?___awmod,gmtime@tim+12
 47529  009B7E  C00F  F3B6         	movff	?___awmod+1,gmtime@tim+13
 47530  009B82  0E00               	movlw	0
 47531  009B84  0103               	movlb	3	; () banked
 47532  009B86  6FB4               	movwf	(gmtime@tim+11)& (0+255),b
 47533  009B88  0E46               	movlw	70
 47534  009B8A  6FB3               	movwf	(gmtime@tim+10)& (0+255),b
 47535  009B8C  D00D               	goto	l20241
 47536  009B8E                     l20237:
 47537                           
 47538                           ; BSR set to: 3
 47539  009B8E  C3B3  F013         	movff	gmtime@tim+10,dylen@yr
 47540  009B92  C3B4  F014         	movff	gmtime@tim+11,dylen@yr+1
 47541  009B96  EC64  F071         	call	_dylen	;wreg free
 47542  009B9A  5013               	movf	?_dylen^0,w,c
 47543  009B9C  0103               	movlb	3	; () banked
 47544  009B9E  5FAF               	subwf	(gmtime@tim+6)& (0+255),f,b
 47545  009BA0  5014               	movf	(?_dylen+1)^0,w,c
 47546  009BA2  5BB0               	subwfb	(gmtime@tim+7)& (0+255),f,b
 47547                           
 47548                           ; BSR set to: 3
 47549  009BA4  4BB3               	infsnz	(gmtime@tim+10)& (0+255),f,b
 47550  009BA6  2BB4               	incf	(gmtime@tim+11)& (0+255),f,b
 47551  009BA8                     l20241:
 47552                           
 47553                           ; BSR set to: 3
 47554  009BA8  C3B3  F013         	movff	gmtime@tim+10,dylen@yr
 47555  009BAC  C3B4  F014         	movff	gmtime@tim+11,dylen@yr+1
 47556  009BB0  EC64  F071         	call	_dylen	;wreg free
 47557  009BB4  5013               	movf	?_dylen^0,w,c
 47558  009BB6  0103               	movlb	3	; () banked
 47559  009BB8  5DAF               	subwf	(gmtime@tim+6)& (0+255),w,b
 47560  009BBA  51B0               	movf	(gmtime@tim+7)& (0+255),w,b
 47561  009BBC  0A80               	xorlw	128
 47562  009BBE  6E2A               	movwf	??_gmtime^0,c
 47563  009BC0  5014               	movf	(?_dylen+1)^0,w,c
 47564  009BC2  0A80               	xorlw	128
 47565  009BC4  582A               	subwfb	??_gmtime^0,w,c
 47566  009BC6  B0D8               	btfsc	status,0,c
 47567  009BC8  D7E2               	goto	l20237
 47568                           
 47569                           ; BSR set to: 3
 47570  009BCA  C3B3  F013         	movff	gmtime@tim+10,dylen@yr
 47571  009BCE  C3B4  F014         	movff	gmtime@tim+11,dylen@yr+1
 47572  009BD2  EC64  F071         	call	_dylen	;wreg free
 47573  009BD6  5013               	movf	?_dylen^0,w,c
 47574  009BD8  0B02               	andlw	2
 47575  009BDA  6E2D               	movwf	gmtime@tc^0,c
 47576  009BDC  C3AF  F3B7         	movff	gmtime@tim+6,gmtime@tim+14
 47577  009BE0  C3B0  F3B8         	movff	gmtime@tim+7,gmtime@tim+15
 47578  009BE4  0E00               	movlw	0
 47579  009BE6  0103               	movlb	3	; () banked
 47580  009BE8  6FB2               	movwf	(gmtime@tim+9)& (0+255),b
 47581  009BEA  0E00               	movlw	0
 47582  009BEC  6FB1               	movwf	(gmtime@tim+8)& (0+255),b
 47583  009BEE  D008               	goto	l20255
 47584  009BF0                     l20249:
 47585                           
 47586                           ; BSR set to: 3
 47587  009BF0  502E               	movf	(gmtime@tc+1)^0,w,c
 47588  009BF2  5FAF               	subwf	(gmtime@tim+6)& (0+255),f,b
 47589  009BF4  0E00               	movlw	0
 47590  009BF6  5BB0               	subwfb	(gmtime@tim+7)& (0+255),f,b
 47591                           
 47592                           ; BSR set to: 3
 47593  009BF8  4BB1               	infsnz	(gmtime@tim+8)& (0+255),f,b
 47594  009BFA  2BB2               	incf	(gmtime@tim+9)& (0+255),f,b
 47595                           
 47596                           ; BSR set to: 3
 47597  009BFC  90D8               	bcf	status,0,c
 47598  009BFE  322D               	rrcf	gmtime@tc^0,f,c
 47599  009C00                     l20255:
 47600                           
 47601                           ; BSR set to: 3
 47602  009C00  0EA3               	movlw	low _moninit
 47603  009C02  25B1               	addwf	(gmtime@tim+8)& (0+255),w,b
 47604  009C04  6EF6               	movwf	tblptrl,c
 47605  009C06  0EFA               	movlw	high _moninit
 47606  009C08  21B2               	addwfc	(gmtime@tim+9)& (0+255),w,b
 47607  009C0A  6EF7               	movwf	tblptrh,c
 47608  009C0C                     	if	1	;There are 3 active tblptr bytes
 47609  009C0C  6AF8               	clrf	tblptru,c
 47610  009C0E  0E00               	movlw	low (__mediumconst shr (0+16))
 47611  009C10  22F8               	addwfc	tblptru,f,c
 47612  009C12                     	endif
 47613  009C12  0008               	tblrd		*
 47614  009C14  50F5               	movf	tablat,w,c
 47615  009C16  102D               	iorwf	gmtime@tc^0,w,c
 47616  009C18  6E2E               	movwf	(gmtime@tc+1)^0,c
 47617  009C1A  502E               	movf	(gmtime@tc+1)^0,w,c
 47618  009C1C  6E2A               	movwf	??_gmtime^0,c
 47619  009C1E  6A2B               	clrf	(??_gmtime+1)^0,c
 47620  009C20  502A               	movf	??_gmtime^0,w,c
 47621  009C22  5DAF               	subwf	(gmtime@tim+6)& (0+255),w,b
 47622  009C24  51B0               	movf	(gmtime@tim+7)& (0+255),w,b
 47623  009C26  0A80               	xorlw	128
 47624  009C28  6E2C               	movwf	(??_gmtime+2)^0,c
 47625  009C2A  502B               	movf	(??_gmtime+1)^0,w,c
 47626  009C2C  0A80               	xorlw	128
 47627  009C2E  582C               	subwfb	(??_gmtime+2)^0,w,c
 47628  009C30  B0D8               	btfsc	status,0,c
 47629  009C32  D7DE               	goto	l20249
 47630                           
 47631                           ; BSR set to: 3
 47632  009C34  4BAF               	infsnz	(gmtime@tim+6)& (0+255),f,b
 47633  009C36  2BB0               	incf	(gmtime@tim+7)& (0+255),f,b
 47634                           
 47635                           ; BSR set to: 3
 47636  009C38  0EA9               	movlw	low gmtime@tim
 47637  009C3A  6E28               	movwf	?_gmtime^0,c
 47638  009C3C  0E03               	movlw	high gmtime@tim
 47639  009C3E  6E29               	movwf	(?_gmtime+1)^0,c
 47640                           
 47641                           ; BSR set to: 3
 47642  009C40  0012               	return		;funcret
 47643  009C42                     __end_of_gmtime:
 47644                           	callstack 0
 47645                           
 47646 ;; *************** function _dylen *****************
 47647 ;; Defined at:
 47648 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\ctime.c"
 47649 ;; Parameters:    Size  Location     Type
 47650 ;;  yr              2   18[COMRAM] unsigned int 
 47651 ;; Auto vars:     Size  Location     Type
 47652 ;;		None
 47653 ;; Return value:  Size  Location     Type
 47654 ;;                  2   18[COMRAM] int 
 47655 ;; Registers used:
 47656 ;;		wreg, status,2, status,0, cstack
 47657 ;; Tracked objects:
 47658 ;;		On entry : 3C/3
 47659 ;;		On exit  : 0/0
 47660 ;;		Unchanged: 0/0
 47661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47662 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47664 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47665 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47666 ;;Total ram usage:        3 bytes
 47667 ;; Hardware stack levels used:    1
 47668 ;; Hardware stack levels required when called:    7
 47669 ;; This function calls:
 47670 ;;		___lwmod
 47671 ;; This function is called by:
 47672 ;;		_gmtime
 47673 ;; This function uses a non-reentrant model
 47674 ;;
 47675                           
 47676                           	psect	text191
 47677  00E2C8                     __ptext191:
 47678                           	callstack 0
 47679  00E2C8                     _dylen:
 47680                           	callstack 18
 47681                           
 47682                           ; BSR set to: 3
 47683                           ;incstack = 0
 47684  00E2C8  C013  F015         	movff	dylen@yr,??_dylen
 47685  00E2CC  0E03               	movlw	3
 47686  00E2CE  1615               	andwf	??_dylen^0,f,c
 47687  00E2D0  A4D8               	btfss	status,2,c
 47688  00E2D2  D01E               	goto	u21440
 47689  00E2D4  C013  F00E         	movff	dylen@yr,___lwmod@dividend
 47690  00E2D8  C014  F00F         	movff	dylen@yr+1,___lwmod@dividend+1
 47691  00E2DC  0E00               	movlw	0
 47692  00E2DE  6E11               	movwf	(___lwmod@divisor+1)^0,c
 47693  00E2E0  0E64               	movlw	100
 47694  00E2E2  6E10               	movwf	___lwmod@divisor^0,c
 47695  00E2E4  EC42  F075         	call	___lwmod	;wreg free
 47696  00E2E8  500E               	movf	?___lwmod^0,w,c
 47697  00E2EA  100F               	iorwf	(?___lwmod+1)^0,w,c
 47698  00E2EC  A4D8               	btfss	status,2,c
 47699  00E2EE  D015               	goto	l19837
 47700  00E2F0  0E2C               	movlw	44
 47701  00E2F2  2413               	addwf	dylen@yr^0,w,c
 47702  00E2F4  6E0E               	movwf	___lwmod@dividend^0,c
 47703  00E2F6  0E01               	movlw	1
 47704  00E2F8  2014               	addwfc	(dylen@yr+1)^0,w,c
 47705  00E2FA  6E0F               	movwf	(___lwmod@dividend+1)^0,c
 47706  00E2FC  0E01               	movlw	1
 47707  00E2FE  6E11               	movwf	(___lwmod@divisor+1)^0,c
 47708  00E300  0E90               	movlw	144
 47709  00E302  6E10               	movwf	___lwmod@divisor^0,c
 47710  00E304  EC42  F075         	call	___lwmod	;wreg free
 47711  00E308  500E               	movf	?___lwmod^0,w,c
 47712  00E30A  100F               	iorwf	(?___lwmod+1)^0,w,c
 47713  00E30C  B4D8               	btfsc	status,2,c
 47714  00E30E  D005               	goto	l19837
 47715  00E310                     u21440:
 47716  00E310  0E01               	movlw	1
 47717  00E312  6E14               	movwf	(?_dylen+1)^0,c
 47718  00E314  0E6D               	movlw	109
 47719  00E316  6E13               	movwf	?_dylen^0,c
 47720  00E318  0012               	return	
 47721  00E31A                     l19837:
 47722  00E31A  0E01               	movlw	1
 47723  00E31C  6E14               	movwf	(?_dylen+1)^0,c
 47724  00E31E  0E6E               	movlw	110
 47725  00E320  6E13               	movwf	?_dylen^0,c
 47726  00E322  0012               	return		;funcret
 47727  00E324                     __end_of_dylen:
 47728                           	callstack 0
 47729                           
 47730 ;; *************** function ___lwmod *****************
 47731 ;; Defined at:
 47732 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwmod.c"
 47733 ;; Parameters:    Size  Location     Type
 47734 ;;  dividend        2   13[COMRAM] unsigned int 
 47735 ;;  divisor         2   15[COMRAM] unsigned int 
 47736 ;; Auto vars:     Size  Location     Type
 47737 ;;  counter         1   17[COMRAM] unsigned char 
 47738 ;; Return value:  Size  Location     Type
 47739 ;;                  2   13[COMRAM] unsigned int 
 47740 ;; Registers used:
 47741 ;;		wreg, status,2, status,0
 47742 ;; Tracked objects:
 47743 ;;		On entry : 0/0
 47744 ;;		On exit  : 0/0
 47745 ;;		Unchanged: 0/0
 47746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47750 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47751 ;;Total ram usage:        5 bytes
 47752 ;; Hardware stack levels used:    1
 47753 ;; Hardware stack levels required when called:    6
 47754 ;; This function calls:
 47755 ;;		Nothing
 47756 ;; This function is called by:
 47757 ;;		_sind
 47758 ;;		_sprintf
 47759 ;;		_dylen
 47760 ;;		_isleap
 47761 ;; This function uses a non-reentrant model
 47762 ;;
 47763                           
 47764                           	psect	text192
 47765  00EA84                     __ptext192:
 47766                           	callstack 0
 47767  00EA84                     ___lwmod:
 47768                           	callstack 18
 47769                           
 47770                           ;incstack = 0
 47771  00EA84  5010               	movf	___lwmod@divisor^0,w,c
 47772  00EA86  1011               	iorwf	(___lwmod@divisor+1)^0,w,c
 47773  00EA88  B4D8               	btfsc	status,2,c
 47774  00EA8A  D018               	goto	l4136
 47775  00EA8C  0E01               	movlw	1
 47776  00EA8E  6E12               	movwf	___lwmod@counter^0,c
 47777  00EA90  D004               	goto	l19339
 47778  00EA92                     l19337:
 47779  00EA92  90D8               	bcf	status,0,c
 47780  00EA94  3610               	rlcf	___lwmod@divisor^0,f,c
 47781  00EA96  3611               	rlcf	(___lwmod@divisor+1)^0,f,c
 47782  00EA98  2A12               	incf	___lwmod@counter^0,f,c
 47783  00EA9A                     l19339:
 47784  00EA9A  AE11               	btfss	(___lwmod@divisor+1)^0,7,c
 47785  00EA9C  D7FA               	goto	l19337
 47786  00EA9E                     u20740:
 47787  00EA9E  5010               	movf	___lwmod@divisor^0,w,c
 47788  00EAA0  5C0E               	subwf	___lwmod@dividend^0,w,c
 47789  00EAA2  5011               	movf	(___lwmod@divisor+1)^0,w,c
 47790  00EAA4  580F               	subwfb	(___lwmod@dividend+1)^0,w,c
 47791  00EAA6  A0D8               	btfss	status,0,c
 47792  00EAA8  D004               	goto	l19345
 47793  00EAAA  5010               	movf	___lwmod@divisor^0,w,c
 47794  00EAAC  5E0E               	subwf	___lwmod@dividend^0,f,c
 47795  00EAAE  5011               	movf	(___lwmod@divisor+1)^0,w,c
 47796  00EAB0  5A0F               	subwfb	(___lwmod@dividend+1)^0,f,c
 47797  00EAB2                     l19345:
 47798  00EAB2  90D8               	bcf	status,0,c
 47799  00EAB4  3211               	rrcf	(___lwmod@divisor+1)^0,f,c
 47800  00EAB6  3210               	rrcf	___lwmod@divisor^0,f,c
 47801  00EAB8  2E12               	decfsz	___lwmod@counter^0,f,c
 47802  00EABA  D7F1               	goto	u20740
 47803  00EABC                     l4136:
 47804  00EABC  C00E  F00E         	movff	___lwmod@dividend,?___lwmod
 47805  00EAC0  C00F  F00F         	movff	___lwmod@dividend+1,?___lwmod+1
 47806  00EAC4  0012               	return		;funcret
 47807  00EAC6                     __end_of___lwmod:
 47808                           	callstack 0
 47809                           
 47810 ;; *************** function ___awmod *****************
 47811 ;; Defined at:
 47812 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
 47813 ;; Parameters:    Size  Location     Type
 47814 ;;  dividend        2   13[COMRAM] int 
 47815 ;;  divisor         2   15[COMRAM] int 
 47816 ;; Auto vars:     Size  Location     Type
 47817 ;;  sign            1   18[COMRAM] unsigned char 
 47818 ;;  counter         1   17[COMRAM] unsigned char 
 47819 ;; Return value:  Size  Location     Type
 47820 ;;                  2   13[COMRAM] int 
 47821 ;; Registers used:
 47822 ;;		wreg, status,2, status,0
 47823 ;; Tracked objects:
 47824 ;;		On entry : 0/0
 47825 ;;		On exit  : 0/0
 47826 ;;		Unchanged: 0/0
 47827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47831 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47832 ;;Total ram usage:        6 bytes
 47833 ;; Hardware stack levels used:    1
 47834 ;; Hardware stack levels required when called:    6
 47835 ;; This function calls:
 47836 ;;		Nothing
 47837 ;; This function is called by:
 47838 ;;		_NormalProc
 47839 ;;		_SettingProc
 47840 ;;		_DrawAnalogClock
 47841 ;;		_drawTempHumidity
 47842 ;;		_gmtime
 47843 ;;		_asctime
 47844 ;; This function uses a non-reentrant model
 47845 ;;
 47846                           
 47847                           	psect	text193
 47848  00DD8E                     __ptext193:
 47849                           	callstack 0
 47850  00DD8E                     ___awmod:
 47851                           	callstack 19
 47852                           
 47853                           ;incstack = 0
 47854  00DD8E  0E00               	movlw	0
 47855  00DD90  6E13               	movwf	___awmod@sign^0,c
 47856  00DD92  AE0F               	btfss	(___awmod@dividend+1)^0,7,c
 47857  00DD94  D006               	goto	l19799
 47858  00DD96  6C0E               	negf	___awmod@dividend^0,c
 47859  00DD98  1E0F               	comf	(___awmod@dividend+1)^0,f,c
 47860  00DD9A  B0D8               	btfsc	status,0,c
 47861  00DD9C  2A0F               	incf	(___awmod@dividend+1)^0,f,c
 47862  00DD9E  0E01               	movlw	1
 47863  00DDA0  6E13               	movwf	___awmod@sign^0,c
 47864  00DDA2                     l19799:
 47865  00DDA2  AE11               	btfss	(___awmod@divisor+1)^0,7,c
 47866  00DDA4  D004               	goto	l19803
 47867  00DDA6  6C10               	negf	___awmod@divisor^0,c
 47868  00DDA8  1E11               	comf	(___awmod@divisor+1)^0,f,c
 47869  00DDAA  B0D8               	btfsc	status,0,c
 47870  00DDAC  2A11               	incf	(___awmod@divisor+1)^0,f,c
 47871  00DDAE                     l19803:
 47872  00DDAE  5010               	movf	___awmod@divisor^0,w,c
 47873  00DDB0  1011               	iorwf	(___awmod@divisor+1)^0,w,c
 47874  00DDB2  B4D8               	btfsc	status,2,c
 47875  00DDB4  D018               	goto	l19819
 47876  00DDB6  0E01               	movlw	1
 47877  00DDB8  6E12               	movwf	___awmod@counter^0,c
 47878  00DDBA  D004               	goto	l19809
 47879  00DDBC                     l19807:
 47880  00DDBC  90D8               	bcf	status,0,c
 47881  00DDBE  3610               	rlcf	___awmod@divisor^0,f,c
 47882  00DDC0  3611               	rlcf	(___awmod@divisor+1)^0,f,c
 47883  00DDC2  2A12               	incf	___awmod@counter^0,f,c
 47884  00DDC4                     l19809:
 47885  00DDC4  AE11               	btfss	(___awmod@divisor+1)^0,7,c
 47886  00DDC6  D7FA               	goto	l19807
 47887  00DDC8                     u21390:
 47888  00DDC8  5010               	movf	___awmod@divisor^0,w,c
 47889  00DDCA  5C0E               	subwf	___awmod@dividend^0,w,c
 47890  00DDCC  5011               	movf	(___awmod@divisor+1)^0,w,c
 47891  00DDCE  580F               	subwfb	(___awmod@dividend+1)^0,w,c
 47892  00DDD0  A0D8               	btfss	status,0,c
 47893  00DDD2  D004               	goto	l19815
 47894  00DDD4  5010               	movf	___awmod@divisor^0,w,c
 47895  00DDD6  5E0E               	subwf	___awmod@dividend^0,f,c
 47896  00DDD8  5011               	movf	(___awmod@divisor+1)^0,w,c
 47897  00DDDA  5A0F               	subwfb	(___awmod@dividend+1)^0,f,c
 47898  00DDDC                     l19815:
 47899  00DDDC  90D8               	bcf	status,0,c
 47900  00DDDE  3211               	rrcf	(___awmod@divisor+1)^0,f,c
 47901  00DDE0  3210               	rrcf	___awmod@divisor^0,f,c
 47902  00DDE2  2E12               	decfsz	___awmod@counter^0,f,c
 47903  00DDE4  D7F1               	goto	u21390
 47904  00DDE6                     l19819:
 47905  00DDE6  5013               	movf	___awmod@sign^0,w,c
 47906  00DDE8  B4D8               	btfsc	status,2,c
 47907  00DDEA  D004               	goto	l19823
 47908  00DDEC  6C0E               	negf	___awmod@dividend^0,c
 47909  00DDEE  1E0F               	comf	(___awmod@dividend+1)^0,f,c
 47910  00DDF0  B0D8               	btfsc	status,0,c
 47911  00DDF2  2A0F               	incf	(___awmod@dividend+1)^0,f,c
 47912  00DDF4                     l19823:
 47913  00DDF4  C00E  F00E         	movff	___awmod@dividend,?___awmod
 47914  00DDF8  C00F  F00F         	movff	___awmod@dividend+1,?___awmod+1
 47915  00DDFC  0012               	return		;funcret
 47916  00DDFE                     __end_of___awmod:
 47917                           	callstack 0
 47918                           
 47919 ;; *************** function ___almod *****************
 47920 ;; Defined at:
 47921 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\almod.c"
 47922 ;; Parameters:    Size  Location     Type
 47923 ;;  dividend        4   13[COMRAM] long 
 47924 ;;  divisor         4   17[COMRAM] long 
 47925 ;; Auto vars:     Size  Location     Type
 47926 ;;  sign            1   22[COMRAM] unsigned char 
 47927 ;;  counter         1   21[COMRAM] unsigned char 
 47928 ;; Return value:  Size  Location     Type
 47929 ;;                  4   13[COMRAM] long 
 47930 ;; Registers used:
 47931 ;;		wreg, status,2, status,0
 47932 ;; Tracked objects:
 47933 ;;		On entry : 0/0
 47934 ;;		On exit  : 0/0
 47935 ;;		Unchanged: 0/0
 47936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 47937 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47938 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47940 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 47941 ;;Total ram usage:       10 bytes
 47942 ;; Hardware stack levels used:    1
 47943 ;; Hardware stack levels required when called:    6
 47944 ;; This function calls:
 47945 ;;		Nothing
 47946 ;; This function is called by:
 47947 ;;		_gmtime
 47948 ;; This function uses a non-reentrant model
 47949 ;;
 47950                           
 47951                           	psect	text194
 47952  00CF8E                     __ptext194:
 47953                           	callstack 0
 47954  00CF8E                     ___almod:
 47955                           	callstack 19
 47956                           
 47957                           ;incstack = 0
 47958  00CF8E  0E00               	movlw	0
 47959  00CF90  6E17               	movwf	___almod@sign^0,c
 47960  00CF92  AE11               	btfss	(___almod@dividend+3)^0,7,c
 47961  00CF94  D00A               	goto	l19763
 47962  00CF96  1E11               	comf	(___almod@dividend+3)^0,f,c
 47963  00CF98  1E10               	comf	(___almod@dividend+2)^0,f,c
 47964  00CF9A  1E0F               	comf	(___almod@dividend+1)^0,f,c
 47965  00CF9C  6C0E               	negf	___almod@dividend^0,c
 47966  00CF9E  0E00               	movlw	0
 47967  00CFA0  220F               	addwfc	(___almod@dividend+1)^0,f,c
 47968  00CFA2  2210               	addwfc	(___almod@dividend+2)^0,f,c
 47969  00CFA4  2211               	addwfc	(___almod@dividend+3)^0,f,c
 47970  00CFA6  0E01               	movlw	1
 47971  00CFA8  6E17               	movwf	___almod@sign^0,c
 47972  00CFAA                     l19763:
 47973  00CFAA  AE15               	btfss	(___almod@divisor+3)^0,7,c
 47974  00CFAC  D008               	goto	l19767
 47975  00CFAE  1E15               	comf	(___almod@divisor+3)^0,f,c
 47976  00CFB0  1E14               	comf	(___almod@divisor+2)^0,f,c
 47977  00CFB2  1E13               	comf	(___almod@divisor+1)^0,f,c
 47978  00CFB4  6C12               	negf	___almod@divisor^0,c
 47979  00CFB6  0E00               	movlw	0
 47980  00CFB8  2213               	addwfc	(___almod@divisor+1)^0,f,c
 47981  00CFBA  2214               	addwfc	(___almod@divisor+2)^0,f,c
 47982  00CFBC  2215               	addwfc	(___almod@divisor+3)^0,f,c
 47983  00CFBE                     l19767:
 47984  00CFBE  5012               	movf	___almod@divisor^0,w,c
 47985  00CFC0  1013               	iorwf	(___almod@divisor+1)^0,w,c
 47986  00CFC2  1014               	iorwf	(___almod@divisor+2)^0,w,c
 47987  00CFC4  1015               	iorwf	(___almod@divisor+3)^0,w,c
 47988  00CFC6  B4D8               	btfsc	status,2,c
 47989  00CFC8  D024               	goto	l19783
 47990  00CFCA  0E01               	movlw	1
 47991  00CFCC  6E16               	movwf	___almod@counter^0,c
 47992  00CFCE  D006               	goto	l19773
 47993  00CFD0                     l19771:
 47994  00CFD0  90D8               	bcf	status,0,c
 47995  00CFD2  3612               	rlcf	___almod@divisor^0,f,c
 47996  00CFD4  3613               	rlcf	(___almod@divisor+1)^0,f,c
 47997  00CFD6  3614               	rlcf	(___almod@divisor+2)^0,f,c
 47998  00CFD8  3615               	rlcf	(___almod@divisor+3)^0,f,c
 47999  00CFDA  2A16               	incf	___almod@counter^0,f,c
 48000  00CFDC                     l19773:
 48001  00CFDC  AE15               	btfss	(___almod@divisor+3)^0,7,c
 48002  00CFDE  D7F8               	goto	l19771
 48003  00CFE0                     u21330:
 48004  00CFE0  5012               	movf	___almod@divisor^0,w,c
 48005  00CFE2  5C0E               	subwf	___almod@dividend^0,w,c
 48006  00CFE4  5013               	movf	(___almod@divisor+1)^0,w,c
 48007  00CFE6  580F               	subwfb	(___almod@dividend+1)^0,w,c
 48008  00CFE8  5014               	movf	(___almod@divisor+2)^0,w,c
 48009  00CFEA  5810               	subwfb	(___almod@dividend+2)^0,w,c
 48010  00CFEC  5015               	movf	(___almod@divisor+3)^0,w,c
 48011  00CFEE  5811               	subwfb	(___almod@dividend+3)^0,w,c
 48012  00CFF0  A0D8               	btfss	status,0,c
 48013  00CFF2  D008               	goto	l19779
 48014  00CFF4  5012               	movf	___almod@divisor^0,w,c
 48015  00CFF6  5E0E               	subwf	___almod@dividend^0,f,c
 48016  00CFF8  5013               	movf	(___almod@divisor+1)^0,w,c
 48017  00CFFA  5A0F               	subwfb	(___almod@dividend+1)^0,f,c
 48018  00CFFC  5014               	movf	(___almod@divisor+2)^0,w,c
 48019  00CFFE  5A10               	subwfb	(___almod@dividend+2)^0,f,c
 48020  00D000  5015               	movf	(___almod@divisor+3)^0,w,c
 48021  00D002  5A11               	subwfb	(___almod@dividend+3)^0,f,c
 48022  00D004                     l19779:
 48023  00D004  90D8               	bcf	status,0,c
 48024  00D006  3215               	rrcf	(___almod@divisor+3)^0,f,c
 48025  00D008  3214               	rrcf	(___almod@divisor+2)^0,f,c
 48026  00D00A  3213               	rrcf	(___almod@divisor+1)^0,f,c
 48027  00D00C  3212               	rrcf	___almod@divisor^0,f,c
 48028  00D00E  2E16               	decfsz	___almod@counter^0,f,c
 48029  00D010  D7E7               	goto	u21330
 48030  00D012                     l19783:
 48031  00D012  5017               	movf	___almod@sign^0,w,c
 48032  00D014  B4D8               	btfsc	status,2,c
 48033  00D016  D008               	goto	l19787
 48034  00D018  1E11               	comf	(___almod@dividend+3)^0,f,c
 48035  00D01A  1E10               	comf	(___almod@dividend+2)^0,f,c
 48036  00D01C  1E0F               	comf	(___almod@dividend+1)^0,f,c
 48037  00D01E  6C0E               	negf	___almod@dividend^0,c
 48038  00D020  0E00               	movlw	0
 48039  00D022  220F               	addwfc	(___almod@dividend+1)^0,f,c
 48040  00D024  2210               	addwfc	(___almod@dividend+2)^0,f,c
 48041  00D026  2211               	addwfc	(___almod@dividend+3)^0,f,c
 48042  00D028                     l19787:
 48043  00D028  C00E  F00E         	movff	___almod@dividend,?___almod
 48044  00D02C  C00F  F00F         	movff	___almod@dividend+1,?___almod+1
 48045  00D030  C010  F010         	movff	___almod@dividend+2,?___almod+2
 48046  00D034  C011  F011         	movff	___almod@dividend+3,?___almod+3
 48047  00D038  0012               	return		;funcret
 48048  00D03A                     __end_of___almod:
 48049                           	callstack 0
 48050                           
 48051 ;; *************** function ___aldiv *****************
 48052 ;; Defined at:
 48053 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\aldiv.c"
 48054 ;; Parameters:    Size  Location     Type
 48055 ;;  dividend        4   25[COMRAM] long 
 48056 ;;  divisor         4   29[COMRAM] long 
 48057 ;; Auto vars:     Size  Location     Type
 48058 ;;  quotient        4   35[COMRAM] long 
 48059 ;;  sign            1   34[COMRAM] unsigned char 
 48060 ;;  counter         1   33[COMRAM] unsigned char 
 48061 ;; Return value:  Size  Location     Type
 48062 ;;                  4   25[COMRAM] long 
 48063 ;; Registers used:
 48064 ;;		wreg, status,2, status,0
 48065 ;; Tracked objects:
 48066 ;;		On entry : 0/2
 48067 ;;		On exit  : 0/0
 48068 ;;		Unchanged: 0/0
 48069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48070 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48071 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48073 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48074 ;;Total ram usage:       14 bytes
 48075 ;; Hardware stack levels used:    1
 48076 ;; Hardware stack levels required when called:    6
 48077 ;; This function calls:
 48078 ;;		Nothing
 48079 ;; This function is called by:
 48080 ;;		_TransCoordination
 48081 ;;		_gmtime
 48082 ;; This function uses a non-reentrant model
 48083 ;;
 48084                           
 48085                           	psect	text195
 48086  00C6CC                     __ptext195:
 48087                           	callstack 0
 48088  00C6CC                     ___aldiv:
 48089                           	callstack 19
 48090                           
 48091                           ;incstack = 0
 48092  00C6CC  0E00               	movlw	0
 48093  00C6CE  6E23               	movwf	___aldiv@sign^0,c
 48094  00C6D0  AE21               	btfss	(___aldiv@divisor+3)^0,7,c
 48095  00C6D2  D00A               	goto	l19719
 48096  00C6D4  1E21               	comf	(___aldiv@divisor+3)^0,f,c
 48097  00C6D6  1E20               	comf	(___aldiv@divisor+2)^0,f,c
 48098  00C6D8  1E1F               	comf	(___aldiv@divisor+1)^0,f,c
 48099  00C6DA  6C1E               	negf	___aldiv@divisor^0,c
 48100  00C6DC  0E00               	movlw	0
 48101  00C6DE  221F               	addwfc	(___aldiv@divisor+1)^0,f,c
 48102  00C6E0  2220               	addwfc	(___aldiv@divisor+2)^0,f,c
 48103  00C6E2  2221               	addwfc	(___aldiv@divisor+3)^0,f,c
 48104  00C6E4  0E01               	movlw	1
 48105  00C6E6  6E23               	movwf	___aldiv@sign^0,c
 48106  00C6E8                     l19719:
 48107  00C6E8  AE1D               	btfss	(___aldiv@dividend+3)^0,7,c
 48108  00C6EA  D00A               	goto	l19725
 48109  00C6EC  1E1D               	comf	(___aldiv@dividend+3)^0,f,c
 48110  00C6EE  1E1C               	comf	(___aldiv@dividend+2)^0,f,c
 48111  00C6F0  1E1B               	comf	(___aldiv@dividend+1)^0,f,c
 48112  00C6F2  6C1A               	negf	___aldiv@dividend^0,c
 48113  00C6F4  0E00               	movlw	0
 48114  00C6F6  221B               	addwfc	(___aldiv@dividend+1)^0,f,c
 48115  00C6F8  221C               	addwfc	(___aldiv@dividend+2)^0,f,c
 48116  00C6FA  221D               	addwfc	(___aldiv@dividend+3)^0,f,c
 48117  00C6FC  0E01               	movlw	1
 48118  00C6FE  1A23               	xorwf	___aldiv@sign^0,f,c
 48119  00C700                     l19725:
 48120  00C700  0E00               	movlw	0
 48121  00C702  6E24               	movwf	___aldiv@quotient^0,c
 48122  00C704  0E00               	movlw	0
 48123  00C706  6E25               	movwf	(___aldiv@quotient+1)^0,c
 48124  00C708  0E00               	movlw	0
 48125  00C70A  6E26               	movwf	(___aldiv@quotient+2)^0,c
 48126  00C70C  0E00               	movlw	0
 48127  00C70E  6E27               	movwf	(___aldiv@quotient+3)^0,c
 48128  00C710  501E               	movf	___aldiv@divisor^0,w,c
 48129  00C712  101F               	iorwf	(___aldiv@divisor+1)^0,w,c
 48130  00C714  1020               	iorwf	(___aldiv@divisor+2)^0,w,c
 48131  00C716  1021               	iorwf	(___aldiv@divisor+3)^0,w,c
 48132  00C718  B4D8               	btfsc	status,2,c
 48133  00C71A  D02A               	goto	l19747
 48134  00C71C  0E01               	movlw	1
 48135  00C71E  6E22               	movwf	___aldiv@counter^0,c
 48136  00C720  D006               	goto	l19733
 48137  00C722                     l19731:
 48138  00C722  90D8               	bcf	status,0,c
 48139  00C724  361E               	rlcf	___aldiv@divisor^0,f,c
 48140  00C726  361F               	rlcf	(___aldiv@divisor+1)^0,f,c
 48141  00C728  3620               	rlcf	(___aldiv@divisor+2)^0,f,c
 48142  00C72A  3621               	rlcf	(___aldiv@divisor+3)^0,f,c
 48143  00C72C  2A22               	incf	___aldiv@counter^0,f,c
 48144  00C72E                     l19733:
 48145  00C72E  AE21               	btfss	(___aldiv@divisor+3)^0,7,c
 48146  00C730  D7F8               	goto	l19731
 48147  00C732                     u21270:
 48148  00C732  90D8               	bcf	status,0,c
 48149  00C734  3624               	rlcf	___aldiv@quotient^0,f,c
 48150  00C736  3625               	rlcf	(___aldiv@quotient+1)^0,f,c
 48151  00C738  3626               	rlcf	(___aldiv@quotient+2)^0,f,c
 48152  00C73A  3627               	rlcf	(___aldiv@quotient+3)^0,f,c
 48153  00C73C  501E               	movf	___aldiv@divisor^0,w,c
 48154  00C73E  5C1A               	subwf	___aldiv@dividend^0,w,c
 48155  00C740  501F               	movf	(___aldiv@divisor+1)^0,w,c
 48156  00C742  581B               	subwfb	(___aldiv@dividend+1)^0,w,c
 48157  00C744  5020               	movf	(___aldiv@divisor+2)^0,w,c
 48158  00C746  581C               	subwfb	(___aldiv@dividend+2)^0,w,c
 48159  00C748  5021               	movf	(___aldiv@divisor+3)^0,w,c
 48160  00C74A  581D               	subwfb	(___aldiv@dividend+3)^0,w,c
 48161  00C74C  A0D8               	btfss	status,0,c
 48162  00C74E  D009               	goto	l19743
 48163  00C750  501E               	movf	___aldiv@divisor^0,w,c
 48164  00C752  5E1A               	subwf	___aldiv@dividend^0,f,c
 48165  00C754  501F               	movf	(___aldiv@divisor+1)^0,w,c
 48166  00C756  5A1B               	subwfb	(___aldiv@dividend+1)^0,f,c
 48167  00C758  5020               	movf	(___aldiv@divisor+2)^0,w,c
 48168  00C75A  5A1C               	subwfb	(___aldiv@dividend+2)^0,f,c
 48169  00C75C  5021               	movf	(___aldiv@divisor+3)^0,w,c
 48170  00C75E  5A1D               	subwfb	(___aldiv@dividend+3)^0,f,c
 48171  00C760  8024               	bsf	___aldiv@quotient^0,0,c
 48172  00C762                     l19743:
 48173  00C762  90D8               	bcf	status,0,c
 48174  00C764  3221               	rrcf	(___aldiv@divisor+3)^0,f,c
 48175  00C766  3220               	rrcf	(___aldiv@divisor+2)^0,f,c
 48176  00C768  321F               	rrcf	(___aldiv@divisor+1)^0,f,c
 48177  00C76A  321E               	rrcf	___aldiv@divisor^0,f,c
 48178  00C76C  2E22               	decfsz	___aldiv@counter^0,f,c
 48179  00C76E  D7E1               	goto	u21270
 48180  00C770                     l19747:
 48181  00C770  5023               	movf	___aldiv@sign^0,w,c
 48182  00C772  B4D8               	btfsc	status,2,c
 48183  00C774  D008               	goto	l19751
 48184  00C776  1E27               	comf	(___aldiv@quotient+3)^0,f,c
 48185  00C778  1E26               	comf	(___aldiv@quotient+2)^0,f,c
 48186  00C77A  1E25               	comf	(___aldiv@quotient+1)^0,f,c
 48187  00C77C  6C24               	negf	___aldiv@quotient^0,c
 48188  00C77E  0E00               	movlw	0
 48189  00C780  2225               	addwfc	(___aldiv@quotient+1)^0,f,c
 48190  00C782  2226               	addwfc	(___aldiv@quotient+2)^0,f,c
 48191  00C784  2227               	addwfc	(___aldiv@quotient+3)^0,f,c
 48192  00C786                     l19751:
 48193  00C786  C024  F01A         	movff	___aldiv@quotient,?___aldiv
 48194  00C78A  C025  F01B         	movff	___aldiv@quotient+1,?___aldiv+1
 48195  00C78E  C026  F01C         	movff	___aldiv@quotient+2,?___aldiv+2
 48196  00C792  C027  F01D         	movff	___aldiv@quotient+3,?___aldiv+3
 48197  00C796  0012               	return		;funcret
 48198  00C798                     __end_of___aldiv:
 48199                           	callstack 0
 48200                           
 48201 ;; *************** function _Hex2Bcd *****************
 48202 ;; Defined at:
 48203 ;;		line 53 in file "RTC8025.c"
 48204 ;; Parameters:    Size  Location     Type
 48205 ;;  x               1    wreg     unsigned char 
 48206 ;; Auto vars:     Size  Location     Type
 48207 ;;  x               1   18[COMRAM] unsigned char 
 48208 ;; Return value:  Size  Location     Type
 48209 ;;                  1    wreg      unsigned char 
 48210 ;; Registers used:
 48211 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 48212 ;; Tracked objects:
 48213 ;;		On entry : 3D/0
 48214 ;;		On exit  : 0/0
 48215 ;;		Unchanged: 0/0
 48216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48218 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48220 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48221 ;;Total ram usage:        2 bytes
 48222 ;; Hardware stack levels used:    1
 48223 ;; Hardware stack levels required when called:    7
 48224 ;; This function calls:
 48225 ;;		___lbdiv
 48226 ;;		___lbmod
 48227 ;; This function is called by:
 48228 ;;		_NormalProc
 48229 ;;		_SettingProc
 48230 ;;		_GPRMCdatacheck
 48231 ;;		_dateErrorCheck
 48232 ;; This function uses a non-reentrant model
 48233 ;;
 48234                           
 48235                           	psect	text196
 48236  00F314                     __ptext196:
 48237                           	callstack 0
 48238  00F314                     _Hex2Bcd:
 48239                           	callstack 21
 48240                           
 48241                           ;incstack = 0
 48242                           ;Hex2Bcd@x stored from wreg
 48243  00F314  6E13               	movwf	Hex2Bcd@x^0,c
 48244                           
 48245                           ;RTC8025.c: 54: return ((x / 10) << 4) + (x % 10);
 48246  00F316  0E0A               	movlw	10
 48247  00F318  6E0E               	movwf	___lbmod@divisor^0,c
 48248  00F31A  5013               	movf	Hex2Bcd@x^0,w,c
 48249  00F31C  EC72  F078         	call	___lbmod
 48250  00F320  6E12               	movwf	??_Hex2Bcd^0,c
 48251  00F322  0E0A               	movlw	10
 48252  00F324  6E0E               	movwf	___lbdiv@divisor^0,c
 48253  00F326  5013               	movf	Hex2Bcd@x^0,w,c
 48254  00F328  EC79  F076         	call	___lbdiv
 48255  00F32C  0D10               	mullw	16
 48256  00F32E  50F3               	movf	243,w,c
 48257  00F330  2412               	addwf	??_Hex2Bcd^0,w,c
 48258  00F332  0012               	return		;funcret
 48259  00F334                     __end_of_Hex2Bcd:
 48260                           	callstack 0
 48261                           
 48262 ;; *************** function ___lbmod *****************
 48263 ;; Defined at:
 48264 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbmod.c"
 48265 ;; Parameters:    Size  Location     Type
 48266 ;;  dividend        1    wreg     unsigned char 
 48267 ;;  divisor         1   13[COMRAM] unsigned char 
 48268 ;; Auto vars:     Size  Location     Type
 48269 ;;  dividend        1   14[COMRAM] unsigned char 
 48270 ;;  rem             1   16[COMRAM] unsigned char 
 48271 ;;  counter         1   15[COMRAM] unsigned char 
 48272 ;; Return value:  Size  Location     Type
 48273 ;;                  1    wreg      unsigned char 
 48274 ;; Registers used:
 48275 ;;		wreg, status,2, status,0
 48276 ;; Tracked objects:
 48277 ;;		On entry : 0/0
 48278 ;;		On exit  : 0/0
 48279 ;;		Unchanged: 0/0
 48280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48281 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48282 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48284 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48285 ;;Total ram usage:        4 bytes
 48286 ;; Hardware stack levels used:    1
 48287 ;; Hardware stack levels required when called:    6
 48288 ;; This function calls:
 48289 ;;		Nothing
 48290 ;; This function is called by:
 48291 ;;		_Hex2Bcd
 48292 ;;		_put2d
 48293 ;; This function uses a non-reentrant model
 48294 ;;
 48295                           
 48296                           	psect	text197
 48297  00F0E4                     __ptext197:
 48298                           	callstack 0
 48299  00F0E4                     ___lbmod:
 48300                           	callstack 21
 48301                           
 48302                           ;incstack = 0
 48303                           ;___lbmod@dividend stored from wreg
 48304  00F0E4  6E0F               	movwf	___lbmod@dividend^0,c
 48305  00F0E6  0E08               	movlw	8
 48306  00F0E8  6E10               	movwf	___lbmod@counter^0,c
 48307  00F0EA  0E00               	movlw	0
 48308  00F0EC  6E11               	movwf	___lbmod@rem^0,c
 48309  00F0EE                     l22379:
 48310  00F0EE  90D8               	bcf	status,0,c
 48311  00F0F0  340F               	rlcf	___lbmod@dividend^0,w,c
 48312  00F0F2  3411               	rlcf	___lbmod@rem^0,w,c
 48313  00F0F4  6E11               	movwf	___lbmod@rem^0,c
 48314  00F0F6  90D8               	bcf	status,0,c
 48315  00F0F8  360F               	rlcf	___lbmod@dividend^0,f,c
 48316  00F0FA  500E               	movf	___lbmod@divisor^0,w,c
 48317  00F0FC  5C11               	subwf	___lbmod@rem^0,w,c
 48318  00F0FE  A0D8               	btfss	status,0,c
 48319  00F100  D002               	goto	l22387
 48320  00F102  500E               	movf	___lbmod@divisor^0,w,c
 48321  00F104  5E11               	subwf	___lbmod@rem^0,f,c
 48322  00F106                     l22387:
 48323  00F106  2E10               	decfsz	___lbmod@counter^0,f,c
 48324  00F108  D7F2               	goto	l22379
 48325  00F10A  5011               	movf	___lbmod@rem^0,w,c
 48326  00F10C  0012               	return		;funcret
 48327  00F10E                     __end_of___lbmod:
 48328                           	callstack 0
 48329                           
 48330 ;; *************** function ___lbdiv *****************
 48331 ;; Defined at:
 48332 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lbdiv.c"
 48333 ;; Parameters:    Size  Location     Type
 48334 ;;  dividend        1    wreg     unsigned char 
 48335 ;;  divisor         1   13[COMRAM] unsigned char 
 48336 ;; Auto vars:     Size  Location     Type
 48337 ;;  dividend        1   14[COMRAM] unsigned char 
 48338 ;;  quotient        1   16[COMRAM] unsigned char 
 48339 ;;  counter         1   15[COMRAM] unsigned char 
 48340 ;; Return value:  Size  Location     Type
 48341 ;;                  1    wreg      unsigned char 
 48342 ;; Registers used:
 48343 ;;		wreg, status,2, status,0
 48344 ;; Tracked objects:
 48345 ;;		On entry : 0/0
 48346 ;;		On exit  : 0/0
 48347 ;;		Unchanged: 0/0
 48348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48349 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48350 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48352 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48353 ;;Total ram usage:        4 bytes
 48354 ;; Hardware stack levels used:    1
 48355 ;; Hardware stack levels required when called:    6
 48356 ;; This function calls:
 48357 ;;		Nothing
 48358 ;; This function is called by:
 48359 ;;		_Hex2Bcd
 48360 ;;		_put2d
 48361 ;; This function uses a non-reentrant model
 48362 ;;
 48363                           
 48364                           	psect	text198
 48365  00ECF2                     __ptext198:
 48366                           	callstack 0
 48367  00ECF2                     ___lbdiv:
 48368                           	callstack 21
 48369                           
 48370                           ;incstack = 0
 48371                           ;___lbdiv@dividend stored from wreg
 48372  00ECF2  6E0F               	movwf	___lbdiv@dividend^0,c
 48373  00ECF4  0E00               	movlw	0
 48374  00ECF6  6E11               	movwf	___lbdiv@quotient^0,c
 48375  00ECF8  500E               	movf	___lbdiv@divisor^0,w,c
 48376  00ECFA  B4D8               	btfsc	status,2,c
 48377  00ECFC  D015               	goto	l22373
 48378  00ECFE  0E01               	movlw	1
 48379  00ED00  6E10               	movwf	___lbdiv@counter^0,c
 48380  00ED02  D003               	goto	l22361
 48381  00ED04                     l22357:
 48382  00ED04  90D8               	bcf	status,0,c
 48383  00ED06  360E               	rlcf	___lbdiv@divisor^0,f,c
 48384  00ED08  2A10               	incf	___lbdiv@counter^0,f,c
 48385  00ED0A                     l22361:
 48386  00ED0A  AE0E               	btfss	___lbdiv@divisor^0,7,c
 48387  00ED0C  D7FB               	goto	l22357
 48388  00ED0E                     u24990:
 48389  00ED0E  90D8               	bcf	status,0,c
 48390  00ED10  3611               	rlcf	___lbdiv@quotient^0,f,c
 48391  00ED12  500E               	movf	___lbdiv@divisor^0,w,c
 48392  00ED14  5C0F               	subwf	___lbdiv@dividend^0,w,c
 48393  00ED16  A0D8               	btfss	status,0,c
 48394  00ED18  D003               	goto	l22369
 48395  00ED1A  500E               	movf	___lbdiv@divisor^0,w,c
 48396  00ED1C  5E0F               	subwf	___lbdiv@dividend^0,f,c
 48397  00ED1E  8011               	bsf	___lbdiv@quotient^0,0,c
 48398  00ED20                     l22369:
 48399  00ED20  90D8               	bcf	status,0,c
 48400  00ED22  320E               	rrcf	___lbdiv@divisor^0,f,c
 48401  00ED24  2E10               	decfsz	___lbdiv@counter^0,f,c
 48402  00ED26  D7F3               	goto	u24990
 48403  00ED28                     l22373:
 48404  00ED28  5011               	movf	___lbdiv@quotient^0,w,c
 48405  00ED2A  0012               	return		;funcret
 48406  00ED2C                     __end_of___lbdiv:
 48407                           	callstack 0
 48408                           
 48409 ;; *************** function _Bcd2Hex *****************
 48410 ;; Defined at:
 48411 ;;		line 57 in file "RTC8025.c"
 48412 ;; Parameters:    Size  Location     Type
 48413 ;;  x               1    wreg     unsigned char 
 48414 ;; Auto vars:     Size  Location     Type
 48415 ;;  x               1   14[COMRAM] unsigned char 
 48416 ;; Return value:  Size  Location     Type
 48417 ;;                  1    wreg      unsigned char 
 48418 ;; Registers used:
 48419 ;;		wreg, status,2, status,0, prodl, prodh
 48420 ;; Tracked objects:
 48421 ;;		On entry : 3C/3
 48422 ;;		On exit  : 0/0
 48423 ;;		Unchanged: 0/0
 48424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48426 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48428 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48429 ;;Total ram usage:        2 bytes
 48430 ;; Hardware stack levels used:    1
 48431 ;; Hardware stack levels required when called:    6
 48432 ;; This function calls:
 48433 ;;		Nothing
 48434 ;; This function is called by:
 48435 ;;		_get_fattime
 48436 ;;		_NormalProc
 48437 ;;		_SettingProc
 48438 ;;		_GPRMCdatacheck
 48439 ;;		_DrawBigCalendar
 48440 ;;		_DrawSmallCalendar
 48441 ;;		_drawCalendar
 48442 ;;		_dateErrorCheck
 48443 ;; This function uses a non-reentrant model
 48444 ;;
 48445                           
 48446                           	psect	text199
 48447  00F508                     __ptext199:
 48448                           	callstack 0
 48449  00F508                     _Bcd2Hex:
 48450                           	callstack 22
 48451                           
 48452                           ;incstack = 0
 48453                           ;Bcd2Hex@x stored from wreg
 48454  00F508  6E0F               	movwf	Bcd2Hex@x^0,c
 48455                           
 48456                           ;RTC8025.c: 58: return ((x >> 4)*10 + (x & 0xf));
 48457  00F50A  C00F  F00E         	movff	Bcd2Hex@x,??_Bcd2Hex
 48458  00F50E  0E0F               	movlw	15
 48459  00F510  160E               	andwf	??_Bcd2Hex^0,f,c
 48460  00F512  380F               	swapf	Bcd2Hex@x^0,w,c
 48461  00F514  0B0F               	andlw	15
 48462  00F516  0D0A               	mullw	10
 48463  00F518  50F3               	movf	243,w,c
 48464  00F51A  240E               	addwf	??_Bcd2Hex^0,w,c
 48465  00F51C  0012               	return		;funcret
 48466  00F51E                     __end_of_Bcd2Hex:
 48467                           	callstack 0
 48468                           
 48469 ;; *************** function _RTC_setTime *****************
 48470 ;; Defined at:
 48471 ;;		line 149 in file "RTC8025.c"
 48472 ;; Parameters:    Size  Location     Type
 48473 ;;  datetime        2   33[COMRAM] PTR unsigned char 
 48474 ;;		 -> DateTime(7), 
 48475 ;; Auto vars:     Size  Location     Type
 48476 ;;		None
 48477 ;; Return value:  Size  Location     Type
 48478 ;;                  1    wreg      void 
 48479 ;; Registers used:
 48480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 48481 ;; Tracked objects:
 48482 ;;		On entry : 0/4
 48483 ;;		On exit  : 0/0
 48484 ;;		Unchanged: 0/0
 48485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48489 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48490 ;;Total ram usage:        2 bytes
 48491 ;; Hardware stack levels used:    1
 48492 ;; Hardware stack levels required when called:   15
 48493 ;; This function calls:
 48494 ;;		_I2C2_Write1ByteRegister
 48495 ;; This function is called by:
 48496 ;;		_SettingProc
 48497 ;;		_GPRMCdatacheck
 48498 ;;		_init_RTC
 48499 ;; This function uses a non-reentrant model
 48500 ;;
 48501                           
 48502                           	psect	text200
 48503  00DBB0                     __ptext200:
 48504                           	callstack 0
 48505  00DBB0                     _RTC_setTime:
 48506                           	callstack 14
 48507                           
 48508                           ;RTC8025.c: 151: I2C2_Write1ByteRegister(0x32, 0x00, datetime[0]);
 48509                           
 48510                           ;incstack = 0
 48511  00DBB0  0E00               	movlw	0
 48512  00DBB2  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 48513  00DBB4  C022  FFD9         	movff	RTC_setTime@datetime,fsr2l
 48514  00DBB8  C023  FFDA         	movff	RTC_setTime@datetime+1,fsr2h
 48515  00DBBC  50DF               	movf	indf2,w,c
 48516  00DBBE  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 48517  00DBC0  0E32               	movlw	50
 48518  00DBC2  EC41  F072         	call	_I2C2_Write1ByteRegister
 48519                           
 48520                           ; BSR set to: 4
 48521                           ;RTC8025.c: 153: _delay((unsigned long)((80)*(64000000/4000000.0)));
 48522  00DBC6  0EB6               	movlw	182
 48523  00DBC8                     u30287:
 48524  00DBC8  D000               	nop2	
 48525  00DBCA  D000               	nop2	
 48526  00DBCC  2EE8               	decfsz	wreg,f,c
 48527  00DBCE  D7FC               	bra	u30287
 48528  00DBD0  D000               	nop2	
 48529  00DBD2  D000               	nop2	
 48530  00DBD4  D000               	nop2	
 48531                           
 48532                           ;RTC8025.c: 154: I2C2_Write1ByteRegister(0x32, 0x10, datetime[1]);
 48533  00DBD6  0E10               	movlw	16
 48534  00DBD8  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 48535  00DBDA  EE20 F001          	lfsr	2,1
 48536  00DBDE  5022               	movf	RTC_setTime@datetime^0,w,c
 48537  00DBE0  26D9               	addwf	fsr2l,f,c
 48538  00DBE2  5023               	movf	(RTC_setTime@datetime+1)^0,w,c
 48539  00DBE4  22DA               	addwfc	fsr2h,f,c
 48540  00DBE6  50DF               	movf	indf2,w,c
 48541  00DBE8  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 48542  00DBEA  0E32               	movlw	50
 48543  00DBEC  EC41  F072         	call	_I2C2_Write1ByteRegister
 48544                           
 48545                           ;RTC8025.c: 155: _delay((unsigned long)((80)*(64000000/4000000.0)));
 48546  00DBF0  0EB6               	movlw	182
 48547  00DBF2                     u30297:
 48548  00DBF2  D000               	nop2	
 48549  00DBF4  D000               	nop2	
 48550  00DBF6  2EE8               	decfsz	wreg,f,c
 48551  00DBF8  D7FC               	bra	u30297
 48552  00DBFA  D000               	nop2	
 48553  00DBFC  D000               	nop2	
 48554  00DBFE  D000               	nop2	
 48555                           
 48556                           ;RTC8025.c: 156: I2C2_Write1ByteRegister(0x32, 0x20, datetime[2]);
 48557  00DC00  0E20               	movlw	32
 48558  00DC02  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 48559  00DC04  EE20 F002          	lfsr	2,2
 48560  00DC08  5022               	movf	RTC_setTime@datetime^0,w,c
 48561  00DC0A  26D9               	addwf	fsr2l,f,c
 48562  00DC0C  5023               	movf	(RTC_setTime@datetime+1)^0,w,c
 48563  00DC0E  22DA               	addwfc	fsr2h,f,c
 48564  00DC10  50DF               	movf	indf2,w,c
 48565  00DC12  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 48566  00DC14  0E32               	movlw	50
 48567  00DC16  EC41  F072         	call	_I2C2_Write1ByteRegister
 48568                           
 48569                           ; BSR set to: 4
 48570                           ;RTC8025.c: 157: _delay((unsigned long)((80)*(64000000/4000000.0)));
 48571  00DC1A  0EB6               	movlw	182
 48572  00DC1C                     u30307:
 48573  00DC1C  D000               	nop2	
 48574  00DC1E  D000               	nop2	
 48575  00DC20  2EE8               	decfsz	wreg,f,c
 48576  00DC22  D7FC               	bra	u30307
 48577  00DC24  D000               	nop2	
 48578  00DC26  D000               	nop2	
 48579  00DC28  D000               	nop2	
 48580  00DC2A  0012               	return		;funcret
 48581  00DC2C                     __end_of_RTC_setTime:
 48582                           	callstack 0
 48583                           
 48584 ;; *************** function _RTC_setDate *****************
 48585 ;; Defined at:
 48586 ;;		line 163 in file "RTC8025.c"
 48587 ;; Parameters:    Size  Location     Type
 48588 ;;  datetime        2   33[COMRAM] PTR unsigned char 
 48589 ;;		 -> DateTime(7), 
 48590 ;; Auto vars:     Size  Location     Type
 48591 ;;		None
 48592 ;; Return value:  Size  Location     Type
 48593 ;;                  1    wreg      void 
 48594 ;; Registers used:
 48595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 48596 ;; Tracked objects:
 48597 ;;		On entry : 0/4
 48598 ;;		On exit  : 0/0
 48599 ;;		Unchanged: 0/0
 48600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48601 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48604 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48605 ;;Total ram usage:        2 bytes
 48606 ;; Hardware stack levels used:    1
 48607 ;; Hardware stack levels required when called:   15
 48608 ;; This function calls:
 48609 ;;		_I2C2_Write1ByteRegister
 48610 ;; This function is called by:
 48611 ;;		_SettingProc
 48612 ;;		_GPRMCdatacheck
 48613 ;;		_init_RTC
 48614 ;; This function uses a non-reentrant model
 48615 ;;
 48616                           
 48617                           	psect	text201
 48618  00D03A                     __ptext201:
 48619                           	callstack 0
 48620  00D03A                     _RTC_setDate:
 48621                           	callstack 14
 48622                           
 48623                           ;RTC8025.c: 164: I2C2_Write1ByteRegister(0x32, 0x30, datetime[3]);
 48624                           
 48625                           ;incstack = 0
 48626  00D03A  0E30               	movlw	48
 48627  00D03C  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 48628  00D03E  EE20 F003          	lfsr	2,3
 48629  00D042  5022               	movf	RTC_setDate@datetime^0,w,c
 48630  00D044  26D9               	addwf	fsr2l,f,c
 48631  00D046  5023               	movf	(RTC_setDate@datetime+1)^0,w,c
 48632  00D048  22DA               	addwfc	fsr2h,f,c
 48633  00D04A  50DF               	movf	indf2,w,c
 48634  00D04C  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 48635  00D04E  0E32               	movlw	50
 48636  00D050  EC41  F072         	call	_I2C2_Write1ByteRegister
 48637                           
 48638                           ; BSR set to: 4
 48639                           ;RTC8025.c: 165: _delay((unsigned long)((80)*(64000000/4000000.0)));
 48640  00D054  0EB6               	movlw	182
 48641  00D056                     u30317:
 48642  00D056  D000               	nop2	
 48643  00D058  D000               	nop2	
 48644  00D05A  2EE8               	decfsz	wreg,f,c
 48645  00D05C  D7FC               	bra	u30317
 48646  00D05E  D000               	nop2	
 48647  00D060  D000               	nop2	
 48648  00D062  D000               	nop2	
 48649                           
 48650                           ;RTC8025.c: 166: I2C2_Write1ByteRegister(0x32, 0x40, datetime[4]);
 48651  00D064  0E40               	movlw	64
 48652  00D066  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 48653  00D068  EE20 F004          	lfsr	2,4
 48654  00D06C  5022               	movf	RTC_setDate@datetime^0,w,c
 48655  00D06E  26D9               	addwf	fsr2l,f,c
 48656  00D070  5023               	movf	(RTC_setDate@datetime+1)^0,w,c
 48657  00D072  22DA               	addwfc	fsr2h,f,c
 48658  00D074  50DF               	movf	indf2,w,c
 48659  00D076  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 48660  00D078  0E32               	movlw	50
 48661  00D07A  EC41  F072         	call	_I2C2_Write1ByteRegister
 48662                           
 48663                           ;RTC8025.c: 167: _delay((unsigned long)((80)*(64000000/4000000.0)));
 48664  00D07E  0EB6               	movlw	182
 48665  00D080                     u30327:
 48666  00D080  D000               	nop2	
 48667  00D082  D000               	nop2	
 48668  00D084  2EE8               	decfsz	wreg,f,c
 48669  00D086  D7FC               	bra	u30327
 48670  00D088  D000               	nop2	
 48671  00D08A  D000               	nop2	
 48672  00D08C  D000               	nop2	
 48673                           
 48674                           ;RTC8025.c: 168: I2C2_Write1ByteRegister(0x32, 0x50, datetime[5]);
 48675  00D08E  0E50               	movlw	80
 48676  00D090  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 48677  00D092  EE20 F005          	lfsr	2,5
 48678  00D096  5022               	movf	RTC_setDate@datetime^0,w,c
 48679  00D098  26D9               	addwf	fsr2l,f,c
 48680  00D09A  5023               	movf	(RTC_setDate@datetime+1)^0,w,c
 48681  00D09C  22DA               	addwfc	fsr2h,f,c
 48682  00D09E  50DF               	movf	indf2,w,c
 48683  00D0A0  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 48684  00D0A2  0E32               	movlw	50
 48685  00D0A4  EC41  F072         	call	_I2C2_Write1ByteRegister
 48686                           
 48687                           ; BSR set to: 4
 48688                           ;RTC8025.c: 169: _delay((unsigned long)((80)*(64000000/4000000.0)));
 48689  00D0A8  0EB6               	movlw	182
 48690  00D0AA                     u30337:
 48691  00D0AA  D000               	nop2	
 48692  00D0AC  D000               	nop2	
 48693  00D0AE  2EE8               	decfsz	wreg,f,c
 48694  00D0B0  D7FC               	bra	u30337
 48695  00D0B2  D000               	nop2	
 48696  00D0B4  D000               	nop2	
 48697  00D0B6  D000               	nop2	
 48698                           
 48699                           ;RTC8025.c: 170: I2C2_Write1ByteRegister(0x32, 0x60, datetime[6]);
 48700  00D0B8  0E60               	movlw	96
 48701  00D0BA  6E1F               	movwf	I2C2_Write1ByteRegister@reg^0,c
 48702  00D0BC  EE20 F006          	lfsr	2,6
 48703  00D0C0  5022               	movf	RTC_setDate@datetime^0,w,c
 48704  00D0C2  26D9               	addwf	fsr2l,f,c
 48705  00D0C4  5023               	movf	(RTC_setDate@datetime+1)^0,w,c
 48706  00D0C6  22DA               	addwfc	fsr2h,f,c
 48707  00D0C8  50DF               	movf	indf2,w,c
 48708  00D0CA  6E20               	movwf	I2C2_Write1ByteRegister@data^0,c
 48709  00D0CC  0E32               	movlw	50
 48710  00D0CE  EC41  F072         	call	_I2C2_Write1ByteRegister
 48711                           
 48712                           ; BSR set to: 4
 48713                           ;RTC8025.c: 171: _delay((unsigned long)((80)*(64000000/4000000.0)));
 48714  00D0D2  0EB6               	movlw	182
 48715  00D0D4                     u30347:
 48716  00D0D4  D000               	nop2	
 48717  00D0D6  D000               	nop2	
 48718  00D0D8  2EE8               	decfsz	wreg,f,c
 48719  00D0DA  D7FC               	bra	u30347
 48720  00D0DC  D000               	nop2	
 48721  00D0DE  D000               	nop2	
 48722  00D0E0  D000               	nop2	
 48723  00D0E2  0012               	return		;funcret
 48724  00D0E4                     __end_of_RTC_setDate:
 48725                           	callstack 0
 48726                           
 48727 ;; *************** function _I2C2_Write1ByteRegister *****************
 48728 ;; Defined at:
 48729 ;;		line 91 in file "mcc_generated_files/examples/i2c2_master_example.c"
 48730 ;; Parameters:    Size  Location     Type
 48731 ;;  address         1    wreg     unsigned char 
 48732 ;;  reg             1   30[COMRAM] unsigned char 
 48733 ;;  data            1   31[COMRAM] unsigned char 
 48734 ;; Auto vars:     Size  Location     Type
 48735 ;;  address         1   32[COMRAM] unsigned char 
 48736 ;; Return value:  Size  Location     Type
 48737 ;;                  1    wreg      void 
 48738 ;; Registers used:
 48739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 48740 ;; Tracked objects:
 48741 ;;		On entry : 0/0
 48742 ;;		On exit  : 3F/4
 48743 ;;		Unchanged: 0/0
 48744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48745 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48746 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48748 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48749 ;;Total ram usage:        3 bytes
 48750 ;; Hardware stack levels used:    1
 48751 ;; Hardware stack levels required when called:   14
 48752 ;; This function calls:
 48753 ;;		_I2C2_Close
 48754 ;;		_I2C2_MasterWrite
 48755 ;;		_I2C2_Open
 48756 ;;		_I2C2_SetAddressNackCallback
 48757 ;;		_I2C2_SetBuffer
 48758 ;;		_I2C2_SetDataCompleteCallback
 48759 ;; This function is called by:
 48760 ;;		_RTC_resetAlarm
 48761 ;;		_RTC_setAlarmTime
 48762 ;;		_RTC_setTime
 48763 ;;		_RTC_setDate
 48764 ;;		_resetCTFG
 48765 ;;		_init_RTC
 48766 ;; This function uses a non-reentrant model
 48767 ;;
 48768                           
 48769                           	psect	text202
 48770  00E482                     __ptext202:
 48771                           	callstack 0
 48772  00E482                     _I2C2_Write1ByteRegister:
 48773                           	callstack 14
 48774                           
 48775                           ;incstack = 0
 48776                           ;I2C2_Write1ByteRegister@address stored from wreg
 48777  00E482  6E21               	movwf	I2C2_Write1ByteRegister@address^0,c
 48778  00E484                     
 48779                           ;i2c2_master_example.c: 93: while(!I2C2_Open(address));
 48780  00E484  5021               	movf	I2C2_Write1ByteRegister@address^0,w,c
 48781  00E486  EC55  F06D         	call	_I2C2_Open
 48782  00E48A  0900               	iorlw	0
 48783  00E48C  B4D8               	btfsc	status,2,c
 48784  00E48E  D7FA               	goto	l22411
 48785                           
 48786                           ; BSR set to: 4
 48787                           ;i2c2_master_example.c: 94: I2C2_SetDataCompleteCallback(wr1RegCompleteHandler,&data);
 48788  00E490  0E0A               	movlw	low _wr1RegCompleteHandler
 48789  00E492  6E13               	movwf	I2C2_SetDataCompleteCallback@cb^0,c
 48790  00E494  0EF0               	movlw	high _wr1RegCompleteHandler
 48791  00E496  6E14               	movwf	(I2C2_SetDataCompleteCallback@cb+1)^0,c
 48792  00E498  0E20               	movlw	low I2C2_Write1ByteRegister@data
 48793  00E49A  6E15               	movwf	I2C2_SetDataCompleteCallback@ptr^0,c
 48794  00E49C  6A16               	clrf	(I2C2_SetDataCompleteCallback@ptr+1)^0,c
 48795  00E49E  EC62  F07A         	call	_I2C2_SetDataCompleteCallback	;wreg free
 48796                           
 48797                           ;i2c2_master_example.c: 95: I2C2_SetBuffer(&reg,1);
 48798  00E4A2  0E1F               	movlw	low I2C2_Write1ByteRegister@reg
 48799  00E4A4  6E0E               	movwf	I2C2_SetBuffer@buffer^0,c
 48800  00E4A6  6A0F               	clrf	(I2C2_SetBuffer@buffer+1)^0,c
 48801  00E4A8  0E00               	movlw	0
 48802  00E4AA  6E11               	movwf	(I2C2_SetBuffer@bufferSize+1)^0,c
 48803  00E4AC  0E01               	movlw	1
 48804  00E4AE  6E10               	movwf	I2C2_SetBuffer@bufferSize^0,c
 48805  00E4B0  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 48806                           
 48807                           ; BSR set to: 4
 48808                           ;i2c2_master_example.c: 96: I2C2_SetAddressNackCallback((0),(0));
 48809  00E4B4  0E00               	movlw	0
 48810  00E4B6  6E13               	movwf	I2C2_SetAddressNackCallback@cb^0,c
 48811  00E4B8  0E00               	movlw	0
 48812  00E4BA  6E14               	movwf	(I2C2_SetAddressNackCallback@cb+1)^0,c
 48813  00E4BC  0E00               	movlw	0
 48814  00E4BE  6E15               	movwf	I2C2_SetAddressNackCallback@ptr^0,c
 48815  00E4C0  0E00               	movlw	0
 48816  00E4C2  6E16               	movwf	(I2C2_SetAddressNackCallback@ptr+1)^0,c
 48817  00E4C4  EC4A  F07A         	call	_I2C2_SetAddressNackCallback	;wreg free
 48818                           
 48819                           ;i2c2_master_example.c: 97: I2C2_MasterWrite();
 48820  00E4C8  ECBC  F07B         	call	_I2C2_MasterWrite	;wreg free
 48821  00E4CC                     l22423:
 48822                           
 48823                           ; BSR set to: 4
 48824  00E4CC  EC58  F079         	call	_I2C2_Close	;wreg free
 48825  00E4D0  06E8               	decf	wreg,f,c
 48826  00E4D2  A4D8               	btfss	status,2,c
 48827  00E4D4  0012               	return	
 48828  00E4D6  D7FA               	goto	l22423
 48829  00E4D8                     __end_of_I2C2_Write1ByteRegister:
 48830                           	callstack 0
 48831                           
 48832 ;; *************** function _I2C2_SetAddressNackCallback *****************
 48833 ;; Defined at:
 48834 ;;		line 283 in file "mcc_generated_files/i2c2_master.c"
 48835 ;; Parameters:    Size  Location     Type
 48836 ;;  cb              2   18[COMRAM] PTR FTN(PTR void ,)enum 
 48837 ;;		 -> Absolute function(1), 
 48838 ;;  ptr             2   20[COMRAM] PTR void 
 48839 ;;		 -> NULL(0), 
 48840 ;; Auto vars:     Size  Location     Type
 48841 ;;		None
 48842 ;; Return value:  Size  Location     Type
 48843 ;;                  1    wreg      void 
 48844 ;; Registers used:
 48845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 48846 ;; Tracked objects:
 48847 ;;		On entry : 3F/4
 48848 ;;		On exit  : 0/0
 48849 ;;		Unchanged: 0/0
 48850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48851 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48854 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48855 ;;Total ram usage:        4 bytes
 48856 ;; Hardware stack levels used:    1
 48857 ;; Hardware stack levels required when called:    7
 48858 ;; This function calls:
 48859 ;;		_I2C2_SetCallback
 48860 ;; This function is called by:
 48861 ;;		_I2C2_Read1ByteRegister
 48862 ;;		_I2C2_Write1ByteRegister
 48863 ;;		_I2C2_WriteNBytes
 48864 ;;		_I2C2_ReadDataBlock
 48865 ;; This function uses a non-reentrant model
 48866 ;;
 48867                           
 48868                           	psect	text203
 48869  00F494                     __ptext203:
 48870                           	callstack 0
 48871  00F494                     _I2C2_SetAddressNackCallback:
 48872                           	callstack 20
 48873                           
 48874                           ; BSR set to: 4
 48875                           ;i2c2_master.c: 285: I2C2_SetCallback(I2C2_ADDR_NACK, cb, ptr);
 48876                           
 48877                           ; BSR set to: 4
 48878                           ;incstack = 0
 48879  00F494  C013  F00E         	movff	I2C2_SetAddressNackCallback@cb,I2C2_SetCallback@cb
 48880  00F498  C014  F00F         	movff	I2C2_SetAddressNackCallback@cb+1,I2C2_SetCallback@cb+1
 48881  00F49C  C015  F010         	movff	I2C2_SetAddressNackCallback@ptr,I2C2_SetCallback@ptr
 48882  00F4A0  C016  F011         	movff	I2C2_SetAddressNackCallback@ptr+1,I2C2_SetCallback@ptr+1
 48883  00F4A4  0E02               	movlw	2
 48884  00F4A6  EC37  F06F         	call	_I2C2_SetCallback
 48885  00F4AA  0012               	return		;funcret
 48886  00F4AC                     __end_of_I2C2_SetAddressNackCallback:
 48887                           	callstack 0
 48888                           
 48889 ;; *************** function _I2C2_Open *****************
 48890 ;; Defined at:
 48891 ;;		line 176 in file "mcc_generated_files/i2c2_master.c"
 48892 ;; Parameters:    Size  Location     Type
 48893 ;;  address         1    wreg     unsigned char 
 48894 ;; Auto vars:     Size  Location     Type
 48895 ;;  address         1   13[COMRAM] unsigned char 
 48896 ;;  returnValue     1   14[COMRAM] enum E92
 48897 ;; Return value:  Size  Location     Type
 48898 ;;                  1    wreg      enum E92
 48899 ;; Registers used:
 48900 ;;		wreg, status,2, status,0, cstack
 48901 ;; Tracked objects:
 48902 ;;		On entry : 0/4
 48903 ;;		On exit  : 3F/4
 48904 ;;		Unchanged: 0/0
 48905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 48906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48909 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 48910 ;;Total ram usage:        2 bytes
 48911 ;; Hardware stack levels used:    1
 48912 ;; Hardware stack levels required when called:    7
 48913 ;; This function calls:
 48914 ;;		_I2C2_MasterClearIrq
 48915 ;;		_I2C2_MasterOpen
 48916 ;; This function is called by:
 48917 ;;		_I2C2_Read1ByteRegister
 48918 ;;		_I2C2_Write1ByteRegister
 48919 ;;		_I2C2_WriteNBytes
 48920 ;;		_I2C2_ReadNBytes
 48921 ;;		_I2C2_ReadDataBlock
 48922 ;; This function uses a non-reentrant model
 48923 ;;
 48924                           
 48925                           	psect	text204
 48926  00DAAA                     __ptext204:
 48927                           	callstack 0
 48928  00DAAA                     _I2C2_Open:
 48929                           	callstack 20
 48930                           
 48931                           ;incstack = 0
 48932                           ;I2C2_Open@address stored from wreg
 48933  00DAAA  6E0E               	movwf	I2C2_Open@address^0,c
 48934                           
 48935                           ;i2c2_master.c: 178: i2c2_error_t returnValue = I2C2_BUSY;
 48936  00DAAC  0E01               	movlw	1
 48937  00DAAE  6E0F               	movwf	I2C2_Open@returnValue^0,c
 48938                           
 48939                           ;i2c2_master.c: 180: if(!I2C2_Status.inUse)
 48940  00DAB0  0104               	movlb	4	; () banked
 48941  00DAB2  B5F6               	btfsc	(_I2C2_Status+35)& (0+255),2,b
 48942  00DAB4  D03A               	goto	l21817
 48943                           
 48944                           ; BSR set to: 4
 48945                           ;i2c2_master.c: 181: {;i2c2_master.c: 182: I2C2_Status.address = address;
 48946  00DAB6  C00E  F4EF         	movff	I2C2_Open@address,_I2C2_Status+28
 48947                           
 48948                           ; BSR set to: 4
 48949                           ;i2c2_master.c: 183: I2C2_Status.busy = 0;
 48950  00DABA  93F6               	bcf	(_I2C2_Status+35)& (0+255),1,b
 48951                           
 48952                           ; BSR set to: 4
 48953                           ;i2c2_master.c: 184: I2C2_Status.inUse = 1;
 48954  00DABC  85F6               	bsf	(_I2C2_Status+35)& (0+255),2,b
 48955                           
 48956                           ; BSR set to: 4
 48957                           ;i2c2_master.c: 185: I2C2_Status.addressNackCheck = 0;
 48958  00DABE  91F6               	bcf	(_I2C2_Status+35)& (0+255),0,b
 48959                           
 48960                           ; BSR set to: 4
 48961                           ;i2c2_master.c: 186: I2C2_Status.state = I2C2_RESET;
 48962  00DAC0  0E0E               	movlw	14
 48963  00DAC2  6FF4               	movwf	(_I2C2_Status+33)& (0+255),b
 48964                           
 48965                           ; BSR set to: 4
 48966                           ;i2c2_master.c: 187: I2C2_Status.time_out_value = 500;
 48967  00DAC4  0E01               	movlw	1
 48968  00DAC6  6FEE               	movwf	(_I2C2_Status+27)& (0+255),b
 48969  00DAC8  0EF4               	movlw	244
 48970  00DACA  6FED               	movwf	(_I2C2_Status+26)& (0+255),b
 48971                           
 48972                           ; BSR set to: 4
 48973                           ;i2c2_master.c: 188: I2C2_Status.bufferFree = 1;
 48974  00DACC  87F6               	bsf	(_I2C2_Status+35)& (0+255),3,b
 48975                           
 48976                           ; BSR set to: 4
 48977                           ;i2c2_master.c: 191: I2C2_Status.callbackTable[I2C2_DATA_COMPLETE]=I2C2_CallbackReturnSt
      +                          op;
 48978  00DACE  0E1A               	movlw	low _I2C2_CallbackReturnStop
 48979  00DAD0  6FD3               	movwf	_I2C2_Status& (0+255),b
 48980  00DAD2  0EF8               	movlw	high _I2C2_CallbackReturnStop
 48981  00DAD4  6FD4               	movwf	(_I2C2_Status+1)& (0+255),b
 48982                           
 48983                           ; BSR set to: 4
 48984                           ;i2c2_master.c: 192: I2C2_Status.callbackPayload[I2C2_DATA_COMPLETE] = (0);
 48985  00DAD6  0E00               	movlw	0
 48986  00DAD8  6FDF               	movwf	(_I2C2_Status+12)& (0+255),b
 48987  00DADA  0E00               	movlw	0
 48988  00DADC  6FE0               	movwf	(_I2C2_Status+13)& (0+255),b
 48989                           
 48990                           ; BSR set to: 4
 48991                           ;i2c2_master.c: 193: I2C2_Status.callbackTable[I2C2_WRITE_COLLISION]=I2C2_CallbackReturn
      +                          Stop;
 48992  00DADE  0E1A               	movlw	low _I2C2_CallbackReturnStop
 48993  00DAE0  6FD5               	movwf	(_I2C2_Status+2)& (0+255),b
 48994  00DAE2  0EF8               	movlw	high _I2C2_CallbackReturnStop
 48995  00DAE4  6FD6               	movwf	(_I2C2_Status+3)& (0+255),b
 48996                           
 48997                           ; BSR set to: 4
 48998                           ;i2c2_master.c: 194: I2C2_Status.callbackPayload[I2C2_WRITE_COLLISION] = (0);
 48999  00DAE6  0E00               	movlw	0
 49000  00DAE8  6FE1               	movwf	(_I2C2_Status+14)& (0+255),b
 49001  00DAEA  0E00               	movlw	0
 49002  00DAEC  6FE2               	movwf	(_I2C2_Status+15)& (0+255),b
 49003                           
 49004                           ; BSR set to: 4
 49005                           ;i2c2_master.c: 195: I2C2_Status.callbackTable[I2C2_ADDR_NACK]=I2C2_CallbackReturnStop;
 49006  00DAEE  0E1A               	movlw	low _I2C2_CallbackReturnStop
 49007  00DAF0  6FD7               	movwf	(_I2C2_Status+4)& (0+255),b
 49008  00DAF2  0EF8               	movlw	high _I2C2_CallbackReturnStop
 49009  00DAF4  6FD8               	movwf	(_I2C2_Status+5)& (0+255),b
 49010                           
 49011                           ; BSR set to: 4
 49012                           ;i2c2_master.c: 196: I2C2_Status.callbackPayload[I2C2_ADDR_NACK] = (0);
 49013  00DAF6  0E00               	movlw	0
 49014  00DAF8  6FE3               	movwf	(_I2C2_Status+16)& (0+255),b
 49015  00DAFA  0E00               	movlw	0
 49016  00DAFC  6FE4               	movwf	(_I2C2_Status+17)& (0+255),b
 49017                           
 49018                           ; BSR set to: 4
 49019                           ;i2c2_master.c: 197: I2C2_Status.callbackTable[I2C2_DATA_NACK]=I2C2_CallbackReturnStop;
 49020  00DAFE  0E1A               	movlw	low _I2C2_CallbackReturnStop
 49021  00DB00  6FD9               	movwf	(_I2C2_Status+6)& (0+255),b
 49022  00DB02  0EF8               	movlw	high _I2C2_CallbackReturnStop
 49023  00DB04  6FDA               	movwf	(_I2C2_Status+7)& (0+255),b
 49024                           
 49025                           ; BSR set to: 4
 49026                           ;i2c2_master.c: 198: I2C2_Status.callbackPayload[I2C2_DATA_NACK] = (0);
 49027  00DB06  0E00               	movlw	0
 49028  00DB08  6FE5               	movwf	(_I2C2_Status+18)& (0+255),b
 49029  00DB0A  0E00               	movlw	0
 49030  00DB0C  6FE6               	movwf	(_I2C2_Status+19)& (0+255),b
 49031                           
 49032                           ; BSR set to: 4
 49033                           ;i2c2_master.c: 199: I2C2_Status.callbackTable[I2C2_TIMEOUT]=I2C2_CallbackReturnReset;
 49034  00DB0E  0E16               	movlw	low _I2C2_CallbackReturnReset
 49035  00DB10  6FDB               	movwf	(_I2C2_Status+8)& (0+255),b
 49036  00DB12  0EF8               	movlw	high _I2C2_CallbackReturnReset
 49037  00DB14  6FDC               	movwf	(_I2C2_Status+9)& (0+255),b
 49038                           
 49039                           ; BSR set to: 4
 49040                           ;i2c2_master.c: 200: I2C2_Status.callbackPayload[I2C2_TIMEOUT] = (0);
 49041  00DB16  0E00               	movlw	0
 49042  00DB18  6FE7               	movwf	(_I2C2_Status+20)& (0+255),b
 49043  00DB1A  0E00               	movlw	0
 49044  00DB1C  6FE8               	movwf	(_I2C2_Status+21)& (0+255),b
 49045                           
 49046                           ; BSR set to: 4
 49047                           ;i2c2_master.c: 202: I2C2_MasterClearIrq();
 49048  00DB1E  EC19  F07C         	call	_I2C2_MasterClearIrq	;wreg free
 49049                           
 49050                           ; BSR set to: 4
 49051                           ;i2c2_master.c: 203: I2C2_MasterOpen();
 49052  00DB22  EC56  F07A         	call	_I2C2_MasterOpen	;wreg free
 49053                           
 49054                           ; BSR set to: 4
 49055                           ;i2c2_master.c: 204: returnValue = I2C2_NOERR;
 49056  00DB26  0E00               	movlw	0
 49057  00DB28  6E0F               	movwf	I2C2_Open@returnValue^0,c
 49058  00DB2A                     l21817:
 49059                           
 49060                           ; BSR set to: 4
 49061                           ;i2c2_master.c: 205: };i2c2_master.c: 206: return returnValue;
 49062  00DB2A  500F               	movf	I2C2_Open@returnValue^0,w,c
 49063                           
 49064                           ; BSR set to: 4
 49065  00DB2C  0012               	return		;funcret
 49066  00DB2E                     __end_of_I2C2_Open:
 49067                           	callstack 0
 49068                           
 49069 ;; *************** function _I2C2_MasterOpen *****************
 49070 ;; Defined at:
 49071 ;;		line 543 in file "mcc_generated_files/i2c2_master.c"
 49072 ;; Parameters:    Size  Location     Type
 49073 ;;		None
 49074 ;; Auto vars:     Size  Location     Type
 49075 ;;		None
 49076 ;; Return value:  Size  Location     Type
 49077 ;;                  1    wreg      unsigned char 
 49078 ;; Registers used:
 49079 ;;		wreg, status,2
 49080 ;; Tracked objects:
 49081 ;;		On entry : 3F/4
 49082 ;;		On exit  : 3F/4
 49083 ;;		Unchanged: 3F/0
 49084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49089 ;;Total ram usage:        0 bytes
 49090 ;; Hardware stack levels used:    1
 49091 ;; Hardware stack levels required when called:    6
 49092 ;; This function calls:
 49093 ;;		Nothing
 49094 ;; This function is called by:
 49095 ;;		_I2C2_Open
 49096 ;; This function uses a non-reentrant model
 49097 ;;
 49098                           
 49099                           	psect	text205
 49100  00F4AC                     __ptext205:
 49101                           	callstack 0
 49102  00F4AC                     _I2C2_MasterOpen:
 49103                           	callstack 20
 49104                           
 49105                           ; BSR set to: 4
 49106                           ;i2c2_master.c: 545: if(!SSP2CON1bits.SSPEN)
 49107                           
 49108                           ; BSR set to: 4
 49109                           ;incstack = 0
 49110  00F4AC  BA6C               	btfsc	108,5,c	;volatile
 49111  00F4AE  0012               	return	
 49112                           
 49113                           ; BSR set to: 4
 49114                           ;i2c2_master.c: 546: {;i2c2_master.c: 547: SSP2STAT = 0x00;
 49115  00F4B0  0E00               	movlw	0
 49116  00F4B2  6E6D               	movwf	109,c	;volatile
 49117                           
 49118                           ;i2c2_master.c: 548: SSP2CON1 = 0x08;
 49119  00F4B4  0E08               	movlw	8
 49120  00F4B6  6E6C               	movwf	108,c	;volatile
 49121                           
 49122                           ;i2c2_master.c: 549: SSP2CON2 = 0x00;
 49123  00F4B8  0E00               	movlw	0
 49124  00F4BA  6E6B               	movwf	107,c	;volatile
 49125                           
 49126                           ;i2c2_master.c: 550: SSP2ADD = 0x9F;
 49127  00F4BC  0E9F               	movlw	159
 49128  00F4BE  6E6E               	movwf	110,c	;volatile
 49129                           
 49130                           ; BSR set to: 4
 49131                           ;i2c2_master.c: 551: SSP2CON1bits.SSPEN = 1;
 49132  00F4C0  8A6C               	bsf	108,5,c	;volatile
 49133                           
 49134                           ; BSR set to: 4
 49135  00F4C2  0012               	return		;funcret
 49136  00F4C4                     __end_of_I2C2_MasterOpen:
 49137                           	callstack 0
 49138                           
 49139 ;; *************** function _I2C2_MasterWrite *****************
 49140 ;; Defined at:
 49141 ;;		line 251 in file "mcc_generated_files/i2c2_master.c"
 49142 ;; Parameters:    Size  Location     Type
 49143 ;;		None
 49144 ;; Auto vars:     Size  Location     Type
 49145 ;;		None
 49146 ;; Return value:  Size  Location     Type
 49147 ;;                  1    wreg      enum E92
 49148 ;; Registers used:
 49149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 49150 ;; Tracked objects:
 49151 ;;		On entry : 0/4
 49152 ;;		On exit  : 3F/4
 49153 ;;		Unchanged: 0/0
 49154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49159 ;;Total ram usage:        0 bytes
 49160 ;; Hardware stack levels used:    1
 49161 ;; Hardware stack levels required when called:   13
 49162 ;; This function calls:
 49163 ;;		_I2C2_MasterOperation
 49164 ;; This function is called by:
 49165 ;;		_I2C2_Read1ByteRegister
 49166 ;;		_I2C2_Write1ByteRegister
 49167 ;;		_I2C2_WriteNBytes
 49168 ;;		_I2C2_ReadDataBlock
 49169 ;; This function uses a non-reentrant model
 49170 ;;
 49171                           
 49172                           	psect	text206
 49173  00F778                     __ptext206:
 49174                           	callstack 0
 49175  00F778                     _I2C2_MasterWrite:
 49176                           	callstack 14
 49177                           
 49178                           ;i2c2_master.c: 253: return I2C2_MasterOperation(0);;	Return value of _I2C2_MasterWrite 
      +                          is never used
 49179                           
 49180                           ; BSR set to: 4
 49181                           ;incstack = 0
 49182  00F778  0E00               	movlw	0
 49183  00F77A  ECEF  F077         	call	_I2C2_MasterOperation
 49184                           
 49185                           ; BSR set to: 4
 49186  00F77E  0012               	return		;funcret
 49187  00F780                     __end_of_I2C2_MasterWrite:
 49188                           	callstack 0
 49189                           
 49190 ;; *************** function _I2C2_MasterOperation *****************
 49191 ;; Defined at:
 49192 ;;		line 224 in file "mcc_generated_files/i2c2_master.c"
 49193 ;; Parameters:    Size  Location     Type
 49194 ;;  read            1    wreg     unsigned char 
 49195 ;; Auto vars:     Size  Location     Type
 49196 ;;  read            1   28[COMRAM] unsigned char 
 49197 ;;  returnValue     1   29[COMRAM] enum E92
 49198 ;; Return value:  Size  Location     Type
 49199 ;;                  1    wreg      enum E92
 49200 ;; Registers used:
 49201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 49202 ;; Tracked objects:
 49203 ;;		On entry : 0/4
 49204 ;;		On exit  : 3F/4
 49205 ;;		Unchanged: 0/0
 49206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49208 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49210 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49211 ;;Total ram usage:        2 bytes
 49212 ;; Hardware stack levels used:    1
 49213 ;; Hardware stack levels required when called:   12
 49214 ;; This function calls:
 49215 ;;		_I2C2_MasterStart
 49216 ;;		_I2C2_Poller
 49217 ;; This function is called by:
 49218 ;;		_I2C2_MasterRead
 49219 ;;		_I2C2_MasterWrite
 49220 ;; This function uses a non-reentrant model
 49221 ;;
 49222                           
 49223                           	psect	text207
 49224  00EFDE                     __ptext207:
 49225                           	callstack 0
 49226  00EFDE                     _I2C2_MasterOperation:
 49227                           	callstack 14
 49228                           
 49229                           ; BSR set to: 4
 49230                           ;incstack = 0
 49231                           ;I2C2_MasterOperation@read stored from wreg
 49232  00EFDE  6E1D               	movwf	I2C2_MasterOperation@read^0,c
 49233                           
 49234                           ;i2c2_master.c: 226: i2c2_error_t returnValue = I2C2_BUSY;
 49235  00EFE0  0E01               	movlw	1
 49236  00EFE2  6E1E               	movwf	I2C2_MasterOperation@returnValue^0,c
 49237                           
 49238                           ;i2c2_master.c: 227: if(!I2C2_Status.busy)
 49239  00EFE4  0104               	movlb	4	; () banked
 49240  00EFE6  B3F6               	btfsc	(_I2C2_Status+35)& (0+255),1,b
 49241  00EFE8  D00E               	goto	l21389
 49242                           
 49243                           ; BSR set to: 4
 49244                           ;i2c2_master.c: 228: {;i2c2_master.c: 229: I2C2_Status.busy = 1;
 49245  00EFEA  83F6               	bsf	(_I2C2_Status+35)& (0+255),1,b
 49246                           
 49247                           ; BSR set to: 4
 49248                           ;i2c2_master.c: 230: returnValue = I2C2_NOERR;
 49249  00EFEC  0E00               	movlw	0
 49250  00EFEE  6E1E               	movwf	I2C2_MasterOperation@returnValue^0,c
 49251                           
 49252                           ; BSR set to: 4
 49253                           ;i2c2_master.c: 232: if(read)
 49254  00EFF0  501D               	movf	I2C2_MasterOperation@read^0,w,c
 49255  00EFF2  B4D8               	btfsc	status,2,c
 49256  00EFF4  D002               	goto	l21383
 49257                           
 49258                           ; BSR set to: 4
 49259                           ;i2c2_master.c: 233: {;i2c2_master.c: 234: I2C2_Status.state = I2C2_SEND_ADR_READ;
 49260  00EFF6  0E01               	movlw	1
 49261  00EFF8  D001               	goto	L44
 49262  00EFFA                     l21383:
 49263                           
 49264                           ; BSR set to: 4
 49265                           ;i2c2_master.c: 236: else;i2c2_master.c: 237: {;i2c2_master.c: 238: I2C2_Status.state = 
      +                          I2C2_SEND_ADR_WRITE;
 49266  00EFFA  0E02               	movlw	2
 49267  00EFFC                     L44:
 49268  00EFFC  6FF4               	movwf	(_I2C2_Status+33)& (0+255),b
 49269                           
 49270                           ; BSR set to: 4
 49271                           ;i2c2_master.c: 239: };i2c2_master.c: 240: I2C2_MasterStart();
 49272  00EFFE  EC13  F07C         	call	_I2C2_MasterStart	;wreg free
 49273                           
 49274                           ; BSR set to: 4
 49275                           ;i2c2_master.c: 241: I2C2_Poller();
 49276  00F002  EC15  F07B         	call	_I2C2_Poller	;wreg free
 49277  00F006                     l21389:
 49278                           
 49279                           ; BSR set to: 4
 49280                           ;i2c2_master.c: 242: };i2c2_master.c: 243: return returnValue;
 49281  00F006  501E               	movf	I2C2_MasterOperation@returnValue^0,w,c
 49282                           
 49283                           ; BSR set to: 4
 49284  00F008  0012               	return		;funcret
 49285  00F00A                     __end_of_I2C2_MasterOperation:
 49286                           	callstack 0
 49287                           
 49288 ;; *************** function _I2C2_Poller *****************
 49289 ;; Defined at:
 49290 ;;		line 312 in file "mcc_generated_files/i2c2_master.c"
 49291 ;; Parameters:    Size  Location     Type
 49292 ;;		None
 49293 ;; Auto vars:     Size  Location     Type
 49294 ;;		None
 49295 ;; Return value:  Size  Location     Type
 49296 ;;                  1    wreg      void 
 49297 ;; Registers used:
 49298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 49299 ;; Tracked objects:
 49300 ;;		On entry : 3F/4
 49301 ;;		On exit  : 3F/4
 49302 ;;		Unchanged: 0/0
 49303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49308 ;;Total ram usage:        0 bytes
 49309 ;; Hardware stack levels used:    1
 49310 ;; Hardware stack levels required when called:   11
 49311 ;; This function calls:
 49312 ;;		_I2C2_MasterFsm
 49313 ;;		_I2C2_MasterWaitForEvent
 49314 ;; This function is called by:
 49315 ;;		_I2C2_MasterOperation
 49316 ;; This function uses a non-reentrant model
 49317 ;;
 49318                           
 49319                           	psect	text208
 49320  00F62A                     __ptext208:
 49321                           	callstack 0
 49322  00F62A                     _I2C2_Poller:
 49323                           	callstack 14
 49324                           
 49325                           ; BSR set to: 4
 49326                           ;i2c2_master.c: 314: while(I2C2_Status.busy)
 49327                           
 49328                           ; BSR set to: 4
 49329                           ;incstack = 0
 49330  00F62A  D004               	goto	l20453
 49331  00F62C                     l20449:
 49332                           
 49333                           ; BSR set to: 4
 49334                           ;i2c2_master.c: 315: {;i2c2_master.c: 316: I2C2_MasterWaitForEvent();
 49335  00F62C  ECE7  F07B         	call	_I2C2_MasterWaitForEvent	;wreg free
 49336                           
 49337                           ; BSR set to: 4
 49338                           ;i2c2_master.c: 317: I2C2_MasterFsm();
 49339  00F630  ECEA  F072         	call	_I2C2_MasterFsm	;wreg free
 49340  00F634                     l20453:
 49341                           
 49342                           ; BSR set to: 4
 49343  00F634  A3F6               	btfss	(_I2C2_Status+35)& (0+255),1,b
 49344  00F636  0012               	return	
 49345  00F638  D7F9               	goto	l20449
 49346  00F63A                     __end_of_I2C2_Poller:
 49347                           	callstack 0
 49348                           
 49349 ;; *************** function _I2C2_MasterWaitForEvent *****************
 49350 ;; Defined at:
 49351 ;;		line 650 in file "mcc_generated_files/i2c2_master.c"
 49352 ;; Parameters:    Size  Location     Type
 49353 ;;		None
 49354 ;; Auto vars:     Size  Location     Type
 49355 ;;		None
 49356 ;; Return value:  Size  Location     Type
 49357 ;;                  1    wreg      void 
 49358 ;; Registers used:
 49359 ;;		None
 49360 ;; Tracked objects:
 49361 ;;		On entry : 3F/4
 49362 ;;		On exit  : 3F/4
 49363 ;;		Unchanged: 3F/0
 49364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49369 ;;Total ram usage:        0 bytes
 49370 ;; Hardware stack levels used:    1
 49371 ;; Hardware stack levels required when called:    6
 49372 ;; This function calls:
 49373 ;;		Nothing
 49374 ;; This function is called by:
 49375 ;;		_I2C2_Poller
 49376 ;; This function uses a non-reentrant model
 49377 ;;
 49378                           
 49379                           	psect	text209
 49380  00F7CE                     __ptext209:
 49381                           	callstack 0
 49382  00F7CE                     _I2C2_MasterWaitForEvent:
 49383                           	callstack 18
 49384                           
 49385                           ; BSR set to: 4
 49386                           ;i2c2_master.c: 653: {;i2c2_master.c: 654: if(PIR3bits.SSP2IF)
 49387                           
 49388                           ; BSR set to: 4
 49389                           ;incstack = 0
 49390                           ;i2c2_master.c: 652: while(1)
 49391  00F7CE  BEA4               	btfsc	164,7,c	;volatile
 49392  00F7D0  0012               	return	
 49393  00F7D2  D7FD               	goto	_I2C2_MasterWaitForEvent
 49394  00F7D4                     __end_of_I2C2_MasterWaitForEvent:
 49395                           	callstack 0
 49396                           
 49397 ;; *************** function _I2C2_MasterFsm *****************
 49398 ;; Defined at:
 49399 ;;		line 321 in file "mcc_generated_files/i2c2_master.c"
 49400 ;; Parameters:    Size  Location     Type
 49401 ;;		None
 49402 ;; Auto vars:     Size  Location     Type
 49403 ;;		None
 49404 ;; Return value:  Size  Location     Type
 49405 ;;                  1    wreg      void 
 49406 ;; Registers used:
 49407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 49408 ;; Tracked objects:
 49409 ;;		On entry : 3F/4
 49410 ;;		On exit  : 3F/4
 49411 ;;		Unchanged: 0/0
 49412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49416 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49417 ;;Total ram usage:        2 bytes
 49418 ;; Hardware stack levels used:    1
 49419 ;; Hardware stack levels required when called:   10
 49420 ;; This function calls:
 49421 ;;		_I2C2_DO_ADDRESS_NACK
 49422 ;;		_I2C2_DO_IDLE
 49423 ;;		_I2C2_DO_RCEN
 49424 ;;		_I2C2_DO_RESET
 49425 ;;		_I2C2_DO_RX
 49426 ;;		_I2C2_DO_RX_ACK
 49427 ;;		_I2C2_DO_RX_NACK_RESTART
 49428 ;;		_I2C2_DO_RX_NACK_STOP
 49429 ;;		_I2C2_DO_SEND_ADR_READ
 49430 ;;		_I2C2_DO_SEND_ADR_WRITE
 49431 ;;		_I2C2_DO_SEND_RESTART
 49432 ;;		_I2C2_DO_SEND_RESTART_READ
 49433 ;;		_I2C2_DO_SEND_RESTART_WRITE
 49434 ;;		_I2C2_DO_SEND_STOP
 49435 ;;		_I2C2_DO_TX
 49436 ;;		_I2C2_DO_TX_EMPTY
 49437 ;;		_I2C2_MasterClearIrq
 49438 ;;		_I2C2_MasterIsNack
 49439 ;; This function is called by:
 49440 ;;		_I2C2_Poller
 49441 ;; This function uses a non-reentrant model
 49442 ;;
 49443                           
 49444                           	psect	text210
 49445  00E5D4                     __ptext210:
 49446                           	callstack 0
 49447  00E5D4                     _I2C2_MasterFsm:
 49448                           	callstack 14
 49449                           
 49450                           ; BSR set to: 4
 49451                           ;i2c2_master.c: 323: I2C2_MasterClearIrq();
 49452                           
 49453                           ; BSR set to: 4
 49454                           ;incstack = 0
 49455  00E5D4  EC19  F07C         	call	_I2C2_MasterClearIrq	;wreg free
 49456                           
 49457                           ; BSR set to: 4
 49458                           ;i2c2_master.c: 325: if(I2C2_Status.addressNackCheck && I2C2_MasterIsNack())
 49459  00E5D8  A1F6               	btfss	(_I2C2_Status+35)& (0+255),0,b
 49460  00E5DA  D007               	goto	l20019
 49461                           
 49462                           ; BSR set to: 4
 49463  00E5DC  EC57  F07B         	call	_I2C2_MasterIsNack	;wreg free
 49464  00E5E0  0900               	iorlw	0
 49465  00E5E2  B4D8               	btfsc	status,2,c
 49466  00E5E4  D002               	goto	l20019
 49467                           
 49468                           ; BSR set to: 4
 49469                           ;i2c2_master.c: 326: {;i2c2_master.c: 327: I2C2_Status.state = I2C2_ADDRESS_NACK;
 49470  00E5E6  0E0F               	movlw	15
 49471  00E5E8  6FF4               	movwf	(_I2C2_Status+33)& (0+255),b
 49472  00E5EA                     l20019:
 49473                           
 49474                           ; BSR set to: 4
 49475                           ;i2c2_master.c: 328: };i2c2_master.c: 329: I2C2_Status.state = i2c2_fsmStateTable[I2C2_S
      +                          tatus.state]();
 49476  00E5EA  51F4               	movf	(_I2C2_Status+33)& (0+255),w,b
 49477  00E5EC  0D02               	mullw	2
 49478  00E5EE  0E6F               	movlw	low _i2c2_fsmStateTable
 49479  00E5F0  24F3               	addwf	243,w,c
 49480  00E5F2  6EF6               	movwf	tblptrl,c
 49481  00E5F4  0EFA               	movlw	high _i2c2_fsmStateTable
 49482  00E5F6  20F4               	addwfc	244,w,c
 49483  00E5F8  6EF7               	movwf	tblptrh,c
 49484  00E5FA                     	if	1	;There are 3 active tblptr bytes
 49485  00E5FA  6AF8               	clrf	tblptru,c
 49486  00E5FC  0E00               	movlw	low (__mediumconst shr (0+16))
 49487  00E5FE  22F8               	addwfc	tblptru,f,c
 49488  00E600                     	endif
 49489  00E600  0009               	tblrd		*+
 49490  00E602  CFF5 F01B          	movff	tablat,??_I2C2_MasterFsm
 49491  00E606  0009               	tblrd		*+
 49492  00E608  CFF5 F01C          	movff	tablat,??_I2C2_MasterFsm+1
 49493  00E60C  D801               	call	u21768
 49494  00E60E  D009               	goto	u21769
 49495  00E610                     u21768:
 49496  00E610  0005               	push	
 49497  00E612  6EFA               	movwf	pclath,c
 49498  00E614  501B               	movf	??_I2C2_MasterFsm^0,w,c
 49499  00E616  6EFD               	movwf	tosl,c
 49500  00E618  501C               	movf	(??_I2C2_MasterFsm+1)^0,w,c
 49501  00E61A  6EFE               	movwf	tosh,c
 49502  00E61C  6AFF               	clrf	tosu,c
 49503  00E61E  50FA               	movf	pclath,w,c
 49504  00E620  0012               	return		;indir
 49505  00E622                     u21769:
 49506  00E622  0104               	movlb	4	; () banked
 49507  00E624  6FF4               	movwf	(_I2C2_Status+33)& (0+255),b
 49508                           
 49509                           ; BSR set to: 4
 49510  00E626  0012               	return		;funcret
 49511  00E628                     __end_of_I2C2_MasterFsm:
 49512                           	callstack 0
 49513                           
 49514 ;; *************** function _I2C2_DO_ADDRESS_NACK *****************
 49515 ;; Defined at:
 49516 ;;		line 500 in file "mcc_generated_files/i2c2_master.c"
 49517 ;; Parameters:    Size  Location     Type
 49518 ;;		None
 49519 ;; Auto vars:     Size  Location     Type
 49520 ;;		None
 49521 ;; Return value:  Size  Location     Type
 49522 ;;                  1    wreg      enum E5724
 49523 ;; Registers used:
 49524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 49525 ;; Tracked objects:
 49526 ;;		On entry : 3F/4
 49527 ;;		On exit  : 0/0
 49528 ;;		Unchanged: 0/0
 49529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49534 ;;Total ram usage:        0 bytes
 49535 ;; Hardware stack levels used:    1
 49536 ;; Hardware stack levels required when called:    9
 49537 ;; This function calls:
 49538 ;;		Absolute function
 49539 ;;		_I2C2_CallbackReturnReset
 49540 ;;		_I2C2_CallbackReturnStop
 49541 ;;		_I2C2_DO_SEND_RESTART
 49542 ;;		_I2C2_DO_SEND_STOP
 49543 ;;		_rd1RegCompleteHandler
 49544 ;;		_rd2RegCompleteHandler
 49545 ;;		_rdBlkRegCompleteHandler
 49546 ;;		_wr1RegCompleteHandler
 49547 ;;		_wr2RegCompleteHandler
 49548 ;; This function is called by:
 49549 ;;		_I2C2_MasterFsm
 49550 ;; This function uses a non-reentrant model
 49551 ;;
 49552                           
 49553                           	psect	text211
 49554  00EB08                     __ptext211:
 49555                           	callstack 0
 49556  00EB08                     _I2C2_DO_ADDRESS_NACK:
 49557                           	callstack 14
 49558                           
 49559                           ; BSR set to: 4
 49560                           ;i2c2_master.c: 502: I2C2_Status.addressNackCheck = 0;
 49561                           
 49562                           ; BSR set to: 4
 49563                           ;incstack = 0
 49564  00EB08  91F6               	bcf	(_I2C2_Status+35)& (0+255),0,b
 49565                           
 49566                           ; BSR set to: 4
 49567                           ;i2c2_master.c: 503: I2C2_Status.error = I2C2_FAIL;
 49568  00EB0A  0E02               	movlw	2
 49569  00EB0C  6FF5               	movwf	(_I2C2_Status+34)& (0+255),b
 49570                           
 49571                           ;i2c2_master.c: 504: switch(I2C2_Status.callbackTable[I2C2_ADDR_NACK](I2C2_Status.callba
      +                          ckPayload[I2C2_ADDR_NACK]))
 49572  00EB0E  D006               	goto	l19545
 49573  00EB10                     l19535:
 49574                           
 49575                           ;i2c2_master.c: 507: case I2C2_RESTART_WRITE:;i2c2_master.c: 508: return I2C2_DO_SEND_RE
      +                          START();
 49576  00EB10  ECD0  F07B         	call	_I2C2_DO_SEND_RESTART	;wreg free
 49577  00EB14  0012               	return	
 49578  00EB16                     l19539:
 49579                           
 49580                           ;i2c2_master.c: 510: return I2C2_DO_SEND_STOP();
 49581  00EB16  ECCC  F07B         	call	_I2C2_DO_SEND_STOP	;wreg free
 49582  00EB1A  0012               	return	
 49583  00EB1C                     l19545:
 49584                           
 49585                           ; BSR set to: 4
 49586  00EB1C  C4E3  F017         	movff	_I2C2_Status+16,I2C2_CallbackReturnReset@funPtr
 49587  00EB20  C4E4  F018         	movff	_I2C2_Status+17,I2C2_CallbackReturnReset@funPtr+1
 49588  00EB24  D801               	call	u20858
 49589  00EB26  D009               	goto	u20859
 49590  00EB28                     u20858:
 49591  00EB28  0005               	push	
 49592  00EB2A  6EFA               	movwf	pclath,c
 49593  00EB2C  51D7               	movf	(_I2C2_Status+4)& (0+255),w,b
 49594  00EB2E  6EFD               	movwf	tosl,c
 49595  00EB30  51D8               	movf	(_I2C2_Status+5)& (0+255),w,b
 49596  00EB32  6EFE               	movwf	tosh,c
 49597  00EB34  6AFF               	clrf	tosu,c
 49598  00EB36  50FA               	movf	pclath,w,c
 49599  00EB38  0012               	return		;indir
 49600  00EB3A                     u20859:
 49601                           
 49602                           ; Switch size 1, requested type "simple"
 49603                           ; Number of cases is 2, Range of values is 2 to 3
 49604                           ; switch strategies available:
 49605                           ; Name         Instructions Cycles
 49606                           ; simple_byte            7     4 (average)
 49607                           ;	Chosen strategy is simple_byte
 49608  00EB3A  0A02               	xorlw	2	; case 2
 49609  00EB3C  B4D8               	btfsc	status,2,c
 49610  00EB3E  D7E8               	goto	l19535
 49611  00EB40  0A01               	xorlw	1	; case 3
 49612  00EB42  B4D8               	btfsc	status,2,c
 49613  00EB44  D7E5               	goto	l19535
 49614  00EB46  D7E7               	goto	l19539
 49615  00EB48                     __end_of_I2C2_DO_ADDRESS_NACK:
 49616                           	callstack 0
 49617                           
 49618 ;; *************** function _I2C2_DO_RESET *****************
 49619 ;; Defined at:
 49620 ;;		line 494 in file "mcc_generated_files/i2c2_master.c"
 49621 ;; Parameters:    Size  Location     Type
 49622 ;;		None
 49623 ;; Auto vars:     Size  Location     Type
 49624 ;;		None
 49625 ;; Return value:  Size  Location     Type
 49626 ;;                  1    wreg      enum E5724
 49627 ;; Registers used:
 49628 ;;		wreg, status,2
 49629 ;; Tracked objects:
 49630 ;;		On entry : 3F/4
 49631 ;;		On exit  : 3F/4
 49632 ;;		Unchanged: 0/0
 49633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49638 ;;Total ram usage:        0 bytes
 49639 ;; Hardware stack levels used:    1
 49640 ;; Hardware stack levels required when called:    6
 49641 ;; This function calls:
 49642 ;;		Nothing
 49643 ;; This function is called by:
 49644 ;;		_I2C2_MasterFsm
 49645 ;; This function uses a non-reentrant model
 49646 ;;
 49647                           
 49648                           	psect	text212
 49649  00F714                     __ptext212:
 49650                           	callstack 0
 49651  00F714                     _I2C2_DO_RESET:
 49652                           	callstack 17
 49653                           
 49654                           ; BSR set to: 4
 49655                           ;i2c2_master.c: 496: I2C2_Status.busy = 0;
 49656                           
 49657                           ;incstack = 0
 49658  00F714  93F6               	bcf	(_I2C2_Status+35)& (0+255),1,b
 49659                           
 49660                           ; BSR set to: 4
 49661                           ;i2c2_master.c: 497: I2C2_Status.error = I2C2_NOERR;
 49662  00F716  0E00               	movlw	0
 49663  00F718  6FF5               	movwf	(_I2C2_Status+34)& (0+255),b
 49664                           
 49665                           ; BSR set to: 4
 49666                           ;i2c2_master.c: 498: return I2C2_RESET;
 49667  00F71A  0E0E               	movlw	14
 49668                           
 49669                           ; BSR set to: 4
 49670  00F71C  0012               	return		;funcret
 49671  00F71E                     __end_of_I2C2_DO_RESET:
 49672                           	callstack 0
 49673                           
 49674 ;; *************** function _I2C2_DO_RX_NACK_RESTART *****************
 49675 ;; Defined at:
 49676 ;;		line 488 in file "mcc_generated_files/i2c2_master.c"
 49677 ;; Parameters:    Size  Location     Type
 49678 ;;		None
 49679 ;; Auto vars:     Size  Location     Type
 49680 ;;		None
 49681 ;; Return value:  Size  Location     Type
 49682 ;;                  1    wreg      enum E5724
 49683 ;; Registers used:
 49684 ;;		wreg, cstack
 49685 ;; Tracked objects:
 49686 ;;		On entry : 0/4
 49687 ;;		On exit  : 0/0
 49688 ;;		Unchanged: 0/0
 49689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49694 ;;Total ram usage:        0 bytes
 49695 ;; Hardware stack levels used:    1
 49696 ;; Hardware stack levels required when called:    7
 49697 ;; This function calls:
 49698 ;;		_I2C2_MasterSendNack
 49699 ;; This function is called by:
 49700 ;;		_I2C2_DO_RX
 49701 ;;		_I2C2_MasterFsm
 49702 ;; This function uses a non-reentrant model
 49703 ;;
 49704                           
 49705                           	psect	text213
 49706  00F780                     __ptext213:
 49707                           	callstack 0
 49708  00F780                     _I2C2_DO_RX_NACK_RESTART:
 49709                           	callstack 16
 49710                           
 49711                           ;i2c2_master.c: 490: I2C2_MasterSendNack();
 49712                           
 49713                           ; BSR set to: 4
 49714                           ;incstack = 0
 49715  00F780  ECED  F07B         	call	_I2C2_MasterSendNack	;wreg free
 49716                           
 49717                           ;i2c2_master.c: 491: return I2C2_SEND_RESTART;
 49718  00F784  0E09               	movlw	9
 49719  00F786  0012               	return		;funcret
 49720  00F788                     __end_of_I2C2_DO_RX_NACK_RESTART:
 49721                           	callstack 0
 49722                           
 49723 ;; *************** function _I2C2_DO_RX_NACK_STOP *****************
 49724 ;; Defined at:
 49725 ;;		line 482 in file "mcc_generated_files/i2c2_master.c"
 49726 ;; Parameters:    Size  Location     Type
 49727 ;;		None
 49728 ;; Auto vars:     Size  Location     Type
 49729 ;;		None
 49730 ;; Return value:  Size  Location     Type
 49731 ;;                  1    wreg      enum E5724
 49732 ;; Registers used:
 49733 ;;		wreg, cstack
 49734 ;; Tracked objects:
 49735 ;;		On entry : 0/4
 49736 ;;		On exit  : 0/0
 49737 ;;		Unchanged: 0/0
 49738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49743 ;;Total ram usage:        0 bytes
 49744 ;; Hardware stack levels used:    1
 49745 ;; Hardware stack levels required when called:    7
 49746 ;; This function calls:
 49747 ;;		_I2C2_MasterSendNack
 49748 ;; This function is called by:
 49749 ;;		_I2C2_DO_RX
 49750 ;;		_I2C2_MasterFsm
 49751 ;; This function uses a non-reentrant model
 49752 ;;
 49753                           
 49754                           	psect	text214
 49755  00F788                     __ptext214:
 49756                           	callstack 0
 49757  00F788                     _I2C2_DO_RX_NACK_STOP:
 49758                           	callstack 16
 49759                           
 49760                           ;i2c2_master.c: 484: I2C2_MasterSendNack();
 49761                           
 49762                           ;incstack = 0
 49763  00F788  ECED  F07B         	call	_I2C2_MasterSendNack	;wreg free
 49764                           
 49765                           ;i2c2_master.c: 485: return I2C2_SEND_STOP;
 49766  00F78C  0E0A               	movlw	10
 49767  00F78E  0012               	return		;funcret
 49768  00F790                     __end_of_I2C2_DO_RX_NACK_STOP:
 49769                           	callstack 0
 49770                           
 49771 ;; *************** function _I2C2_DO_RX_ACK *****************
 49772 ;; Defined at:
 49773 ;;		line 475 in file "mcc_generated_files/i2c2_master.c"
 49774 ;; Parameters:    Size  Location     Type
 49775 ;;		None
 49776 ;; Auto vars:     Size  Location     Type
 49777 ;;		None
 49778 ;; Return value:  Size  Location     Type
 49779 ;;                  1    wreg      enum E5724
 49780 ;; Registers used:
 49781 ;;		wreg, cstack
 49782 ;; Tracked objects:
 49783 ;;		On entry : 3F/4
 49784 ;;		On exit  : 3F/4
 49785 ;;		Unchanged: 3F/0
 49786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49791 ;;Total ram usage:        0 bytes
 49792 ;; Hardware stack levels used:    1
 49793 ;; Hardware stack levels required when called:    7
 49794 ;; This function calls:
 49795 ;;		_I2C2_MasterSendAck
 49796 ;; This function is called by:
 49797 ;;		_I2C2_MasterFsm
 49798 ;; This function uses a non-reentrant model
 49799 ;;
 49800                           
 49801                           	psect	text215
 49802  00F790                     __ptext215:
 49803                           	callstack 0
 49804  00F790                     _I2C2_DO_RX_ACK:
 49805                           	callstack 16
 49806                           
 49807                           ; BSR set to: 4
 49808                           ;i2c2_master.c: 477: I2C2_MasterSendAck();
 49809                           
 49810                           ;incstack = 0
 49811  00F790  ECEA  F07B         	call	_I2C2_MasterSendAck	;wreg free
 49812                           
 49813                           ; BSR set to: 4
 49814                           ;i2c2_master.c: 478: return I2C2_RCEN;
 49815  00F794  0E05               	movlw	5
 49816                           
 49817                           ; BSR set to: 4
 49818  00F796  0012               	return		;funcret
 49819  00F798                     __end_of_I2C2_DO_RX_ACK:
 49820                           	callstack 0
 49821                           
 49822 ;; *************** function _I2C2_DO_SEND_STOP *****************
 49823 ;; Defined at:
 49824 ;;		line 469 in file "mcc_generated_files/i2c2_master.c"
 49825 ;; Parameters:    Size  Location     Type
 49826 ;;		None
 49827 ;; Auto vars:     Size  Location     Type
 49828 ;;		None
 49829 ;; Return value:  Size  Location     Type
 49830 ;;                  1    wreg      enum E5724
 49831 ;; Registers used:
 49832 ;;		wreg, cstack
 49833 ;; Tracked objects:
 49834 ;;		On entry : 0/4
 49835 ;;		On exit  : 0/0
 49836 ;;		Unchanged: 0/0
 49837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49842 ;;Total ram usage:        0 bytes
 49843 ;; Hardware stack levels used:    1
 49844 ;; Hardware stack levels required when called:    7
 49845 ;; This function calls:
 49846 ;;		_I2C2_MasterStop
 49847 ;; This function is called by:
 49848 ;;		_I2C2_DO_TX
 49849 ;;		_I2C2_DO_TX_EMPTY
 49850 ;;		_I2C2_DO_ADDRESS_NACK
 49851 ;;		_I2C2_MasterFsm
 49852 ;; This function uses a non-reentrant model
 49853 ;;
 49854                           
 49855                           	psect	text216
 49856  00F798                     __ptext216:
 49857                           	callstack 0
 49858  00F798                     _I2C2_DO_SEND_STOP:
 49859                           	callstack 15
 49860                           
 49861                           ;i2c2_master.c: 471: I2C2_MasterStop();
 49862                           
 49863                           ; BSR set to: 4
 49864                           ;incstack = 0
 49865  00F798  EC0F  F07C         	call	_I2C2_MasterStop	;wreg free
 49866                           
 49867                           ;i2c2_master.c: 472: return I2C2_IDLE;
 49868  00F79C  0E00               	movlw	0
 49869  00F79E  0012               	return		;funcret
 49870  00F7A0                     __end_of_I2C2_DO_SEND_STOP:
 49871                           	callstack 0
 49872                           
 49873 ;; *************** function _I2C2_DO_SEND_RESTART *****************
 49874 ;; Defined at:
 49875 ;;		line 463 in file "mcc_generated_files/i2c2_master.c"
 49876 ;; Parameters:    Size  Location     Type
 49877 ;;		None
 49878 ;; Auto vars:     Size  Location     Type
 49879 ;;		None
 49880 ;; Return value:  Size  Location     Type
 49881 ;;                  1    wreg      enum E5724
 49882 ;; Registers used:
 49883 ;;		wreg, cstack
 49884 ;; Tracked objects:
 49885 ;;		On entry : 0/4
 49886 ;;		On exit  : 0/0
 49887 ;;		Unchanged: 0/0
 49888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49893 ;;Total ram usage:        0 bytes
 49894 ;; Hardware stack levels used:    1
 49895 ;; Hardware stack levels required when called:    7
 49896 ;; This function calls:
 49897 ;;		_I2C2_MasterEnableRestart
 49898 ;; This function is called by:
 49899 ;;		_I2C2_DO_TX_EMPTY
 49900 ;;		_I2C2_DO_ADDRESS_NACK
 49901 ;;		_I2C2_MasterFsm
 49902 ;; This function uses a non-reentrant model
 49903 ;;
 49904                           
 49905                           	psect	text217
 49906  00F7A0                     __ptext217:
 49907                           	callstack 0
 49908  00F7A0                     _I2C2_DO_SEND_RESTART:
 49909                           	callstack 15
 49910                           
 49911                           ;i2c2_master.c: 465: I2C2_MasterEnableRestart();
 49912                           
 49913                           ;incstack = 0
 49914  00F7A0  EC11  F07C         	call	_I2C2_MasterEnableRestart	;wreg free
 49915                           
 49916                           ;i2c2_master.c: 466: return I2C2_SEND_ADR_READ;
 49917  00F7A4  0E01               	movlw	1
 49918  00F7A6  0012               	return		;funcret
 49919  00F7A8                     __end_of_I2C2_DO_SEND_RESTART:
 49920                           	callstack 0
 49921                           
 49922 ;; *************** function _I2C2_DO_SEND_RESTART_WRITE *****************
 49923 ;; Defined at:
 49924 ;;		line 456 in file "mcc_generated_files/i2c2_master.c"
 49925 ;; Parameters:    Size  Location     Type
 49926 ;;		None
 49927 ;; Auto vars:     Size  Location     Type
 49928 ;;		None
 49929 ;; Return value:  Size  Location     Type
 49930 ;;                  1    wreg      enum E5724
 49931 ;; Registers used:
 49932 ;;		wreg, cstack
 49933 ;; Tracked objects:
 49934 ;;		On entry : 0/4
 49935 ;;		On exit  : 0/0
 49936 ;;		Unchanged: 0/0
 49937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49942 ;;Total ram usage:        0 bytes
 49943 ;; Hardware stack levels used:    1
 49944 ;; Hardware stack levels required when called:    7
 49945 ;; This function calls:
 49946 ;;		_I2C2_MasterEnableRestart
 49947 ;; This function is called by:
 49948 ;;		_I2C2_DO_TX
 49949 ;;		_I2C2_MasterFsm
 49950 ;; This function uses a non-reentrant model
 49951 ;;
 49952                           
 49953                           	psect	text218
 49954  00F7A8                     __ptext218:
 49955                           	callstack 0
 49956  00F7A8                     _I2C2_DO_SEND_RESTART_WRITE:
 49957                           	callstack 15
 49958                           
 49959                           ;i2c2_master.c: 458: I2C2_MasterEnableRestart();
 49960                           
 49961                           ;incstack = 0
 49962  00F7A8  EC11  F07C         	call	_I2C2_MasterEnableRestart	;wreg free
 49963                           
 49964                           ;i2c2_master.c: 459: return I2C2_SEND_ADR_WRITE;
 49965  00F7AC  0E02               	movlw	2
 49966  00F7AE  0012               	return		;funcret
 49967  00F7B0                     __end_of_I2C2_DO_SEND_RESTART_WRITE:
 49968                           	callstack 0
 49969                           
 49970 ;; *************** function _I2C2_DO_SEND_RESTART_READ *****************
 49971 ;; Defined at:
 49972 ;;		line 450 in file "mcc_generated_files/i2c2_master.c"
 49973 ;; Parameters:    Size  Location     Type
 49974 ;;		None
 49975 ;; Auto vars:     Size  Location     Type
 49976 ;;		None
 49977 ;; Return value:  Size  Location     Type
 49978 ;;                  1    wreg      enum E5724
 49979 ;; Registers used:
 49980 ;;		wreg, cstack
 49981 ;; Tracked objects:
 49982 ;;		On entry : 0/4
 49983 ;;		On exit  : 0/0
 49984 ;;		Unchanged: 0/0
 49985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 49986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 49990 ;;Total ram usage:        0 bytes
 49991 ;; Hardware stack levels used:    1
 49992 ;; Hardware stack levels required when called:    7
 49993 ;; This function calls:
 49994 ;;		_I2C2_MasterEnableRestart
 49995 ;; This function is called by:
 49996 ;;		_I2C2_DO_TX
 49997 ;;		_I2C2_MasterFsm
 49998 ;; This function uses a non-reentrant model
 49999 ;;
 50000                           
 50001                           	psect	text219
 50002  00F7B0                     __ptext219:
 50003                           	callstack 0
 50004  00F7B0                     _I2C2_DO_SEND_RESTART_READ:
 50005                           	callstack 15
 50006                           
 50007                           ;i2c2_master.c: 452: I2C2_MasterEnableRestart();
 50008                           
 50009                           ;incstack = 0
 50010  00F7B0  EC11  F07C         	call	_I2C2_MasterEnableRestart	;wreg free
 50011                           
 50012                           ;i2c2_master.c: 453: return I2C2_SEND_ADR_READ;
 50013  00F7B4  0E01               	movlw	1
 50014  00F7B6  0012               	return		;funcret
 50015  00F7B8                     __end_of_I2C2_DO_SEND_RESTART_READ:
 50016                           	callstack 0
 50017                           
 50018 ;; *************** function _I2C2_DO_RCEN *****************
 50019 ;; Defined at:
 50020 ;;		line 402 in file "mcc_generated_files/i2c2_master.c"
 50021 ;; Parameters:    Size  Location     Type
 50022 ;;		None
 50023 ;; Auto vars:     Size  Location     Type
 50024 ;;		None
 50025 ;; Return value:  Size  Location     Type
 50026 ;;                  1    wreg      enum E5724
 50027 ;; Registers used:
 50028 ;;		wreg, cstack
 50029 ;; Tracked objects:
 50030 ;;		On entry : 3F/4
 50031 ;;		On exit  : 3F/4
 50032 ;;		Unchanged: 0/0
 50033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50038 ;;Total ram usage:        0 bytes
 50039 ;; Hardware stack levels used:    1
 50040 ;; Hardware stack levels required when called:    7
 50041 ;; This function calls:
 50042 ;;		_I2C2_MasterStartRx
 50043 ;; This function is called by:
 50044 ;;		_I2C2_MasterFsm
 50045 ;; This function uses a non-reentrant model
 50046 ;;
 50047                           
 50048                           	psect	text220
 50049  00F71E                     __ptext220:
 50050                           	callstack 0
 50051  00F71E                     _I2C2_DO_RCEN:
 50052                           	callstack 16
 50053                           
 50054                           ; BSR set to: 4
 50055                           ;i2c2_master.c: 404: I2C2_Status.addressNackCheck = 0;
 50056                           
 50057                           ;incstack = 0
 50058  00F71E  91F6               	bcf	(_I2C2_Status+35)& (0+255),0,b
 50059                           
 50060                           ; BSR set to: 4
 50061                           ;i2c2_master.c: 405: I2C2_MasterStartRx();
 50062  00F720  EC09  F07C         	call	_I2C2_MasterStartRx	;wreg free
 50063                           
 50064                           ; BSR set to: 4
 50065                           ;i2c2_master.c: 406: return I2C2_RX;
 50066  00F724  0E04               	movlw	4
 50067                           
 50068                           ; BSR set to: 4
 50069  00F726  0012               	return		;funcret
 50070  00F728                     __end_of_I2C2_DO_RCEN:
 50071                           	callstack 0
 50072                           
 50073 ;; *************** function _I2C2_DO_RX *****************
 50074 ;; Defined at:
 50075 ;;		line 378 in file "mcc_generated_files/i2c2_master.c"
 50076 ;; Parameters:    Size  Location     Type
 50077 ;;		None
 50078 ;; Auto vars:     Size  Location     Type
 50079 ;;		None
 50080 ;; Return value:  Size  Location     Type
 50081 ;;                  1    wreg      enum E5724
 50082 ;; Registers used:
 50083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 50084 ;; Tracked objects:
 50085 ;;		On entry : 3F/4
 50086 ;;		On exit  : 0/0
 50087 ;;		Unchanged: 0/0
 50088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50093 ;;Total ram usage:        0 bytes
 50094 ;; Hardware stack levels used:    1
 50095 ;; Hardware stack levels required when called:    9
 50096 ;; This function calls:
 50097 ;;		Absolute function
 50098 ;;		_I2C2_CallbackReturnReset
 50099 ;;		_I2C2_CallbackReturnStop
 50100 ;;		_I2C2_DO_RX_NACK_RESTART
 50101 ;;		_I2C2_DO_RX_NACK_STOP
 50102 ;;		_I2C2_MasterGetRxData
 50103 ;;		_I2C2_MasterSendAck
 50104 ;;		_rd1RegCompleteHandler
 50105 ;;		_rd2RegCompleteHandler
 50106 ;;		_rdBlkRegCompleteHandler
 50107 ;;		_wr1RegCompleteHandler
 50108 ;;		_wr2RegCompleteHandler
 50109 ;; This function is called by:
 50110 ;;		_I2C2_MasterFsm
 50111 ;; This function uses a non-reentrant model
 50112 ;;
 50113                           
 50114                           	psect	text221
 50115  00DFB4                     __ptext221:
 50116                           	callstack 0
 50117  00DFB4                     _I2C2_DO_RX:
 50118                           	callstack 14
 50119                           
 50120                           ; BSR set to: 4
 50121                           ;i2c2_master.c: 380: *I2C2_Status.data_ptr++ = I2C2_MasterGetRxData();
 50122                           
 50123                           ; BSR set to: 4
 50124                           ;incstack = 0
 50125  00DFB4  EC07  F07C         	call	_I2C2_MasterGetRxData	;wreg free
 50126  00DFB8  C4F0  FFD9         	movff	_I2C2_Status+29,fsr2l
 50127  00DFBC  C4F1  FFDA         	movff	_I2C2_Status+30,fsr2h
 50128  00DFC0  6EDF               	movwf	indf2,c
 50129                           
 50130                           ; BSR set to: 4
 50131  00DFC2  4BF0               	infsnz	(_I2C2_Status+29)& (0+255),f,b
 50132  00DFC4  2BF1               	incf	(_I2C2_Status+30)& (0+255),f,b
 50133                           
 50134                           ; BSR set to: 4
 50135                           ;i2c2_master.c: 381: if(--I2C2_Status.data_length)
 50136  00DFC6  07F2               	decf	(_I2C2_Status+31)& (0+255),f,b
 50137  00DFC8  A0D8               	btfss	status,0,c
 50138  00DFCA  07F3               	decf	(_I2C2_Status+32)& (0+255),f,b
 50139  00DFCC  51F2               	movf	(_I2C2_Status+31)& (0+255),w,b
 50140  00DFCE  11F3               	iorwf	(_I2C2_Status+32)& (0+255),w,b
 50141  00DFD0  B4D8               	btfsc	status,2,c
 50142  00DFD2  D004               	goto	l2122
 50143                           
 50144                           ; BSR set to: 4
 50145                           ;i2c2_master.c: 382: {;i2c2_master.c: 383: I2C2_MasterSendAck();
 50146  00DFD4  ECEA  F07B         	call	_I2C2_MasterSendAck	;wreg free
 50147                           
 50148                           ; BSR set to: 4
 50149                           ;i2c2_master.c: 384: return I2C2_RCEN;
 50150  00DFD8  0E05               	movlw	5
 50151  00DFDA  0012               	return	
 50152  00DFDC                     l2122:
 50153                           
 50154                           ; BSR set to: 4
 50155                           ;i2c2_master.c: 386: else;i2c2_master.c: 387: {;i2c2_master.c: 388: I2C2_Status.bufferFr
      +                          ee = 1;
 50156  00DFDC  87F6               	bsf	(_I2C2_Status+35)& (0+255),3,b
 50157                           
 50158                           ;i2c2_master.c: 389: switch(I2C2_Status.callbackTable[I2C2_DATA_COMPLETE](I2C2_Status.ca
      +                          llbackPayload[I2C2_DATA_COMPLETE]))
 50159  00DFDE  D006               	goto	l19487
 50160  00DFE0                     l19477:
 50161                           
 50162                           ;i2c2_master.c: 392: case I2C2_RESTART_READ:;i2c2_master.c: 393: return I2C2_DO_RX_NACK_
      +                          RESTART();
 50163  00DFE0  ECC0  F07B         	call	_I2C2_DO_RX_NACK_RESTART	;wreg free
 50164  00DFE4  0012               	return	
 50165  00DFE6                     l19481:
 50166                           
 50167                           ;i2c2_master.c: 396: case I2C2_STOP:;i2c2_master.c: 397: return I2C2_DO_RX_NACK_STOP();
 50168  00DFE6  ECC4  F07B         	call	_I2C2_DO_RX_NACK_STOP	;wreg free
 50169  00DFEA  0012               	return	
 50170  00DFEC                     l19487:
 50171                           
 50172                           ; BSR set to: 4
 50173  00DFEC  C4DF  F017         	movff	_I2C2_Status+12,I2C2_CallbackReturnReset@funPtr
 50174  00DFF0  C4E0  F018         	movff	_I2C2_Status+13,I2C2_CallbackReturnReset@funPtr+1
 50175  00DFF4  D801               	call	u20838
 50176  00DFF6  D009               	goto	u20839
 50177  00DFF8                     u20838:
 50178  00DFF8  0005               	push	
 50179  00DFFA  6EFA               	movwf	pclath,c
 50180  00DFFC  51D3               	movf	_I2C2_Status& (0+255),w,b
 50181  00DFFE  6EFD               	movwf	tosl,c
 50182  00E000  51D4               	movf	(_I2C2_Status+1)& (0+255),w,b
 50183  00E002  6EFE               	movwf	tosh,c
 50184  00E004  6AFF               	clrf	tosu,c
 50185  00E006  50FA               	movf	pclath,w,c
 50186  00E008  0012               	return		;indir
 50187  00E00A                     u20839:
 50188                           
 50189                           ; Switch size 1, requested type "simple"
 50190                           ; Number of cases is 4, Range of values is 1 to 4
 50191                           ; switch strategies available:
 50192                           ; Name         Instructions Cycles
 50193                           ; simple_byte           13     7 (average)
 50194                           ;	Chosen strategy is simple_byte
 50195  00E00A  0A01               	xorlw	1	; case 1
 50196  00E00C  B4D8               	btfsc	status,2,c
 50197  00E00E  D7EB               	goto	l19481
 50198  00E010  0A03               	xorlw	3	; case 2
 50199  00E012  B4D8               	btfsc	status,2,c
 50200  00E014  D7E5               	goto	l19477
 50201  00E016  0A01               	xorlw	1	; case 3
 50202  00E018  B4D8               	btfsc	status,2,c
 50203  00E01A  D7E2               	goto	l19477
 50204  00E01C  0A07               	xorlw	7	; case 4
 50205  00E01E  D7E3               	goto	l19481
 50206  00E020                     __end_of_I2C2_DO_RX:
 50207                           	callstack 0
 50208                           
 50209 ;; *************** function _I2C2_DO_TX *****************
 50210 ;; Defined at:
 50211 ;;		line 354 in file "mcc_generated_files/i2c2_master.c"
 50212 ;; Parameters:    Size  Location     Type
 50213 ;;		None
 50214 ;; Auto vars:     Size  Location     Type
 50215 ;;		None
 50216 ;; Return value:  Size  Location     Type
 50217 ;;                  1    wreg      enum E5724
 50218 ;; Registers used:
 50219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 50220 ;; Tracked objects:
 50221 ;;		On entry : 3F/4
 50222 ;;		On exit  : 0/0
 50223 ;;		Unchanged: 0/0
 50224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50229 ;;Total ram usage:        2 bytes
 50230 ;; Hardware stack levels used:    1
 50231 ;; Hardware stack levels required when called:    9
 50232 ;; This function calls:
 50233 ;;		Absolute function
 50234 ;;		_I2C2_CallbackReturnReset
 50235 ;;		_I2C2_CallbackReturnStop
 50236 ;;		_I2C2_DO_SEND_RESTART_READ
 50237 ;;		_I2C2_DO_SEND_RESTART_WRITE
 50238 ;;		_I2C2_DO_SEND_STOP
 50239 ;;		_I2C2_MasterIsNack
 50240 ;;		_I2C2_MasterSendTxData
 50241 ;;		_rd1RegCompleteHandler
 50242 ;;		_rd2RegCompleteHandler
 50243 ;;		_rdBlkRegCompleteHandler
 50244 ;;		_wr1RegCompleteHandler
 50245 ;;		_wr2RegCompleteHandler
 50246 ;; This function is called by:
 50247 ;;		_I2C2_MasterFsm
 50248 ;; This function uses a non-reentrant model
 50249 ;;
 50250                           
 50251                           	psect	text222
 50252  00D782                     __ptext222:
 50253                           	callstack 0
 50254  00D782                     _I2C2_DO_TX:
 50255                           	callstack 14
 50256                           
 50257                           ; BSR set to: 4
 50258                           ;i2c2_master.c: 356: if(I2C2_MasterIsNack())
 50259                           
 50260                           ;incstack = 0
 50261  00D782  EC57  F07B         	call	_I2C2_MasterIsNack	;wreg free
 50262  00D786  0900               	iorlw	0
 50263  00D788  A4D8               	btfss	status,2,c
 50264  00D78A  D00A               	goto	l19451
 50265  00D78C  D023               	goto	l2106
 50266  00D78E                     l19437:
 50267                           
 50268                           ;i2c2_master.c: 361: return I2C2_DO_SEND_RESTART_READ();
 50269  00D78E  ECD8  F07B         	call	_I2C2_DO_SEND_RESTART_READ	;wreg free
 50270  00D792  0012               	return	
 50271  00D794                     l19441:
 50272                           
 50273                           ;i2c2_master.c: 363: return I2C2_DO_SEND_RESTART_WRITE();
 50274  00D794  ECD4  F07B         	call	_I2C2_DO_SEND_RESTART_WRITE	;wreg free
 50275  00D798  0012               	return	
 50276  00D79A                     l19445:
 50277                           
 50278                           ;i2c2_master.c: 366: case I2C2_STOP:;i2c2_master.c: 367: return I2C2_DO_SEND_STOP();
 50279  00D79A  ECCC  F07B         	call	_I2C2_DO_SEND_STOP	;wreg free
 50280  00D79E  0012               	return	
 50281  00D7A0                     l19451:
 50282                           
 50283                           ; BSR set to: 4
 50284  00D7A0  C4E5  F017         	movff	_I2C2_Status+18,I2C2_CallbackReturnReset@funPtr
 50285  00D7A4  C4E6  F018         	movff	_I2C2_Status+19,I2C2_CallbackReturnReset@funPtr+1
 50286  00D7A8  D801               	call	u20808
 50287  00D7AA  D009               	goto	u20809
 50288  00D7AC                     u20808:
 50289  00D7AC  0005               	push	
 50290  00D7AE  6EFA               	movwf	pclath,c
 50291  00D7B0  51D9               	movf	(_I2C2_Status+6)& (0+255),w,b
 50292  00D7B2  6EFD               	movwf	tosl,c
 50293  00D7B4  51DA               	movf	(_I2C2_Status+7)& (0+255),w,b
 50294  00D7B6  6EFE               	movwf	tosh,c
 50295  00D7B8  6AFF               	clrf	tosu,c
 50296  00D7BA  50FA               	movf	pclath,w,c
 50297  00D7BC  0012               	return		;indir
 50298  00D7BE                     u20809:
 50299                           
 50300                           ; Switch size 1, requested type "simple"
 50301                           ; Number of cases is 4, Range of values is 1 to 4
 50302                           ; switch strategies available:
 50303                           ; Name         Instructions Cycles
 50304                           ; simple_byte           13     7 (average)
 50305                           ;	Chosen strategy is simple_byte
 50306  00D7BE  0A01               	xorlw	1	; case 1
 50307  00D7C0  B4D8               	btfsc	status,2,c
 50308  00D7C2  D7EB               	goto	l19445
 50309  00D7C4  0A03               	xorlw	3	; case 2
 50310  00D7C6  B4D8               	btfsc	status,2,c
 50311  00D7C8  D7E2               	goto	l19437
 50312  00D7CA  0A01               	xorlw	1	; case 3
 50313  00D7CC  B4D8               	btfsc	status,2,c
 50314  00D7CE  D7E2               	goto	l19441
 50315  00D7D0  0A07               	xorlw	7	; case 4
 50316  00D7D2  D7E3               	goto	l19445
 50317  00D7D4                     l2106:
 50318                           
 50319                           ; BSR set to: 4
 50320                           ;i2c2_master.c: 370: else;i2c2_master.c: 371: {;i2c2_master.c: 372: I2C2_Status.addressN
      +                          ackCheck = 0;
 50321  00D7D4  91F6               	bcf	(_I2C2_Status+35)& (0+255),0,b
 50322                           
 50323                           ; BSR set to: 4
 50324                           ;i2c2_master.c: 373: I2C2_MasterSendTxData(*I2C2_Status.data_ptr++);
 50325  00D7D6  C4F0  FFD9         	movff	_I2C2_Status+29,fsr2l
 50326  00D7DA  C4F1  FFDA         	movff	_I2C2_Status+30,fsr2h
 50327  00D7DE  4BF0               	infsnz	(_I2C2_Status+29)& (0+255),f,b
 50328  00D7E0  2BF1               	incf	(_I2C2_Status+30)& (0+255),f,b
 50329  00D7E2  50DF               	movf	indf2,w,c
 50330  00D7E4  ECDC  F07B         	call	_I2C2_MasterSendTxData
 50331                           
 50332                           ;i2c2_master.c: 374: return (--I2C2_Status.data_length)?I2C2_TX:I2C2_TX_EMPTY;
 50333  00D7E8  0104               	movlb	4	; () banked
 50334  00D7EA  07F2               	decf	(_I2C2_Status+31)& (0+255),f,b
 50335  00D7EC  A0D8               	btfss	status,0,c
 50336  00D7EE  07F3               	decf	(_I2C2_Status+32)& (0+255),f,b
 50337  00D7F0  51F2               	movf	(_I2C2_Status+31)& (0+255),w,b
 50338  00D7F2  11F3               	iorwf	(_I2C2_Status+32)& (0+255),w,b
 50339  00D7F4  A4D8               	btfss	status,2,c
 50340  00D7F6  D004               	goto	l19459
 50341                           
 50342                           ; BSR set to: 4
 50343  00D7F8  0E00               	movlw	0
 50344  00D7FA  6E1A               	movwf	(_I2C2_DO_TX$5388+1)^0,c
 50345  00D7FC  0E06               	movlw	6
 50346  00D7FE  D003               	goto	L45
 50347  00D800                     l19459:
 50348                           
 50349                           ; BSR set to: 4
 50350  00D800  0E00               	movlw	0
 50351  00D802  6E1A               	movwf	(_I2C2_DO_TX$5388+1)^0,c
 50352  00D804  0E03               	movlw	3
 50353  00D806                     L45:
 50354  00D806  6E19               	movwf	_I2C2_DO_TX$5388^0,c
 50355                           
 50356                           ; BSR set to: 4
 50357  00D808  5019               	movf	_I2C2_DO_TX$5388^0,w,c
 50358  00D80A  0012               	return		;funcret
 50359  00D80C                     __end_of_I2C2_DO_TX:
 50360                           	callstack 0
 50361                           
 50362 ;; *************** function _I2C2_DO_SEND_ADR_WRITE *****************
 50363 ;; Defined at:
 50364 ;;		line 347 in file "mcc_generated_files/i2c2_master.c"
 50365 ;; Parameters:    Size  Location     Type
 50366 ;;		None
 50367 ;; Auto vars:     Size  Location     Type
 50368 ;;		None
 50369 ;; Return value:  Size  Location     Type
 50370 ;;                  1    wreg      enum E5724
 50371 ;; Registers used:
 50372 ;;		wreg, status,2, status,0, cstack
 50373 ;; Tracked objects:
 50374 ;;		On entry : 3F/4
 50375 ;;		On exit  : 0/0
 50376 ;;		Unchanged: 0/0
 50377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50382 ;;Total ram usage:        0 bytes
 50383 ;; Hardware stack levels used:    1
 50384 ;; Hardware stack levels required when called:    7
 50385 ;; This function calls:
 50386 ;;		_I2C2_MasterSendTxData
 50387 ;; This function is called by:
 50388 ;;		_I2C2_MasterFsm
 50389 ;; This function uses a non-reentrant model
 50390 ;;
 50391                           
 50392                           	psect	text223
 50393  00F67A                     __ptext223:
 50394                           	callstack 0
 50395  00F67A                     _I2C2_DO_SEND_ADR_WRITE:
 50396                           	callstack 16
 50397                           
 50398                           ; BSR set to: 4
 50399                           ;i2c2_master.c: 349: I2C2_Status.addressNackCheck = 1;
 50400                           
 50401                           ;incstack = 0
 50402  00F67A  81F6               	bsf	(_I2C2_Status+35)& (0+255),0,b
 50403                           
 50404                           ; BSR set to: 4
 50405                           ;i2c2_master.c: 350: I2C2_MasterSendTxData((uint8_t) (I2C2_Status.address << 1));
 50406  00F67C  51EF               	movf	(_I2C2_Status+28)& (0+255),w,b
 50407  00F67E  25EF               	addwf	(_I2C2_Status+28)& (0+255),w,b
 50408  00F680  ECDC  F07B         	call	_I2C2_MasterSendTxData
 50409                           
 50410                           ;i2c2_master.c: 351: return I2C2_TX;
 50411  00F684  0E03               	movlw	3
 50412  00F686  0012               	return		;funcret
 50413  00F688                     __end_of_I2C2_DO_SEND_ADR_WRITE:
 50414                           	callstack 0
 50415                           
 50416 ;; *************** function _I2C2_DO_SEND_ADR_READ *****************
 50417 ;; Defined at:
 50418 ;;		line 340 in file "mcc_generated_files/i2c2_master.c"
 50419 ;; Parameters:    Size  Location     Type
 50420 ;;		None
 50421 ;; Auto vars:     Size  Location     Type
 50422 ;;		None
 50423 ;; Return value:  Size  Location     Type
 50424 ;;                  1    wreg      enum E5724
 50425 ;; Registers used:
 50426 ;;		wreg, status,0, cstack
 50427 ;; Tracked objects:
 50428 ;;		On entry : 3F/4
 50429 ;;		On exit  : 0/0
 50430 ;;		Unchanged: 0/0
 50431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50436 ;;Total ram usage:        0 bytes
 50437 ;; Hardware stack levels used:    1
 50438 ;; Hardware stack levels required when called:    7
 50439 ;; This function calls:
 50440 ;;		_I2C2_MasterSendTxData
 50441 ;; This function is called by:
 50442 ;;		_I2C2_MasterFsm
 50443 ;; This function uses a non-reentrant model
 50444 ;;
 50445                           
 50446                           	psect	text224
 50447  00F688                     __ptext224:
 50448                           	callstack 0
 50449  00F688                     _I2C2_DO_SEND_ADR_READ:
 50450                           	callstack 16
 50451                           
 50452                           ; BSR set to: 4
 50453                           ;i2c2_master.c: 342: I2C2_Status.addressNackCheck = 1;
 50454                           
 50455                           ;incstack = 0
 50456  00F688  81F6               	bsf	(_I2C2_Status+35)& (0+255),0,b
 50457                           
 50458                           ; BSR set to: 4
 50459                           ;i2c2_master.c: 343: I2C2_MasterSendTxData((uint8_t) (I2C2_Status.address << 1 | 1));
 50460  00F68A  80D8               	bsf	status,0,c
 50461  00F68C  35EF               	rlcf	(_I2C2_Status+28)& (0+255),w,b
 50462  00F68E  ECDC  F07B         	call	_I2C2_MasterSendTxData
 50463                           
 50464                           ;i2c2_master.c: 344: return I2C2_RCEN;
 50465  00F692  0E05               	movlw	5
 50466  00F694  0012               	return		;funcret
 50467  00F696                     __end_of_I2C2_DO_SEND_ADR_READ:
 50468                           	callstack 0
 50469                           
 50470 ;; *************** function _I2C2_DO_IDLE *****************
 50471 ;; Defined at:
 50472 ;;		line 333 in file "mcc_generated_files/i2c2_master.c"
 50473 ;; Parameters:    Size  Location     Type
 50474 ;;		None
 50475 ;; Auto vars:     Size  Location     Type
 50476 ;;		None
 50477 ;; Return value:  Size  Location     Type
 50478 ;;                  1    wreg      enum E5724
 50479 ;; Registers used:
 50480 ;;		wreg, status,2
 50481 ;; Tracked objects:
 50482 ;;		On entry : 3F/4
 50483 ;;		On exit  : 3F/4
 50484 ;;		Unchanged: 0/0
 50485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50490 ;;Total ram usage:        0 bytes
 50491 ;; Hardware stack levels used:    1
 50492 ;; Hardware stack levels required when called:    6
 50493 ;; This function calls:
 50494 ;;		Nothing
 50495 ;; This function is called by:
 50496 ;;		_I2C2_MasterFsm
 50497 ;; This function uses a non-reentrant model
 50498 ;;
 50499                           
 50500                           	psect	text225
 50501  00F728                     __ptext225:
 50502                           	callstack 0
 50503  00F728                     _I2C2_DO_IDLE:
 50504                           	callstack 17
 50505                           
 50506                           ; BSR set to: 4
 50507                           ;i2c2_master.c: 335: I2C2_Status.busy = 0;
 50508                           
 50509                           ;incstack = 0
 50510  00F728  93F6               	bcf	(_I2C2_Status+35)& (0+255),1,b
 50511                           
 50512                           ; BSR set to: 4
 50513                           ;i2c2_master.c: 336: I2C2_Status.error = I2C2_NOERR;
 50514  00F72A  0E00               	movlw	0
 50515  00F72C  6FF5               	movwf	(_I2C2_Status+34)& (0+255),b
 50516                           
 50517                           ; BSR set to: 4
 50518                           ;i2c2_master.c: 337: return I2C2_RESET;
 50519  00F72E  0E0E               	movlw	14
 50520                           
 50521                           ; BSR set to: 4
 50522  00F730  0012               	return		;funcret
 50523  00F732                     __end_of_I2C2_DO_IDLE:
 50524                           	callstack 0
 50525                           
 50526 ;; *************** function _I2C2_DO_TX_EMPTY *****************
 50527 ;; Defined at:
 50528 ;;		line 409 in file "mcc_generated_files/i2c2_master.c"
 50529 ;; Parameters:    Size  Location     Type
 50530 ;;		None
 50531 ;; Auto vars:     Size  Location     Type
 50532 ;;		None
 50533 ;; Return value:  Size  Location     Type
 50534 ;;                  1    wreg      enum E5724
 50535 ;; Registers used:
 50536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 50537 ;; Tracked objects:
 50538 ;;		On entry : 3F/4
 50539 ;;		On exit  : 0/0
 50540 ;;		Unchanged: 0/0
 50541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50546 ;;Total ram usage:        0 bytes
 50547 ;; Hardware stack levels used:    1
 50548 ;; Hardware stack levels required when called:    9
 50549 ;; This function calls:
 50550 ;;		Absolute function
 50551 ;;		_I2C2_CallbackReturnReset
 50552 ;;		_I2C2_CallbackReturnStop
 50553 ;;		_I2C2_DO_SEND_RESTART
 50554 ;;		_I2C2_DO_SEND_STOP
 50555 ;;		_I2C2_MasterSetIrq
 50556 ;;		_rd1RegCompleteHandler
 50557 ;;		_rd2RegCompleteHandler
 50558 ;;		_rdBlkRegCompleteHandler
 50559 ;;		_wr1RegCompleteHandler
 50560 ;;		_wr2RegCompleteHandler
 50561 ;; This function is called by:
 50562 ;;		_I2C2_MasterFsm
 50563 ;; This function uses a non-reentrant model
 50564 ;;
 50565                           
 50566                           	psect	text226
 50567  00E71E                     __ptext226:
 50568                           	callstack 0
 50569  00E71E                     _I2C2_DO_TX_EMPTY:
 50570                           	callstack 14
 50571                           
 50572                           ; BSR set to: 4
 50573                           ;i2c2_master.c: 411: I2C2_Status.bufferFree = 1;
 50574                           
 50575                           ; BSR set to: 4
 50576                           ;incstack = 0
 50577  00E71E  87F6               	bsf	(_I2C2_Status+35)& (0+255),3,b
 50578                           
 50579                           ;i2c2_master.c: 412: switch(I2C2_Status.callbackTable[I2C2_DATA_COMPLETE](I2C2_Status.ca
      +                          llbackPayload[I2C2_DATA_COMPLETE]))
 50580  00E720  D00A               	goto	l19515
 50581  00E722                     l19499:
 50582                           
 50583                           ;i2c2_master.c: 415: case I2C2_RESTART_WRITE:;i2c2_master.c: 416: return I2C2_DO_SEND_RE
      +                          START();
 50584  00E722  ECD0  F07B         	call	_I2C2_DO_SEND_RESTART	;wreg free
 50585  00E726  0012               	return	
 50586  00E728                     l19503:
 50587                           
 50588                           ;i2c2_master.c: 418: I2C2_MasterSetIrq();
 50589  00E728  EC05  F07C         	call	_I2C2_MasterSetIrq	;wreg free
 50590                           
 50591                           ;i2c2_master.c: 419: return I2C2_TX;
 50592  00E72C  0E03               	movlw	3
 50593  00E72E  0012               	return	
 50594  00E730                     l19509:
 50595                           
 50596                           ;i2c2_master.c: 422: return I2C2_DO_SEND_STOP();
 50597  00E730  ECCC  F07B         	call	_I2C2_DO_SEND_STOP	;wreg free
 50598  00E734  0012               	return	
 50599  00E736                     l19515:
 50600                           
 50601                           ; BSR set to: 4
 50602  00E736  C4DF  F017         	movff	_I2C2_Status+12,I2C2_CallbackReturnReset@funPtr
 50603  00E73A  C4E0  F018         	movff	_I2C2_Status+13,I2C2_CallbackReturnReset@funPtr+1
 50604  00E73E  D801               	call	u20848
 50605  00E740  D009               	goto	u20849
 50606  00E742                     u20848:
 50607  00E742  0005               	push	
 50608  00E744  6EFA               	movwf	pclath,c
 50609  00E746  51D3               	movf	_I2C2_Status& (0+255),w,b
 50610  00E748  6EFD               	movwf	tosl,c
 50611  00E74A  51D4               	movf	(_I2C2_Status+1)& (0+255),w,b
 50612  00E74C  6EFE               	movwf	tosh,c
 50613  00E74E  6AFF               	clrf	tosu,c
 50614  00E750  50FA               	movf	pclath,w,c
 50615  00E752  0012               	return		;indir
 50616  00E754                     u20849:
 50617                           
 50618                           ; Switch size 1, requested type "simple"
 50619                           ; Number of cases is 4, Range of values is 1 to 4
 50620                           ; switch strategies available:
 50621                           ; Name         Instructions Cycles
 50622                           ; simple_byte           13     7 (average)
 50623                           ;	Chosen strategy is simple_byte
 50624  00E754  0A01               	xorlw	1	; case 1
 50625  00E756  B4D8               	btfsc	status,2,c
 50626  00E758  D7EB               	goto	l19509
 50627  00E75A  0A03               	xorlw	3	; case 2
 50628  00E75C  B4D8               	btfsc	status,2,c
 50629  00E75E  D7E1               	goto	l19499
 50630  00E760  0A01               	xorlw	1	; case 3
 50631  00E762  B4D8               	btfsc	status,2,c
 50632  00E764  D7DE               	goto	l19499
 50633  00E766  0A07               	xorlw	7	; case 4
 50634  00E768  B4D8               	btfsc	status,2,c
 50635  00E76A  D7DE               	goto	l19503
 50636  00E76C  D7E1               	goto	l19509
 50637  00E76E                     __end_of_I2C2_DO_TX_EMPTY:
 50638                           	callstack 0
 50639                           
 50640 ;; *************** function _I2C2_MasterSetIrq *****************
 50641 ;; Defined at:
 50642 ;;		line 645 in file "mcc_generated_files/i2c2_master.c"
 50643 ;; Parameters:    Size  Location     Type
 50644 ;;		None
 50645 ;; Auto vars:     Size  Location     Type
 50646 ;;		None
 50647 ;; Return value:  Size  Location     Type
 50648 ;;                  1    wreg      void 
 50649 ;; Registers used:
 50650 ;;		None
 50651 ;; Tracked objects:
 50652 ;;		On entry : 0/4
 50653 ;;		On exit  : 0/0
 50654 ;;		Unchanged: 0/0
 50655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50660 ;;Total ram usage:        0 bytes
 50661 ;; Hardware stack levels used:    1
 50662 ;; Hardware stack levels required when called:    6
 50663 ;; This function calls:
 50664 ;;		Nothing
 50665 ;; This function is called by:
 50666 ;;		_I2C2_DO_TX_EMPTY
 50667 ;; This function uses a non-reentrant model
 50668 ;;
 50669                           
 50670                           	psect	text227
 50671  00F80A                     __ptext227:
 50672                           	callstack 0
 50673  00F80A                     _I2C2_MasterSetIrq:
 50674                           	callstack 16
 50675                           
 50676                           ;i2c2_master.c: 647: PIR3bits.SSP2IF = 1;
 50677                           
 50678                           ;incstack = 0
 50679  00F80A  8EA4               	bsf	164,7,c	;volatile
 50680  00F80C  0012               	return		;funcret
 50681  00F80E                     __end_of_I2C2_MasterSetIrq:
 50682                           	callstack 0
 50683                           
 50684 ;; *************** function _I2C2_MasterIsNack *****************
 50685 ;; Defined at:
 50686 ;;		line 598 in file "mcc_generated_files/i2c2_master.c"
 50687 ;; Parameters:    Size  Location     Type
 50688 ;;		None
 50689 ;; Auto vars:     Size  Location     Type
 50690 ;;		None
 50691 ;; Return value:  Size  Location     Type
 50692 ;;                  1    wreg      unsigned char 
 50693 ;; Registers used:
 50694 ;;		wreg
 50695 ;; Tracked objects:
 50696 ;;		On entry : 3F/4
 50697 ;;		On exit  : 3F/4
 50698 ;;		Unchanged: 3F/0
 50699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50704 ;;Total ram usage:        0 bytes
 50705 ;; Hardware stack levels used:    1
 50706 ;; Hardware stack levels required when called:    6
 50707 ;; This function calls:
 50708 ;;		Nothing
 50709 ;; This function is called by:
 50710 ;;		_I2C2_MasterFsm
 50711 ;;		_I2C2_DO_TX
 50712 ;; This function uses a non-reentrant model
 50713 ;;
 50714                           
 50715                           	psect	text228
 50716  00F6AE                     __ptext228:
 50717                           	callstack 0
 50718  00F6AE                     _I2C2_MasterIsNack:
 50719                           	callstack 17
 50720                           
 50721                           ; BSR set to: 4
 50722                           ;i2c2_master.c: 600: return SSP2CON2bits.ACKSTAT;
 50723                           
 50724                           ;incstack = 0
 50725  00F6AE  AC6B               	btfss	107,6,c	;volatile
 50726  00F6B0  D002               	goto	u20580
 50727  00F6B2  0E01               	movlw	1
 50728  00F6B4  0012               	return	
 50729  00F6B6                     u20580:
 50730  00F6B6  0E00               	movlw	0
 50731                           
 50732                           ; BSR set to: 4
 50733  00F6B8  0012               	return		;funcret
 50734  00F6BA                     __end_of_I2C2_MasterIsNack:
 50735                           	callstack 0
 50736                           
 50737 ;; *************** function _I2C2_MasterSendTxData *****************
 50738 ;; Defined at:
 50739 ;;		line 568 in file "mcc_generated_files/i2c2_master.c"
 50740 ;; Parameters:    Size  Location     Type
 50741 ;;  data            1    wreg     unsigned char 
 50742 ;; Auto vars:     Size  Location     Type
 50743 ;;  data            1   13[COMRAM] unsigned char 
 50744 ;; Return value:  Size  Location     Type
 50745 ;;                  1    wreg      void 
 50746 ;; Registers used:
 50747 ;;		wreg
 50748 ;; Tracked objects:
 50749 ;;		On entry : 3F/4
 50750 ;;		On exit  : 0/0
 50751 ;;		Unchanged: 0/0
 50752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50754 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50756 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50757 ;;Total ram usage:        1 bytes
 50758 ;; Hardware stack levels used:    1
 50759 ;; Hardware stack levels required when called:    6
 50760 ;; This function calls:
 50761 ;;		Nothing
 50762 ;; This function is called by:
 50763 ;;		_I2C2_DO_SEND_ADR_READ
 50764 ;;		_I2C2_DO_SEND_ADR_WRITE
 50765 ;;		_I2C2_DO_TX
 50766 ;; This function uses a non-reentrant model
 50767 ;;
 50768                           
 50769                           	psect	text229
 50770  00F7B8                     __ptext229:
 50771                           	callstack 0
 50772  00F7B8                     _I2C2_MasterSendTxData:
 50773                           	callstack 16
 50774                           
 50775                           ; BSR set to: 4
 50776                           ;incstack = 0
 50777                           ;I2C2_MasterSendTxData@data stored from wreg
 50778  00F7B8  6E0E               	movwf	I2C2_MasterSendTxData@data^0,c
 50779                           
 50780                           ;i2c2_master.c: 570: SSP2BUF = data;
 50781  00F7BA  C00E  FF6F         	movff	I2C2_MasterSendTxData@data,3951	;volatile
 50782  00F7BE  0012               	return		;funcret
 50783  00F7C0                     __end_of_I2C2_MasterSendTxData:
 50784                           	callstack 0
 50785                           
 50786 ;; *************** function _I2C2_MasterSendAck *****************
 50787 ;; Defined at:
 50788 ;;		line 603 in file "mcc_generated_files/i2c2_master.c"
 50789 ;; Parameters:    Size  Location     Type
 50790 ;;		None
 50791 ;; Auto vars:     Size  Location     Type
 50792 ;;		None
 50793 ;; Return value:  Size  Location     Type
 50794 ;;                  1    wreg      void 
 50795 ;; Registers used:
 50796 ;;		None
 50797 ;; Tracked objects:
 50798 ;;		On entry : 3F/4
 50799 ;;		On exit  : 3F/4
 50800 ;;		Unchanged: 3F/0
 50801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50806 ;;Total ram usage:        0 bytes
 50807 ;; Hardware stack levels used:    1
 50808 ;; Hardware stack levels required when called:    6
 50809 ;; This function calls:
 50810 ;;		Nothing
 50811 ;; This function is called by:
 50812 ;;		_I2C2_DO_RX
 50813 ;;		_I2C2_DO_RX_ACK
 50814 ;; This function uses a non-reentrant model
 50815 ;;
 50816                           
 50817                           	psect	text230
 50818  00F7D4                     __ptext230:
 50819                           	callstack 0
 50820  00F7D4                     _I2C2_MasterSendAck:
 50821                           	callstack 16
 50822                           
 50823                           ; BSR set to: 4
 50824                           ;i2c2_master.c: 605: SSP2CON2bits.ACKDT = 0;
 50825                           
 50826                           ;incstack = 0
 50827  00F7D4  9A6B               	bcf	107,5,c	;volatile
 50828                           
 50829                           ;i2c2_master.c: 606: SSP2CON2bits.ACKEN = 1;
 50830  00F7D6  886B               	bsf	107,4,c	;volatile
 50831                           
 50832                           ; BSR set to: 4
 50833  00F7D8  0012               	return		;funcret
 50834  00F7DA                     __end_of_I2C2_MasterSendAck:
 50835                           	callstack 0
 50836                           
 50837 ;; *************** function _I2C2_MasterGetRxData *****************
 50838 ;; Defined at:
 50839 ;;		line 563 in file "mcc_generated_files/i2c2_master.c"
 50840 ;; Parameters:    Size  Location     Type
 50841 ;;		None
 50842 ;; Auto vars:     Size  Location     Type
 50843 ;;		None
 50844 ;; Return value:  Size  Location     Type
 50845 ;;                  1    wreg      unsigned char 
 50846 ;; Registers used:
 50847 ;;		wreg, status,2
 50848 ;; Tracked objects:
 50849 ;;		On entry : 3F/4
 50850 ;;		On exit  : 3F/4
 50851 ;;		Unchanged: 3F/0
 50852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50857 ;;Total ram usage:        0 bytes
 50858 ;; Hardware stack levels used:    1
 50859 ;; Hardware stack levels required when called:    6
 50860 ;; This function calls:
 50861 ;;		Nothing
 50862 ;; This function is called by:
 50863 ;;		_I2C2_DO_RX
 50864 ;; This function uses a non-reentrant model
 50865 ;;
 50866                           
 50867                           	psect	text231
 50868  00F80E                     __ptext231:
 50869                           	callstack 0
 50870  00F80E                     _I2C2_MasterGetRxData:
 50871                           	callstack 16
 50872                           
 50873                           ; BSR set to: 4
 50874                           ;i2c2_master.c: 565: return SSP2BUF;
 50875                           
 50876                           ; BSR set to: 4
 50877                           ;incstack = 0
 50878  00F80E  506F               	movf	111,w,c	;volatile
 50879                           
 50880                           ; BSR set to: 4
 50881  00F810  0012               	return		;funcret
 50882  00F812                     __end_of_I2C2_MasterGetRxData:
 50883                           	callstack 0
 50884                           
 50885 ;; *************** function _I2C2_MasterSendNack *****************
 50886 ;; Defined at:
 50887 ;;		line 609 in file "mcc_generated_files/i2c2_master.c"
 50888 ;; Parameters:    Size  Location     Type
 50889 ;;		None
 50890 ;; Auto vars:     Size  Location     Type
 50891 ;;		None
 50892 ;; Return value:  Size  Location     Type
 50893 ;;                  1    wreg      void 
 50894 ;; Registers used:
 50895 ;;		None
 50896 ;; Tracked objects:
 50897 ;;		On entry : 0/4
 50898 ;;		On exit  : 0/0
 50899 ;;		Unchanged: 0/0
 50900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50905 ;;Total ram usage:        0 bytes
 50906 ;; Hardware stack levels used:    1
 50907 ;; Hardware stack levels required when called:    6
 50908 ;; This function calls:
 50909 ;;		Nothing
 50910 ;; This function is called by:
 50911 ;;		_I2C2_DO_RX_NACK_STOP
 50912 ;;		_I2C2_DO_RX_NACK_RESTART
 50913 ;; This function uses a non-reentrant model
 50914 ;;
 50915                           
 50916                           	psect	text232
 50917  00F7DA                     __ptext232:
 50918                           	callstack 0
 50919  00F7DA                     _I2C2_MasterSendNack:
 50920                           	callstack 16
 50921                           
 50922                           ;i2c2_master.c: 611: SSP2CON2bits.ACKDT = 1;
 50923                           
 50924                           ; BSR set to: 4
 50925                           ;incstack = 0
 50926  00F7DA  8A6B               	bsf	107,5,c	;volatile
 50927                           
 50928                           ;i2c2_master.c: 612: SSP2CON2bits.ACKEN = 1;
 50929  00F7DC  886B               	bsf	107,4,c	;volatile
 50930  00F7DE  0012               	return		;funcret
 50931  00F7E0                     __end_of_I2C2_MasterSendNack:
 50932                           	callstack 0
 50933                           
 50934 ;; *************** function _I2C2_MasterStartRx *****************
 50935 ;; Defined at:
 50936 ;;		line 583 in file "mcc_generated_files/i2c2_master.c"
 50937 ;; Parameters:    Size  Location     Type
 50938 ;;		None
 50939 ;; Auto vars:     Size  Location     Type
 50940 ;;		None
 50941 ;; Return value:  Size  Location     Type
 50942 ;;                  1    wreg      void 
 50943 ;; Registers used:
 50944 ;;		None
 50945 ;; Tracked objects:
 50946 ;;		On entry : 3F/4
 50947 ;;		On exit  : 3F/4
 50948 ;;		Unchanged: 3F/0
 50949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 50954 ;;Total ram usage:        0 bytes
 50955 ;; Hardware stack levels used:    1
 50956 ;; Hardware stack levels required when called:    6
 50957 ;; This function calls:
 50958 ;;		Nothing
 50959 ;; This function is called by:
 50960 ;;		_I2C2_DO_RCEN
 50961 ;; This function uses a non-reentrant model
 50962 ;;
 50963                           
 50964                           	psect	text233
 50965  00F812                     __ptext233:
 50966                           	callstack 0
 50967  00F812                     _I2C2_MasterStartRx:
 50968                           	callstack 16
 50969                           
 50970                           ; BSR set to: 4
 50971                           ;i2c2_master.c: 585: SSP2CON2bits.RCEN = 1;
 50972                           
 50973                           ;incstack = 0
 50974  00F812  866B               	bsf	107,3,c	;volatile
 50975                           
 50976                           ; BSR set to: 4
 50977  00F814  0012               	return		;funcret
 50978  00F816                     __end_of_I2C2_MasterStartRx:
 50979                           	callstack 0
 50980                           
 50981 ;; *************** function _I2C2_CallbackReturnReset *****************
 50982 ;; Defined at:
 50983 ;;		line 525 in file "mcc_generated_files/i2c2_master.c"
 50984 ;; Parameters:    Size  Location     Type
 50985 ;;  funPtr          2   22[COMRAM] PTR void 
 50986 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@data(2), I2C2_Write1ByteRegister@data(1), I2C2_Read2B
      +yteRegister@returnValue(2), 
 50987 ;;		 -> NULL(0), I2C2_Read1ByteRegister@returnValue(1), 
 50988 ;; Auto vars:     Size  Location     Type
 50989 ;;		None
 50990 ;; Return value:  Size  Location     Type
 50991 ;;                  1    wreg      enum E97
 50992 ;; Registers used:
 50993 ;;		wreg
 50994 ;; Tracked objects:
 50995 ;;		On entry : 3F/4
 50996 ;;		On exit  : 3F/4
 50997 ;;		Unchanged: 3F/0
 50998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 50999 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51002 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51003 ;;Total ram usage:        2 bytes
 51004 ;; Hardware stack levels used:    1
 51005 ;; Hardware stack levels required when called:    6
 51006 ;; This function calls:
 51007 ;;		Nothing
 51008 ;; This function is called by:
 51009 ;;		_I2C2_Open
 51010 ;;		_I2C2_DO_TX
 51011 ;;		_I2C2_DO_RX
 51012 ;;		_I2C2_DO_TX_EMPTY
 51013 ;;		_I2C2_DO_ADDRESS_NACK
 51014 ;; This function uses a non-reentrant model
 51015 ;;
 51016                           
 51017                           	psect	text234
 51018  00F816                     __ptext234:
 51019                           	callstack 0
 51020  00F816                     _I2C2_CallbackReturnReset:
 51021                           	callstack 16
 51022                           
 51023                           ; BSR set to: 4
 51024                           ;i2c2_master.c: 527: return I2C2_RESET_LINK;
 51025                           
 51026                           ; BSR set to: 4
 51027                           ;incstack = 0
 51028  00F816  0E05               	movlw	5
 51029                           
 51030                           ; BSR set to: 4
 51031  00F818  0012               	return		;funcret
 51032  00F81A                     __end_of_I2C2_CallbackReturnReset:
 51033                           	callstack 0
 51034                           
 51035 ;; *************** function _I2C2_CallbackReturnStop *****************
 51036 ;; Defined at:
 51037 ;;		line 520 in file "mcc_generated_files/i2c2_master.c"
 51038 ;; Parameters:    Size  Location     Type
 51039 ;;  funPtr          2   22[COMRAM] PTR void 
 51040 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@data(2), I2C2_Write1ByteRegister@data(1), I2C2_Read2B
      +yteRegister@returnValue(2), 
 51041 ;;		 -> NULL(0), I2C2_Read1ByteRegister@returnValue(1), 
 51042 ;; Auto vars:     Size  Location     Type
 51043 ;;		None
 51044 ;; Return value:  Size  Location     Type
 51045 ;;                  1    wreg      enum E97
 51046 ;; Registers used:
 51047 ;;		wreg
 51048 ;; Tracked objects:
 51049 ;;		On entry : 3F/4
 51050 ;;		On exit  : 3F/4
 51051 ;;		Unchanged: 3F/0
 51052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51053 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51056 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51057 ;;Total ram usage:        2 bytes
 51058 ;; Hardware stack levels used:    1
 51059 ;; Hardware stack levels required when called:    6
 51060 ;; This function calls:
 51061 ;;		Nothing
 51062 ;; This function is called by:
 51063 ;;		_I2C2_Open
 51064 ;;		_I2C2_SetCallback
 51065 ;;		_I2C2_DO_TX
 51066 ;;		_I2C2_DO_RX
 51067 ;;		_I2C2_DO_TX_EMPTY
 51068 ;;		_I2C2_DO_ADDRESS_NACK
 51069 ;; This function uses a non-reentrant model
 51070 ;;
 51071                           
 51072                           	psect	text235
 51073  00F81A                     __ptext235:
 51074                           	callstack 0
 51075  00F81A                     _I2C2_CallbackReturnStop:
 51076                           	callstack 16
 51077                           
 51078                           ; BSR set to: 4
 51079                           ;i2c2_master.c: 522: return I2C2_STOP;
 51080                           
 51081                           ; BSR set to: 4
 51082                           ;incstack = 0
 51083  00F81A  0E01               	movlw	1
 51084                           
 51085                           ; BSR set to: 4
 51086  00F81C  0012               	return		;funcret
 51087  00F81E                     __end_of_I2C2_CallbackReturnStop:
 51088                           	callstack 0
 51089                           
 51090 ;; *************** function _rdBlkRegCompleteHandler *****************
 51091 ;; Defined at:
 51092 ;;		line 170 in file "mcc_generated_files/examples/i2c2_master_example.c"
 51093 ;; Parameters:    Size  Location     Type
 51094 ;;  ptr             2   22[COMRAM] PTR void 
 51095 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@data(2), I2C2_Write1ByteRegister@data(1), I2C2_Read2B
      +yteRegister@returnValue(2), 
 51096 ;;		 -> NULL(0), I2C2_Read1ByteRegister@returnValue(1), 
 51097 ;; Auto vars:     Size  Location     Type
 51098 ;;		None
 51099 ;; Return value:  Size  Location     Type
 51100 ;;                  1    wreg      enum E97
 51101 ;; Registers used:
 51102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 51103 ;; Tracked objects:
 51104 ;;		On entry : 3F/4
 51105 ;;		On exit  : 0/0
 51106 ;;		Unchanged: 0/0
 51107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51111 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51112 ;;Total ram usage:        2 bytes
 51113 ;; Hardware stack levels used:    1
 51114 ;; Hardware stack levels required when called:    8
 51115 ;; This function calls:
 51116 ;;		_I2C2_SetBuffer
 51117 ;;		_I2C2_SetDataCompleteCallback
 51118 ;; This function is called by:
 51119 ;;		_I2C2_ReadDataBlock
 51120 ;;		_I2C2_DO_TX
 51121 ;;		_I2C2_DO_RX
 51122 ;;		_I2C2_DO_TX_EMPTY
 51123 ;;		_I2C2_DO_ADDRESS_NACK
 51124 ;; This function uses a non-reentrant model
 51125 ;;
 51126                           
 51127                           	psect	text236
 51128  00EB48                     __ptext236:
 51129                           	callstack 0
 51130  00EB48                     _rdBlkRegCompleteHandler:
 51131                           	callstack 14
 51132                           
 51133                           ; BSR set to: 4
 51134                           ;i2c2_master_example.c: 172: I2C2_SetBuffer(((i2c2_buffer_t *)ptr)->data,((i2c2_buffer_t
      +                          *)ptr)->len);
 51135                           
 51136                           ; BSR set to: 4
 51137                           ;incstack = 0
 51138  00EB48  EE20 F002          	lfsr	2,2
 51139  00EB4C  5017               	movf	rdBlkRegCompleteHandler@ptr^0,w,c
 51140  00EB4E  26D9               	addwf	fsr2l,f,c
 51141  00EB50  5018               	movf	(rdBlkRegCompleteHandler@ptr+1)^0,w,c
 51142  00EB52  22DA               	addwfc	fsr2h,f,c
 51143  00EB54  CFDE F00E          	movff	postinc2,I2C2_SetBuffer@buffer
 51144  00EB58  CFDD F00F          	movff	postdec2,I2C2_SetBuffer@buffer+1
 51145  00EB5C  C017  FFD9         	movff	rdBlkRegCompleteHandler@ptr,fsr2l
 51146  00EB60  C018  FFDA         	movff	rdBlkRegCompleteHandler@ptr+1,fsr2h
 51147  00EB64  CFDE F010          	movff	postinc2,I2C2_SetBuffer@bufferSize
 51148  00EB68  CFDD F011          	movff	postdec2,I2C2_SetBuffer@bufferSize+1
 51149  00EB6C  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 51150                           
 51151                           ; BSR set to: 4
 51152                           ;i2c2_master_example.c: 173: I2C2_SetDataCompleteCallback((0),(0));
 51153  00EB70  0E00               	movlw	0
 51154  00EB72  6E13               	movwf	I2C2_SetDataCompleteCallback@cb^0,c
 51155  00EB74  0E00               	movlw	0
 51156  00EB76  6E14               	movwf	(I2C2_SetDataCompleteCallback@cb+1)^0,c
 51157  00EB78  0E00               	movlw	0
 51158  00EB7A  6E15               	movwf	I2C2_SetDataCompleteCallback@ptr^0,c
 51159  00EB7C  0E00               	movlw	0
 51160  00EB7E  6E16               	movwf	(I2C2_SetDataCompleteCallback@ptr+1)^0,c
 51161  00EB80  EC62  F07A         	call	_I2C2_SetDataCompleteCallback	;wreg free
 51162                           
 51163                           ;i2c2_master_example.c: 174: return I2C2_RESTART_READ;
 51164  00EB84  0E02               	movlw	2
 51165  00EB86  0012               	return		;funcret
 51166  00EB88                     __end_of_rdBlkRegCompleteHandler:
 51167                           	callstack 0
 51168                           
 51169 ;; *************** function _wr1RegCompleteHandler *****************
 51170 ;; Defined at:
 51171 ;;		line 156 in file "mcc_generated_files/examples/i2c2_master_example.c"
 51172 ;; Parameters:    Size  Location     Type
 51173 ;;  ptr             2   22[COMRAM] PTR void 
 51174 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@data(2), I2C2_Write1ByteRegister@data(1), I2C2_Read2B
      +yteRegister@returnValue(2), 
 51175 ;;		 -> NULL(0), I2C2_Read1ByteRegister@returnValue(1), 
 51176 ;; Auto vars:     Size  Location     Type
 51177 ;;		None
 51178 ;; Return value:  Size  Location     Type
 51179 ;;                  1    wreg      enum E97
 51180 ;; Registers used:
 51181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 51182 ;; Tracked objects:
 51183 ;;		On entry : 3F/4
 51184 ;;		On exit  : 0/0
 51185 ;;		Unchanged: 0/0
 51186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51187 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51190 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51191 ;;Total ram usage:        2 bytes
 51192 ;; Hardware stack levels used:    1
 51193 ;; Hardware stack levels required when called:    8
 51194 ;; This function calls:
 51195 ;;		_I2C2_SetBuffer
 51196 ;;		_I2C2_SetDataCompleteCallback
 51197 ;; This function is called by:
 51198 ;;		_I2C2_Write1ByteRegister
 51199 ;;		_I2C2_DO_TX
 51200 ;;		_I2C2_DO_RX
 51201 ;;		_I2C2_DO_TX_EMPTY
 51202 ;;		_I2C2_DO_ADDRESS_NACK
 51203 ;; This function uses a non-reentrant model
 51204 ;;
 51205                           
 51206                           	psect	text237
 51207  00F00A                     __ptext237:
 51208                           	callstack 0
 51209  00F00A                     _wr1RegCompleteHandler:
 51210                           	callstack 14
 51211                           
 51212                           ; BSR set to: 4
 51213                           ;i2c2_master_example.c: 158: I2C2_SetBuffer(ptr,1);
 51214                           
 51215                           ;incstack = 0
 51216  00F00A  C017  F00E         	movff	wr1RegCompleteHandler@ptr,I2C2_SetBuffer@buffer
 51217  00F00E  C018  F00F         	movff	wr1RegCompleteHandler@ptr+1,I2C2_SetBuffer@buffer+1
 51218  00F012  0E00               	movlw	0
 51219  00F014  6E11               	movwf	(I2C2_SetBuffer@bufferSize+1)^0,c
 51220  00F016  0E01               	movlw	1
 51221  00F018  6E10               	movwf	I2C2_SetBuffer@bufferSize^0,c
 51222  00F01A  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 51223                           
 51224                           ; BSR set to: 4
 51225                           ;i2c2_master_example.c: 159: I2C2_SetDataCompleteCallback((0),(0));
 51226  00F01E  0E00               	movlw	0
 51227  00F020  6E13               	movwf	I2C2_SetDataCompleteCallback@cb^0,c
 51228  00F022  0E00               	movlw	0
 51229  00F024  6E14               	movwf	(I2C2_SetDataCompleteCallback@cb+1)^0,c
 51230  00F026  0E00               	movlw	0
 51231  00F028  6E15               	movwf	I2C2_SetDataCompleteCallback@ptr^0,c
 51232  00F02A  0E00               	movlw	0
 51233  00F02C  6E16               	movwf	(I2C2_SetDataCompleteCallback@ptr+1)^0,c
 51234  00F02E  EC62  F07A         	call	_I2C2_SetDataCompleteCallback	;wreg free
 51235                           
 51236                           ;i2c2_master_example.c: 160: return I2C2_CONTINUE;
 51237  00F032  0E04               	movlw	4
 51238  00F034  0012               	return		;funcret
 51239  00F036                     __end_of_wr1RegCompleteHandler:
 51240                           	callstack 0
 51241                           
 51242 ;; *************** function _rd2RegCompleteHandler *****************
 51243 ;; Defined at:
 51244 ;;		line 149 in file "mcc_generated_files/examples/i2c2_master_example.c"
 51245 ;; Parameters:    Size  Location     Type
 51246 ;;  ptr             2   22[COMRAM] PTR void 
 51247 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@data(2), I2C2_Write1ByteRegister@data(1), I2C2_Read2B
      +yteRegister@returnValue(2), 
 51248 ;;		 -> NULL(0), I2C2_Read1ByteRegister@returnValue(1), 
 51249 ;; Auto vars:     Size  Location     Type
 51250 ;;		None
 51251 ;; Return value:  Size  Location     Type
 51252 ;;                  1    wreg      enum E97
 51253 ;; Registers used:
 51254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 51255 ;; Tracked objects:
 51256 ;;		On entry : 3F/4
 51257 ;;		On exit  : 0/0
 51258 ;;		Unchanged: 0/0
 51259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51264 ;;Total ram usage:        2 bytes
 51265 ;; Hardware stack levels used:    1
 51266 ;; Hardware stack levels required when called:    8
 51267 ;; This function calls:
 51268 ;;		_I2C2_SetBuffer
 51269 ;;		_I2C2_SetDataCompleteCallback
 51270 ;; This function is called by:
 51271 ;;		_I2C2_DO_TX
 51272 ;;		_I2C2_DO_RX
 51273 ;;		_I2C2_DO_TX_EMPTY
 51274 ;;		_I2C2_DO_ADDRESS_NACK
 51275 ;; This function uses a non-reentrant model
 51276 ;;
 51277                           
 51278                           	psect	text238
 51279  00F036                     __ptext238:
 51280                           	callstack 0
 51281  00F036                     _rd2RegCompleteHandler:
 51282                           	callstack 14
 51283                           
 51284                           ; BSR set to: 4
 51285                           ;i2c2_master_example.c: 151: I2C2_SetBuffer(ptr,2);
 51286                           
 51287                           ;incstack = 0
 51288  00F036  C017  F00E         	movff	rd2RegCompleteHandler@ptr,I2C2_SetBuffer@buffer
 51289  00F03A  C018  F00F         	movff	rd2RegCompleteHandler@ptr+1,I2C2_SetBuffer@buffer+1
 51290  00F03E  0E00               	movlw	0
 51291  00F040  6E11               	movwf	(I2C2_SetBuffer@bufferSize+1)^0,c
 51292  00F042  0E02               	movlw	2
 51293  00F044  6E10               	movwf	I2C2_SetBuffer@bufferSize^0,c
 51294  00F046  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 51295                           
 51296                           ; BSR set to: 4
 51297                           ;i2c2_master_example.c: 152: I2C2_SetDataCompleteCallback((0),(0));
 51298  00F04A  0E00               	movlw	0
 51299  00F04C  6E13               	movwf	I2C2_SetDataCompleteCallback@cb^0,c
 51300  00F04E  0E00               	movlw	0
 51301  00F050  6E14               	movwf	(I2C2_SetDataCompleteCallback@cb+1)^0,c
 51302  00F052  0E00               	movlw	0
 51303  00F054  6E15               	movwf	I2C2_SetDataCompleteCallback@ptr^0,c
 51304  00F056  0E00               	movlw	0
 51305  00F058  6E16               	movwf	(I2C2_SetDataCompleteCallback@ptr+1)^0,c
 51306  00F05A  EC62  F07A         	call	_I2C2_SetDataCompleteCallback	;wreg free
 51307                           
 51308                           ;i2c2_master_example.c: 153: return I2C2_RESTART_READ;
 51309  00F05E  0E02               	movlw	2
 51310  00F060  0012               	return		;funcret
 51311  00F062                     __end_of_rd2RegCompleteHandler:
 51312                           	callstack 0
 51313                           
 51314 ;; *************** function _rd1RegCompleteHandler *****************
 51315 ;; Defined at:
 51316 ;;		line 142 in file "mcc_generated_files/examples/i2c2_master_example.c"
 51317 ;; Parameters:    Size  Location     Type
 51318 ;;  ptr             2   22[COMRAM] PTR void 
 51319 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@data(2), I2C2_Write1ByteRegister@data(1), I2C2_Read2B
      +yteRegister@returnValue(2), 
 51320 ;;		 -> NULL(0), I2C2_Read1ByteRegister@returnValue(1), 
 51321 ;; Auto vars:     Size  Location     Type
 51322 ;;		None
 51323 ;; Return value:  Size  Location     Type
 51324 ;;                  1    wreg      enum E97
 51325 ;; Registers used:
 51326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 51327 ;; Tracked objects:
 51328 ;;		On entry : 3F/4
 51329 ;;		On exit  : 0/0
 51330 ;;		Unchanged: 0/0
 51331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51335 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51336 ;;Total ram usage:        2 bytes
 51337 ;; Hardware stack levels used:    1
 51338 ;; Hardware stack levels required when called:    8
 51339 ;; This function calls:
 51340 ;;		_I2C2_SetBuffer
 51341 ;;		_I2C2_SetDataCompleteCallback
 51342 ;; This function is called by:
 51343 ;;		_I2C2_Read1ByteRegister
 51344 ;;		_I2C2_DO_TX
 51345 ;;		_I2C2_DO_RX
 51346 ;;		_I2C2_DO_TX_EMPTY
 51347 ;;		_I2C2_DO_ADDRESS_NACK
 51348 ;; This function uses a non-reentrant model
 51349 ;;
 51350                           
 51351                           	psect	text239
 51352  00F062                     __ptext239:
 51353                           	callstack 0
 51354  00F062                     _rd1RegCompleteHandler:
 51355                           	callstack 14
 51356                           
 51357                           ; BSR set to: 4
 51358                           ;i2c2_master_example.c: 144: I2C2_SetBuffer(ptr,1);
 51359                           
 51360                           ;incstack = 0
 51361  00F062  C017  F00E         	movff	rd1RegCompleteHandler@ptr,I2C2_SetBuffer@buffer
 51362  00F066  C018  F00F         	movff	rd1RegCompleteHandler@ptr+1,I2C2_SetBuffer@buffer+1
 51363  00F06A  0E00               	movlw	0
 51364  00F06C  6E11               	movwf	(I2C2_SetBuffer@bufferSize+1)^0,c
 51365  00F06E  0E01               	movlw	1
 51366  00F070  6E10               	movwf	I2C2_SetBuffer@bufferSize^0,c
 51367  00F072  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 51368                           
 51369                           ; BSR set to: 4
 51370                           ;i2c2_master_example.c: 145: I2C2_SetDataCompleteCallback((0),(0));
 51371  00F076  0E00               	movlw	0
 51372  00F078  6E13               	movwf	I2C2_SetDataCompleteCallback@cb^0,c
 51373  00F07A  0E00               	movlw	0
 51374  00F07C  6E14               	movwf	(I2C2_SetDataCompleteCallback@cb+1)^0,c
 51375  00F07E  0E00               	movlw	0
 51376  00F080  6E15               	movwf	I2C2_SetDataCompleteCallback@ptr^0,c
 51377  00F082  0E00               	movlw	0
 51378  00F084  6E16               	movwf	(I2C2_SetDataCompleteCallback@ptr+1)^0,c
 51379  00F086  EC62  F07A         	call	_I2C2_SetDataCompleteCallback	;wreg free
 51380                           
 51381                           ;i2c2_master_example.c: 146: return I2C2_RESTART_READ;
 51382  00F08A  0E02               	movlw	2
 51383  00F08C  0012               	return		;funcret
 51384  00F08E                     __end_of_rd1RegCompleteHandler:
 51385                           	callstack 0
 51386                           
 51387 ;; *************** function _wr2RegCompleteHandler *****************
 51388 ;; Defined at:
 51389 ;;		line 163 in file "mcc_generated_files/examples/i2c2_master_example.c"
 51390 ;; Parameters:    Size  Location     Type
 51391 ;;  ptr             2   22[COMRAM] PTR void 
 51392 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@data(2), I2C2_Write1ByteRegister@data(1), I2C2_Read2B
      +yteRegister@returnValue(2), 
 51393 ;;		 -> NULL(0), I2C2_Read1ByteRegister@returnValue(1), 
 51394 ;; Auto vars:     Size  Location     Type
 51395 ;;		None
 51396 ;; Return value:  Size  Location     Type
 51397 ;;                  1    wreg      enum E97
 51398 ;; Registers used:
 51399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 51400 ;; Tracked objects:
 51401 ;;		On entry : 3F/4
 51402 ;;		On exit  : 0/0
 51403 ;;		Unchanged: 0/0
 51404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51409 ;;Total ram usage:        2 bytes
 51410 ;; Hardware stack levels used:    1
 51411 ;; Hardware stack levels required when called:    8
 51412 ;; This function calls:
 51413 ;;		_I2C2_SetBuffer
 51414 ;;		_I2C2_SetDataCompleteCallback
 51415 ;; This function is called by:
 51416 ;;		_I2C2_DO_TX
 51417 ;;		_I2C2_DO_RX
 51418 ;;		_I2C2_DO_TX_EMPTY
 51419 ;;		_I2C2_DO_ADDRESS_NACK
 51420 ;; This function uses a non-reentrant model
 51421 ;;
 51422                           
 51423                           	psect	text240
 51424  00F08E                     __ptext240:
 51425                           	callstack 0
 51426  00F08E                     _wr2RegCompleteHandler:
 51427                           	callstack 14
 51428                           
 51429                           ; BSR set to: 4
 51430                           ;i2c2_master_example.c: 165: I2C2_SetBuffer(ptr,2);
 51431                           
 51432                           ;incstack = 0
 51433  00F08E  C017  F00E         	movff	wr2RegCompleteHandler@ptr,I2C2_SetBuffer@buffer
 51434  00F092  C018  F00F         	movff	wr2RegCompleteHandler@ptr+1,I2C2_SetBuffer@buffer+1
 51435  00F096  0E00               	movlw	0
 51436  00F098  6E11               	movwf	(I2C2_SetBuffer@bufferSize+1)^0,c
 51437  00F09A  0E02               	movlw	2
 51438  00F09C  6E10               	movwf	I2C2_SetBuffer@bufferSize^0,c
 51439  00F09E  EC31  F07A         	call	_I2C2_SetBuffer	;wreg free
 51440                           
 51441                           ; BSR set to: 4
 51442                           ;i2c2_master_example.c: 166: I2C2_SetDataCompleteCallback((0),(0));
 51443  00F0A2  0E00               	movlw	0
 51444  00F0A4  6E13               	movwf	I2C2_SetDataCompleteCallback@cb^0,c
 51445  00F0A6  0E00               	movlw	0
 51446  00F0A8  6E14               	movwf	(I2C2_SetDataCompleteCallback@cb+1)^0,c
 51447  00F0AA  0E00               	movlw	0
 51448  00F0AC  6E15               	movwf	I2C2_SetDataCompleteCallback@ptr^0,c
 51449  00F0AE  0E00               	movlw	0
 51450  00F0B0  6E16               	movwf	(I2C2_SetDataCompleteCallback@ptr+1)^0,c
 51451  00F0B2  EC62  F07A         	call	_I2C2_SetDataCompleteCallback	;wreg free
 51452                           
 51453                           ;i2c2_master_example.c: 167: return I2C2_CONTINUE;
 51454  00F0B6  0E04               	movlw	4
 51455  00F0B8  0012               	return		;funcret
 51456  00F0BA                     __end_of_wr2RegCompleteHandler:
 51457                           	callstack 0
 51458                           
 51459 ;; *************** function _I2C2_SetDataCompleteCallback *****************
 51460 ;; Defined at:
 51461 ;;		line 273 in file "mcc_generated_files/i2c2_master.c"
 51462 ;; Parameters:    Size  Location     Type
 51463 ;;  cb              2   18[COMRAM] PTR FTN(PTR void ,)enum 
 51464 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 51465 ;;		 -> rd1RegCompleteHandler(1), Absolute function(1), 
 51466 ;;  ptr             2   20[COMRAM] PTR void 
 51467 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@data(2), I2C2_Write1ByteRegister@data(1), I2C2_Read2B
      +yteRegister@returnValue(2), 
 51468 ;;		 -> NULL(0), I2C2_Read1ByteRegister@returnValue(1), 
 51469 ;; Auto vars:     Size  Location     Type
 51470 ;;		None
 51471 ;; Return value:  Size  Location     Type
 51472 ;;                  1    wreg      void 
 51473 ;; Registers used:
 51474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 51475 ;; Tracked objects:
 51476 ;;		On entry : 3F/4
 51477 ;;		On exit  : 0/0
 51478 ;;		Unchanged: 0/0
 51479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51483 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51484 ;;Total ram usage:        4 bytes
 51485 ;; Hardware stack levels used:    1
 51486 ;; Hardware stack levels required when called:    7
 51487 ;; This function calls:
 51488 ;;		_I2C2_SetCallback
 51489 ;; This function is called by:
 51490 ;;		_I2C2_Read1ByteRegister
 51491 ;;		_I2C2_Write1ByteRegister
 51492 ;;		_I2C2_ReadDataBlock
 51493 ;;		_rd1RegCompleteHandler
 51494 ;;		_rd2RegCompleteHandler
 51495 ;;		_wr1RegCompleteHandler
 51496 ;;		_wr2RegCompleteHandler
 51497 ;;		_rdBlkRegCompleteHandler
 51498 ;; This function uses a non-reentrant model
 51499 ;;
 51500                           
 51501                           	psect	text241
 51502  00F4C4                     __ptext241:
 51503                           	callstack 0
 51504  00F4C4                     _I2C2_SetDataCompleteCallback:
 51505                           	callstack 20
 51506                           
 51507                           ; BSR set to: 4
 51508                           ;i2c2_master.c: 275: I2C2_SetCallback(I2C2_DATA_COMPLETE, cb, ptr);
 51509                           
 51510                           ;incstack = 0
 51511  00F4C4  C013  F00E         	movff	I2C2_SetDataCompleteCallback@cb,I2C2_SetCallback@cb
 51512  00F4C8  C014  F00F         	movff	I2C2_SetDataCompleteCallback@cb+1,I2C2_SetCallback@cb+1
 51513  00F4CC  C015  F010         	movff	I2C2_SetDataCompleteCallback@ptr,I2C2_SetCallback@ptr
 51514  00F4D0  C016  F011         	movff	I2C2_SetDataCompleteCallback@ptr+1,I2C2_SetCallback@ptr+1
 51515  00F4D4  0E00               	movlw	0
 51516  00F4D6  EC37  F06F         	call	_I2C2_SetCallback
 51517  00F4DA  0012               	return		;funcret
 51518  00F4DC                     __end_of_I2C2_SetDataCompleteCallback:
 51519                           	callstack 0
 51520                           
 51521 ;; *************** function _I2C2_SetCallback *****************
 51522 ;; Defined at:
 51523 ;;		line 298 in file "mcc_generated_files/i2c2_master.c"
 51524 ;; Parameters:    Size  Location     Type
 51525 ;;  idx             1    wreg     enum E5742
 51526 ;;  cb              2   13[COMRAM] PTR FTN(PTR void ,)enum 
 51527 ;;		 -> rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), 
 51528 ;;		 -> rd1RegCompleteHandler(1), Absolute function(1), 
 51529 ;;  ptr             2   15[COMRAM] PTR void 
 51530 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@data(2), I2C2_Write1ByteRegister@data(1), I2C2_Read2B
      +yteRegister@returnValue(2), 
 51531 ;;		 -> NULL(0), I2C2_Read1ByteRegister@returnValue(1), 
 51532 ;; Auto vars:     Size  Location     Type
 51533 ;;  idx             1   17[COMRAM] enum E5742
 51534 ;; Return value:  Size  Location     Type
 51535 ;;                  1    wreg      void 
 51536 ;; Registers used:
 51537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 51538 ;; Tracked objects:
 51539 ;;		On entry : 3F/4
 51540 ;;		On exit  : 0/0
 51541 ;;		Unchanged: 0/0
 51542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51546 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51547 ;;Total ram usage:        5 bytes
 51548 ;; Hardware stack levels used:    1
 51549 ;; Hardware stack levels required when called:    6
 51550 ;; This function calls:
 51551 ;;		Nothing
 51552 ;; This function is called by:
 51553 ;;		_I2C2_SetDataCompleteCallback
 51554 ;;		_I2C2_SetAddressNackCallback
 51555 ;; This function uses a non-reentrant model
 51556 ;;
 51557                           
 51558                           	psect	text242
 51559  00DE6E                     __ptext242:
 51560                           	callstack 0
 51561  00DE6E                     _I2C2_SetCallback:
 51562                           	callstack 20
 51563                           
 51564                           ;incstack = 0
 51565                           ;I2C2_SetCallback@idx stored from wreg
 51566  00DE6E  6E12               	movwf	I2C2_SetCallback@idx^0,c
 51567                           
 51568                           ;i2c2_master.c: 300: if(cb)
 51569  00DE70  500E               	movf	I2C2_SetCallback@cb^0,w,c
 51570  00DE72  100F               	iorwf	(I2C2_SetCallback@cb+1)^0,w,c
 51571  00DE74  B4D8               	btfsc	status,2,c
 51572  00DE76  D019               	goto	l18941
 51573                           
 51574                           ;i2c2_master.c: 301: {;i2c2_master.c: 302: I2C2_Status.callbackTable[idx] = cb;
 51575  00DE78  5012               	movf	I2C2_SetCallback@idx^0,w,c
 51576  00DE7A  0D02               	mullw	2
 51577  00DE7C  0ED3               	movlw	low _I2C2_Status
 51578  00DE7E  24F3               	addwf	243,w,c
 51579  00DE80  6ED9               	movwf	fsr2l,c
 51580  00DE82  0E04               	movlw	high _I2C2_Status
 51581  00DE84  20F4               	addwfc	prodh,w,c
 51582  00DE86  6EDA               	movwf	fsr2h,c
 51583  00DE88  C00E  FFDE         	movff	I2C2_SetCallback@cb,postinc2
 51584  00DE8C  C00F  FFDD         	movff	I2C2_SetCallback@cb+1,postdec2
 51585                           
 51586                           ;i2c2_master.c: 303: I2C2_Status.callbackPayload[idx] = ptr;
 51587  00DE90  5012               	movf	I2C2_SetCallback@idx^0,w,c
 51588  00DE92  0D02               	mullw	2
 51589  00DE94  0EDF               	movlw	low (_I2C2_Status+12)
 51590  00DE96  24F3               	addwf	243,w,c
 51591  00DE98  6ED9               	movwf	fsr2l,c
 51592  00DE9A  0E04               	movlw	high (_I2C2_Status+12)
 51593  00DE9C  20F4               	addwfc	prodh,w,c
 51594  00DE9E  6EDA               	movwf	fsr2h,c
 51595  00DEA0  C010  FFDE         	movff	I2C2_SetCallback@ptr,postinc2
 51596  00DEA4  C011  FFDD         	movff	I2C2_SetCallback@ptr+1,postdec2
 51597                           
 51598                           ;i2c2_master.c: 304: }
 51599  00DEA8  0012               	return	
 51600  00DEAA                     l18941:
 51601                           
 51602                           ;i2c2_master.c: 305: else;i2c2_master.c: 306: {;i2c2_master.c: 307: I2C2_Status.callback
      +                          Table[idx] = I2C2_CallbackReturnStop;
 51603  00DEAA  5012               	movf	I2C2_SetCallback@idx^0,w,c
 51604  00DEAC  0D02               	mullw	2
 51605  00DEAE  0ED3               	movlw	low _I2C2_Status
 51606  00DEB0  24F3               	addwf	243,w,c
 51607  00DEB2  6ED9               	movwf	fsr2l,c
 51608  00DEB4  0E04               	movlw	high _I2C2_Status
 51609  00DEB6  20F4               	addwfc	prodh,w,c
 51610  00DEB8  6EDA               	movwf	fsr2h,c
 51611  00DEBA  0E1A               	movlw	low _I2C2_CallbackReturnStop
 51612  00DEBC  6EDE               	movwf	postinc2,c
 51613  00DEBE  0EF8               	movlw	high _I2C2_CallbackReturnStop
 51614  00DEC0  6EDD               	movwf	postdec2,c
 51615                           
 51616                           ;i2c2_master.c: 308: I2C2_Status.callbackPayload[idx] = (0);
 51617  00DEC2  5012               	movf	I2C2_SetCallback@idx^0,w,c
 51618  00DEC4  0D02               	mullw	2
 51619  00DEC6  0EDF               	movlw	low (_I2C2_Status+12)
 51620  00DEC8  24F3               	addwf	243,w,c
 51621  00DECA  6ED9               	movwf	fsr2l,c
 51622  00DECC  0E04               	movlw	high (_I2C2_Status+12)
 51623  00DECE  20F4               	addwfc	prodh,w,c
 51624  00DED0  6EDA               	movwf	fsr2h,c
 51625  00DED2  0E00               	movlw	0
 51626  00DED4  6EDE               	movwf	postinc2,c
 51627  00DED6  0E00               	movlw	0
 51628  00DED8  6EDD               	movwf	postdec2,c
 51629  00DEDA  0012               	return		;funcret
 51630  00DEDC                     __end_of_I2C2_SetCallback:
 51631                           	callstack 0
 51632                           
 51633 ;; *************** function _I2C2_SetBuffer *****************
 51634 ;; Defined at:
 51635 ;;		line 263 in file "mcc_generated_files/i2c2_master.c"
 51636 ;; Parameters:    Size  Location     Type
 51637 ;;  buffer          2   13[COMRAM] PTR void 
 51638 ;;		 -> get_tempHumidity@work(8), get_tempHumidity@data(3), DateTime(7), I2C2_ReadDataBlock@reg(1), 
 51639 ;;		 -> I2C2_ReadDataBlock@bufferBlock(4), I2C2_Write2ByteRegister@reg(1), I2C2_Write2ByteRegister@data(2), I2C2_Write1B
      +yteRegister@reg(1), 
 51640 ;;		 -> I2C2_Write1ByteRegister@data(1), I2C2_Read2ByteRegister@reg(1), I2C2_Read2ByteRegister@returnValue(2), NULL(0), 
 51641 ;;		 -> I2C2_Read1ByteRegister@reg(1), I2C2_Read1ByteRegister@returnValue(1), 
 51642 ;;  bufferSize      2   15[COMRAM] unsigned int 
 51643 ;; Auto vars:     Size  Location     Type
 51644 ;;		None
 51645 ;; Return value:  Size  Location     Type
 51646 ;;                  1    wreg      void 
 51647 ;; Registers used:
 51648 ;;		wreg, status,2, status,0
 51649 ;; Tracked objects:
 51650 ;;		On entry : 0/4
 51651 ;;		On exit  : 3F/4
 51652 ;;		Unchanged: 0/0
 51653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51657 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51658 ;;Total ram usage:        4 bytes
 51659 ;; Hardware stack levels used:    1
 51660 ;; Hardware stack levels required when called:    6
 51661 ;; This function calls:
 51662 ;;		Nothing
 51663 ;; This function is called by:
 51664 ;;		_I2C2_Read1ByteRegister
 51665 ;;		_I2C2_Write1ByteRegister
 51666 ;;		_I2C2_WriteNBytes
 51667 ;;		_I2C2_ReadNBytes
 51668 ;;		_I2C2_ReadDataBlock
 51669 ;;		_rd1RegCompleteHandler
 51670 ;;		_rd2RegCompleteHandler
 51671 ;;		_wr1RegCompleteHandler
 51672 ;;		_wr2RegCompleteHandler
 51673 ;;		_rdBlkRegCompleteHandler
 51674 ;; This function uses a non-reentrant model
 51675 ;;
 51676                           
 51677                           	psect	text243
 51678  00F462                     __ptext243:
 51679                           	callstack 0
 51680  00F462                     _I2C2_SetBuffer:
 51681                           	callstack 21
 51682                           
 51683                           ;i2c2_master.c: 265: if(I2C2_Status.bufferFree)
 51684                           
 51685                           ;incstack = 0
 51686  00F462  0104               	movlb	4	; () banked
 51687  00F464  A7F6               	btfss	(_I2C2_Status+35)& (0+255),3,b
 51688  00F466  0012               	return	
 51689                           
 51690                           ; BSR set to: 4
 51691                           ;i2c2_master.c: 266: {;i2c2_master.c: 267: I2C2_Status.data_ptr = buffer;
 51692  00F468  C00E  F4F0         	movff	I2C2_SetBuffer@buffer,_I2C2_Status+29
 51693  00F46C  C00F  F4F1         	movff	I2C2_SetBuffer@buffer+1,_I2C2_Status+30
 51694                           
 51695                           ; BSR set to: 4
 51696                           ;i2c2_master.c: 268: I2C2_Status.data_length = bufferSize;
 51697  00F470  C010  F4F2         	movff	I2C2_SetBuffer@bufferSize,_I2C2_Status+31
 51698  00F474  C011  F4F3         	movff	I2C2_SetBuffer@bufferSize+1,_I2C2_Status+32
 51699                           
 51700                           ; BSR set to: 4
 51701                           ;i2c2_master.c: 269: I2C2_Status.bufferFree = 0;
 51702  00F478  97F6               	bcf	(_I2C2_Status+35)& (0+255),3,b
 51703                           
 51704                           ; BSR set to: 4
 51705  00F47A  0012               	return		;funcret
 51706  00F47C                     __end_of_I2C2_SetBuffer:
 51707                           	callstack 0
 51708                           
 51709 ;; *************** function _I2C2_MasterStop *****************
 51710 ;; Defined at:
 51711 ;;		line 593 in file "mcc_generated_files/i2c2_master.c"
 51712 ;; Parameters:    Size  Location     Type
 51713 ;;		None
 51714 ;; Auto vars:     Size  Location     Type
 51715 ;;		None
 51716 ;; Return value:  Size  Location     Type
 51717 ;;                  1    wreg      void 
 51718 ;; Registers used:
 51719 ;;		None
 51720 ;; Tracked objects:
 51721 ;;		On entry : 0/4
 51722 ;;		On exit  : 0/0
 51723 ;;		Unchanged: 0/0
 51724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51729 ;;Total ram usage:        0 bytes
 51730 ;; Hardware stack levels used:    1
 51731 ;; Hardware stack levels required when called:    6
 51732 ;; This function calls:
 51733 ;;		Nothing
 51734 ;; This function is called by:
 51735 ;;		_I2C2_DO_SEND_STOP
 51736 ;; This function uses a non-reentrant model
 51737 ;;
 51738                           
 51739                           	psect	text244
 51740  00F81E                     __ptext244:
 51741                           	callstack 0
 51742  00F81E                     _I2C2_MasterStop:
 51743                           	callstack 15
 51744                           
 51745                           ;i2c2_master.c: 595: SSP2CON2bits.PEN = 1;
 51746                           
 51747                           ; BSR set to: 4
 51748                           ;incstack = 0
 51749  00F81E  846B               	bsf	107,2,c	;volatile
 51750  00F820  0012               	return		;funcret
 51751  00F822                     __end_of_I2C2_MasterStop:
 51752                           	callstack 0
 51753                           
 51754 ;; *************** function _I2C2_MasterEnableRestart *****************
 51755 ;; Defined at:
 51756 ;;		line 573 in file "mcc_generated_files/i2c2_master.c"
 51757 ;; Parameters:    Size  Location     Type
 51758 ;;		None
 51759 ;; Auto vars:     Size  Location     Type
 51760 ;;		None
 51761 ;; Return value:  Size  Location     Type
 51762 ;;                  1    wreg      void 
 51763 ;; Registers used:
 51764 ;;		None
 51765 ;; Tracked objects:
 51766 ;;		On entry : 0/4
 51767 ;;		On exit  : 0/0
 51768 ;;		Unchanged: 0/0
 51769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51774 ;;Total ram usage:        0 bytes
 51775 ;; Hardware stack levels used:    1
 51776 ;; Hardware stack levels required when called:    6
 51777 ;; This function calls:
 51778 ;;		Nothing
 51779 ;; This function is called by:
 51780 ;;		_I2C2_DO_SEND_RESTART_READ
 51781 ;;		_I2C2_DO_SEND_RESTART_WRITE
 51782 ;;		_I2C2_DO_SEND_RESTART
 51783 ;; This function uses a non-reentrant model
 51784 ;;
 51785                           
 51786                           	psect	text245
 51787  00F822                     __ptext245:
 51788                           	callstack 0
 51789  00F822                     _I2C2_MasterEnableRestart:
 51790                           	callstack 15
 51791                           
 51792                           ;i2c2_master.c: 575: SSP2CON2bits.RSEN = 1;
 51793                           
 51794                           ;incstack = 0
 51795  00F822  826B               	bsf	107,1,c	;volatile
 51796  00F824  0012               	return		;funcret
 51797  00F826                     __end_of_I2C2_MasterEnableRestart:
 51798                           	callstack 0
 51799                           
 51800 ;; *************** function _I2C2_MasterStart *****************
 51801 ;; Defined at:
 51802 ;;		line 588 in file "mcc_generated_files/i2c2_master.c"
 51803 ;; Parameters:    Size  Location     Type
 51804 ;;		None
 51805 ;; Auto vars:     Size  Location     Type
 51806 ;;		None
 51807 ;; Return value:  Size  Location     Type
 51808 ;;                  1    wreg      void 
 51809 ;; Registers used:
 51810 ;;		None
 51811 ;; Tracked objects:
 51812 ;;		On entry : 3F/4
 51813 ;;		On exit  : 3F/4
 51814 ;;		Unchanged: 3F/0
 51815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51820 ;;Total ram usage:        0 bytes
 51821 ;; Hardware stack levels used:    1
 51822 ;; Hardware stack levels required when called:    6
 51823 ;; This function calls:
 51824 ;;		Nothing
 51825 ;; This function is called by:
 51826 ;;		_I2C2_MasterOperation
 51827 ;; This function uses a non-reentrant model
 51828 ;;
 51829                           
 51830                           	psect	text246
 51831  00F826                     __ptext246:
 51832                           	callstack 0
 51833  00F826                     _I2C2_MasterStart:
 51834                           	callstack 19
 51835                           
 51836                           ; BSR set to: 4
 51837                           ;i2c2_master.c: 590: SSP2CON2bits.SEN = 1;
 51838                           
 51839                           ;incstack = 0
 51840  00F826  806B               	bsf	107,0,c	;volatile
 51841                           
 51842                           ; BSR set to: 4
 51843  00F828  0012               	return		;funcret
 51844  00F82A                     __end_of_I2C2_MasterStart:
 51845                           	callstack 0
 51846                           
 51847 ;; *************** function _I2C2_Close *****************
 51848 ;; Defined at:
 51849 ;;		line 209 in file "mcc_generated_files/i2c2_master.c"
 51850 ;; Parameters:    Size  Location     Type
 51851 ;;		None
 51852 ;; Auto vars:     Size  Location     Type
 51853 ;;  returnValue     1   13[COMRAM] enum E92
 51854 ;; Return value:  Size  Location     Type
 51855 ;;                  1    wreg      enum E92
 51856 ;; Registers used:
 51857 ;;		wreg, status,2, cstack
 51858 ;; Tracked objects:
 51859 ;;		On entry : 0/4
 51860 ;;		On exit  : 3F/4
 51861 ;;		Unchanged: 0/0
 51862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51864 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51866 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51867 ;;Total ram usage:        1 bytes
 51868 ;; Hardware stack levels used:    1
 51869 ;; Hardware stack levels required when called:    7
 51870 ;; This function calls:
 51871 ;;		_I2C2_MasterClearIrq
 51872 ;;		_I2C2_MasterClose
 51873 ;;		_I2C2_MasterDisableIrq
 51874 ;; This function is called by:
 51875 ;;		_I2C2_Read1ByteRegister
 51876 ;;		_I2C2_Write1ByteRegister
 51877 ;;		_I2C2_WriteNBytes
 51878 ;;		_I2C2_ReadNBytes
 51879 ;;		_I2C2_ReadDataBlock
 51880 ;; This function uses a non-reentrant model
 51881 ;;
 51882                           
 51883                           	psect	text247
 51884  00F2B0                     __ptext247:
 51885                           	callstack 0
 51886  00F2B0                     _I2C2_Close:
 51887                           	callstack 20
 51888                           
 51889                           ;i2c2_master.c: 211: i2c2_error_t returnValue = I2C2_BUSY;
 51890                           
 51891                           ; BSR set to: 4
 51892                           ;incstack = 0
 51893  00F2B0  0E01               	movlw	1
 51894  00F2B2  6E0E               	movwf	I2C2_Close@returnValue^0,c
 51895                           
 51896                           ;i2c2_master.c: 212: if(!I2C2_Status.busy)
 51897  00F2B4  0104               	movlb	4	; () banked
 51898  00F2B6  B3F6               	btfsc	(_I2C2_Status+35)& (0+255),1,b
 51899  00F2B8  D00A               	goto	l21837
 51900                           
 51901                           ; BSR set to: 4
 51902                           ;i2c2_master.c: 213: {;i2c2_master.c: 214: I2C2_Status.inUse = 0;
 51903  00F2BA  95F6               	bcf	(_I2C2_Status+35)& (0+255),2,b
 51904                           
 51905                           ;i2c2_master.c: 215: I2C2_Status.address = 0xff;
 51906  00F2BC  69EF               	setf	(_I2C2_Status+28)& (0+255),b
 51907                           
 51908                           ; BSR set to: 4
 51909                           ;i2c2_master.c: 216: I2C2_MasterClearIrq();
 51910  00F2BE  EC19  F07C         	call	_I2C2_MasterClearIrq	;wreg free
 51911                           
 51912                           ;i2c2_master.c: 217: I2C2_MasterDisableIrq();
 51913  00F2C2  EC15  F07C         	call	_I2C2_MasterDisableIrq	;wreg free
 51914                           
 51915                           ;i2c2_master.c: 218: I2C2_MasterClose();
 51916  00F2C6  EC17  F07C         	call	_I2C2_MasterClose	;wreg free
 51917                           
 51918                           ; BSR set to: 4
 51919                           ;i2c2_master.c: 219: returnValue = I2C2_Status.error;
 51920  00F2CA  C4F5  F00E         	movff	_I2C2_Status+34,I2C2_Close@returnValue
 51921  00F2CE                     l21837:
 51922                           
 51923                           ; BSR set to: 4
 51924                           ;i2c2_master.c: 220: };i2c2_master.c: 221: return returnValue;
 51925  00F2CE  500E               	movf	I2C2_Close@returnValue^0,w,c
 51926                           
 51927                           ; BSR set to: 4
 51928  00F2D0  0012               	return		;funcret
 51929  00F2D2                     __end_of_I2C2_Close:
 51930                           	callstack 0
 51931                           
 51932 ;; *************** function _I2C2_MasterDisableIrq *****************
 51933 ;; Defined at:
 51934 ;;		line 635 in file "mcc_generated_files/i2c2_master.c"
 51935 ;; Parameters:    Size  Location     Type
 51936 ;;		None
 51937 ;; Auto vars:     Size  Location     Type
 51938 ;;		None
 51939 ;; Return value:  Size  Location     Type
 51940 ;;                  1    wreg      void 
 51941 ;; Registers used:
 51942 ;;		None
 51943 ;; Tracked objects:
 51944 ;;		On entry : 3F/4
 51945 ;;		On exit  : 3F/4
 51946 ;;		Unchanged: 3F/0
 51947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51952 ;;Total ram usage:        0 bytes
 51953 ;; Hardware stack levels used:    1
 51954 ;; Hardware stack levels required when called:    6
 51955 ;; This function calls:
 51956 ;;		Nothing
 51957 ;; This function is called by:
 51958 ;;		_I2C2_Close
 51959 ;; This function uses a non-reentrant model
 51960 ;;
 51961                           
 51962                           	psect	text248
 51963  00F82A                     __ptext248:
 51964                           	callstack 0
 51965  00F82A                     _I2C2_MasterDisableIrq:
 51966                           	callstack 20
 51967                           
 51968                           ; BSR set to: 4
 51969                           ;i2c2_master.c: 637: PIE3bits.SSP2IE = 0;
 51970                           
 51971                           ; BSR set to: 4
 51972                           ;incstack = 0
 51973  00F82A  9EA3               	bcf	163,7,c	;volatile
 51974                           
 51975                           ; BSR set to: 4
 51976  00F82C  0012               	return		;funcret
 51977  00F82E                     __end_of_I2C2_MasterDisableIrq:
 51978                           	callstack 0
 51979                           
 51980 ;; *************** function _I2C2_MasterClose *****************
 51981 ;; Defined at:
 51982 ;;		line 557 in file "mcc_generated_files/i2c2_master.c"
 51983 ;; Parameters:    Size  Location     Type
 51984 ;;		None
 51985 ;; Auto vars:     Size  Location     Type
 51986 ;;		None
 51987 ;; Return value:  Size  Location     Type
 51988 ;;                  1    wreg      void 
 51989 ;; Registers used:
 51990 ;;		None
 51991 ;; Tracked objects:
 51992 ;;		On entry : 3F/4
 51993 ;;		On exit  : 3F/4
 51994 ;;		Unchanged: 3F/0
 51995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 51996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 51999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52000 ;;Total ram usage:        0 bytes
 52001 ;; Hardware stack levels used:    1
 52002 ;; Hardware stack levels required when called:    6
 52003 ;; This function calls:
 52004 ;;		Nothing
 52005 ;; This function is called by:
 52006 ;;		_I2C2_Close
 52007 ;; This function uses a non-reentrant model
 52008 ;;
 52009                           
 52010                           	psect	text249
 52011  00F82E                     __ptext249:
 52012                           	callstack 0
 52013  00F82E                     _I2C2_MasterClose:
 52014                           	callstack 20
 52015                           
 52016                           ; BSR set to: 4
 52017                           ;i2c2_master.c: 560: SSP2CON1bits.SSPEN = 0;
 52018                           
 52019                           ; BSR set to: 4
 52020                           ;incstack = 0
 52021  00F82E  9A6C               	bcf	108,5,c	;volatile
 52022                           
 52023                           ; BSR set to: 4
 52024  00F830  0012               	return		;funcret
 52025  00F832                     __end_of_I2C2_MasterClose:
 52026                           	callstack 0
 52027                           
 52028 ;; *************** function _I2C2_MasterClearIrq *****************
 52029 ;; Defined at:
 52030 ;;		line 640 in file "mcc_generated_files/i2c2_master.c"
 52031 ;; Parameters:    Size  Location     Type
 52032 ;;		None
 52033 ;; Auto vars:     Size  Location     Type
 52034 ;;		None
 52035 ;; Return value:  Size  Location     Type
 52036 ;;                  1    wreg      void 
 52037 ;; Registers used:
 52038 ;;		None
 52039 ;; Tracked objects:
 52040 ;;		On entry : 3F/4
 52041 ;;		On exit  : 3F/4
 52042 ;;		Unchanged: 3F/0
 52043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52048 ;;Total ram usage:        0 bytes
 52049 ;; Hardware stack levels used:    1
 52050 ;; Hardware stack levels required when called:    6
 52051 ;; This function calls:
 52052 ;;		Nothing
 52053 ;; This function is called by:
 52054 ;;		_I2C2_Open
 52055 ;;		_I2C2_Close
 52056 ;;		_I2C2_MasterFsm
 52057 ;; This function uses a non-reentrant model
 52058 ;;
 52059                           
 52060                           	psect	text250
 52061  00F832                     __ptext250:
 52062                           	callstack 0
 52063  00F832                     _I2C2_MasterClearIrq:
 52064                           	callstack 20
 52065                           
 52066                           ; BSR set to: 4
 52067                           ;i2c2_master.c: 642: PIR3bits.SSP2IF = 0;
 52068                           
 52069                           ; BSR set to: 4
 52070                           ;incstack = 0
 52071  00F832  9EA4               	bcf	164,7,c	;volatile
 52072                           
 52073                           ; BSR set to: 4
 52074  00F834  0012               	return		;funcret
 52075  00F836                     __end_of_I2C2_MasterClearIrq:
 52076                           	callstack 0
 52077                           
 52078 ;; *************** function _CheckCheckSum *****************
 52079 ;; Defined at:
 52080 ;;		line 864 in file "main.c"
 52081 ;; Parameters:    Size  Location     Type
 52082 ;;  buf             2   19[COMRAM] PTR unsigned char 
 52083 ;;		 -> Buffer(100), 
 52084 ;; Auto vars:     Size  Location     Type
 52085 ;;  end             2   38[COMRAM] PTR unsigned char 
 52086 ;;		 -> HEX(17), Buffer(100), NULL(0), 
 52087 ;;  start           2   36[COMRAM] PTR unsigned char 
 52088 ;;		 -> HEX(17), Buffer(100), NULL(0), 
 52089 ;;  checksum        1   35[COMRAM] unsigned char 
 52090 ;; Return value:  Size  Location     Type
 52091 ;;                  1    wreg      unsigned char 
 52092 ;; Registers used:
 52093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 52094 ;; Tracked objects:
 52095 ;;		On entry : 3F/2
 52096 ;;		On exit  : 0/0
 52097 ;;		Unchanged: 0/0
 52098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52099 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52100 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52101 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52102 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52103 ;;Total ram usage:       21 bytes
 52104 ;; Hardware stack levels used:    1
 52105 ;; Hardware stack levels required when called:    7
 52106 ;; This function calls:
 52107 ;;		_strchr
 52108 ;; This function is called by:
 52109 ;;		_GPRMCdatacheck
 52110 ;; This function uses a non-reentrant model
 52111 ;;
 52112                           
 52113                           	psect	text251
 52114  00AF02                     __ptext251:
 52115                           	callstack 0
 52116  00AF02                     _CheckCheckSum:
 52117                           	callstack 22
 52118                           
 52119                           ; BSR set to: 2
 52120                           ;main.c: 865: char *start;;main.c: 866: char *end;;main.c: 867: uint8_t checksum;;main.c
      +                          : 869: start = strchr(buf, '$');
 52121                           
 52122                           ; BSR set to: 4
 52123                           ;incstack = 0
 52124  00AF02  C014  F00E         	movff	CheckCheckSum@buf,strchr@ptr
 52125  00AF06  C015  F00F         	movff	CheckCheckSum@buf+1,strchr@ptr+1
 52126  00AF0A  0E00               	movlw	0
 52127  00AF0C  6E11               	movwf	(strchr@chr+1)^0,c
 52128  00AF0E  0E24               	movlw	36
 52129  00AF10  6E10               	movwf	strchr@chr^0,c
 52130  00AF12  ECFF  F06E         	call	_strchr	;wreg free
 52131  00AF16  C00E  F025         	movff	?_strchr,CheckCheckSum@start
 52132  00AF1A  C00F  F026         	movff	?_strchr+1,CheckCheckSum@start+1
 52133                           
 52134                           ;main.c: 870: if (start == (0)) return 1;
 52135  00AF1E  5025               	movf	CheckCheckSum@start^0,w,c
 52136  00AF20  1026               	iorwf	(CheckCheckSum@start+1)^0,w,c
 52137  00AF22  A4D8               	btfss	status,2,c
 52138  00AF24  D002               	goto	l24127
 52139  00AF26                     u27300:
 52140  00AF26  0E01               	movlw	1
 52141  00AF28  0012               	return	
 52142  00AF2A                     l24127:
 52143                           
 52144                           ;main.c: 871: end = strchr(buf, '*');
 52145  00AF2A  C014  F00E         	movff	CheckCheckSum@buf,strchr@ptr
 52146  00AF2E  C015  F00F         	movff	CheckCheckSum@buf+1,strchr@ptr+1
 52147  00AF32  0E00               	movlw	0
 52148  00AF34  6E11               	movwf	(strchr@chr+1)^0,c
 52149  00AF36  0E2A               	movlw	42
 52150  00AF38  6E10               	movwf	strchr@chr^0,c
 52151  00AF3A  ECFF  F06E         	call	_strchr	;wreg free
 52152  00AF3E  C00E  F027         	movff	?_strchr,CheckCheckSum@end
 52153  00AF42  C00F  F028         	movff	?_strchr+1,CheckCheckSum@end+1
 52154                           
 52155                           ;main.c: 872: if (end == (0)) return 1;
 52156  00AF46  5027               	movf	CheckCheckSum@end^0,w,c
 52157  00AF48  1028               	iorwf	(CheckCheckSum@end+1)^0,w,c
 52158  00AF4A  B4D8               	btfsc	status,2,c
 52159  00AF4C  D7EC               	goto	u27300
 52160                           
 52161                           ;main.c: 874: checksum = 0;
 52162  00AF4E  0E00               	movlw	0
 52163  00AF50  6E24               	movwf	CheckCheckSum@checksum^0,c
 52164                           
 52165                           ;main.c: 875: start++;
 52166  00AF52  4A25               	infsnz	CheckCheckSum@start^0,f,c
 52167  00AF54  2A26               	incf	(CheckCheckSum@start+1)^0,f,c
 52168                           
 52169                           ;main.c: 876: while (start < end) {
 52170  00AF56  D013               	goto	l24143
 52171  00AF58                     l24139:
 52172                           
 52173                           ;main.c: 877: checksum = (uint8_t)(checksum ^ (*start));
 52174  00AF58  C025  FFF6         	movff	CheckCheckSum@start,tblptrl
 52175  00AF5C  C026  FFF7         	movff	CheckCheckSum@start+1,tblptrh
 52176  00AF60  0E00               	movlw	low (__mediumconst shr (0+16))
 52177  00AF62  6EF8               	movwf	tblptru,c
 52178  00AF64  0E0F               	movlw	(high __ramtop+-1)
 52179  00AF66  64F7               	cpfsgt	tblptrh,c
 52180  00AF68  D003               	bra	u27327
 52181  00AF6A  0008               	tblrd		*
 52182  00AF6C  50F5               	movf	tablat,w,c
 52183  00AF6E  D005               	bra	u27320
 52184  00AF70                     u27327:
 52185  00AF70  CFF6 FFE9          	movff	tblptrl,fsr0l
 52186  00AF74  CFF7 FFEA          	movff	tblptrh,fsr0h
 52187  00AF78  50EF               	movf	indf0,w,c
 52188  00AF7A                     u27320:
 52189  00AF7A  1824               	xorwf	CheckCheckSum@checksum^0,w,c
 52190  00AF7C  D7E9               	goto	L46
 52191  00AF7E                     l24143:
 52192  00AF7E  5027               	movf	CheckCheckSum@end^0,w,c
 52193  00AF80  5C25               	subwf	CheckCheckSum@start^0,w,c
 52194  00AF82  5028               	movf	(CheckCheckSum@end+1)^0,w,c
 52195  00AF84  5826               	subwfb	(CheckCheckSum@start+1)^0,w,c
 52196  00AF86  A0D8               	btfss	status,0,c
 52197  00AF88  D7E7               	goto	l24139
 52198                           
 52199                           ;main.c: 879: };main.c: 883: if (checksum == (uint8_t)((strchr(HEX, end[1]) - HEX) <<4) 
      +                          + (strchr(HEX, end[2])-HEX)) {
 52200  00AF8A  5024               	movf	CheckCheckSum@checksum^0,w,c
 52201  00AF8C  6E16               	movwf	??_CheckCheckSum^0,c
 52202  00AF8E  6A17               	clrf	(??_CheckCheckSum+1)^0,c
 52203  00AF90  0E97               	movlw	low _HEX
 52204  00AF92  6E18               	movwf	(??_CheckCheckSum+2)^0,c
 52205  00AF94  0EFE               	movlw	high _HEX
 52206  00AF96  6E19               	movwf	(??_CheckCheckSum+3)^0,c
 52207  00AF98  0E97               	movlw	_HEX& (0+255)
 52208  00AF9A  6E1A               	movwf	(??_CheckCheckSum+4)^0,c
 52209  00AF9C  0E97               	movlw	low _HEX
 52210  00AF9E  6E0E               	movwf	strchr@ptr^0,c
 52211  00AFA0  0EFE               	movlw	high _HEX
 52212  00AFA2  6E0F               	movwf	(strchr@ptr+1)^0,c
 52213  00AFA4  0E01               	movlw	1
 52214  00AFA6  2427               	addwf	CheckCheckSum@end^0,w,c
 52215  00AFA8  6E1B               	movwf	(??_CheckCheckSum+5)^0,c
 52216  00AFAA  0E00               	movlw	0
 52217  00AFAC  2028               	addwfc	(CheckCheckSum@end+1)^0,w,c
 52218  00AFAE  6E1C               	movwf	(??_CheckCheckSum+6)^0,c
 52219  00AFB0  C01B  FFF6         	movff	??_CheckCheckSum+5,tblptrl
 52220  00AFB4  C01C  FFF7         	movff	??_CheckCheckSum+6,tblptrh
 52221  00AFB8  0E00               	movlw	low (__mediumconst shr (0+16))
 52222  00AFBA  6EF8               	movwf	tblptru,c
 52223  00AFBC  0E0F               	movlw	(high __ramtop+-1)
 52224  00AFBE  64F7               	cpfsgt	tblptrh,c
 52225  00AFC0  D003               	bra	u27347
 52226  00AFC2  0008               	tblrd		*
 52227  00AFC4  50F5               	movf	tablat,w,c
 52228  00AFC6  D005               	bra	u27340
 52229  00AFC8                     u27347:
 52230  00AFC8  CFF6 FFE9          	movff	tblptrl,fsr0l
 52231  00AFCC  CFF7 FFEA          	movff	tblptrh,fsr0h
 52232  00AFD0  50EF               	movf	indf0,w,c
 52233  00AFD2                     u27340:
 52234  00AFD2  6E1D               	movwf	(??_CheckCheckSum+7)^0,c
 52235  00AFD4  501D               	movf	(??_CheckCheckSum+7)^0,w,c
 52236  00AFD6  6E10               	movwf	strchr@chr^0,c
 52237  00AFD8  6A11               	clrf	(strchr@chr+1)^0,c
 52238  00AFDA  ECFF  F06E         	call	_strchr	;wreg free
 52239  00AFDE  501A               	movf	(??_CheckCheckSum+4)^0,w,c
 52240  00AFE0  5C0E               	subwf	?_strchr^0,w,c
 52241  00AFE2  6E1E               	movwf	(??_CheckCheckSum+8)^0,c
 52242  00AFE4  381E               	swapf	(??_CheckCheckSum+8)^0,w,c
 52243  00AFE6  0BF0               	andlw	240
 52244  00AFE8  6E1F               	movwf	(??_CheckCheckSum+9)^0,c
 52245  00AFEA  6A20               	clrf	(??_CheckCheckSum+10)^0,c
 52246  00AFEC  0E97               	movlw	low _HEX
 52247  00AFEE  6E0E               	movwf	strchr@ptr^0,c
 52248  00AFF0  0EFE               	movlw	high _HEX
 52249  00AFF2  6E0F               	movwf	(strchr@ptr+1)^0,c
 52250  00AFF4  0E02               	movlw	2
 52251  00AFF6  2427               	addwf	CheckCheckSum@end^0,w,c
 52252  00AFF8  6E21               	movwf	(??_CheckCheckSum+11)^0,c
 52253  00AFFA  0E00               	movlw	0
 52254  00AFFC  2028               	addwfc	(CheckCheckSum@end+1)^0,w,c
 52255  00AFFE  6E22               	movwf	(??_CheckCheckSum+12)^0,c
 52256  00B000  C021  FFF6         	movff	??_CheckCheckSum+11,tblptrl
 52257  00B004  C022  FFF7         	movff	??_CheckCheckSum+12,tblptrh
 52258  00B008  0E00               	movlw	low (__mediumconst shr (0+16))
 52259  00B00A  6EF8               	movwf	tblptru,c
 52260  00B00C  0E0F               	movlw	(high __ramtop+-1)
 52261  00B00E  64F7               	cpfsgt	tblptrh,c
 52262  00B010  D003               	bra	u27357
 52263  00B012  0008               	tblrd		*
 52264  00B014  50F5               	movf	tablat,w,c
 52265  00B016  D005               	bra	u27350
 52266  00B018                     u27357:
 52267  00B018  CFF6 FFE9          	movff	tblptrl,fsr0l
 52268  00B01C  CFF7 FFEA          	movff	tblptrh,fsr0h
 52269  00B020  50EF               	movf	indf0,w,c
 52270  00B022                     u27350:
 52271  00B022  6E23               	movwf	(??_CheckCheckSum+13)^0,c
 52272  00B024  5023               	movf	(??_CheckCheckSum+13)^0,w,c
 52273  00B026  6E10               	movwf	strchr@chr^0,c
 52274  00B028  6A11               	clrf	(strchr@chr+1)^0,c
 52275  00B02A  ECFF  F06E         	call	_strchr	;wreg free
 52276  00B02E  500E               	movf	?_strchr^0,w,c
 52277  00B030  261F               	addwf	(??_CheckCheckSum+9)^0,f,c
 52278  00B032  500F               	movf	(?_strchr+1)^0,w,c
 52279  00B034  2220               	addwfc	(??_CheckCheckSum+10)^0,f,c
 52280  00B036  5018               	movf	(??_CheckCheckSum+2)^0,w,c
 52281  00B038  5E1F               	subwf	(??_CheckCheckSum+9)^0,f,c
 52282  00B03A  5019               	movf	(??_CheckCheckSum+3)^0,w,c
 52283  00B03C  5A20               	subwfb	(??_CheckCheckSum+10)^0,f,c
 52284  00B03E  5016               	movf	??_CheckCheckSum^0,w,c
 52285  00B040  181F               	xorwf	(??_CheckCheckSum+9)^0,w,c
 52286  00B042  E103               	bnz	u27361
 52287  00B044  5017               	movf	(??_CheckCheckSum+1)^0,w,c
 52288  00B046  1820               	xorwf	(??_CheckCheckSum+10)^0,w,c
 52289  00B048  A4D8               	btfss	status,2,c
 52290  00B04A                     u27361:
 52291  00B04A  D76D               	goto	u27300
 52292                           
 52293                           ;main.c: 884: return 0;
 52294  00B04C  0E00               	movlw	0
 52295  00B04E  0012               	return		;funcret
 52296  00B050                     __end_of_CheckCheckSum:
 52297                           	callstack 0
 52298                           
 52299 ;; *************** function _strchr *****************
 52300 ;; Defined at:
 52301 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strchr.c"
 52302 ;; Parameters:    Size  Location     Type
 52303 ;;  ptr             2   13[COMRAM] PTR const unsigned char 
 52304 ;;		 -> HEX(17), Buffer(100), NULL(0), 
 52305 ;;  chr             2   15[COMRAM] int 
 52306 ;; Auto vars:     Size  Location     Type
 52307 ;;		None
 52308 ;; Return value:  Size  Location     Type
 52309 ;;                  2   13[COMRAM] PTR unsigned char 
 52310 ;; Registers used:
 52311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 52312 ;; Tracked objects:
 52313 ;;		On entry : 0/2
 52314 ;;		On exit  : 0/0
 52315 ;;		Unchanged: 0/0
 52316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52317 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52319 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52320 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52321 ;;Total ram usage:        6 bytes
 52322 ;; Hardware stack levels used:    1
 52323 ;; Hardware stack levels required when called:    6
 52324 ;; This function calls:
 52325 ;;		Nothing
 52326 ;; This function is called by:
 52327 ;;		_CheckCheckSum
 52328 ;;		_GPRMCdatacheck
 52329 ;; This function uses a non-reentrant model
 52330 ;;
 52331                           
 52332                           	psect	text252
 52333  00DDFE                     __ptext252:
 52334                           	callstack 0
 52335  00DDFE                     _strchr:
 52336                           	callstack 23
 52337                           
 52338                           ;incstack = 0
 52339  00DDFE  C00E  FFF6         	movff	strchr@ptr,tblptrl
 52340  00DE02  C00F  FFF7         	movff	strchr@ptr+1,tblptrh
 52341  00DE06  0E00               	movlw	low (__mediumconst shr (0+16))
 52342  00DE08  6EF8               	movwf	tblptru,c
 52343  00DE0A  0E0F               	movlw	(high __ramtop+-1)
 52344  00DE0C  64F7               	cpfsgt	tblptrh,c
 52345  00DE0E  D003               	bra	u25947
 52346  00DE10  0008               	tblrd		*
 52347  00DE12  50F5               	movf	tablat,w,c
 52348  00DE14  D005               	bra	u25940
 52349  00DE16                     u25947:
 52350  00DE16  CFF6 FFE9          	movff	tblptrl,fsr0l
 52351  00DE1A  CFF7 FFEA          	movff	tblptrh,fsr0h
 52352  00DE1E  50EF               	movf	indf0,w,c
 52353  00DE20                     u25940:
 52354  00DE20  1810               	xorwf	strchr@chr^0,w,c
 52355  00DE22  A4D8               	btfss	status,2,c
 52356  00DE24  D005               	goto	l23029
 52357  00DE26  C00E  F00E         	movff	strchr@ptr,?_strchr
 52358  00DE2A  C00F  F00F         	movff	strchr@ptr+1,?_strchr+1
 52359  00DE2E  0012               	return	
 52360  00DE30                     l23029:
 52361  00DE30  500E               	movf	strchr@ptr^0,w,c
 52362  00DE32  6E12               	movwf	??_strchr^0,c
 52363  00DE34  500F               	movf	(strchr@ptr+1)^0,w,c
 52364  00DE36  6E13               	movwf	(??_strchr+1)^0,c
 52365  00DE38  4A0E               	infsnz	strchr@ptr^0,f,c
 52366  00DE3A  2A0F               	incf	(strchr@ptr+1)^0,f,c
 52367  00DE3C  C012  FFF6         	movff	??_strchr,tblptrl
 52368  00DE40  C013  FFF7         	movff	??_strchr+1,tblptrh
 52369  00DE44  0E00               	movlw	low (__mediumconst shr (0+16))
 52370  00DE46  6EF8               	movwf	tblptru,c
 52371  00DE48  0E0F               	movlw	(high __ramtop+-1)
 52372  00DE4A  64F7               	cpfsgt	tblptrh,c
 52373  00DE4C  D003               	bra	u25967
 52374  00DE4E  0008               	tblrd		*
 52375  00DE50  50F5               	movf	tablat,w,c
 52376  00DE52  D005               	bra	u25960
 52377  00DE54                     u25967:
 52378  00DE54  CFF6 FFE9          	movff	tblptrl,fsr0l
 52379  00DE58  CFF7 FFEA          	movff	tblptrh,fsr0h
 52380  00DE5C  50EF               	movf	indf0,w,c
 52381  00DE5E                     u25960:
 52382  00DE5E  0900               	iorlw	0
 52383  00DE60  A4D8               	btfss	status,2,c
 52384  00DE62  D7CD               	goto	_strchr
 52385  00DE64  0E00               	movlw	0
 52386  00DE66  6E0E               	movwf	?_strchr^0,c
 52387  00DE68  0E00               	movlw	0
 52388  00DE6A  6E0F               	movwf	(?_strchr+1)^0,c
 52389  00DE6C  0012               	return		;funcret
 52390  00DE6E                     __end_of_strchr:
 52391                           	callstack 0
 52392                           
 52393 ;; *************** function _AlarmInitialize *****************
 52394 ;; Defined at:
 52395 ;;		line 103 in file "AlarmSound.c"
 52396 ;; Parameters:    Size  Location     Type
 52397 ;;		None
 52398 ;; Auto vars:     Size  Location     Type
 52399 ;;		None
 52400 ;; Return value:  Size  Location     Type
 52401 ;;                  1    wreg      void 
 52402 ;; Registers used:
 52403 ;;		wreg, status,2, status,0, cstack
 52404 ;; Tracked objects:
 52405 ;;		On entry : 3F/2
 52406 ;;		On exit  : 0/0
 52407 ;;		Unchanged: 0/0
 52408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52413 ;;Total ram usage:        0 bytes
 52414 ;; Hardware stack levels used:    1
 52415 ;; Hardware stack levels required when called:    8
 52416 ;; This function calls:
 52417 ;;		_AlarmSoundOff
 52418 ;;		_TMR0_SetInterruptHandler
 52419 ;; This function is called by:
 52420 ;;		_main
 52421 ;; This function uses a non-reentrant model
 52422 ;;
 52423                           
 52424                           	psect	text253
 52425  00F5B6                     __ptext253:
 52426                           	callstack 0
 52427  00F5B6                     _AlarmInitialize:
 52428                           	callstack 22
 52429                           
 52430                           ; BSR set to: 2
 52431                           ;AlarmSound.c: 104: AlarmSoundOff();
 52432                           
 52433                           ;incstack = 0
 52434  00F5B6  EC1D  F07B         	call	_AlarmSoundOff	;wreg free
 52435                           
 52436                           ;AlarmSound.c: 105: TMR0_SetInterruptHandler(SoundHandler);
 52437  00F5BA  0E86               	movlw	low _SoundHandler
 52438  00F5BC  6E0E               	movwf	TMR0_SetInterruptHandler@InterruptHandler^0,c
 52439  00F5BE  0ECD               	movlw	high _SoundHandler
 52440  00F5C0  6E0F               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)^0,c
 52441  00F5C2  EC99  F07B         	call	_TMR0_SetInterruptHandler	;wreg free
 52442  00F5C6  0012               	return		;funcret
 52443  00F5C8                     __end_of_AlarmInitialize:
 52444                           	callstack 0
 52445                           
 52446 ;; *************** function _TMR0_SetInterruptHandler *****************
 52447 ;; Defined at:
 52448 ;;		line 164 in file "mcc_generated_files/tmr0.c"
 52449 ;; Parameters:    Size  Location     Type
 52450 ;;  InterruptHan    2   13[COMRAM] PTR FTN()void 
 52451 ;;		 -> SoundHandler(1), TMR0_DefaultInterruptHandler(1), 
 52452 ;; Auto vars:     Size  Location     Type
 52453 ;;		None
 52454 ;; Return value:  Size  Location     Type
 52455 ;;                  1    wreg      void 
 52456 ;; Registers used:
 52457 ;;		wreg, status,2, status,0
 52458 ;; Tracked objects:
 52459 ;;		On entry : 0/F
 52460 ;;		On exit  : 0/0
 52461 ;;		Unchanged: 0/0
 52462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52463 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52466 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52467 ;;Total ram usage:        2 bytes
 52468 ;; Hardware stack levels used:    1
 52469 ;; Hardware stack levels required when called:    6
 52470 ;; This function calls:
 52471 ;;		Nothing
 52472 ;; This function is called by:
 52473 ;;		_TMR0_Initialize
 52474 ;;		_AlarmInitialize
 52475 ;; This function uses a non-reentrant model
 52476 ;;
 52477                           
 52478                           	psect	text254
 52479  00F732                     __ptext254:
 52480                           	callstack 0
 52481  00F732                     _TMR0_SetInterruptHandler:
 52482                           	callstack 22
 52483                           
 52484                           ;tmr0.c: 165: TMR0_InterruptHandler = InterruptHandler;
 52485                           
 52486                           ;incstack = 0
 52487  00F732  C00E  F390         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 52488  00F736  C00F  F391         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 52489  00F73A  0012               	return		;funcret
 52490  00F73C                     __end_of_TMR0_SetInterruptHandler:
 52491                           	callstack 0
 52492                           
 52493 ;; *************** function _AlarmSoundOff *****************
 52494 ;; Defined at:
 52495 ;;		line 96 in file "AlarmSound.c"
 52496 ;; Parameters:    Size  Location     Type
 52497 ;;		None
 52498 ;; Auto vars:     Size  Location     Type
 52499 ;;		None
 52500 ;; Return value:  Size  Location     Type
 52501 ;;                  1    wreg      void 
 52502 ;; Registers used:
 52503 ;;		wreg, status,2, cstack
 52504 ;; Tracked objects:
 52505 ;;		On entry : 0/2
 52506 ;;		On exit  : 0/0
 52507 ;;		Unchanged: 0/0
 52508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52513 ;;Total ram usage:        0 bytes
 52514 ;; Hardware stack levels used:    1
 52515 ;; Hardware stack levels required when called:    7
 52516 ;; This function calls:
 52517 ;;		_TMR0_StopTimer
 52518 ;;		_TMR2_StopTimer
 52519 ;; This function is called by:
 52520 ;;		_NormalProc
 52521 ;;		_DrawSetBox
 52522 ;;		_SlideSWProc
 52523 ;;		_TouchAdjust
 52524 ;;		_main
 52525 ;;		_AlarmInitialize
 52526 ;; This function uses a non-reentrant model
 52527 ;;
 52528                           
 52529                           	psect	text255
 52530  00F63A                     __ptext255:
 52531                           	callstack 0
 52532  00F63A                     _AlarmSoundOff:
 52533                           	callstack 22
 52534                           
 52535                           ;AlarmSound.c: 97: TMR2_StopTimer();
 52536                           
 52537                           ;incstack = 0
 52538  00F63A  EC1B  F07C         	call	_TMR2_StopTimer	;wreg free
 52539                           
 52540                           ;AlarmSound.c: 98: TMR0_StopTimer();
 52541  00F63E  EC1D  F07C         	call	_TMR0_StopTimer	;wreg free
 52542                           
 52543                           ;AlarmSound.c: 99: SoundDataPos = 0;
 52544  00F642  0E00               	movlw	0
 52545  00F644  6E49               	movwf	_SoundDataPos^0,c
 52546  00F646  8693               	bsf	147,3,c	;volatile
 52547  00F648  0012               	return		;funcret
 52548  00F64A                     __end_of_AlarmSoundOff:
 52549                           	callstack 0
 52550                           
 52551 ;; *************** function _TMR2_StopTimer *****************
 52552 ;; Defined at:
 52553 ;;		line 85 in file "mcc_generated_files/tmr2.c"
 52554 ;; Parameters:    Size  Location     Type
 52555 ;;		None
 52556 ;; Auto vars:     Size  Location     Type
 52557 ;;		None
 52558 ;; Return value:  Size  Location     Type
 52559 ;;                  1    wreg      void 
 52560 ;; Registers used:
 52561 ;;		None
 52562 ;; Tracked objects:
 52563 ;;		On entry : 0/2
 52564 ;;		On exit  : 0/0
 52565 ;;		Unchanged: 0/0
 52566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52571 ;;Total ram usage:        0 bytes
 52572 ;; Hardware stack levels used:    1
 52573 ;; Hardware stack levels required when called:    6
 52574 ;; This function calls:
 52575 ;;		Nothing
 52576 ;; This function is called by:
 52577 ;;		_AlarmSoundOff
 52578 ;; This function uses a non-reentrant model
 52579 ;;
 52580                           
 52581                           	psect	text256
 52582  00F836                     __ptext256:
 52583                           	callstack 0
 52584  00F836                     _TMR2_StopTimer:
 52585                           	callstack 22
 52586                           
 52587                           ;tmr2.c: 88: T2CONbits.TMR2ON = 0;
 52588                           
 52589                           ;incstack = 0
 52590  00F836  94BA               	bcf	186,2,c	;volatile
 52591  00F838  0012               	return		;funcret
 52592  00F83A                     __end_of_TMR2_StopTimer:
 52593                           	callstack 0
 52594                           
 52595 ;; *************** function _TMR0_StopTimer *****************
 52596 ;; Defined at:
 52597 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 52598 ;; Parameters:    Size  Location     Type
 52599 ;;		None
 52600 ;; Auto vars:     Size  Location     Type
 52601 ;;		None
 52602 ;; Return value:  Size  Location     Type
 52603 ;;                  1    wreg      void 
 52604 ;; Registers used:
 52605 ;;		None
 52606 ;; Tracked objects:
 52607 ;;		On entry : 0/2
 52608 ;;		On exit  : 0/0
 52609 ;;		Unchanged: 0/0
 52610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52615 ;;Total ram usage:        0 bytes
 52616 ;; Hardware stack levels used:    1
 52617 ;; Hardware stack levels required when called:    6
 52618 ;; This function calls:
 52619 ;;		Nothing
 52620 ;; This function is called by:
 52621 ;;		_AlarmSoundOff
 52622 ;; This function uses a non-reentrant model
 52623 ;;
 52624                           
 52625                           	psect	text257
 52626  00F83A                     __ptext257:
 52627                           	callstack 0
 52628  00F83A                     _TMR0_StopTimer:
 52629                           	callstack 22
 52630                           
 52631                           ;tmr0.c: 106: T0CONbits.TMR0ON = 0;
 52632                           
 52633                           ;incstack = 0
 52634  00F83A  9ED5               	bcf	213,7,c	;volatile
 52635  00F83C  0012               	return		;funcret
 52636  00F83E                     __end_of_TMR0_StopTimer:
 52637                           	callstack 0
 52638                           
 52639 ;; *************** function _INTERRUPT_InterruptManager *****************
 52640 ;; Defined at:
 52641 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 52642 ;; Parameters:    Size  Location     Type
 52643 ;;		None
 52644 ;; Auto vars:     Size  Location     Type
 52645 ;;		None
 52646 ;; Return value:  Size  Location     Type
 52647 ;;                  1    wreg      void 
 52648 ;; Registers used:
 52649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 52650 ;; Tracked objects:
 52651 ;;		On entry : 0/0
 52652 ;;		On exit  : 0/0
 52653 ;;		Unchanged: 0/0
 52654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52657 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52658 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52659 ;;Total ram usage:        6 bytes
 52660 ;; Hardware stack levels used:    1
 52661 ;; Hardware stack levels required when called:    5
 52662 ;; This function calls:
 52663 ;;		Absolute function
 52664 ;;		_EUSART1_Receive_ISR
 52665 ;;		_INT0_ISR
 52666 ;;		_PIN_MANAGER_IOC
 52667 ;;		_TMR0_ISR
 52668 ;;		_TMR1_ISR
 52669 ;;		_TMR5_ISR
 52670 ;; This function is called by:
 52671 ;;		Interrupt level 2
 52672 ;; This function uses a non-reentrant model
 52673 ;;
 52674                           
 52675                           	psect	intcode
 52676  000008                     __pintcode:
 52677                           	callstack 0
 52678  000008                     _INTERRUPT_InterruptManager:
 52679                           	callstack 11
 52680                           
 52681                           ;incstack = 0
 52682  000008  8252               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 52683  00000A  CFFA F008          	movff	pclath,??_INTERRUPT_InterruptManager
 52684  00000E  CFFB F009          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 52685  000012  CFD9 F00A          	movff	fsr2l,??_INTERRUPT_InterruptManager+2
 52686  000016  CFDA F00B          	movff	fsr2h,??_INTERRUPT_InterruptManager+3
 52687  00001A  CFF3 F00C          	movff	prodl,??_INTERRUPT_InterruptManager+4
 52688  00001E  CFF4 F00D          	movff	prodh,??_INTERRUPT_InterruptManager+5
 52689                           
 52690                           ;interrupt_manager.c: 61: if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
 52691  000022  B8F2               	btfsc	242,4,c	;volatile
 52692  000024  A2F2               	btfss	242,1,c	;volatile
 52693  000026  D003               	goto	i2l1411
 52694                           
 52695                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: INT0_ISR();
 52696  000028  ECE0  F07B         	call	_INT0_ISR	;wreg free
 52697                           
 52698                           ;interrupt_manager.c: 64: }
 52699  00002C  D028               	goto	i2l1419
 52700  00002E                     i2l1411:
 52701                           
 52702                           ;interrupt_manager.c: 65: else if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 52703  00002E  B6F2               	btfsc	242,3,c	;volatile
 52704  000030  A0F2               	btfss	242,0,c	;volatile
 52705  000032  D003               	goto	i2l1413
 52706                           
 52707                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: PIN_MANAGER_IOC();
 52708  000034  EC9E  F07B         	call	_PIN_MANAGER_IOC	;wreg free
 52709                           
 52710                           ;interrupt_manager.c: 68: }
 52711  000038  D022               	goto	i2l1419
 52712  00003A                     i2l1413:
 52713                           
 52714                           ;interrupt_manager.c: 69: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 52715  00003A  BAF2               	btfsc	242,5,c	;volatile
 52716  00003C  A4F2               	btfss	242,2,c	;volatile
 52717  00003E  D003               	goto	i2l1415
 52718                           
 52719                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: TMR0_ISR();
 52720  000040  EC2D  F07B         	call	_TMR0_ISR	;wreg free
 52721                           
 52722                           ;interrupt_manager.c: 72: }
 52723  000044  D01C               	goto	i2l1419
 52724  000046                     i2l1415:
 52725                           
 52726                           ;interrupt_manager.c: 73: else if(INTCONbits.PEIE == 1)
 52727  000046  ACF2               	btfss	242,6,c	;volatile
 52728  000048  D01A               	goto	i2l1419
 52729                           
 52730                           ;interrupt_manager.c: 74: {;interrupt_manager.c: 75: if(PIE1bits.RC1IE == 1 && PIR1bits.
      +                          RC1IF == 1)
 52731  00004A  BA9D               	btfsc	157,5,c	;volatile
 52732  00004C  AA9E               	btfss	158,5,c	;volatile
 52733  00004E  D00C               	goto	i2l1418
 52734                           
 52735                           ;interrupt_manager.c: 76: {;interrupt_manager.c: 77: EUSART1_RxDefaultInterruptHandler()
      +                          ;
 52736  000050  D801               	call	i2u1922_48
 52737  000052  D015               	goto	i2l1419
 52738  000054                     i2u1922_48:
 52739  000054  0005               	push	
 52740  000056  6EFA               	movwf	pclath,c
 52741  000058  0103               	movlb	3	; () banked
 52742  00005A  518E               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
 52743  00005C  6EFD               	movwf	tosl,c
 52744  00005E  518F               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
 52745  000060  6EFE               	movwf	tosh,c
 52746  000062  6AFF               	clrf	tosu,c
 52747  000064  50FA               	movf	pclath,w,c
 52748  000066  0012               	return		;indir
 52749  000068                     i2l1418:
 52750                           
 52751                           ;interrupt_manager.c: 79: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 52752  000068  B09D               	btfsc	157,0,c	;volatile
 52753  00006A  A09E               	btfss	158,0,c	;volatile
 52754  00006C  D003               	goto	i2l1420
 52755                           
 52756                           ;interrupt_manager.c: 80: {;interrupt_manager.c: 81: TMR1_ISR();
 52757  00006E  EC80  F077         	call	_TMR1_ISR	;wreg free
 52758                           
 52759                           ;interrupt_manager.c: 82: }
 52760  000072  D005               	goto	i2l1419
 52761  000074                     i2l1420:
 52762                           
 52763                           ;interrupt_manager.c: 83: else if(PIE5bits.TMR5IE == 1 && PIR5bits.TMR5IF == 1)
 52764  000074  B27D               	btfsc	125,1,c	;volatile
 52765  000076  A27E               	btfss	126,1,c	;volatile
 52766  000078  D002               	goto	i2l1419
 52767                           
 52768                           ;interrupt_manager.c: 84: {;interrupt_manager.c: 85: TMR5_ISR();
 52769  00007A  ECAD  F07A         	call	_TMR5_ISR	;wreg free
 52770  00007E                     i2l1419:
 52771                           
 52772                           ;interrupt_manager.c: 90: };interrupt_manager.c: 91: }
 52773  00007E  C00D  FFF4         	movff	??_INTERRUPT_InterruptManager+5,prodh
 52774  000082  C00C  FFF3         	movff	??_INTERRUPT_InterruptManager+4,prodl
 52775  000086  C00B  FFDA         	movff	??_INTERRUPT_InterruptManager+3,fsr2h
 52776  00008A  C00A  FFD9         	movff	??_INTERRUPT_InterruptManager+2,fsr2l
 52777  00008E  C009  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 52778  000092  C008  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 52779  000096  9252               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 52780  000098  0011               	retfie		f
 52781  00009A                     __end_of_INTERRUPT_InterruptManager:
 52782                           	callstack 0
 52783                           
 52784 ;; *************** function _TMR5_ISR *****************
 52785 ;; Defined at:
 52786 ;;		line 158 in file "mcc_generated_files/tmr5.c"
 52787 ;; Parameters:    Size  Location     Type
 52788 ;;		None
 52789 ;; Auto vars:     Size  Location     Type
 52790 ;;		None
 52791 ;; Return value:  Size  Location     Type
 52792 ;;                  1    wreg      void 
 52793 ;; Registers used:
 52794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 52795 ;; Tracked objects:
 52796 ;;		On entry : 0/0
 52797 ;;		On exit  : 0/0
 52798 ;;		Unchanged: 0/0
 52799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52804 ;;Total ram usage:        0 bytes
 52805 ;; Hardware stack levels used:    1
 52806 ;; Hardware stack levels required when called:    3
 52807 ;; This function calls:
 52808 ;;		_TMR5_CallBack
 52809 ;;		_TMR5_WriteTimer
 52810 ;; This function is called by:
 52811 ;;		_INTERRUPT_InterruptManager
 52812 ;; This function uses a non-reentrant model
 52813 ;;
 52814                           
 52815                           	psect	text259
 52816  00F55A                     __ptext259:
 52817                           	callstack 0
 52818  00F55A                     _TMR5_ISR:
 52819                           	callstack 12
 52820                           
 52821                           ;tmr5.c: 162: PIR5bits.TMR5IF = 0;
 52822                           
 52823                           ;incstack = 0
 52824  00F55A  927E               	bcf	126,1,c	;volatile
 52825                           
 52826                           ;tmr5.c: 163: TMR5_WriteTimer(timer5ReloadVal);
 52827  00F55C  C384  F001         	movff	_timer5ReloadVal,TMR5_WriteTimer@timerVal	;volatile
 52828  00F560  C385  F002         	movff	_timer5ReloadVal+1,TMR5_WriteTimer@timerVal+1	;volatile
 52829  00F564  ECF8  F079         	call	_TMR5_WriteTimer	;wreg free
 52830                           
 52831                           ; BSR set to: 15
 52832                           ;tmr5.c: 167: TMR5_CallBack();
 52833  00F568  EC9A  F079         	call	_TMR5_CallBack	;wreg free
 52834  00F56C  0012               	return		;funcret
 52835  00F56E                     __end_of_TMR5_ISR:
 52836                           	callstack 0
 52837                           
 52838 ;; *************** function _TMR5_WriteTimer *****************
 52839 ;; Defined at:
 52840 ;;		line 121 in file "mcc_generated_files/tmr5.c"
 52841 ;; Parameters:    Size  Location     Type
 52842 ;;  timerVal        2    0[COMRAM] unsigned int 
 52843 ;; Auto vars:     Size  Location     Type
 52844 ;;		None
 52845 ;; Return value:  Size  Location     Type
 52846 ;;                  1    wreg      void 
 52847 ;; Registers used:
 52848 ;;		None
 52849 ;; Tracked objects:
 52850 ;;		On entry : 0/0
 52851 ;;		On exit  : 3F/F
 52852 ;;		Unchanged: 0/0
 52853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52854 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52857 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52858 ;;Total ram usage:        2 bytes
 52859 ;; Hardware stack levels used:    1
 52860 ;; This function calls:
 52861 ;;		Nothing
 52862 ;; This function is called by:
 52863 ;;		_TMR5_ISR
 52864 ;; This function uses a non-reentrant model
 52865 ;;
 52866                           
 52867                           	psect	text260
 52868  00F3F0                     __ptext260:
 52869                           	callstack 0
 52870  00F3F0                     _TMR5_WriteTimer:
 52871                           	callstack 14
 52872                           
 52873                           ;tmr5.c: 123: if (T5CONbits.T5SYNC == 1)
 52874                           
 52875                           ;incstack = 0
 52876  00F3F0  010F               	movlb	15	; () banked
 52877  00F3F2  A54E               	btfss	78,2,b	;volatile
 52878  00F3F4  D007               	goto	i2l1699
 52879                           
 52880                           ; BSR set to: 15
 52881                           ;tmr5.c: 124: {;tmr5.c: 126: T5CONbits.TMR5ON = 0;
 52882  00F3F6  914E               	bcf	78,0,b	;volatile
 52883                           
 52884                           ;tmr5.c: 129: TMR5H = (uint8_t)(timerVal >> 8);
 52885  00F3F8  C002  FF50         	movff	TMR5_WriteTimer@timerVal+1,3920	;volatile
 52886                           
 52887                           ;tmr5.c: 130: TMR5L = (uint8_t)timerVal;
 52888  00F3FC  C001  FF4F         	movff	TMR5_WriteTimer@timerVal,3919	;volatile
 52889                           
 52890                           ;tmr5.c: 133: T5CONbits.TMR5ON =1;
 52891  00F400  814E               	bsf	78,0,b	;volatile
 52892                           
 52893                           ;tmr5.c: 134: }
 52894  00F402  0012               	return	
 52895  00F404                     i2l1699:
 52896                           
 52897                           ; BSR set to: 15
 52898                           ;tmr5.c: 135: else;tmr5.c: 136: {;tmr5.c: 138: TMR5H = (uint8_t)(timerVal >> 8);
 52899  00F404  C002  FF50         	movff	TMR5_WriteTimer@timerVal+1,3920	;volatile
 52900                           
 52901                           ;tmr5.c: 139: TMR5L = (uint8_t)timerVal;
 52902  00F408  C001  FF4F         	movff	TMR5_WriteTimer@timerVal,3919	;volatile
 52903                           
 52904                           ; BSR set to: 15
 52905  00F40C  0012               	return		;funcret
 52906  00F40E                     __end_of_TMR5_WriteTimer:
 52907                           	callstack 0
 52908                           
 52909 ;; *************** function _TMR5_CallBack *****************
 52910 ;; Defined at:
 52911 ;;		line 170 in file "mcc_generated_files/tmr5.c"
 52912 ;; Parameters:    Size  Location     Type
 52913 ;;		None
 52914 ;; Auto vars:     Size  Location     Type
 52915 ;;		None
 52916 ;; Return value:  Size  Location     Type
 52917 ;;                  1    wreg      void 
 52918 ;; Registers used:
 52919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 52920 ;; Tracked objects:
 52921 ;;		On entry : 3F/F
 52922 ;;		On exit  : 0/0
 52923 ;;		Unchanged: 0/0
 52924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52929 ;;Total ram usage:        0 bytes
 52930 ;; Hardware stack levels used:    1
 52931 ;; Hardware stack levels required when called:    2
 52932 ;; This function calls:
 52933 ;;		Absolute function
 52934 ;;		_TMR5_DefaultInterruptHandler
 52935 ;;		_Timer5Handler
 52936 ;; This function is called by:
 52937 ;;		_TMR5_ISR
 52938 ;; This function uses a non-reentrant model
 52939 ;;
 52940                           
 52941                           	psect	text261
 52942  00F334                     __ptext261:
 52943                           	callstack 0
 52944  00F334                     _TMR5_CallBack:
 52945                           	callstack 12
 52946                           
 52947                           ; BSR set to: 15
 52948                           ;tmr5.c: 173: if(TMR5_InterruptHandler)
 52949                           
 52950                           ; BSR set to: 15
 52951                           ;incstack = 0
 52952  00F334  0103               	movlb	3	; () banked
 52953  00F336  5182               	movf	_TMR5_InterruptHandler& (0+255),w,b
 52954  00F338  1183               	iorwf	(_TMR5_InterruptHandler+1)& (0+255),w,b
 52955  00F33A  B4D8               	btfsc	status,2,c
 52956  00F33C  0012               	return	
 52957                           
 52958                           ; BSR set to: 3
 52959                           ;tmr5.c: 174: {;tmr5.c: 175: TMR5_InterruptHandler();
 52960  00F33E  D801               	call	i2u1763_48
 52961  00F340  0012               	return	
 52962  00F342                     i2u1763_48:
 52963  00F342  0005               	push	
 52964  00F344  6EFA               	movwf	pclath,c
 52965  00F346  5182               	movf	_TMR5_InterruptHandler& (0+255),w,b
 52966  00F348  6EFD               	movwf	tosl,c
 52967  00F34A  5183               	movf	(_TMR5_InterruptHandler+1)& (0+255),w,b
 52968  00F34C  6EFE               	movwf	tosh,c
 52969  00F34E  6AFF               	clrf	tosu,c
 52970  00F350  50FA               	movf	pclath,w,c
 52971  00F352  0012               	return		;indir
 52972  00F354                     __end_of_TMR5_CallBack:
 52973                           	callstack 0
 52974                           
 52975 ;; *************** function _TMR5_DefaultInterruptHandler *****************
 52976 ;; Defined at:
 52977 ;;		line 183 in file "mcc_generated_files/tmr5.c"
 52978 ;; Parameters:    Size  Location     Type
 52979 ;;		None
 52980 ;; Auto vars:     Size  Location     Type
 52981 ;;		None
 52982 ;; Return value:  Size  Location     Type
 52983 ;;                  1    wreg      void 
 52984 ;; Registers used:
 52985 ;;		None
 52986 ;; Tracked objects:
 52987 ;;		On entry : 3F/3
 52988 ;;		On exit  : 3F/3
 52989 ;;		Unchanged: 3E/0
 52990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 52991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 52995 ;;Total ram usage:        0 bytes
 52996 ;; Hardware stack levels used:    1
 52997 ;; This function calls:
 52998 ;;		Nothing
 52999 ;; This function is called by:
 53000 ;;		_TMR5_Initialize
 53001 ;;		_TMR5_CallBack
 53002 ;; This function uses a non-reentrant model
 53003 ;;
 53004                           
 53005                           	psect	text262
 53006  00F856                     __ptext262:
 53007                           	callstack 0
 53008  00F856                     _TMR5_DefaultInterruptHandler:
 53009                           	callstack 13
 53010                           
 53011                           ; BSR set to: 3
 53012                           
 53013                           ;incstack = 0
 53014  00F856  0012               	return		;funcret
 53015  00F858                     __end_of_TMR5_DefaultInterruptHandler:
 53016                           	callstack 0
 53017                           
 53018 ;; *************** function _Timer5Handler *****************
 53019 ;; Defined at:
 53020 ;;		line 198 in file "main.c"
 53021 ;; Parameters:    Size  Location     Type
 53022 ;;		None
 53023 ;; Auto vars:     Size  Location     Type
 53024 ;;  rxData          1    6[COMRAM] unsigned char 
 53025 ;;  rxStatus        1    5[COMRAM] struct .
 53026 ;; Return value:  Size  Location     Type
 53027 ;;                  1    wreg      void 
 53028 ;; Registers used:
 53029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 53030 ;; Tracked objects:
 53031 ;;		On entry : 3F/3
 53032 ;;		On exit  : 3E/2
 53033 ;;		Unchanged: 0/0
 53034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53037 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53038 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53039 ;;Total ram usage:        6 bytes
 53040 ;; Hardware stack levels used:    1
 53041 ;; Hardware stack levels required when called:    1
 53042 ;; This function calls:
 53043 ;;		_EUSART1_Read
 53044 ;;		_EUSART1_get_last_status
 53045 ;;		_EUSART1_is_rx_ready
 53046 ;; This function is called by:
 53047 ;;		_main
 53048 ;;		_TMR5_CallBack
 53049 ;; This function uses a non-reentrant model
 53050 ;;
 53051                           
 53052                           	psect	text263
 53053  00ADA6                     __ptext263:
 53054                           	callstack 0
 53055  00ADA6                     _Timer5Handler:
 53056                           	callstack 12
 53057                           
 53058                           ; BSR set to: 3
 53059                           ;main.c: 199: static uint8_t touch_status = 0xff;;main.c: 200: static uint8_t slideSW_st
      +                          atus = 0xff;;main.c: 201: static uint8_t G1PPS_status = 0xff;;main.c: 210: touch_status 
      +                          = (unsigned)(touch_status << 1) | PORTAbits.RA4;
 53060                           
 53061                           ; BSR set to: 3
 53062                           ;incstack = 0
 53063  00ADA6  A880               	btfss	128,4,c	;volatile
 53064  00ADA8  D003               	goto	i2u1624_40
 53065  00ADAA  6A02               	clrf	??_Timer5Handler^0,c
 53066  00ADAC  2A02               	incf	??_Timer5Handler^0,f,c
 53067  00ADAE  D001               	goto	i2u1624_48
 53068  00ADB0                     i2u1624_40:
 53069  00ADB0  6A02               	clrf	??_Timer5Handler^0,c
 53070  00ADB2                     i2u1624_48:
 53071  00ADB2  0102               	movlb	2	; () banked
 53072  00ADB4  51F4               	movf	Timer5Handler@touch_status& (0+255),w,b
 53073  00ADB6  25F4               	addwf	Timer5Handler@touch_status& (0+255),w,b
 53074  00ADB8  1002               	iorwf	??_Timer5Handler^0,w,c
 53075  00ADBA  6FF4               	movwf	Timer5Handler@touch_status& (0+255),b
 53076                           
 53077                           ;main.c: 211: if ((touch_status & 0x07) == 0) {
 53078  00ADBC  C2F4  F002         	movff	Timer5Handler@touch_status,??_Timer5Handler
 53079  00ADC0  0E07               	movlw	7
 53080  00ADC2  1602               	andwf	??_Timer5Handler^0,f,c
 53081  00ADC4  A4D8               	btfss	status,2,c
 53082  00ADC6  D011               	goto	i2l16087
 53083                           
 53084                           ; BSR set to: 2
 53085                           ;main.c: 213: TouchCount++;
 53086  00ADC8  0103               	movlb	3	; () banked
 53087  00ADCA  2BA4               	incf	_TouchCount& (0+255),f,b
 53088                           
 53089                           ; BSR set to: 3
 53090                           ;main.c: 214: if (TouchStatus <= 1) TouchStatus = 2;
 53091  00ADCC  0E02               	movlw	2
 53092  00ADCE  604C               	cpfslt	_TouchStatus^0,c
 53093  00ADD0  D002               	goto	i2l16079
 53094                           
 53095                           ; BSR set to: 3
 53096  00ADD2  0E02               	movlw	2
 53097  00ADD4  6E4C               	movwf	_TouchStatus^0,c
 53098  00ADD6                     i2l16079:
 53099                           
 53100                           ; BSR set to: 3
 53101                           ;main.c: 217: if (TouchCount > 200) {
 53102  00ADD6  0EC8               	movlw	200
 53103  00ADD8  65A4               	cpfsgt	_TouchCount& (0+255),b
 53104  00ADDA  D014               	goto	i2l16095
 53105                           
 53106                           ; BSR set to: 3
 53107                           ;main.c: 218: TouchCount = 200;
 53108  00ADDC  0EC8               	movlw	200
 53109  00ADDE  6FA4               	movwf	_TouchCount& (0+255),b
 53110                           
 53111                           ; BSR set to: 3
 53112                           ;main.c: 219: if (TouchStatus < 5) TouchStatus = 5;
 53113  00ADE0  0E05               	movlw	5
 53114  00ADE2  604C               	cpfslt	_TouchStatus^0,c
 53115  00ADE4  D00F               	goto	i2l16095
 53116                           
 53117                           ; BSR set to: 3
 53118  00ADE6  0E05               	movlw	5
 53119  00ADE8  D00C               	goto	L47
 53120  00ADEA                     i2l16087:
 53121                           
 53122                           ; BSR set to: 2
 53123  00ADEA  51F4               	movf	Timer5Handler@touch_status& (0+255),w,b
 53124  00ADEC  0B07               	andlw	7
 53125  00ADEE  0A07               	xorlw	7
 53126  00ADF0  A4D8               	btfss	status,2,c
 53127  00ADF2  D008               	goto	i2l16095
 53128                           
 53129                           ; BSR set to: 2
 53130                           ;main.c: 223: TouchCount = 0;
 53131  00ADF4  0E00               	movlw	0
 53132  00ADF6  0103               	movlb	3	; () banked
 53133  00ADF8  6FA4               	movwf	_TouchCount& (0+255),b
 53134                           
 53135                           ; BSR set to: 3
 53136                           ;main.c: 225: if (TouchStatus > 1) TouchStatus = 0;
 53137  00ADFA  0E01               	movlw	1
 53138  00ADFC  644C               	cpfsgt	_TouchStatus^0,c
 53139  00ADFE  D002               	goto	i2l16095
 53140                           
 53141                           ; BSR set to: 3
 53142  00AE00  0E00               	movlw	0
 53143  00AE02                     L47:
 53144  00AE02  6E4C               	movwf	_TouchStatus^0,c
 53145  00AE04                     i2l16095:
 53146                           
 53147                           ;main.c: 226: };main.c: 233: slideSW_status = (unsigned)(slideSW_status << 1) | PORTAbit
      +                          s.RA7;
 53148  00AE04  AE80               	btfss	128,7,c	;volatile
 53149  00AE06  D003               	goto	i2u1631_40
 53150  00AE08  6A02               	clrf	??_Timer5Handler^0,c
 53151  00AE0A  2A02               	incf	??_Timer5Handler^0,f,c
 53152  00AE0C  D001               	goto	i2u1631_48
 53153  00AE0E                     i2u1631_40:
 53154  00AE0E  6A02               	clrf	??_Timer5Handler^0,c
 53155  00AE10                     i2u1631_48:
 53156  00AE10  0102               	movlb	2	; () banked
 53157  00AE12  51F3               	movf	Timer5Handler@slideSW_status& (0+255),w,b
 53158  00AE14  25F3               	addwf	Timer5Handler@slideSW_status& (0+255),w,b
 53159  00AE16  1002               	iorwf	??_Timer5Handler^0,w,c
 53160  00AE18  6FF3               	movwf	Timer5Handler@slideSW_status& (0+255),b
 53161                           
 53162                           ; BSR set to: 2
 53163                           ;main.c: 234: if ((slideSW_status & 0x07) == 0) {
 53164  00AE1A  C2F3  F002         	movff	Timer5Handler@slideSW_status,??_Timer5Handler
 53165  00AE1E  0E07               	movlw	7
 53166  00AE20  1602               	andwf	??_Timer5Handler^0,f,c
 53167  00AE22  A4D8               	btfss	status,2,c
 53168  00AE24  D005               	goto	i2l16103
 53169                           
 53170                           ; BSR set to: 2
 53171                           ;main.c: 236: if (SlideSWStatus != 1) SlideSWStatus = 0;
 53172  00AE26  0451               	decf	_SlideSWStatus^0,w,c
 53173  00AE28  B4D8               	btfsc	status,2,c
 53174  00AE2A  D00D               	goto	i2l16109
 53175                           
 53176                           ; BSR set to: 2
 53177  00AE2C  0E00               	movlw	0
 53178  00AE2E  D00A               	goto	L48
 53179  00AE30                     i2l16103:
 53180                           
 53181                           ; BSR set to: 2
 53182  00AE30  51F3               	movf	Timer5Handler@slideSW_status& (0+255),w,b
 53183  00AE32  0B07               	andlw	7
 53184  00AE34  0A07               	xorlw	7
 53185  00AE36  A4D8               	btfss	status,2,c
 53186  00AE38  D006               	goto	i2l16109
 53187                           
 53188                           ; BSR set to: 2
 53189                           ;main.c: 239: if (SlideSWStatus != 3) SlideSWStatus = 2;
 53190  00AE3A  0E03               	movlw	3
 53191  00AE3C  1851               	xorwf	_SlideSWStatus^0,w,c
 53192  00AE3E  B4D8               	btfsc	status,2,c
 53193  00AE40  D002               	goto	i2l16109
 53194                           
 53195                           ; BSR set to: 2
 53196  00AE42  0E02               	movlw	2
 53197  00AE44                     L48:
 53198  00AE44  6E51               	movwf	_SlideSWStatus^0,c
 53199  00AE46                     i2l16109:
 53200                           
 53201                           ; BSR set to: 2
 53202                           ;main.c: 240: };main.c: 243: if (Count1PPS < 20) {
 53203  00AE46  0E14               	movlw	20
 53204  00AE48  61E0               	cpfslt	_Count1PPS& (0+255),b
 53205  00AE4A  D01E               	goto	i2l16123
 53206                           
 53207                           ; BSR set to: 2
 53208                           ;main.c: 244: G1PPS_status = (unsigned)(G1PPS_status << 1) | PORTBbits.RB5;
 53209  00AE4C  AA81               	btfss	129,5,c	;volatile
 53210  00AE4E  D003               	goto	i2u1637_40
 53211  00AE50  6A02               	clrf	??_Timer5Handler^0,c
 53212  00AE52  2A02               	incf	??_Timer5Handler^0,f,c
 53213  00AE54  D001               	goto	i2u1637_48
 53214  00AE56                     i2u1637_40:
 53215  00AE56  6A02               	clrf	??_Timer5Handler^0,c
 53216  00AE58                     i2u1637_48:
 53217  00AE58  0103               	movlb	3	; () banked
 53218  00AE5A  51F7               	movf	Timer5Handler@G1PPS_status& (0+255),w,b
 53219  00AE5C  25F7               	addwf	Timer5Handler@G1PPS_status& (0+255),w,b
 53220  00AE5E  1002               	iorwf	??_Timer5Handler^0,w,c
 53221  00AE60  6FF7               	movwf	Timer5Handler@G1PPS_status& (0+255),b
 53222                           
 53223                           ;main.c: 245: if ((G1PPS_status & 0x0f) == 0x08) {
 53224  00AE62  51F7               	movf	Timer5Handler@G1PPS_status& (0+255),w,b
 53225  00AE64  0B0F               	andlw	15
 53226  00AE66  0A08               	xorlw	8
 53227  00AE68  A4D8               	btfss	status,2,c
 53228  00AE6A  D00E               	goto	i2l16123
 53229                           
 53230                           ; BSR set to: 3
 53231                           ;main.c: 247: Count1PPS++;
 53232  00AE6C  0102               	movlb	2	; () banked
 53233  00AE6E  2BE0               	incf	_Count1PPS& (0+255),f,b
 53234                           
 53235                           ; BSR set to: 2
 53236                           ;main.c: 248: if (Count1PPS == 20) {
 53237  00AE70  0E14               	movlw	20
 53238  00AE72  19E0               	xorwf	_Count1PPS& (0+255),w,b
 53239  00AE74  A4D8               	btfss	status,2,c
 53240  00AE76  D008               	goto	i2l16123
 53241                           
 53242                           ; BSR set to: 2
 53243                           ;main.c: 249: GetGPS = 1;
 53244  00AE78  0E01               	movlw	1
 53245  00AE7A  6FDF               	movwf	_GetGPS& (0+255),b
 53246  00AE7C                     i2l16119:
 53247                           
 53248                           ;main.c: 250: BufferP = Buffer;
 53249  00AE7C  0E40               	movlw	low _Buffer
 53250  00AE7E  0103               	movlb	3	; () banked
 53251  00AE80  6F76               	movwf	_BufferP& (0+255),b
 53252  00AE82  0E06               	movlw	high _Buffer
 53253  00AE84  6F77               	movwf	(_BufferP+1)& (0+255),b
 53254  00AE86  0012               	return	
 53255  00AE88                     i2l16123:
 53256                           
 53257                           ;main.c: 252: };main.c: 253: };main.c: 254: };main.c: 261: if (GetGPS == 1) {
 53258  00AE88  0102               	movlb	2	; () banked
 53259  00AE8A  05DF               	decf	_GetGPS& (0+255),w,b
 53260  00AE8C  A4D8               	btfss	status,2,c
 53261  00AE8E  0012               	return	
 53262  00AE90  D032               	goto	i2l16153
 53263  00AE92                     i2l16127:
 53264                           
 53265                           ; BSR set to: 2
 53266                           ;main.c: 267: rxData = EUSART1_Read();
 53267  00AE92  EC63  F075         	call	_EUSART1_Read	;wreg free
 53268  00AE96  6E07               	movwf	Timer5Handler@rxData^0,c
 53269                           
 53270                           ; BSR set to: 2
 53271                           ;main.c: 268: rxStatus = EUSART1_get_last_status();
 53272  00AE98  ECF0  F07B         	call	_EUSART1_get_last_status	;wreg free
 53273  00AE9C  6E06               	movwf	Timer5Handler@rxStatus^0,c
 53274                           
 53275                           ; BSR set to: 3
 53276                           ;main.c: 269: if (rxStatus.ferr) return;
 53277  00AE9E  B206               	btfsc	Timer5Handler@rxStatus^0,1,c
 53278  00AEA0  0012               	return	
 53279                           
 53280                           ; BSR set to: 3
 53281                           ;main.c: 270: *BufferP = rxData;
 53282  00AEA2  C376  FFD9         	movff	_BufferP,fsr2l
 53283  00AEA6  C377  FFDA         	movff	_BufferP+1,fsr2h
 53284  00AEAA  C007  FFDF         	movff	Timer5Handler@rxData,indf2
 53285                           
 53286                           ; BSR set to: 3
 53287                           ;main.c: 271: BufferP++;
 53288  00AEAE  4B76               	infsnz	_BufferP& (0+255),f,b
 53289  00AEB0  2B77               	incf	(_BufferP+1)& (0+255),f,b
 53290                           
 53291                           ; BSR set to: 3
 53292                           ;main.c: 272: if (BufferP - Buffer > 95) {
 53293  00AEB2  0E40               	movlw	low _Buffer
 53294  00AEB4  6E02               	movwf	??_Timer5Handler^0,c
 53295  00AEB6  0E06               	movlw	high _Buffer
 53296  00AEB8  6E03               	movwf	(??_Timer5Handler+1)^0,c
 53297  00AEBA  C376  F004         	movff	_BufferP,??_Timer5Handler+2
 53298  00AEBE  C377  F005         	movff	_BufferP+1,??_Timer5Handler+3
 53299  00AEC2  5002               	movf	??_Timer5Handler^0,w,c
 53300  00AEC4  5E04               	subwf	(??_Timer5Handler+2)^0,f,c
 53301  00AEC6  5003               	movf	(??_Timer5Handler+1)^0,w,c
 53302  00AEC8  5A05               	subwfb	(??_Timer5Handler+3)^0,f,c
 53303  00AECA  BE05               	btfsc	(??_Timer5Handler+3)^0,7,c
 53304  00AECC  D006               	goto	i2l16145
 53305  00AECE  5005               	movf	(??_Timer5Handler+3)^0,w,c
 53306  00AED0  E1D5               	bnz	i2l16119
 53307  00AED2  0E60               	movlw	96
 53308  00AED4  5C04               	subwf	(??_Timer5Handler+2)^0,w,c
 53309  00AED6  B0D8               	btfsc	status,0,c
 53310  00AED8  D7D1               	goto	i2l16119
 53311  00AEDA                     i2l16145:
 53312                           
 53313                           ; BSR set to: 3
 53314                           ;main.c: 275: };main.c: 276: if (rxData == 0x0a) {
 53315  00AEDA  0E0A               	movlw	10
 53316  00AEDC  1807               	xorwf	Timer5Handler@rxData^0,w,c
 53317  00AEDE  A4D8               	btfss	status,2,c
 53318  00AEE0  D00A               	goto	i2l16153
 53319                           
 53320                           ; BSR set to: 3
 53321                           ;main.c: 278: *BufferP = '\0';
 53322  00AEE2  C376  FFD9         	movff	_BufferP,fsr2l
 53323  00AEE6  C377  FFDA         	movff	_BufferP+1,fsr2h
 53324  00AEEA  0E00               	movlw	0
 53325  00AEEC  6EDF               	movwf	indf2,c
 53326                           
 53327                           ; BSR set to: 3
 53328                           ;main.c: 279: GetGPS = 2;
 53329  00AEEE  0E02               	movlw	2
 53330  00AEF0  0102               	movlb	2	; () banked
 53331  00AEF2  6FDF               	movwf	_GetGPS& (0+255),b
 53332  00AEF4  0012               	return	
 53333  00AEF6                     i2l16153:
 53334  00AEF6  EC25  F07B         	call	_EUSART1_is_rx_ready	;wreg free
 53335  00AEFA  0900               	iorlw	0
 53336  00AEFC  B4D8               	btfsc	status,2,c
 53337  00AEFE  0012               	return	
 53338  00AF00  D7C8               	goto	i2l16127
 53339  00AF02                     __end_of_Timer5Handler:
 53340                           	callstack 0
 53341                           
 53342 ;; *************** function _EUSART1_is_rx_ready *****************
 53343 ;; Defined at:
 53344 ;;		line 126 in file "mcc_generated_files/eusart1.c"
 53345 ;; Parameters:    Size  Location     Type
 53346 ;;		None
 53347 ;; Auto vars:     Size  Location     Type
 53348 ;;		None
 53349 ;; Return value:  Size  Location     Type
 53350 ;;                  1    wreg      unsigned char 
 53351 ;; Registers used:
 53352 ;;		wreg, status,2
 53353 ;; Tracked objects:
 53354 ;;		On entry : 3E/2
 53355 ;;		On exit  : 3F/2
 53356 ;;		Unchanged: 0/0
 53357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53362 ;;Total ram usage:        0 bytes
 53363 ;; Hardware stack levels used:    1
 53364 ;; This function calls:
 53365 ;;		Nothing
 53366 ;; This function is called by:
 53367 ;;		_Timer5Handler
 53368 ;; This function uses a non-reentrant model
 53369 ;;
 53370                           
 53371                           	psect	text264
 53372  00F64A                     __ptext264:
 53373                           	callstack 0
 53374  00F64A                     _EUSART1_is_rx_ready:
 53375                           	callstack 12
 53376                           
 53377                           ;eusart1.c: 128: return (eusart1RxCount ? 1 : 0);
 53378                           
 53379                           ;incstack = 0
 53380  00F64A  0102               	movlb	2	; () banked
 53381  00F64C  51E4               	movf	_eusart1RxCount& (0+255),w,b	;volatile
 53382  00F64E  B4D8               	btfsc	status,2,c
 53383  00F650  D002               	goto	i2u1513_40
 53384  00F652  0E01               	movlw	1
 53385  00F654  0012               	return	
 53386  00F656                     i2u1513_40:
 53387  00F656  0E00               	movlw	0
 53388                           
 53389                           ; BSR set to: 2
 53390  00F658  0012               	return		;funcret
 53391  00F65A                     __end_of_EUSART1_is_rx_ready:
 53392                           	callstack 0
 53393                           
 53394 ;; *************** function _EUSART1_get_last_status *****************
 53395 ;; Defined at:
 53396 ;;		line 136 in file "mcc_generated_files/eusart1.c"
 53397 ;; Parameters:    Size  Location     Type
 53398 ;;		None
 53399 ;; Auto vars:     Size  Location     Type
 53400 ;;		None
 53401 ;; Return value:  Size  Location     Type
 53402 ;;                  1    wreg      struct .
 53403 ;; Registers used:
 53404 ;;		wreg, status,2
 53405 ;; Tracked objects:
 53406 ;;		On entry : 3F/2
 53407 ;;		On exit  : 3F/3
 53408 ;;		Unchanged: 0/0
 53409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53414 ;;Total ram usage:        0 bytes
 53415 ;; Hardware stack levels used:    1
 53416 ;; This function calls:
 53417 ;;		Nothing
 53418 ;; This function is called by:
 53419 ;;		_Timer5Handler
 53420 ;; This function uses a non-reentrant model
 53421 ;;
 53422                           
 53423                           	psect	text265
 53424  00F7E0                     __ptext265:
 53425                           	callstack 0
 53426  00F7E0                     _EUSART1_get_last_status:
 53427                           	callstack 12
 53428                           
 53429                           ; BSR set to: 2
 53430                           ;eusart1.c: 137: return eusart1RxLastError;
 53431                           
 53432                           ; BSR set to: 2
 53433                           ;incstack = 0
 53434  00F7E0  0103               	movlb	3	; () banked
 53435  00F7E2  51A6               	movf	_eusart1RxLastError& (0+255),w,b	;volatile
 53436                           
 53437                           ; BSR set to: 3
 53438  00F7E4  0012               	return		;funcret
 53439  00F7E6                     __end_of_EUSART1_get_last_status:
 53440                           	callstack 0
 53441                           
 53442 ;; *************** function _EUSART1_Read *****************
 53443 ;; Defined at:
 53444 ;;		line 140 in file "mcc_generated_files/eusart1.c"
 53445 ;; Parameters:    Size  Location     Type
 53446 ;;		None
 53447 ;; Auto vars:     Size  Location     Type
 53448 ;;  readValue       1    0[COMRAM] unsigned char 
 53449 ;; Return value:  Size  Location     Type
 53450 ;;                  1    wreg      unsigned char 
 53451 ;; Registers used:
 53452 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 53453 ;; Tracked objects:
 53454 ;;		On entry : 3E/2
 53455 ;;		On exit  : 3F/2
 53456 ;;		Unchanged: 0/0
 53457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53462 ;;Total ram usage:        1 bytes
 53463 ;; Hardware stack levels used:    1
 53464 ;; This function calls:
 53465 ;;		Nothing
 53466 ;; This function is called by:
 53467 ;;		_Timer5Handler
 53468 ;; This function uses a non-reentrant model
 53469 ;;
 53470                           
 53471                           	psect	text266
 53472  00EAC6                     __ptext266:
 53473                           	callstack 0
 53474  00EAC6                     _EUSART1_Read:
 53475                           	callstack 12
 53476                           
 53477                           ;eusart1.c: 144: while(0 == eusart1RxCount)
 53478                           
 53479                           ; BSR set to: 3
 53480                           ;incstack = 0
 53481  00EAC6  0102               	movlb	2	; () banked
 53482  00EAC8  51E4               	movf	_eusart1RxCount& (0+255),w,b	;volatile
 53483  00EACA  B4D8               	btfsc	status,2,c
 53484  00EACC  D7FC               	goto	_EUSART1_Read
 53485                           
 53486                           ; BSR set to: 2
 53487                           ;eusart1.c: 146: };eusart1.c: 148: eusart1RxLastError = eusart1RxStatusBuffer[eusart1RxT
      +                          ail];
 53488  00EACE  0E00               	movlw	low _eusart1RxStatusBuffer
 53489  00EAD0  244A               	addwf	_eusart1RxTail^0,w,c	;volatile
 53490  00EAD2  6ED9               	movwf	fsr2l,c
 53491  00EAD4  6ADA               	clrf	fsr2h,c
 53492  00EAD6  0E06               	movlw	high _eusart1RxStatusBuffer
 53493  00EAD8  22DA               	addwfc	fsr2h,f,c
 53494  00EADA  50DF               	movf	indf2,w,c
 53495  00EADC  0103               	movlb	3	; () banked
 53496  00EADE  6FA6               	movwf	_eusart1RxLastError& (0+255),b	;volatile
 53497                           
 53498                           ;eusart1.c: 150: readValue = eusart1RxBuffer[eusart1RxTail++];
 53499  00EAE0  0E00               	movlw	low _eusart1RxBuffer
 53500  00EAE2  244A               	addwf	_eusart1RxTail^0,w,c	;volatile
 53501  00EAE4  6ED9               	movwf	fsr2l,c
 53502  00EAE6  6ADA               	clrf	fsr2h,c
 53503  00EAE8  0E07               	movlw	high _eusart1RxBuffer
 53504  00EAEA  22DA               	addwfc	fsr2h,f,c
 53505  00EAEC  50DF               	movf	indf2,w,c
 53506  00EAEE  6E01               	movwf	EUSART1_Read@readValue^0,c
 53507                           
 53508                           ; BSR set to: 3
 53509  00EAF0  2A4A               	incf	_eusart1RxTail^0,f,c	;volatile
 53510                           
 53511                           ; BSR set to: 3
 53512                           ;eusart1.c: 151: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
 53513  00EAF2  0E3F               	movlw	63
 53514  00EAF4  644A               	cpfsgt	_eusart1RxTail^0,c
 53515  00EAF6  D002               	goto	i2l15245
 53516                           
 53517                           ; BSR set to: 3
 53518                           ;eusart1.c: 152: {;eusart1.c: 153: eusart1RxTail = 0;
 53519  00EAF8  0E00               	movlw	0
 53520  00EAFA  6E4A               	movwf	_eusart1RxTail^0,c	;volatile
 53521  00EAFC                     i2l15245:
 53522                           
 53523                           ; BSR set to: 3
 53524                           ;eusart1.c: 154: };eusart1.c: 155: PIE1bits.RC1IE = 0;
 53525  00EAFC  9A9D               	bcf	157,5,c	;volatile
 53526                           
 53527                           ; BSR set to: 3
 53528                           ;eusart1.c: 156: eusart1RxCount--;
 53529  00EAFE  0102               	movlb	2	; () banked
 53530  00EB00  07E4               	decf	_eusart1RxCount& (0+255),f,b	;volatile
 53531                           
 53532                           ; BSR set to: 2
 53533                           ;eusart1.c: 157: PIE1bits.RC1IE = 1;
 53534  00EB02  8A9D               	bsf	157,5,c	;volatile
 53535                           
 53536                           ; BSR set to: 2
 53537                           ;eusart1.c: 159: return readValue;
 53538  00EB04  5001               	movf	EUSART1_Read@readValue^0,w,c
 53539                           
 53540                           ; BSR set to: 2
 53541  00EB06  0012               	return		;funcret
 53542  00EB08                     __end_of_EUSART1_Read:
 53543                           	callstack 0
 53544                           
 53545 ;; *************** function _TMR1_ISR *****************
 53546 ;; Defined at:
 53547 ;;		line 158 in file "mcc_generated_files/tmr1.c"
 53548 ;; Parameters:    Size  Location     Type
 53549 ;;		None
 53550 ;; Auto vars:     Size  Location     Type
 53551 ;;		None
 53552 ;; Return value:  Size  Location     Type
 53553 ;;                  1    wreg      void 
 53554 ;; Registers used:
 53555 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 53556 ;; Tracked objects:
 53557 ;;		On entry : 0/0
 53558 ;;		On exit  : 0/0
 53559 ;;		Unchanged: 0/0
 53560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53565 ;;Total ram usage:        0 bytes
 53566 ;; Hardware stack levels used:    1
 53567 ;; Hardware stack levels required when called:    1
 53568 ;; This function calls:
 53569 ;;		Absolute function
 53570 ;;		_RotaryHandler
 53571 ;;		_TMR1_DefaultInterruptHandler
 53572 ;;		_TMR1_WriteTimer
 53573 ;; This function is called by:
 53574 ;;		_INTERRUPT_InterruptManager
 53575 ;; This function uses a non-reentrant model
 53576 ;;
 53577                           
 53578                           	psect	text267
 53579  00EF00                     __ptext267:
 53580                           	callstack 0
 53581  00EF00                     _TMR1_ISR:
 53582                           	callstack 14
 53583                           
 53584                           ;tmr1.c: 162: PIR1bits.TMR1IF = 0;
 53585                           
 53586                           ; BSR set to: 2
 53587                           ;incstack = 0
 53588  00EF00  909E               	bcf	158,0,c	;volatile
 53589                           
 53590                           ;tmr1.c: 163: TMR1_WriteTimer(timer1ReloadVal);
 53591  00EF02  C37E  F001         	movff	_timer1ReloadVal,TMR1_WriteTimer@timerVal	;volatile
 53592  00EF06  C37F  F002         	movff	_timer1ReloadVal+1,TMR1_WriteTimer@timerVal+1	;volatile
 53593  00EF0A  EC23  F07A         	call	_TMR1_WriteTimer	;wreg free
 53594                           
 53595                           ;tmr1.c: 165: if(TMR1_InterruptHandler)
 53596  00EF0E  0103               	movlb	3	; () banked
 53597  00EF10  517C               	movf	_TMR1_InterruptHandler& (0+255),w,b
 53598  00EF12  117D               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 53599  00EF14  B4D8               	btfsc	status,2,c
 53600  00EF16  0012               	return	
 53601                           
 53602                           ; BSR set to: 3
 53603                           ;tmr1.c: 166: {;tmr1.c: 167: TMR1_InterruptHandler();
 53604  00EF18  D801               	call	i2u1827_48
 53605  00EF1A  0012               	return	
 53606  00EF1C                     i2u1827_48:
 53607  00EF1C  0005               	push	
 53608  00EF1E  6EFA               	movwf	pclath,c
 53609  00EF20  517C               	movf	_TMR1_InterruptHandler& (0+255),w,b
 53610  00EF22  6EFD               	movwf	tosl,c
 53611  00EF24  517D               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 53612  00EF26  6EFE               	movwf	tosh,c
 53613  00EF28  6AFF               	clrf	tosu,c
 53614  00EF2A  50FA               	movf	pclath,w,c
 53615  00EF2C  0012               	return		;indir
 53616  00EF2E                     __end_of_TMR1_ISR:
 53617                           	callstack 0
 53618                           
 53619 ;; *************** function _TMR1_WriteTimer *****************
 53620 ;; Defined at:
 53621 ;;		line 121 in file "mcc_generated_files/tmr1.c"
 53622 ;; Parameters:    Size  Location     Type
 53623 ;;  timerVal        2    0[COMRAM] unsigned int 
 53624 ;; Auto vars:     Size  Location     Type
 53625 ;;		None
 53626 ;; Return value:  Size  Location     Type
 53627 ;;                  1    wreg      void 
 53628 ;; Registers used:
 53629 ;;		None
 53630 ;; Tracked objects:
 53631 ;;		On entry : 0/0
 53632 ;;		On exit  : 0/0
 53633 ;;		Unchanged: 0/0
 53634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53635 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53638 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53639 ;;Total ram usage:        2 bytes
 53640 ;; Hardware stack levels used:    1
 53641 ;; This function calls:
 53642 ;;		Nothing
 53643 ;; This function is called by:
 53644 ;;		_TMR1_ISR
 53645 ;; This function uses a non-reentrant model
 53646 ;;
 53647                           
 53648                           	psect	text268
 53649  00F446                     __ptext268:
 53650                           	callstack 0
 53651  00F446                     _TMR1_WriteTimer:
 53652                           	callstack 14
 53653                           
 53654                           ;tmr1.c: 123: if (T1CONbits.T1SYNC == 1)
 53655                           
 53656                           ;incstack = 0
 53657  00F446  A4CD               	btfss	205,2,c	;volatile
 53658  00F448  D007               	goto	i2l1811
 53659                           
 53660                           ;tmr1.c: 124: {;tmr1.c: 126: T1CONbits.TMR1ON = 0;
 53661  00F44A  90CD               	bcf	205,0,c	;volatile
 53662                           
 53663                           ;tmr1.c: 129: TMR1H = (uint8_t)(timerVal >> 8);
 53664  00F44C  C002  FFCF         	movff	TMR1_WriteTimer@timerVal+1,4047	;volatile
 53665                           
 53666                           ;tmr1.c: 130: TMR1L = (uint8_t)timerVal;
 53667  00F450  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 53668                           
 53669                           ;tmr1.c: 133: T1CONbits.TMR1ON =1;
 53670  00F454  80CD               	bsf	205,0,c	;volatile
 53671                           
 53672                           ;tmr1.c: 134: }
 53673  00F456  0012               	return	
 53674  00F458                     i2l1811:
 53675                           
 53676                           ;tmr1.c: 135: else;tmr1.c: 136: {;tmr1.c: 138: TMR1H = (uint8_t)(timerVal >> 8);
 53677  00F458  C002  FFCF         	movff	TMR1_WriteTimer@timerVal+1,4047	;volatile
 53678                           
 53679                           ;tmr1.c: 139: TMR1L = (uint8_t)timerVal;
 53680  00F45C  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 53681  00F460  0012               	return		;funcret
 53682  00F462                     __end_of_TMR1_WriteTimer:
 53683                           	callstack 0
 53684                           
 53685 ;; *************** function _RotaryHandler *****************
 53686 ;; Defined at:
 53687 ;;		line 313 in file "main.c"
 53688 ;; Parameters:    Size  Location     Type
 53689 ;;		None
 53690 ;; Auto vars:     Size  Location     Type
 53691 ;;  newBdata        1    1[COMRAM] unsigned char 
 53692 ;; Return value:  Size  Location     Type
 53693 ;;                  1    wreg      void 
 53694 ;; Registers used:
 53695 ;;		wreg, status,2, status,0
 53696 ;; Tracked objects:
 53697 ;;		On entry : 3F/3
 53698 ;;		On exit  : 3E/2
 53699 ;;		Unchanged: 0/0
 53700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53705 ;;Total ram usage:        2 bytes
 53706 ;; Hardware stack levels used:    1
 53707 ;; This function calls:
 53708 ;;		Nothing
 53709 ;; This function is called by:
 53710 ;;		_main
 53711 ;;		_TMR1_ISR
 53712 ;; This function uses a non-reentrant model
 53713 ;;
 53714                           
 53715                           	psect	text269
 53716  00D894                     __ptext269:
 53717                           	callstack 0
 53718  00D894                     _RotaryHandler:
 53719                           	callstack 14
 53720                           
 53721                           ; BSR set to: 3
 53722                           ;main.c: 314: static uint8_t StartRot = 0;;main.c: 315: static int8_t Bdata = 0;;main.c:
      +                           316: static uint8_t RotA_status = 0xff;;main.c: 317: uint8_t newBdata;;main.c: 320: Rot
      +                          A_status = (unsigned)(RotA_status << 1) | PORTCbits.RC1;
 53723                           
 53724                           ;incstack = 0
 53725  00D894  A282               	btfss	130,1,c	;volatile
 53726  00D896  D003               	goto	i2u1766_40
 53727  00D898  6A01               	clrf	??_RotaryHandler^0,c
 53728  00D89A  2A01               	incf	??_RotaryHandler^0,f,c
 53729  00D89C  D001               	goto	i2u1766_48
 53730  00D89E                     i2u1766_40:
 53731  00D89E  6A01               	clrf	??_RotaryHandler^0,c
 53732  00D8A0                     i2u1766_48:
 53733  00D8A0  0102               	movlb	2	; () banked
 53734  00D8A2  51F2               	movf	RotaryHandler@RotA_status& (0+255),w,b
 53735  00D8A4  25F2               	addwf	RotaryHandler@RotA_status& (0+255),w,b
 53736  00D8A6  1001               	iorwf	??_RotaryHandler^0,w,c
 53737  00D8A8  6FF2               	movwf	RotaryHandler@RotA_status& (0+255),b
 53738                           
 53739                           ; BSR set to: 2
 53740                           ;main.c: 322: if ((StartRot == 0) && (RotA_status & 0x07) == 0) {
 53741  00D8AA  0103               	movlb	3	; () banked
 53742  00D8AC  519F               	movf	RotaryHandler@StartRot& (0+255),w,b
 53743  00D8AE  A4D8               	btfss	status,2,c
 53744  00D8B0  D00D               	goto	i2l16997
 53745                           
 53746                           ; BSR set to: 3
 53747  00D8B2  C2F2  F001         	movff	RotaryHandler@RotA_status,??_RotaryHandler
 53748  00D8B6  0E07               	movlw	7
 53749  00D8B8  1601               	andwf	??_RotaryHandler^0,f,c
 53750  00D8BA  A4D8               	btfss	status,2,c
 53751  00D8BC  D007               	goto	i2l16997
 53752                           
 53753                           ; BSR set to: 3
 53754                           ;main.c: 324: StartRot = 1;
 53755  00D8BE  0E01               	movlw	1
 53756  00D8C0  6F9F               	movwf	RotaryHandler@StartRot& (0+255),b
 53757                           
 53758                           ; BSR set to: 3
 53759                           ;main.c: 326: Bdata = PORTCbits.RC0;
 53760  00D8C2  0E00               	movlw	0
 53761  00D8C4  B082               	btfsc	130,0,c	;volatile
 53762  00D8C6  0E01               	movlw	1
 53763  00D8C8  6F9E               	movwf	RotaryHandler@Bdata& (0+255),b
 53764                           
 53765                           ;main.c: 327: } else if ((StartRot == 1) && ((RotA_status & 0x07) == 0x07)) {
 53766  00D8CA  0012               	return	
 53767  00D8CC                     i2l16997:
 53768                           
 53769                           ; BSR set to: 3
 53770  00D8CC  059F               	decf	RotaryHandler@StartRot& (0+255),w,b
 53771  00D8CE  A4D8               	btfss	status,2,c
 53772  00D8D0  0012               	return	
 53773                           
 53774                           ; BSR set to: 3
 53775  00D8D2  0102               	movlb	2	; () banked
 53776  00D8D4  51F2               	movf	RotaryHandler@RotA_status& (0+255),w,b
 53777  00D8D6  0B07               	andlw	7
 53778  00D8D8  0A07               	xorlw	7
 53779  00D8DA  A4D8               	btfss	status,2,c
 53780  00D8DC  0012               	return	
 53781                           
 53782                           ; BSR set to: 2
 53783                           ;main.c: 329: newBdata = PORTCbits.RC0;
 53784  00D8DE  0E00               	movlw	0
 53785  00D8E0  B082               	btfsc	130,0,c	;volatile
 53786  00D8E2  0E01               	movlw	1
 53787  00D8E4  6E02               	movwf	RotaryHandler@newBdata^0,c
 53788                           
 53789                           ; BSR set to: 2
 53790                           ;main.c: 331: if (Bdata < newBdata) {
 53791  00D8E6  5002               	movf	RotaryHandler@newBdata^0,w,c
 53792  00D8E8  90D8               	bcf	status,0,c
 53793  00D8EA  0103               	movlb	3	; () banked
 53794  00D8EC  AF9E               	btfss	RotaryHandler@Bdata& (0+255),7,b
 53795  00D8EE  5D9E               	subwf	RotaryHandler@Bdata& (0+255),w,b
 53796  00D8F0  B0D8               	btfsc	status,0,c
 53797  00D8F2  80D8               	bsf	status,0,c
 53798  00D8F4  B0D8               	btfsc	status,0,c
 53799  00D8F6  D003               	goto	i2l17007
 53800                           
 53801                           ; BSR set to: 3
 53802                           ;main.c: 333: RotCount--;
 53803  00D8F8  0102               	movlb	2	; () banked
 53804  00D8FA  07E1               	decf	_RotCount& (0+255),f,b
 53805                           
 53806                           ;main.c: 334: } else if (Bdata > newBdata) {
 53807  00D8FC  D00B               	goto	i2l17011
 53808  00D8FE                     i2l17007:
 53809                           
 53810                           ; BSR set to: 3
 53811  00D8FE  5002               	movf	RotaryHandler@newBdata^0,w,c
 53812  00D900  80D8               	bsf	status,0,c
 53813  00D902  84D8               	bsf	status,2,c
 53814  00D904  AF9E               	btfss	RotaryHandler@Bdata& (0+255),7,b
 53815  00D906  5D9E               	subwf	RotaryHandler@Bdata& (0+255),w,b
 53816  00D908  A0D8               	btfss	status,0,c
 53817  00D90A  84D8               	bsf	status,2,c
 53818  00D90C  B4D8               	btfsc	status,2,c
 53819  00D90E  D002               	goto	i2l17011
 53820                           
 53821                           ; BSR set to: 3
 53822                           ;main.c: 336: RotCount++;
 53823  00D910  0102               	movlb	2	; () banked
 53824  00D912  2BE1               	incf	_RotCount& (0+255),f,b
 53825  00D914                     i2l17011:
 53826                           
 53827                           ;main.c: 337: };main.c: 339: StartRot = 0;
 53828  00D914  0E00               	movlw	0
 53829  00D916  0103               	movlb	3	; () banked
 53830  00D918  6F9F               	movwf	RotaryHandler@StartRot& (0+255),b
 53831  00D91A  0012               	return		;funcret
 53832  00D91C                     __end_of_RotaryHandler:
 53833                           	callstack 0
 53834                           
 53835 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 53836 ;; Defined at:
 53837 ;;		line 176 in file "mcc_generated_files/tmr1.c"
 53838 ;; Parameters:    Size  Location     Type
 53839 ;;		None
 53840 ;; Auto vars:     Size  Location     Type
 53841 ;;		None
 53842 ;; Return value:  Size  Location     Type
 53843 ;;                  1    wreg      void 
 53844 ;; Registers used:
 53845 ;;		None
 53846 ;; Tracked objects:
 53847 ;;		On entry : 3F/3
 53848 ;;		On exit  : 3F/3
 53849 ;;		Unchanged: 3E/0
 53850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53855 ;;Total ram usage:        0 bytes
 53856 ;; Hardware stack levels used:    1
 53857 ;; This function calls:
 53858 ;;		Nothing
 53859 ;; This function is called by:
 53860 ;;		_TMR1_Initialize
 53861 ;;		_TMR1_ISR
 53862 ;; This function uses a non-reentrant model
 53863 ;;
 53864                           
 53865                           	psect	text270
 53866  00F858                     __ptext270:
 53867                           	callstack 0
 53868  00F858                     _TMR1_DefaultInterruptHandler:
 53869                           	callstack 14
 53870                           
 53871                           ; BSR set to: 3
 53872                           
 53873                           ;incstack = 0
 53874  00F858  0012               	return		;funcret
 53875  00F85A                     __end_of_TMR1_DefaultInterruptHandler:
 53876                           	callstack 0
 53877                           
 53878 ;; *************** function _TMR0_ISR *****************
 53879 ;; Defined at:
 53880 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 53881 ;; Parameters:    Size  Location     Type
 53882 ;;		None
 53883 ;; Auto vars:     Size  Location     Type
 53884 ;;		None
 53885 ;; Return value:  Size  Location     Type
 53886 ;;                  1    wreg      void 
 53887 ;; Registers used:
 53888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 53889 ;; Tracked objects:
 53890 ;;		On entry : 0/0
 53891 ;;		On exit  : 0/0
 53892 ;;		Unchanged: 0/0
 53893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53898 ;;Total ram usage:        0 bytes
 53899 ;; Hardware stack levels used:    1
 53900 ;; Hardware stack levels required when called:    4
 53901 ;; This function calls:
 53902 ;;		_TMR0_CallBack
 53903 ;; This function is called by:
 53904 ;;		_INTERRUPT_InterruptManager
 53905 ;; This function uses a non-reentrant model
 53906 ;;
 53907                           
 53908                           	psect	text271
 53909  00F65A                     __ptext271:
 53910                           	callstack 0
 53911  00F65A                     _TMR0_ISR:
 53912                           	callstack 11
 53913                           
 53914                           ;tmr0.c: 140: INTCONbits.TMR0IF = 0;
 53915                           
 53916                           ; BSR set to: 3
 53917                           ;incstack = 0
 53918  00F65A  94F2               	bcf	242,2,c	;volatile
 53919                           
 53920                           ;tmr0.c: 144: TMR0H = timer0ReloadVal >> 8;
 53921  00F65C  C047  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 53922                           
 53923                           ;tmr0.c: 145: TMR0L = (uint8_t) timer0ReloadVal;
 53924  00F660  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 53925                           
 53926                           ;tmr0.c: 149: TMR0_CallBack();
 53927  00F664  ECAA  F079         	call	_TMR0_CallBack	;wreg free
 53928  00F668  0012               	return		;funcret
 53929  00F66A                     __end_of_TMR0_ISR:
 53930                           	callstack 0
 53931                           
 53932 ;; *************** function _TMR0_CallBack *****************
 53933 ;; Defined at:
 53934 ;;		line 154 in file "mcc_generated_files/tmr0.c"
 53935 ;; Parameters:    Size  Location     Type
 53936 ;;		None
 53937 ;; Auto vars:     Size  Location     Type
 53938 ;;		None
 53939 ;; Return value:  Size  Location     Type
 53940 ;;                  1    wreg      void 
 53941 ;; Registers used:
 53942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 53943 ;; Tracked objects:
 53944 ;;		On entry : 0/0
 53945 ;;		On exit  : 0/0
 53946 ;;		Unchanged: 0/0
 53947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 53948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 53952 ;;Total ram usage:        0 bytes
 53953 ;; Hardware stack levels used:    1
 53954 ;; Hardware stack levels required when called:    3
 53955 ;; This function calls:
 53956 ;;		Absolute function
 53957 ;;		_SoundHandler
 53958 ;;		_TMR0_DefaultInterruptHandler
 53959 ;; This function is called by:
 53960 ;;		_TMR0_ISR
 53961 ;; This function uses a non-reentrant model
 53962 ;;
 53963                           
 53964                           	psect	text272
 53965  00F354                     __ptext272:
 53966                           	callstack 0
 53967  00F354                     _TMR0_CallBack:
 53968                           	callstack 11
 53969                           
 53970                           ;tmr0.c: 158: if(TMR0_InterruptHandler)
 53971                           
 53972                           ;incstack = 0
 53973  00F354  0103               	movlb	3	; () banked
 53974  00F356  5190               	movf	_TMR0_InterruptHandler& (0+255),w,b
 53975  00F358  1191               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 53976  00F35A  B4D8               	btfsc	status,2,c
 53977  00F35C  0012               	return	
 53978                           
 53979                           ; BSR set to: 3
 53980                           ;tmr0.c: 159: {;tmr0.c: 160: TMR0_InterruptHandler();
 53981  00F35E  D801               	call	i2u1758_48
 53982  00F360  0012               	return	
 53983  00F362                     i2u1758_48:
 53984  00F362  0005               	push	
 53985  00F364  6EFA               	movwf	pclath,c
 53986  00F366  5190               	movf	_TMR0_InterruptHandler& (0+255),w,b
 53987  00F368  6EFD               	movwf	tosl,c
 53988  00F36A  5191               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 53989  00F36C  6EFE               	movwf	tosh,c
 53990  00F36E  6AFF               	clrf	tosu,c
 53991  00F370  50FA               	movf	pclath,w,c
 53992  00F372  0012               	return		;indir
 53993  00F374                     __end_of_TMR0_CallBack:
 53994                           	callstack 0
 53995                           
 53996 ;; *************** function _SoundHandler *****************
 53997 ;; Defined at:
 53998 ;;		line 38 in file "AlarmSound.c"
 53999 ;; Parameters:    Size  Location     Type
 54000 ;;		None
 54001 ;; Auto vars:     Size  Location     Type
 54002 ;;  num             1    2[COMRAM] unsigned char 
 54003 ;; Return value:  Size  Location     Type
 54004 ;;                  1    wreg      void 
 54005 ;; Registers used:
 54006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 54007 ;; Tracked objects:
 54008 ;;		On entry : 3F/3
 54009 ;;		On exit  : 3F/3
 54010 ;;		Unchanged: 0/0
 54011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54014 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54015 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54016 ;;Total ram usage:        3 bytes
 54017 ;; Hardware stack levels used:    1
 54018 ;; Hardware stack levels required when called:    2
 54019 ;; This function calls:
 54020 ;;		i2_AlarmSoundOff
 54021 ;;		i2_TMR2_StartTimer
 54022 ;;		i2_TMR2_StopTimer
 54023 ;; This function is called by:
 54024 ;;		_AlarmInitialize
 54025 ;;		_TMR0_CallBack
 54026 ;; This function uses a non-reentrant model
 54027 ;;
 54028                           
 54029                           	psect	text273
 54030  00CD86                     __ptext273:
 54031                           	callstack 0
 54032  00CD86                     _SoundHandler:
 54033                           	callstack 11
 54034                           
 54035                           ; BSR set to: 3
 54036                           ;AlarmSound.c: 41: SoundTime++;
 54037                           
 54038                           ;incstack = 0
 54039  00CD86  4B74               	infsnz	_SoundTime& (0+255),f,b
 54040  00CD88  2B75               	incf	(_SoundTime+1)& (0+255),f,b
 54041                           
 54042                           ; BSR set to: 3
 54043                           ;AlarmSound.c: 42: if (SoundTime >= 3000) {
 54044  00CD8A  0EB8               	movlw	184
 54045  00CD8C  5D74               	subwf	_SoundTime& (0+255),w,b
 54046  00CD8E  0E0B               	movlw	11
 54047  00CD90  5975               	subwfb	(_SoundTime+1)& (0+255),w,b
 54048  00CD92  A0D8               	btfss	status,0,c
 54049  00CD94  D01B               	goto	i2l16243
 54050                           
 54051                           ; BSR set to: 3
 54052                           ;AlarmSound.c: 44: SoundTime = 0;
 54053  00CD96  0E00               	movlw	0
 54054  00CD98  6F75               	movwf	(_SoundTime+1)& (0+255),b
 54055  00CD9A  0E00               	movlw	0
 54056  00CD9C  6F74               	movwf	_SoundTime& (0+255),b
 54057                           
 54058                           ; BSR set to: 3
 54059                           ;AlarmSound.c: 45: SoundNum++;
 54060  00CD9E  2A48               	incf	_SoundNum^0,f,c
 54061                           
 54062                           ; BSR set to: 3
 54063                           ;AlarmSound.c: 46: if (SoundNum < 3) {
 54064  00CDA0  0E03               	movlw	3
 54065  00CDA2  6048               	cpfslt	_SoundNum^0,c
 54066  00CDA4  D00D               	goto	i2l16237
 54067                           
 54068                           ; BSR set to: 3
 54069                           ;AlarmSound.c: 47: SoundDataPos = SoundData[SoundNum][0];
 54070  00CDA6  5048               	movf	_SoundNum^0,w,c
 54071  00CDA8  0D07               	mullw	7
 54072  00CDAA  0EBE               	movlw	low _SoundData
 54073  00CDAC  24F3               	addwf	243,w,c
 54074  00CDAE  6ED9               	movwf	fsr2l,c
 54075  00CDB0  0E04               	movlw	high _SoundData
 54076  00CDB2  20F4               	addwfc	prodh,w,c
 54077  00CDB4  6EDA               	movwf	fsr2h,c
 54078  00CDB6  50DF               	movf	indf2,w,c
 54079  00CDB8  6E49               	movwf	_SoundDataPos^0,c
 54080                           
 54081                           ; BSR set to: 3
 54082                           ;AlarmSound.c: 48: SoundCount = 1;
 54083  00CDBA  0E01               	movlw	1
 54084  00CDBC  6F9C               	movwf	_SoundCount& (0+255),b
 54085                           
 54086                           ;AlarmSound.c: 49: } else if (SoundNum >= 6) {
 54087  00CDBE  D006               	goto	i2l16243
 54088  00CDC0                     i2l16237:
 54089                           
 54090                           ; BSR set to: 3
 54091  00CDC0  0E05               	movlw	5
 54092  00CDC2  6448               	cpfsgt	_SoundNum^0,c
 54093  00CDC4  D003               	goto	i2l16243
 54094                           
 54095                           ; BSR set to: 3
 54096                           ;AlarmSound.c: 52: AlarmSoundOff();
 54097  00CDC6  EC35  F07B         	call	i2_AlarmSoundOff	;wreg free
 54098  00CDCA  0012               	return	
 54099  00CDCC                     i2l16243:
 54100                           
 54101                           ; BSR set to: 3
 54102                           ;AlarmSound.c: 54: };AlarmSound.c: 55: };AlarmSound.c: 57: SoundCount--;
 54103  00CDCC  079C               	decf	_SoundCount& (0+255),f,b
 54104                           
 54105                           ; BSR set to: 3
 54106                           ;AlarmSound.c: 58: if (SoundCount == 0) {
 54107  00CDCE  519C               	movf	_SoundCount& (0+255),w,b
 54108  00CDD0  A4D8               	btfss	status,2,c
 54109  00CDD2  0012               	return	
 54110                           
 54111                           ; BSR set to: 3
 54112                           ;AlarmSound.c: 59: uint8_t num;;AlarmSound.c: 62: SoundDataPos++;
 54113  00CDD4  2A49               	incf	_SoundDataPos^0,f,c
 54114                           
 54115                           ; BSR set to: 3
 54116                           ;AlarmSound.c: 64: if (SoundNum >= 3) num = 3-1;
 54117  00CDD6  0E02               	movlw	2
 54118  00CDD8  6448               	cpfsgt	_SoundNum^0,c
 54119  00CDDA  D003               	goto	i2l2769
 54120                           
 54121                           ; BSR set to: 3
 54122  00CDDC  0E02               	movlw	2
 54123  00CDDE  6E03               	movwf	SoundHandler@num^0,c
 54124  00CDE0  D002               	goto	i2l16253
 54125  00CDE2                     i2l2769:
 54126                           
 54127                           ; BSR set to: 3
 54128                           ;AlarmSound.c: 65: else num = SoundNum;
 54129  00CDE2  C048  F003         	movff	_SoundNum,SoundHandler@num
 54130  00CDE6                     i2l16253:
 54131                           
 54132                           ; BSR set to: 3
 54133                           ;AlarmSound.c: 66: if (SoundDataPos > SoundData[num][0]) SoundDataPos = 1;
 54134  00CDE6  5003               	movf	SoundHandler@num^0,w,c
 54135  00CDE8  0D07               	mullw	7
 54136  00CDEA  0EBE               	movlw	low _SoundData
 54137  00CDEC  24F3               	addwf	243,w,c
 54138  00CDEE  6ED9               	movwf	fsr2l,c
 54139  00CDF0  0E04               	movlw	high _SoundData
 54140  00CDF2  20F4               	addwfc	prodh,w,c
 54141  00CDF4  6EDA               	movwf	fsr2h,c
 54142  00CDF6  5049               	movf	_SoundDataPos^0,w,c
 54143  00CDF8  5CDE               	subwf	postinc2,w,c
 54144  00CDFA  B0D8               	btfsc	status,0,c
 54145  00CDFC  D002               	goto	i2l16257
 54146                           
 54147                           ; BSR set to: 3
 54148  00CDFE  0E01               	movlw	1
 54149  00CE00  6E49               	movwf	_SoundDataPos^0,c
 54150  00CE02                     i2l16257:
 54151                           
 54152                           ; BSR set to: 3
 54153                           ;AlarmSound.c: 67: SoundCount = SoundData[num][SoundDataPos];
 54154  00CE02  5003               	movf	SoundHandler@num^0,w,c
 54155  00CE04  0D07               	mullw	7
 54156  00CE06  0EBE               	movlw	low _SoundData
 54157  00CE08  6E01               	movwf	??_SoundHandler^0,c
 54158  00CE0A  0E04               	movlw	high _SoundData
 54159  00CE0C  6E02               	movwf	(??_SoundHandler+1)^0,c
 54160  00CE0E  50F3               	movf	243,w,c
 54161  00CE10  2601               	addwf	??_SoundHandler^0,f,c
 54162  00CE12  50F4               	movf	244,w,c
 54163  00CE14  2202               	addwfc	(??_SoundHandler+1)^0,f,c
 54164  00CE16  5049               	movf	_SoundDataPos^0,w,c
 54165  00CE18  2401               	addwf	??_SoundHandler^0,w,c
 54166  00CE1A  6ED9               	movwf	fsr2l,c
 54167  00CE1C  0E00               	movlw	0
 54168  00CE1E  2002               	addwfc	(??_SoundHandler+1)^0,w,c
 54169  00CE20  6EDA               	movwf	fsr2h,c
 54170  00CE22  50DF               	movf	indf2,w,c
 54171  00CE24  6F9C               	movwf	_SoundCount& (0+255),b
 54172                           
 54173                           ; BSR set to: 3
 54174                           ;AlarmSound.c: 69: if (SoundDataPos % 2) TMR2_StartTimer();
 54175  00CE26  A049               	btfss	_SoundDataPos^0,0,c
 54176  00CE28  D003               	goto	i2l16263
 54177                           
 54178                           ; BSR set to: 3
 54179  00CE2A  EC23  F07C         	call	i2_TMR2_StartTimer	;wreg free
 54180  00CE2E  0012               	return	
 54181  00CE30                     i2l16263:
 54182                           
 54183                           ; BSR set to: 3
 54184                           ;AlarmSound.c: 70: else TMR2_StopTimer();
 54185  00CE30  EC1F  F07C         	call	i2_TMR2_StopTimer	;wreg free
 54186                           
 54187                           ; BSR set to: 3
 54188  00CE34  0012               	return		;funcret
 54189  00CE36                     __end_of_SoundHandler:
 54190                           	callstack 0
 54191                           
 54192 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 54193 ;; Defined at:
 54194 ;;		line 168 in file "mcc_generated_files/tmr0.c"
 54195 ;; Parameters:    Size  Location     Type
 54196 ;;		None
 54197 ;; Auto vars:     Size  Location     Type
 54198 ;;		None
 54199 ;; Return value:  Size  Location     Type
 54200 ;;                  1    wreg      void 
 54201 ;; Registers used:
 54202 ;;		None
 54203 ;; Tracked objects:
 54204 ;;		On entry : 3F/3
 54205 ;;		On exit  : 3F/3
 54206 ;;		Unchanged: 3E/0
 54207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54212 ;;Total ram usage:        0 bytes
 54213 ;; Hardware stack levels used:    1
 54214 ;; This function calls:
 54215 ;;		Nothing
 54216 ;; This function is called by:
 54217 ;;		_TMR0_Initialize
 54218 ;;		_TMR0_CallBack
 54219 ;; This function uses a non-reentrant model
 54220 ;;
 54221                           
 54222                           	psect	text274
 54223  00F85A                     __ptext274:
 54224                           	callstack 0
 54225  00F85A                     _TMR0_DefaultInterruptHandler:
 54226                           	callstack 13
 54227                           
 54228                           ; BSR set to: 3
 54229                           
 54230                           ; BSR set to: 3
 54231                           ;incstack = 0
 54232  00F85A  0012               	return		;funcret
 54233  00F85C                     __end_of_TMR0_DefaultInterruptHandler:
 54234                           	callstack 0
 54235                           
 54236 ;; *************** function i2_AlarmSoundOff *****************
 54237 ;; Defined at:
 54238 ;;		line 96 in file "AlarmSound.c"
 54239 ;; Parameters:    Size  Location     Type
 54240 ;;		None
 54241 ;; Auto vars:     Size  Location     Type
 54242 ;;		None
 54243 ;; Return value:  Size  Location     Type
 54244 ;;                  1    wreg      void 
 54245 ;; Registers used:
 54246 ;;		wreg, status,2, cstack
 54247 ;; Tracked objects:
 54248 ;;		On entry : 3F/3
 54249 ;;		On exit  : 3F/3
 54250 ;;		Unchanged: 3E/0
 54251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54256 ;;Total ram usage:        0 bytes
 54257 ;; Hardware stack levels used:    1
 54258 ;; Hardware stack levels required when called:    1
 54259 ;; This function calls:
 54260 ;;		i2_TMR0_StopTimer
 54261 ;;		i2_TMR2_StopTimer
 54262 ;; This function is called by:
 54263 ;;		_SoundHandler
 54264 ;; This function uses a non-reentrant model
 54265 ;;
 54266                           
 54267                           	psect	text275
 54268  00F66A                     __ptext275:
 54269                           	callstack 0
 54270  00F66A                     i2_AlarmSoundOff:
 54271                           	callstack 11
 54272                           
 54273                           ; BSR set to: 3
 54274                           ;AlarmSound.c: 97: TMR2_StopTimer();
 54275                           
 54276                           ; BSR set to: 3
 54277                           ;incstack = 0
 54278  00F66A  EC1F  F07C         	call	i2_TMR2_StopTimer	;wreg free
 54279                           
 54280                           ;AlarmSound.c: 98: TMR0_StopTimer();
 54281  00F66E  EC21  F07C         	call	i2_TMR0_StopTimer	;wreg free
 54282                           
 54283                           ; BSR set to: 3
 54284                           ;AlarmSound.c: 99: SoundDataPos = 0;
 54285  00F672  0E00               	movlw	0
 54286  00F674  6E49               	movwf	_SoundDataPos^0,c
 54287                           
 54288                           ; BSR set to: 3
 54289  00F676  8693               	bsf	147,3,c	;volatile
 54290                           
 54291                           ; BSR set to: 3
 54292  00F678  0012               	return		;funcret
 54293  00F67A                     __end_ofi2_AlarmSoundOff:
 54294                           	callstack 0
 54295                           
 54296 ;; *************** function i2_TMR2_StopTimer *****************
 54297 ;; Defined at:
 54298 ;;		line 85 in file "mcc_generated_files/tmr2.c"
 54299 ;; Parameters:    Size  Location     Type
 54300 ;;		None
 54301 ;; Auto vars:     Size  Location     Type
 54302 ;;		None
 54303 ;; Return value:  Size  Location     Type
 54304 ;;                  1    wreg      void 
 54305 ;; Registers used:
 54306 ;;		None
 54307 ;; Tracked objects:
 54308 ;;		On entry : 3F/3
 54309 ;;		On exit  : 3F/3
 54310 ;;		Unchanged: 3E/0
 54311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54316 ;;Total ram usage:        0 bytes
 54317 ;; Hardware stack levels used:    1
 54318 ;; This function calls:
 54319 ;;		Nothing
 54320 ;; This function is called by:
 54321 ;;		_SoundHandler
 54322 ;;		i2_AlarmSoundOff
 54323 ;; This function uses a non-reentrant model
 54324 ;;
 54325                           
 54326                           	psect	text276
 54327  00F83E                     __ptext276:
 54328                           	callstack 0
 54329  00F83E                     i2_TMR2_StopTimer:
 54330                           	callstack 12
 54331                           
 54332                           ; BSR set to: 3
 54333                           ;tmr2.c: 88: T2CONbits.TMR2ON = 0;
 54334                           
 54335                           ; BSR set to: 3
 54336                           ;incstack = 0
 54337  00F83E  94BA               	bcf	186,2,c	;volatile
 54338                           
 54339                           ; BSR set to: 3
 54340  00F840  0012               	return		;funcret
 54341  00F842                     __end_ofi2_TMR2_StopTimer:
 54342                           	callstack 0
 54343                           
 54344 ;; *************** function i2_TMR0_StopTimer *****************
 54345 ;; Defined at:
 54346 ;;		line 103 in file "mcc_generated_files/tmr0.c"
 54347 ;; Parameters:    Size  Location     Type
 54348 ;;		None
 54349 ;; Auto vars:     Size  Location     Type
 54350 ;;		None
 54351 ;; Return value:  Size  Location     Type
 54352 ;;                  1    wreg      void 
 54353 ;; Registers used:
 54354 ;;		None
 54355 ;; Tracked objects:
 54356 ;;		On entry : 3F/3
 54357 ;;		On exit  : 3F/3
 54358 ;;		Unchanged: 3E/0
 54359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54364 ;;Total ram usage:        0 bytes
 54365 ;; Hardware stack levels used:    1
 54366 ;; This function calls:
 54367 ;;		Nothing
 54368 ;; This function is called by:
 54369 ;;		i2_AlarmSoundOff
 54370 ;; This function uses a non-reentrant model
 54371 ;;
 54372                           
 54373                           	psect	text277
 54374  00F842                     __ptext277:
 54375                           	callstack 0
 54376  00F842                     i2_TMR0_StopTimer:
 54377                           	callstack 11
 54378                           
 54379                           ; BSR set to: 3
 54380                           ;tmr0.c: 106: T0CONbits.TMR0ON = 0;
 54381                           
 54382                           ; BSR set to: 3
 54383                           ;incstack = 0
 54384  00F842  9ED5               	bcf	213,7,c	;volatile
 54385                           
 54386                           ; BSR set to: 3
 54387  00F844  0012               	return		;funcret
 54388  00F846                     __end_ofi2_TMR0_StopTimer:
 54389                           	callstack 0
 54390                           
 54391 ;; *************** function _PIN_MANAGER_IOC *****************
 54392 ;; Defined at:
 54393 ;;		line 104 in file "mcc_generated_files/pin_manager.c"
 54394 ;; Parameters:    Size  Location     Type
 54395 ;;		None
 54396 ;; Auto vars:     Size  Location     Type
 54397 ;;		None
 54398 ;; Return value:  Size  Location     Type
 54399 ;;                  1    wreg      void 
 54400 ;; Registers used:
 54401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 54402 ;; Tracked objects:
 54403 ;;		On entry : 0/0
 54404 ;;		On exit  : 0/0
 54405 ;;		Unchanged: 0/0
 54406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54411 ;;Total ram usage:        0 bytes
 54412 ;; Hardware stack levels used:    1
 54413 ;; Hardware stack levels required when called:    4
 54414 ;; This function calls:
 54415 ;;		_IOCB4_ISR
 54416 ;; This function is called by:
 54417 ;;		_INTERRUPT_InterruptManager
 54418 ;; This function uses a non-reentrant model
 54419 ;;
 54420                           
 54421                           	psect	text278
 54422  00F73C                     __ptext278:
 54423                           	callstack 0
 54424  00F73C                     _PIN_MANAGER_IOC:
 54425                           	callstack 11
 54426                           
 54427                           ;pin_manager.c: 107: if(IOCBbits.IOCB4 == 1)
 54428                           
 54429                           ; BSR set to: 3
 54430                           ;incstack = 0
 54431  00F73C  B862               	btfsc	98,4,c	;volatile
 54432                           
 54433                           ;pin_manager.c: 108: {;pin_manager.c: 109: IOCB4_ISR();
 54434  00F73E  ECBA  F079         	call	_IOCB4_ISR	;wreg free
 54435                           
 54436                           ;pin_manager.c: 110: };pin_manager.c: 112: INTCONbits.RBIF = 0;
 54437  00F742  90F2               	bcf	242,0,c	;volatile
 54438  00F744  0012               	return		;funcret
 54439  00F746                     __end_of_PIN_MANAGER_IOC:
 54440                           	callstack 0
 54441                           
 54442 ;; *************** function _IOCB4_ISR *****************
 54443 ;; Defined at:
 54444 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 54445 ;; Parameters:    Size  Location     Type
 54446 ;;		None
 54447 ;; Auto vars:     Size  Location     Type
 54448 ;;		None
 54449 ;; Return value:  Size  Location     Type
 54450 ;;                  1    wreg      void 
 54451 ;; Registers used:
 54452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 54453 ;; Tracked objects:
 54454 ;;		On entry : 0/0
 54455 ;;		On exit  : 0/0
 54456 ;;		Unchanged: 0/0
 54457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54462 ;;Total ram usage:        0 bytes
 54463 ;; Hardware stack levels used:    1
 54464 ;; Hardware stack levels required when called:    3
 54465 ;; This function calls:
 54466 ;;		Absolute function
 54467 ;;		_AlarmWHandler
 54468 ;;		_IOCB4_DefaultInterruptHandler
 54469 ;; This function is called by:
 54470 ;;		_PIN_MANAGER_IOC
 54471 ;; This function uses a non-reentrant model
 54472 ;;
 54473                           
 54474                           	psect	text279
 54475  00F374                     __ptext279:
 54476                           	callstack 0
 54477  00F374                     _IOCB4_ISR:
 54478                           	callstack 11
 54479                           
 54480                           ;pin_manager.c: 123: if(IOCB4_InterruptHandler)
 54481                           
 54482                           ;incstack = 0
 54483  00F374  0103               	movlb	3	; () banked
 54484  00F376  51FD               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 54485  00F378  11FE               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 54486  00F37A  B4D8               	btfsc	status,2,c
 54487  00F37C  0012               	return	
 54488                           
 54489                           ; BSR set to: 3
 54490                           ;pin_manager.c: 124: {;pin_manager.c: 125: IOCB4_InterruptHandler();
 54491  00F37E  D801               	call	i2u1755_48
 54492  00F380  0012               	return	
 54493  00F382                     i2u1755_48:
 54494  00F382  0005               	push	
 54495  00F384  6EFA               	movwf	pclath,c
 54496  00F386  51FD               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 54497  00F388  6EFD               	movwf	tosl,c
 54498  00F38A  51FE               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 54499  00F38C  6EFE               	movwf	tosh,c
 54500  00F38E  6AFF               	clrf	tosu,c
 54501  00F390  50FA               	movf	pclath,w,c
 54502  00F392  0012               	return		;indir
 54503  00F394                     __end_of_IOCB4_ISR:
 54504                           	callstack 0
 54505                           
 54506 ;; *************** function _AlarmWHandler *****************
 54507 ;; Defined at:
 54508 ;;		line 297 in file "main.c"
 54509 ;; Parameters:    Size  Location     Type
 54510 ;;		None
 54511 ;; Auto vars:     Size  Location     Type
 54512 ;;		None
 54513 ;; Return value:  Size  Location     Type
 54514 ;;                  1    wreg      void 
 54515 ;; Registers used:
 54516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 54517 ;; Tracked objects:
 54518 ;;		On entry : 3F/3
 54519 ;;		On exit  : 3F/3
 54520 ;;		Unchanged: 0/0
 54521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54526 ;;Total ram usage:        0 bytes
 54527 ;; Hardware stack levels used:    1
 54528 ;; Hardware stack levels required when called:    2
 54529 ;; This function calls:
 54530 ;;		i2_AlarmSoundOn
 54531 ;; This function is called by:
 54532 ;;		_main
 54533 ;;		_IOCB4_ISR
 54534 ;; This function uses a non-reentrant model
 54535 ;;
 54536                           
 54537                           	psect	text280
 54538  00F5C8                     __ptext280:
 54539                           	callstack 0
 54540  00F5C8                     _AlarmWHandler:
 54541                           	callstack 11
 54542                           
 54543                           ; BSR set to: 3
 54544                           ;main.c: 298: if (PORTBbits.RB4==0) {
 54545                           
 54546                           ;incstack = 0
 54547  00F5C8  B881               	btfsc	129,4,c	;volatile
 54548  00F5CA  0012               	return	
 54549                           
 54550                           ; BSR set to: 3
 54551                           ;main.c: 301: AlarmSoundOn(0);
 54552  00F5CC  0E00               	movlw	0
 54553  00F5CE  EC05  F074         	call	i2_AlarmSoundOn
 54554                           
 54555                           ;main.c: 302: AlarmStatus = 1;
 54556  00F5D2  0E01               	movlw	1
 54557  00F5D4  0103               	movlb	3	; () banked
 54558  00F5D6  6FA3               	movwf	_AlarmStatus& (0+255),b
 54559                           
 54560                           ; BSR set to: 3
 54561  00F5D8  0012               	return		;funcret
 54562  00F5DA                     __end_of_AlarmWHandler:
 54563                           	callstack 0
 54564                           
 54565 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 54566 ;; Defined at:
 54567 ;;		line 139 in file "mcc_generated_files/pin_manager.c"
 54568 ;; Parameters:    Size  Location     Type
 54569 ;;		None
 54570 ;; Auto vars:     Size  Location     Type
 54571 ;;		None
 54572 ;; Return value:  Size  Location     Type
 54573 ;;                  1    wreg      void 
 54574 ;; Registers used:
 54575 ;;		None
 54576 ;; Tracked objects:
 54577 ;;		On entry : 3F/3
 54578 ;;		On exit  : 3F/3
 54579 ;;		Unchanged: 3E/0
 54580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54585 ;;Total ram usage:        0 bytes
 54586 ;; Hardware stack levels used:    1
 54587 ;; This function calls:
 54588 ;;		Nothing
 54589 ;; This function is called by:
 54590 ;;		_PIN_MANAGER_Initialize
 54591 ;;		_IOCB4_ISR
 54592 ;; This function uses a non-reentrant model
 54593 ;;
 54594                           
 54595                           	psect	text281
 54596  00F85C                     __ptext281:
 54597                           	callstack 0
 54598  00F85C                     _IOCB4_DefaultInterruptHandler:
 54599                           	callstack 13
 54600                           
 54601                           ; BSR set to: 3
 54602                           
 54603                           ; BSR set to: 3
 54604                           ;incstack = 0
 54605  00F85C  0012               	return		;funcret
 54606  00F85E                     __end_of_IOCB4_DefaultInterruptHandler:
 54607                           	callstack 0
 54608                           
 54609 ;; *************** function i2_AlarmSoundOn *****************
 54610 ;; Defined at:
 54611 ;;		line 80 in file "AlarmSound.c"
 54612 ;; Parameters:    Size  Location     Type
 54613 ;;  sn              1    wreg     unsigned char 
 54614 ;; Auto vars:     Size  Location     Type
 54615 ;;  sn              1    2[COMRAM] unsigned char 
 54616 ;; Return value:  Size  Location     Type
 54617 ;;                  1    wreg      void 
 54618 ;; Registers used:
 54619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 54620 ;; Tracked objects:
 54621 ;;		On entry : 3F/3
 54622 ;;		On exit  : 0/0
 54623 ;;		Unchanged: 0/0
 54624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54626 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54627 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54628 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54629 ;;Total ram usage:        3 bytes
 54630 ;; Hardware stack levels used:    1
 54631 ;; Hardware stack levels required when called:    1
 54632 ;; This function calls:
 54633 ;;		i2_TMR0_Reload
 54634 ;;		i2_TMR0_StartTimer
 54635 ;;		i2_TMR2_StartTimer
 54636 ;; This function is called by:
 54637 ;;		_AlarmWHandler
 54638 ;; This function uses a non-reentrant model
 54639 ;;
 54640                           
 54641                           	psect	text282
 54642  00E80A                     __ptext282:
 54643                           	callstack 0
 54644  00E80A                     i2_AlarmSoundOn:
 54645                           	callstack 11
 54646                           
 54647                           ; BSR set to: 3
 54648                           ;incstack = 0
 54649                           ;i2AlarmSoundOn@sn stored from wreg
 54650  00E80A  6E03               	movwf	i2AlarmSoundOn@sn^0,c
 54651                           
 54652                           ;AlarmSound.c: 82: if (SoundDataPos != 0) return;
 54653  00E80C  5049               	movf	_SoundDataPos^0,w,c
 54654  00E80E  A4D8               	btfss	status,2,c
 54655  00E810  0012               	return	
 54656                           
 54657                           ;AlarmSound.c: 84: SoundNum = sn;
 54658  00E812  C003  F048         	movff	i2AlarmSoundOn@sn,_SoundNum
 54659                           
 54660                           ;AlarmSound.c: 85: SoundDataPos = 1;
 54661  00E816  0E01               	movlw	1
 54662  00E818  6E49               	movwf	_SoundDataPos^0,c
 54663                           
 54664                           ;AlarmSound.c: 86: SoundCount = SoundData[SoundNum][SoundDataPos];
 54665  00E81A  5048               	movf	_SoundNum^0,w,c
 54666  00E81C  0D07               	mullw	7
 54667  00E81E  0EBE               	movlw	low _SoundData
 54668  00E820  6E01               	movwf	??i2_AlarmSoundOn^0,c
 54669  00E822  0E04               	movlw	high _SoundData
 54670  00E824  6E02               	movwf	(??i2_AlarmSoundOn+1)^0,c
 54671  00E826  50F3               	movf	243,w,c
 54672  00E828  2601               	addwf	??i2_AlarmSoundOn^0,f,c
 54673  00E82A  50F4               	movf	244,w,c
 54674  00E82C  2202               	addwfc	(??i2_AlarmSoundOn+1)^0,f,c
 54675  00E82E  5049               	movf	_SoundDataPos^0,w,c
 54676  00E830  2401               	addwf	??i2_AlarmSoundOn^0,w,c
 54677  00E832  6ED9               	movwf	fsr2l,c
 54678  00E834  0E00               	movlw	0
 54679  00E836  2002               	addwfc	(??i2_AlarmSoundOn+1)^0,w,c
 54680  00E838  6EDA               	movwf	fsr2h,c
 54681  00E83A  50DF               	movf	indf2,w,c
 54682  00E83C  0103               	movlb	3	; () banked
 54683  00E83E  6F9C               	movwf	_SoundCount& (0+255),b
 54684                           
 54685                           ; BSR set to: 3
 54686                           ;AlarmSound.c: 87: SoundTime = 0;
 54687  00E840  0E00               	movlw	0
 54688  00E842  6F75               	movwf	(_SoundTime+1)& (0+255),b
 54689  00E844  0E00               	movlw	0
 54690  00E846  6F74               	movwf	_SoundTime& (0+255),b
 54691                           
 54692                           ; BSR set to: 3
 54693  00E848  9693               	bcf	147,3,c	;volatile
 54694                           
 54695                           ; BSR set to: 3
 54696                           ;AlarmSound.c: 90: TMR2_StartTimer();
 54697  00E84A  EC23  F07C         	call	i2_TMR2_StartTimer	;wreg free
 54698                           
 54699                           ; BSR set to: 3
 54700                           ;AlarmSound.c: 91: TMR0_Reload();
 54701  00E84E  ECA3  F07B         	call	i2_TMR0_Reload	;wreg free
 54702                           
 54703                           ; BSR set to: 3
 54704                           ;AlarmSound.c: 92: TMR0_StartTimer();
 54705  00E852  EC25  F07C         	call	i2_TMR0_StartTimer	;wreg free
 54706  00E856  0012               	return		;funcret
 54707  00E858                     __end_ofi2_AlarmSoundOn:
 54708                           	callstack 0
 54709                           
 54710 ;; *************** function i2_TMR2_StartTimer *****************
 54711 ;; Defined at:
 54712 ;;		line 79 in file "mcc_generated_files/tmr2.c"
 54713 ;; Parameters:    Size  Location     Type
 54714 ;;		None
 54715 ;; Auto vars:     Size  Location     Type
 54716 ;;		None
 54717 ;; Return value:  Size  Location     Type
 54718 ;;                  1    wreg      void 
 54719 ;; Registers used:
 54720 ;;		None
 54721 ;; Tracked objects:
 54722 ;;		On entry : 3F/3
 54723 ;;		On exit  : 3F/3
 54724 ;;		Unchanged: 3E/0
 54725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54730 ;;Total ram usage:        0 bytes
 54731 ;; Hardware stack levels used:    1
 54732 ;; This function calls:
 54733 ;;		Nothing
 54734 ;; This function is called by:
 54735 ;;		_SoundHandler
 54736 ;;		i2_AlarmSoundOn
 54737 ;; This function uses a non-reentrant model
 54738 ;;
 54739                           
 54740                           	psect	text283
 54741  00F846                     __ptext283:
 54742                           	callstack 0
 54743  00F846                     i2_TMR2_StartTimer:
 54744                           	callstack 12
 54745                           
 54746                           ; BSR set to: 3
 54747                           ;tmr2.c: 82: T2CONbits.TMR2ON = 1;
 54748                           
 54749                           ;incstack = 0
 54750  00F846  84BA               	bsf	186,2,c	;volatile
 54751                           
 54752                           ; BSR set to: 3
 54753  00F848  0012               	return		;funcret
 54754  00F84A                     __end_ofi2_TMR2_StartTimer:
 54755                           	callstack 0
 54756                           
 54757 ;; *************** function i2_TMR0_StartTimer *****************
 54758 ;; Defined at:
 54759 ;;		line 97 in file "mcc_generated_files/tmr0.c"
 54760 ;; Parameters:    Size  Location     Type
 54761 ;;		None
 54762 ;; Auto vars:     Size  Location     Type
 54763 ;;		None
 54764 ;; Return value:  Size  Location     Type
 54765 ;;                  1    wreg      void 
 54766 ;; Registers used:
 54767 ;;		None
 54768 ;; Tracked objects:
 54769 ;;		On entry : 3F/3
 54770 ;;		On exit  : 3F/3
 54771 ;;		Unchanged: 3E/0
 54772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54777 ;;Total ram usage:        0 bytes
 54778 ;; Hardware stack levels used:    1
 54779 ;; This function calls:
 54780 ;;		Nothing
 54781 ;; This function is called by:
 54782 ;;		i2_AlarmSoundOn
 54783 ;; This function uses a non-reentrant model
 54784 ;;
 54785                           
 54786                           	psect	text284
 54787  00F84A                     __ptext284:
 54788                           	callstack 0
 54789  00F84A                     i2_TMR0_StartTimer:
 54790                           	callstack 11
 54791                           
 54792                           ; BSR set to: 3
 54793                           ;tmr0.c: 100: T0CONbits.TMR0ON = 1;
 54794                           
 54795                           ; BSR set to: 3
 54796                           ;incstack = 0
 54797  00F84A  8ED5               	bsf	213,7,c	;volatile
 54798                           
 54799                           ; BSR set to: 3
 54800  00F84C  0012               	return		;funcret
 54801  00F84E                     __end_ofi2_TMR0_StartTimer:
 54802                           	callstack 0
 54803                           
 54804 ;; *************** function i2_TMR0_Reload *****************
 54805 ;; Defined at:
 54806 ;;		line 129 in file "mcc_generated_files/tmr0.c"
 54807 ;; Parameters:    Size  Location     Type
 54808 ;;		None
 54809 ;; Auto vars:     Size  Location     Type
 54810 ;;		None
 54811 ;; Return value:  Size  Location     Type
 54812 ;;                  1    wreg      void 
 54813 ;; Registers used:
 54814 ;;		None
 54815 ;; Tracked objects:
 54816 ;;		On entry : 3F/3
 54817 ;;		On exit  : 3F/3
 54818 ;;		Unchanged: 3E/0
 54819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54824 ;;Total ram usage:        0 bytes
 54825 ;; Hardware stack levels used:    1
 54826 ;; This function calls:
 54827 ;;		Nothing
 54828 ;; This function is called by:
 54829 ;;		i2_AlarmSoundOn
 54830 ;; This function uses a non-reentrant model
 54831 ;;
 54832                           
 54833                           	psect	text285
 54834  00F746                     __ptext285:
 54835                           	callstack 0
 54836  00F746                     i2_TMR0_Reload:
 54837                           	callstack 11
 54838                           
 54839                           ; BSR set to: 3
 54840                           ;tmr0.c: 132: TMR0H = timer0ReloadVal >> 8;
 54841                           
 54842                           ; BSR set to: 3
 54843                           ;incstack = 0
 54844  00F746  C047  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 54845                           
 54846                           ;tmr0.c: 133: TMR0L = (uint8_t) timer0ReloadVal;
 54847  00F74A  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 54848                           
 54849                           ; BSR set to: 3
 54850  00F74E  0012               	return		;funcret
 54851  00F750                     __end_ofi2_TMR0_Reload:
 54852                           	callstack 0
 54853                           
 54854 ;; *************** function _INT0_ISR *****************
 54855 ;; Defined at:
 54856 ;;		line 32 in file "mcc_generated_files/ext_int.c"
 54857 ;; Parameters:    Size  Location     Type
 54858 ;;		None
 54859 ;; Auto vars:     Size  Location     Type
 54860 ;;		None
 54861 ;; Return value:  Size  Location     Type
 54862 ;;                  1    wreg      void 
 54863 ;; Registers used:
 54864 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 54865 ;; Tracked objects:
 54866 ;;		On entry : 0/0
 54867 ;;		On exit  : 0/0
 54868 ;;		Unchanged: 0/0
 54869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54874 ;;Total ram usage:        0 bytes
 54875 ;; Hardware stack levels used:    1
 54876 ;; Hardware stack levels required when called:    2
 54877 ;; This function calls:
 54878 ;;		_INT0_CallBack
 54879 ;; This function is called by:
 54880 ;;		_INTERRUPT_InterruptManager
 54881 ;; This function uses a non-reentrant model
 54882 ;;
 54883                           
 54884                           	psect	text286
 54885  00F7C0                     __ptext286:
 54886                           	callstack 0
 54887  00F7C0                     _INT0_ISR:
 54888                           	callstack 13
 54889                           
 54890                           ;ext_int.c: 34: (INTCONbits.INT0IF = 0);
 54891                           
 54892                           ; BSR set to: 3
 54893                           ;incstack = 0
 54894  00F7C0  92F2               	bcf	242,1,c	;volatile
 54895                           
 54896                           ;ext_int.c: 37: INT0_CallBack();
 54897  00F7C2  ECCA  F079         	call	_INT0_CallBack	;wreg free
 54898  00F7C6  0012               	return		;funcret
 54899  00F7C8                     __end_of_INT0_ISR:
 54900                           	callstack 0
 54901                           
 54902 ;; *************** function _INT0_CallBack *****************
 54903 ;; Defined at:
 54904 ;;		line 41 in file "mcc_generated_files/ext_int.c"
 54905 ;; Parameters:    Size  Location     Type
 54906 ;;		None
 54907 ;; Auto vars:     Size  Location     Type
 54908 ;;		None
 54909 ;; Return value:  Size  Location     Type
 54910 ;;                  1    wreg      void 
 54911 ;; Registers used:
 54912 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 54913 ;; Tracked objects:
 54914 ;;		On entry : 0/0
 54915 ;;		On exit  : 0/0
 54916 ;;		Unchanged: 0/0
 54917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54922 ;;Total ram usage:        0 bytes
 54923 ;; Hardware stack levels used:    1
 54924 ;; Hardware stack levels required when called:    1
 54925 ;; This function calls:
 54926 ;;		Absolute function
 54927 ;;		_INT0_DefaultInterruptHandler
 54928 ;;		_RTC_handler
 54929 ;; This function is called by:
 54930 ;;		_INT0_ISR
 54931 ;; This function uses a non-reentrant model
 54932 ;;
 54933                           
 54934                           	psect	text287
 54935  00F394                     __ptext287:
 54936                           	callstack 0
 54937  00F394                     _INT0_CallBack:
 54938                           	callstack 13
 54939                           
 54940                           ;ext_int.c: 44: if(INT0_InterruptHandler)
 54941                           
 54942                           ;incstack = 0
 54943  00F394  0103               	movlb	3	; () banked
 54944  00F396  518C               	movf	_INT0_InterruptHandler& (0+255),w,b
 54945  00F398  118D               	iorwf	(_INT0_InterruptHandler+1)& (0+255),w,b
 54946  00F39A  B4D8               	btfsc	status,2,c
 54947  00F39C  0012               	return	
 54948                           
 54949                           ; BSR set to: 3
 54950                           ;ext_int.c: 45: {;ext_int.c: 46: INT0_InterruptHandler();
 54951  00F39E  D801               	call	i2u1760_48
 54952  00F3A0  0012               	return	
 54953  00F3A2                     i2u1760_48:
 54954  00F3A2  0005               	push	
 54955  00F3A4  6EFA               	movwf	pclath,c
 54956  00F3A6  518C               	movf	_INT0_InterruptHandler& (0+255),w,b
 54957  00F3A8  6EFD               	movwf	tosl,c
 54958  00F3AA  518D               	movf	(_INT0_InterruptHandler+1)& (0+255),w,b
 54959  00F3AC  6EFE               	movwf	tosh,c
 54960  00F3AE  6AFF               	clrf	tosu,c
 54961  00F3B0  50FA               	movf	pclath,w,c
 54962  00F3B2  0012               	return		;indir
 54963  00F3B4                     __end_of_INT0_CallBack:
 54964                           	callstack 0
 54965                           
 54966 ;; *************** function _INT0_DefaultInterruptHandler *****************
 54967 ;; Defined at:
 54968 ;;		line 54 in file "mcc_generated_files/ext_int.c"
 54969 ;; Parameters:    Size  Location     Type
 54970 ;;		None
 54971 ;; Auto vars:     Size  Location     Type
 54972 ;;		None
 54973 ;; Return value:  Size  Location     Type
 54974 ;;                  1    wreg      void 
 54975 ;; Registers used:
 54976 ;;		None
 54977 ;; Tracked objects:
 54978 ;;		On entry : 3F/3
 54979 ;;		On exit  : 3F/3
 54980 ;;		Unchanged: 3E/0
 54981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 54982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 54986 ;;Total ram usage:        0 bytes
 54987 ;; Hardware stack levels used:    1
 54988 ;; This function calls:
 54989 ;;		Nothing
 54990 ;; This function is called by:
 54991 ;;		_EXT_INT_Initialize
 54992 ;;		_INT0_CallBack
 54993 ;; This function uses a non-reentrant model
 54994 ;;
 54995                           
 54996                           	psect	text288
 54997  00F85E                     __ptext288:
 54998                           	callstack 0
 54999  00F85E                     _INT0_DefaultInterruptHandler:
 55000                           	callstack 13
 55001                           
 55002                           ; BSR set to: 3
 55003                           
 55004                           ;incstack = 0
 55005  00F85E  0012               	return		;funcret
 55006  00F860                     __end_of_INT0_DefaultInterruptHandler:
 55007                           	callstack 0
 55008                           
 55009 ;; *************** function _RTC_handler *****************
 55010 ;; Defined at:
 55011 ;;		line 290 in file "main.c"
 55012 ;; Parameters:    Size  Location     Type
 55013 ;;		None
 55014 ;; Auto vars:     Size  Location     Type
 55015 ;;		None
 55016 ;; Return value:  Size  Location     Type
 55017 ;;                  1    wreg      void 
 55018 ;; Registers used:
 55019 ;;		status,2, status,0
 55020 ;; Tracked objects:
 55021 ;;		On entry : 3F/3
 55022 ;;		On exit  : 3F/3
 55023 ;;		Unchanged: 0/0
 55024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 55025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55029 ;;Total ram usage:        0 bytes
 55030 ;; Hardware stack levels used:    1
 55031 ;; This function calls:
 55032 ;;		Nothing
 55033 ;; This function is called by:
 55034 ;;		_main
 55035 ;;		_INT0_CallBack
 55036 ;; This function uses a non-reentrant model
 55037 ;;
 55038                           
 55039                           	psect	text289
 55040  00F84E                     __ptext289:
 55041                           	callstack 0
 55042  00F84E                     _RTC_handler:
 55043                           	callstack 13
 55044                           
 55045                           ; BSR set to: 3
 55046                           ;main.c: 291: UpdateFlag |= 0x01;
 55047                           
 55048                           ; BSR set to: 3
 55049                           ;incstack = 0
 55050  00F84E  81A5               	bsf	_UpdateFlag& (0+255),0,b
 55051                           
 55052                           ; BSR set to: 3
 55053  00F850  0012               	return		;funcret
 55054  00F852                     __end_of_RTC_handler:
 55055                           	callstack 0
 55056                           
 55057 ;; *************** function _EUSART1_Receive_ISR *****************
 55058 ;; Defined at:
 55059 ;;		line 173 in file "mcc_generated_files/eusart1.c"
 55060 ;; Parameters:    Size  Location     Type
 55061 ;;		None
 55062 ;; Auto vars:     Size  Location     Type
 55063 ;;		None
 55064 ;; Return value:  Size  Location     Type
 55065 ;;                  1    wreg      void 
 55066 ;; Registers used:
 55067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 55068 ;; Tracked objects:
 55069 ;;		On entry : 3F/3
 55070 ;;		On exit  : 0/0
 55071 ;;		Unchanged: 0/0
 55072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 55073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55077 ;;Total ram usage:        0 bytes
 55078 ;; Hardware stack levels used:    1
 55079 ;; Hardware stack levels required when called:    2
 55080 ;; This function calls:
 55081 ;;		Absolute function
 55082 ;;		_EUSART1_DefaultErrorHandler
 55083 ;;		_EUSART1_DefaultFramingErrorHandler
 55084 ;;		_EUSART1_DefaultOverrunErrorHandler
 55085 ;;		_EUSART1_RxDataHandler
 55086 ;; This function is called by:
 55087 ;;		_EUSART1_Initialize
 55088 ;;		_INTERRUPT_InterruptManager
 55089 ;; This function uses a non-reentrant model
 55090 ;;
 55091                           
 55092                           	psect	text290
 55093  00D4B2                     __ptext290:
 55094                           	callstack 0
 55095  00D4B2                     _EUSART1_Receive_ISR:
 55096                           	callstack 13
 55097                           
 55098                           ; BSR set to: 3
 55099                           ;eusart1.c: 176: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
 55100                           
 55101                           ; BSR set to: 3
 55102                           ;incstack = 0
 55103  00D4B2  0E00               	movlw	low _eusart1RxStatusBuffer
 55104  00D4B4  244B               	addwf	_eusart1RxHead^0,w,c	;volatile
 55105  00D4B6  6ED9               	movwf	fsr2l,c
 55106  00D4B8  6ADA               	clrf	fsr2h,c
 55107  00D4BA  0E06               	movlw	high _eusart1RxStatusBuffer
 55108  00D4BC  22DA               	addwfc	fsr2h,f,c
 55109  00D4BE  0E00               	movlw	0
 55110  00D4C0  6EDF               	movwf	indf2,c
 55111                           
 55112                           ; BSR set to: 3
 55113                           ;eusart1.c: 178: if(RCSTA1bits.FERR){
 55114  00D4C2  A4AB               	btfss	171,2,c	;volatile
 55115  00D4C4  D014               	goto	i2u1829_49
 55116                           
 55117                           ; BSR set to: 3
 55118                           ;eusart1.c: 179: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
 55119  00D4C6  0E00               	movlw	low _eusart1RxStatusBuffer
 55120  00D4C8  244B               	addwf	_eusart1RxHead^0,w,c	;volatile
 55121  00D4CA  6ED9               	movwf	fsr2l,c
 55122  00D4CC  6ADA               	clrf	fsr2h,c
 55123  00D4CE  0E06               	movlw	high _eusart1RxStatusBuffer
 55124  00D4D0  22DA               	addwfc	fsr2h,f,c
 55125  00D4D2  0106               	movlb	6	; () banked
 55126  00D4D4  82DF               	bsf	indf2,1,c
 55127                           
 55128                           ; BSR set to: 6
 55129                           ;eusart1.c: 180: EUSART1_FramingErrorHandler();
 55130  00D4D6  D801               	call	i2u1829_48
 55131  00D4D8  D00A               	goto	i2u1829_49
 55132  00D4DA                     i2u1829_48:
 55133  00D4DA  0005               	push	
 55134  00D4DC  6EFA               	movwf	pclath,c
 55135  00D4DE  0103               	movlb	3	; () banked
 55136  00D4E0  518A               	movf	_EUSART1_FramingErrorHandler& (0+255),w,b
 55137  00D4E2  6EFD               	movwf	tosl,c
 55138  00D4E4  518B               	movf	(_EUSART1_FramingErrorHandler+1)& (0+255),w,b
 55139  00D4E6  6EFE               	movwf	tosh,c
 55140  00D4E8  6AFF               	clrf	tosu,c
 55141  00D4EA  50FA               	movf	pclath,w,c
 55142  00D4EC  0012               	return		;indir
 55143  00D4EE                     i2u1829_49:
 55144                           
 55145                           ;eusart1.c: 181: };eusart1.c: 183: if(RCSTA1bits.OERR){
 55146  00D4EE  A2AB               	btfss	171,1,c	;volatile
 55147  00D4F0  D014               	goto	i2u1831_49
 55148                           
 55149                           ;eusart1.c: 184: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
 55150  00D4F2  0E00               	movlw	low _eusart1RxStatusBuffer
 55151  00D4F4  244B               	addwf	_eusart1RxHead^0,w,c	;volatile
 55152  00D4F6  6ED9               	movwf	fsr2l,c
 55153  00D4F8  6ADA               	clrf	fsr2h,c
 55154  00D4FA  0E06               	movlw	high _eusart1RxStatusBuffer
 55155  00D4FC  22DA               	addwfc	fsr2h,f,c
 55156  00D4FE  0106               	movlb	6	; () banked
 55157  00D500  84DF               	bsf	indf2,2,c
 55158                           
 55159                           ; BSR set to: 6
 55160                           ;eusart1.c: 185: EUSART1_OverrunErrorHandler();
 55161  00D502  D801               	call	i2u1831_48
 55162  00D504  D00A               	goto	i2u1831_49
 55163  00D506                     i2u1831_48:
 55164  00D506  0005               	push	
 55165  00D508  6EFA               	movwf	pclath,c
 55166  00D50A  0103               	movlb	3	; () banked
 55167  00D50C  5188               	movf	_EUSART1_OverrunErrorHandler& (0+255),w,b
 55168  00D50E  6EFD               	movwf	tosl,c
 55169  00D510  5189               	movf	(_EUSART1_OverrunErrorHandler+1)& (0+255),w,b
 55170  00D512  6EFE               	movwf	tosh,c
 55171  00D514  6AFF               	clrf	tosu,c
 55172  00D516  50FA               	movf	pclath,w,c
 55173  00D518  0012               	return		;indir
 55174  00D51A                     i2u1831_49:
 55175                           
 55176                           ;eusart1.c: 186: };eusart1.c: 188: if(eusart1RxStatusBuffer[eusart1RxHead].status){
 55177  00D51A  0E00               	movlw	low _eusart1RxStatusBuffer
 55178  00D51C  244B               	addwf	_eusart1RxHead^0,w,c	;volatile
 55179  00D51E  6ED9               	movwf	fsr2l,c
 55180  00D520  6ADA               	clrf	fsr2h,c
 55181  00D522  0E06               	movlw	high _eusart1RxStatusBuffer
 55182  00D524  22DA               	addwfc	fsr2h,f,c
 55183  00D526  50DF               	movf	indf2,w,c
 55184  00D528  B4D8               	btfsc	status,2,c
 55185  00D52A  D00C               	goto	i2l17569
 55186                           
 55187                           ;eusart1.c: 189: EUSART1_ErrorHandler();
 55188  00D52C  D801               	call	i2u1833_48
 55189  00D52E  0012               	return	
 55190  00D530                     i2u1833_48:
 55191  00D530  0005               	push	
 55192  00D532  6EFA               	movwf	pclath,c
 55193  00D534  0103               	movlb	3	; () banked
 55194  00D536  5186               	movf	_EUSART1_ErrorHandler& (0+255),w,b
 55195  00D538  6EFD               	movwf	tosl,c
 55196  00D53A  5187               	movf	(_EUSART1_ErrorHandler+1)& (0+255),w,b
 55197  00D53C  6EFE               	movwf	tosh,c
 55198  00D53E  6AFF               	clrf	tosu,c
 55199  00D540  50FA               	movf	pclath,w,c
 55200  00D542  0012               	return		;indir
 55201  00D544                     i2l17569:
 55202                           
 55203                           ;eusart1.c: 191: EUSART1_RxDataHandler();
 55204  00D544  EC69  F079         	call	_EUSART1_RxDataHandler	;wreg free
 55205  00D548  0012               	return		;funcret
 55206  00D54A                     __end_of_EUSART1_Receive_ISR:
 55207                           	callstack 0
 55208                           
 55209 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
 55210 ;; Defined at:
 55211 ;;		line 209 in file "mcc_generated_files/eusart1.c"
 55212 ;; Parameters:    Size  Location     Type
 55213 ;;		None
 55214 ;; Auto vars:     Size  Location     Type
 55215 ;;		None
 55216 ;; Return value:  Size  Location     Type
 55217 ;;                  1    wreg      void 
 55218 ;; Registers used:
 55219 ;;		None
 55220 ;; Tracked objects:
 55221 ;;		On entry : 3F/3
 55222 ;;		On exit  : 3F/3
 55223 ;;		Unchanged: 3E/0
 55224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 55225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55229 ;;Total ram usage:        0 bytes
 55230 ;; Hardware stack levels used:    1
 55231 ;; This function calls:
 55232 ;;		Nothing
 55233 ;; This function is called by:
 55234 ;;		_EUSART1_Initialize
 55235 ;;		_EUSART1_Receive_ISR
 55236 ;; This function uses a non-reentrant model
 55237 ;;
 55238                           
 55239                           	psect	text291
 55240  00F7E6                     __ptext291:
 55241                           	callstack 0
 55242  00F7E6                     _EUSART1_DefaultOverrunErrorHandler:
 55243                           	callstack 14
 55244                           
 55245                           ; BSR set to: 3
 55246                           ;eusart1.c: 212: RCSTA1bits.CREN = 0;
 55247                           
 55248                           ;incstack = 0
 55249  00F7E6  98AB               	bcf	171,4,c	;volatile
 55250                           
 55251                           ;eusart1.c: 213: RCSTA1bits.CREN = 1;
 55252  00F7E8  88AB               	bsf	171,4,c	;volatile
 55253                           
 55254                           ; BSR set to: 3
 55255  00F7EA  0012               	return		;funcret
 55256  00F7EC                     __end_of_EUSART1_DefaultOverrunErrorHandler:
 55257                           	callstack 0
 55258                           
 55259 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
 55260 ;; Defined at:
 55261 ;;		line 207 in file "mcc_generated_files/eusart1.c"
 55262 ;; Parameters:    Size  Location     Type
 55263 ;;		None
 55264 ;; Auto vars:     Size  Location     Type
 55265 ;;		None
 55266 ;; Return value:  Size  Location     Type
 55267 ;;                  1    wreg      void 
 55268 ;; Registers used:
 55269 ;;		None
 55270 ;; Tracked objects:
 55271 ;;		On entry : 3F/3
 55272 ;;		On exit  : 3F/3
 55273 ;;		Unchanged: 3E/0
 55274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 55275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55279 ;;Total ram usage:        0 bytes
 55280 ;; Hardware stack levels used:    1
 55281 ;; This function calls:
 55282 ;;		Nothing
 55283 ;; This function is called by:
 55284 ;;		_EUSART1_Initialize
 55285 ;;		_EUSART1_Receive_ISR
 55286 ;; This function uses a non-reentrant model
 55287 ;;
 55288                           
 55289                           	psect	text292
 55290  00F860                     __ptext292:
 55291                           	callstack 0
 55292  00F860                     _EUSART1_DefaultFramingErrorHandler:
 55293                           	callstack 14
 55294                           
 55295                           ; BSR set to: 3
 55296                           
 55297                           ; BSR set to: 3
 55298                           ;incstack = 0
 55299  00F860  0012               	return		;funcret
 55300  00F862                     __end_of_EUSART1_DefaultFramingErrorHandler:
 55301                           	callstack 0
 55302                           
 55303 ;; *************** function _EUSART1_DefaultErrorHandler *****************
 55304 ;; Defined at:
 55305 ;;		line 217 in file "mcc_generated_files/eusart1.c"
 55306 ;; Parameters:    Size  Location     Type
 55307 ;;		None
 55308 ;; Auto vars:     Size  Location     Type
 55309 ;;		None
 55310 ;; Return value:  Size  Location     Type
 55311 ;;                  1    wreg      void 
 55312 ;; Registers used:
 55313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 55314 ;; Tracked objects:
 55315 ;;		On entry : 3F/3
 55316 ;;		On exit  : 3F/2
 55317 ;;		Unchanged: 0/0
 55318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 55319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55323 ;;Total ram usage:        0 bytes
 55324 ;; Hardware stack levels used:    1
 55325 ;; Hardware stack levels required when called:    1
 55326 ;; This function calls:
 55327 ;;		_EUSART1_RxDataHandler
 55328 ;; This function is called by:
 55329 ;;		_EUSART1_Initialize
 55330 ;;		_EUSART1_Receive_ISR
 55331 ;; This function uses a non-reentrant model
 55332 ;;
 55333                           
 55334                           	psect	text293
 55335  00F7EC                     __ptext293:
 55336                           	callstack 0
 55337  00F7EC                     _EUSART1_DefaultErrorHandler:
 55338                           	callstack 13
 55339                           
 55340                           ; BSR set to: 3
 55341                           ;eusart1.c: 218: EUSART1_RxDataHandler();
 55342                           
 55343                           ; BSR set to: 3
 55344                           ;incstack = 0
 55345  00F7EC  EC69  F079         	call	_EUSART1_RxDataHandler	;wreg free
 55346                           
 55347                           ; BSR set to: 2
 55348  00F7F0  0012               	return		;funcret
 55349  00F7F2                     __end_of_EUSART1_DefaultErrorHandler:
 55350                           	callstack 0
 55351                           
 55352 ;; *************** function _EUSART1_RxDataHandler *****************
 55353 ;; Defined at:
 55354 ;;		line 197 in file "mcc_generated_files/eusart1.c"
 55355 ;; Parameters:    Size  Location     Type
 55356 ;;		None
 55357 ;; Auto vars:     Size  Location     Type
 55358 ;;		None
 55359 ;; Return value:  Size  Location     Type
 55360 ;;                  1    wreg      void 
 55361 ;; Registers used:
 55362 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 55363 ;; Tracked objects:
 55364 ;;		On entry : 0/3
 55365 ;;		On exit  : 3F/2
 55366 ;;		Unchanged: 0/0
 55367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 55368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 55372 ;;Total ram usage:        0 bytes
 55373 ;; Hardware stack levels used:    1
 55374 ;; This function calls:
 55375 ;;		Nothing
 55376 ;; This function is called by:
 55377 ;;		_EUSART1_Receive_ISR
 55378 ;;		_EUSART1_DefaultErrorHandler
 55379 ;; This function uses a non-reentrant model
 55380 ;;
 55381                           
 55382                           	psect	text294
 55383  00F2D2                     __ptext294:
 55384                           	callstack 0
 55385  00F2D2                     _EUSART1_RxDataHandler:
 55386                           	callstack 14
 55387                           
 55388                           ;eusart1.c: 199: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 55389                           
 55390                           ; BSR set to: 2
 55391                           ;incstack = 0
 55392  00F2D2  0E00               	movlw	low _eusart1RxBuffer
 55393  00F2D4  244B               	addwf	_eusart1RxHead^0,w,c	;volatile
 55394  00F2D6  6ED9               	movwf	fsr2l,c
 55395  00F2D8  6ADA               	clrf	fsr2h,c
 55396  00F2DA  0E07               	movlw	high _eusart1RxBuffer
 55397  00F2DC  22DA               	addwfc	fsr2h,f,c
 55398  00F2DE  CFAE FFDF          	movff	4014,indf2	;volatile
 55399  00F2E2  2A4B               	incf	_eusart1RxHead^0,f,c	;volatile
 55400                           
 55401                           ;eusart1.c: 200: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 55402  00F2E4  0E3F               	movlw	63
 55403  00F2E6  644B               	cpfsgt	_eusart1RxHead^0,c
 55404  00F2E8  D002               	goto	i2l16025
 55405                           
 55406                           ;eusart1.c: 201: {;eusart1.c: 202: eusart1RxHead = 0;
 55407  00F2EA  0E00               	movlw	0
 55408  00F2EC  6E4B               	movwf	_eusart1RxHead^0,c	;volatile
 55409  00F2EE                     i2l16025:
 55410                           
 55411                           ;eusart1.c: 203: };eusart1.c: 204: eusart1RxCount++;
 55412  00F2EE  0102               	movlb	2	; () banked
 55413  00F2F0  2BE4               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 55414                           
 55415                           ; BSR set to: 2
 55416  00F2F2  0012               	return		;funcret
 55417  00F2F4                     __end_of_EUSART1_RxDataHandler:
 55418                           	callstack 0
 55419                           
 55420                           	psect	text295
 55421  000000                     __ptext295:
 55422                           	callstack 0
 55423                           
 55424                           	psect	rparam
 55425  0000                     
 55426                           	psect	temp
 55427  000052                     btemp:
 55428                           	callstack 0
 55429  000052                     	ds	1
 55430  0000                     int$flags	set	btemp
 55431  0000                     wtemp8	set	btemp+1
 55432  0000                     ttemp5	set	btemp+1
 55433  0000                     ttemp6	set	btemp+4
 55434  0000                     ttemp7	set	btemp+8
 55435                           
 55436                           	psect	idloc
 55437                           
 55438                           ;Config register IDLOC0 @ 0x200000
 55439                           ;	unspecified, using default values
 55440  200000                     	org	2097152
 55441  200000  FF                 	db	255
 55442                           
 55443                           ;Config register IDLOC1 @ 0x200001
 55444                           ;	unspecified, using default values
 55445  200001                     	org	2097153
 55446  200001  FF                 	db	255
 55447                           
 55448                           ;Config register IDLOC2 @ 0x200002
 55449                           ;	unspecified, using default values
 55450  200002                     	org	2097154
 55451  200002  FF                 	db	255
 55452                           
 55453                           ;Config register IDLOC3 @ 0x200003
 55454                           ;	unspecified, using default values
 55455  200003                     	org	2097155
 55456  200003  FF                 	db	255
 55457                           
 55458                           ;Config register IDLOC4 @ 0x200004
 55459                           ;	unspecified, using default values
 55460  200004                     	org	2097156
 55461  200004  FF                 	db	255
 55462                           
 55463                           ;Config register IDLOC5 @ 0x200005
 55464                           ;	unspecified, using default values
 55465  200005                     	org	2097157
 55466  200005  FF                 	db	255
 55467                           
 55468                           ;Config register IDLOC6 @ 0x200006
 55469                           ;	unspecified, using default values
 55470  200006                     	org	2097158
 55471  200006  FF                 	db	255
 55472                           
 55473                           ;Config register IDLOC7 @ 0x200007
 55474                           ;	unspecified, using default values
 55475  200007                     	org	2097159
 55476  200007  FF                 	db	255
 55477                           
 55478                           	psect	config
 55479                           
 55480                           ; Padding undefined space
 55481  300000                     	org	3145728
 55482  300000  FF                 	db	255
 55483                           
 55484                           ;Config register CONFIG1H @ 0x300001
 55485                           ;	Oscillator Selection bits
 55486                           ;	FOSC = INTIO67, Internal oscillator block
 55487                           ;	4X PLL Enable
 55488                           ;	PLLCFG = OFF, Oscillator used directly
 55489                           ;	Primary clock enable bit
 55490                           ;	PRICLKEN = ON, Primary clock enabled
 55491                           ;	Fail-Safe Clock Monitor Enable bit
 55492                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 55493                           ;	Internal/External Oscillator Switchover bit
 55494                           ;	IESO = OFF, Oscillator Switchover mode disabled
 55495  300001                     	org	3145729
 55496  300001  28                 	db	40
 55497                           
 55498                           ;Config register CONFIG2L @ 0x300002
 55499                           ;	Power-up Timer Enable bit
 55500                           ;	PWRTEN = OFF, Power up timer disabled
 55501                           ;	Brown-out Reset Enable bits
 55502                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 55503                           ;	Brown Out Reset Voltage bits
 55504                           ;	BORV = 190, VBOR set to 1.90 V nominal
 55505  300002                     	org	3145730
 55506  300002  1F                 	db	31
 55507                           
 55508                           ;Config register CONFIG2H @ 0x300003
 55509                           ;	Watchdog Timer Enable bits
 55510                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
 55511                           ;	Watchdog Timer Postscale Select bits
 55512                           ;	WDTPS = 32768, 1:32768
 55513  300003                     	org	3145731
 55514  300003  3C                 	db	60
 55515                           
 55516                           ; Padding undefined space
 55517  300004                     	org	3145732
 55518  300004  FF                 	db	255
 55519                           
 55520                           ;Config register CONFIG3H @ 0x300005
 55521                           ;	CCP2 MUX bit
 55522                           ;	CCP2MX = PORTB3, CCP2 input/output is multiplexed with RB3
 55523                           ;	PORTB A/D Enable bit
 55524                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
 55525                           ;	P3A/CCP3 Mux bit
 55526                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
 55527                           ;	HFINTOSC Fast Start-up
 55528                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
 55529                           ;	Timer3 Clock input mux bit
 55530                           ;	T3CMX = PORTC0, T3CKI is on RC0
 55531                           ;	ECCP2 B output mux bit
 55532                           ;	P2BMX = PORTB5, P2B is on RB5
 55533                           ;	MCLR Pin Enable bit
 55534                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
 55535  300005                     	org	3145733
 55536  300005  BE                 	db	190
 55537                           
 55538                           ;Config register CONFIG4L @ 0x300006
 55539                           ;	Stack Full/Underflow Reset Enable bit
 55540                           ;	STVREN = ON, Stack full/underflow will cause Reset
 55541                           ;	Single-Supply ICSP Enable bit
 55542                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
 55543                           ;	Extended Instruction Set Enable bit
 55544                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 55545                           ;	Background Debug
 55546                           ;	DEBUG = OFF, Disabled
 55547  300006                     	org	3145734
 55548  300006  85                 	db	133
 55549                           
 55550                           ; Padding undefined space
 55551  300007                     	org	3145735
 55552  300007  FF                 	db	255
 55553                           
 55554                           ;Config register CONFIG5L @ 0x300008
 55555                           ;	Code Protection Block 0
 55556                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
 55557                           ;	Code Protection Block 1
 55558                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
 55559                           ;	Code Protection Block 2
 55560                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
 55561                           ;	Code Protection Block 3
 55562                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
 55563  300008                     	org	3145736
 55564  300008  0F                 	db	15
 55565                           
 55566                           ;Config register CONFIG5H @ 0x300009
 55567                           ;	Boot Block Code Protection bit
 55568                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 55569                           ;	Data EEPROM Code Protection bit
 55570                           ;	CPD = OFF, Data EEPROM not code-protected
 55571  300009                     	org	3145737
 55572  300009  C0                 	db	192
 55573                           
 55574                           ;Config register CONFIG6L @ 0x30000A
 55575                           ;	Write Protection Block 0
 55576                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
 55577                           ;	Write Protection Block 1
 55578                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
 55579                           ;	Write Protection Block 2
 55580                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
 55581                           ;	Write Protection Block 3
 55582                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
 55583  30000A                     	org	3145738
 55584  30000A  0F                 	db	15
 55585                           
 55586                           ;Config register CONFIG6H @ 0x30000B
 55587                           ;	Configuration Register Write Protection bit
 55588                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 55589                           ;	Boot Block Write Protection bit
 55590                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 55591                           ;	Data EEPROM Write Protection bit
 55592                           ;	WRTD = OFF, Data EEPROM not write-protected
 55593  30000B                     	org	3145739
 55594  30000B  E0                 	db	224
 55595                           
 55596                           ;Config register CONFIG7L @ 0x30000C
 55597                           ;	Table Read Protection Block 0
 55598                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
 55599                           ;	Table Read Protection Block 1
 55600                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
 55601                           ;	Table Read Protection Block 2
 55602                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
 55603                           ;	Table Read Protection Block 3
 55604                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
 55605  30000C                     	org	3145740
 55606  30000C  0F                 	db	15
 55607                           
 55608                           ;Config register CONFIG7H @ 0x30000D
 55609                           ;	Boot Block Table Read Protection bit
 55610                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 55611  30000D                     	org	3145741
 55612  30000D  40                 	db	64
 55613                           tosu	equ	0xFFF
 55614                           tosh	equ	0xFFE
 55615                           tosl	equ	0xFFD
 55616                           stkptr	equ	0xFFC
 55617                           pclatu	equ	0xFFB
 55618                           pclath	equ	0xFFA
 55619                           pcl	equ	0xFF9
 55620                           tblptru	equ	0xFF8
 55621                           tblptrh	equ	0xFF7
 55622                           tblptrl	equ	0xFF6
 55623                           tablat	equ	0xFF5
 55624                           prodh	equ	0xFF4
 55625                           prodl	equ	0xFF3
 55626                           indf0	equ	0xFEF
 55627                           postinc0	equ	0xFEE
 55628                           postdec0	equ	0xFED
 55629                           preinc0	equ	0xFEC
 55630                           plusw0	equ	0xFEB
 55631                           fsr0h	equ	0xFEA
 55632                           fsr0l	equ	0xFE9
 55633                           wreg	equ	0xFE8
 55634                           indf1	equ	0xFE7
 55635                           postinc1	equ	0xFE6
 55636                           postdec1	equ	0xFE5
 55637                           preinc1	equ	0xFE4
 55638                           plusw1	equ	0xFE3
 55639                           fsr1h	equ	0xFE2
 55640                           fsr1l	equ	0xFE1
 55641                           bsr	equ	0xFE0
 55642                           indf2	equ	0xFDF
 55643                           postinc2	equ	0xFDE
 55644                           postdec2	equ	0xFDD
 55645                           preinc2	equ	0xFDC
 55646                           plusw2	equ	0xFDB
 55647                           fsr2h	equ	0xFDA
 55648                           fsr2l	equ	0xFD9
 55649                           status	equ	0xFD8

Data Sizes:
    Strings     342
    Constant    1601
    Data        519
    BSS         1710
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      81
    BANK0           160    159     160
    BANK1           256    256     256
    BANK2           256    219     256
    BANK3           256      1     256
    BANK4           256      0     247
    BANK5           256      0     244
    BANK6           256      0     253
    BANK7           256      0      64
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    file@fatfs_demo$F388.fs	PTR struct . size(2) Largest target is 0
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_open@dj.fs	PTR struct . size(2) Largest target is 0
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    file.fs	PTR struct . size(2) Largest target is 0
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    I2C2_Read1ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0
		 -> DateTime(BANK2[7]), 

    I2C2_Read2ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 0
		 -> DateTime(BANK2[7]), 

    I2C2_Write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0
		 -> DateTime(BANK2[7]), 

    I2C2_Write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 0
		 -> DateTime(BANK2[7]), 

    I2C2_DO_TX$8872$0	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_DO_RX$8878$0	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_DO_TX_EMPTY$8884$0	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_DO_RX_EMPTY$8890$0	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_DO_TX_EMPTY$8889	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_DO_TX_EMPTY$8884	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C2_CallbackReturnReset(), I2C2_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), Absolute function(), 

    I2C2_DO_RX$8883	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_DO_RX$8878	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C2_CallbackReturnReset(), I2C2_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), Absolute function(), 

    I2C2_DO_TX$8877	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_DO_TX$8872	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> I2C2_CallbackReturnReset(), I2C2_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), Absolute function(), 

    I2C2_MasterFsm$8871	const PTR FTN()enum E5724 size(2) Largest target is 1
		 -> I2C2_DO_ADDRESS_NACK(), I2C2_DO_RESET(), I2C2_DO_RX_NACK_RESTART(), I2C2_DO_RX_NACK_STOP(), 
		 -> I2C2_DO_RX_ACK(), I2C2_DO_SEND_STOP(), I2C2_DO_SEND_RESTART(), I2C2_DO_SEND_RESTART_WRITE(), 
		 -> I2C2_DO_SEND_RESTART_READ(), I2C2_DO_TX_EMPTY(), I2C2_DO_RCEN(), I2C2_DO_RX(), 
		 -> I2C2_DO_TX(), I2C2_DO_SEND_ADR_WRITE(), I2C2_DO_SEND_ADR_READ(), I2C2_DO_IDLE(), 

    S35$4$0	PTR void  size(2) Largest target is 0

    S35$5$0	PTR void  size(1) Largest target is 2
		 -> GetTouchRawXY@data(COMRAM[2]), 

    I2C2_CallbackReturnStop@funPtr	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_CallbackReturnReset@funPtr	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    Absolute function$0	PTR FTN()void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    cb$0	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    S4738$0$0	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    S35$3$0	PTR void  size(2) Largest target is 559
		 -> NormalProc@str(BANK2[100]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), 
		 -> NULL(NULL[0]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_15(CODE[7]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 100
		 -> Buffer(BANK6[100]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 100
		 -> ButtonName(CODE[48]), NormalProc@str(BANK2[100]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 100
		 -> ButtonName(CODE[48]), NormalProc@str(BANK2[100]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 100
		 -> HEX(CODE[17]), Buffer(BANK6[100]), NULL(NULL[0]), 

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> getWeekdays@t(BANK0[18]), 

    memset@p1	PTR void  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 4
		 -> SD_SendCmd@address_bytes(COMRAM[4]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 4
		 -> SD_SendCmd@address_bytes(COMRAM[4]), 

    memcpy@s1	PTR const void  size(1) Largest target is 4
		 -> SD_SendCmd@address(COMRAM[4]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 4
		 -> SD_SendCmd@address(COMRAM[4]), 

    sp__ctime	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK6[27]), 

    sp__asctime	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK6[27]), 

    gmtime@tp	PTR const long  size(1) Largest target is 4
		 -> localtime@t(COMRAM[4]), 

    sp__gmtime	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK3[18]), 

    localtime@tp	PTR const long  size(1) Largest target is 4
		 -> getWeekdays@tim(BANK0[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_34(CODE[7]), sprintf@c(BANK0[1]), ?_sprintf(COMRAM[2]), drawAlarmTime@ampm(BANK2[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_33(CODE[6]), STR_32(CODE[9]), STR_31(CODE[21]), STR_30(CODE[15]), 
		 -> STR_29(CODE[15]), STR_28(CODE[20]), STR_27(CODE[20]), STR_26(CODE[4]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[4]), STR_22(CODE[3]), 
		 -> STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[27]), STR_16(CODE[22]), STR_14(CODE[5]), STR_13(CODE[5]), 
		 -> STR_12(CODE[7]), STR_11(CODE[21]), STR_9(CODE[24]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 100
		 -> drawTempHumidity@str2(BANK0[50]), drawTempHumidity@str1(BANK0[50]), drawDateTime@str(BANK1[100]), drawAlarmTime@str(BANK2[100]), 
		 -> DrawSmallCalendar@str(BANK0[5]), DrawBigCalendar@str(BANK0[5]), DrawAnalogClock@str(BANK1[3]), TouchAdjMsg@str(BANK0[100]), 
		 -> DrawSetBox@str(BANK1[100]), NormalProc@str(BANK2[100]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    TransCoordination@yg	PTR unsigned int  size(2) Largest target is 2
		 -> Test_y(BANK2[2]), 

    TransCoordination@xg	PTR unsigned int  size(2) Largest target is 2
		 -> Test_x(BANK2[2]), 

    GetTouchLocation@ty	PTR unsigned int  size(2) Largest target is 2
		 -> T_y2(BANK2[2]), T_y1(BANK2[2]), TouchY(BANK3[2]), 

    GetTouchLocation@tx	PTR unsigned int  size(2) Largest target is 2
		 -> T_x2(BANK2[2]), T_x1(COMRAM[2]), TouchX(BANK3[2]), 

    GetTouchRawXY@tx	PTR unsigned int  size(1) Largest target is 32
		 -> GetTouchLocation@samplesX(BANK0[32]), 

    GetTouchRawXY@ty	PTR unsigned int  size(1) Largest target is 32
		 -> GetTouchLocation@samplesY(BANK0[32]), 

    get_tempHumidity@humidity	PTR int  size(2) Largest target is 2
		 -> Humidity(BANK3[2]), 

    get_tempHumidity@temp	PTR int  size(2) Largest target is 2
		 -> Temp(BANK3[2]), 

    crc16@ptr	PTR unsigned char  size(1) Largest target is 8
		 -> get_tempHumidity@work(COMRAM[8]), 

    init_RTC@datetime	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    RTC_read@datetime	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    sp__localtime	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK3[18]), 

    getWeekdays@t2	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK3[18]), 

    getWeekdays@day	PTR unsigned char  size(1) Largest target is 1
		 -> dateErrorCheck@dd(BANK0[1]), DrawSmallCalendar@dd(BANK0[1]), DrawBigCalendar@dd(BANK0[1]), SettingProc@d(BANK0[1]), 

    getWeekdays@month	PTR unsigned char  size(1) Largest target is 1
		 -> dateErrorCheck@mm(BANK0[1]), DrawSmallCalendar@mm(BANK0[1]), DrawBigCalendar@mm(BANK0[1]), SettingProc@m(BANK0[1]), 

    getWeekdays@year	PTR unsigned char  size(1) Largest target is 1
		 -> dateErrorCheck@yy(BANK0[1]), DrawSmallCalendar@yr(BANK0[1]), DrawBigCalendar@yr(BANK0[1]), SettingProc@y(BANK0[1]), 

    dateErrorCheck@dateTime	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    RTC_setDate@datetime	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    RTC_setTime@datetime	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    IncDecTime@hh	PTR char  size(2) Largest target is 1
		 -> SettingProc@hh(BANK0[1]), NormalProc@hh(BANK2[1]), 

    IncDecTime@mm	PTR char  size(2) Largest target is 1
		 -> SettingProc@mm(BANK0[1]), NormalProc@mm(BANK2[1]), 

    RTC_setAlarmTime@alarmtime	PTR unsigned char  size(2) Largest target is 3
		 -> SmoothAlarmTime(BANK3[3]), AlarmTime(BANK2[3]), 

    display_drawChars@s	PTR unsigned char  size(2) Largest target is 100
		 -> drawTempHumidity@str2(BANK0[50]), drawTempHumidity@str1(BANK0[50]), drawDateTime@str(BANK1[100]), drawAlarmTime@str(BANK2[100]), 
		 -> DrawSmallCalendar@str(BANK0[5]), DrawBigCalendar@str(BANK0[5]), DrawAnalogClock@str(BANK1[3]), TouchAdjMsg@str(BANK0[100]), 
		 -> ButtonName(CODE[48]), DrawSetBox@str(BANK1[100]), 

    display_puts@s	PTR unsigned char  size(2) Largest target is 100
		 -> drawTempHumidity@str2(BANK0[50]), drawTempHumidity@str1(BANK0[50]), drawDateTime@str(BANK1[100]), drawAlarmTime@str(BANK2[100]), 
		 -> DrawSmallCalendar@str(BANK0[5]), DrawBigCalendar@str(BANK0[5]), DrawAnalogClock@str(BANK1[3]), TouchAdjMsg@str(BANK0[100]), 
		 -> ButtonName(CODE[48]), DrawSetBox@str(BANK1[100]), 

    display_SetFont@font	PTR const unsigned char  size(2) Largest target is 840
		 -> tinyfont(CODE[74]), font(CODE[840]), 

    drawDateTime@datetime	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    drawTime@datetime	PTR unsigned char  size(2) Largest target is 7
		 -> TmpTime(BANK3[7]), DateTime(BANK2[7]), 

    drawAlarmTime@alarmtime	PTR unsigned char  size(2) Largest target is 3
		 -> AlarmTime(BANK2[3]), 

    DrawAnalogClock@datetime	PTR unsigned char  size(2) Largest target is 7
		 -> TmpTime(BANK3[7]), DateTime(BANK2[7]), 

    DispTime@datetime	PTR unsigned char  size(2) Largest target is 7
		 -> TmpTime(BANK3[7]), DateTime(BANK2[7]), 

    GPRMCdatacheck@p	PTR unsigned char  size(2) Largest target is 100
		 -> HEX(CODE[17]), Buffer(BANK6[100]), NULL(NULL[0]), 

    CheckCheckSum@end	PTR unsigned char  size(2) Largest target is 100
		 -> HEX(CODE[17]), Buffer(BANK6[100]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 100
		 -> HEX(CODE[17]), Buffer(BANK6[100]), NULL(NULL[0]), 

    CheckCheckSum@buf	PTR unsigned char  size(2) Largest target is 100
		 -> Buffer(BANK6[100]), 

    CheckCheckSum@start	PTR unsigned char  size(2) Largest target is 100
		 -> HEX(CODE[17]), Buffer(BANK6[100]), NULL(NULL[0]), 

    BufferP	PTR unsigned char  size(2) Largest target is 100
		 -> Buffer(BANK6[100]), NULL(NULL[0]), 

    file.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    file.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    S5479$font	PTR const unsigned char  size(2) Largest target is 840
		 -> tinyfont(CODE[74]), font(CODE[840]), 

    Font.font	PTR const unsigned char  size(2) Largest target is 840
		 -> tinyfont(CODE[74]), font(CODE[840]), 

    I2C2_SetCallback@ptr	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_SetCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), Absolute function(), 

    I2C2_SetAddressNackCallback@ptr	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C2_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C2_SetDataCompleteCallback@ptr	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E97 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), Absolute function(), 

    I2C2_SetBuffer@buffer	PTR void  size(2) Largest target is 8
		 -> get_tempHumidity@work(COMRAM[8]), get_tempHumidity@data(COMRAM[3]), DateTime(BANK2[7]), I2C2_ReadDataBlock@reg(COMRAM[1]), 
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@reg(COMRAM[1]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@reg(COMRAM[1]), 
		 -> I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@reg(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), NULL(NULL[0]), 
		 -> I2C2_Read1ByteRegister@reg(COMRAM[1]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    S4738$data_ptr	PTR unsigned char  size(2) Largest target is 8
		 -> get_tempHumidity@work(COMRAM[8]), get_tempHumidity@data(COMRAM[3]), DateTime(BANK2[7]), I2C2_ReadDataBlock@reg(COMRAM[1]), 
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@reg(COMRAM[1]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@reg(COMRAM[1]), 
		 -> I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@reg(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), NULL(NULL[0]), 
		 -> I2C2_Read1ByteRegister@reg(COMRAM[1]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_Status.data_ptr	PTR unsigned char  size(2) Largest target is 8
		 -> get_tempHumidity@work(COMRAM[8]), get_tempHumidity@data(COMRAM[3]), DateTime(BANK2[7]), I2C2_ReadDataBlock@reg(COMRAM[1]), 
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@reg(COMRAM[1]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@reg(COMRAM[1]), 
		 -> I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@reg(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), NULL(NULL[0]), 
		 -> I2C2_Read1ByteRegister@reg(COMRAM[1]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    S4738$callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_Status.callbackPayload	PTR void [6] size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    S4738$callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C2_CallbackReturnReset(), I2C2_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), Absolute function(), 

    I2C2_Status.callbackTable	PTR FTN(PTR void ,)enum E97[6] size(2) Largest target is 1
		 -> I2C2_CallbackReturnReset(), I2C2_CallbackReturnStop(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), Absolute function(), 

    i2c2_fsmStateTable	const PTR FTN()enum E5724[16] size(2) Largest target is 1
		 -> I2C2_DO_ADDRESS_NACK(), I2C2_DO_RESET(), I2C2_DO_RX_NACK_RESTART(), I2C2_DO_RX_NACK_STOP(), 
		 -> I2C2_DO_RX_ACK(), I2C2_DO_SEND_STOP(), I2C2_DO_SEND_RESTART(), I2C2_DO_SEND_RESTART_WRITE(), 
		 -> I2C2_DO_SEND_RESTART_READ(), I2C2_DO_TX_EMPTY(), I2C2_DO_RCEN(), I2C2_DO_RX(), 
		 -> I2C2_DO_TX(), I2C2_DO_SEND_ADR_WRITE(), I2C2_DO_SEND_ADR_READ(), I2C2_DO_IDLE(), 

    SPI1_ReadBlock@block	PTR void  size(1) Largest target is 2
		 -> GetTouchRawXY@data(COMRAM[2]), 

    SPI1_ReadBlock@data	PTR unsigned char  size(1) Largest target is 2
		 -> GetTouchRawXY@data(COMRAM[2]), 

    SPI1_ExchangeBlock@block	PTR void  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), NULL(NULL[0]), 

    SPI1_ExchangeBlock@data	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RotaryHandler(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RotaryHandler(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer5Handler(), TMR5_DefaultInterruptHandler(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer5Handler(), TMR5_DefaultInterruptHandler(), Absolute function(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), Absolute function(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_handler(), INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> RTC_handler(), INT0_DefaultInterruptHandler(), Absolute function(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SoundHandler(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SoundHandler(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> AlarmWHandler(), IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> AlarmWHandler(), IOCB4_DefaultInterruptHandler(), Absolute function(), 

    sp__memcpy	PTR void  size(1) Largest target is 4
		 -> SD_SendCmd@address_bytes(COMRAM[4]), 

    SD_SPI_AsyncWriteTasks@info.pBuffer	PTR unsigned char  size(2) Largest target is 559
		 -> NormalProc@str(BANK2[100]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), 
		 -> NULL(NULL[0]), 

    SD_SPI_AsyncWriteTasks@info	PTR struct SD_ASYNC_IO size(1) Largest target is 14
		 -> SD_SPI_SectorWrite@info(BANK0[13]), 

    sp__memset	PTR void  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), NULL(NULL[0]), 

    SD_SPI_AsyncReadTasks@info.pBuffer	PTR unsigned char  size(2) Largest target is 559
		 -> NormalProc@str(BANK2[100]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), 
		 -> NULL(NULL[0]), 

    SD_SPI_AsyncReadTasks@info	PTR struct SD_ASYNC_IO size(1) Largest target is 14
		 -> SD_SPI_SectorRead@info(BANK0[13]), 

    SD_SPI_SectorWrite@buffer	PTR const unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), NULL(NULL[0]), 

    info.pBuffer	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), NULL(NULL[0]), 

    SD_SPI_SectorRead@buffer	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    info.pBuffer	PTR unsigned char  size(2) Largest target is 559
		 -> NormalProc@str(BANK2[100]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), 
		 -> NULL(NULL[0]), 

    S1779SD_ASYNC_IO$pBuffer	PTR unsigned char  size(2) Largest target is 559
		 -> NormalProc@str(BANK2[100]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), 
		 -> NULL(NULL[0]), 

    ioInfo.pBuffer	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_lseek@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_close@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_close@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_close@fp	PTR struct . size(2) Largest target is 36
		 -> file(BANK5[34]), file@fatfs_demo$F388(BANK6[34]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_sync@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_sync@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 36
		 -> file(BANK5[34]), file@fatfs_demo$F388(BANK6[34]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_write@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_write@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_write@fp	PTR struct . size(2) Largest target is 36
		 -> file(BANK5[34]), file@fatfs_demo$F388(BANK6[34]), 

    f_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> NormalProc@actualLength(BANK2[2]), FatFsDemo_Tasks@actualLength(COMRAM[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 100
		 -> NormalProc@str(BANK2[100]), FatFsDemo_Tasks@data(COMRAM[13]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 100
		 -> NormalProc@str(BANK2[100]), FatFsDemo_Tasks@data(COMRAM[13]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_read@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_open@fp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_open@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_10(CODE[3]), STR_8(CODE[12]), STR_7(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[10]), STR_1(CODE[3]), 

    f_open@fp	PTR struct . size(2) Largest target is 36
		 -> file(BANK5[34]), file@fatfs_demo$F388(BANK6[34]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dj.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_mount@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_10(CODE[3]), STR_8(CODE[12]), STR_7(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[10]), STR_1(CODE[3]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_10(CODE[3]), STR_8(CODE[12]), STR_7(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[10]), STR_1(CODE[3]), 

    validate$1212	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    validate@rfs	PTR PTR struct . size(2) Largest target is 2
		 -> f_lseek@fs(COMRAM[2]), f_close@fs(BANK0[2]), f_sync@fs(BANK0[2]), f_write@fs(BANK1[2]), 
		 -> f_read@fs(COMRAM[2]), 

    validate@obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    validate@obj	PTR struct . size(2) Largest target is 36
		 -> file(BANK5[34]), file@fatfs_demo$F388(BANK6[34]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    FatFs	PTR struct .[1] size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    find_volume@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK1[2]), f_mount@path(BANK0[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 2
		 -> f_open@fs(BANK1[2]), f_mount@fs(BANK0[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK1[2]), f_mount@path(BANK0[2]), f_mount@rp(BANK0[2]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_10(CODE[3]), STR_8(CODE[12]), STR_7(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[10]), STR_1(CODE[3]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_10(CODE[3]), STR_8(CODE[12]), STR_7(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[10]), STR_1(CODE[3]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_10(CODE[3]), STR_8(CODE[12]), STR_7(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[10]), STR_1(CODE[3]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    follow_path@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    follow_path@dp	PTR struct . size(2) Largest target is 42
		 -> f_open@dj(BANK1[40]), 

    follow_path@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    create_name@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    create_name@dp	PTR struct . size(2) Largest target is 42
		 -> f_open@dj(BANK1[40]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 42
		 -> dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), 

    create_name@path	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_10(CODE[3]), STR_8(CODE[12]), STR_7(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[10]), STR_1(CODE[3]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_register@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_register@dp	PTR struct . size(2) Largest target is 42
		 -> f_open@dj(BANK1[40]), 

    dir_register@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_find@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_find@dp	PTR struct . size(2) Largest target is 42
		 -> f_open@dj(BANK1[40]), 

    dir_find@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    st_clust@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_alloc@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 42
		 -> f_open@dj(BANK1[40]), 

    dir_alloc@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_next@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_next@dp	PTR struct . size(2) Largest target is 42
		 -> f_open@dj(BANK1[40]), 

    dir_next@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    S486$dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_sdi@dp.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 42
		 -> f_open@dj(BANK1[40]), 

    dir_sdi@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    dir_clear@ibuf	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    dir_clear@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    create_chain@obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    create_chain@obj	PTR struct . size(2) Largest target is 42
		 -> file(BANK5[34]), f_open@dj(BANK1[40]), file@fatfs_demo$F388(BANK6[34]), 

    create_chain@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    remove_chain@obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    remove_chain@obj	PTR struct . size(2) Largest target is 42
		 -> f_open@dj(BANK1[40]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    get_fat@obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    get_fat@obj	PTR struct . size(2) Largest target is 42
		 -> file(BANK5[34]), f_open@dj(BANK1[40]), file@fatfs_demo$F388(BANK6[34]), 

    get_fat@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    clst2sect@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    sync_window@fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_4(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 42
		 -> dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), STR_6(CODE[6]), STR_5(CODE[4]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 42
		 -> dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), STR_6(CODE[6]), STR_5(CODE[4]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), 
		 -> NULL(NULL[0]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), NormalProc@str(BANK2[100]), drive(BIGRAM[559]), 
		 -> dj.fn(COMRAM[12]), f_open@dj(BANK1[40]), drive@fatfs_demo$F369(BIGRAM[559]), FatFsDemo_Tasks@data(COMRAM[13]), 
		 -> NULL(NULL[0]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    st_dword@ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    st_word@ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    ld_dword@ptr	PTR const unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    ld_word@ptr	PTR const unsigned char  size(2) Largest target is 559
		 -> drive.win(BIGRAM[512]), drive.win(BIGRAM[512]), drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), 
		 -> NULL(NULL[0]), 

    S308$dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    file.dir_ptr	PTR unsigned char  size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    S301$fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    file.obj.fs	PTR struct . size(2) Largest target is 559
		 -> drive(BIGRAM[559]), drive@fatfs_demo$F369(BIGRAM[559]), NULL(NULL[0]), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    rdBlkRegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(2) Largest target is 5
		 -> I2C2_ReadDataBlock@bufferBlock(COMRAM[4]), I2C2_Write2ByteRegister@data(COMRAM[2]), I2C2_Write1ByteRegister@data(COMRAM[1]), I2C2_Read2ByteRegister@returnValue(COMRAM[2]), 
		 -> NULL(NULL[0]), I2C2_Read1ByteRegister@returnValue(COMRAM[1]), 

    I2C2_ReadDataBlock@data	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    S229$data	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    bufferBlock.data	PTR unsigned char  size(2) Largest target is 7
		 -> DateTime(BANK2[7]), 

    I2C2_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 8
		 -> get_tempHumidity@work(COMRAM[8]), 

    I2C2_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 3
		 -> get_tempHumidity@data(COMRAM[3]), 

    S35$spiISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    spiMaster.spiISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S35$setSpiISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    spiMaster.setSpiISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S35$readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ReadByte(), 

    spiMaster.readByte	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> SPI1_ReadByte(), 

    S35$writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_WriteByte(), 

    spiMaster.writeByte	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SPI1_WriteByte(), 

    S35$readBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_ReadBlock(), 

    spiMaster.readBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_ReadBlock(), 

    S35$writeBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_WriteBlock(), 

    spiMaster.writeBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_WriteBlock(), 

    S35$exchangeBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_ExchangeBlock(), 

    spiMaster.exchangeBlock	PTR FTN(PTR void ,unsigned int ,)void  size(2) Largest target is 1
		 -> SPI1_ExchangeBlock(), 

    S35$exchangeByte	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ExchangeByte(), 

    spiMaster.exchangeByte	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> SPI1_ExchangeByte(), 

    S35$spiOpen	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Touch2M_open(), SDSLOW_open(), LCD8M_open(), SDFAST_open(), 

    spiMaster.spiOpen	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Touch2M_open(), SDSLOW_open(), LCD8M_open(), SDFAST_open(), 

    S35$spiClose	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 

    spiMaster.spiClose	PTR FTN()void  size(2) Largest target is 1
		 -> SPI1_Close(), 


Critical Paths under _main in COMRAM

    _init_RTC->_dateErrorCheck
    _glcd_init->_spi_master_open
    _TouchAdjust->_display_drawLine
    _display_drawRoundRect->_display_drawCircleHelper
    _display_drawCircleHelper->_lcd_draw_pixel_at
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR5_Initialize->_TMR5_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _NormalProc->_drawTempHumidity
    _resetCTFG->_I2C2_Write1ByteRegister
    _lcd_fill->_addset
    _glcd_init2->_spi_master_open
    _get_tempHumidity->_I2C2_ReadNBytes
    _get_tempHumidity->_I2C2_WriteNBytes
    _I2C2_MasterRead->_I2C2_MasterOperation
    _f_write->_disk_write
    _ld_clust->_ld_word
    _create_name->_mem_set
    _dir_clear->_disk_write
    _clst2sect->___lmul
    _disk_initialize->_SD_SPI_MediaInitialize
    _SD_SPI_MediaInitialize->_SD_SendCmd
    _SD_SPI_DelayMilliseconds->_SPI1_ExchangeByte
    _validate->_disk_status
    _sync_fs->_disk_write
    _st_dword->_get_fattime
    _st_clust->_st_word
    _sync_window->_disk_write
    _disk_write->_SD_SPI_SectorWrite
    _SD_SPI_SectorWrite->_SD_SPI_AsyncWriteTasks
    _SD_SPI_AsyncWriteTasks->_SD_SendCmd
    _disk_read->_SD_SPI_SectorRead
    _SD_SPI_SectorRead->_SD_SPI_AsyncReadTasks
    _SD_SPI_AsyncReadTasks->_SD_SendCmd
    _SD_SendCmd->_memcpy
    _get_fattime->_decimalToFatTime
    _decimalToFatTime->_Bcd2Hex
    _DispTime->_Dispseg
    _Dispseg->_display_fillTriangle
    _DrawBigCalendar->_getWeekdays
    _DrawSmallCalendar->_getWeekdays
    _display_drawRect->_drawHLine
    _display_drawRect->_drawVLine
    _DrawAnalogClock->_display_drawLine
    _sprintf->___lwdiv
    _display_fillTriangle->_drawHLine
    _display_fillCircle->_display_fillCircleHelper
    _display_fillCircleHelper->_drawVLine
    _display_drawTriangle->_display_drawLine
    _display_drawLine->_writeLine
    _writeLine->_lcd_draw_pixel_at
    _drawVLine->_addset
    _drawHLine->_addset
    _display_drawCircle->_lcd_draw_pixel_at
    _display_drawChars->_display_puts
    _display_puts->_display_putc
    _display_putc->_fillRect
    _lcd_draw_pixel_at->_lcd_set_cursor
    _lcd_set_cursor->_lcd_set_cursor_x
    _lcd_set_cursor->_lcd_set_cursor_y
    _lcd_set_cursor_y->_spi_master_open
    _lcd_set_cursor_x->_spi_master_open
    _draw_pixel->_spi_master_open
    _fillRect->_lcd_fill_rect
    _lcd_fill_rect->_addset
    _addset->_spi_master_open
    _write_data->_SPI1_ExchangeByte
    _write_command->_SPI1_ExchangeByte
    _Touch2M_open->_SPI1_Open
    _SDSLOW_open->_SPI1_Open
    _SDFAST_open->_SPI1_Open
    _LCD8M_open->_SPI1_Open
    _cosd->_sind
    _sind->___lwmod
    _WriteYMD->_DATAEE_WriteByte
    _TransCoordination->___aldiv
    _RTC_setAlarmTime->_I2C2_Write1ByteRegister
    _RTC_resetAlarm->_I2C2_Write1ByteRegister
    _RTC_read->_I2C2_ReadDataBlock
    _GetTouchLocation->___lwdiv
    _GetTouchRawXY->_SPI1_ReadBlock
    _SPI1_ReadBlock->_SPI1_ExchangeByte
    _GPRMCdatacheck->_dateErrorCheck
    _dateErrorCheck->_getWeekdays
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    ___wmul->_cosd
    ___lwdiv->___wmul
    _isleap->___lwmod
    _localtime->_gmtime
    _gmtime->___aldiv
    _dylen->___lwmod
    ___aldiv->___lmul
    _Hex2Bcd->___lbdiv
    _Hex2Bcd->___lbmod
    _RTC_setTime->_I2C2_Write1ByteRegister
    _RTC_setDate->_I2C2_Write1ByteRegister
    _I2C2_SetAddressNackCallback->_I2C2_SetCallback
    _I2C2_MasterWrite->_I2C2_MasterOperation
    _I2C2_Poller->_I2C2_MasterFsm
    _I2C2_MasterFsm->_I2C2_DO_TX
    _I2C2_DO_TX_EMPTY->_I2C2_CallbackReturnReset
    _I2C2_DO_TX_EMPTY->_I2C2_CallbackReturnStop
    _I2C2_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C2_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C2_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C2_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C2_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C2_DO_TX->_I2C2_CallbackReturnReset
    _I2C2_DO_TX->_I2C2_CallbackReturnStop
    _I2C2_DO_TX->_rd1RegCompleteHandler
    _I2C2_DO_TX->_rd2RegCompleteHandler
    _I2C2_DO_TX->_rdBlkRegCompleteHandler
    _I2C2_DO_TX->_wr1RegCompleteHandler
    _I2C2_DO_TX->_wr2RegCompleteHandler
    _I2C2_DO_SEND_ADR_WRITE->_I2C2_MasterSendTxData
    _I2C2_DO_RX->_I2C2_CallbackReturnReset
    _I2C2_DO_RX->_I2C2_CallbackReturnStop
    _I2C2_DO_RX->_rd1RegCompleteHandler
    _I2C2_DO_RX->_rd2RegCompleteHandler
    _I2C2_DO_RX->_rdBlkRegCompleteHandler
    _I2C2_DO_RX->_wr1RegCompleteHandler
    _I2C2_DO_RX->_wr2RegCompleteHandler
    _I2C2_DO_ADDRESS_NACK->_I2C2_CallbackReturnReset
    _I2C2_DO_ADDRESS_NACK->_I2C2_CallbackReturnStop
    _I2C2_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C2_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C2_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C2_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C2_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C2_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C2_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C2_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C2_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C2_SetDataCompleteCallback
    _I2C2_SetDataCompleteCallback->_I2C2_SetCallback
    _CheckCheckSum->_strchr
    _AlarmInitialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR5_CallBack->_Timer5Handler
    _Timer5Handler->_EUSART1_Read
    _TMR1_ISR->_RotaryHandler
    _TMR1_ISR->_TMR1_WriteTimer
    _TMR0_CallBack->_SoundHandler
    _AlarmWHandler->i2_AlarmSoundOn

Critical Paths under _main in BANK0

    _init_RTC->_dateErrorCheck
    _TouchAdjust->_TouchAdjMsg
    _TouchAdjMsg->_display_drawChars
    _SlideSWProc->_drawAlarmTime
    _SettingProc->_ButtonCheck
    _DrawSetBox->_drawTime
    _f_write->_create_chain
    _f_open->_follow_path
    _remove_chain->_put_fat
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _dir_clear->_sync_window
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_SD_SPI_MediaInitialize
    _check_fs->_move_window
    _f_close->_f_sync
    _f_sync->_move_window
    _f_sync->_sync_fs
    _sync_fs->_sync_window
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_SD_SPI_SectorWrite
    _disk_read->_SD_SPI_SectorRead
    _drawTempHumidity->_display_drawChars
    _drawDateTime->_drawTime
    _drawTime->_DispTime
    _DispTime->_Dispseg
    _Dispseg->_display_fillTriangle
    _drawCalendar->_Draw3month
    _DrawBigCalendar->_getWeekdays
    _Draw3month->_DrawSmallCalendar
    _DrawSmallCalendar->_getWeekdays
    _drawAlarmTime->_DrawAnalogClock
    _DrawAnalogClock->_display_fillTriangle
    _display_drawTriangle->_display_drawLine
    _display_puts->_display_putc
    _GPRMCdatacheck->_dateErrorCheck
    _dateErrorCheck->_getWeekdays
    _getWeekdays->_mktime

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_NormalProc
    _SettingProc->_DrawSetBox
    _ButtonCheck->_DrawSetBox
    _NormalProc->_drawDateTime
    _f_open->_follow_path
    _drawTime->_DrawAnalogClock
    _drawAlarmTime->_DrawAnalogClock

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_NormalProc
    _SlideSWProc->_drawAlarmTime
    _NormalProc->_drawAlarmTime

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               109   109      0 5646242
                                            252 BANK1      4     4      0
                                              0 BANK3      1     1      0
                    _AlarmInitialize
                      _AlarmSoundOff
                       _AlarmSoundOn
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                     _GPRMCdatacheck
           _INT0_SetInterruptHandler
          _IOCB4_SetInterruptHandler
                         _NormalProc
                  _SYSTEM_Initialize
                        _SettingProc
                        _SlideSWProc
           _TMR1_SetInterruptHandler
           _TMR5_SetInterruptHandler
                    _TMR5_StartTimer
                        _TouchAdjust
                    _display_SetFont
                          _glcd_init
                           _init_RTC
                           _lcd_fill
 ---------------------------------------------------------------------------------
 (1) _init_RTC                                             2     0      2  592743
                                             46 BANK0      2     0      2
             _I2C2_Read1ByteRegister
            _I2C2_Write1ByteRegister
                        _RTC_setDate
                        _RTC_setTime
                     _dateErrorCheck
                          _resetCTFG
 ---------------------------------------------------------------------------------
 (1) _glcd_init                                            2     2      0     651
                                             16 COMRAM     2     2      0
                         _SPI1_Close
                    _spi_master_open
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (1) _TouchAdjust                                        109   109      0  117627
                                            135 BANK0      9     9      0
                      _AlarmSoundOff
                       _AlarmSoundOn
                   _GetTouchLocation
                        _TouchAdjMsg
                   _display_drawLine
 ---------------------------------------------------------------------------------
 (2) _TouchAdjMsg                                        105   105      0   67456
                                             30 BANK0    105   105      0
                    _display_SetFont
                  _display_drawChars
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _TMR5_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SlideSWProc                                          1     1      0  570966
                                             59 BANK0      1     1      0
                      _AlarmSoundOff
                   _DATAEE_WriteByte
                     _RTC_resetAlarm
                   _RTC_setAlarmTime
                      _drawAlarmTime
 ---------------------------------------------------------------------------------
 (1) _SettingProc                                        123   123      0 1474492
                                             94 BANK0     23    23      0
                            _Bcd2Hex
                        _ButtonCheck
                         _DrawSetBox
                   _GetTouchLocation
                            _Hex2Bcd
                         _IncDecTime
                        _RTC_setDate
                        _RTC_setTime
                  _TransCoordination
                           _WriteYMD
                            ___awmod
                             ___wmul
                  _display_drawChars
              _display_drawRoundRect
                           _drawTime
                        _getWeekdays
                           _lcd_fill
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _display_drawRoundRect                               20     8     12   28788
                                             51 COMRAM    16     4     12
                                              0 BANK0      4     4      0
           _display_drawCircleHelper
                          _drawHLine
                          _drawVLine
 ---------------------------------------------------------------------------------
 (3) _display_drawCircleHelper                            21    12      9   12938
                                             30 COMRAM    21    12      9
                  _lcd_draw_pixel_at
 ---------------------------------------------------------------------------------
 (2) _ButtonCheck                                          7     3      4  391629
                                             87 BANK0      7     3      4
                         _ButtonPush
                         _DrawSetBox
 ---------------------------------------------------------------------------------
 (2) _DrawSetBox                                         103   103      0  390296
                                            147 BANK1    103   103      0
                      _AlarmSoundOff
                  _display_drawChars
                           _drawTime
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1539
                     _ADC_Initialize
                    _CCP5_Initialize
                   _EPWM1_Initialize
                   _EPWM2_Initialize
                 _EUSART1_Initialize
                 _EXT_INT_Initialize
                    _I2C2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
                    _TMR6_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0     211
           _TMR5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR5_SetInterruptHandler                             2     0      2     211
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     211
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     211
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     211
                                             15 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     211
          _IOCB4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCB4_SetInterruptHandler                            2     0      2     211
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     211
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             2     0      2     211
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     484
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2     121
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2     121
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2     121
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EPWM2_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NormalProc                                         113   113      0 2613806
                                            248 BANK1      4     4      0
                                            110 BANK2    109   109      0
                  _ADC_GetConversion
                      _AlarmSoundOff
                       _AlarmSoundOn
                            _Bcd2Hex
                         _ButtonPush
                   _DATAEE_WriteByte
                _EPWM1_LoadDutyValue
                   _GetTouchLocation
                            _Hex2Bcd
                         _IncDecTime
                           _RTC_read
                     _RTC_resetAlarm
                   _RTC_setAlarmTime
                  _TransCoordination
                           _WriteYMD
                            ___awmod
                             ___wmul
                 _display_fillCircle
                      _drawAlarmTime
                       _drawCalendar
                       _drawDateTime
                   _drawTempHumidity
                            _f_close
                            _f_mount
                             _f_open
                            _f_write
                   _get_tempHumidity
                         _glcd_init2
                           _lcd_fill
                          _resetCTFG
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     310
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _resetCTFG                                            0     0      0  112104
            _I2C2_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (1) _lcd_fill                                             8     6      2    3566
                                             24 COMRAM     8     6      2
                         _SPI1_Close
                             _addset
                    _spi_master_open
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _glcd_init2                                           1     1      0     620
                                             16 COMRAM     1     1      0
                         _SPI1_Close
                  _SPI1_ExchangeByte
                    _spi_master_open
                      _write_command
 ---------------------------------------------------------------------------------
 (2) _get_tempHumidity                                    21    17      4  317512
                                             34 COMRAM    21    17      4
             _I2C2_Read1ByteRegister
                    _I2C2_ReadNBytes
                   _I2C2_WriteNBytes
                              _crc16
 ---------------------------------------------------------------------------------
 (3) _crc16                                                6     4      2     390
                                             13 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _I2C2_WriteNBytes                                     4     1      3  105161
                                             30 COMRAM     4     1      3
                         _I2C2_Close
                   _I2C2_MasterWrite
                          _I2C2_Open
        _I2C2_SetAddressNackCallback
                     _I2C2_SetBuffer
 ---------------------------------------------------------------------------------
 (3) _I2C2_ReadNBytes                                      4     1      3  103102
                                             30 COMRAM     4     1      3
                         _I2C2_Close
                    _I2C2_MasterRead
                          _I2C2_Open
                     _I2C2_SetBuffer
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterRead                                      0     0      0  100582
               _I2C2_MasterOperation
 ---------------------------------------------------------------------------------
 (2) _I2C2_Read1ByteRegister                               3     2      1  108228
                                             30 COMRAM     3     2      1
                         _I2C2_Close
                   _I2C2_MasterWrite
                          _I2C2_Open
        _I2C2_SetAddressNackCallback
                     _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _f_write                                             43    35      8   94467
                                            117 BANK0     20    12      8
                                              0 BANK1     23    23      0
                          _clst2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                             _strlen (ARG)
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_open                                              82    77      5  510893
                                             10 BANK1     82    77      5
                          _clst2sect
                       _dir_register
                        _find_volume
                        _follow_path
                            _get_fat
                        _get_fattime
                           _ld_clust
                           _ld_dword
                        _move_window
                       _remove_chain
                           _st_clust
                           _st_dword
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        25    15     10   48763
                                             88 BANK0     25    15     10
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                         14    10      4  180740
                                            155 BANK0      4     0      4
                                              0 BANK1     10    10      0
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            12     8      4    1880
                                             20 COMRAM    12     8      4
                            _ld_word
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             8     6      2  146355
                                            147 BANK0      8     6      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _create_name                                         21    18      3    3425
                                             21 COMRAM    21    18      3
                            _chk_chr
                            _dbc_1st
                            _dbc_2nd
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _dbc_2nd                                              3     1      2     186
                                             13 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (5) _dbc_1st                                              3     1      2     124
                                             13 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     307
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         5     3      2  166132
                                              0 BANK1      5     3      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _mem_cpy                                             10     4      6    1428
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           12     8      4  145310
                                            147 BANK0     12     8      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             30    24      6   28089
                                             82 BANK0     30    24      6
                          _clst2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            30    26      4   98842
                                            117 BANK0     30    26      4
                          _clst2sect
                       _create_chain
                          _dir_clear
                            _get_fat
 ---------------------------------------------------------------------------------
 (6) _dir_clear                                           18    12      6   20468
                                             44 BANK0     18    12      6
                          _clst2sect
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _clst2sect                                           12     6      6    3566
                                             25 COMRAM    12     6      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _create_chain                                        29    23      6   50409
                                             88 BANK0     29    23      6
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _put_fat                                             33    23     10   24826
                                             55 BANK0     33    23     10
                           _ld_dword
                        _move_window
                           _st_dword
                            _st_word
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             27    21      6   22781
                                             55 BANK0     27    21      6
                           _ld_dword
                            _ld_word
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   61253
                                            133 BANK0     12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   58407
                                             62 BANK0     71    66      5
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                           _ld_dword
                            _ld_word
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _ld_dword                                            13     9      4    1250
                                             13 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        15    13      2    1076
                                             13 COMRAM    15    13      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                      2     2      0    7413
                                             54 COMRAM     2     2      0
             _SD_SPI_MediaInitialize
 ---------------------------------------------------------------------------------
 (5) _SD_SPI_MediaInitialize                              50    50      0    7342
                                             43 COMRAM    11    11      0
                                              0 BANK0     39    39      0
                         _LCD8M_open *
                        _SDFAST_open *
                        _SDSLOW_open *
           _SD_SPI_DelayMilliseconds
                         _SD_SendCmd
                         _SPI1_Close *
                  _SPI1_ExchangeByte *
                       _Touch2M_open *
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _SD_SPI_DelayMilliseconds                             5     5      0      96
                                             14 COMRAM     5     5      0
                  _SPI1_ExchangeByte *
 ---------------------------------------------------------------------------------
 (4) _check_fs                                             7     1      6   20669
                                             55 BANK0      7     1      6
                            _ld_word
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6    1045
                                             13 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (5) _ld_word                                              7     5      2    1210
                                             13 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     641
                                             13 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              5     3      2   48108
                                             66 BANK0      5     3      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                              11     9      2   46137
                                             55 BANK0     11     9      2
                        _get_fattime
                        _move_window
                           _st_clust
                           _st_dword
                            _st_word
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (3) _validate                                            11     7      4    1504
                                             15 COMRAM    11     7      4
                        _disk_status
 ---------------------------------------------------------------------------------
 (4) _disk_status                                          2     2      0      74
                                             13 COMRAM     2     2      0
          _SD_SPI_IsMediaInitialized
              _SD_SPI_IsMediaPresent
            _SD_SPI_IsWriteProtected
 ---------------------------------------------------------------------------------
 (5) _SD_SPI_IsWriteProtected                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SD_SPI_IsMediaPresent                                0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SD_SPI_IsMediaInitialized                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   20199
                                             44 BANK0     11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                           _st_dword
                            _st_word
                        _sync_window
 ---------------------------------------------------------------------------------
 (5) _st_dword                                             6     0      6    1991
                                             35 COMRAM     6     0      6
                        _get_fattime (ARG)
 ---------------------------------------------------------------------------------
 (7) _mem_set                                              8     2      6    1210
                                             13 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                           5     2      3     245
                                             13 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             9     1      8    1765
                                             17 COMRAM     9     1      8
                            _st_word
 ---------------------------------------------------------------------------------
 (5) _st_word                                              4     0      4    1067
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _move_window                                         11     5      6   17744
                                             44 BANK0     11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _sync_window                                         19    17      2    7930
                                             25 BANK0     19    17      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (4) _disk_write                                          10     2      8    7040
                                             67 COMRAM     2     2      0
                                             17 BANK0      8     0      8
                 _SD_SPI_SectorWrite
 ---------------------------------------------------------------------------------
 (5) _SD_SPI_SectorWrite                                  27    19      8    5526
                                             57 COMRAM    10     2      8
                                              0 BANK0     17    17      0
                         _LCD8M_open *
                        _SDFAST_open *
                        _SDSLOW_open *
             _SD_SPI_AsyncWriteTasks
                         _SPI1_Close *
                       _Touch2M_open *
 ---------------------------------------------------------------------------------
 (6) _SD_SPI_AsyncWriteTasks                              14    13      1    4206
                                             43 COMRAM    14    13      1
                         _SD_SendCmd
                 _SPI1_ExchangeBlock *
                  _SPI1_ExchangeByte *
 ---------------------------------------------------------------------------------
 (4) _disk_read                                           10     2      8    6472
                                             64 COMRAM     2     2      0
                                             17 BANK0      8     0      8
                  _SD_SPI_SectorRead
 ---------------------------------------------------------------------------------
 (5) _SD_SPI_SectorRead                                   27    19      8    5828
                                             54 COMRAM    10     2      8
                                              0 BANK0     17    17      0
                         _LCD8M_open *
                        _SDFAST_open *
                        _SDSLOW_open *
              _SD_SPI_AsyncReadTasks
                         _SPI1_Close *
                       _Touch2M_open *
 ---------------------------------------------------------------------------------
 (6) _SD_SPI_AsyncReadTasks                               11    10      1    4520
                                             43 COMRAM    11    10      1
                         _SD_SendCmd
                 _SPI1_ExchangeBlock *
                  _SPI1_ExchangeByte *
                             _memset
 ---------------------------------------------------------------------------------
 (7) _memset                                               8     2      6     407
                                             13 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (7) _SPI1_ExchangeBlock                                   6     2      4     390
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _SD_SendCmd                                          23    18      5    3125
                                             20 COMRAM    23    18      5
                  _SPI1_ExchangeByte *
                             _memcpy
 ---------------------------------------------------------------------------------
 (8) _memcpy                                               7     3      4     478
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _get_fattime                                          5     1      4     837
                                             30 COMRAM     5     1      4
                            _Bcd2Hex
                   _decimalToFatTime
 ---------------------------------------------------------------------------------
 (4) _decimalToFatTime                                    15     8      7     775
                                             15 COMRAM    15     8      7
                            _Bcd2Hex (ARG)
 ---------------------------------------------------------------------------------
 (2) _drawTempHumidity                                   105   101      4   72040
                                             65 COMRAM     4     0      4
                                             30 BANK0    101   101      0
                            ___awdiv
                            ___awmod
                  _display_drawChars
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _drawDateTime                                       107   105      2  390318
                                             87 BANK0      6     4      2
                                            147 BANK1    101   101      0
                  _display_drawChars
                           _drawTime
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _drawTime                                           105   101      4  323144
                                             82 BANK0      5     1      4
                           _DispTime
                    _DrawAnalogClock
 ---------------------------------------------------------------------------------
 (3) _DispTime                                            20    11      9   58774
                                             62 BANK0     20    11      9
                            _Dispseg
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _Dispseg                                            144   136      8   47814
                                             54 COMRAM    12     4      8
                                             40 BANK0     22    22      0
               _display_fillTriangle
 ---------------------------------------------------------------------------------
 (2) _drawCalendar                                         5     5      0  248452
                                             81 BANK0      5     5      0
                            _Bcd2Hex
                         _Draw3month
                    _DrawBigCalendar
 ---------------------------------------------------------------------------------
 (3) _DrawBigCalendar                                     35    30      5  123231
                                             41 BANK0     35    30      5
                            _Bcd2Hex
                  _display_drawChars
                   _display_drawRect
                        _getWeekdays
                      _lcd_fill_rect
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _Draw3month                                           5     3      2  124899
                                             76 BANK0      5     3      2
                  _DrawSmallCalendar
 ---------------------------------------------------------------------------------
 (4) _DrawSmallCalendar                                   35    30      5  124103
                                             41 BANK0     35    30      5
                            _Bcd2Hex
                    _display_SetFont
                  _display_drawChars
                   _display_drawRect
                        _getWeekdays
                      _lcd_fill_rect
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _display_drawRect                                    12     2     10   14834
                                             38 COMRAM    12     2     10
                          _drawHLine
                          _drawVLine
 ---------------------------------------------------------------------------------
 (1) _display_SetFont                                      4     2      2     484
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _drawAlarmTime                                      116   114      2  343525
                                             53 BANK0      6     4      2
                                              0 BANK2    110   110      0
                    _DrawAnalogClock
                             ___wmul
                  _display_drawChars
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _DrawAnalogClock                                    165   156      9  263427
                                             40 BANK0     13     4      9
                                              0 BANK1    147   147      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                             ___wmul
                               _cosd
                  _display_drawChars
                 _display_drawCircle
                   _display_drawLine
               _display_drawTriangle
                 _display_fillCircle
               _display_fillTriangle
                               _sind
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             37    21     16   21978
                                             41 COMRAM    20     4     16
                                              0 BANK0     13    13      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             13 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _display_fillTriangle                                56    42     14   39115
                                             38 COMRAM    16     2     14
                                              0 BANK0     40    40      0
                            ___awdiv
                             ___wmul
                          _drawHLine
 ---------------------------------------------------------------------------------
 (4) _display_fillCircle                                  10     2      8   18731
                                             66 COMRAM     2     2      0
                                              0 BANK0      8     0      8
           _display_fillCircleHelper
                          _drawVLine
 ---------------------------------------------------------------------------------
 (5) _display_fillCircleHelper                            28    17     11    9964
                                             38 COMRAM    28    17     11
                          _drawVLine
 ---------------------------------------------------------------------------------
 (4) _display_drawTriangle                                14     0     14   47838
                                             10 BANK0     14     0     14
                   _display_drawLine
 ---------------------------------------------------------------------------------
 (2) _display_drawLine                                    16     6     10   43593
                                             63 COMRAM     6     6      0
                                              0 BANK0     10     0     10
                          _drawHLine
                          _drawVLine
                          _writeLine
 ---------------------------------------------------------------------------------
 (3) _writeLine                                           33    23     10   14000
                                             30 COMRAM    33    23     10
                            ___awdiv
                  _lcd_draw_pixel_at
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2333
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _drawVLine                                           14     6      8    7048
                                             24 COMRAM    14     6      8
                         _SPI1_Close
                             _addset
                    _spi_master_open
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _drawHLine                                           14     6      8    6328
                                             24 COMRAM    14     6      8
                         _SPI1_Close
                             _addset
                    _spi_master_open
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _display_drawCircle                                  20    12      8   12230
                                             30 COMRAM    20    12      8
                  _lcd_draw_pixel_at
 ---------------------------------------------------------------------------------
 (3) _display_drawChars                                   20     9     11   44705
                                             10 BANK0     20     9     11
                       _display_puts
                  _display_setCursor
               _display_setTextColor
                _display_setTextSize
 ---------------------------------------------------------------------------------
 (4) _display_setTextSize                                  3     3      0      99
                                             13 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _display_setTextColor                                 4     0      4     242
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _display_setCursor                                    4     0      4     242
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _display_puts                                         2     0      2   31346
                                             63 COMRAM     2     0      2
                       _display_putc
 ---------------------------------------------------------------------------------
 (5) _display_putc                                        15    15      0   31191
                                             58 COMRAM     5     5      0
                                              0 BANK0     10    10      0
                             ___wmul
                           _fillRect
                  _lcd_draw_pixel_at
 ---------------------------------------------------------------------------------
 (4) _lcd_draw_pixel_at                                    6     0      6    9493
                                             24 COMRAM     6     0      6
                         _draw_pixel
                     _lcd_set_cursor
 ---------------------------------------------------------------------------------
 (5) _lcd_set_cursor                                       4     0      4    2176
                                             20 COMRAM     4     0      4
                   _lcd_set_cursor_x
                   _lcd_set_cursor_y
 ---------------------------------------------------------------------------------
 (6) _lcd_set_cursor_y                                     4     2      2     967
                                             16 COMRAM     4     2      2
                         _SPI1_Close
                    _spi_master_open
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _lcd_set_cursor_x                                     4     2      2     967
                                             16 COMRAM     4     2      2
                         _SPI1_Close
                    _spi_master_open
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _draw_pixel                                           2     0      2     744
                                             16 COMRAM     2     0      2
                         _SPI1_Close
                    _spi_master_open
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            14     4     10    8648
                                             44 COMRAM    14     4     10
                      _lcd_fill_rect
 ---------------------------------------------------------------------------------
 (7) _lcd_fill_rect                                       20    10     10    5219
                                             24 COMRAM    20    10     10
                         _SPI1_Close
                             _addset
                    _spi_master_open
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _addset                                               8     0      8    2351
                                             16 COMRAM     8     0      8
                         _SPI1_Close
                    _spi_master_open
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _write_data                                           1     1      0      62
                                             14 COMRAM     1     1      0
                  _SPI1_ExchangeByte
 ---------------------------------------------------------------------------------
 (3) _write_command                                        1     1      0      62
                                             14 COMRAM     1     1      0
                  _SPI1_ExchangeByte
 ---------------------------------------------------------------------------------
 (2) _spi_master_open                                      1     1      0     527
                                             15 COMRAM     1     1      0
                         _LCD8M_open
                        _SDFAST_open
                        _SDSLOW_open
                       _Touch2M_open
 ---------------------------------------------------------------------------------
 (3) _Touch2M_open                                         0     0      0     124
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (3) _SDSLOW_open                                          0     0      0     124
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (3) _SDFAST_open                                          0     0      0     124
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (3) _LCD8M_open                                           0     0      0     124
                          _SPI1_Open
 ---------------------------------------------------------------------------------
 (4) _cosd                                                 2     0      2    4114
                                             26 COMRAM     2     0      2
                               _sind
 ---------------------------------------------------------------------------------
 (4) _sind                                                 8     6      2    2789
                                             18 COMRAM     8     6      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _WriteYMD                                             9     9      0    4210
                                             17 COMRAM     9     9      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     4     1      3    2650
                                             13 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      2     0      2    1235
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TransCoordination                                  118   110      8    4925
                                             39 COMRAM    18    10      8
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _RTC_setAlarmTime                                     2     0      2  112557
                                             33 COMRAM     2     0      2
            _I2C2_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _RTC_resetAlarm                                       0     0      0  112104
            _I2C2_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _RTC_read                                             2     0      2  108277
                                             40 COMRAM     2     0      2
                 _I2C2_ReadDataBlock
 ---------------------------------------------------------------------------------
 (3) _I2C2_ReadDataBlock                                  10     5      5  108156
                                             30 COMRAM    10     5      5
                         _I2C2_Close
                   _I2C2_MasterWrite
                          _I2C2_Open
        _I2C2_SetAddressNackCallback
                     _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _IncDecTime                                          10     4      6    1426
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _GetTouchLocation                                   186   182      4    6232
                                             41 COMRAM     9     5      4
                                              0 BANK0     77    77      0
                      _GetTouchRawXY
                         _SPI1_Close
                  _SPI1_ExchangeByte
                          _SPI1_Open
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) _SPI1_Open                                            2     2      0     124
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SPI1_Close                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetTouchRawXY                                        7     5      2    1085
                                             18 COMRAM     7     5      2
                  _SPI1_ExchangeByte
                     _SPI1_ReadBlock
 ---------------------------------------------------------------------------------
 (4) _SPI1_ReadBlock                                       4     1      3     490
                                             14 COMRAM     4     1      3
                  _SPI1_ExchangeByte
 ---------------------------------------------------------------------------------
 (3) _SPI1_ExchangeByte                                    1     1      0      31
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_LoadDutyValue                                  4     2      2     152
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ButtonPush                                          11     6      5     856
                                             13 COMRAM    11     6      5
 ---------------------------------------------------------------------------------
 (2) _AlarmSoundOn                                         3     3      0      31
                                             13 COMRAM     3     3      0
                        _TMR0_Reload
                    _TMR0_StartTimer
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_Reload                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _GPRMCdatacheck                                     110   110      0  264857
                                             46 BANK0     10    10      0
                            _Bcd2Hex
                      _CheckCheckSum
                            _Hex2Bcd
                        _RTC_setDate
                        _RTC_setTime
                     _dateErrorCheck
                             _strchr
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     1      6     462
                                             13 COMRAM     7     1      6
 ---------------------------------------------------------------------------------
 (2) _dateErrorCheck                                       6     4      2   35128
                                             68 COMRAM     1     1      0
                                             41 BANK0      5     3      2
                            _Bcd2Hex
                            _Hex2Bcd
                        _getWeekdays
 ---------------------------------------------------------------------------------
 (3) _getWeekdays                                         28    25      3   33494
                                             67 COMRAM     1     1      0
                                             14 BANK0     27    24      3
                          _localtime
                             _mktime
 ---------------------------------------------------------------------------------
 (4) _mktime                                              14    10      4   24278
                                              0 BANK0     14    10      4
                             ___lmul
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (5) _ymd_to_scalar                                       16    10      6   21570
                                             51 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (6) _years_to_days                                       10     6      4    4883
                                             41 COMRAM    10     6      4
                             ___lmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8    2228
                                             13 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (6) _months_to_days                                       2     0      2   14380
                                             41 COMRAM     2     0      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4   11858
                                             28 COMRAM     6     2      4
                               _cosd (ARG)
                               _sind (ARG)
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4    2401
                                             34 COMRAM     7     3      4
                            ___lwmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _isleap                                               4     2      2    1532
                                             18 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _localtime                                            6     4      2    6966
                                             48 COMRAM     6     4      2
                             _gmtime
 ---------------------------------------------------------------------------------
 (5) _gmtime                                               9     7      2    6738
                                             39 COMRAM     9     7      2
                            ___aldiv
                            ___almod
                            ___awmod
                              _dylen
 ---------------------------------------------------------------------------------
 (6) _dylen                                                3     1      2    1675
                                             18 COMRAM     3     1      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4    1312
                                             13 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4    2321
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___almod                                             10     2      8     973
                                             13 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (6) ___aldiv                                             14     6      8    1345
                                             25 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Hex2Bcd                                              2     2      0     863
                                             17 COMRAM     2     2      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     396
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     405
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _Bcd2Hex                                              2     2      0      62
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _RTC_setTime                                          2     0      2  112467
                                             33 COMRAM     2     0      2
            _I2C2_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _RTC_setDate                                          2     0      2  112498
                                             33 COMRAM     2     0      2
            _I2C2_Write1ByteRegister
 ---------------------------------------------------------------------------------
 (3) _I2C2_Write1ByteRegister                              3     1      2  112104
                                             30 COMRAM     3     1      2
                         _I2C2_Close
                   _I2C2_MasterWrite
                          _I2C2_Open
        _I2C2_SetAddressNackCallback
                     _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (4) _I2C2_SetAddressNackCallback                          4     0      4    2059
                                             18 COMRAM     4     0      4
                   _I2C2_SetCallback
 ---------------------------------------------------------------------------------
 (4) _I2C2_Open                                            2     2      0      68
                                             13 COMRAM     2     2      0
                _I2C2_MasterClearIrq
                    _I2C2_MasterOpen
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterOpen                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWrite                                     0     0      0  100582
               _I2C2_MasterOperation
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterOperation                                 2     2      0  100582
                                             28 COMRAM     2     2      0
                   _I2C2_MasterStart
                        _I2C2_Poller
 ---------------------------------------------------------------------------------
 (6) _I2C2_Poller                                          0     0      0  100514
                     _I2C2_MasterFsm
            _I2C2_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (7) _I2C2_MasterWaitForEvent                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C2_MasterFsm                                       2     2      0  100514
                                             26 COMRAM     2     2      0
               _I2C2_DO_ADDRESS_NACK *
                       _I2C2_DO_IDLE *
                       _I2C2_DO_RCEN *
                      _I2C2_DO_RESET *
                         _I2C2_DO_RX *
                     _I2C2_DO_RX_ACK *
            _I2C2_DO_RX_NACK_RESTART *
               _I2C2_DO_RX_NACK_STOP *
              _I2C2_DO_SEND_ADR_READ *
             _I2C2_DO_SEND_ADR_WRITE *
               _I2C2_DO_SEND_RESTART *
          _I2C2_DO_SEND_RESTART_READ *
         _I2C2_DO_SEND_RESTART_WRITE *
                  _I2C2_DO_SEND_STOP *
                         _I2C2_DO_TX *
                   _I2C2_DO_TX_EMPTY *
                _I2C2_MasterClearIrq
                  _I2C2_MasterIsNack
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_TX_EMPTY                                     0     0      0   25096
                   Absolute function *
           _I2C2_CallbackReturnReset *
            _I2C2_CallbackReturnStop *
               _I2C2_DO_SEND_RESTART
                  _I2C2_DO_SEND_STOP
                  _I2C2_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (9) _I2C2_MasterSetIrq                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_TX                                           2     2      0   25164
                                             24 COMRAM     2     2      0
                   Absolute function *
           _I2C2_CallbackReturnReset *
            _I2C2_CallbackReturnStop *
          _I2C2_DO_SEND_RESTART_READ
         _I2C2_DO_SEND_RESTART_WRITE
                  _I2C2_DO_SEND_STOP
                  _I2C2_MasterIsNack
              _I2C2_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _I2C2_MasterIsNack                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C2_DO_SEND_RESTART_WRITE                           0     0      0       0
           _I2C2_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (9) _I2C2_DO_SEND_RESTART_READ                            0     0      0       0
           _I2C2_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_SEND_ADR_WRITE                               0     0      0      31
              _I2C2_MasterSendTxData
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_SEND_ADR_READ                                0     0      0      31
              _I2C2_MasterSendTxData
 ---------------------------------------------------------------------------------
 (9) _I2C2_MasterSendTxData                                1     1      0      31
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_RX_ACK                                       0     0      0       0
                 _I2C2_MasterSendAck
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_RX                                           0     0      0   25096
                   Absolute function *
           _I2C2_CallbackReturnReset *
            _I2C2_CallbackReturnStop *
            _I2C2_DO_RX_NACK_RESTART
               _I2C2_DO_RX_NACK_STOP
               _I2C2_MasterGetRxData
                 _I2C2_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (9) _I2C2_MasterSendAck                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C2_MasterGetRxData                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_RX_NACK_STOP                                 0     0      0       0
                _I2C2_MasterSendNack
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_RX_NACK_RESTART                              0     0      0       0
                _I2C2_MasterSendNack
 ---------------------------------------------------------------------------------
 (9) _I2C2_MasterSendNack                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_RESET                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_RCEN                                         0     0      0       0
                 _I2C2_MasterStartRx
 ---------------------------------------------------------------------------------
 (9) _I2C2_MasterStartRx                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C2_DO_ADDRESS_NACK                                 0     0      0   25096
                   Absolute function *
           _I2C2_CallbackReturnReset *
            _I2C2_CallbackReturnStop *
               _I2C2_DO_SEND_RESTART
                  _I2C2_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (9) _wr2RegCompleteHandler                                2     0      2    4952
                                             22 COMRAM     2     0      2
                     _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _wr1RegCompleteHandler                                2     0      2    4952
                                             22 COMRAM     2     0      2
                     _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rdBlkRegCompleteHandler                              2     0      2    4983
                                             22 COMRAM     2     0      2
                     _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rd2RegCompleteHandler                                2     0      2    4952
                                             22 COMRAM     2     0      2
                     _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rd1RegCompleteHandler                                2     0      2    4952
                                             22 COMRAM     2     0      2
                     _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (4) _I2C2_SetDataCompleteCallback                         4     0      4    2779
                                             18 COMRAM     4     0      4
                   _I2C2_SetCallback
 ---------------------------------------------------------------------------------
 (5) _I2C2_SetCallback                                     5     1      4     997
                                             13 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _I2C2_SetBuffer                                       4     0      4    2142
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (9) _I2C2_DO_SEND_STOP                                    0     0      0       0
                    _I2C2_MasterStop
 ---------------------------------------------------------------------------------
 (10) _I2C2_MasterStop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C2_DO_SEND_RESTART                                 0     0      0       0
           _I2C2_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (10) _I2C2_MasterEnableRestart                            0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C2_CallbackReturnStop                              2     0      2       0
                                             22 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _I2C2_CallbackReturnReset                             2     0      2     305
                                             22 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (18) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (6) _I2C2_MasterStart                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C2_Close                                           1     1      0      37
                                             13 COMRAM     1     1      0
                _I2C2_MasterClearIrq
                   _I2C2_MasterClose
              _I2C2_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterDisableIrq                                0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterClose                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterClearIrq                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckCheckSum                                       21    19      2    1653
                                             19 COMRAM    21    19      2
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4    1204
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _AlarmInitialize                                      0     0      0     211
                      _AlarmSoundOff
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     211
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _AlarmSoundOff                                        0     0      0       0
                     _TMR0_StopTimer
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _INTERRUPT_InterruptManager                          6     6      0     663
                                              7 COMRAM     6     6      0
                   Absolute function *
                _EUSART1_Receive_ISR *
                           _INT0_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR5_ISR
 ---------------------------------------------------------------------------------
 (16) _TMR5_ISR                                            0     0      0     321
                      _TMR5_CallBack
                    _TMR5_WriteTimer
 ---------------------------------------------------------------------------------
 (17) _TMR5_WriteTimer                                     2     0      2     229
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) _TMR5_CallBack                                       0     0      0      92
                   Absolute function *
       _TMR5_DefaultInterruptHandler *
                      _Timer5Handler *
 ---------------------------------------------------------------------------------
 (18) _Timer5Handler                                       6     6      0      92
                                              1 COMRAM     6     6      0
                       _EUSART1_Read
            _EUSART1_get_last_status
                _EUSART1_is_rx_ready
 ---------------------------------------------------------------------------------
 (19) _EUSART1_is_rx_ready                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (19) _EUSART1_get_last_status                             0     0      0       0
 ---------------------------------------------------------------------------------
 (19) _EUSART1_Read                                        1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (18) _TMR5_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _TMR1_ISR                                            0     0      0     274
                   Absolute function *
                      _RotaryHandler *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (17) _TMR1_WriteTimer                                     2     0      2     229
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _RotaryHandler                                       2     2      0      45
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (16) _TMR0_ISR                                            0     0      0      46
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (17) _TMR0_CallBack                                       0     0      0      46
                   Absolute function *
                       _SoundHandler *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (18) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _SoundHandler                                        3     3      0      46
                                              0 COMRAM     3     3      0
                    i2_AlarmSoundOff
                  i2_TMR2_StartTimer
                   i2_TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (19) i2_AlarmSoundOff                                     0     0      0       0
                   i2_TMR0_StopTimer
                   i2_TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (19) i2_TMR2_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i2_TMR0_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _PIN_MANAGER_IOC                                     0     0      0      22
                          _IOCB4_ISR
 ---------------------------------------------------------------------------------
 (17) _IOCB4_ISR                                           0     0      0      22
                   Absolute function *
                      _AlarmWHandler *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (18) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _AlarmWHandler                                       0     0      0      22
                     i2_AlarmSoundOn
 ---------------------------------------------------------------------------------
 (19) i2_AlarmSoundOn                                      3     3      0      22
                                              0 COMRAM     3     3      0
                      i2_TMR0_Reload
                  i2_TMR0_StartTimer
                  i2_TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (19) i2_TMR2_StartTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i2_TMR0_StartTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (20) i2_TMR0_Reload                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _INT0_ISR                                            0     0      0       0
                      _INT0_CallBack
 ---------------------------------------------------------------------------------
 (17) _INT0_CallBack                                       0     0      0       0
                   Absolute function *
       _INT0_DefaultInterruptHandler *
                        _RTC_handler *
 ---------------------------------------------------------------------------------
 (18) _RTC_handler                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (18) _INT0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _EUSART1_Receive_ISR                                 0     0      0       0
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART1_DefaultOverrunErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART1_DefaultFramingErrorHandler                  0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART1_DefaultErrorHandler                         0     0      0       0
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART1_RxDataHandler                               0     0      0       0
 ---------------------------------------------------------------------------------
 (18) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AlarmInitialize
     _AlarmSoundOff
       _TMR0_StopTimer
       _TMR2_StopTimer
     _TMR0_SetInterruptHandler
   _AlarmSoundOff
     _TMR0_StopTimer
     _TMR2_StopTimer
   _AlarmSoundOn
     _TMR0_Reload
     _TMR0_StartTimer
     _TMR2_StartTimer
   _DATAEE_ReadByte
   _DATAEE_WriteByte
   _GPRMCdatacheck
     _Bcd2Hex
     _CheckCheckSum
       _strchr
     _Hex2Bcd
       ___lbdiv
       ___lbmod
     _RTC_setDate
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _RTC_setTime
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _dateErrorCheck
       _Bcd2Hex
       _Hex2Bcd
         ___lbdiv
         ___lbmod
       _getWeekdays
         _localtime
           _gmtime
             ___aldiv
               ___lmul (ARG)
             ___almod
             ___awmod
             _dylen
               ___lwmod
         _mktime
           ___lmul
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
             _years_to_days
               ___lmul
               ___lwdiv
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
     _strchr
     _strncmp
   _INT0_SetInterruptHandler
   _IOCB4_SetInterruptHandler
   _NormalProc
     _ADC_GetConversion
     _AlarmSoundOff
       _TMR0_StopTimer
       _TMR2_StopTimer
     _AlarmSoundOn
       _TMR0_Reload
       _TMR0_StartTimer
       _TMR2_StartTimer
     _Bcd2Hex
     _ButtonPush
     _DATAEE_WriteByte
     _EPWM1_LoadDutyValue
     _GetTouchLocation
       _GetTouchRawXY
         _SPI1_ExchangeByte
         _SPI1_ReadBlock
           _SPI1_ExchangeByte
       _SPI1_Close
       _SPI1_ExchangeByte
       _SPI1_Open
       ___lwdiv
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
     _Hex2Bcd
       ___lbdiv
       ___lbmod
     _IncDecTime
     _RTC_read
       _I2C2_ReadDataBlock
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _RTC_resetAlarm
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _RTC_setAlarmTime
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _TransCoordination
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _WriteYMD
       _DATAEE_ReadByte
       _DATAEE_WriteByte
     ___awmod
     ___wmul
       _cosd (ARG)
         _sind
           ___lwmod
       _sind (ARG)
         ___lwmod
       _strlen (ARG)
     _display_fillCircle
       _display_fillCircleHelper
         _drawVLine
           _SPI1_Close
           _addset
             _SPI1_Close
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_command
               _SPI1_ExchangeByte
             _write_data
               _SPI1_ExchangeByte
           _spi_master_open
             _LCD8M_open
               _SPI1_Open
             _SDFAST_open
               _SPI1_Open
             _SDSLOW_open
               _SPI1_Open
             _Touch2M_open
               _SPI1_Open
           _write_data
             _SPI1_ExchangeByte
       _drawVLine
         _SPI1_Close
         _addset
           _SPI1_Close
           _spi_master_open
             _LCD8M_open
               _SPI1_Open
             _SDFAST_open
               _SPI1_Open
             _SDSLOW_open
               _SPI1_Open
             _Touch2M_open
               _SPI1_Open
           _write_command
             _SPI1_ExchangeByte
           _write_data
             _SPI1_ExchangeByte
         _spi_master_open
           _LCD8M_open
             _SPI1_Open
           _SDFAST_open
             _SPI1_Open
           _SDSLOW_open
             _SPI1_Open
           _Touch2M_open
             _SPI1_Open
         _write_data
           _SPI1_ExchangeByte
     _drawAlarmTime
       _DrawAnalogClock
         ___awdiv
         ___awmod
         ___lwdiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
         ___wmul
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
         _cosd
           _sind
             ___lwmod
         _display_drawChars
           _display_puts
             _display_putc
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
               _fillRect
                 _lcd_fill_rect
                   _SPI1_Close
                   _addset
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
           _display_setCursor
           _display_setTextColor
           _display_setTextSize
         _display_drawCircle
           _lcd_draw_pixel_at
             _draw_pixel
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _lcd_set_cursor
               _lcd_set_cursor_x
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor_y
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
         _display_drawLine
           _drawHLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _drawVLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _writeLine
             ___awdiv
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
         _display_drawTriangle
           _display_drawLine
             _drawHLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _writeLine
               ___awdiv
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
         _display_fillCircle
           _display_fillCircleHelper
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
           _drawVLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
         _display_fillTriangle
           ___awdiv
           ___wmul
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _drawHLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
         _sind
           ___lwmod
         _sprintf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _isdigit (ARG)
       ___wmul
         _cosd (ARG)
           _sind
             ___lwmod
         _sind (ARG)
           ___lwmod
         _strlen (ARG)
       _display_drawChars
         _display_puts
           _display_putc
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _fillRect
               _lcd_fill_rect
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
         _display_setCursor
         _display_setTextColor
         _display_setTextSize
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
         _isdigit (ARG)
     _drawCalendar
       _Bcd2Hex
       _Draw3month
         _DrawSmallCalendar
           _Bcd2Hex
           _display_SetFont
           _display_drawChars
             _display_puts
               _display_putc
                 ___wmul
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
                 _fillRect
                   _lcd_fill_rect
                     _SPI1_Close
                     _addset
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_data
                       _SPI1_ExchangeByte
                 _lcd_draw_pixel_at
                   _draw_pixel
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor
                     _lcd_set_cursor_x
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
                     _lcd_set_cursor_y
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
             _display_setCursor
             _display_setTextColor
             _display_setTextSize
           _display_drawRect
             _drawHLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
           _getWeekdays
             _localtime
               _gmtime
                 ___aldiv
                   ___lmul (ARG)
                 ___almod
                 ___awmod
                 _dylen
                   ___lwmod
             _mktime
               ___lmul
               _ymd_to_scalar
                 _isleap
                   ___lwmod
                 _months_to_days
                   ___lwdiv
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       _cosd (ARG)
                         _sind
                           ___lwmod
                       _sind (ARG)
                         ___lwmod
                       _strlen (ARG)
                   ___wmul
                     _cosd (ARG)
                       _sind
                         ___lwmod
                     _sind (ARG)
                       ___lwmod
                     _strlen (ARG)
                 _years_to_days
                   ___lmul
                   ___lwdiv
                     ___lwmod (ARG)
                     ___wmul (ARG)
                       _cosd (ARG)
                         _sind
                           ___lwmod
                       _sind (ARG)
                         ___lwmod
                       _strlen (ARG)
           _lcd_fill_rect
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _sprintf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _isdigit (ARG)
       _DrawBigCalendar
         _Bcd2Hex
         _display_drawChars
           _display_puts
             _display_putc
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
               _fillRect
                 _lcd_fill_rect
                   _SPI1_Close
                   _addset
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
           _display_setCursor
           _display_setTextColor
           _display_setTextSize
         _display_drawRect
           _drawHLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _drawVLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
         _getWeekdays
           _localtime
             _gmtime
               ___aldiv
                 ___lmul (ARG)
               ___almod
               ___awmod
               _dylen
                 ___lwmod
           _mktime
             ___lmul
             _ymd_to_scalar
               _isleap
                 ___lwmod
               _months_to_days
                 ___lwdiv
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     _cosd (ARG)
                       _sind
                         ___lwmod
                     _sind (ARG)
                       ___lwmod
                     _strlen (ARG)
                 ___wmul
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
               _years_to_days
                 ___lmul
                 ___lwdiv
                   ___lwmod (ARG)
                   ___wmul (ARG)
                     _cosd (ARG)
                       _sind
                         ___lwmod
                     _sind (ARG)
                       ___lwmod
                     _strlen (ARG)
         _lcd_fill_rect
           _SPI1_Close
           _addset
             _SPI1_Close
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_command
               _SPI1_ExchangeByte
             _write_data
               _SPI1_ExchangeByte
           _spi_master_open
             _LCD8M_open
               _SPI1_Open
             _SDFAST_open
               _SPI1_Open
             _SDSLOW_open
               _SPI1_Open
             _Touch2M_open
               _SPI1_Open
           _write_data
             _SPI1_ExchangeByte
         _sprintf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _isdigit (ARG)
     _drawDateTime
       _display_drawChars
         _display_puts
           _display_putc
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _fillRect
               _lcd_fill_rect
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
         _display_setCursor
         _display_setTextColor
         _display_setTextSize
       _drawTime
         _DispTime
           _Dispseg
             _display_fillTriangle
               ___awdiv
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
               _drawHLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
           _fillRect
             _lcd_fill_rect
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
         _DrawAnalogClock
           ___awdiv
           ___awmod
           ___lwdiv
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
           ___wmul
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _cosd
             _sind
               ___lwmod
           _display_drawChars
             _display_puts
               _display_putc
                 ___wmul
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
                 _fillRect
                   _lcd_fill_rect
                     _SPI1_Close
                     _addset
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_data
                       _SPI1_ExchangeByte
                 _lcd_draw_pixel_at
                   _draw_pixel
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor
                     _lcd_set_cursor_x
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
                     _lcd_set_cursor_y
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
             _display_setCursor
             _display_setTextColor
             _display_setTextSize
           _display_drawCircle
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
           _display_drawLine
             _drawHLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _writeLine
               ___awdiv
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
           _display_drawTriangle
             _display_drawLine
               _drawHLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _drawVLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _writeLine
                 ___awdiv
                 _lcd_draw_pixel_at
                   _draw_pixel
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor
                     _lcd_set_cursor_x
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
                     _lcd_set_cursor_y
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
           _display_fillCircle
             _display_fillCircleHelper
               _drawVLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
           _display_fillTriangle
             ___awdiv
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _drawHLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
           _sind
             ___lwmod
           _sprintf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _isdigit (ARG)
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
         _isdigit (ARG)
     _drawTempHumidity
       ___awdiv
       ___awmod
       _display_drawChars
         _display_puts
           _display_putc
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _fillRect
               _lcd_fill_rect
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
         _display_setCursor
         _display_setTextColor
         _display_setTextSize
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
         _isdigit (ARG)
     _f_close
       _f_sync
         _get_fattime
           _Bcd2Hex
           _decimalToFatTime
             _Bcd2Hex (ARG)
         _move_window
           _disk_read
             _SD_SPI_SectorRead
               _LCD8M_open *
                 _SPI1_Open
               _SDFAST_open *
                 _SPI1_Open
               _SDSLOW_open *
                 _SPI1_Open
               _SD_SPI_AsyncReadTasks *
                 _SD_SendCmd
                   _SPI1_ExchangeByte *
                   _memcpy *
                 _SPI1_ExchangeBlock *
                 _SPI1_ExchangeByte *
                 _memset *
               _SPI1_Close *
               _Touch2M_open *
                 _SPI1_Open
           _sync_window
             _disk_write
               _SD_SPI_SectorWrite
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncWriteTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
         _st_clust
           _st_word
         _st_dword
           _get_fattime (ARG)
             _Bcd2Hex
             _decimalToFatTime
               _Bcd2Hex (ARG)
         _st_word
         _sync_fs
           _disk_ioctl
           _disk_write
             _SD_SPI_SectorWrite
               _LCD8M_open *
                 _SPI1_Open
               _SDFAST_open *
                 _SPI1_Open
               _SDSLOW_open *
                 _SPI1_Open
               _SD_SPI_AsyncWriteTasks *
                 _SD_SendCmd
                   _SPI1_ExchangeByte *
                   _memcpy *
                 _SPI1_ExchangeBlock *
                 _SPI1_ExchangeByte *
               _SPI1_Close *
               _Touch2M_open *
                 _SPI1_Open
           _mem_set
           _st_dword
             _get_fattime (ARG)
               _Bcd2Hex
               _decimalToFatTime
                 _Bcd2Hex (ARG)
           _st_word
           _sync_window
             _disk_write
               _SD_SPI_SectorWrite
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncWriteTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
         _validate
           _disk_status
             _SD_SPI_IsMediaInitialized
             _SD_SPI_IsMediaPresent
             _SD_SPI_IsWriteProtected
       _validate
         _disk_status
           _SD_SPI_IsMediaInitialized
           _SD_SPI_IsMediaPresent
           _SD_SPI_IsWriteProtected
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _ld_word
           _mem_cmp
           _move_window
             _disk_read
               _SD_SPI_SectorRead
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncReadTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                   _memset *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
             _sync_window
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
         _disk_initialize
           _SD_SPI_MediaInitialize
             _LCD8M_open *
               _SPI1_Open
             _SDFAST_open *
               _SPI1_Open
             _SDSLOW_open *
               _SPI1_Open
             _SD_SPI_DelayMilliseconds *
               _SPI1_ExchangeByte *
             _SD_SendCmd *
               _SPI1_ExchangeByte *
               _memcpy *
             _SPI1_Close *
             _SPI1_ExchangeByte *
             _Touch2M_open *
               _SPI1_Open
             ___lmul *
         _disk_status
           _SD_SPI_IsMediaInitialized
           _SD_SPI_IsMediaPresent
           _SD_SPI_IsWriteProtected
         _get_ldnumber
         _ld_dword
         _ld_word
         _move_window
           _disk_read
             _SD_SPI_SectorRead
               _LCD8M_open *
                 _SPI1_Open
               _SDFAST_open *
                 _SPI1_Open
               _SDSLOW_open *
                 _SPI1_Open
               _SD_SPI_AsyncReadTasks *
                 _SD_SendCmd
                   _SPI1_ExchangeByte *
                   _memcpy *
                 _SPI1_ExchangeBlock *
                 _SPI1_ExchangeByte *
                 _memset *
               _SPI1_Close *
               _Touch2M_open *
                 _SPI1_Open
           _sync_window
             _disk_write
               _SD_SPI_SectorWrite
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncWriteTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
       _get_ldnumber
     _f_open
       _clst2sect
         ___lmul
       _dir_register
         _dir_alloc
           _dir_next
             _clst2sect
               ___lmul
             _create_chain
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _SD_SPI_SectorRead
                       _LCD8M_open *
                         _SPI1_Open
                       _SDFAST_open *
                         _SPI1_Open
                       _SDSLOW_open *
                         _SPI1_Open
                       _SD_SPI_AsyncReadTasks *
                         _SD_SendCmd
                           _SPI1_ExchangeByte *
                           _memcpy *
                         _SPI1_ExchangeBlock *
                         _SPI1_ExchangeByte *
                         _memset *
                       _SPI1_Close *
                       _Touch2M_open *
                         _SPI1_Open
                   _sync_window
                     _disk_write
                       _SD_SPI_SectorWrite
                         _LCD8M_open *
                           _SPI1_Open
                         _SDFAST_open *
                           _SPI1_Open
                         _SDSLOW_open *
                           _SPI1_Open
                         _SD_SPI_AsyncWriteTasks *
                           _SD_SendCmd
                             _SPI1_ExchangeByte *
                             _memcpy *
                           _SPI1_ExchangeBlock *
                           _SPI1_ExchangeByte *
                         _SPI1_Close *
                         _Touch2M_open *
                           _SPI1_Open
               _put_fat
                 _ld_dword
                 _move_window
                   _disk_read
                     _SD_SPI_SectorRead
                       _LCD8M_open *
                         _SPI1_Open
                       _SDFAST_open *
                         _SPI1_Open
                       _SDSLOW_open *
                         _SPI1_Open
                       _SD_SPI_AsyncReadTasks *
                         _SD_SendCmd
                           _SPI1_ExchangeByte *
                           _memcpy *
                         _SPI1_ExchangeBlock *
                         _SPI1_ExchangeByte *
                         _memset *
                       _SPI1_Close *
                       _Touch2M_open *
                         _SPI1_Open
                   _sync_window
                     _disk_write
                       _SD_SPI_SectorWrite
                         _LCD8M_open *
                           _SPI1_Open
                         _SDFAST_open *
                           _SPI1_Open
                         _SDSLOW_open *
                           _SPI1_Open
                         _SD_SPI_AsyncWriteTasks *
                           _SD_SendCmd
                             _SPI1_ExchangeByte *
                             _memcpy *
                           _SPI1_ExchangeBlock *
                           _SPI1_ExchangeByte *
                         _SPI1_Close *
                         _Touch2M_open *
                           _SPI1_Open
                 _st_dword
                   _get_fattime (ARG)
                     _Bcd2Hex
                     _decimalToFatTime
                       _Bcd2Hex (ARG)
                 _st_word
             _dir_clear
               _clst2sect
                 ___lmul
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
               _mem_set
               _sync_window
                 _disk_write
                   _SD_SPI_SectorWrite
                     _LCD8M_open *
                       _SPI1_Open
                     _SDFAST_open *
                       _SPI1_Open
                     _SDSLOW_open *
                       _SPI1_Open
                     _SD_SPI_AsyncWriteTasks *
                       _SD_SendCmd
                         _SPI1_ExchangeByte *
                         _memcpy *
                       _SPI1_ExchangeBlock *
                       _SPI1_ExchangeByte *
                     _SPI1_Close *
                     _Touch2M_open *
                       _SPI1_Open
             _get_fat
               _ld_dword
               _ld_word
               _move_window
                 _disk_read
                   _SD_SPI_SectorRead
                     _LCD8M_open *
                       _SPI1_Open
                     _SDFAST_open *
                       _SPI1_Open
                     _SDSLOW_open *
                       _SPI1_Open
                     _SD_SPI_AsyncReadTasks *
                       _SD_SendCmd
                         _SPI1_ExchangeByte *
                         _memcpy *
                       _SPI1_ExchangeBlock *
                       _SPI1_ExchangeByte *
                       _memset *
                     _SPI1_Close *
                     _Touch2M_open *
                       _SPI1_Open
                 _sync_window
                   _disk_write
                     _SD_SPI_SectorWrite
                       _LCD8M_open *
                         _SPI1_Open
                       _SDFAST_open *
                         _SPI1_Open
                       _SDSLOW_open *
                         _SPI1_Open
                       _SD_SPI_AsyncWriteTasks *
                         _SD_SendCmd
                           _SPI1_ExchangeByte *
                           _memcpy *
                         _SPI1_ExchangeBlock *
                         _SPI1_ExchangeByte *
                       _SPI1_Close *
                       _Touch2M_open *
                         _SPI1_Open
           _dir_sdi
             _clst2sect
               ___lmul
             _get_fat
               _ld_dword
               _ld_word
               _move_window
                 _disk_read
                   _SD_SPI_SectorRead
                     _LCD8M_open *
                       _SPI1_Open
                     _SDFAST_open *
                       _SPI1_Open
                     _SDSLOW_open *
                       _SPI1_Open
                     _SD_SPI_AsyncReadTasks *
                       _SD_SendCmd
                         _SPI1_ExchangeByte *
                         _memcpy *
                       _SPI1_ExchangeBlock *
                       _SPI1_ExchangeByte *
                       _memset *
                     _SPI1_Close *
                     _Touch2M_open *
                       _SPI1_Open
                 _sync_window
                   _disk_write
                     _SD_SPI_SectorWrite
                       _LCD8M_open *
                         _SPI1_Open
                       _SDFAST_open *
                         _SPI1_Open
                       _SDSLOW_open *
                         _SPI1_Open
                       _SD_SPI_AsyncWriteTasks *
                         _SD_SendCmd
                           _SPI1_ExchangeByte *
                           _memcpy *
                         _SPI1_ExchangeBlock *
                         _SPI1_ExchangeByte *
                       _SPI1_Close *
                       _Touch2M_open *
                         _SPI1_Open
           _move_window
             _disk_read
               _SD_SPI_SectorRead
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncReadTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                   _memset *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
             _sync_window
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _SD_SPI_SectorRead
               _LCD8M_open *
                 _SPI1_Open
               _SDFAST_open *
                 _SPI1_Open
               _SDSLOW_open *
                 _SPI1_Open
               _SD_SPI_AsyncReadTasks *
                 _SD_SendCmd
                   _SPI1_ExchangeByte *
                   _memcpy *
                 _SPI1_ExchangeBlock *
                 _SPI1_ExchangeByte *
                 _memset *
               _SPI1_Close *
               _Touch2M_open *
                 _SPI1_Open
           _sync_window
             _disk_write
               _SD_SPI_SectorWrite
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncWriteTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _ld_word
           _mem_cmp
           _move_window
             _disk_read
               _SD_SPI_SectorRead
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncReadTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                   _memset *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
             _sync_window
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
         _disk_initialize
           _SD_SPI_MediaInitialize
             _LCD8M_open *
               _SPI1_Open
             _SDFAST_open *
               _SPI1_Open
             _SDSLOW_open *
               _SPI1_Open
             _SD_SPI_DelayMilliseconds *
               _SPI1_ExchangeByte *
             _SD_SendCmd *
               _SPI1_ExchangeByte *
               _memcpy *
             _SPI1_Close *
             _SPI1_ExchangeByte *
             _Touch2M_open *
               _SPI1_Open
             ___lmul *
         _disk_status
           _SD_SPI_IsMediaInitialized
           _SD_SPI_IsMediaPresent
           _SD_SPI_IsWriteProtected
         _get_ldnumber
         _ld_dword
         _ld_word
         _move_window
           _disk_read
             _SD_SPI_SectorRead
               _LCD8M_open *
                 _SPI1_Open
               _SDFAST_open *
                 _SPI1_Open
               _SDSLOW_open *
                 _SPI1_Open
               _SD_SPI_AsyncReadTasks *
                 _SD_SendCmd
                   _SPI1_ExchangeByte *
                   _memcpy *
                 _SPI1_ExchangeBlock *
                 _SPI1_ExchangeByte *
                 _memset *
               _SPI1_Close *
               _Touch2M_open *
                 _SPI1_Open
           _sync_window
             _disk_write
               _SD_SPI_SectorWrite
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncWriteTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
       _follow_path
         _create_name
           _chk_chr
           _dbc_1st
           _dbc_2nd
           _mem_set
         _dir_find
           _dir_next
             _clst2sect
               ___lmul
             _create_chain
               _get_fat
                 _ld_dword
                 _ld_word
                 _move_window
                   _disk_read
                     _SD_SPI_SectorRead
                       _LCD8M_open *
                         _SPI1_Open
                       _SDFAST_open *
                         _SPI1_Open
                       _SDSLOW_open *
                         _SPI1_Open
                       _SD_SPI_AsyncReadTasks *
                         _SD_SendCmd
                           _SPI1_ExchangeByte *
                           _memcpy *
                         _SPI1_ExchangeBlock *
                         _SPI1_ExchangeByte *
                         _memset *
                       _SPI1_Close *
                       _Touch2M_open *
                         _SPI1_Open
                   _sync_window
                     _disk_write
                       _SD_SPI_SectorWrite
                         _LCD8M_open *
                           _SPI1_Open
                         _SDFAST_open *
                           _SPI1_Open
                         _SDSLOW_open *
                           _SPI1_Open
                         _SD_SPI_AsyncWriteTasks *
                           _SD_SendCmd
                             _SPI1_ExchangeByte *
                             _memcpy *
                           _SPI1_ExchangeBlock *
                           _SPI1_ExchangeByte *
                         _SPI1_Close *
                         _Touch2M_open *
                           _SPI1_Open
               _put_fat
                 _ld_dword
                 _move_window
                   _disk_read
                     _SD_SPI_SectorRead
                       _LCD8M_open *
                         _SPI1_Open
                       _SDFAST_open *
                         _SPI1_Open
                       _SDSLOW_open *
                         _SPI1_Open
                       _SD_SPI_AsyncReadTasks *
                         _SD_SendCmd
                           _SPI1_ExchangeByte *
                           _memcpy *
                         _SPI1_ExchangeBlock *
                         _SPI1_ExchangeByte *
                         _memset *
                       _SPI1_Close *
                       _Touch2M_open *
                         _SPI1_Open
                   _sync_window
                     _disk_write
                       _SD_SPI_SectorWrite
                         _LCD8M_open *
                           _SPI1_Open
                         _SDFAST_open *
                           _SPI1_Open
                         _SDSLOW_open *
                           _SPI1_Open
                         _SD_SPI_AsyncWriteTasks *
                           _SD_SendCmd
                             _SPI1_ExchangeByte *
                             _memcpy *
                           _SPI1_ExchangeBlock *
                           _SPI1_ExchangeByte *
                         _SPI1_Close *
                         _Touch2M_open *
                           _SPI1_Open
                 _st_dword
                   _get_fattime (ARG)
                     _Bcd2Hex
                     _decimalToFatTime
                       _Bcd2Hex (ARG)
                 _st_word
             _dir_clear
               _clst2sect
                 ___lmul
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
               _mem_set
               _sync_window
                 _disk_write
                   _SD_SPI_SectorWrite
                     _LCD8M_open *
                       _SPI1_Open
                     _SDFAST_open *
                       _SPI1_Open
                     _SDSLOW_open *
                       _SPI1_Open
                     _SD_SPI_AsyncWriteTasks *
                       _SD_SendCmd
                         _SPI1_ExchangeByte *
                         _memcpy *
                       _SPI1_ExchangeBlock *
                       _SPI1_ExchangeByte *
                     _SPI1_Close *
                     _Touch2M_open *
                       _SPI1_Open
             _get_fat
               _ld_dword
               _ld_word
               _move_window
                 _disk_read
                   _SD_SPI_SectorRead
                     _LCD8M_open *
                       _SPI1_Open
                     _SDFAST_open *
                       _SPI1_Open
                     _SDSLOW_open *
                       _SPI1_Open
                     _SD_SPI_AsyncReadTasks *
                       _SD_SendCmd
                         _SPI1_ExchangeByte *
                         _memcpy *
                       _SPI1_ExchangeBlock *
                       _SPI1_ExchangeByte *
                       _memset *
                     _SPI1_Close *
                     _Touch2M_open *
                       _SPI1_Open
                 _sync_window
                   _disk_write
                     _SD_SPI_SectorWrite
                       _LCD8M_open *
                         _SPI1_Open
                       _SDFAST_open *
                         _SPI1_Open
                       _SDSLOW_open *
                         _SPI1_Open
                       _SD_SPI_AsyncWriteTasks *
                         _SD_SendCmd
                           _SPI1_ExchangeByte *
                           _memcpy *
                         _SPI1_ExchangeBlock *
                         _SPI1_ExchangeByte *
                       _SPI1_Close *
                       _Touch2M_open *
                         _SPI1_Open
           _dir_sdi
             _clst2sect
               ___lmul
             _get_fat
               _ld_dword
               _ld_word
               _move_window
                 _disk_read
                   _SD_SPI_SectorRead
                     _LCD8M_open *
                       _SPI1_Open
                     _SDFAST_open *
                       _SPI1_Open
                     _SDSLOW_open *
                       _SPI1_Open
                     _SD_SPI_AsyncReadTasks *
                       _SD_SendCmd
                         _SPI1_ExchangeByte *
                         _memcpy *
                       _SPI1_ExchangeBlock *
                       _SPI1_ExchangeByte *
                       _memset *
                     _SPI1_Close *
                     _Touch2M_open *
                       _SPI1_Open
                 _sync_window
                   _disk_write
                     _SD_SPI_SectorWrite
                       _LCD8M_open *
                         _SPI1_Open
                       _SDFAST_open *
                         _SPI1_Open
                       _SDSLOW_open *
                         _SPI1_Open
                       _SD_SPI_AsyncWriteTasks *
                         _SD_SendCmd
                           _SPI1_ExchangeByte *
                           _memcpy *
                         _SPI1_ExchangeBlock *
                         _SPI1_ExchangeByte *
                       _SPI1_Close *
                       _Touch2M_open *
                         _SPI1_Open
           _mem_cmp
           _move_window
             _disk_read
               _SD_SPI_SectorRead
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncReadTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                   _memset *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
             _sync_window
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
         _dir_sdi
           _clst2sect
             ___lmul
           _get_fat
             _ld_dword
             _ld_word
             _move_window
               _disk_read
                 _SD_SPI_SectorRead
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncReadTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                     _memset *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
               _sync_window
                 _disk_write
                   _SD_SPI_SectorWrite
                     _LCD8M_open *
                       _SPI1_Open
                     _SDFAST_open *
                       _SPI1_Open
                     _SDSLOW_open *
                       _SPI1_Open
                     _SD_SPI_AsyncWriteTasks *
                       _SD_SendCmd
                         _SPI1_ExchangeByte *
                         _memcpy *
                       _SPI1_ExchangeBlock *
                       _SPI1_ExchangeByte *
                     _SPI1_Close *
                     _Touch2M_open *
                       _SPI1_Open
         _ld_clust
           _ld_word
       _get_fat
         _ld_dword
         _ld_word
         _move_window
           _disk_read
             _SD_SPI_SectorRead
               _LCD8M_open *
                 _SPI1_Open
               _SDFAST_open *
                 _SPI1_Open
               _SDSLOW_open *
                 _SPI1_Open
               _SD_SPI_AsyncReadTasks *
                 _SD_SendCmd
                   _SPI1_ExchangeByte *
                   _memcpy *
                 _SPI1_ExchangeBlock *
                 _SPI1_ExchangeByte *
                 _memset *
               _SPI1_Close *
               _Touch2M_open *
                 _SPI1_Open
           _sync_window
             _disk_write
               _SD_SPI_SectorWrite
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncWriteTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
       _get_fattime
         _Bcd2Hex
         _decimalToFatTime
           _Bcd2Hex (ARG)
       _ld_clust
         _ld_word
       _ld_dword
       _move_window
         _disk_read
           _SD_SPI_SectorRead
             _LCD8M_open *
               _SPI1_Open
             _SDFAST_open *
               _SPI1_Open
             _SDSLOW_open *
               _SPI1_Open
             _SD_SPI_AsyncReadTasks *
               _SD_SendCmd
                 _SPI1_ExchangeByte *
                 _memcpy *
               _SPI1_ExchangeBlock *
               _SPI1_ExchangeByte *
               _memset *
             _SPI1_Close *
             _Touch2M_open *
               _SPI1_Open
         _sync_window
           _disk_write
             _SD_SPI_SectorWrite
               _LCD8M_open *
                 _SPI1_Open
               _SDFAST_open *
                 _SPI1_Open
               _SDSLOW_open *
                 _SPI1_Open
               _SD_SPI_AsyncWriteTasks *
                 _SD_SendCmd
                   _SPI1_ExchangeByte *
                   _memcpy *
                 _SPI1_ExchangeBlock *
                 _SPI1_ExchangeByte *
               _SPI1_Close *
               _Touch2M_open *
                 _SPI1_Open
       _remove_chain
         _get_fat
           _ld_dword
           _ld_word
           _move_window
             _disk_read
               _SD_SPI_SectorRead
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncReadTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                   _memset *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
             _sync_window
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
         _put_fat
           _ld_dword
           _move_window
             _disk_read
               _SD_SPI_SectorRead
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncReadTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                   _memset *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
             _sync_window
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
           _st_dword
             _get_fattime (ARG)
               _Bcd2Hex
               _decimalToFatTime
                 _Bcd2Hex (ARG)
           _st_word
       _st_clust
         _st_word
       _st_dword
         _get_fattime (ARG)
           _Bcd2Hex
           _decimalToFatTime
             _Bcd2Hex (ARG)
     _f_write
       _clst2sect
         ___lmul
       _create_chain
         _get_fat
           _ld_dword
           _ld_word
           _move_window
             _disk_read
               _SD_SPI_SectorRead
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncReadTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                   _memset *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
             _sync_window
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
         _put_fat
           _ld_dword
           _move_window
             _disk_read
               _SD_SPI_SectorRead
                 _LCD8M_open *
                   _SPI1_Open
                 _SDFAST_open *
                   _SPI1_Open
                 _SDSLOW_open *
                   _SPI1_Open
                 _SD_SPI_AsyncReadTasks *
                   _SD_SendCmd
                     _SPI1_ExchangeByte *
                     _memcpy *
                   _SPI1_ExchangeBlock *
                   _SPI1_ExchangeByte *
                   _memset *
                 _SPI1_Close *
                 _Touch2M_open *
                   _SPI1_Open
             _sync_window
               _disk_write
                 _SD_SPI_SectorWrite
                   _LCD8M_open *
                     _SPI1_Open
                   _SDFAST_open *
                     _SPI1_Open
                   _SDSLOW_open *
                     _SPI1_Open
                   _SD_SPI_AsyncWriteTasks *
                     _SD_SendCmd
                       _SPI1_ExchangeByte *
                       _memcpy *
                     _SPI1_ExchangeBlock *
                     _SPI1_ExchangeByte *
                   _SPI1_Close *
                   _Touch2M_open *
                     _SPI1_Open
           _st_dword
             _get_fattime (ARG)
               _Bcd2Hex
               _decimalToFatTime
                 _Bcd2Hex (ARG)
           _st_word
       _disk_write
         _SD_SPI_SectorWrite
           _LCD8M_open *
             _SPI1_Open
           _SDFAST_open *
             _SPI1_Open
           _SDSLOW_open *
             _SPI1_Open
           _SD_SPI_AsyncWriteTasks *
             _SD_SendCmd
               _SPI1_ExchangeByte *
               _memcpy *
             _SPI1_ExchangeBlock *
             _SPI1_ExchangeByte *
           _SPI1_Close *
           _Touch2M_open *
             _SPI1_Open
       _mem_cpy
       _move_window
         _disk_read
           _SD_SPI_SectorRead
             _LCD8M_open *
               _SPI1_Open
             _SDFAST_open *
               _SPI1_Open
             _SDSLOW_open *
               _SPI1_Open
             _SD_SPI_AsyncReadTasks *
               _SD_SendCmd
                 _SPI1_ExchangeByte *
                 _memcpy *
               _SPI1_ExchangeBlock *
               _SPI1_ExchangeByte *
               _memset *
             _SPI1_Close *
             _Touch2M_open *
               _SPI1_Open
         _sync_window
           _disk_write
             _SD_SPI_SectorWrite
               _LCD8M_open *
                 _SPI1_Open
               _SDFAST_open *
                 _SPI1_Open
               _SDSLOW_open *
                 _SPI1_Open
               _SD_SPI_AsyncWriteTasks *
                 _SD_SendCmd
                   _SPI1_ExchangeByte *
                   _memcpy *
                 _SPI1_ExchangeBlock *
                 _SPI1_ExchangeByte *
               _SPI1_Close *
               _Touch2M_open *
                 _SPI1_Open
       _strlen (ARG)
       _sync_window (ARG)
         _disk_write
           _SD_SPI_SectorWrite
             _LCD8M_open *
               _SPI1_Open
             _SDFAST_open *
               _SPI1_Open
             _SDSLOW_open *
               _SPI1_Open
             _SD_SPI_AsyncWriteTasks *
               _SD_SendCmd
                 _SPI1_ExchangeByte *
                 _memcpy *
               _SPI1_ExchangeBlock *
               _SPI1_ExchangeByte *
             _SPI1_Close *
             _Touch2M_open *
               _SPI1_Open
       _validate (ARG)
         _disk_status
           _SD_SPI_IsMediaInitialized
           _SD_SPI_IsMediaPresent
           _SD_SPI_IsWriteProtected
     _get_tempHumidity
       _I2C2_Read1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
       _I2C2_ReadNBytes
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterRead
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetBuffer
       _I2C2_WriteNBytes
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
       _crc16
     _glcd_init2
       _SPI1_Close
       _SPI1_ExchangeByte
       _spi_master_open
         _LCD8M_open
           _SPI1_Open
         _SDFAST_open
           _SPI1_Open
         _SDSLOW_open
           _SPI1_Open
         _Touch2M_open
           _SPI1_Open
       _write_command
         _SPI1_ExchangeByte
     _lcd_fill
       _SPI1_Close
       _addset
         _SPI1_Close
         _spi_master_open
           _LCD8M_open
             _SPI1_Open
           _SDFAST_open
             _SPI1_Open
           _SDSLOW_open
             _SPI1_Open
           _Touch2M_open
             _SPI1_Open
         _write_command
           _SPI1_ExchangeByte
         _write_data
           _SPI1_ExchangeByte
       _spi_master_open
         _LCD8M_open
           _SPI1_Open
         _SDFAST_open
           _SPI1_Open
         _SDSLOW_open
           _SPI1_Open
         _Touch2M_open
           _SPI1_Open
       _write_data
         _SPI1_ExchangeByte
     _resetCTFG
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
       ___lwmod (ARG)
       ___wmul (ARG)
         _cosd (ARG)
           _sind
             ___lwmod
         _sind (ARG)
           ___lwmod
         _strlen (ARG)
       _isdigit (ARG)
     _strlen
   _SYSTEM_Initialize
     _ADC_Initialize
     _CCP5_Initialize
     _EPWM1_Initialize
     _EPWM2_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
     _I2C2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCB4_SetInterruptHandler
     _SPI1_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
     _TMR3_Initialize
     _TMR5_Initialize
       _TMR5_SetInterruptHandler
     _TMR6_Initialize
   _SettingProc
     _Bcd2Hex
     _ButtonCheck
       _ButtonPush
       _DrawSetBox
         _AlarmSoundOff
           _TMR0_StopTimer
           _TMR2_StopTimer
         _display_drawChars
           _display_puts
             _display_putc
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
               _fillRect
                 _lcd_fill_rect
                   _SPI1_Close
                   _addset
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
           _display_setCursor
           _display_setTextColor
           _display_setTextSize
         _drawTime
           _DispTime
             _Dispseg
               _display_fillTriangle
                 ___awdiv
                 ___wmul
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
                 _drawHLine
                   _SPI1_Close
                   _addset
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
             _fillRect
               _lcd_fill_rect
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
           _DrawAnalogClock
             ___awdiv
             ___awmod
             ___lwdiv
               ___lwmod (ARG)
               ___wmul (ARG)
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _cosd
               _sind
                 ___lwmod
             _display_drawChars
               _display_puts
                 _display_putc
                   ___wmul
                     _cosd (ARG)
                       _sind
                         ___lwmod
                     _sind (ARG)
                       ___lwmod
                     _strlen (ARG)
                   _fillRect
                     _lcd_fill_rect
                       _SPI1_Close
                       _addset
                         _SPI1_Close
                         _spi_master_open
                           _LCD8M_open
                             _SPI1_Open
                           _SDFAST_open
                             _SPI1_Open
                           _SDSLOW_open
                             _SPI1_Open
                           _Touch2M_open
                             _SPI1_Open
                         _write_command
                           _SPI1_ExchangeByte
                         _write_data
                           _SPI1_ExchangeByte
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_data
                         _SPI1_ExchangeByte
                   _lcd_draw_pixel_at
                     _draw_pixel
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_data
                         _SPI1_ExchangeByte
                     _lcd_set_cursor
                       _lcd_set_cursor_x
                         _SPI1_Close
                         _spi_master_open
                           _LCD8M_open
                             _SPI1_Open
                           _SDFAST_open
                             _SPI1_Open
                           _SDSLOW_open
                             _SPI1_Open
                           _Touch2M_open
                             _SPI1_Open
                         _write_command
                           _SPI1_ExchangeByte
                         _write_data
                           _SPI1_ExchangeByte
                       _lcd_set_cursor_y
                         _SPI1_Close
                         _spi_master_open
                           _LCD8M_open
                             _SPI1_Open
                           _SDFAST_open
                             _SPI1_Open
                           _SDSLOW_open
                             _SPI1_Open
                           _Touch2M_open
                             _SPI1_Open
                         _write_command
                           _SPI1_ExchangeByte
                         _write_data
                           _SPI1_ExchangeByte
               _display_setCursor
               _display_setTextColor
               _display_setTextSize
             _display_drawCircle
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
             _display_drawLine
               _drawHLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _drawVLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _writeLine
                 ___awdiv
                 _lcd_draw_pixel_at
                   _draw_pixel
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor
                     _lcd_set_cursor_x
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
                     _lcd_set_cursor_y
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
             _display_drawTriangle
               _display_drawLine
                 _drawHLine
                   _SPI1_Close
                   _addset
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _drawVLine
                   _SPI1_Close
                   _addset
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _writeLine
                   ___awdiv
                   _lcd_draw_pixel_at
                     _draw_pixel
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_data
                         _SPI1_ExchangeByte
                     _lcd_set_cursor
                       _lcd_set_cursor_x
                         _SPI1_Close
                         _spi_master_open
                           _LCD8M_open
                             _SPI1_Open
                           _SDFAST_open
                             _SPI1_Open
                           _SDSLOW_open
                             _SPI1_Open
                           _Touch2M_open
                             _SPI1_Open
                         _write_command
                           _SPI1_ExchangeByte
                         _write_data
                           _SPI1_ExchangeByte
                       _lcd_set_cursor_y
                         _SPI1_Close
                         _spi_master_open
                           _LCD8M_open
                             _SPI1_Open
                           _SDFAST_open
                             _SPI1_Open
                           _SDSLOW_open
                             _SPI1_Open
                           _Touch2M_open
                             _SPI1_Open
                         _write_command
                           _SPI1_ExchangeByte
                         _write_data
                           _SPI1_ExchangeByte
             _display_fillCircle
               _display_fillCircleHelper
                 _drawVLine
                   _SPI1_Close
                   _addset
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
               _drawVLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _display_fillTriangle
               ___awdiv
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
               _drawHLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _sind
               ___lwmod
             _sprintf
               ___awdiv (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
               _isdigit (ARG)
         _sprintf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _isdigit (ARG)
     _DrawSetBox
       _AlarmSoundOff
         _TMR0_StopTimer
         _TMR2_StopTimer
       _display_drawChars
         _display_puts
           _display_putc
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _fillRect
               _lcd_fill_rect
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
         _display_setCursor
         _display_setTextColor
         _display_setTextSize
       _drawTime
         _DispTime
           _Dispseg
             _display_fillTriangle
               ___awdiv
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
               _drawHLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
           _fillRect
             _lcd_fill_rect
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
         _DrawAnalogClock
           ___awdiv
           ___awmod
           ___lwdiv
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
           ___wmul
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _cosd
             _sind
               ___lwmod
           _display_drawChars
             _display_puts
               _display_putc
                 ___wmul
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
                 _fillRect
                   _lcd_fill_rect
                     _SPI1_Close
                     _addset
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_data
                       _SPI1_ExchangeByte
                 _lcd_draw_pixel_at
                   _draw_pixel
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor
                     _lcd_set_cursor_x
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
                     _lcd_set_cursor_y
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
             _display_setCursor
             _display_setTextColor
             _display_setTextSize
           _display_drawCircle
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
           _display_drawLine
             _drawHLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _writeLine
               ___awdiv
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
           _display_drawTriangle
             _display_drawLine
               _drawHLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _drawVLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _writeLine
                 ___awdiv
                 _lcd_draw_pixel_at
                   _draw_pixel
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor
                     _lcd_set_cursor_x
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
                     _lcd_set_cursor_y
                       _SPI1_Close
                       _spi_master_open
                         _LCD8M_open
                           _SPI1_Open
                         _SDFAST_open
                           _SPI1_Open
                         _SDSLOW_open
                           _SPI1_Open
                         _Touch2M_open
                           _SPI1_Open
                       _write_command
                         _SPI1_ExchangeByte
                       _write_data
                         _SPI1_ExchangeByte
           _display_fillCircle
             _display_fillCircleHelper
               _drawVLine
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
           _display_fillTriangle
             ___awdiv
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _drawHLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
           _sind
             ___lwmod
           _sprintf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
               ___wmul (ARG)
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _isdigit (ARG)
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
         _isdigit (ARG)
     _GetTouchLocation
       _GetTouchRawXY
         _SPI1_ExchangeByte
         _SPI1_ReadBlock
           _SPI1_ExchangeByte
       _SPI1_Close
       _SPI1_ExchangeByte
       _SPI1_Open
       ___lwdiv
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
     _Hex2Bcd
       ___lbdiv
       ___lbmod
     _IncDecTime
     _RTC_setDate
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _RTC_setTime
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _TransCoordination
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _WriteYMD
       _DATAEE_ReadByte
       _DATAEE_WriteByte
     ___awmod
     ___wmul
       _cosd (ARG)
         _sind
           ___lwmod
       _sind (ARG)
         ___lwmod
       _strlen (ARG)
     _display_drawChars
       _display_puts
         _display_putc
           ___wmul
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _fillRect
             _lcd_fill_rect
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
           _lcd_draw_pixel_at
             _draw_pixel
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _lcd_set_cursor
               _lcd_set_cursor_x
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor_y
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
       _display_setCursor
       _display_setTextColor
       _display_setTextSize
     _display_drawRoundRect
       _display_drawCircleHelper
         _lcd_draw_pixel_at
           _draw_pixel
             _SPI1_Close
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _lcd_set_cursor
             _lcd_set_cursor_x
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _lcd_set_cursor_y
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
       _drawHLine
         _SPI1_Close
         _addset
           _SPI1_Close
           _spi_master_open
             _LCD8M_open
               _SPI1_Open
             _SDFAST_open
               _SPI1_Open
             _SDSLOW_open
               _SPI1_Open
             _Touch2M_open
               _SPI1_Open
           _write_command
             _SPI1_ExchangeByte
           _write_data
             _SPI1_ExchangeByte
         _spi_master_open
           _LCD8M_open
             _SPI1_Open
           _SDFAST_open
             _SPI1_Open
           _SDSLOW_open
             _SPI1_Open
           _Touch2M_open
             _SPI1_Open
         _write_data
           _SPI1_ExchangeByte
       _drawVLine
         _SPI1_Close
         _addset
           _SPI1_Close
           _spi_master_open
             _LCD8M_open
               _SPI1_Open
             _SDFAST_open
               _SPI1_Open
             _SDSLOW_open
               _SPI1_Open
             _Touch2M_open
               _SPI1_Open
           _write_command
             _SPI1_ExchangeByte
           _write_data
             _SPI1_ExchangeByte
         _spi_master_open
           _LCD8M_open
             _SPI1_Open
           _SDFAST_open
             _SPI1_Open
           _SDSLOW_open
             _SPI1_Open
           _Touch2M_open
             _SPI1_Open
         _write_data
           _SPI1_ExchangeByte
     _drawTime
       _DispTime
         _Dispseg
           _display_fillTriangle
             ___awdiv
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _drawHLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
         _fillRect
           _lcd_fill_rect
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
       _DrawAnalogClock
         ___awdiv
         ___awmod
         ___lwdiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
         ___wmul
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
         _cosd
           _sind
             ___lwmod
         _display_drawChars
           _display_puts
             _display_putc
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
               _fillRect
                 _lcd_fill_rect
                   _SPI1_Close
                   _addset
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
           _display_setCursor
           _display_setTextColor
           _display_setTextSize
         _display_drawCircle
           _lcd_draw_pixel_at
             _draw_pixel
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _lcd_set_cursor
               _lcd_set_cursor_x
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor_y
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
         _display_drawLine
           _drawHLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _drawVLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _writeLine
             ___awdiv
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
         _display_drawTriangle
           _display_drawLine
             _drawHLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _writeLine
               ___awdiv
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
         _display_fillCircle
           _display_fillCircleHelper
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
           _drawVLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
         _display_fillTriangle
           ___awdiv
           ___wmul
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _drawHLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
         _sind
           ___lwmod
         _sprintf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _isdigit (ARG)
     _getWeekdays
       _localtime
         _gmtime
           ___aldiv
             ___lmul (ARG)
           ___almod
           ___awmod
           _dylen
             ___lwmod
       _mktime
         ___lmul
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
               ___lwmod (ARG)
               ___wmul (ARG)
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
           _years_to_days
             ___lmul
             ___lwdiv
               ___lwmod (ARG)
               ___wmul (ARG)
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
     _lcd_fill
       _SPI1_Close
       _addset
         _SPI1_Close
         _spi_master_open
           _LCD8M_open
             _SPI1_Open
           _SDFAST_open
             _SPI1_Open
           _SDSLOW_open
             _SPI1_Open
           _Touch2M_open
             _SPI1_Open
         _write_command
           _SPI1_ExchangeByte
         _write_data
           _SPI1_ExchangeByte
       _spi_master_open
         _LCD8M_open
           _SPI1_Open
         _SDFAST_open
           _SPI1_Open
         _SDSLOW_open
           _SPI1_Open
         _Touch2M_open
           _SPI1_Open
       _write_data
         _SPI1_ExchangeByte
     _strlen
   _SlideSWProc
     _AlarmSoundOff
       _TMR0_StopTimer
       _TMR2_StopTimer
     _DATAEE_WriteByte
     _RTC_resetAlarm
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _RTC_setAlarmTime
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _drawAlarmTime
       _DrawAnalogClock
         ___awdiv
         ___awmod
         ___lwdiv
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
         ___wmul
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
         _cosd
           _sind
             ___lwmod
         _display_drawChars
           _display_puts
             _display_putc
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
               _fillRect
                 _lcd_fill_rect
                   _SPI1_Close
                   _addset
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
           _display_setCursor
           _display_setTextColor
           _display_setTextSize
         _display_drawCircle
           _lcd_draw_pixel_at
             _draw_pixel
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _lcd_set_cursor
               _lcd_set_cursor_x
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor_y
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
         _display_drawLine
           _drawHLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _drawVLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _writeLine
             ___awdiv
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
         _display_drawTriangle
           _display_drawLine
             _drawHLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
             _writeLine
               ___awdiv
               _lcd_draw_pixel_at
                 _draw_pixel
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor
                   _lcd_set_cursor_x
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
                   _lcd_set_cursor_y
                     _SPI1_Close
                     _spi_master_open
                       _LCD8M_open
                         _SPI1_Open
                       _SDFAST_open
                         _SPI1_Open
                       _SDSLOW_open
                         _SPI1_Open
                       _Touch2M_open
                         _SPI1_Open
                     _write_command
                       _SPI1_ExchangeByte
                     _write_data
                       _SPI1_ExchangeByte
         _display_fillCircle
           _display_fillCircleHelper
             _drawVLine
               _SPI1_Close
               _addset
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_command
                   _SPI1_ExchangeByte
                 _write_data
                   _SPI1_ExchangeByte
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_data
                 _SPI1_ExchangeByte
           _drawVLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
         _display_fillTriangle
           ___awdiv
           ___wmul
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _drawHLine
             _SPI1_Close
             _addset
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
         _sind
           ___lwmod
         _sprintf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
             ___wmul (ARG)
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
           _isdigit (ARG)
       ___wmul
         _cosd (ARG)
           _sind
             ___lwmod
         _sind (ARG)
           ___lwmod
         _strlen (ARG)
       _display_drawChars
         _display_puts
           _display_putc
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _fillRect
               _lcd_fill_rect
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
         _display_setCursor
         _display_setTextColor
         _display_setTextSize
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
         _isdigit (ARG)
   _TMR1_SetInterruptHandler
   _TMR5_SetInterruptHandler
   _TMR5_StartTimer
   _TouchAdjust
     _AlarmSoundOff
       _TMR0_StopTimer
       _TMR2_StopTimer
     _AlarmSoundOn
       _TMR0_Reload
       _TMR0_StartTimer
       _TMR2_StartTimer
     _GetTouchLocation
       _GetTouchRawXY
         _SPI1_ExchangeByte
         _SPI1_ReadBlock
           _SPI1_ExchangeByte
       _SPI1_Close
       _SPI1_ExchangeByte
       _SPI1_Open
       ___lwdiv
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
     _TouchAdjMsg
       _display_SetFont
       _display_drawChars
         _display_puts
           _display_putc
             ___wmul
               _cosd (ARG)
                 _sind
                   ___lwmod
               _sind (ARG)
                 ___lwmod
               _strlen (ARG)
             _fillRect
               _lcd_fill_rect
                 _SPI1_Close
                 _addset
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
             _lcd_draw_pixel_at
               _draw_pixel
                 _SPI1_Close
                 _spi_master_open
                   _LCD8M_open
                     _SPI1_Open
                   _SDFAST_open
                     _SPI1_Open
                   _SDSLOW_open
                     _SPI1_Open
                   _Touch2M_open
                     _SPI1_Open
                 _write_data
                   _SPI1_ExchangeByte
               _lcd_set_cursor
                 _lcd_set_cursor_x
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
                 _lcd_set_cursor_y
                   _SPI1_Close
                   _spi_master_open
                     _LCD8M_open
                       _SPI1_Open
                     _SDFAST_open
                       _SPI1_Open
                     _SDSLOW_open
                       _SPI1_Open
                     _Touch2M_open
                       _SPI1_Open
                   _write_command
                     _SPI1_ExchangeByte
                   _write_data
                     _SPI1_ExchangeByte
         _display_setCursor
         _display_setTextColor
         _display_setTextSize
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
           ___wmul (ARG)
             _cosd (ARG)
               _sind
                 ___lwmod
             _sind (ARG)
               ___lwmod
             _strlen (ARG)
         ___lwmod (ARG)
         ___wmul (ARG)
           _cosd (ARG)
             _sind
               ___lwmod
           _sind (ARG)
             ___lwmod
           _strlen (ARG)
         _isdigit (ARG)
     _display_drawLine
       _drawHLine
         _SPI1_Close
         _addset
           _SPI1_Close
           _spi_master_open
             _LCD8M_open
               _SPI1_Open
             _SDFAST_open
               _SPI1_Open
             _SDSLOW_open
               _SPI1_Open
             _Touch2M_open
               _SPI1_Open
           _write_command
             _SPI1_ExchangeByte
           _write_data
             _SPI1_ExchangeByte
         _spi_master_open
           _LCD8M_open
             _SPI1_Open
           _SDFAST_open
             _SPI1_Open
           _SDSLOW_open
             _SPI1_Open
           _Touch2M_open
             _SPI1_Open
         _write_data
           _SPI1_ExchangeByte
       _drawVLine
         _SPI1_Close
         _addset
           _SPI1_Close
           _spi_master_open
             _LCD8M_open
               _SPI1_Open
             _SDFAST_open
               _SPI1_Open
             _SDSLOW_open
               _SPI1_Open
             _Touch2M_open
               _SPI1_Open
           _write_command
             _SPI1_ExchangeByte
           _write_data
             _SPI1_ExchangeByte
         _spi_master_open
           _LCD8M_open
             _SPI1_Open
           _SDFAST_open
             _SPI1_Open
           _SDSLOW_open
             _SPI1_Open
           _Touch2M_open
             _SPI1_Open
         _write_data
           _SPI1_ExchangeByte
       _writeLine
         ___awdiv
         _lcd_draw_pixel_at
           _draw_pixel
             _SPI1_Close
             _spi_master_open
               _LCD8M_open
                 _SPI1_Open
               _SDFAST_open
                 _SPI1_Open
               _SDSLOW_open
                 _SPI1_Open
               _Touch2M_open
                 _SPI1_Open
             _write_data
               _SPI1_ExchangeByte
           _lcd_set_cursor
             _lcd_set_cursor_x
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
             _lcd_set_cursor_y
               _SPI1_Close
               _spi_master_open
                 _LCD8M_open
                   _SPI1_Open
                 _SDFAST_open
                   _SPI1_Open
                 _SDSLOW_open
                   _SPI1_Open
                 _Touch2M_open
                   _SPI1_Open
               _write_command
                 _SPI1_ExchangeByte
               _write_data
                 _SPI1_ExchangeByte
   _display_SetFont
   _glcd_init
     _SPI1_Close
     _spi_master_open
       _LCD8M_open
         _SPI1_Open
       _SDFAST_open
         _SPI1_Open
       _SDSLOW_open
         _SPI1_Open
       _Touch2M_open
         _SPI1_Open
     _write_command
       _SPI1_ExchangeByte
     _write_data
       _SPI1_ExchangeByte
   _init_RTC
     _I2C2_Read1ByteRegister
       _I2C2_Close
         _I2C2_MasterClearIrq
         _I2C2_MasterClose
         _I2C2_MasterDisableIrq
       _I2C2_MasterWrite
         _I2C2_MasterOperation
           _I2C2_MasterStart
           _I2C2_Poller
             _I2C2_MasterFsm
               _I2C2_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _I2C2_CallbackReturnReset *
                 _I2C2_CallbackReturnStop *
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _rd1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
               _I2C2_DO_IDLE *
               _I2C2_DO_RCEN *
                 _I2C2_MasterStartRx
               _I2C2_DO_RESET *
               _I2C2_DO_RX *
                 Absolute function(Fake) *
                 _I2C2_CallbackReturnReset *
                 _I2C2_CallbackReturnStop *
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_MasterGetRxData *
                 _I2C2_MasterSendAck *
                 _rd1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
               _I2C2_DO_RX_ACK *
                 _I2C2_MasterSendAck
               _I2C2_DO_RX_NACK_RESTART *
                 _I2C2_MasterSendNack
               _I2C2_DO_RX_NACK_STOP *
                 _I2C2_MasterSendNack
               _I2C2_DO_SEND_ADR_READ *
                 _I2C2_MasterSendTxData
               _I2C2_DO_SEND_ADR_WRITE *
                 _I2C2_MasterSendTxData
               _I2C2_DO_SEND_RESTART *
                 _I2C2_MasterEnableRestart
               _I2C2_DO_SEND_RESTART_READ *
                 _I2C2_MasterEnableRestart
               _I2C2_DO_SEND_RESTART_WRITE *
                 _I2C2_MasterEnableRestart
               _I2C2_DO_SEND_STOP *
                 _I2C2_MasterStop
               _I2C2_DO_TX *
                 Absolute function(Fake) *
                 _I2C2_CallbackReturnReset *
                 _I2C2_CallbackReturnStop *
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_MasterIsNack *
                 _I2C2_MasterSendTxData *
                 _rd1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
               _I2C2_DO_TX_EMPTY *
                 Absolute function(Fake) *
                 _I2C2_CallbackReturnReset *
                 _I2C2_CallbackReturnStop *
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_MasterSetIrq *
                 _rd1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
               _I2C2_MasterClearIrq *
               _I2C2_MasterIsNack *
             _I2C2_MasterWaitForEvent
       _I2C2_Open
         _I2C2_MasterClearIrq
         _I2C2_MasterOpen
       _I2C2_SetAddressNackCallback
         _I2C2_SetCallback
       _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
         _I2C2_SetCallback
     _I2C2_Write1ByteRegister
       _I2C2_Close
         _I2C2_MasterClearIrq
         _I2C2_MasterClose
         _I2C2_MasterDisableIrq
       _I2C2_MasterWrite
         _I2C2_MasterOperation
           _I2C2_MasterStart
           _I2C2_Poller
             _I2C2_MasterFsm
               _I2C2_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _I2C2_CallbackReturnReset *
                 _I2C2_CallbackReturnStop *
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _rd1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
               _I2C2_DO_IDLE *
               _I2C2_DO_RCEN *
                 _I2C2_MasterStartRx
               _I2C2_DO_RESET *
               _I2C2_DO_RX *
                 Absolute function(Fake) *
                 _I2C2_CallbackReturnReset *
                 _I2C2_CallbackReturnStop *
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_MasterGetRxData *
                 _I2C2_MasterSendAck *
                 _rd1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
               _I2C2_DO_RX_ACK *
                 _I2C2_MasterSendAck
               _I2C2_DO_RX_NACK_RESTART *
                 _I2C2_MasterSendNack
               _I2C2_DO_RX_NACK_STOP *
                 _I2C2_MasterSendNack
               _I2C2_DO_SEND_ADR_READ *
                 _I2C2_MasterSendTxData
               _I2C2_DO_SEND_ADR_WRITE *
                 _I2C2_MasterSendTxData
               _I2C2_DO_SEND_RESTART *
                 _I2C2_MasterEnableRestart
               _I2C2_DO_SEND_RESTART_READ *
                 _I2C2_MasterEnableRestart
               _I2C2_DO_SEND_RESTART_WRITE *
                 _I2C2_MasterEnableRestart
               _I2C2_DO_SEND_STOP *
                 _I2C2_MasterStop
               _I2C2_DO_TX *
                 Absolute function(Fake) *
                 _I2C2_CallbackReturnReset *
                 _I2C2_CallbackReturnStop *
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_MasterIsNack *
                 _I2C2_MasterSendTxData *
                 _rd1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
               _I2C2_DO_TX_EMPTY *
                 Absolute function(Fake) *
                 _I2C2_CallbackReturnReset *
                 _I2C2_CallbackReturnStop *
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_MasterSetIrq *
                 _rd1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C2_SetBuffer
                   _I2C2_SetDataCompleteCallback
                     _I2C2_SetCallback
               _I2C2_MasterClearIrq *
               _I2C2_MasterIsNack *
             _I2C2_MasterWaitForEvent
       _I2C2_Open
         _I2C2_MasterClearIrq
         _I2C2_MasterOpen
       _I2C2_SetAddressNackCallback
         _I2C2_SetCallback
       _I2C2_SetBuffer
       _I2C2_SetDataCompleteCallback
         _I2C2_SetCallback
     _RTC_setDate
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _RTC_setTime
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
     _dateErrorCheck
       _Bcd2Hex
       _Hex2Bcd
         ___lbdiv
         ___lbmod
       _getWeekdays
         _localtime
           _gmtime
             ___aldiv
               ___lmul (ARG)
             ___almod
             ___awmod
             _dylen
               ___lwmod
         _mktime
           ___lmul
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
               ___wmul
                 _cosd (ARG)
                   _sind
                     ___lwmod
                 _sind (ARG)
                   ___lwmod
                 _strlen (ARG)
             _years_to_days
               ___lmul
               ___lwdiv
                 ___lwmod (ARG)
                 ___wmul (ARG)
                   _cosd (ARG)
                     _sind
                       ___lwmod
                   _sind (ARG)
                     ___lwmod
                   _strlen (ARG)
     _resetCTFG
       _I2C2_Write1ByteRegister
         _I2C2_Close
           _I2C2_MasterClearIrq
           _I2C2_MasterClose
           _I2C2_MasterDisableIrq
         _I2C2_MasterWrite
           _I2C2_MasterOperation
             _I2C2_MasterStart
             _I2C2_Poller
               _I2C2_MasterFsm
                 _I2C2_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_IDLE *
                 _I2C2_DO_RCEN *
                   _I2C2_MasterStartRx
                 _I2C2_DO_RESET *
                 _I2C2_DO_RX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_RX_NACK_RESTART *
                     _I2C2_MasterSendNack
                   _I2C2_DO_RX_NACK_STOP *
                     _I2C2_MasterSendNack
                   _I2C2_MasterGetRxData *
                   _I2C2_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_RX_ACK *
                   _I2C2_MasterSendAck
                 _I2C2_DO_RX_NACK_RESTART *
                   _I2C2_MasterSendNack
                 _I2C2_DO_RX_NACK_STOP *
                   _I2C2_MasterSendNack
                 _I2C2_DO_SEND_ADR_READ *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_ADR_WRITE *
                   _I2C2_MasterSendTxData
                 _I2C2_DO_SEND_RESTART *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_READ *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_RESTART_WRITE *
                   _I2C2_MasterEnableRestart
                 _I2C2_DO_SEND_STOP *
                   _I2C2_MasterStop
                 _I2C2_DO_TX *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART_READ *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_RESTART_WRITE *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterIsNack *
                   _I2C2_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C2_CallbackReturnReset *
                   _I2C2_CallbackReturnStop *
                   _I2C2_DO_SEND_RESTART *
                     _I2C2_MasterEnableRestart
                   _I2C2_DO_SEND_STOP *
                     _I2C2_MasterStop
                   _I2C2_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C2_SetBuffer
                     _I2C2_SetDataCompleteCallback
                       _I2C2_SetCallback
                 _I2C2_MasterClearIrq *
                 _I2C2_MasterIsNack *
               _I2C2_MasterWaitForEvent
         _I2C2_Open
           _I2C2_MasterClearIrq
           _I2C2_MasterOpen
         _I2C2_SetAddressNackCallback
           _I2C2_SetCallback
         _I2C2_SetBuffer
         _I2C2_SetDataCompleteCallback
           _I2C2_SetCallback
   _lcd_fill
     _SPI1_Close
     _addset
       _SPI1_Close
       _spi_master_open
         _LCD8M_open
           _SPI1_Open
         _SDFAST_open
           _SPI1_Open
         _SDSLOW_open
           _SPI1_Open
         _Touch2M_open
           _SPI1_Open
       _write_command
         _SPI1_ExchangeByte
       _write_data
         _SPI1_ExchangeByte
     _spi_master_open
       _LCD8M_open
         _SPI1_Open
       _SDFAST_open
         _SPI1_Open
       _SDSLOW_open
         _SPI1_Open
       _Touch2M_open
         _SPI1_Open
     _write_data
       _SPI1_ExchangeByte

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _INT0_ISR *
     _INT0_CallBack
       Absolute function(Fake) *
       _INT0_DefaultInterruptHandler *
       _RTC_handler *
   _PIN_MANAGER_IOC *
     _IOCB4_ISR
       Absolute function(Fake) *
       _AlarmWHandler *
         i2_AlarmSoundOn
           i2_TMR0_Reload
           i2_TMR0_StartTimer
           i2_TMR2_StartTimer
       _IOCB4_DefaultInterruptHandler *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _SoundHandler *
         i2_AlarmSoundOff
           i2_TMR0_StopTimer
           i2_TMR2_StopTimer
         i2_TMR2_StartTimer
         i2_TMR2_StopTimer
       _TMR0_DefaultInterruptHandler *
   _TMR1_ISR *
     Absolute function(Fake) *
     _RotaryHandler *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *
   _TMR5_ISR *
     _TMR5_CallBack
       Absolute function(Fake) *
       _TMR5_DefaultInterruptHandler *
       _Timer5Handler *
         _EUSART1_Read
         _EUSART1_get_last_status
         _EUSART1_is_rx_ready
     _TMR5_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     45E      37       28.7%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0      40      20       25.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0      FD      18       98.8%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      F4      16       95.3%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      F7      14       96.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      1     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     DB     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      51       1       86.2%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     719      12        0.0%
DATA                 0      0     B77       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat Jul 10 20:40:03 2021

                              _I2C2_WriteNBytes E9BC                        SD_SPI_SectorWrite@result 0060  
                         CheckCheckSum@checksum 0024                               _SPI1_ExchangeByte F61A  
                                   get_fat@clst 0099                                   _years_to_days D232  
                      SD_SPI_SectorWrite@status 0061                __end_of_TMR5_SetInterruptHandler F6C4  
                 SD_SPI_MediaInitialize@timeout 0085                                  _dateErrorCheck D0E4  
                            _I2C2_MasterSendAck F7D4                              _SPI1_ExchangeBlock EBC6  
                              TouchAdjust@count 00ED                              ??_drawTempHumidity 0046  
                                  create_name@c 002A                                    create_name@d 001F  
                                  create_name@i 0028                                    create_name@p 0022  
                              get_ldnumber@path 000E                  SD_SPI_MediaInitialize@response 0080  
                                   drawVLine@hi 0025                                     drawVLine@lo 0026  
                                  ___awdiv@sign 0013                             months_to_days@month 002A  
                                IncDecTime@hour 0016                              ?_SPI1_ExchangeByte 0001  
                       display_drawCircle@ddF_x 0029                         display_drawCircle@ddF_y 002B  
                           ___wmul@multiplicand 001F              __size_of_IOCB4_SetInterruptHandler 000A  
                             ??_TMR5_WriteTimer 0003                             _I2C2_MasterSendNack F7DA  
                      ??_I2C2_Read1ByteRegister 0020                         __end_of_display_SetFont E37E  
                            _I2C2_MasterStartRx F812                            _I2C2_DO_ADDRESS_NACK EB08  
                                ??_dir_register 0046                         display_drawCircle@color 0025  
                       ??_SD_SPI_IsMediaPresent 000E                                 _timer0ReloadVal 0046  
                              disk_write@sector 0073                                     _RTC_handler F84E  
                    ?_IOCB4_SetInterruptHandler 000E                                   create_name@dp 0016  
                                 create_name@ni 0020                                   create_name@si 0024  
                                create_chain@cs 00D1                                  create_chain@fs 00CF  
                 I2C2_SetAddressNackCallback@cb 0013                            ?_I2C2_MasterClearIrq 0001  
                      __end_of_I2C2_SetCallback DEDC                               TouchAdjust@result 00EE  
                                           l244 AAC0                                             l421 7400  
                                           l271 6A50                                             l273 6734  
                                           l505 ABAE                                             l258 A214  
                                           l362 5A6C                                             l291 5AE6  
                                           l363 5A9E                                             l604 CA94  
                                           l268 672A                                             l365 5A96  
                                           l439 BB44                                             l394 835E  
                                           l634 43B2                                             l627 4228  
                                           l636 43A8                                             l628 4220  
                                           l708 329A                       SD_SPI_AsyncReadTasks@info 002C  
                                           l583 2872                                             l913 B8E6  
                                           l577 274C                                             l930 B7E4  
                                           l691 32B8                                             l588 2AF4  
                                           l599 CA74                                             l874 F54A  
                                           l997 3768                                             _HEX FE97  
                                ??_drawCalendar 0045                                             _PR2 000FBB  
                                           _PR6 000F4B                             ?_I2C2_MasterSendAck 0001  
                           ?_SPI1_ExchangeBlock 000E                                   ?_display_putc 0001  
                    ??_INT0_SetInterruptHandler 0010                                   ?_display_puts 0040  
                               _timer1ReloadVal 037E                                  ??_drawDateTime 00B9  
                                   _RTC_setDate D03A                                    ___awmod@sign 0013  
                           ??_SPI1_ExchangeByte 000E                                    disk_read@res 0042  
                               _TMR2_Initialize F5FA                                             prod 000FF3  
                                ??_create_chain 00BE                                             tosl 000FFD  
                                           wreg 000FE8                                     _RTC_setTime DBB0  
                                 _INT0_CallBack F394                        __end_of_EPWM2_Initialize F314  
                           ?_I2C2_MasterStartRx 0001                         SPI1_ExchangeBlock@block 000E  
                     ??_I2C2_DO_RX_NACK_RESTART 000E                        DrawAnalogClock@minupdate 0150  
                    SD_SPI_AsyncReadTasks@bData 0036                                 _CCP5_Initialize F4DC  
                             ?_GetTouchLocation 002A              __size_of_I2C2_DO_SEND_RESTART_READ 0008  
                                create_name@sfn 0026                                 create_chain@ncl 00CB  
                               create_chain@obj 00B8                                 create_chain@scl 00C7  
                               create_chain@res 00C6                __end_of_I2C2_CallbackReturnReset F81A  
                                   ld_clust@dir 0017                                 ?_lcd_set_cursor 0015  
                    ?_I2C2_DO_SEND_RESTART_READ 0001                              __size_of_IOCB4_ISR 0020  
                                          l1111 62AE                         ??_rd2RegCompleteHandler 0019  
                                          l1029 74F8                                            l2106 D7D4  
                                          l2122 DFDC                                            l1156 EEE8  
                                          l1261 F58C                                            l1087 4B1C  
                                          l3115 E53C                                 _timer3ReloadVal 0380  
                                          l3124 E4E8                                            l3304 8EF8  
                                          l3321 A63E                                            l3243 9E84  
                                          l3332 98E8                                            l4126 E714  
                                          l3174 8546                                            l3254 9FC0  
                                          l1647 ECE0                                            l3247 9EBC  
                                          l4136 EABC                                            l3176 854C  
                                          l3441 CB20                                            l3339 A290  
                                          l2636 4F52                                            l3437 CAF6  
                                          l2646 4FC6                                            l2726 7120  
                                          l2727 7126                                            l2592 409A  
                                          l2568 3CB4                                            l1882 F620  
                                          l1890 EBDC                                            l3485 E642  
                       ?_I2C2_DO_SEND_ADR_WRITE 0001                                            l3592 53C0  
                                          l3488 E65C                                            l2937 0C7E  
                                          l3497 C380                                            l3674 DB9E  
                                          l2957 132C                                            l2959 14E8  
                                          l2975 6CE2                                            l2968 6C78  
                                          l2996 7A46                                            l2989 79DC  
                                          STR_1 FFFB                                            STR_2 FFB3  
                                          STR_4 FF98                                            STR_5 FFEB  
                                          STR_6 FFE1                                            STR_7 FFFB  
                                          STR_8 FFA7                                            STR_9 FEE8  
                          _I2C2_MasterOperation EFDE                              ??_GetTouchLocation 002E  
                                          _LATA 000F89                                            _LATB 000F8A  
                                          _LATC 000F8B                                      _AlarmColor 0369  
                     I2C2_MasterSendTxData@data 000E                                            _TMR1 000FCE  
                                          _TMR2 000FBC                                            _TMR3 000FB2  
                                          _TMR5 000F4F                                            _TMR6 000F4C  
                                          _RDay 0578                                            _WPUB 000F61  
                          ?_I2C2_MasterSendNack 0001                                 __end_of_Bcd2Hex F51E  
                __size_of_I2C2_DO_SEND_ADR_READ 000E                         ??_wr2RegCompleteHandler 0019  
                                          _Fsid 0398                                            _Font 03E0  
                                          _T_x1 004D                                            _T_x2 02E8  
                                          _T_y1 02EA                                            _T_y2 02E6  
                                          _Mode 02E3                           ?_I2C2_MasterGetRxData 0001  
                 __end_of_I2C2_DO_SEND_ADR_READ F696                                            _Temp 03C4  
                       __size_of_RTC_resetAlarm 004A                                 ButtonCheck@mode 00BB  
             SD_SPI_MediaInitialize@CSDResponse 0060                                ?_DrawAnalogClock 0088  
                                          _file 05D2                                            _cosd F28E  
                                          _main 6DE2                                            _font FAD5  
                                  find_volume@i 00E0                           ??_display_setTextSize 000E  
                                 ?_EUSART1_Read 0001                                 ??_drawAlarmTime 0097  
                               _TMR0_StartTimer F806                                            _sind D37C  
                                          fsr0h 000FEA                                            fsr1h 000FE2  
                                          indf0 000FEF                                            fsr2h 000FDA  
                                          fsr0l 000FE9                                            indf1 000FE7  
                                          indf2 000FDF                                            fsr1l 000FE1  
                                          fsr2l 000FD9                                            btemp 0052  
                                          _wrap 03F6                            ??_I2C2_MasterSendAck 000E  
                          ??_SPI1_ExchangeBlock 0012                                     ld_dword@ptr 000E  
                                 disk_ioctl@cmd 000E                         __size_of_SPI1_ReadBlock 0028  
                                 disk_read@buff 0071                                   disk_read@pdrv 0041  
                                          prodh 000FF4                                            prodl 000FF3  
                                ??_get_ldnumber 0010                                            start 009A  
                               _timer5ReloadVal 0384                                 __end_of_Hex2Bcd F334  
               display_drawRoundRect@max_radius 0062                       __size_of_I2C2_DO_TX_EMPTY 0050  
                               _TMR3_Initialize F42A                              RotaryHandler@Bdata 039E  
                         ??_EPWM1_LoadDutyValue 0010                             display_SetFont@font 000E  
                    display_fillCircleHelper@x0 0027                      display_fillCircleHelper@y0 0029  
                     __end_of_SPI1_ExchangeByte F62A                      display_fillCircleHelper@px 003D  
                    display_fillCircleHelper@py 003B                            ??_I2C2_MasterStartRx 000E  
                                write_data@data 000F                   __size_of_display_fillTriangle 03C0  
                    ??_TMR1_SetInterruptHandler 0010                          __end_of_dateErrorCheck D18C  
                              ??_I2C2_MasterFsm 001B                                   lcd_fill@width 001F  
                       __size_of_GPRMCdatacheck 0282                                    ?_follow_path 00FB  
                               __end_of_Dispseg 22D4                                    ___param_bank 000000  
                                ?_years_to_days 002A               __size_of_display_drawCircleHelper 01BC  
                         _I2C2_MasterSendTxData F7B8                             __size_of_LCD8M_open 0008  
                              ?i2_AlarmSoundOff 0001                       ?_display_drawCircleHelper 001F  
              __size_of_rdBlkRegCompleteHandler 0040                                 ??_RotaryHandler 0001  
                         __end_ofi2_TMR0_Reload F750                                    drawTime@mode 00B6  
                 I2C2_ReadDataBlock@bufferBlock 0025                                 create_name@path 0018  
                              create_chain@clst 00BA                       __size_of_DATAEE_WriteByte 003A  
                                    _IncDecTime CAA8                                   ??_ButtonCheck 0046  
                       __end_of_TMR0_Initialize EDD2                                ??_I2C2_SetBuffer 0012  
                              __end_of_INT0_ISR F7C8                      __end_of_display_fillCircle DFB4  
                ??_TMR0_DefaultInterruptHandler 0001                           ?_I2C2_DO_ADDRESS_NACK 0001  
                      __end_of_display_drawLine BA4E                        __end_of_display_drawRect CD86  
                                   _sync_window A94C                  __size_of_OSCILLATOR_Initialize 0012  
                                    _Draw3month C00E                                    ?_SDFAST_open 0001  
                 __end_of_OSCILLATOR_Initialize F592                           ??_I2C2_MasterClearIrq 000E  
                   ?_I2C2_DO_SEND_RESTART_WRITE 0001                                           l20003 5EDA  
                                         l20005 5EF6                                           l20103 660E  
                                         l20201 A3DA                                           l20113 668E  
                                         l20019 E5EA                                           l20035 B9EA  
                                         l20027 B982                                           l20203 A3E2  
                                         l20141 F3EA                                           l20037 BA20  
                                         l20029 B9B8                                           l20205 A3EA  
                                         l20117 66C8                                           l20061 6412  
                                         l20053 63DE                                           l20045 6366  
                                         l20151 E402                                           l20215 F3CA  
                                         l20311 571A                                           l21111 73DE  
                                         l21007 831E                                           l20241 9BA8  
                                         l20129 D3F2                                           l20081 64E6  
                                         l20073 6450                                           l20065 6426  
                                         l20049 63A2                                           l20321 5774  
                                         l21121 7456                                           l20147 E3D8  
                                         l20139 F3E4                                           l20083 64F2  
                                         l21131 EC48                                           l20331 57E6  
                                         l20307 56F6                                           l20315 574A  
                                         l21019 83AC                                           l20237 9B8E  
                                         l20085 64FC                                           l20069 643C  
                                         l20077 6486                                           l21301 3842  
                                         l21213 35FC                                           l20421 B5C2  
                                         l21053 71C4                                           l22005 96C8  
                                         l20255 9C00                                           l20271 D1D4  
                                         l20191 A348                                           l20095 657C  
                                         l20511 531C                                           l20503 52F0  
                                         l21135 EC58                                           l20407 B52E  
                                         l22007 96D8                                           l20249 9BF0  
                                         l20169 A276                                           l20505 52FA  
                                         l21145 EC70                                           l20441 E68C  
                                         l21241 36D2                                           l20353 58C4  
                                         l20337 5830                                           l21081 733A  
                                         l21065 726E                                           l22041 9798  
                                         l23001 8C7C                                           l20275 D1FE  
                                         l20187 A306                                           l20099 65B6  
                                         l20523 5372                                           l22211 C3EC  
                                         l21147 EC78                                           l21139 EC62  
                                         l22123 B690                                           l21307 384A  
                                         l21227 3672                                           l21171 34D8  
                                         l20347 5898                                           l20419 B5B8  
                                         l21091 7378                                           l21075 7324  
                                         l22027 975E                                           l22043 979E  
                                         l20453 F634                                           l20197 A398  
                                         l20621 5546                                           l20605 54FE  
                                         l20541 53E8                                           l20517 5352  
                                         l20509 530A                                           l22301 7A4A  
                                         l22221 783E                                           l22141 B71C  
                                         l21317 3898                                           l20365 5910  
                                         l20381 5982                                           l20349 58A8  
                                         l23021 8EDC                                           l23013 8DC6  
                                         l20623 5592                                           l20631 55F2  
                                         l20519 5364                                           l20463 51C2  
                                         l22311 7AE8                                           l21431 7B70  
                                         l21327 3940                                           l21247 3700  
                                         l21175 34E8                                           l20375 5966  
                                         l22055 97DC                                           l22039 9788  
                                         l20449 F62C                                           l20561 5436  
                                         l20545 53FC                                           l20529 5382  
                                         l20465 51D0                                           l20457 51A8  
                                         l22313 7B16                                           l23105 6C84  
                                         l20705 1B3C                                           l21433 7B74  
                                         l22129 B6B2                                           l21281 37D6  
                                         l21257 371E                                           l21249 3708  
                                         l22153 F116                                           l22161 F12A  
                                         l23017 8E52                                           l22411 E484  
                                         l20635 5602                                           l20619 5540  
                                         l20547 5400                                           l20483 526E  
                                         l20475 520A                                           l22315 7B22  
                                         l22323 7B46                                           l22243 7890  
                                         l23123 6CE6                                           l23131 6DB2  
                                         l21435 7B7A                                           l22147 B746  
                                         l22163 F132                                           l20299 56A8  
                                         l21099 73C0                                           l22059 97EA  
                                         l23203 A6EA                                           l23211 A782  
                                         l23029 DE30                                           l20821 98CE  
                                         l20629 55E2                                           l20493 5294  
                                         l20485 5272                                           l20469 51D6  
                                         l22261 7952                                           l23109 6C8C  
                                         l20717 1CA4                                           l21445 7B98  
                                         l21437 7B84                                           l21349 3AFC  
                                         l22157 F124                                           l20397 5A7E  
                                         l20389 59F0                                           l22405 E2BA  
                                         l21383 EFFA                                           l22423 E4CC  
                                         l20583 5492                                           l20559 5432  
                                         l20575 5468                                           l20495 529E  
                                         l21535 03B0                                           l21527 02BC  
                                         l22255 78F4                                           l23151 C022  
                                         l23119 6CD0                                           l21463 7D26  
                                         l21455 7C62                                           l21439 7B8A  
                                         l22335 DB50                                           l20911 E056  
                                         l23215 E62E                                           l23207 A736  
                                         l22361 ED0A                                           l20577 5478  
                                         l20497 52A4                                           l21705 0FF2  
                                         l21537 0438                                           l24041 7FC0  
                                         l24033 7F08                                           l22273 79C8  
                                         l22265 795A                                           l23129 6D84  
                                         l23065 6ADC                                           l21449 7BA2  
                                         l22337 DB5C                                           l22521 A918  
                                         l22425 E9BE                                           l22195 F1B4  
                                         l20587 54B6                                           l21643 0C20  
                                         l21627 0AC4                                           l21539 043E  
                                         l24051 8134                                           l22283 79E8  
                                         l23171 C0B4                                           l23155 C02A  
                                         l23139 6DD6                                           l23083 6BEE  
                                         l20739 1DDC                                           l22347 DB90  
                                         l20931 D60E                                           l22435 E9F4  
                                         l21389 F006                                           l22357 ED04  
                                         l22373 ED28                                           l20597 54DE  
                                         l20589 54BE                                           l21733 116C  
                                         l21709 1010                                           l21637 0B22  
                                         l21549 049C                                           l24045 8068  
                                         l22277 79D4                                           l23077 6B88  
                                         l20773 20A8                                           l20757 1F42  
                                         l20685 19A0                                           l21477 7E5C  
                                         l21901 BB1C                                           l22509 A87A  
                                         l22445 EE94                                           l22437 EE72  
                                         l23229 E656                                           l24061 E0F8  
                                         l24143 AF7E                                           l24127 AF2A  
                                         l22199 F1C4                                           l21751 12E8  
                                         l21487 00B8                                           l24047 80EC  
                                         l22287 79F0                                           l23095 6C64  
                                         l23087 6BF6                                           l21479 7E5E  
                                         l22543 C6C8                                           l20919 E07E  
                                         l22551 AADC                                           l24071 E122  
                                         l23183 A624                                           l21817 DB2A  
                                         l22369 ED20                                           l20857 9C88  
                                         l22449 E09A                                           l20849 9A1C  
                                         l22297 7A34                                           l22473 A7DC  
                                         l24139 AF58                                           l22387 F106  
                                         l22379 F0EE                                           l20867 9E3A  
                                         l22459 E0E2                                           l21747 1274  
                                         l21739 11E6                                           l21755 12EE  
                                         l23099 6C70                                           l20955 F54E  
                                         l20939 D636                                           l20947 D65E  
                                         l22563 AB58                                           l22395 E272  
                                         l24091 8F00                                           l21837 F2CE  
                                         l21749 12BC                                           l25117 CA84  
                                         l25061 BE5E                                           l25205 245A  
                                         l25213 249E                                           l25141 2326  
                                         l25133 2300                                           l20973 819C  
                                         l20893 E770                                           l21917 DD08  
                                         l22549 AAD8                                           l24501 4F04  
                                         l24167 DC82                                           l24159 DC2E  
                                         l21767 1460                                           l21759 1318  
                                         l21695 0F94                                           l21871 A1EA  
                                         l20879 DD2A                                           l25207 247A  
                                         l20895 E774                                           l24079 E142  
                                         l23199 A69E                                           l24095 8F22  
                                         l24511 4F10                                           l24191 CC3A  
                                         l24169 DC8A                                           l25225 24E6  
                                         l20977 81A0                                           l21937 B2F8  
                                         l22489 A820                                           l24505 4F0A  
                                         l19003 E8D8                                           l25091 BF10  
                                         l25323 2846                                           l25227 250C  
                                         l25219 24B4                                           l25163 2370  
                                         l20987 820E                                           l24523 4F62  
                                         l24195 CC46                                           l26035 6F78  
                                         l25085 BEEA                                           l25245 253C  
                                         l20997 829A                                           l21885 BA8A  
                                         l21957 B3CE                                           l21949 B354  
                                         l25501 4210                                           l23805 E982  
                                         l24453 4C90                                           l26053 709A  
                                         l26045 6FBA                                           l23903 891C  
                                         l23743 D774                                           l23735 D6FA  
                                         l19015 B85C                                           l19007 E8DE  
                                         l25095 BF1A                                           l25327 285C  
                                         l25239 2532                                           l25183 23B4  
                                         l25175 23AA                                           l25159 236C  
                                         l20999 82DC                                           l21983 9646  
                                         l21975 961E                                           l22599 AC36  
                                         l23807 E986                                           l24535 4F86  
                                         l24527 4F6A                                           l23833 D5A4  
                                         l19009 E8E6                                           l25257 25A2  
                                         l25441 D2FA                                           l21993 969E  
                                         l24553 4FD4                                           l24529 4F7A  
                                         l24465 4CC4                                           l24617 D44A  
                                         l24625 D482                                           l26065 70C6  
                                         l26073 70FE                                           l23915 8996  
                                         l23907 8954                                           l23851 875C  
                                         l19035 B8FE                                           l19027 B8E8  
                                         l19043 B93E                                           l25427 ADA2  
                                         l25355 29D2                                           l25195 23F4  
                                         l25451 D33C                                           l21899 BB14  
                                         l21987 9658                                           l25611 4708  
                                         l23763 D87C                                           l24555 4FDA  
                                         l24539 4F8C                                           l24707 91A0  
                                         l24661 8A74                                           l24645 8A10  
                                         l23917 8998                                           l23829 D550  
                                         l23837 D5CC                                           l18501 6174  
                                         l25269 2602                                           l21989 965C  
                                         l25605 469C                                           l25533 439A  
                                         l23757 D858                                           l24717 91B4  
                                         l26093 7150                                     ?_SPI1_Close 0001  
                                         l18431 CF8A                                           l23847 8736  
                                         l23951 A50C                                           l19303 DA0E  
                                         l18511 61C6                                           l25367 2AC6  
                                         l25447 D328                                           l25551 43F8  
                                         l25607 46F2                                           l25471 4190  
                                         l25703 3132                                           l25711 322A  
                                         l23759 D864                                           l24583 510C  
                                         l24479 4CEE                                           l24743 92BC  
                                         l26079 7112                                           l23873 8812  
                                         l23945 A4D4                                           l19065 BC76  
                                         l18601 4832                                           l19161 AABA  
                                         l19401 CEC0                                           l25393 2CBA  
                                         l24569 504E                                           l24761 9304  
                                         l24683 8C16                                           l23859 87A0  
                                         l23867 87D0                                           l23963 A5CA  
                                         l23939 A440                                           l19075 BCC6  
                                         l19307 DA1C                                           l18443 EE2A  
                                         l18523 EBD0                                           l19171 E920  
                                         l18603 4840                                           l19403 CEDE  
                                         l25459 D360                                           l25491 41E4  
                                         l25731 334C                                           l25651 2EF6  
                                         l25635 2DBA                                           l24587 5150  
                                         l24579 50C6                                           l19317 E6E2  
                                         l22989 D6F2                                           l23885 888C  
                                         l23877 884A                                           l23949 A4FC  
                                         l18541 EC8C                                           l18533 EC80  
                                         l19077 BCD0                                           l19069 BC8A  
                                         l19093 EFAE                                           l18437 EE12  
                                         l18613 4888                                           l25725 330C  
                                         l25709 320A                                           l25661 2F24  
                                         l25813 3C7C                                           l24765 9334  
                                         l24749 92C0                                           l19503 E728  
                                         l19319 E6EA                                           l19263 E450  
                                         l24687 8C26                                           l23887 888E  
                                         l23991 CB3E                                           l23983 CADE  
                                         l23959 A5A4                                           l19079 BCDC  
                                         l19167 E8F2                                           l19175 E926  
                                         l18607 4844                                           l25591 45FC  
                                         l25719 327C                                           l25735 33B2  
                                         l25671 2F9C                                           l25903 3FC0  
                                         l19441 D794                                           l19345 EAB2  
                                         l19337 EA92                                           l19329 E70A  
                                         l23985 CB08                                           l18545 EC92  
                                         l18537 EC86                                           l19601 866E  
                                         l19281 D9C6                                           l18529 EBF2  
                                         l19177 E92E                                           l18641 49EC  
                                         l25585 45D6                                           l25649 2EBE  
                                         l25921 4010                                           l25825 3CFE  
                                         l25817 3CBC                                           l25809 3C4A  
                                         l25841 3DE0                                           l24777 938A  
                                         l19515 E736                                           l19451 D7A0  
                                         l19339 EA9A                                           l19259 E43C  
                                         l23995 CB4E                                           l18555 EC9C  
                                         l19611 86C0                                           l19275 D9B6  
                                         l18483 609E                                           l18803 74C0  
                                         l18707 4B62                                           l18571 474C  
                                         l18563 4712                                           l25579 4594  
                                         l25499 420C                                           l25747 342E  
                                         l25667 2F4A                                           l25931 404E  
                                         l25915 3FF6                                           l25851 3DFE  
                                         l25819 3CC8                                           l24795 B428  
                         _eusart1RxStatusBuffer 0600                                           l19509 E730  
                                         l19445 D79A                                           l19437 D78E  
                                         l18549 EC98                                           l19605 8678  
                                         l19701 A006                                           l18653 4A0E  
                                         l18637 49E8                                           l25589 45EC  
                                         l25749 3466                                           l25837 3DC2  
                                         l19535 EB10                                           l19287 D9DC  
                                         l18903 772C                                           l18823 756E  
                                         l18815 7532                                           l18559 470E  
                                         l25687 3052                                           l25679 2FF6  
                                         l25935 4060                                           l19481 DFE6  
                                         l19545 EB1C                                           l19553 8482  
                                         l19633 C8C0                                           l19289 D9E4  
                                         l18497 613C                                           l18753 EF74  
                                         l18737 4C36                                           l18729 4BE2  
                                         l18585 47DC                                           l18745 4C3E  
                                         l25697 30E4                                           l25945 40CC  
                                         l25937 4078                                           l25881 3EBE  
                                         l25777 3B42                                           l19459 D800  
                                         l19539 EB16                                           l19731 C722  
                                         l19803 DDAE                                           l19563 84BA  
                                         l19555 8490                                           l19299 DA04  
                                         l19707 A022                                           l18923 77B2  
                                         l18907 7748                                           l18835 7592  
                                         l18827 7572                                           l18819 755A  
                                         l18595 482E                                           l18579 479C  
                                         l18763 B75A                                           l25963 415C  
                                         l25939 407E                                           l25787 3B68  
                                         l18941 DEAA                                           l19477 DFE0  
                                         l19733 C72E                                           l19725 C700  
                                         l19637 C904                                           l19661 C848  
                                         l19709 A026                                           l18749 EF64  
                                         l18589 47F4                                           l25957 411A  
                                         l25885 3ECE                                           l19487 DFEC  
                                         l19751 C786                                           l19743 C762  
                                         l19719 C6E8                                           l19823 DDF4  
                                         l19815 DDDC                                           l19807 DDBC  
                                         l19575 84E4                                           l19639 C910  
                                         l19655 C7F8                                           l18919 778E  
                                         l18847 75F6                                           l18935 77EC  
                                         l18783 B7FC                                           l18775 B7E6  
                                         l18791 B83C                                           l25959 412C  
                                         l19809 DDC4                                           l19577 84EA  
                                         l19569 84D0                                           l19673 9EA0  
                                         l19913 68A0                                           l19499 E722  
                                         l19747 C770                                 __end_of___aldiv C798  
                                         l19771 CFD0                                           l19763 CFAA  
                                         l19819 DDE6                                           l19851 E5CC  
                                         l19595 8616                                           l19587 8582  
                                         l19659 C83C                                           l19683 9F4A  
                                         l18891 7722                                           l19923 696A  
                                         l19915 68BE                                           l19931 6A32  
                                         l19773 CFDC                                           l19837 E31A  
                                         l18965 E57C                                           l19597 8666  
                                         l19589 85D2                                           l19669 9E68  
                                         l18869 75FA                                           l19917 68C8  
                                         l19783 D012                                           l19767 CFBE  
                                         l18983 E528                                           l19695 9FC6  
                                         l19687 9F72                                           l19679 9F0E  
                                         l18799 74BC                                           l19689 9F8E  
                                         l19881 C97E                                           l19787 D028  
                                         l19779 D004                                           l19699 9FEA  
                                         l19867 F13E                                           l19957 5BA2  
                                         l19799 DDA2                                           l18999 E8AA  
                                         l19975 5CA4                                           l19959 5BD6  
                                         l19979 5CDA                                           l19989 5D8A  
                                         l19999 5ED6                                           ?_cosd 001B  
          __end_of_I2C2_SetDataCompleteCallback F4DC           __size_of_I2C2_SetDataCompleteCallback 0018  
                  _I2C2_SetDataCompleteCallback F4C4                                 __end_of___almod D03A  
                                         ?_main 0001                          __size_of_ymd_to_scalar 00A6  
                             __end_of_I2C2_Open DB2E                                 __end_of___awdiv DA26  
                               __end_of___lbdiv ED2C                                  ??_display_putc 003B  
                                         _EEADR 000FA9                                           STR_10 FFFB  
                                         STR_11 FF2C                                           STR_20 FFF2  
                                         STR_12 FFD4                                           STR_21 FFF8  
                                         STR_13 FFD6                                           STR_14 FFD6  
                                         STR_22 FFF5                                           STR_30 FF89  
                                         STR_31 FF2C                                           STR_23 FFE7  
                                         STR_15 FFCD                                  ??_display_puts 0042  
                                         STR_24 FFF8                                           STR_32 FFBD  
                                         STR_16 FF16                                           STR_25 FFF5  
                                         STR_33 FFDB                                           STR_17 FECD  
                                         STR_26 FFE7                                           STR_18 FFF8  
                                         STR_34 FFC6                                           STR_19 FFEF  
                                         STR_35 FF69                                           STR_27 FF41  
                                         STR_28 FF55                                           STR_36 FF00  
                               __end_of___awmod DDFE                                           STR_29 FF7A  
                                         STR_37 FEA8                                           ?_sind 0013  
                               __end_of___lbmod F10E                                 __end_of_dbc_2nd D668  
              SPI1_Open@spi1UniqueConfiguration 000F                                           _CT2_0 03FC  
                               __end_of_dbc_1st E088               __end_of_IOCB4_SetInterruptHandler F6D8  
                               __end_of___lldiv DBB0                                           u20015 B77C  
                                         _T0CON 000FD5                                           u20121 7528  
                                         u20105 74EA                                           u20131 7552  
                                         u20140 7560                                           u20028 B7C8  
                               ___awdiv@divisor 0010                                           u20029 B7DA  
                                         u20320 E4E4                                           u20208 7690  
                                         _T1CON 000FCD                                           u20209 76A2  
                                         u20081 74DA                                           u20228 76C4  
                                         u20068 B824                                           u20229 76D8  
                                         u20069 B836                                           u22110 D1B8  
                                         u20510 EFAA                                           u21150 9ED4  
                                         u22030 A356                                           u20238 76F2  
                                         u20431 BC54                                           u20239 7706  
                                         u21160 9ED6                                           u20168 75C4  
                                         _T2CON 000FBA                                           u20169 75D8  
                                         u22201 579C                                           u30017 6E66  
                                         u21330 CFE0                                           u20418 B926  
                                         u20419 B938                                           u30107 93AC  
                                         u30027 6E84                                           u20460 BC82  
                                         u20268 7764                                           u21500 66FA  
                                         u20269 7778                                           u20365 B87E  
                                         u30117 95B4                                           u30037 6EA2  
                                         u21270 C732                                           u20710 E6EE  
                                         u20278 77CE                                           u21510 671A  
                                         u22150 5696                                           u30207 BF5E  
                                         u20279 77E2                                           u30127 91EA  
                                         u30047 B3F0                                           u21440 E310  
                                         u20480 BD08                                           _T3CON 000FB1  
                                         u30217 BF88                                           u30137 9376  
                                         u30057 B42A                                           u20378 B8CA  
                                         u21610 5AC4                                           u22250 5868  
                                         u22170 5708                                           u22410 B61A  
                                         u23130 832E                                           u23050 819C  
                                         u30307 DC1C                                           u30227 BFB2  
                                         u20379 B8DC                                           u23115 82BC  
                                         u30147 3FE2                                           u30067 B452  
                                         u20580 F6B6                                           u20740 EA9E  
                                         u22420 B63A                                           u23220 7254  
                                         u30317 D056                                           u30237 BFD8  
                                         u21525 677E                                           u22421 B636  
                                         u30157 F214                                           u30077 B474  
                                         u21390 DDC8                                           u21470 E5C8  
                                         u20670 D9E8                                           u21710 5DCC  
                                         u22190 5762                                           u30327 D080  
                                         u30247 BFFC                                           u30167 ED4E  
                                         u30087 B508                                           u20808 D7AC  
                                         u20760 CE62                                           u22440 F616  
                                         u23240 72B0                                           u20809 D7BE  
                                         u30337 D0AA                                           u30257 E86E  
                                         u21545 681C                                           u23225 724A  
                                         u30177 C2C8                                           u30097 9396  
                                         u22530 52D2                                           u23170 83FE  
                                         u23090 8258                                           u30347 D0D4  
                                         u30267 E892                                           u21715 5DC2  
                                         u21635 5B30                                           u30187 C2EA  
                                         u20940 85E2                                           u22540 52D8  
                                         u23420 34D4                                           u23260 7320  
                                         u30277 EFB4                                           u30197 BF38  
                                         u23405 BE04                                           u23245 72A6  
                                         u20838 DFF8                                           u21590 69AC  
                                         u23270 7336                                           u23190 71C0  
                                         u24310 BB38                                           u20839 E00A  
                                         u30287 DBC8                                           u21575 68AC  
                                         u23175 83F4                                           u23095 824E  
                                         u20848 E742                                           u22720 5506  
                                         u25120 A7B8                                           _T5CON 000F4E  
                                         u20849 E754                                           u30297 DBF2  
                                         u22537 52C8                                           u23521 3618  
                                         u23441 353E                                           u21665 5C22  
                                         u20858 EB28                                           u22730 5524  
                                         u22570 5346                                           u23418 34BC  
                                         u21690 5CC2                                           u23290 7362  
                                         u25210 A948                                           u25130 A7D8  
                                         u20859 EB3A                                           u23611 373A  
                                         u23419 34CE                                           u21595 69A2  
                                         u21940 D3A4                                           u22468 E6A6  
                                         u23700 3810                                           u23460 3556  
                                         u25300 ABA6                                           u22469 E6BA  
                                         u22750 560A                                           u22910 DD84  
                                         u23630 3758                                           u23518 35F6  
                                         u23438 3504                                           u24350 B2F2  
                                         u25150 A81C                      __end_of_display_drawCircle 9A32  
                                         u23375 BD5A                                           u23551 36A4  
                                         u23439 3518                                           u21695 5CB8  
                                         u21768 E610                                           u21960 E3FA  
                                         u22760 5624                                           _T6CON 000F4A  
                                         u21769 E622                                           u22577 533C  
                                         u23385 BD84                                           u21970 E424  
                                         u22770 1874                                           u23570 36C2  
                                         u24290 BB00                                           u22930 E7A8  
                                         u23395 BDD4                                           u23491 35C2  
                                         u27100 A41E                                           u23805 39DA  
                                         u22870 9C60                                           u24710 B6F0  
                                         u23814 39FA                                           u22950 E04C  
                                         u24470 96B2                                           u21967 E3F0  
                                         u23815 39F6                                           u23591 36EE  
                                         u22880 9C7E                                           u28000 8B06  
                                         u27120 A4EA                                           u24720 B718  
                                         u23824 3A36                                           u23728 383C  
                                         u23488 357A                                           u21977 E41A  
                                         u27201 7E7C                                           u23825 3A30  
                                         u23681 37F2                                           u23489 358E  
                                         u28010 8B44                                           u22890 DD58  
                                         u23738 386C                                           u23658 3786  
                                         u24490 96C4                                           u26170 E668  
                                         u23739 3880                                           u23659 3798  
                                         u27300 AF26                                           u28020 8B76  
                                         u27140 A5B8                                           u23668 37B2  
                                         u23669 37C4                                           u28030 8BB4  
                                         u23790 39B6                                           u22990 D604  
                                         u28007 8AFC                                           u27320 AF7A  
                                         u28040 8BE6                                           u23960 7D6E  
                                         u24680 B6AE                                           u23848 3AE6  
                                         u28017 8B3A                                           u22897 DD4E  
                                         u23849 3AF8                                           u23785 3918  
                                         u27170 CB24                                           u27090 A410  
                                         u23858 3B18                                 __end_of___lwdiv E71E  
                                         u28027 8B6C                                           u23795 39AC  
                                         u27340 AFD2                                           u27180 CB34  
                                         u28037 8BAA                                           u27350 B022  
                                         u28310 BE80                                           u27270 E14C  
                                         u27327 AF70                                           u28047 8BDC  
                                         u19408 5F74                                           u24960 DB60  
                                         u27361 B04A                                           u19409 5F88  
                                         u19418 5FA2                                           u27347 AFC8  
                                         u19419 5FB6                                           u25940 DE20  
                                         u27380 DC5C                                           u19428 5FD0  
                                         u27357 B018                                           u19429 5FE4  
                                         u19701 47B8                                           u29205 453C  
                                         u24990 ED0E                                           u19550 61C0  
                                         u19518 6128                                           u19438 5FFE  
                                         u25855 ECEE                                           u19631 630E  
                                         u19439 6012                                           u25960 DE5E  
                                         u25856 ECF0                                           u19608 6298  
                                         u19448 602C                                           u28360 BEF8  
                                         u28600 2538                                           u29240 4616  
                                         u19609 62AC                                           u19449 6060  
                                         u19618 62C8                                           u19538 618E  
                                         u19490 60E2                                           u25947 DE16  
                                         u19619 62DC                                           u19539 61A2  
                                         u19468 6082                                           u19469 6096  
                                         u19741 4812                                           u19661 472C  
                                         u19478 60B8                                           u19398 5F2C  
                                         u29350 2E14                                           u26950 E9A8  
                                         u25967 DE54                                           u19479 60CC  
                                         u19399 5F5A                                           u19735 47E6  
                                         u19808 4926                                           u19680 4770  
                                         u28480 2368                                           u29280 46BA  
                                         u27840 4FB2                                           u27760 4EA8  
                                         u19809 4938                                           u28705 2788  
                                         u19578 6208                                           u19850 49DA  
                                         u19579 621C                                           u29515 31D0  
                                         u29355 2E0A                                           u26980 8732  
                                         u19588 6238                                           u19828 4962  
                                         u28580 2526                                           u19589 624C  
                                         u19829 4976                                           u19685 4766  
                                         u28805 29B2                                           u29285 46B0  
                                         u29525 3214                                           u26957 E99E  
                                         u27950 8A0C                                           u19598 6268  
                                         u19838 4990                                           u28830 2B1A  
                                         u19599 627C                                           u19839 49A4  
                                         u19928 4ACC                                           u19848 49BE  
                               __end_of___lwmod EAC6                                           u19929 4AE0  
                                         u19849 49D2                                           u29465 3070  
                                         u29801 3F7A                                           u19938 4AFA  
                                         u19939 4B0E                                           u28835 2B10  
                                         u29811 3F98                                           u19948 4B38  
                                         u19788 4874                                           u29580 346E  
                                         u19949 4B4C                                           u29821 3FB6  
                                         u27990 8AD4                                           u19878 4A40  
                                         u19798 48A2                                           u19879 4A54  
                                         u19799 48B6                                           u19968 4B94  
                                         u19888 4A6E                                           u19969 4BA8  
                                         u19889 4A82                                           u19988 4BCE  
                                         u27997 8ACA                                           u29781 3F3E  
                                         u19998 4C14                                           u29870 403E  
                                         u19999 4C28                                           u29791 3F5C  
                                         u29880 404E                                  drawVLine@color 001F  
                               ___awdiv@counter 0012                                    _SDcardStatus 03A1  
                                         _TMR0H 000FD7                                           _TMR1H 000FCF  
                                         _TMR0L 000FD6                                           _TMR3H 000FB3  
                                         _TMR1L 000FCE                                           _TMR3L 000FB2  
                                         _TMR5H 000F50                                           _TMR5L 000F4F  
                  ?_I2C2_SetAddressNackCallback 0013                                           _TRISA 000F92  
                                         _TRISB 000F93                                  ?_INT0_CallBack 0001  
                                         _TRISC 000F94                                           _Accel 02F5  
                               ??_lcd_fill_rect 0023                                 __end_of_f_close EA42  
                                         _RDate 0482                                      _Brightness 0378  
                                    _DrawSetBox 8C6A                                           _FatFs 039A  
                               __end_of_chk_chr E7BC                      ??_display_fillCircleHelper 0032  
             __size_of_TMR0_SetInterruptHandler 000A                   SD_SPI_SectorRead@sector_count 003D  
                            __size_of_SPI1_Open 00AC                                           _RTemp 055A  
                                         _RTime 04A0                                           _RYear 05B4  
                           ___lmul@multiplicand 0012                       ?_TMR0_SetInterruptHandler 000E  
                               __end_of_f_mount D37C                                 __end_of_dir_sdi 8466  
                         _SD_SPI_AsyncReadTasks 74BA                                 __end_of_f_write 3482  
                                   _AlarmStatus 03A3                                 __end_of_get_fat 6A62  
                      ??_SD_SPI_AsyncWriteTasks 002D                                __end_of_TMR0_ISR F66A  
                              __end_of_TMR1_ISR EF2E                          ?_I2C2_MasterDisableIrq 0001  
                              __end_of_TMR5_ISR F56E                                           _crc16 E628  
                __end_of_I2C2_DO_SEND_ADR_WRITE F688                   __size_of_display_drawTriangle 0086  
                        ??_display_setTextColor 0012                                 __end_of_ld_word ED9C  
                               _DATAEE_ReadByte F47C                         __end_of_PIN_MANAGER_IOC F746  
                      ?_I2C2_CallbackReturnStop 0017                                 __end_of_mem_cmp DD8E  
                               __end_of_mem_cpy EC40                                 __end_of_dpowers FAB9  
                      __size_of_AlarmInitialize 0012                                 __end_of_mem_set F15E  
                                         _drive 0740                                           _dylen E2C8  
                                 find_volume@br 00AB                                   find_volume@fs 00E3  
                               __end_of_isdigit F3D2                                   find_volume@pt 00C5  
                         ?_I2C2_MasterOperation 0001                           I2C2_Close@returnValue 000E  
                               _I2C2_DO_TX$5388 0019               __end_of_I2C2_DO_SEND_RESTART_READ F7B8  
                         ??_I2C2_MasterSendNack 000E                         __end_of_TMR1_Initialize F0E4  
                               __end_of_moninit FAAF                                  disk_ioctl@buff 000F  
                                         pclath 000FFA                                __end_of_RTC_read EFDE  
                                disk_read@count 0077                                           tablat 000FF5  
                                disk_ioctl@pdrv 0011                           __end_of_Timer5Handler AF02  
                          _I2C2_DO_RX_NACK_STOP F788                                ymd_to_scalar@day 0038  
                                ??_EUSART1_Read 0001                                           plusw0 000FEB  
                                         plusw1 000FE3                                           plusw2 000FDB  
                             ??_I2C2_ReadNBytes 0022                                 __end_of_put_fat 5EFA  
                                         ttemp5 0053                                           ttemp6 0056  
                                         ttemp7 005A                                           status 000FD8  
                               __end_of_st_word F186                                drawTime@datetime 00B2  
                                         wtemp8 0053                                 __end_of_sprintf 5632  
                                  ??_I2C2_DO_RX 0019                                    ??_I2C2_DO_TX 0019  
                               _TMR2_StartTimer F802                                 __end_of_sync_fs A21A  
                               __end_of_strncmp DCA4                                 ___lbdiv@divisor 000E  
                                lcd_fill@height 001D                                 years_to_days@yr 002A  
    __end_of_EUSART1_DefaultFramingErrorHandler F862     __size_of_EUSART1_DefaultFramingErrorHandler 0002  
          ??_EUSART1_DefaultFramingErrorHandler 0001             ?_EUSART1_DefaultFramingErrorHandler 0001  
            _EUSART1_DefaultFramingErrorHandler F860                                 _TMR1_WriteTimer F446  
                               ___lbdiv@counter 0010                                   TouchAdjust@dx 00E9  
                                 TouchAdjust@kk 00EF                                   TouchAdjust@dy 00EB  
                                 get_ldnumber@i 0014                        __size_of_SPI1_Initialize 0012  
                         spi_master_open@config 0010                                   disk_write@res 0045  
                                   ?_SD_SendCmd 0015                                    ??_I2C2_Close 000E  
               ??_IOCB4_DefaultInterruptHandler 0001                                 _TMR5_Initialize EF2E  
                             ??_I2C2_MasterRead 001F                          DrawSmallCalendar@color 00A2  
                             ??_I2C2_MasterOpen 000E                                __end_of_DispTime 7E70  
                               ?_dateErrorCheck 0089                        __end_of_RTC_setAlarmTime C00E  
                        DrawSmallCalendar@fontw 00A6                               ??_I2C2_MasterStop 000E  
                             ??_I2C2_Initialize 000E                                 __initialization B188  
                        DrawSmallCalendar@month 0089                                 DrawSetBox@color 01F7  
                               GPRMCdatacheck@p 0096                               ?_get_tempHumidity 0023  
                           disk_initialize@pdrv 0037                             disk_initialize@stat 0038  
                                  __end_of_cosd F2B0                      __end_of_EUSART1_Initialize E1B0  
                                  __end_of_main 7158                                    __end_of_font FE1D  
                                AlarmSoundOn@sn 0010                                    __end_of_sind D418  
                         _display_drawRoundRect 8EE2                     GetTouchLocation@sample_sumX 00A2  
                   GetTouchLocation@sample_sumY 00A4                                     ButtonPush@x 000E  
                                   ButtonPush@y 0010                                      _ButtonObj3 0400  
                                 drawTime@color 00B4                                      _ButtonName FE67  
                                    _FrontColor 03F4                                      _ButtonPush D668  
                             __end_of_IOCB4_ISR F394                              ??_get_tempHumidity 0027  
                      display_fillTriangle@dx01 0060                        display_fillTriangle@dx02 0080  
                      display_fillTriangle@dx12 007A                        display_fillTriangle@dy01 0062  
                       __end_of_TMR2_Initialize F60A                        display_fillTriangle@dy02 0078  
                      display_fillTriangle@dy12 0064             __end_of_I2C2_SetAddressNackCallback F4AC  
                   _I2C2_SetAddressNackCallback F494                     ?_INTERRUPT_InterruptManager 0001  
                      display_fillTriangle@last 0076                           __size_of_AlarmSoundOn 004E  
                              ?_display_SetFont 000E                 __size_of_I2C2_Read1ByteRegister 005C  
                                        ??_cosd 001D                                          ??_main 01FC  
                             ?_lcd_set_cursor_x 0011                               ?_lcd_set_cursor_y 0011  
                       __end_of_CCP5_Initialize F4F2                __size_of_I2C2_MasterWaitForEvent 0006  
                                        ??_sind 0015                        _TMR5_SetInterruptHandler F6BA  
                                 __activetblptr 000003                                    ?_SDSLOW_open 0001  
                     GetTouchLocation@overrange 00A0                      display_drawChars@prev_size 007D  
                            ??_lcd_set_cursor_x 0013                              ??_lcd_set_cursor_y 0013  
                           __end_of_ButtonCheck E152                                 draw_pixel@color 0011  
                                Draw3month@mode 00AD                              __end_of_I2C2_DO_RX E020  
                            __end_of_I2C2_DO_TX D80C                __size_of_I2C2_Write1ByteRegister 0056  
                               _TMR6_Initialize F5EA                   ??_I2C2_SetAddressNackCallback 0017  
                                     ??_Bcd2Hex 000E                                          ?_crc16 000E  
                       _SD_SPI_IsWriteProtected F7F6                              __end_of_I2C2_Close F2D2  
                       __end_of_TMR0_StartTimer F80A                                          _ADCON0 000FC2  
                                        _ADCON1 000FC1                                          _ADCON2 000FC0  
                                        ?_dylen 0013                       __size_ofi2_TMR0_StopTimer 0004  
                                        _ADRESH 000FC4                                          _EEADRH 000FAA  
                                        _ADRESL 000FC3                                          _EEDATA 000FA8  
                                        _CCPR1H 000FBF                                          _CCPR2H 000F68  
                                        _CCPR1L 000FBE                                          _CCPR2L 000F67  
                                        _CCPR5H 000F56                                   SD_SendCmd@cmd 0026  
                                        _CCPR5L 000F55                                          _EECON2 000FA7  
                      drawTempHumidity@humidity 0044                                ___awdiv@dividend 000E  
                                        _ANSELA 000F38                                          _ANSELB 000F39  
                                        _ANSELC 000F3A                          ??_I2C2_MasterGetRxData 000E  
                                        _T1GCON 000FCC                                __end_of_WriteYMD D782  
                                        _T3GCON 000FB4                                          _T5GCON 000F4D  
                            SD_SPI_SectorRead@i 0062                           ?_I2C2_DO_RX_NACK_STOP 0001  
                       TMR1_WriteTimer@timerVal 0001                                       ??_Hex2Bcd 0012  
                  __size_of_EUSART1_is_rx_ready 0010                         __end_of_TMR3_Initialize F446  
                                        i2l1411 002E                                          i2l1420 0074  
                                        i2l1413 003A                                          i2l1415 0046  
                                        i2l1418 0068                                          i2l1419 007E  
                                        i2l1811 F458                                          i2l1699 F404  
                          __size_of_getWeekdays 00DE                                          i2l2769 CDE2  
                                        _RCREG1 000FAE                          __size_of_CheckCheckSum 014E  
                                        _RCSTA1 000FAB                                          _OSCCON 000FD3  
               SD_SPI_AsyncWriteTasks@data_byte 03A7                                          _PLLRDY 007E97  
                                        _SPBRG1 000FAF                                   _ymd_to_scalar D18C  
                      _I2C2_CallbackReturnReset F816                            __end_of_dir_register C6CC  
                                 ??_SlideSWProc 0046                                          _DbcTbl FAC3  
                                     ??_Dispseg 003F                                __end_of_check_fs B74A  
                                        _RAlarm 0464                                          _TXSTA1 000FAC  
                           __size_of_SPI1_Close 0004                         ?_SD_SPI_MediaInitialize 0001  
                                        _GetGPS 02DF                            __end_of_drawCalendar D5DA  
                                        _RMonth 0596                                          _Buffer 0640  
                          __size_of_create_name 0236                        __size_of_disk_initialize 0028  
                               ??_years_to_days 002E                                 _global_bg_color 0372  
                    __size_of_SPI1_ExchangeByte 0010                            __end_of_drawDateTime BC42  
                        ?_I2C2_MasterSendTxData 0001                      display_drawRoundRect@color 003E  
                              __end_of_dir_find B3EE                               __end_of_SPI1_Open CF8E  
                              __end_of_dir_next 74BA                                __end_of_fillRect E26C  
                                  ?_move_window 008C                                      _NormalProc 3B2A  
                          __end_of_create_chain 5AB0                                    _AlarmSoundOn E7BC  
          __end_of_TMR1_DefaultInterruptHandler F85A           __size_of_TMR1_DefaultInterruptHandler 0002  
                  _TMR1_DefaultInterruptHandler F858                            __size_of_get_fattime 005E  
                              __end_of_lcd_fill D894                                    _CCPTMRS0bits 000F49  
                                        _Test_x 02EE                                          _Test_y 02EC  
                                  _CCPTMRS1bits 000F48                                     _DisplayMode 02E2  
                              __end_of_drawTime C458                                __end_of_ld_clust DD1A  
                                        _TouchX 03C8                                          _TouchY 03C6  
                                  ?_TMR0_Reload 0001                                __end_of_ld_dword CC20  
                          I2C2_SetBuffer@buffer 000E                                          ___lmul E42C  
                          __size_of_find_volume 0A12                                       ??___aldiv 0022  
                                     ??___almod 0016                                          _addset E37E  
                          __size_of_disk_status 003C                                          ___wmul F224  
                                     ??___awdiv 0012                                       ??___lbdiv 000F  
                                TouchAdjMsg@num 00E2                                       ??___awmod 0012  
                                TouchAdjMsg@str 007E                       __size_ofi2_TMR2_StopTimer 0004  
                                     ??___lbmod 000F                                       ??_dbc_2nd 0010  
                                     ??_dbc_1st 0010                                       ??___lldiv 0016  
                        ??_I2C2_DO_ADDRESS_NACK 0019                                          _f_open 4184  
                                        _ioInfo 0300                                       ??___lwdiv 0027  
                                        _f_sync AC3A                                       ??___lwmod 0012  
                                   ?_IncDecTime 000E                                __end_of_init_RTC B518  
                      __end_of_decimalToFatTime BE34                        ?_EUSART1_SetErrorHandler 000E  
                       __size_ofi2_AlarmSoundOn 004E                      _display_drawRoundRect$7131 0060  
                                        _gmtime 9A32                                          _memcpy EE08  
                              ?_TMR0_Initialize 0001                                          _memset EF5A  
                                     ??_f_close 0046                                          _isleap E580  
                                find_volume@fmt 00E2                                dateErrorCheck@dd 008D  
                                        clear_0 B24E                                          clear_1 B260  
                                        clear_2 B26C                                          clear_3 B278  
                                        clear_4 B284                                          clear_5 B290  
                                        clear_6 B29C                                          clear_7 B2AC  
                              dateErrorCheck@mm 008C                                  find_volume@rfs 00A0  
                                     ??_chk_chr 0012                                     ?_Draw3month 00AC  
                                find_volume@vol 00CB                                ___awdiv@quotient 0014  
                              dateErrorCheck@yy 008B                         SD_SendCmd@address_bytes 0020  
                                        _mktime 9C42                                 ___awmod@divisor 0010  
                                     ??_f_mount 0046                                 ___awmod@counter 0012  
              ??_EUSART1_SetOverrunErrorHandler 0010                 ?_EUSART1_SetOverrunErrorHandler 000E  
                                     ??_dir_sdi 00B8                                 ??_INT0_CallBack 0001  
                                     ??_f_write 00DD                                       ??_get_fat 009D  
                                        main@jj 03FF                                          _strchr DDFE  
                       __end_of_DATAEE_ReadByte F494                                          _strlen E978  
                         __end_of_GetTouchRawXY C1CE                                       ??_ld_word 0010  
          SD_SPI_DelayMilliseconds@milliseconds 0011                                 _TMR5_StartTimer F7C8  
                                     ??_mem_cmp 0014                                       ??_mem_cpy 0014  
               __end_of_I2C2_CallbackReturnStop F81E                                       ??_mem_set 0014  
                              __end_of_validate CAA8                                    __pdataCOMRAM 004F  
                                    _UpdateFlag 03A5                                       ??_isdigit 000E  
            __size_of_SD_SPI_IsMediaInitialized 0010                          ?_SD_SPI_AsyncReadTasks 002C  
                                   ?_DrawSetBox 0001                            __end_of_get_ldnumber BF24  
                    ?_SD_SPI_IsMediaInitialized 0001                                    __mediumconst F866  
                         display_drawChars@size 0074                                 disk_read@sector 0073  
                                 ??_SettingProc 00BE                                    ??_LCD8M_open 0010  
                           __size_of_SD_SendCmd 041E                                          tblptrh 000FF7  
                                        tblptrl 000FF6                                          tblptru 000FF8  
                              __end_of_st_clust EA84                             Timer5Handler@rxData 0007  
                      ADC_GetConversion@channel 0012                                __end_of_st_dword DF48  
                        ??_I2C2_MasterOperation 001D                  I2C2_CallbackReturnReset@funPtr 0017  
                     display_fillCircleHelper@f 0039                       display_fillCircleHelper@r 002B  
               __size_of_SD_SPI_AsyncWriteTasks 0564                       display_fillCircleHelper@x 003F  
                     display_fillCircleHelper@y 0041                           __end_of_TMR0_CallBack F374  
                              __end_of_tinyfont FE67                        __end_of_I2C2_WriteNBytes EA00  
                                     ??_put_fat 00A1                         __end_of_TMR2_StartTimer F806  
                                     ??_st_word 0012                      DrawSmallCalendar@backColor 00A4  
      TMR1_SetInterruptHandler@InterruptHandler 000E        TMR5_SetInterruptHandler@InterruptHandler 000E  
      INT0_SetInterruptHandler@InterruptHandler 000E        TMR0_SetInterruptHandler@InterruptHandler 000E  
     IOCB4_SetInterruptHandler@InterruptHandler 000E                                   display_putc@c 0065  
                                 display_putc@i 0068                                   display_putc@j 0066  
                              ?_PIN_MANAGER_IOC 0001                                       ??_sprintf 003A  
                                 display_puts@s 0040                         __end_of_TMR1_WriteTimer F462  
                                     ??_sync_fs 008E                                 _eusart1RxBuffer 0700  
                                     ??_strncmp 0014                                ___lbdiv@dividend 000F  
                                    _TouchCount 03A4              SD_SPI_AsyncWriteTasks@WriteTimeout 0361  
                                   localtime@tp 0031                                      _SoundCount 039C  
                 __size_of_INTERRUPT_Initialize 0004                   __size_of_I2C2_DO_SEND_RESTART 0008  
                              years_to_days@ret 0030                                ?_TMR1_Initialize 0001  
                                _RTC_resetAlarm E858                         __end_of_TMR5_Initialize EF5A  
                                ?_ymd_to_scalar 0034                               _SYSTEM_Initialize E932  
                        _I2C2_Read1ByteRegister E26C                                 ___lbmod@divisor 000E  
                __end_of_SD_SPI_MediaInitialize 3B2A                                      __accesstop 0060  
                       __end_of__initialization B2B2                                 ___lbmod@counter 0010  
                                     ?_INT0_ISR 0001                                  get_ldnumber@tc 0016  
                                disk_write@buff 0071                                  get_ldnumber@tp 001B  
                                get_ldnumber@tt 0017                                  _SPI1_ReadBlock F1AE  
                             ?_I2C2_MasterClose 0001                                  disk_write@pdrv 0044  
                       I2C2_WriteNBytes@address 0022                                    ButtonCheck@x 00B7  
                                  ButtonCheck@y 00B9                               ??_AlarmInitialize 0010  
                            ?_SYSTEM_Initialize 0001                            __end_of_display_putc 8728  
                          __end_of_display_puts E42C                       RTC_setAlarmTime@alarmtime 0022  
                                 ___rparam_used 000001                               ?_I2C2_MasterStart 0001  
                             ?_I2C2_MasterWrite 0001                          __size_of_AlarmWHandler 0012  
                               _TMR5_WriteTimer F3F0                        I2C2_SetBuffer@bufferSize 0010  
                            ??_I2C2_MasterClose 000E                                _I2C2_DO_TX_EMPTY E71E  
                                 ??_I2C2_Poller 001D                                  _GPRMCdatacheck 89E8  
                __size_of_EUSART1_RxDataHandler 0022                   __end_of_EUSART1_RxDataHandler F2F4  
                       _rdBlkRegCompleteHandler EB48                              ??_I2C2_MasterStart 000E  
                            ??_I2C2_MasterWrite 001F                               ?_EPWM1_Initialize 0001  
                        ?_display_drawRoundRect 0034                           display_fillTriangle@a 0086  
                         display_fillTriangle@b 0084                           display_fillTriangle@t 0066  
                                __pcstackCOMRAM 0001                           display_fillTriangle@y 0082  
                           Draw3month@startyear 00AE                                GPRMCdatacheck@hh 0095  
                              GPRMCdatacheck@jj 0094                                    __pidataBANK2 F5DA  
                                  __pidataBANK3 EE3C                                    __pidataBANK4 C458  
                                  __pidataBANK5 C52B                                    __pidataBANK6 F40E  
                                 __end_of_crc16 E67A                             __end_of_SlideSWProc D4B2  
                           ??_SYSTEM_Initialize 0012                              _SD_SPI_SectorWrite B74A  
                                     ?_TMR0_ISR 0001                                       ?_TMR1_ISR 0001  
                            __end_of_LCD8M_open F768                     __size_of_I2C2_ReadDataBlock 0066  
                 ?_TMR1_DefaultInterruptHandler 0001                                       ?_TMR5_ISR 0001  
                         _drive@fatfs_demo$F369 096F                              ??_EPWM1_Initialize 000E  
                       DrawSmallCalendar@ypitch 009F                                _DATAEE_WriteByte ECB8  
                                   ?_ButtonPush 000E                                   ??_TouchAdjMsg 0042  
                                 __end_of_dylen E324                            __size_of_follow_path 0174  
                             ??_SPI1_Initialize 000E           __end_of_IOCB4_DefaultInterruptHandler F85E  
        __size_of_IOCB4_DefaultInterruptHandler 0002                   _IOCB4_DefaultInterruptHandler F85C  
                         __end_of_TMR5_CallBack F354                          decimalToFatTime@minute 0015  
                                 ??_TouchAdjust 00E7                                    ButtonPush@xx 0015  
                                  ButtonPush@yy 0017                                     _ButtonCheck E0EE  
                              ?_TMR2_Initialize 0001                                   _CheckCheckSum AF02  
                       __end_of_TMR6_Initialize F5FA                                ___lbdiv@quotient 0011  
                                  ?_RTC_handler 0001                                  _sdmmc_cmdtable F9CF  
                         SPI1_ExchangeByte@data 000E                     ??_IOCB4_SetInterruptHandler 0010  
                 I2C2_Read1ByteRegister@address 0020                                       ?_RTC_read 0029  
                          __end_of_EUSART1_Read EB08                             ?_SD_SPI_SectorWrite 003A  
                              ?_CCP5_Initialize 0001                  __size_of_SD_SPI_IsMediaPresent 0004  
                              ??_lcd_set_cursor 0019                               ?_I2C2_SetCallback 000E  
                            _spi1_configuration FA8F                     __size_of_EXT_INT_Initialize 0014  
                        __size_of_write_command 000C                                getWeekdays@month 006F  
                 __end_of_SD_SPI_IsMediaPresent F7FE                __end_of_display_fillCircleHelper A400  
                     ??_SD_SPI_IsWriteProtected 000E                            __size_of_SDFAST_open 0008  
                            __size_of_dir_clear 0126                              __size_of_dir_alloc 00FA  
                                  ?_RTC_setDate 0022                              __size_of_clst2sect 00C0  
                            __size_of_drawHLine 00C8                                    ?_RTC_setTime 0022  
                     __size_of_drawTempHumidity 0138                              __size_of_glcd_init 0242  
                            ??_I2C2_SetCallback 0012                         __size_of_months_to_days 0036  
                   __end_of_EUSART1_Receive_ISR D54A                              __size_of_drawVLine 00C8  
                            __size_of_disk_read 0048               __end_of_SD_SPI_IsMediaInitialized F61A  
                        __size_of_AlarmSoundOff 0010                               ?_EPWM2_Initialize 0001  
                 SD_SPI_AsyncWriteTasks@command 02E5                                         ??_crc16 0010  
                                     ?_DispTime 009E                          __end_of_RTC_resetAlarm E8A2  
                              ?_TMR0_StartTimer 0001                                         ??_dylen 0015  
                        ??_I2C2_DO_RX_NACK_STOP 000E                           display_drawLine@color 0068  
                     __end_of_SYSTEM_Initialize E978                           __end_of_I2C2_DO_RESET F71E  
                   ??_I2C2_DO_SEND_RESTART_READ 000E                                    sprintf@width 006A  
                            ??_EPWM2_Initialize 000E                                   _eusart1RxHead 004B  
                            _RThisMonthCalendar 0446                                   _eusart1RxTail 004A  
                        __end_of_SPI1_ReadBlock F1D6                                      __pbssBANK0 00FF  
                                    __pbssBANK2 02DB                                      __pbssBANK3 0300  
                                    __pbssBANK4 04D3                                      __pbssBANK5 05D2  
                                    __pbssBANK6 0600                                      __pbssBANK7 0700  
               ??_EUSART1_SetRxInterruptHandler 0010                        __size_of_DrawBigCalendar 0380  
                              ?_TMR3_Initialize 0001                             __size_of_IncDecTime 00C0  
                __size_of_rd2RegCompleteHandler 002C                     display_drawChars@prev_color 0079  
                           __end_of_SettingProc 51A0                   __end_of_rd2RegCompleteHandler F062  
                               lcd_fill_rect@x0 0019                                 lcd_fill_rect@x1 001D  
                               lcd_fill_rect@y0 001B                                 lcd_fill_rect@y1 001F  
                         _INT0_InterruptHandler 038C                                 lcd_fill_rect@hi 002B  
                                    ??_INT0_ISR 0001                                 lcd_fill_rect@ii 0027  
                               lcd_fill_rect@jj 0029                                 lcd_fill_rect@lo 002C  
                           __size_of_Draw3month 00E2                                _mediaInformation 03D7  
                          ??_SD_SPI_SectorWrite 0042                        ?_EUSART1_get_last_status 0001  
                __size_of_wr2RegCompleteHandler 002C                                      WriteYMD@jj 001A  
                        __end_of_GPRMCdatacheck 8C6A                   __end_of_wr2RegCompleteHandler F0BA  
                                _SPI1_WriteByte 000000                        __size_of_spi_master_open 003C  
                     display_drawTriangle@color 0076                           _rd1RegCompleteHandler F062  
                             _DrawSmallCalendar 781A                                _find_volume$1181 00BB  
                              _find_volume$1182 00BF                  I2C2_Write1ByteRegister@address 0021  
                            __size_of_localtime 0028                             I2C2_WriteNBytes@len 0020  
                         _wr1RegCompleteHandler F00A                 __end_of_EUSART1_SetErrorHandler F70A  
                                   ?_NormalProc 0001                             __size_of_DrawSetBox 0278  
                     __size_of_GetTouchLocation 02C0                           display_drawRect@color 002F  
                            ?_DrawSmallCalendar 0089                          _SD_SPI_AsyncWriteTasks 470C  
                      rd1RegCompleteHandler@ptr 0017                __end_of_TMR0_SetInterruptHandler F73C  
                       __size_of_TMR0_StopTimer 0004                                         ?___lmul 000E  
                                       ?_addset 0011                                         ?___wmul 001D  
                                    ??_TMR0_ISR 0004                                      ??_TMR1_ISR 0003  
                       __end_of_TMR5_StartTimer F7CE                                      ??_TMR5_ISR 0008  
                                       ?_f_open 010A                          __end_of_sdmmc_cmdtable FA1F  
                                       ?_f_sync 0097                                  ?_CheckCheckSum 0014  
                            __size_of_resetCTFG 0026                                         _CCP1CON 000FBD  
                                       _CCP2CON 000F66                               ??_disk_initialize 0037  
                                       _CCP5CON 000F54                                         _ECCP1AS 000FB6  
                                       _ECCP2AS 000F64                                         ?_gmtime 0028  
                                       ?_memcpy 000E                                         ?_memset 000E  
                           __end_of_I2C2_Poller F63A                                         ?_isleap 0013  
                                  ?_sync_window 0079                                  ___lmul@product 0016  
                       _I2C2_MasterWaitForEvent F7CE                                         ?_mktime 0060  
                           ??_DrawSmallCalendar 008E                               ?_display_drawLine 0060  
                                     ?_WriteYMD 0001                                    ??_SPI1_Close 000E  
                             ?_display_drawRect 0027                      DrawSmallCalendar@thismonth 0096  
                                    ??_RTC_read 002B                         __size_of_ADC_Initialize 0016  
                                       ?_strchr 000E                                         ?_strlen 000E  
        __end_of_EUSART1_SetFramingErrorHandler F700         __size_of_EUSART1_SetFramingErrorHandler 000A  
                _EUSART1_SetFramingErrorHandler F6F6                      display_fillTriangle@t_7202 0068  
                    display_fillTriangle@t_7203 006A                      display_fillTriangle@t_7204 006C  
                    display_fillTriangle@t_7205 006E                      display_fillTriangle@t_7206 0070  
                    display_fillTriangle@t_7207 0072                      display_fillTriangle@t_7208 0074  
                              ?_DATAEE_ReadByte 000E                         ??_I2C2_MasterDisableIrq 000E  
                                    _glcd_init2 ED2C                                   _AlarmWHandler F5C8  
                            ??_display_drawLine 0040                         _I2C2_Write1ByteRegister E482  
                            ??_display_drawRect 0031                                DrawAnalogClock@x 0151  
                              DrawAnalogClock@y 015B                                         i2l16103 AE30  
                                       i2l16025 F2EE                                         i2l17011 D914  
                                       i2l16123 AE88                                         i2l15245 EAFC  
                                       i2l16109 AE46                                         i2l17007 D8FE  
                                       i2l16127 AE92                                         i2l16119 AE7C  
             SD_SPI_AsyncReadTasks@blockCounter 0396                                         i2l16145 AEDA  
                                       i2l16153 AEF6                                         i2l16243 CDCC  
                                       i2l16253 CDE6                                         i2l16237 CDC0  
                                       i2l16263 CE30                                         i2l16095 AE04  
                                       i2l16079 ADD6                                         i2l16087 ADEA  
                                       i2l16257 CE02                                         i2l17569 D544  
                                       i2l16997 D8CC                    __end_of_display_fillTriangle 66D8  
                               _I2C2_ReadNBytes EE70                             __end_of_TouchAdjMsg CCD4  
                                     ?_check_fs 0097                                      _disk_ioctl F546  
                  ?_EUSART1_DefaultErrorHandler 0001               __size_of_SD_SPI_DelayMilliseconds 0052  
                         display_putc@fontXsize 0062                      __end_of_i2c2_fsmStateTable FA8F  
                         display_putc@fontYsize 0063                       ?_SD_SPI_DelayMilliseconds 0001  
                           __end_of_TouchAdjust 938E               __size_of_I2C2_MasterEnableRestart 0004  
                                       _OSCCON2 000FD2                                       _I2C2_Open DAAA  
                                follow_path@res 0109                                      _disk_write E8A2  
                     ?_I2C2_MasterEnableRestart 0001                         __size_of_I2C2_DO_RX_ACK 0008  
                          __size_of_SDSLOW_open 0008                                         _Bcd2Hex F508  
                    SD_SPI_AsyncWriteTasks@info 002C                                         _OSCTUNE 000F9B  
                                       _PWM1CON 000FB7                                         _PWM2CON 000F65  
                                       _SPBRGH1 000FB0                                         _SSP1ADD 000FC8  
                                       _SSP2ADD 000F6E                                  remove_chain@fs 00CF  
                                       _SSP1BUF 000FC9                                         _SSP2BUF 000F6F  
                                     ?_dir_find 00F3                         __size_of_TMR2_StopTimer 0004  
                                    ??_DispTime 00A7                                       ?_dir_next 00D5  
                   __end_of_display_setTextSize F3F0                                       ?_fillRect 002D  
                              i2_TMR0_StopTimer F842                 SD_SPI_SectorRead@sector_address 0037  
                            _display_fillCircle DF48                           __size_of_dir_register 00CE  
                               ?_RTC_resetAlarm 0001                                ?_TMR2_StartTimer 0001  
                               ??_ymd_to_scalar 003A                                       ?_lcd_fill 0019  
                           SD_SPI_SectorWrite@i 0062                                       ?_drawTime 00B2  
                                     ?_ld_clust 0015                                 _I2C2_MasterRead F750  
                               _I2C2_MasterOpen F4AC                                       ?_ld_dword 000E  
                              ?_TMR1_WriteTimer 0001                                      _draw_pixel F26C  
                       __end_of_TMR5_WriteTimer F40E                                 _I2C2_MasterStop F81E  
                               _I2C2_Initialize F51E                           __size_of_drawCalendar 0090  
                               ?_SPI1_ReadBlock 000F                                         _Hex2Bcd F314  
                      RotaryHandler@RotA_status 02F2                             __size_of_ButtonPush 008E  
                   __end_of_EPWM1_LoadDutyValue EED0                              _display_drawCircle 9806  
                         __size_of_drawDateTime 00FA                                ?_TMR5_Initialize 0001  
                     _IOCB4_SetInterruptHandler F6CE                            DATAEE_WriteByte@bAdd 000E  
                                     ?_init_RTC 008E                     Timer5Handler@slideSW_status 02F3  
                     __end_of_DrawSmallCalendar 7B52                                ??_dateErrorCheck 0045  
                              init_RTC@datetime 008E                                   ?_remove_chain 00B8  
                         __size_of_create_chain 047E                             get_tempHumidity@CRC 0036  
                                       _BufferP 0376                                         _Dispseg 1862  
             __size_of_INT0_SetInterruptHandler 000A                             ?_display_fillCircle 0060  
                     ??_rdBlkRegCompleteHandler 0019                                   SlideSWProc@jj 009B  
                         I2C2_ReadDataBlock@len 0022                                   _write_command F6A2  
                         I2C2_ReadDataBlock@reg 001F                                 ?_GPRMCdatacheck 0001  
                                   _SlideSWProc D418                       ?_INT0_SetInterruptHandler 000E  
                   __size_of_I2C2_MasterSendAck 0006                                write_command@cmd 000F  
                            __size_of_writeLine 01E8                     __size_of_SPI1_ExchangeBlock 003E  
                         _I2C2_DO_SEND_ADR_READ F688                                    ??_SD_SendCmd 001A  
                            __end_of_SPI1_Close F802                           __end_of_drawAlarmTime 8174  
                             __end_of_dir_clear B63E                               __end_of_dir_alloc BB48  
                          _ADC_InterruptHandler 0392                                         __Hparam 0000  
                             __end_of_clst2sect C9E8                               __end_of_drawHLine C928  
                           ?_display_drawCircle 001F                                         __Lparam 0000  
              __size_of_I2C2_CallbackReturnStop 0004                    __end_of_display_drawTriangle D9A2  
                                     ?_validate 0010                                   _AlarmSoundOff F63A  
                   __size_of_I2C2_MasterStartRx 0004                               __end_of_glcd_init 95D0  
                          display_setTextSize@s 0010                      ??_TMR5_SetInterruptHandler 0010  
                             __end_of_drawVLine C860                               __end_of_disk_read E932  
                                       _TmpTime 03BB                     __end_of_I2C2_MasterClearIrq F836  
                             ?_RTC_setAlarmTime 0022                              display_drawChars@s 006E  
                            display_drawChars@x 006A                              display_drawChars@y 006C  
                      __size_of_DrawAnalogClock 17C4                                         ___aldiv C6CC  
                                  _f_write$1484 0100                                         ___almod CF8E  
                     _I2C2_DO_SEND_RESTART_READ F7B0                                      f_close@res 00A6  
                              i2_TMR2_StopTimer F83E                                         ___awdiv D9A2  
                                       ___lbdiv ECF2                                 __size_of___lmul 0056  
                                     ?_st_clust 0012                                         ___awmod DD8E  
                                       ___lbmod F0E4                         display_fillCircle@color 0066  
                                       _dbc_2nd D5DA                                         _dbc_1st E020  
                                     ?_st_dword 0024                                         ___lldiv DB2E  
                               __size_of_addset 0058                                 __size_of___wmul 0026  
                          __size_of_move_window 00AC                                  i2_AlarmSoundOn E80A  
                                    check_fs@fs 0097                                         ___lwdiv E6CC  
                                       ___lwmod EA84                                 __size_of_f_open 0588  
                            ??_RTC_setAlarmTime 0024                           __end_of_RotaryHandler D91C  
                         SettingProc@changeTime 039D                                 __size_of_f_sync 016C  
                          __size_of_TMR0_Reload 000A                              display_drawLine@x0 0060  
                            display_drawLine@x1 0064                              display_drawLine@y0 0062  
                            display_drawLine@y1 0066                             _EUSART1_is_rx_ready F64A  
                                       crc16@ii 0011                                         _f_close EA00  
                         __size_of_get_ldnumber 00F0                                         __pcinit B188  
                                       _chk_chr E76E                                 __size_of_gmtime 0210  
                               __size_of_memcpy 0034                                 __size_of_memset 002C  
                              ?_TMR6_Initialize 0001                                 __size_of_isleap 0054  
                                       __ramtop 1000                           display_putc@textsizeX 0067  
                         display_putc@textsizeY 0069                                      ??_WriteYMD 0012  
                                       _f_mount D2D8                                 __size_of_mktime 020A  
                                       __ptext0 6DE2                                         __ptext1 B3EE  
                                       __ptext2 938E                                         __ptext3 913C  
                                       __ptext4 CC20                                         __ptext5 F7C8  
                                       __ptext6 D418                                         __ptext7 4C70  
                                       __ptext8 8EE2                                         __ptext9 A5DC  
                                       _dir_sdi 8174                                   ?_I2C2_DO_IDLE 0001  
                                       _f_write 2CE6                                     validate@obj 0010  
                                       _get_fat 66D8                                     validate@res 001A  
                                   validate@rfs 0012                            ??_display_fillCircle 0043  
                                 ?_I2C2_DO_RCEN 0001                                         addset@x 0011  
                                       addset@y 0013                                  ?_AlarmWHandler 0001  
                      ?_I2C2_DO_RX_NACK_RESTART 0001                                       _T0CONbits 000FD5  
                                    chk_chr@chr 0010                  ??_TMR1_DefaultInterruptHandler 0001  
                    I2C2_Write1ByteRegister@reg 001F                                    _dir_register C5FE  
                                     _IOCB4_ISR F374                                 __size_of_strchr 0070  
                            I2C2_ReadNBytes@len 0020                                      chk_chr@str 000E  
                               __size_of_strlen 0044                                         _ld_word ED64  
                             __end_of_hexpowers FAD5                        __size_ofi2_AlarmSoundOff 0010  
                                     _T1CONbits 000FCD                                         _mem_cmp DD1A  
                                       _mem_cpy EC04                                         _dpowers FAAF  
                         _OSCILLATOR_Initialize F580                                         _mem_set F136  
                                     _T2CONbits 000FBA                                         _isdigit F3B4  
                                    ??_check_fs 009D                                    _drawCalendar D54A  
                              ___awmod@dividend 000E                                 find_volume@mode 00A2  
                               find_volume@path 009E               __size_of_TMR1_SetInterruptHandler 000A  
                         SD_SPI_SectorRead@info 0064                                ___aldiv@dividend 001A  
                               find_volume@nrsv 00CD                            ??_display_drawCircle 0027  
                               find_volume@stat 00D3                               __end_of_localtime F1FE  
                   __end_of_I2C2_MasterSendNack F7E0                              _EUSART1_Initialize E152  
                                 mktime@timeptr 0060                        ??_PIN_MANAGER_Initialize 0010  
                     ?_TMR1_SetInterruptHandler 000E                        wr1RegCompleteHandler@ptr 0017  
                                  _drawDateTime BB48                      ??_I2C2_CallbackReturnReset 0019  
                                     _T5CONbits 000F4E                                      ?_I2C2_Open 0001  
                                       _moninit FAA3                       __size_of_get_tempHumidity 00D6  
                                   _SettingProc 4C70                           __end_of_lcd_fill_rect BD3C  
                                  _create_chain 5632                              __end_of_SD_SendCmd 6318  
                      DrawBigCalendar@backColor 00A4                   ??_EUSART1_DefaultErrorHandler 0001  
                            DrawAnalogClock@rc1 018A                              DrawAnalogClock@rc2 016D  
                            DrawAnalogClock@cax 0100                              DrawAnalogClock@cay 010A  
                                    ??_dir_find 00F5                             __size_of_NormalProc 065A  
                            DrawAnalogClock@chx 013C                              DrawAnalogClock@chy 0146  
                            DrawAnalogClock@cmx 0128                              DrawAnalogClock@cmy 0132  
                            DrawAnalogClock@csx 0114                              DrawAnalogClock@csy 011E  
                            DrawAnalogClock@rca 016B                              DrawAnalogClock@rch 0169  
                            DrawAnalogClock@pax 0317                              DrawAnalogClock@rcm 0167  
                            DrawAnalogClock@pay 030D                              DrawAnalogClock@rcs 0165  
                                       _put_fat 5AB0                              DrawAnalogClock@phx 0353  
                            DrawAnalogClock@phy 0349                              DrawAnalogClock@pmx 033F  
                            DrawAnalogClock@pmy 0335                              DrawAnalogClock@psx 032B  
                                    ??_dir_next 00D9                              DrawAnalogClock@psy 0321  
                                    ??_fillRect 0037                              DrawAnalogClock@str 017D  
                                       _st_word F15E                      __size_of_SYSTEM_Initialize 0046  
                                    ??_lcd_fill 001B                                         _sprintf 51A0  
                 I2C2_CallbackReturnStop@funPtr 0017                 __end_of_EUSART1_get_last_status F7E6  
                                    ??_drawTime 0046                                      ??_ld_clust 0019  
                                       _sync_fs A034                                         _strncmp DC2C  
                                    ??_ld_dword 0012                          __size_ofi2_TMR0_Reload 000A  
                         __size_of_display_putc 02C2                           __size_of_display_puts 0056  
                          end_of_initialization B2B2                   __size_of_display_setTextColor 0012  
                          ?_EUSART1_is_rx_ready 0001                               __end_of_resetCTFG F224  
                           ?_EUSART1_Initialize 0001                                      f_open@clst 012D  
                                    f_open@mode 010E                                      f_open@path 010C  
                          drawTempHumidity@mode 00E2                                  ??_remove_chain 00C2  
                          drawTempHumidity@str1 007E                            drawTempHumidity@temp 0042  
                          drawTempHumidity@str2 00B0                                         memcpy@d 0013  
                             GetTouchRawXY@data 0018                                         memcpy@n 0010  
                     __size_of_lcd_set_cursor_x 0054                       __size_of_lcd_set_cursor_y 0054  
                                       dylen@yr 0013                                         memcpy@s 0014  
                                    ??_init_RTC 0046                          NormalProc@actualLength 02D2  
                                       memset@c 0010                                         memset@n 0012  
                                       memset@p 0014                         ??_I2C2_MasterSendTxData 000E  
                                ?_write_command 0001                     _EUSART1_OverrunErrorHandler 0388  
                        ?_rd1RegCompleteHandler 0017                               __end_of_spiMaster FA6F  
                               disk_status@pdrv 000E                                 disk_status@stat 000F  
                             __end_of_sin_table F9CF                    GetTouchLocation@oversampling 00A9  
                                     i2u1513_40 F656                          display_drawChars@color 0070  
                      _display_drawCircleHelper A5DC                                       i2u1631_40 AE0E  
                                     i2u1631_48 AE10                                       i2u1624_40 ADB0  
                                     i2u1624_48 ADB2                                       i2u1637_40 AE56  
                                 NormalProc@str 026E                          ?_wr1RegCompleteHandler 0017  
                                     i2u1637_48 AE58                                     _Textbgcolor 03F0  
             __size_of_display_fillCircleHelper 01E6                                       i2u1831_48 D506  
                                     i2u1831_49 D51A                                       i2u1760_48 F3A2  
                                     i2u1833_48 D530                                       i2u1922_48 0054  
                                     i2u1755_48 F382                                       i2u1827_48 EF1C  
                                     i2u1763_48 F342                                       i2u1829_48 D4DA  
                                     i2u1766_40 D89E                                       i2u1829_49 D4EE  
                                     i2u1758_48 F362                                       i2u1766_48 D8A0  
                               ___lldiv@divisor 0012                       ?_display_fillCircleHelper 0027  
                                    f_mount@cfs 00EB           __end_of_EUSART1_SetRxInterruptHandler F6EC  
        __size_of_EUSART1_SetRxInterruptHandler 000A                   _EUSART1_SetRxInterruptHandler F6E2  
                                    f_mount@res 00EA                                      f_mount@opt 00E9  
                                ?_AlarmSoundOff 0001                                      f_mount@vol 00EF  
                               ___lldiv@counter 001A                                   ?_Touch2M_open 0001  
                                  _get_ldnumber BE34                                     _I2C2_Poller F62A  
                             _I2C2_DO_SEND_STOP F798                               ??_DrawBigCalendar 008E  
                                    ??_validate 0014                                     _I2C2_Status 04D3  
                        __end_ofi2_AlarmSoundOn E858                                 ??_CheckCheckSum 0016  
                              ___aldiv@quotient 0024                                         postdec1 000FE5  
                                       postdec2 000FDD                       ??_I2C2_MasterWaitForEvent 000E  
                        lcd_draw_pixel_at@color 001D                                         postinc0 000FEE  
                                       postinc1 000FE6                                         postinc2 000FDE  
                         __size_of_EUSART1_Read 0042                              ?_I2C2_DO_SEND_STOP 0001  
                                   _SmoothCount 03A2                                      ??_st_clust 001A  
                                move_window@res 0096                                      ??_st_dword 002A  
                             ??_spi_master_open 0010                                lcd_fill@bg_color 0019  
                              ?_TMR5_StartTimer 0001                                    ??_IncDecTime 0014  
                                     _SPI1_Open CEE2                            ??_EUSART1_Initialize 0010  
                       __end_of_I2C2_ReadNBytes EEA0                                     _TouchAdjMsg CC20  
                                    dir_clear@n 009C                                      dir_alloc@n 00FC  
                             ?_decimalToFatTime 0010                                       DispTime@x 00A0  
                                     DispTime@y 00A2                                    ??_Draw3month 0045  
                                       strlen@s 000E                                remove_chain@clst 00BA  
                                    dir_find@dp 00F3                                      dir_find@fs 00F7  
                     ??_I2C2_Write1ByteRegister 0021                                     _TouchAdjust 913C  
                                ??_I2C2_DO_IDLE 000E                                    writeLine@err 003B  
                       ??_SD_SPI_AsyncReadTasks 002D                                  ??_I2C2_DO_RCEN 000E  
                      _TMR0_SetInterruptHandler F732                                       _PORTAbits 000F80  
                          I2C2_Open@returnValue 000F                                       _PORTBbits 000F81  
                                     _PORTCbits 000F82                 __end_of_rdBlkRegCompleteHandler EB88  
                        __size_of_Timer5Handler 015C                SD_SPI_SectorWrite@sector_address 003A  
                            ??_decimalToFatTime 0017                                      ?_IOCB4_ISR 0001  
                           ??_I2C2_DO_SEND_STOP 000E                                      dir_sdi@csz 00C6  
                                    dir_sdi@ofs 00B4                         __size_of_I2C2_MasterFsm 0054  
                         _TMR5_InterruptHandler 0382                                     ?_glcd_init2 0001  
                                    drawHLine@w 001D                                      drawHLine@x 0019  
                                    drawHLine@y 001B                               __end_of_writeLine A034  
                                  _display_putc 8466                         __end_of_I2C2_MasterRead F758  
                          __size_of_RTC_handler 0004                                      dir_next@dp 00D5  
                  SD_SPI_MediaInitialize@c_size 007C                                    _display_puts E3D6  
                                    dir_next@fs 00ED                         __end_of_I2C2_MasterOpen F4C4  
                                  ??_DrawSetBox 0046                                       Dispseg@x0 0094  
                                     Dispseg@x1 009A                                       Dispseg@y0 0096  
                                     Dispseg@x2 0092                                       Dispseg@y1 009C  
                                     Dispseg@y2 0098                         __end_of_I2C2_MasterStop F822  
                                   ?_disk_ioctl 000E                                     _TouchStatus 004C  
            SD_SPI_AsyncWriteTasks@blockCounter 0394                         __end_of_I2C2_Initialize F532  
                                _months_to_days EDD2                        __end_of_I2C2_DO_TX_EMPTY E76E  
                         DrawAnalogClock@acolor 0182                                _drawTempHumidity B050  
                              ___lbmod@dividend 000F                                       _BackColor 037A  
                                    f_write@btw 00D9                                      asctime@buf 06C6  
                                    f_write@res 0104                                       _BackLight 02F0  
                   ??_SD_SPI_IsMediaInitialized 000E                               _I2C2_MasterIsNack F6AE  
                           SPI1_ReadBlock@block 000F                                       _TRISBbits 000F93  
                                   ?_disk_write 0071                                       _TRISCbits 000F94  
                         DrawAnalogClock@hcolor 0177                                 _AlarmInitialize F5B6  
                         DrawAnalogClock@mcolor 0179                                   ??_getWeekdays 0044  
                                    get_fat@obj 0097                                      get_fat@val 00AA  
                       __size_of_I2C2_SetBuffer 001A                            __size_of_RTC_setDate 00AA  
                              DispTime@datetime 009E                                   ?_SoundHandler 0001  
                             _I2C2_MasterSetIrq F80A                        __size_of_display_SetFont 005A  
                       ?_I2C2_Read1ByteRegister 001F                                      drawVLine@h 001D  
                         DrawAnalogClock@scolor 0180                                   IncDecTime@dmm 000E  
                                    drawVLine@x 0019                            _file@fatfs_demo$F388 06A4  
                                    drawVLine@y 001B                            __size_of_RTC_setTime 007C  
                               get_ldnumber@vol 0019                __size_of_EUSART1_SetErrorHandler 000A  
                                 IncDecTime@min 0014                                 disk_write@count 0077  
                            ?_I2C2_MasterIsNack 0001                               ?_I2C2_WriteNBytes 001F  
                                    lcd_fill@hi 001B                                      lcd_fill@lo 001C  
                         ??_EUSART1_is_rx_ready 0001                                     ?_draw_pixel 0011  
                      get_tempHumidity@humidity 0025                        __end_of_DATAEE_WriteByte ECF2  
                              ?_TMR5_WriteTimer 0001                                   ButtonCheck@jj 00BD  
                                 ButtonCheck@kk 00BC                              ?_I2C2_MasterSetIrq 0001  
                              DispTime@endpoint 00AB                         TMR5_WriteTimer@timerVal 0001  
                            ??_I2C2_WriteNBytes 0022                          SPI1_ExchangeBlock@data 0012  
                                 ??_create_name 0019                                     ___lbmod@rem 0011  
                    __size_of_DrawSmallCalendar 0338                   __size_of_I2C2_MasterGetRxData 0004  
                            __end_of_IncDecTime CB68                                      ld_clust@cl 001D  
                                    ld_clust@fs 0015                          ?_I2C2_DO_SEND_ADR_READ 0001  
                    rdBlkRegCompleteHandler@ptr 0017                                 _SPI1_Initialize F56E  
                                  _EUSART1_Read EAC6                             ??_I2C2_MasterIsNack 000E  
                                 ??_get_fattime 0023                         ??_display_drawRoundRect 0040  
                            __end_of_Draw3month C0F0                       __end_of_I2C2_DO_SEND_STOP F7A0  
                                     _AlarmTime 02FD                                  ??_Touch2M_open 0010  
                                 ??_find_volume 00A3                                      ld_dword@rv 0017  
                                __end_of_DbcTbl FACD                                   ??_disk_status 000E  
                           ??_I2C2_MasterSetIrq 000E                               __size_of_INT0_ISR 0008  
          __size_of_EUSART1_DefaultErrorHandler 0006                            _display_fillTriangle 6318  
                              _GetTouchLocation 8728                        DrawSmallCalendar@maxdays 0095  
                         __end_of_years_to_days D2D8                                  _TMR0_StopTimer F83A  
                               ?i2_AlarmSoundOn 0001                              __end_of_DrawSetBox 8EE2  
                        display_fillTriangle@x0 0027                          display_fillTriangle@x1 002B  
                        display_fillTriangle@x2 002F                          display_fillTriangle@y0 0029  
                        display_fillTriangle@y1 002D                          display_fillTriangle@y2 0031  
                        display_fillTriangle@sa 007C                          display_fillTriangle@sb 007E  
                               _SmoothAlarmTime 03F9                            Draw3month@startmonth 00AC  
                         get_tempHumidity@F6337 03ED                                       _RHumidity 053C  
                  __end_of_INTERRUPT_Initialize F7F6                 __end_of_I2C2_DO_RX_NACK_RESTART F788  
                                 i2_TMR0_Reload F746                                    ??_ButtonPush 0013  
                  __end_of_I2C2_DO_SEND_RESTART F7A8            __end_of_INT0_DefaultInterruptHandler F860  
         __size_of_INT0_DefaultInterruptHandler 0002                    _INT0_DefaultInterruptHandler F85E  
                                    ?_SPI1_Open 0001                        I2C2_MasterOperation@read 001D  
                       decimalToFatTime@fatTime 001B                                  __end_of___lmul E482  
                                   st_clust@dir 0014                                  __end_of_addset E3D6  
                                __end_of___wmul F24A                                    ?_ButtonCheck 00B7  
                               ??_AlarmWHandler 0004                                      _write_data F696  
                                __end_of_f_open 470C                                   __pidataCOMRAM F852  
                 __size_of_I2C2_DO_ADDRESS_NACK 0040                                  __end_of_f_sync ADA6  
                             __size_of_TMR0_ISR 0010                               __size_of_TMR1_ISR 002E  
                     __size_of_I2C2_MasterClose 0004                            display_fillCircle@x0 0060  
                          display_fillCircle@y0 0062                                  _ADC_Initialize F4F2  
                             __size_of_TMR5_ISR 0014                            drawDateTime@datetime 00B7  
                            lcd_fill_rect@color 0021                                       _Count1PPS 02E0  
                                __end_of_gmtime 9C42                                  __end_of_memcpy EE3C  
                        ?_OSCILLATOR_Initialize 0001                               _TransCoordination A400  
                                __end_of_memset EF86                        ??_I2C2_DO_SEND_ADR_WRITE 000F  
                                __end_of_isleap E5D4                          __end_of_months_to_days EE08  
                     __size_of_I2C2_MasterStart 0004                             RTC_setDate@datetime 0022  
                                __end_of_mktime 9E4C                                      ld_word@ptr 000E  
                             ??_DrawAnalogClock 0091                       __size_of_I2C2_MasterWrite 0008  
                          __size_of_sync_window 017A                       __end_of_I2C2_MasterIsNack F6BA  
                                     _FirstDraw 03F8                                 ymd_to_scalar@mo 0036  
                               ymd_to_scalar@yr 0034                           RotaryHandler@StartRot 039F  
                       decimalToFatTime@seconds 0016                                   ButtonPush@btn 0012  
                         __end_of_INT0_CallBack F3B4                                  __end_of_strchr DE6E  
                                __end_of_strlen E9BC                              ?_TransCoordination 0028  
                                 _SlideSWStatus 0051                               __size_of_RTC_read 002C  
                           start_initialization B188                       __end_of_I2C2_MasterSetIrq F80E  
                                   st_dword@val 0026                           get_tempHumidity@error 0034  
                                   st_dword@ptr 0024                                  _I2C2_DO_RX_ACK F790  
                     __size_of_EPWM1_Initialize 0022                  __end_of_I2C2_Read1ByteRegister E2C8  
                                   ??_I2C2_Open 000E                                     __end_of_HEX FEA8  
                             _lcd_draw_pixel_at F186            __end_of_TMR5_DefaultInterruptHandler F858  
         __size_of_TMR5_DefaultInterruptHandler 0002                    _TMR5_DefaultInterruptHandler F856  
                      __size_of_TMR0_Initialize 0036                                  ??_SoundHandler 0001  
               __size_of_PIN_MANAGER_Initialize 003E                           DrawSmallCalendar@year 0092  
                                DrawSetBox@mode 01F9                                  _TMR2_StopTimer F836  
                 ?_I2C2_SetDataCompleteCallback 0013                            _display_drawTriangle D91C  
 EUSART1_SetRxInterruptHandler@interruptHandler 000E                              ?_lcd_draw_pixel_at 0019  
                             ??i2_AlarmSoundOff 0001                                      mem_cmp@cnt 0012  
                                    mem_cmp@dst 000E                                      mem_cmp@src 0010  
                  EPWM1_LoadDutyValue@dutyValue 000E                             ??_TransCoordination 0030  
                 __size_of_I2C2_MasterOperation 002C                                 ??_write_command 000F  
                                    mem_cpy@cnt 0012                                     put_fat@clst 0099  
                            display_setCursor@x 000E                              display_setCursor@y 0010  
                                    mem_cpy@dst 000E                                      mem_cpy@src 0010  
                             __size_of_DispTime 031E                              __end_of_ButtonName FE97  
                            __end_of_ButtonPush D6F6                                   _Timer5Handler ADA6  
                     __size_of_I2C2_SetCallback 006E                             __end_of_getWeekdays C2AC  
                               ??_AlarmSoundOff 000E                                 _disk_initialize F10E  
                       ?_SD_SPI_AsyncWriteTasks 002C                             ??_lcd_draw_pixel_at 001F  
                                    mem_set@cnt 0012                                      mem_set@dst 000E  
                           DATAEE_ReadByte@bAdd 000E                                      mem_set@val 0010  
                      __size_of_PIN_MANAGER_IOC 000A                          __size_of_GetTouchRawXY 00DE  
                        __end_of_TMR0_StopTimer F83E                         _I2C2_CallbackReturnStop F81A  
                           __size_of_glcd_init2 0038                       _SD_SPI_IsMediaInitialized F60A  
                         ?_display_fillTriangle 0027                           RotaryHandler@newBdata 0002  
                     __size_of_EPWM2_Initialize 0020                      __end_of_I2C2_ReadDataBlock E0EE  
                                  ??_NormalProc 01F8                                   ??_follow_path 0100  
                           __size_of_disk_ioctl 0014                        __size_of_TMR1_Initialize 002A  
                                     _MountDone 03A0                             __end_of_create_name 9806  
                           __size_of_disk_write 0048                __end_of_SD_SPI_DelayMilliseconds E6CC  
                                      ??___lmul 0016                                  ?i2_TMR0_Reload 0001  
                        display_drawLine@t_7090 0044                                        ??_addset 0019  
                                      ??___wmul 0021                __end_of_I2C2_MasterEnableRestart F826  
                      __end_ofi2_TMR0_StopTimer F846                           _EUSART1_RxDataHandler F2D2  
                           __end_of_get_fattime E20E                                        ??_f_open 010F  
                          GetTouchLocation@diff 00A6                          __size_of_TMR0_CallBack 0020  
                ?_EUSART1_SetRxInterruptHandler 000E                          __end_of_ADC_Initialize F508  
                                      ??_f_sync 0046                                     __pdataBANK2 02F0  
                                   __pdataBANK3 03CA                                     __pdataBANK4 0400  
                                   __pdataBANK5 0500                                     __pdataBANK6 06E1  
                     __end_of_TransCoordination A5DC                             __end_of_find_volume 2CE6  
                                      ??_gmtime 002A                             __end_of_disk_status EC7C  
                                      ??_memcpy 0012                                 GetTouchRawXY@tx 0013  
                               GetTouchRawXY@ty 0014                                ?_I2C2_ReadNBytes 001F  
                                      ??_memset 0014                              _RPostMonthCalendar 0500  
                                      ??_isleap 0015                                   ??_SDFAST_open 0010  
                           __size_of_draw_pixel 0022                              SD_SendCmd@response 0027  
                    __end_of_EXT_INT_Initialize F546                __size_of_EUSART1_get_last_status 0006  
                                      ??_mktime 0064                                       _Textcolor 03F2  
                 ?_INT0_DefaultInterruptHandler 0001                         __end_of_AlarmInitialize F5C8  
                          __end_of_remove_chain A94C                                        ??_strchr 0012  
                  ??_I2C2_DO_SEND_RESTART_WRITE 000E                        _display_setTextSize$6973 000E  
                                      ??_strlen 0010                                       _SoundData 04BE  
                                _eusart1RxCount 02E4                                 ?_months_to_days 002A  
                                    localtime@t 0033                                     ??_IOCB4_ISR 0004  
                        __end_of_I2C2_DO_RX_ACK F798                                       _SoundTime 0374  
                     __end_of_lcd_draw_pixel_at F1AE                                ??_RTC_resetAlarm 0022  
                                   __pbssBIGRAM 0740                            display_drawCircle@x0 001F  
                          display_drawCircle@y0 0021                               __size_of_WriteYMD 008C  
                        __end_of_TMR2_StopTimer F83A                                ?_I2C2_MasterRead 0001  
                                 _SPI1_ReadByte 000000                                ?_I2C2_MasterOpen 0001  
                                   __pbssCOMRAM 0046                                ?_I2C2_MasterStop 0001  
                              ?_I2C2_Initialize 0001                  __size_of_I2C2_MasterDisableIrq 0004  
             _EUSART1_RxDefaultInterruptHandler 038E                __end_of_INT0_SetInterruptHandler F6E2  
                I2C2_SetAddressNackCallback@ptr 0015                   __end_of_I2C2_MasterDisableIrq F82E  
                SD_SPI_AsyncWriteTasks@response 0031                              CheckCheckSum@start 0025  
                              ??_SPI1_ReadBlock 0012                                _get_tempHumidity C2AC  
                                 __pcstackBANK0 0060                                   __pcstackBANK1 0100  
                                 __pcstackBANK2 0200                                   __pcstackBANK3 03FF  
                         _SD_SPI_IsMediaPresent F7FA                           ?_display_drawTriangle 006A  
                             _SD_SPI_SectorRead B84C                        __size_of_TMR2_Initialize 0010  
                                      ?_Bcd2Hex 0001                               __size_of_check_fs 010C  
                       __end_of_SPI1_Initialize F580                                 SoundHandler@num 0003  
                                  _isdigit$8105 000F                   ?_TMR5_DefaultInterruptHandler 0001  
                                  check_fs@sect 0099                           decimalToFatTime@month 0012  
                      __end_ofi2_TMR2_StopTimer F842                              __end_of_NormalProc 4184  
                      __size_of_CCP5_Initialize 0016                                ??_GPRMCdatacheck 008E  
                            ?_SD_SPI_SectorRead 0037                                     WriteYMD@tmp 0016  
                               _SPI1_WriteBlock 000000                                 getWeekdays@year 006E  
                                      ?_Hex2Bcd 0001                               __size_of_dir_find 0132  
                     __size_of_display_drawLine 0100                               TouchAdjMsg@color1 00E3  
                             TouchAdjMsg@color2 00E5                       __size_of_display_drawRect 00B2  
                 __size_of_I2C2_DO_RX_NACK_STOP 0008                               __size_of_dir_next 0362  
                             __size_of_fillRect 005E                                  ?_Timer5Handler 0001  
                              _lcd_set_cursor_x E52C                                _lcd_set_cursor_y E4D8  
              ??_EUSART1_SetFramingErrorHandler 0010                 ?_EUSART1_SetFramingErrorHandler 000E  
                __end_of_SD_SPI_AsyncWriteTasks 4C70                               __size_of_lcd_fill 0088  
                  __size_of_EUSART1_Receive_ISR 0098                              _drawAlarmTime$8866 026A  
                        __size_of_TMR5_CallBack 0020                               __size_of_drawTime 00D6  
                             __size_of_ld_clust 0076                                     sprintf@flag 0069  
                             __size_of_ld_dword 00B8                            __end_of_I2C2_DO_IDLE F732  
                                   sprintf@prec 0061                            __end_of_I2C2_DO_RCEN F728  
                                      ?_Dispseg 0037                              _i2c2_fsmStateTable FA6F  
                             ??_display_SetFont 0010                                    ?_SlideSWProc 0001  
                   __size_of_SD_SPI_SectorWrite 0102                                CheckCheckSum@end 0027  
                              CheckCheckSum@buf 0014                      __size_of_I2C2_DO_SEND_STOP 0008  
                         _TMR0_InterruptHandler 0390                            I2C2_WriteNBytes@data 001F  
                                     __pnvBANK3 03FD                             ??_SD_SPI_SectorRead 003F  
                         _rd2RegCompleteHandler F036                        __size_of_TMR0_StartTimer 0004  
                             __size_of_init_RTC 012A                                 ?_TMR0_StopTimer 0001  
               SD_SPI_DelayMilliseconds@timeout 0012                                ___lwdiv@dividend 0023  
                        _PIN_MANAGER_Initialize EB88                           _wr2RegCompleteHandler F08E  
                                      Bcd2Hex@x 000F             __size_of_I2C2_DO_SEND_RESTART_WRITE 0008  
                      __size_of_TMR3_Initialize 001C                        rd2RegCompleteHandler@ptr 0017  
                                     __pintcode 0008                __end_of_TMR1_SetInterruptHandler F6CE  
                                 __pmediumconst F866                                        ?___aldiv 001A  
                                      ?___almod 000E               I2C2_Read1ByteRegister@returnValue 0021  
                                      ?___awdiv 000E                                       __ptext100 74BA  
                                     __ptext101 EF5A                                        ?___lbdiv 000E  
                                     __ptext110 7B52                                       __ptext102 EBC6  
                            display_putc@pitchX 0064                                       __ptext111 1862  
                                     __ptext103 5EFA                              display_putc@pitchY 0061  
                                     __ptext200 DBB0                                       __ptext120 51A0  
                                     __ptext112 D54A                                       __ptext104 EE08  
                                     __ptext201 D03A                                       __ptext121 F3B4  
                                     __ptext113 6A62                                       __ptext105 E1B0  
                                     __ptext210 E5D4                                       __ptext202 E482  
                                     __ptext130 C860                                       __ptext122 6318  
                                     __ptext114 C00E                                       __ptext106 BD3C  
                                     __ptext211 EB08                                       __ptext203 F494  
                                     __ptext131 9806                                       __ptext123 DF48  
                                     __ptext115 781A                                       __ptext107 B050  
                                     __ptext220 F71E                                       __ptext212 F714  
                                     __ptext204 DAAA                                       __ptext140 E4D8  
                                     __ptext132 DA26                                       __ptext124 A21A  
                                     __ptext116 CCD4                                       __ptext108 BB48  
                                     __ptext221 DFB4                                       __ptext213 F780  
                                     __ptext205 F4AC                                       __ptext141 E52C  
                                     __ptext133 F3D2                                       __ptext125 D91C  
                                     __ptext117 E324                                       __ptext109 C382  
                                     __ptext230 F7D4                                       __ptext222 D782  
                                     __ptext214 F788                                       __ptext206 F778  
                                     __ptext150 F760                                       __ptext142 F26C  
                                     __ptext134 F592                                       __ptext126 B94E  
                                     __ptext118 7E70                                       __ptext231 F80E  
                                     __ptext223 F67A                                       __ptext215 F790  
                                     __ptext207 EFDE                                       __ptext151 F768  
                                     __ptext143 E20E                                       __ptext135 F5A4  
                                     __ptext127 9E4C                                       __ptext119 009E  
                                     __ptext240 F08E                                       __ptext232 F7DA  
                                     __ptext224 F688                                       __ptext216 F798  
                                     __ptext208 F62A                                       __ptext160 E858  
                                     __ptext152 F770                                       __ptext144 BC42  
                                     __ptext136 E3D6                                       __ptext128 D9A2  
                                     __ptext241 F4C4                                       __ptext233 F812  
                                     __ptext225 F728                                       __ptext217 F7A0  
                                     __ptext209 F7CE                                       __ptext161 EFB2  
                                     __ptext153 F28E                                       __ptext145 E37E  
                                     __ptext137 8466                                       __ptext129 C798  
                                     __ptext250 F832                                       __ptext242 DE6E  
                                     __ptext234 F816                                       __ptext226 E71E  
                                     __ptext218 F7A8                                       __ptext170 EEA0  
                                     __ptext162 E088                                       __ptext154 D37C  
                                     __ptext146 F696                                       __ptext138 F186  
                                     __ptext251 AF02                                       __ptext243 F462  
                                     __ptext235 F81A                                       __ptext227 F80A  
                                     __ptext219 F7B0                                       __ptext171 D668  
                                     __ptext163 CAA8                                       __ptext155 D6F6  
                                     __ptext147 F6A2                                       __ptext139 EF86  
                                     __ptext260 F3F0                                       __ptext252 DDFE  
                                     __ptext244 F81E                                       __ptext236 EB48  
                                     __ptext228 F6AE                                       __ptext180 C1CE  
                                     __ptext172 E7BC                                       __ptext164 8728  
                                     __ptext156 ECB8                                       __ptext148 EC7C  
                                     __ptext261 F334                                       __ptext253 F5B6  
                                     __ptext245 F822                                       __ptext237 F00A  
                                     __ptext229 F7B8                                       __ptext181 9C42  
                                     __ptext173 F802                                       __ptext165 CEE2  
                                     __ptext157 F47C                                       __ptext149 F758  
                                     __ptext270 F858                                       __ptext262 F856  
                                     __ptext254 F732                                       __ptext246 F826  
                                     __ptext238 F036                                       __ptext190 9A32  
                                     __ptext182 D18C                                       __ptext174 F806  
                                     __ptext166 F7FE                                       __ptext158 A400  
                                     __ptext271 F65A                                       __ptext263 ADA6  
                                     __ptext255 F63A                                       __ptext247 F2B0  
                                     __ptext239 F062                                       __ptext191 E2C8  
                                     __ptext183 D232                                       __ptext175 F70A  
                                     __ptext167 C0F0                                       __ptext159 BF24  
                                     __ptext280 F5C8                                       __ptext272 F354  
                                     __ptext264 F64A                                       __ptext256 F836  
                                     __ptext248 F82A                                       __ptext192 EA84  
                                     __ptext184 E42C                                       __ptext176 EED0  
                                     __ptext168 F1AE                                       __ptext281 F85C  
                                     __ptext273 CD86                                       __ptext265 F7E0  
                                     __ptext257 F83A                                       __ptext249 F82E  
                                     __ptext193 DD8E                                       __ptext185 EDD2  
                                     __ptext177 89E8                                       __ptext169 F61A  
                                     __ptext290 D4B2                                       __ptext282 E80A  
                                     __ptext274 F85A                                       __ptext266 EAC6  
                                     __ptext194 CF8E                                       __ptext186 F224  
                                     __ptext178 DC2C                                       __ptext291 F7E6  
                                     __ptext283 F846                                       __ptext275 F66A  
                                     __ptext267 EF00                                       __ptext259 F55A  
                                     __ptext195 C6CC                                       __ptext187 E6CC  
                                     __ptext179 D0E4                                        ?___awmod 000E  
                                     __ptext292 F860                                       __ptext284 F84A  
                                     __ptext276 F83E                                       __ptext268 F446  
                                     __ptext196 F314                                       __ptext188 E580  
                                     __ptext293 F7EC                                       __ptext285 F746  
                                     __ptext277 F842                                       __ptext269 D894  
                                     __ptext197 F0E4                                       __ptext189 F1D6  
                                     __ptext294 F2D2                                       __ptext286 F7C0  
                                     __ptext278 F73C                                       __ptext198 ECF2  
                                     __ptext295 0000                                       __ptext287 F394  
                                     __ptext279 F374                                       __ptext199 F508  
                                     __ptext288 F85E                                       __ptext289 F84E  
                                      ?___lbmod 000E                       display_drawCircleHelper@f 002E  
                                     _dir_clear B518                                        ?_dbc_2nd 000E  
                                     _dir_alloc BA4E                       display_drawCircleHelper@r 0023  
                     display_drawCircleHelper@x 0030                       display_drawCircleHelper@y 0032  
                                      ?_dbc_1st 000E                                        ?___lldiv 000E  
                                _writeLine$7072 0033                                  _writeLine$7073 0035  
                             __size_of_validate 00C0                                        ?___lwdiv 0023  
                                     _clst2sect C928                                     ??_SPI1_Open 000E  
                                      ?___lwmod 000E                                 ?_ADC_Initialize 0001  
                                     _drawHLine C860                                RTC_read@datetime 0029  
                                     _glcd_init 938E                        ?_SD_SPI_IsWriteProtected 0001  
                        __size_of_I2C2_DO_RESET 000A                                        ?_f_close 00A2  
                                     _drawVLine C798                                     ?_write_data 0001  
                                     _disk_read E8EA                                        ?_chk_chr 000E  
                     DrawSmallCalendar@startday 00A1                                   follow_path@dp 00FB  
                                 follow_path@fs 0106                               _drawCalendar$8870 00B4  
                             _drawCalendar$8867 00B1                               _drawCalendar$8868 00B2  
                             _drawCalendar$8869 00B3                                   follow_path@ns 0108  
                             __size_of_st_clust 0042                                   _validate$1212 0018  
                  ??_INTERRUPT_InterruptManager 0008                                ___almod@dividend 000E  
                           __end_of_follow_path AC3A                                        ?_f_mount 00E5  
                             __size_of_st_dword 006C                   display_fillCircleHelper@ddF_x 0035  
                 display_fillCircleHelper@ddF_y 0037                                        ?_dir_sdi 00B2  
                 display_drawCircleHelper@ddF_x 002A                   display_drawCircleHelper@ddF_y 002C  
                                      ?_f_write 00D5                                        ?_get_fat 0097  
                                _I2C2_MasterFsm E5D4                   display_fillCircleHelper@delta 002E  
                                 DispTime@color 00A5                   display_fillCircleHelper@color 0030  
                                 ??_SDSLOW_open 0010                                 ?_I2C2_DO_RX_ACK 0001  
                                      ?_ld_word 000E                 __size_of_I2C2_DO_SEND_ADR_WRITE 000E  
                    __size_of_I2C2_MasterIsNack 000C                   display_drawCircleHelper@color 0026  
                             _display_drawChars DA26                                        ?_mem_cmp 000E  
                                      ?_mem_cpy 000E                                   _GetTouchRawXY C0F0  
                                      ?_mem_set 000E                                        _BAUDCON1 000FB8  
                     __end_of_SD_SPI_SectorRead B94E      __end_of_EUSART1_DefaultOverrunErrorHandler F7EC  
   __size_of_EUSART1_DefaultOverrunErrorHandler 0006            ??_EUSART1_DefaultOverrunErrorHandler 0001  
           ?_EUSART1_DefaultOverrunErrorHandler 0001              _EUSART1_DefaultOverrunErrorHandler F7E6  
                                      ?_isdigit 0001                            __end_ofDispseg@F6512 FAC3  
                               ?_TMR2_StopTimer 0001                            _EUSART1_ErrorHandler 0386  
                    __size_of_I2C2_MasterSetIrq 0004                            __end_of_Touch2M_open F778  
            display_drawCircleHelper@cornername 0025                              ?_display_drawChars 006A  
                           __end_of_SDFAST_open F770                                    ?_SettingProc 0001  
                     __size_of_RTC_setAlarmTime 00EA                                  _I2C2_SetBuffer F462  
                       _EUSART1_SetErrorHandler F700                        ??_SD_SPI_MediaInitialize 002C  
                                     f_close@fp 00A2                                       f_close@fs 00A4  
                                     _hexpowers FACD                                  __size_of_crc16 0052  
                                      ?_put_fat 0097                                ___lwdiv@quotient 0028  
                    ??_display_drawCircleHelper 0028                                     _getWeekdays C1CE  
                                      ?_st_word 000E                         __end_of_disk_initialize F136  
                             display_drawLine@t 0042                                        ?_sprintf 002A  
                                 _TMR0_CallBack F354                                  __size_of_dylen 005C  
                             display_drawRect@h 002D                               display_drawRect@w 002B  
                             display_drawRect@x 0027                               display_drawRect@y 0029  
                                      ?_sync_fs 008C                        __size_of_DATAEE_ReadByte 0018  
                       ??_rd1RegCompleteHandler 0019                                        ?_strncmp 000E  
                                   _get_fat$677 00A6                                 _DrawBigCalendar 6A62  
                                     _localtime F1D6                             TransCoordination@xg 002C  
                           TransCoordination@yg 002E                             TransCoordination@xx 0032  
                           TransCoordination@yy 0036                            _INTERRUPT_Initialize F7F2  
                             find_volume@fasize 00D8        SD_SPI_AsyncWriteTasks@preEraseBlockCount 0036  
                          _I2C2_DO_SEND_RESTART F7A0                           __end_of_ymd_to_scalar D232  
                           ??_display_drawChars 0042                      __end_of_I2C2_MasterSendAck F7DA  
                                      Hex2Bcd@x 0013                         __size_of_lcd_set_cursor 002C  
                    __end_of_SPI1_ExchangeBlock EC04                         ??_wr1RegCompleteHandler 0019  
              __size_of_I2C2_DO_RX_NACK_RESTART 0008                                 ___aldiv@divisor 001E  
                     ??_I2C2_CallbackReturnStop 0019                  ??_I2C2_SetDataCompleteCallback 0017  
                             ??_TMR0_Initialize 0010                         SD_SPI_SectorRead@buffer 003B  
                            _RPrevMonthCalendar 051E                               DrawAnalogClock@hh 0184  
                               ___aldiv@counter 0022                               DrawAnalogClock@jj 0192  
                                   _create_name 95D0                               DrawAnalogClock@kk 017C  
                             DrawAnalogClock@rc 0188                               DrawAnalogClock@mm 0187  
                               _spi_master_open EC7C                               DrawAnalogClock@xc 018C  
                             DrawAnalogClock@yc 018E                               DrawAnalogClock@ss 017B  
                                      _INT0_ISR F7C0                 I2C2_MasterOperation@returnValue 001E  
                             DrawAnalogClock@xx 008A                               DrawAnalogClock@yy 008C  
                                ___wmul@product 0021                                        _IOCBbits 000F62  
                                      _LATAbits 000F89         EUSART1_SetErrorHandler@interruptHandler 000E  
                                      _LATBbits 000F8A                          dateErrorCheck@dateTime 0089  
                             find_volume@szbfat 00C1                                       f_open@bcs 0121  
                                    _I2C2_DO_RX DFB4                                      _I2C2_DO_TX D782  
                        ??_display_fillTriangle 0035                      __end_of_I2C2_MasterStartRx F816  
                                     f_open@ofs 0129                                       f_open@res 0133  
                  __size_of_display_setTextSize 001E                               find_volume@sysect 00C7  
                       SD_SPI_SectorRead@result 0060                                        _PIE1bits 000F9D  
                __size_of_I2C2_MasterSendTxData 0008                                       _resetCTFG F1FE  
                                   _get_fattime E1B0                                        _PIE3bits 000FA3  
                        drawAlarmTime@alarmtime 0095                                        _PIE5bits 000F7D  
                 __end_of_I2C2_MasterSendTxData F7C0                        __size_of_TMR2_StartTimer 0004  
                       SD_SPI_SectorRead@status 0061                  SD_SPI_SectorWrite@sector_count 0040  
                               lcd_set_cursor@x 0015                                 lcd_set_cursor@y 0017  
                                    _I2C2_Close F2B0                               i2_TMR0_StartTimer F84A  
                                  NormalProc@hh 02D7                                    NormalProc@jj 02D4  
                                  NormalProc@mm 02DA                        __size_of_TMR1_WriteTimer 001C  
                                   _find_volume 22D4                        __end_of_drawTempHumidity B188  
                                  ?_I2C2_Poller 0001                                     _disk_status EC40  
                                 ??_move_window 0092             __size_of_INTERRUPT_InterruptManager 0092  
                               ??i2_TMR0_Reload 0001                                       f_mount@fs 00E5  
                                     f_mount@rp 00ED                                   ?_AlarmSoundOn 0001  
                    ??_TMR0_SetInterruptHandler 0010                                 follow_path@path 00FD  
                                      _PIR1bits 000F9E                                        _PIR2bits 000FA1  
                                      _PIR3bits 000FA4                                        _PIR5bits 000F7E  
                  __size_of_EPWM1_LoadDutyValue 0030                   SD_SPI_AsyncReadTasks@response 0031  
                                 ??_TMR0_Reload 000E                               _display_setCursor F5A4  
                                     _spiMaster FA1F                          ?_EUSART1_RxDataHandler 0001  
                      __size_of_TMR5_Initialize 002C                                        _RCONbits 000FD0  
                                     _sin_table F867                                   move_window@fs 008C  
                            ?i2_TMR0_StartTimer 0001                            __end_of_SoundHandler CE36  
                                 SettingProc@dd 00CD                                        _SSP1CON1 000FC6  
                                      _SSP1CON2 000FC5                                   SettingProc@hh 00CF  
                                 SettingProc@jj 00D4                                        _SSP2CON1 000F6C  
                                      _SSP2CON2 000F6B                                   SettingProc@mm 00CE  
                                 SettingProc@mo 00CC                                        _TMR0_ISR F65A  
                                    ?_dir_clear 008C                    __end_of_display_setTextColor F5A4  
                                 SettingProc@xp 00C7                                        _TMR1_ISR EF00  
                                 SettingProc@yp 00C9                                       dir_find@c 00F9  
                                    ?_dir_alloc 00F3                                 remove_chain@obj 00B8  
                                   writeLine@x0 001F                                     writeLine@x1 0023  
                                 SettingProc@yy 00CB                                     writeLine@y0 0021  
                                   writeLine@y1 0025                                 remove_chain@res 00CE  
                                   writeLine@dx 003D                                     writeLine@dy 0037  
                                     _time_zone 0370                                 remove_chain@nxt 00CA  
                                      _PSTR1CON 000FB9                                        _TMR5_ISR F55A  
                                      _PSTR2CON 000F63                                        _SSP1STAT 000FC7  
                            ?_display_setCursor 000E                                        _SSP2STAT 000F6D  
                                    ?_clst2sect 001A                                       f_sync@dir 00A0  
                                    ?_drawHLine 0019                               ??_PIN_MANAGER_IOC 0004  
                                     f_sync@res 009D                                       dir_sdi@dp 00B2  
                                     dir_sdi@fs 00CE                      __size_of_TransCoordination 01DC  
                                  ?_TouchAdjMsg 0001                                      ?_glcd_init 0001  
                        __end_of_I2C2_MasterFsm E628                                       fillRect@h 0033  
                                     fillRect@w 0031                                       fillRect@x 002D  
                                     fillRect@y 002F                                      ?_drawVLine 0019  
                                      Dispseg@x 0037                                        Dispseg@y 0039  
                                    ?_disk_read 0071                                    ?_TouchAdjust 0001  
                                     f_write@cc 0109                                       f_write@bw 00DB  
                                     f_write@fp 00D5                                       f_write@fs 0115  
                          DrawAnalogClock@angle 0190                     SD_SPI_MediaInitialize@count 007B  
                   SD_SPI_MediaInitialize@index 0079                                       cosd@theta 001B  
                     __end_of_display_drawChars DAAA                              SPI1_ReadBlock@data 0012  
                              _I2C2_MasterClose F82E                            DrawAnalogClock@color 008F  
                                 _TMR5_CallBack F334                                       get_fat@bc 00AE  
                             ??_TMR1_Initialize 0010                                       get_fat@fs 00B0  
                                     get_fat@wc 00A8                        _SD_SPI_DelayMilliseconds E67A  
                              ?_AlarmInitialize 0001                                      _ADCON0bits 000FC2  
                                  IncDecTime@hh 0010                                        _RTC_regE 00FF  
                                      _RTC_regF 004F                             ??i2_TMR0_StartTimer 0001  
                                  IncDecTime@mm 0012                                        _RTC_read EFB2  
                             ___wmul@multiplier 001D                                _I2C2_MasterStart F826  
                      _I2C2_MasterEnableRestart F822                    __size_of_I2C2_MasterClearIrq 0004  
                                ?_GetTouchRawXY 0013                                _I2C2_MasterWrite F778  
                __size_of_SD_SPI_AsyncReadTasks 0360                            __size_of_ButtonCheck 0064  
                   __size_of_display_fillCircle 006C                          I2C2_ReadNBytes@address 0022  
                                  ??_glcd_init2 0011                                I2C2_Open@address 000E  
                    __size_of_lcd_draw_pixel_at 0028                   __end_of_SD_SPI_AsyncReadTasks 781A  
                           ??_display_setCursor 0012                 display_fillCircleHelper@corners 002D  
                        __end_of_I2C2_SetBuffer F47C                                    ??_disk_ioctl 0011  
                                      _DateTime 02F6                          ?_SD_SPI_IsMediaPresent 0001  
                        ??_display_drawTriangle 0046                                _EPWM1_Initialize F24A  
                ??_INT0_DefaultInterruptHandler 0001                                    ??_disk_write 0044  
             __size_of_TMR5_SetInterruptHandler 000A                     __size_of_display_drawCircle 022C  
                             ?_I2C2_DO_TX_EMPTY 0001                          __size_of_drawAlarmTime 0304  
                     ?_TMR5_SetInterruptHandler 000E                        __end_of_GetTouchLocation 89E8  
                      wr2RegCompleteHandler@ptr 0017                           DATAEE_WriteByte@bData 0010  
                      __size_of_TMR6_Initialize 0010                                  ?_TMR0_CallBack 0001  
                                     _writeLine 9E4C                                        _DispTime 7B52  
                              __size_of_Bcd2Hex 0016                                      st_clust@cl 0016  
                                    st_clust@fs 0012                                ?_SPI1_Initialize 0001  
                      GetTouchLocation@samplesX 0060                        GetTouchLocation@samplesY 0080  
                            ??_I2C2_DO_TX_EMPTY 0019                               ___lmul@multiplier 000E  
                                   _INTCON2bits 000FF1                             __end_of_SDSLOW_open F760  
                               ??_Timer5Handler 0002                                    ??_draw_pixel 0013  
                       ??_I2C2_DO_SEND_ADR_READ 000E                                       copy_data0 B19C  
                                     copy_data1 B1BC                                       copy_data2 B1DC  
                           display_fillCircle@r 0064                                       copy_data3 B1FC  
                                     copy_data4 B21C                           ?_INTERRUPT_Initialize 0001  
                                    ?_localtime 0031                        ?_rdBlkRegCompleteHandler 0017  
                         ?_I2C2_DO_SEND_RESTART 0001                       __size_of_decimalToFatTime 00F8  
                        I2C2_ReadDataBlock@data 0020                                       ld_word@rv 0013  
                      _INT0_SetInterruptHandler F6D8                                   _I2C2_DO_RESET F714  
                             ?_DATAEE_WriteByte 000E                            get_tempHumidity@data 0029  
                       DrawBigCalendar@startday 00A1                            get_tempHumidity@temp 0023  
                  __size_of_I2C2_MasterSendNack 0006                          __size_of_RotaryHandler 0088  
                          get_tempHumidity@work 002C                            DrawSmallCalendar@str 0097  
                             SD_SendCmd@address 0015                                __size_of_Hex2Bcd 0020  
                                 DrawSetBox@str 0193                               ??_TMR2_Initialize 000E  
                           __size_of_write_data 000C                           EUSART1_Read@readValue 0001  
                              _I2C2_SetCallback DE6E                           display_setTextColor@b 0010  
                         display_setTextColor@c 000E                          ?_rd2RegCompleteHandler 0017  
                                      _Cursor_x 02DD                                        _Cursor_y 02DB  
                              ??i2_AlarmSoundOn 0001                       __end_ofi2_TMR0_StartTimer F84E  
                ??_TMR5_DefaultInterruptHandler 0001                          _I2C2_DO_SEND_ADR_WRITE F67A  
                            ??_DATAEE_WriteByte 0011                             RTC_setTime@datetime 0022  
                                  Draw3month@mm 00B0                                      put_fat@res 00B7  
                                    put_fat@val 009D                                      _EECON1bits 000FA6  
                             move_window@sector 008E                                        _Humidity 03C2  
                                  Draw3month@yy 00AF                                      ?_resetCTFG 0001  
                             ??_CCP5_Initialize 000E                                __size_of_Dispseg 0A72  
                        ?_wr2RegCompleteHandler 0017                       __end_of_display_setCursor F5B6  
                               dir_next@stretch 00D7                                  ??_AlarmSoundOn 000E  
                __size_of_display_drawRoundRect 025A                                        __Hrparam 0000  
             __size_of_I2C2_CallbackReturnReset 0004                               i2_TMR2_StartTimer F846  
                                     gmtime@tim 03A9                                _EPWM2_Initialize F2F4  
                 __end_of_display_drawRoundRect 913C                                        _WeekDays 06E1  
                     ?_I2C2_CallbackReturnReset 0017                              __end_of_glcd_init2 ED64  
                                     memcpy@tmp 0012                                 _DrawAnalogClock 009E  
               __end_of_SD_SPI_IsWriteProtected F7FA                                        __Lrparam 0000  
                             _ADC_GetConversion EED0                                        _RotCount 02E1  
                                   _follow_path AAC6                              __end_of_disk_ioctl F55A  
                     __size_of_I2C2_WriteNBytes 0044                           __size_of_remove_chain 01B4  
                           GetTouchLocation@avg 00AA                              ?i2_TMR2_StartTimer 0001  
                           GetTouchLocation@num 00A8                          __size_of_lcd_fill_rect 00FA  
                           display_drawChars@bg 0072                              __end_of_disk_write E8EA  
                     I2C2_ReadDataBlock@address 0024                               SD_SendCmd@timeout 0024  
                       ??_OSCILLATOR_Initialize 000E                                      st_word@val 0010  
                            ?_ADC_GetConversion 000E                         __size_of_dateErrorCheck 00A8  
                       _EUSART1_get_last_status F7E0                                      st_word@ptr 000E  
                             ??_TMR0_StartTimer 000E                                __size_of___aldiv 00CC  
                                      _Textsize 0050                           __end_of_CheckCheckSum B050  
                              __size_of___almod 00AC                                __size_of___awdiv 0084  
                              __size_of___lbdiv 003A                                        _SoundNum 0048  
                              __size_of___awmod 0070                                __size_of___lbmod 002A  
                              __size_of_dbc_2nd 008E                                __size_of_dbc_1st 0068  
                              __size_of___lldiv 0082                                  ?_TMR5_CallBack 0001  
                           display_drawCircle@f 002D                             display_drawCircle@r 0023  
                               ?_I2C2_MasterFsm 0001                             display_drawCircle@x 002F  
                           display_drawCircle@y 0031                     __size_of_EUSART1_Initialize 005E  
                  __end_of_I2C2_MasterGetRxData F812                                __size_of___lwdiv 0052  
                                 ??_RTC_handler 0001                                __size_of___lwmod 0042  
            __end_of_I2C2_DO_SEND_RESTART_WRITE F7B0                      _I2C2_DO_SEND_RESTART_WRITE F7A8  
                           __end_of_move_window CEE2                                     _SDFAST_open F768  
                                Dispseg@pattern 0088                                        _WriteYMD D6F6  
                            __end_of_draw_pixel F28E                                 i2_AlarmSoundOff F66A  
                              __size_of_f_close 0042                               ??_TMR3_Initialize 000E  
                      _TMR1_SetInterruptHandler F6C4                             __end_of_TMR0_Reload F714  
                          decimalToFatTime@hour 0014                                __size_of_chk_chr 004E  
                          decimalToFatTime@year 0010                          _IOCB4_InterruptHandler 03FD  
                           ??i2_TMR2_StartTimer 0001                                  getWeekdays@day 0070  
                              __size_of_f_mount 00A4                                  getWeekdays@tim 0071  
                                   _isleap$8130 0016                           _TMR1_InterruptHandler 037C  
                     ??_EUSART1_SetErrorHandler 0010                                __size_of_dir_sdi 02F2  
                              __size_of_f_write 079C                                __size_of_get_fat 038A  
                                      dbc_2nd@c 0010                                   ??_RTC_setDate 0024  
           __end_of_EUSART1_DefaultErrorHandler F7F2                     _EUSART1_DefaultErrorHandler F7EC  
                           ??_ADC_GetConversion 0010                      __size_of_SD_SPI_SectorRead 0102  
                                    sprintf@idx 0060                                      sprintf@len 0064  
                               ?_I2C2_SetBuffer 000E                         __end_of_DrawBigCalendar 6DE2  
                                      dbc_1st@c 0010                                      sprintf@val 0067  
                                      crc16@crc 0012                                        crc16@len 000F  
                   __end_of_EUSART1_is_rx_ready F65A                     _SD_SPI_MediaInitialize$8864 0074  
                                 ??_RTC_setTime 0024                                __size_of_ld_word 0038  
                                      crc16@ptr 000E                                        _check_fs B63E  
                      __size_of_TMR5_StartTimer 0006                           SD_SendCmd@longTimeout 001C  
                              __size_of_mem_cmp 0074                                __size_of_mem_cpy 003C  
                              __size_of_mem_set 0028                       I2C2_Read1ByteRegister@reg 001F  
                              __size_of_isdigit 001E                                 NormalProc@delta 02D8  
                                    _LCD8M_open F760                              lcd_set_cursor_x@hi 0013  
                            lcd_set_cursor_y@hi 0013                              lcd_set_cursor_x@lo 0014  
                            lcd_set_cursor_y@lo 0014                                 NormalProc@newBL 02D5  
                               ___lwdiv@divisor 0025                                 dir_register@res 0104  
                                 dir_clear@ibuf 0094                                   dir_clear@clst 008E  
                ?_IOCB4_DefaultInterruptHandler 0001                                 ___lwdiv@counter 0027  
                       __end_of_spi_master_open ECB8                                   dir_clear@sect 0096  
               __size_of_SD_SPI_MediaInitialize 06A8                                        __ptext10 E0EE  
                                      __ptext11 8C6A                                        __ptext20 ED9C  
                                      __ptext12 E932                                        __ptext21 F56E  
                                      __ptext13 F5EA                                        __ptext30 F6E2  
                                      __ptext22 EB88                                        __ptext14 EF2E  
                                      __ptext31 F6EC                                        __ptext23 F6CE  
                                      __ptext15 F6BA                                        __ptext40 F1FE  
                                      __ptext32 F6F6                                        __ptext24 F580  
                                      __ptext16 F42A                                        __ptext41 D80C  
                                      __ptext33 F700                                        __ptext25 F7F2  
                                      __ptext17 F5FA                                        __ptext50 4184  
                                      __ptext42 ED2C                                        __ptext34 F2F4  
                                      __ptext26 F51E                                        __ptext18 F0BA  
                                      __ptext51 A798                                        __ptext43 C2AC  
                                      __ptext35 F24A                                        __ptext27 F532  
                                      __ptext19 F6C4                                        __ptext60 EC04  
                                      __ptext52 AAC6                                        __ptext44 E628  
                                      __ptext36 F4DC                                        __ptext28 F6D8  
                                      __ptext61 BA4E                                        __ptext53 DCA4  
                                      __ptext45 E9BC                                        __ptext37 F4F2  
                                      __ptext29 E152                                        __ptext70 22D4  
                                      __ptext62 8174                                        __ptext54 B2BC  
                                      __ptext46 EE70                                        __ptext38 3B2A  
                                      __ptext71 CB68                                        __ptext63 7158  
                                      __ptext55 95D0                                        __ptext47 F750  
                                      __ptext39 E978                                        __ptext80 EA00  
                                      __ptext72 BE34                                        __ptext64 B518  
                                      __ptext56 D5DA                                        __ptext48 E26C  
                                      __ptext81 AC3A                                        __ptext73 F10E  
                                      __ptext65 C928                                        __ptext57 E020  
                                      __ptext49 2CE6                                        __ptext90 F546  
                                      __ptext82 C9E8                                        __ptext74 3482  
                                      __ptext66 5632                                        __ptext58 E76E  
                                      __ptext91 EA42                                        __ptext83 EC40  
                                      __ptext75 E67A                                        __ptext67 5AB0  
                                      __ptext59 C5FE                                        __ptext92 F15E  
                                      __ptext84 F7F6                                        __ptext76 B63E  
                                      __ptext68 66D8                                        _dir_find B2BC  
                                      __ptext93 CE36                                        __ptext85 F7FA  
                                      __ptext77 DD1A                                        __ptext69 D2D8  
                                      __ptext94 A94C                                        __ptext86 F60A  
                                      __ptext78 ED64                                        __ptext95 E8A2  
                                      __ptext87 A034                                        __ptext79 DB2E  
                                      __ptext96 B74A                                        __ptext88 DEDC  
                                      __ptext97 470C                                        __ptext89 F136  
                                      __ptext98 E8EA                                        __ptext99 B84C  
                                    ?_writeLine 001F                                    _SSP1CON1bits 000FC6  
                                      _dir_next 7158                           __size_of_I2C2_DO_IDLE 000A  
                                      _fillRect E20E                          display_drawRoundRect@h 003A  
                        display_drawRoundRect@r 003C                          display_drawRoundRect@w 0038  
                        display_drawRoundRect@x 0034                          display_drawRoundRect@y 0036  
                         __size_of_I2C2_DO_RCEN 000A                                        _lcd_fill D80C  
                                 dir_alloc@nent 00F5                                ?_disk_initialize 0001  
                        display_drawTriangle@x0 006A                          display_drawTriangle@x1 006E  
                        display_drawTriangle@x2 0072                          display_drawTriangle@y0 006C  
                        display_drawTriangle@y1 0070                          display_drawTriangle@y2 0074  
                                      _drawTime C382                                        _ld_clust DCA4  
                                ?_I2C2_DO_RESET 0001                     I2C2_Write1ByteRegister@data 0020  
                                      addset@xx 0015                                        addset@yy 0017  
                              __size_of_put_fat 044A                                    _SSP2CON1bits 000F6C  
                                      _ld_dword CB68                                    _SSP2CON2bits 000F6B  
                               ___almod@divisor 0012                                  sync_window@res 008B  
                              __size_of_st_word 0028                             I2C2_ReadNBytes@data 001F  
                              __size_of_sprintf 0492                                    DispTime@mode 00AC  
                  __end_of_I2C2_DO_ADDRESS_NACK EB48                                 ___almod@counter 0016  
                   DATAEE_WriteByte@GIEBitValue 0011                        display_drawChars@prev_bg 007B  
                                  DispTime@size 00A4                                _display_drawLine B94E  
                              __size_of_sync_fs 01E6                                _display_drawRect CCD4  
                              __size_of_strncmp 0078                                       sind@theta 0013  
                      _display_fillCircleHelper A21A                                        _init_RTC B3EE  
          __size_of_I2C2_SetAddressNackCallback 0018                                 writeLine@t_7080 002F  
                               writeLine@t_7081 0031                                 writeLine@t_7079 002D  
                                 __size_of_cosd 0022                                   __size_of_main 0376  
                                    sync_fs@res 0096                                  drawHLine@color 001F  
                                  _remove_chain A798                                   __size_of_sind 009C  
                     __end_ofi2_TMR2_StartTimer F84A                              TransCoordination@x 0028  
                            TransCoordination@y 002A                                     ?_I2C2_DO_RX 0001  
                                   ?_I2C2_DO_TX 0001                                find_volume@bsect 00DC  
                                    strncmp@len 0012                                find_volume@nclst 00D4  
          __end_of_TMR0_DefaultInterruptHandler F85C           __size_of_TMR0_DefaultInterruptHandler 0002  
                  _TMR0_DefaultInterruptHandler F85A                               ??_DATAEE_ReadByte 0010  
                      ?_I2C2_MasterWaitForEvent 0001                       __end_of_ADC_GetConversion EF00  
       SD_SPI_AsyncReadTasks@longTimeoutCounter 0365                                find_volume@tsect 00CF  
                                      f_open@dj 0134                                        f_open@cl 0125  
                                      f_open@fp 010A                                        f_open@fs 0131  
                                      f_open@dw 0117                                     ?_I2C2_Close 0001  
                                      f_open@sc 011B                             I2C2_SetCallback@idx 0012  
                              drawCalendar@mode 00B5                                     _preDateTime 036D  
                           I2C2_SetCallback@ptr 0010                                   _drawAlarmTime 7E70  
                      __size_of_TMR5_WriteTimer 001E                            __size_of_SlideSWProc 009A  
                      __end_of_get_tempHumidity C382                                        _validate C9E8  
EUSART1_SetOverrunErrorHandler@interruptHandler 000E                                    SettingProc@d 00D2  
                      ?_I2C2_Write1ByteRegister 001F                                    SettingProc@m 00D1  
                                  SettingProc@y 00D0                                      writeLine@t 002B  
                                      f_sync@fp 0097                                        f_sync@fs 009E  
                                      f_sync@tm 0099                                        _timezone 035D  
                  __end_of_I2C2_MasterOperation F00A                                     ??_dir_clear 0092  
                                      int$flags 0052                                     ??_dir_alloc 00F7  
                                      _st_clust EA42                                ??_months_to_days 002C  
                           DrawAnalogClock@rch2 0173                                        _st_dword DEDC  
                           DrawAnalogClock@rch3 0175                             DrawAnalogClock@rcm2 016F  
                           DrawAnalogClock@rcm3 0171                             DrawAnalogClock@rcs2 0185  
                           DrawAnalogClock@mode 0001                                     ??_clst2sect 0020  
                                   ??_drawHLine 0021                               ?i2_TMR0_StopTimer 0001  
                                      _tinyfont FE1D                             DrawAnalogClock@size 008E  
                        DrawBigCalendar@maxdays 0094                               ??_TMR2_StartTimer 000E  
            __end_of_INTERRUPT_InterruptManager 009A                      _INTERRUPT_InterruptManager 0008  
                                   ??_glcd_init 0011                                   ??_sync_window 007B  
                                   ??_drawVLine 0021                                     ??_disk_read 0041  
                             ??_TMR1_WriteTimer 0003                                 ??_GetTouchRawXY 0015  
                                 _RotaryHandler D894                      __size_of_display_drawChars 0084  
                         __size_of_Touch2M_open 0008                        __end_of_lcd_set_cursor_x E580  
                      __end_of_lcd_set_cursor_y E52C                     _EUSART1_FramingErrorHandler 038A  
                           _EUSART1_Receive_ISR D4B2                     SPI1_ExchangeBlock@blockSize 0010  
                            ??i2_TMR0_StopTimer 0001                               ??_TMR5_Initialize 0010  
                     display_fillTriangle@color 0033                           __end_of_AlarmWHandler F5DA  
                                  _I2C2_DO_IDLE F728                                    _I2C2_DO_RCEN F71E  
                            _ymd_to_scalar$8143 003E                              _I2C2_ReadDataBlock E088  
                           DrawSmallCalendar@dd 00A0                             DrawSmallCalendar@jj 00AB  
                           DrawSmallCalendar@kk 009C                             DrawSmallCalendar@mm 009E  
                           DrawSmallCalendar@wd 0094                             DrawSmallCalendar@xs 008A  
                           DrawSmallCalendar@yr 009D                             DrawSmallCalendar@ys 008C  
                           DrawSmallCalendar@xx 00A9                             DrawSmallCalendar@yy 00A7  
                                   _SDSLOW_open F758                                        mem_cmp@d 0016  
                                      mem_cmp@r 001A                                        mem_cmp@s 0018  
                                    _INTCONbits 000FF2                                       put_fat@bc 00B5  
                                      mem_cpy@d 0014                                       put_fat@fs 0097  
                                      mem_cpy@s 0016                                 ??_TMR0_CallBack 0004  
                                      mem_set@d 0014                                        memcpy@d1 000E  
                                      gmtime@tc 002D                                        gmtime@tp 0028  
                                      memcpy@s1 000F                                _RTC_setAlarmTime BF24  
                               _display_SetFont E324                             __end_of_RTC_handler F852  
              __end_of_display_drawCircleHelper A798                              GetTouchLocation@jj 00AC  
                            GetTouchLocation@tx 002A                              GetTouchLocation@ty 002C  
                                      isdigit@c 0010                          ??_INTERRUPT_Initialize 000E  
                                      memset@p1 000E                              lcd_draw_pixel_at@x 0019  
                            lcd_draw_pixel_at@y 001B                          ??_I2C2_DO_SEND_RESTART 000E  
                                 _lcd_fill_rect BC42                             ?_I2C2_ReadDataBlock 001F  
                        __size_of_years_to_days 00A6                       Timer5Handler@G1PPS_status 03F7  
                            _EXT_INT_Initialize F532                                        isleap@yr 0013  
                           decimalToFatTime@day 0013                                     ??_localtime 0033  
                          __size_of_SettingProc 0530                             __end_of_RTC_setDate D0E4  
                                 clst2sect@clst 001C                                   getWeekdays@t2 0075  
                             ?i2_TMR2_StopTimer 0001                         _I2C2_DO_RX_NACK_RESTART F780  
                          _display_setTextColor F592                                        intlevel2 0000  
                                _lcd_set_cursor EF86                             __end_of_RTC_setTime DC2C  
                                     sprintf@ap 0066                                       sprintf@cp 0062  
                              ??_TMR0_StopTimer 000E                                       sprintf@sp 002A  
                           FatFsDemo_Tasks@F257 03CA                            ?_EUSART1_Receive_ISR 0001  
                             lcd_set_cursor_x@x 0011                               lcd_set_cursor_y@y 0011  
                       __end_of_DrawAnalogClock 1862                                  dir_register@dp 0100  
                                dir_register@fs 0102                                       strchr@chr 0010  
                              display_putc@line 0060                       Timer5Handler@touch_status 02F4  
                              ___lwmod@dividend 000E                              ??i2_TMR2_StopTimer 0001  
                                     strchr@ptr 000E                                    dir_clear@szb 009A  
                         __end_of_write_command F6AE                                ___lldiv@dividend 000E  
                                      mktime@tt 006A                                SettingProc@delta 00D3  
                       ?_PIN_MANAGER_Initialize 0001                               ??_TMR6_Initialize 000E  
                    __size_ofi2_TMR0_StartTimer 0004                                    dir_alloc@res 00FE  
                                 sync_window@fs 0079            SD_SPI_AsyncReadTasks@SingleBlockRead 03A8  
                         __size_of_SoundHandler 00B0                             ?_EXT_INT_Initialize 0001  
                       display_drawChars@prev_x 0075                         display_drawChars@prev_y 0077  
        __end_of_EUSART1_SetOverrunErrorHandler F6F6         __size_of_EUSART1_SetOverrunErrorHandler 000A  
                _EUSART1_SetOverrunErrorHandler F6EC                                     f_mount@path 00E7  
                                    _RCSTA1bits 000FAB                                     ??_resetCTFG 0022  
                    __size_of_display_setCursor 0012                                       sync_fs@fs 008C  
                                ?_drawAlarmTime 0095                             ymd_to_scalar@scalar 0040  
                                     strncmp@s1 000E                                       strncmp@s2 0010  
                              ??_ADC_Initialize 000E                           __end_of_AlarmSoundOff F64A  
                                  Dispseg@F6512 FAB9                                  writeLine@color 0027  
                            I2C2_SetCallback@cb 000E                          __size_of_INT0_CallBack 0020  
                                  _Touch2M_open F770                   ?_TMR0_DefaultInterruptHandler 0001  
                     ??_EUSART1_get_last_status 0001                                     _move_window CE36  
                        _SD_SPI_MediaInitialize 3482                                  writeLine@steep 003F  
                       __end_ofi2_AlarmSoundOff F67A                                     _TMR0_Reload F70A  
                                writeLine@ystep 0039                      display_drawCircleHelper@x0 001F  
                    display_drawCircleHelper@y0 0021                            ??_I2C2_ReadDataBlock 0024  
                               ??_TMR5_CallBack 0008                            __size_of_I2C2_Poller 0010  
                              ??_I2C2_DO_RX_ACK 000E  EUSART1_SetFramingErrorHandler@interruptHandler 000E  
                  __end_of_I2C2_DO_RX_NACK_STOP F790                                  ?_RotaryHandler 0001  
                                  ??_write_data 000F                                ??_TMR2_StopTimer 000E  
                                      put_fat@p 00B3                           DrawBigCalendar@ypitch 009E  
                                 fillRect@color 0035                              _eusart1RxLastError 03A6  
                         Timer5Handler@rxStatus 0006                                    Dispseg@color 003D  
                                    _SPI1_Close F7FE               SD_SPI_MediaInitialize@c_size_mult 0078  
                                 ?_dir_register 0100                 SD_SPI_MediaInitialize@block_len 007A  
                          __size_of_TouchAdjMsg 00B4                            ??_EXT_INT_Initialize 0010  
                                  getWeekdays@t 0077                                        sprintf@c 006C  
                                      sprintf@f 002C                            __size_of_TouchAdjust 0252  
                           _display_setTextSize F3D2                                     dir_clear@fs 008C  
                                   dir_alloc@dp 00F3                                   ?_drawCalendar 0001  
                                   dir_alloc@fs 00FA                                ___lldiv@quotient 0016  
                               ___lwmod@divisor 0010                             __size_of_I2C2_DO_RX 006C  
                           __size_of_I2C2_DO_TX 008A                                      DispTime@jj 00B1  
                               _TMR0_Initialize ED9C                                      DispTime@xd 00AF  
                                    DispTime@yd 00AD                                ?_DrawBigCalendar 0089  
                                      strlen@cp 0010                              drawAlarmTime@F6643 03E7  
                               ___lwmod@counter 0012                 I2C2_SetDataCompleteCallback@ptr 0015  
                                 ?_drawDateTime 00B7                             __end_of_sync_window AAC6  
                                   dir_find@res 00FA                            __end_of_AlarmSoundOn E80A  
                             remove_chain@pclst 00BE                                     ?_LCD8M_open 0001  
                                  ___aldiv@sign 0023                                   ?_create_chain 00B8  
                           __size_of_I2C2_Close 0022                        __size_of_I2C2_ReadNBytes 0030  
                           _EPWM1_LoadDutyValue EEA0                                    _SoundDataPos 0049  
                                ?_lcd_fill_rect 0019                            DrawBigCalendar@color 00A2  
                               ??_I2C2_DO_RESET 000E                            DrawBigCalendar@fonth 009A  
                          DrawBigCalendar@fontw 00A8                          __end_of_lcd_set_cursor EFB2  
                              ?_spi_master_open 0001                            DrawBigCalendar@month 0089  
                                  ?_getWeekdays 006E                            DrawBigCalendar@space 009F  
                                   ??_writeLine 0029                                _create_name$1054 001D  
                                  dir_next@clst 00EF                                    _SoundHandler CD86  
                              drawDateTime@mode 01F7                           _I2C2_MasterDisableIrq F82A  
              __size_of_SD_SPI_IsWriteProtected 0004                           ?_display_setTextColor 000E  
                              i2AlarmSoundOn@sn 0003                                _decimalToFatTime BD3C  
                                   clst2sect@fs 001A                                     Dispseg@size 003C  
                                   dir_sdi@clst 00CA                               ??_TMR5_StartTimer 000E  
               __end_of_I2C2_MasterWaitForEvent F7D4                      __end_of_SD_SPI_SectorWrite B84C  
                         ??_EUSART1_Receive_ISR 0001                  __end_of_PIN_MANAGER_Initialize EBC6  
                I2C2_SetDataCompleteCallback@cb 0013                        __size_of_I2C2_MasterRead 0008  
                       SPI1_ReadBlock@blockSize 0010                        __size_of_I2C2_MasterOpen 0018  
                                   drawHLine@hi 0025                                    ___almod@sign 0017  
                                   drawHLine@lo 0026                  __size_of_rd1RegCompleteHandler 002C  
                      __size_of_I2C2_MasterStop 0004                        __size_of_I2C2_Initialize 0014  
                 __end_of_rd1RegCompleteHandler F08E                        __end_of_I2C2_MasterClose F832  
                                  ?_create_name 0016                              __size_of_I2C2_Open 0084  
                          _I2C2_MasterGetRxData F80E                             DrawBigCalendar@year 0092  
                                   dir_next@ofs 00E9                                    f_write@csect 0107  
                               drawDateTime@str 0193                                 _PIN_MANAGER_IOC F73C  
                           _I2C2_MasterClearIrq F832                  __size_of_wr1RegCompleteHandler 002C  
                    __size_ofi2_TMR2_StartTimer 0004                        __end_of_I2C2_MasterStart F82A  
                                    Dispseg@num 003B                              __end_of_write_data F6A2  
                      __end_of_I2C2_MasterWrite F780                   __end_of_wr1RegCompleteHandler F036  
                          ?_display_setTextSize 0001                         DrawAnalogClock@datetime 0088  
               __end_of_I2C2_Write1ByteRegister E4D8                         ??_EUSART1_RxDataHandler 0001  
                                  f_write@wbuff 0105                                    ?_get_fattime 001F  
                             drawAlarmTime@ampm 0264                               drawAlarmTime@mode 026D  
                    __size_of_ADC_GetConversion 0030                              DrawBigCalendar@str 0095  
                                   f_write@buff 00D7                                     f_write@clst 010F  
                                    _SD_SendCmd 5EFA                                     f_write@sect 010B  
                               _TMR1_Initialize F0BA                                    ?_find_volume 009E  
                                   f_write@wcnt 0113                               DrawBigCalendar@dd 00A0  
                                 ?_get_ldnumber 000E                               DrawBigCalendar@jj 00AB  
                             DrawBigCalendar@kk 009B                               DrawBigCalendar@mm 009D  
                      SD_SPI_SectorWrite@buffer 003E                               DrawBigCalendar@wd 0093  
                                  ?_disk_status 0001                               DrawBigCalendar@xs 008A  
                             DrawBigCalendar@yr 009C                               DrawBigCalendar@ys 008C  
                                   _put_fat$705 00AF                               DrawBigCalendar@xx 00A9  
                                   _put_fat$706 00B1                               DrawBigCalendar@yy 00A6  
                              drawAlarmTime@str 0200                        __end_of_EPWM1_Initialize F26C  
                    __end_of_spi1_configuration FAA3                                 drawAlarmTime@ap 026C  
                    ??_SD_SPI_DelayMilliseconds 000F                            ?_EPWM1_LoadDutyValue 000E  
                        SD_SPI_SectorWrite@info 0064                               ?_drawTempHumidity 0042  
                    ??_I2C2_MasterEnableRestart 000E  
