Version 3.2 HI-TECH Software Intermediate Code
"97 mcc_generated_files/fatfs/ff.h
[s S1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `us 1 `us 1 `us 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 `uc -> 512 `i ]
[n S1 . fs_type pdrv n_fats wflag fsi_flag id n_rootdir csize last_clst free_clst n_fatent fsize volbase fatbase dirbase database winsect win ]
"1037 mcc_generated_files/fatfs/ff.c
[c E64 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 .. ]
[n E64 . FR_OK FR_DISK_ERR FR_INT_ERR FR_NOT_READY FR_NO_FILE FR_NO_PATH FR_INVALID_NAME FR_DENIED FR_EXIST FR_INVALID_OBJECT FR_WRITE_PROTECTED FR_INVALID_DRIVE FR_NOT_ENABLED FR_NO_FILESYSTEM FR_MKFS_ABORTED FR_TIMEOUT FR_LOCKED FR_NOT_ENOUGH_CORE FR_TOO_MANY_OPEN_FILES FR_INVALID_PARAMETER  ]
"1042
[c E203 0 1 2 3 4 .. ]
[n E203 . RES_OK RES_ERROR RES_WRPRT RES_NOTRDY RES_PARERR  ]
"35 mcc_generated_files/fatfs/diskio.h
[v _disk_write `(E203 ~T0 @X0 0 ef4`uc`*Cuc`ul`ui ]
"34
[v _disk_read `(E203 ~T0 @X0 0 ef4`uc`*uc`ul`ui ]
"36
[v _disk_ioctl `(E203 ~T0 @X0 0 ef3`uc`uc`*v ]
"144 mcc_generated_files/fatfs/ff.h
[s S2 `*S1 1 `us 1 `uc 1 `uc 1 `ul 1 `ul 1 ]
[n S2 . fs id attr stat sclust objsize ]
"190
[s S4 `S2 1 `ul 1 `ul 1 `ul 1 `*uc 1 `uc -> 12 `i ]
[n S4 . obj dptr clust sect dir fn ]
"33 mcc_generated_files/fatfs/diskio.h
[v _disk_status `(uc ~T0 @X0 0 ef1`uc ]
"32
[v _disk_initialize `(uc ~T0 @X0 0 ef1`uc ]
"167 mcc_generated_files/fatfs/ff.h
[s S3 `S2 1 `uc 1 `uc 1 `ul 1 `ul 1 `ul 1 `ul 1 `*uc 1 ]
[n S3 . obj flag err fptr clust sect dir_sect dir_ptr ]
"310
[v _get_fattime `(ul ~T0 @X0 0 ef ]
[; ;integer.h: 16: typedef int INT;
[; ;integer.h: 17: typedef unsigned int UINT;
[; ;integer.h: 20: typedef unsigned char BYTE;
[; ;integer.h: 23: typedef short SHORT;
[; ;integer.h: 24: typedef unsigned short WORD;
[; ;integer.h: 25: typedef unsigned short WCHAR;
[; ;integer.h: 28: typedef long LONG;
[; ;integer.h: 29: typedef unsigned long DWORD;
[; ;ff.h: 76: typedef char TCHAR;
[; ;ff.h: 90: typedef DWORD FSIZE_t;
[; ;ff.h: 97: typedef struct {
[; ;ff.h: 98: BYTE fs_type;
[; ;ff.h: 99: BYTE pdrv;
[; ;ff.h: 100: BYTE n_fats;
[; ;ff.h: 101: BYTE wflag;
[; ;ff.h: 102: BYTE fsi_flag;
[; ;ff.h: 103: WORD id;
[; ;ff.h: 104: WORD n_rootdir;
[; ;ff.h: 105: WORD csize;
[; ;ff.h: 119: DWORD last_clst;
[; ;ff.h: 120: DWORD free_clst;
[; ;ff.h: 130: DWORD n_fatent;
[; ;ff.h: 131: DWORD fsize;
[; ;ff.h: 132: DWORD volbase;
[; ;ff.h: 133: DWORD fatbase;
[; ;ff.h: 134: DWORD dirbase;
[; ;ff.h: 135: DWORD database;
[; ;ff.h: 136: DWORD winsect;
[; ;ff.h: 137: BYTE win[512];
[; ;ff.h: 138: } FATFS;
[; ;ff.h: 144: typedef struct {
[; ;ff.h: 145: FATFS* fs;
[; ;ff.h: 146: WORD id;
[; ;ff.h: 147: BYTE attr;
[; ;ff.h: 148: BYTE stat;
[; ;ff.h: 149: DWORD sclust;
[; ;ff.h: 150: FSIZE_t objsize;
[; ;ff.h: 161: } FFOBJID;
[; ;ff.h: 167: typedef struct {
[; ;ff.h: 168: FFOBJID obj;
[; ;ff.h: 169: BYTE flag;
[; ;ff.h: 170: BYTE err;
[; ;ff.h: 171: FSIZE_t fptr;
[; ;ff.h: 172: DWORD clust;
[; ;ff.h: 173: DWORD sect;
[; ;ff.h: 175: DWORD dir_sect;
[; ;ff.h: 176: BYTE* dir_ptr;
[; ;ff.h: 184: } FIL;
[; ;ff.h: 190: typedef struct {
[; ;ff.h: 191: FFOBJID obj;
[; ;ff.h: 192: DWORD dptr;
[; ;ff.h: 193: DWORD clust;
[; ;ff.h: 194: DWORD sect;
[; ;ff.h: 195: BYTE* dir;
[; ;ff.h: 196: BYTE fn[12];
[; ;ff.h: 203: } FFDIR;
[; ;ff.h: 209: typedef struct {
[; ;ff.h: 210: FSIZE_t fsize;
[; ;ff.h: 211: WORD fdate;
[; ;ff.h: 212: WORD ftime;
[; ;ff.h: 213: BYTE fattrib;
[; ;ff.h: 218: TCHAR fname[12 + 1];
[; ;ff.h: 220: } FILINFO;
[; ;ff.h: 226: typedef enum {
[; ;ff.h: 227: FR_OK = 0,
[; ;ff.h: 228: FR_DISK_ERR,
[; ;ff.h: 229: FR_INT_ERR,
[; ;ff.h: 230: FR_NOT_READY,
[; ;ff.h: 231: FR_NO_FILE,
[; ;ff.h: 232: FR_NO_PATH,
[; ;ff.h: 233: FR_INVALID_NAME,
[; ;ff.h: 234: FR_DENIED,
[; ;ff.h: 235: FR_EXIST,
[; ;ff.h: 236: FR_INVALID_OBJECT,
[; ;ff.h: 237: FR_WRITE_PROTECTED,
[; ;ff.h: 238: FR_INVALID_DRIVE,
[; ;ff.h: 239: FR_NOT_ENABLED,
[; ;ff.h: 240: FR_NO_FILESYSTEM,
[; ;ff.h: 241: FR_MKFS_ABORTED,
[; ;ff.h: 242: FR_TIMEOUT,
[; ;ff.h: 243: FR_LOCKED,
[; ;ff.h: 244: FR_NOT_ENOUGH_CORE,
[; ;ff.h: 245: FR_TOO_MANY_OPEN_FILES,
[; ;ff.h: 246: FR_INVALID_PARAMETER
[; ;ff.h: 247: } FRESULT;
[; ;ff.h: 254: FRESULT f_open (FIL* fp, const TCHAR* path, BYTE mode);
[; ;ff.h: 255: FRESULT f_close (FIL* fp);
[; ;ff.h: 256: FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);
[; ;ff.h: 257: FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
[; ;ff.h: 258: FRESULT f_lseek (FIL* fp, FSIZE_t ofs);
[; ;ff.h: 259: FRESULT f_truncate (FIL* fp);
[; ;ff.h: 260: FRESULT f_sync (FIL* fp);
[; ;ff.h: 261: FRESULT f_opendir (FFDIR* dp, const TCHAR* path);
[; ;ff.h: 262: FRESULT f_closedir (FFDIR* dp);
[; ;ff.h: 263: FRESULT f_readdir (FFDIR* dp, FILINFO* fno);
[; ;ff.h: 264: FRESULT f_findfirst (FFDIR* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);
[; ;ff.h: 265: FRESULT f_findnext (FFDIR* dp, FILINFO* fno);
[; ;ff.h: 266: FRESULT f_mkdir (const TCHAR* path);
[; ;ff.h: 267: FRESULT f_unlink (const TCHAR* path);
[; ;ff.h: 268: FRESULT f_rename (const TCHAR* path_old, const TCHAR* path_new);
[; ;ff.h: 269: FRESULT f_stat (const TCHAR* path, FILINFO* fno);
[; ;ff.h: 270: FRESULT f_chmod (const TCHAR* path, BYTE attr, BYTE mask);
[; ;ff.h: 271: FRESULT f_utime (const TCHAR* path, const FILINFO* fno);
[; ;ff.h: 272: FRESULT f_chdir (const TCHAR* path);
[; ;ff.h: 273: FRESULT f_chdrive (const TCHAR* path);
[; ;ff.h: 274: FRESULT f_getcwd (TCHAR* buff, UINT len);
[; ;ff.h: 275: FRESULT f_getfree (const TCHAR* path, DWORD* nclst, FATFS** fatfs);
[; ;ff.h: 276: FRESULT f_getlabel (const TCHAR* path, TCHAR* label, DWORD* vsn);
[; ;ff.h: 277: FRESULT f_setlabel (const TCHAR* label);
[; ;ff.h: 278: FRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);
[; ;ff.h: 279: FRESULT f_expand (FIL* fp, FSIZE_t szf, BYTE opt);
[; ;ff.h: 280: FRESULT f_mount (FATFS* fs, const TCHAR* path, BYTE opt);
[; ;ff.h: 281: FRESULT f_mkfs (const TCHAR* path, BYTE opt, DWORD au, void* work, UINT len);
[; ;ff.h: 282: FRESULT f_fdisk (BYTE pdrv, const DWORD* szt, void* work);
[; ;ff.h: 283: FRESULT f_setcp (WORD cp);
[; ;ff.h: 284: int f_putc (TCHAR c, FIL* fp);
[; ;ff.h: 285: int f_puts (const TCHAR* str, FIL* cp);
[; ;ff.h: 286: int f_printf (FIL* fp, const TCHAR* str, ...);
[; ;ff.h: 287: TCHAR* f_gets (TCHAR* buff, int len, FIL* fp);
[; ;ff.h: 310: DWORD get_fattime (void);
[; ;diskio.h: 16: typedef BYTE DSTATUS;
[; ;diskio.h: 19: typedef enum {
[; ;diskio.h: 20: RES_OK = 0,
[; ;diskio.h: 21: RES_ERROR,
[; ;diskio.h: 22: RES_WRPRT,
[; ;diskio.h: 23: RES_NOTRDY,
[; ;diskio.h: 24: RES_PARERR
[; ;diskio.h: 25: } DRESULT;
[; ;diskio.h: 32: DSTATUS disk_initialize (BYTE pdrv);
[; ;diskio.h: 33: DSTATUS disk_status (BYTE pdrv);
[; ;diskio.h: 34: DRESULT disk_read (BYTE pdrv, BYTE* buff, DWORD sector, UINT count);
[; ;diskio.h: 35: DRESULT disk_write (BYTE pdrv, const BYTE* buff, DWORD sector, UINT count);
[; ;diskio.h: 36: DRESULT disk_ioctl (BYTE pdrv, BYTE cmd, void* buff);
"431 mcc_generated_files/fatfs/ff.c
[v _FatFs `*S1 ~T0 @X0 -> -> 1 `i `ux s ]
[; ;ff.c: 431: static FATFS* FatFs[1];
"432
[v _Fsid `us ~T0 @X0 1 s ]
[; ;ff.c: 432: static WORD Fsid;
"554
[v _DbcTbl `Cuc ~T0 @X0 -> 0 `x s ]
[i _DbcTbl
:U ..
-> -> 129 `i `uc
-> -> 159 `i `uc
-> -> 224 `i `uc
-> -> 252 `i `uc
-> -> 64 `i `uc
-> -> 126 `i `uc
-> -> 128 `i `uc
-> -> 252 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
]
[; ;ff.c: 554: static const BYTE DbcTbl[] = {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00};
"572
[v _ld_word `(us ~T0 @X0 1 sf1`*Cuc ]
"573
{
[; ;ff.c: 572: static WORD ld_word (const BYTE* ptr)
[; ;ff.c: 573: {
[e :U _ld_word ]
"572
[v _ptr `*Cuc ~T0 @X0 1 r1 ]
"573
[f ]
"574
[v _rv `us ~T0 @X0 1 a ]
[; ;ff.c: 574: WORD rv;
[; ;ff.c: 576: rv = ptr[1];
"576
[e = _rv -> *U + _ptr * -> -> 1 `i `x -> -> # *U _ptr `i `x `us ]
[; ;ff.c: 577: rv = rv << 8 | ptr[0];
"577
[e = _rv -> | << -> _rv `ui -> 8 `i -> *U + _ptr * -> -> 0 `i `x -> -> # *U _ptr `i `x `ui `us ]
[; ;ff.c: 578: return rv;
"578
[e ) _rv ]
[e $UE 6  ]
[; ;ff.c: 579: }
"579
[e :UE 6 ]
}
"581
[v _ld_dword `(ul ~T0 @X0 1 sf1`*Cuc ]
"582
{
[; ;ff.c: 581: static DWORD ld_dword (const BYTE* ptr)
[; ;ff.c: 582: {
[e :U _ld_dword ]
"581
[v _ptr `*Cuc ~T0 @X0 1 r1 ]
"582
[f ]
"583
[v _rv `ul ~T0 @X0 1 a ]
[; ;ff.c: 583: DWORD rv;
[; ;ff.c: 585: rv = ptr[3];
"585
[e = _rv -> *U + _ptr * -> -> 3 `i `x -> -> # *U _ptr `i `x `ul ]
[; ;ff.c: 586: rv = rv << 8 | ptr[2];
"586
[e = _rv | << _rv -> 8 `i -> *U + _ptr * -> -> 2 `i `x -> -> # *U _ptr `i `x `ul ]
[; ;ff.c: 587: rv = rv << 8 | ptr[1];
"587
[e = _rv | << _rv -> 8 `i -> *U + _ptr * -> -> 1 `i `x -> -> # *U _ptr `i `x `ul ]
[; ;ff.c: 588: rv = rv << 8 | ptr[0];
"588
[e = _rv | << _rv -> 8 `i -> *U + _ptr * -> -> 0 `i `x -> -> # *U _ptr `i `x `ul ]
[; ;ff.c: 589: return rv;
"589
[e ) _rv ]
[e $UE 7  ]
[; ;ff.c: 590: }
"590
[e :UE 7 ]
}
"610
[v _st_word `(v ~T0 @X0 1 sf2`*uc`us ]
"611
{
[; ;ff.c: 610: static void st_word (BYTE* ptr, WORD val)
[; ;ff.c: 611: {
[e :U _st_word ]
"610
[v _ptr `*uc ~T0 @X0 1 r1 ]
[v _val `us ~T0 @X0 1 r2 ]
"611
[f ]
[; ;ff.c: 612: *ptr++ = (BYTE)val; val >>= 8;
"612
[e = *U ++ _ptr * -> -> 1 `i `x -> -> # *U _ptr `i `x -> _val `uc ]
[e =>> _val -> 8 `i ]
[; ;ff.c: 613: *ptr++ = (BYTE)val;
"613
[e = *U ++ _ptr * -> -> 1 `i `x -> -> # *U _ptr `i `x -> _val `uc ]
[; ;ff.c: 614: }
"614
[e :UE 8 ]
}
"616
[v _st_dword `(v ~T0 @X0 1 sf2`*uc`ul ]
"617
{
[; ;ff.c: 616: static void st_dword (BYTE* ptr, DWORD val)
[; ;ff.c: 617: {
[e :U _st_dword ]
"616
[v _ptr `*uc ~T0 @X0 1 r1 ]
[v _val `ul ~T0 @X0 1 r2 ]
"617
[f ]
[; ;ff.c: 618: *ptr++ = (BYTE)val; val >>= 8;
"618
[e = *U ++ _ptr * -> -> 1 `i `x -> -> # *U _ptr `i `x -> _val `uc ]
[e =>> _val -> 8 `i ]
[; ;ff.c: 619: *ptr++ = (BYTE)val; val >>= 8;
"619
[e = *U ++ _ptr * -> -> 1 `i `x -> -> # *U _ptr `i `x -> _val `uc ]
[e =>> _val -> 8 `i ]
[; ;ff.c: 620: *ptr++ = (BYTE)val; val >>= 8;
"620
[e = *U ++ _ptr * -> -> 1 `i `x -> -> # *U _ptr `i `x -> _val `uc ]
[e =>> _val -> 8 `i ]
[; ;ff.c: 621: *ptr++ = (BYTE)val;
"621
[e = *U ++ _ptr * -> -> 1 `i `x -> -> # *U _ptr `i `x -> _val `uc ]
[; ;ff.c: 622: }
"622
[e :UE 9 ]
}
"646
[v _mem_cpy `(v ~T0 @X0 1 sf3`*v`*Cv`ui ]
"647
{
[; ;ff.c: 646: static void mem_cpy (void* dst, const void* src, UINT cnt)
[; ;ff.c: 647: {
[e :U _mem_cpy ]
"646
[v _dst `*v ~T0 @X0 1 r1 ]
[v _src `*Cv ~T0 @X0 1 r2 ]
[v _cnt `ui ~T0 @X0 1 r3 ]
"647
[f ]
"648
[v _d `*uc ~T0 @X0 1 a ]
[; ;ff.c: 648: BYTE *d = (BYTE*)dst;
[e = _d -> _dst `*uc ]
"649
[v _s `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 649: const BYTE *s = (const BYTE*)src;
[e = _s -> _src `*Cuc ]
[; ;ff.c: 651: if (cnt != 0) {
"651
[e $ ! != _cnt -> -> 0 `i `ui 11  ]
{
[; ;ff.c: 652: do {
"652
[e :U 14 ]
{
[; ;ff.c: 653: *d++ = *s++;
"653
[e = *U ++ _d * -> -> 1 `i `x -> -> # *U _d `i `x *U ++ _s * -> -> 1 `i `x -> -> # *U _s `i `x ]
"654
}
[; ;ff.c: 654: } while (--cnt);
[e $ != =- _cnt -> -> 1 `i `ui -> -> 0 `i `ui 14  ]
[e :U 13 ]
"655
}
[e :U 11 ]
[; ;ff.c: 655: }
[; ;ff.c: 656: }
"656
[e :UE 10 ]
}
"660
[v _mem_set `(v ~T0 @X0 1 sf3`*v`i`ui ]
"661
{
[; ;ff.c: 660: static void mem_set (void* dst, int val, UINT cnt)
[; ;ff.c: 661: {
[e :U _mem_set ]
"660
[v _dst `*v ~T0 @X0 1 r1 ]
[v _val `i ~T0 @X0 1 r2 ]
[v _cnt `ui ~T0 @X0 1 r3 ]
"661
[f ]
"662
[v _d `*uc ~T0 @X0 1 a ]
[; ;ff.c: 662: BYTE *d = (BYTE*)dst;
[e = _d -> _dst `*uc ]
[; ;ff.c: 664: do {
"664
[e :U 18 ]
{
[; ;ff.c: 665: *d++ = (BYTE)val;
"665
[e = *U ++ _d * -> -> 1 `i `x -> -> # *U _d `i `x -> _val `uc ]
"666
}
[; ;ff.c: 666: } while (--cnt);
[e $ != =- _cnt -> -> 1 `i `ui -> -> 0 `i `ui 18  ]
[e :U 17 ]
[; ;ff.c: 667: }
"667
[e :UE 15 ]
}
"671
[v _mem_cmp `(i ~T0 @X0 1 sf3`*Cv`*Cv`ui ]
"672
{
[; ;ff.c: 671: static int mem_cmp (const void* dst, const void* src, UINT cnt)
[; ;ff.c: 672: {
[e :U _mem_cmp ]
"671
[v _dst `*Cv ~T0 @X0 1 r1 ]
[v _src `*Cv ~T0 @X0 1 r2 ]
[v _cnt `ui ~T0 @X0 1 r3 ]
"672
[f ]
"673
[v _d `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 673: const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
[e = _d -> _dst `*Cuc ]
[v _s `*Cuc ~T0 @X0 1 a ]
[e = _s -> _src `*Cuc ]
"674
[v _r `i ~T0 @X0 1 a ]
[; ;ff.c: 674: int r = 0;
[e = _r -> 0 `i ]
[; ;ff.c: 676: do {
"676
[e :U 22 ]
{
[; ;ff.c: 677: r = *d++ - *s++;
"677
[e = _r - -> *U ++ _d * -> -> 1 `i `x -> -> # *U _d `i `x `i -> *U ++ _s * -> -> 1 `i `x -> -> # *U _s `i `x `i ]
"678
}
[; ;ff.c: 678: } while (--cnt && r == 0);
[e $ && != =- _cnt -> -> 1 `i `ui -> -> 0 `i `ui == _r -> 0 `i 22  ]
[e :U 21 ]
[; ;ff.c: 680: return r;
"680
[e ) _r ]
[e $UE 19  ]
[; ;ff.c: 681: }
"681
[e :UE 19 ]
}
"685
[v _chk_chr `(i ~T0 @X0 1 sf2`*Cuc`i ]
"686
{
[; ;ff.c: 685: static int chk_chr (const char* str, int chr)
[; ;ff.c: 686: {
[e :U _chk_chr ]
"685
[v _str `*Cuc ~T0 @X0 1 r1 ]
[v _chr `i ~T0 @X0 1 r2 ]
"686
[f ]
[; ;ff.c: 687: while (*str && *str != chr) str++;
"687
[e $U 24  ]
[e :U 25 ]
[e ++ _str * -> -> 1 `i `x -> -> # *U _str `i `x ]
[e :U 24 ]
[e $ && != -> *U _str `i -> -> -> 0 `i `Cuc `i != -> *U _str `i _chr 25  ]
[e :U 26 ]
[; ;ff.c: 688: return *str;
"688
[e ) -> *U _str `i ]
[e $UE 23  ]
[; ;ff.c: 689: }
"689
[e :UE 23 ]
}
"693
[v _dbc_1st `(i ~T0 @X0 1 sf1`uc ]
"694
{
[; ;ff.c: 693: static int dbc_1st (BYTE c)
[; ;ff.c: 694: {
[e :U _dbc_1st ]
"693
[v _c `uc ~T0 @X0 1 r1 ]
"694
[f ]
[; ;ff.c: 701: if (c >= DbcTbl[0]) {
"701
[e $ ! >= -> _c `i -> *U + &U _DbcTbl * -> -> -> 0 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i 28  ]
{
[; ;ff.c: 702: if (c <= DbcTbl[1]) return 1;
"702
[e $ ! <= -> _c `i -> *U + &U _DbcTbl * -> -> -> 1 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i 29  ]
[e ) -> 1 `i ]
[e $UE 27  ]
[e :U 29 ]
[; ;ff.c: 703: if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
"703
[e $ ! && >= -> _c `i -> *U + &U _DbcTbl * -> -> -> 2 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i <= -> _c `i -> *U + &U _DbcTbl * -> -> -> 3 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i 30  ]
[e ) -> 1 `i ]
[e $UE 27  ]
[e :U 30 ]
"704
}
[e :U 28 ]
[; ;ff.c: 704: }
[; ;ff.c: 708: return 0;
"708
[e ) -> 0 `i ]
[e $UE 27  ]
[; ;ff.c: 709: }
"709
[e :UE 27 ]
}
"713
[v _dbc_2nd `(i ~T0 @X0 1 sf1`uc ]
"714
{
[; ;ff.c: 713: static int dbc_2nd (BYTE c)
[; ;ff.c: 714: {
[e :U _dbc_2nd ]
"713
[v _c `uc ~T0 @X0 1 r1 ]
"714
[f ]
[; ;ff.c: 722: if (c >= DbcTbl[4]) {
"722
[e $ ! >= -> _c `i -> *U + &U _DbcTbl * -> -> -> 4 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i 32  ]
{
[; ;ff.c: 723: if (c <= DbcTbl[5]) return 1;
"723
[e $ ! <= -> _c `i -> *U + &U _DbcTbl * -> -> -> 5 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i 33  ]
[e ) -> 1 `i ]
[e $UE 31  ]
[e :U 33 ]
[; ;ff.c: 724: if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
"724
[e $ ! && >= -> _c `i -> *U + &U _DbcTbl * -> -> -> 6 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i <= -> _c `i -> *U + &U _DbcTbl * -> -> -> 7 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i 34  ]
[e ) -> 1 `i ]
[e $UE 31  ]
[e :U 34 ]
[; ;ff.c: 725: if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
"725
[e $ ! && >= -> _c `i -> *U + &U _DbcTbl * -> -> -> 8 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i <= -> _c `i -> *U + &U _DbcTbl * -> -> -> 9 `i `ui `ux -> -> # *U &U _DbcTbl `ui `ux `i 35  ]
[e ) -> 1 `i ]
[e $UE 31  ]
[e :U 35 ]
"726
}
[e :U 32 ]
[; ;ff.c: 726: }
[; ;ff.c: 730: return 0;
"730
[e ) -> 0 `i ]
[e $UE 31  ]
[; ;ff.c: 731: }
"731
[e :UE 31 ]
}
"1034
[v _sync_window `(E64 ~T0 @X0 1 sf1`*S1 ]
"1037
{
[; ;ff.c: 1034: static FRESULT sync_window (
[; ;ff.c: 1035: FATFS* fs
[; ;ff.c: 1036: )
[; ;ff.c: 1037: {
[e :U _sync_window ]
"1035
[v _fs `*S1 ~T0 @X0 1 r1 ]
"1037
[f ]
"1038
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 1038: FRESULT res = FR_OK;
[e = _res . `E64 0 ]
[; ;ff.c: 1041: if (fs->wflag) {
"1041
[e $ ! != -> . *U _fs 3 `i -> -> -> 0 `i `uc `i 37  ]
{
[; ;ff.c: 1042: if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {
"1042
[e $ ! == -> ( _disk_write (4 , , , . *U _fs 1 -> &U . *U _fs 17 `*Cuc . *U _fs 16 -> -> 1 `i `ui `i -> . `E203 0 `i 38  ]
{
[; ;ff.c: 1043: fs->wflag = 0;
"1043
[e = . *U _fs 3 -> -> 0 `i `uc ]
[; ;ff.c: 1044: if (fs->winsect - fs->fatbase < fs->fsize) {
"1044
[e $ ! < - . *U _fs 16 . *U _fs 13 . *U _fs 11 39  ]
{
[; ;ff.c: 1045: if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);
"1045
[e $ ! == -> . *U _fs 2 `i -> 2 `i 40  ]
[e ( _disk_write (4 , , , . *U _fs 1 -> &U . *U _fs 17 `*Cuc + . *U _fs 16 . *U _fs 11 -> -> 1 `i `ui ]
[e :U 40 ]
"1046
}
[e :U 39 ]
"1047
}
[; ;ff.c: 1046: }
[; ;ff.c: 1047: } else {
[e $U 41  ]
[e :U 38 ]
{
[; ;ff.c: 1048: res = FR_DISK_ERR;
"1048
[e = _res . `E64 1 ]
"1049
}
[e :U 41 ]
"1050
}
[e :U 37 ]
[; ;ff.c: 1049: }
[; ;ff.c: 1050: }
[; ;ff.c: 1051: return res;
"1051
[e ) _res ]
[e $UE 36  ]
[; ;ff.c: 1052: }
"1052
[e :UE 36 ]
}
"1056
[v _move_window `(E64 ~T0 @X0 1 sf2`*S1`ul ]
"1060
{
[; ;ff.c: 1056: static FRESULT move_window (
[; ;ff.c: 1057: FATFS* fs,
[; ;ff.c: 1058: DWORD sector
[; ;ff.c: 1059: )
[; ;ff.c: 1060: {
[e :U _move_window ]
"1057
[v _fs `*S1 ~T0 @X0 1 r1 ]
"1058
[v _sector `ul ~T0 @X0 1 r2 ]
"1060
[f ]
"1061
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 1061: FRESULT res = FR_OK;
[e = _res . `E64 0 ]
[; ;ff.c: 1064: if (sector != fs->winsect) {
"1064
[e $ ! != _sector . *U _fs 16 43  ]
{
[; ;ff.c: 1066: res = sync_window(fs);
"1066
[e = _res ( _sync_window (1 _fs ]
[; ;ff.c: 1068: if (res == FR_OK) {
"1068
[e $ ! == -> _res `i -> . `E64 0 `i 44  ]
{
[; ;ff.c: 1069: if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
"1069
[e $ ! != -> ( _disk_read (4 , , , . *U _fs 1 &U . *U _fs 17 _sector -> -> 1 `i `ui `i -> . `E203 0 `i 45  ]
{
[; ;ff.c: 1070: sector = 0xFFFFFFFF;
"1070
[e = _sector -> 4294967295 `ul ]
[; ;ff.c: 1071: res = FR_DISK_ERR;
"1071
[e = _res . `E64 1 ]
"1072
}
[e :U 45 ]
[; ;ff.c: 1072: }
[; ;ff.c: 1073: fs->winsect = sector;
"1073
[e = . *U _fs 16 _sector ]
"1074
}
[e :U 44 ]
"1075
}
[e :U 43 ]
[; ;ff.c: 1074: }
[; ;ff.c: 1075: }
[; ;ff.c: 1076: return res;
"1076
[e ) _res ]
[e $UE 42  ]
[; ;ff.c: 1077: }
"1077
[e :UE 42 ]
}
"1087
[v _sync_fs `(E64 ~T0 @X0 1 sf1`*S1 ]
"1090
{
[; ;ff.c: 1087: static FRESULT sync_fs (
[; ;ff.c: 1088: FATFS* fs
[; ;ff.c: 1089: )
[; ;ff.c: 1090: {
[e :U _sync_fs ]
"1088
[v _fs `*S1 ~T0 @X0 1 r1 ]
"1090
[f ]
"1091
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 1091: FRESULT res;
[; ;ff.c: 1094: res = sync_window(fs);
"1094
[e = _res ( _sync_window (1 _fs ]
[; ;ff.c: 1095: if (res == FR_OK) {
"1095
[e $ ! == -> _res `i -> . `E64 0 `i 47  ]
{
[; ;ff.c: 1096: if (fs->fs_type == 3 && fs->fsi_flag == 1) {
"1096
[e $ ! && == -> . *U _fs 0 `i -> 3 `i == -> . *U _fs 4 `i -> 1 `i 48  ]
{
[; ;ff.c: 1098: mem_set(fs->win, 0, ((UINT)512));
"1098
[e ( _mem_set (3 , , -> &U . *U _fs 17 `*v -> 0 `i -> -> 512 `i `ui ]
[; ;ff.c: 1099: st_word(fs->win + 510, 0xAA55);
"1099
[e ( _st_word (2 , + &U . *U _fs 17 * -> -> 510 `i `x -> -> # *U &U . *U _fs 17 `i `x -> -> 43605 `ui `us ]
[; ;ff.c: 1100: st_dword(fs->win + 0, 0x41615252);
"1100
[e ( _st_dword (2 , + &U . *U _fs 17 * -> -> 0 `i `x -> -> # *U &U . *U _fs 17 `i `x -> -> 1096897106 `l `ul ]
[; ;ff.c: 1101: st_dword(fs->win + 484, 0x61417272);
"1101
[e ( _st_dword (2 , + &U . *U _fs 17 * -> -> 484 `i `x -> -> # *U &U . *U _fs 17 `i `x -> -> 1631679090 `l `ul ]
[; ;ff.c: 1102: st_dword(fs->win + 488, fs->free_clst);
"1102
[e ( _st_dword (2 , + &U . *U _fs 17 * -> -> 488 `i `x -> -> # *U &U . *U _fs 17 `i `x . *U _fs 9 ]
[; ;ff.c: 1103: st_dword(fs->win + 492, fs->last_clst);
"1103
[e ( _st_dword (2 , + &U . *U _fs 17 * -> -> 492 `i `x -> -> # *U &U . *U _fs 17 `i `x . *U _fs 8 ]
[; ;ff.c: 1105: fs->winsect = fs->volbase + 1;
"1105
[e = . *U _fs 16 + . *U _fs 12 -> -> -> 1 `i `l `ul ]
[; ;ff.c: 1106: disk_write(fs->pdrv, fs->win, fs->winsect, 1);
"1106
[e ( _disk_write (4 , , , . *U _fs 1 -> &U . *U _fs 17 `*Cuc . *U _fs 16 -> -> 1 `i `ui ]
[; ;ff.c: 1107: fs->fsi_flag = 0;
"1107
[e = . *U _fs 4 -> -> 0 `i `uc ]
"1108
}
[e :U 48 ]
[; ;ff.c: 1108: }
[; ;ff.c: 1110: if (disk_ioctl(fs->pdrv, 0, 0) != RES_OK) res = FR_DISK_ERR;
"1110
[e $ ! != -> ( _disk_ioctl (3 , , . *U _fs 1 -> -> 0 `i `uc -> -> 0 `i `*v `i -> . `E203 0 `i 49  ]
[e = _res . `E64 1 ]
[e :U 49 ]
"1111
}
[e :U 47 ]
[; ;ff.c: 1111: }
[; ;ff.c: 1113: return res;
"1113
[e ) _res ]
[e $UE 46  ]
[; ;ff.c: 1114: }
"1114
[e :UE 46 ]
}
"1124
[v _clst2sect `(ul ~T0 @X0 1 sf2`*S1`ul ]
"1128
{
[; ;ff.c: 1124: static DWORD clst2sect (
[; ;ff.c: 1125: FATFS* fs,
[; ;ff.c: 1126: DWORD clst
[; ;ff.c: 1127: )
[; ;ff.c: 1128: {
[e :U _clst2sect ]
"1125
[v _fs `*S1 ~T0 @X0 1 r1 ]
"1126
[v _clst `ul ~T0 @X0 1 r2 ]
"1128
[f ]
[; ;ff.c: 1129: clst -= 2;
"1129
[e =- _clst -> -> -> 2 `i `l `ul ]
[; ;ff.c: 1130: if (clst >= fs->n_fatent - 2) return 0;
"1130
[e $ ! >= _clst - . *U _fs 10 -> -> -> 2 `i `l `ul 51  ]
[e ) -> -> -> 0 `i `l `ul ]
[e $UE 50  ]
[e :U 51 ]
[; ;ff.c: 1131: return fs->database + fs->csize * clst;
"1131
[e ) + . *U _fs 15 * -> . *U _fs 7 `ul _clst ]
[e $UE 50  ]
[; ;ff.c: 1132: }
"1132
[e :UE 50 ]
}
"1141
[v _get_fat `(ul ~T0 @X0 1 sf2`*S2`ul ]
"1145
{
[; ;ff.c: 1141: static DWORD get_fat (
[; ;ff.c: 1142: FFOBJID* obj,
[; ;ff.c: 1143: DWORD clst
[; ;ff.c: 1144: )
[; ;ff.c: 1145: {
[e :U _get_fat ]
"1142
[v _obj `*S2 ~T0 @X0 1 r1 ]
"1143
[v _clst `ul ~T0 @X0 1 r2 ]
"1145
[f ]
"1146
[v _wc `ui ~T0 @X0 1 a ]
[v _bc `ui ~T0 @X0 1 a ]
"1147
[v _val `ul ~T0 @X0 1 a ]
"1148
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 1146: UINT wc, bc;
[; ;ff.c: 1147: DWORD val;
[; ;ff.c: 1148: FATFS *fs = obj->fs;
[e = _fs . *U _obj 0 ]
[; ;ff.c: 1151: if (clst < 2 || clst >= fs->n_fatent) {
"1151
[e $ ! || < _clst -> -> -> 2 `i `l `ul >= _clst . *U _fs 10 53  ]
{
[; ;ff.c: 1152: val = 1;
"1152
[e = _val -> -> -> 1 `i `l `ul ]
"1154
}
[; ;ff.c: 1154: } else {
[e $U 54  ]
[e :U 53 ]
{
[; ;ff.c: 1155: val = 0xFFFFFFFF;
"1155
[e = _val -> 4294967295 `ul ]
[; ;ff.c: 1157: switch (fs->fs_type) {
"1157
[e $U 56  ]
{
[; ;ff.c: 1158: case 1 :
"1158
[e :U 57 ]
[; ;ff.c: 1159: bc = (UINT)clst; bc += bc / 2;
"1159
[e = _bc -> _clst `ui ]
[e =+ _bc / _bc -> -> 2 `i `ui ]
[; ;ff.c: 1160: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
"1160
[e $ ! != -> ( _move_window (2 , _fs + . *U _fs 13 -> / _bc -> -> 512 `i `ui `ul `i -> . `E64 0 `i 58  ]
[e $U 55  ]
[e :U 58 ]
[; ;ff.c: 1161: wc = fs->win[bc++ % ((UINT)512)];
"1161
[e = _wc -> *U + &U . *U _fs 17 * -> % ++ _bc -> -> 1 `i `ui -> -> 512 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `ui ]
[; ;ff.c: 1162: if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
"1162
[e $ ! != -> ( _move_window (2 , _fs + . *U _fs 13 -> / _bc -> -> 512 `i `ui `ul `i -> . `E64 0 `i 59  ]
[e $U 55  ]
[e :U 59 ]
[; ;ff.c: 1163: wc |= fs->win[bc % ((UINT)512)] << 8;
"1163
[e =| _wc -> << -> *U + &U . *U _fs 17 * -> % _bc -> -> 512 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `i -> 8 `i `ui ]
[; ;ff.c: 1164: val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
"1164
[e = _val -> ? != & _clst -> -> -> 1 `i `l `ul -> -> 0 `i `ul : >> _wc -> 4 `i & _wc -> -> 4095 `i `ui `ul ]
[; ;ff.c: 1165: break;
"1165
[e $U 55  ]
[; ;ff.c: 1167: case 2 :
"1167
[e :U 60 ]
[; ;ff.c: 1168: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) break;
"1168
[e $ ! != -> ( _move_window (2 , _fs + . *U _fs 13 / _clst -> / -> -> 512 `i `ui -> -> 2 `i `ui `ul `i -> . `E64 0 `i 61  ]
[e $U 55  ]
[e :U 61 ]
[; ;ff.c: 1169: val = ld_word(fs->win + clst * 2 % ((UINT)512));
"1169
[e = _val -> ( _ld_word (1 -> + &U . *U _fs 17 * -> % * _clst -> -> -> 2 `i `l `ul -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux `*Cuc `ul ]
[; ;ff.c: 1170: break;
"1170
[e $U 55  ]
[; ;ff.c: 1172: case 3 :
"1172
[e :U 62 ]
[; ;ff.c: 1173: if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) break;
"1173
[e $ ! != -> ( _move_window (2 , _fs + . *U _fs 13 / _clst -> / -> -> 512 `i `ui -> -> 4 `i `ui `ul `i -> . `E64 0 `i 63  ]
[e $U 55  ]
[e :U 63 ]
[; ;ff.c: 1174: val = ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0x0FFFFFFF;
"1174
[e = _val & ( _ld_dword (1 -> + &U . *U _fs 17 * -> % * _clst -> -> -> 4 `i `l `ul -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux `*Cuc -> -> 268435455 `l `ul ]
[; ;ff.c: 1175: break;
"1175
[e $U 55  ]
[; ;ff.c: 1202: default:
"1202
[e :U 64 ]
[; ;ff.c: 1203: val = 1;
"1203
[e = _val -> -> -> 1 `i `l `ul ]
"1204
}
[; ;ff.c: 1204: }
[e $U 55  ]
"1157
[e :U 56 ]
[e [\ . *U _fs 0 , $ -> -> 1 `i `uc 57
 , $ -> -> 2 `i `uc 60
 , $ -> -> 3 `i `uc 62
 64 ]
"1204
[e :U 55 ]
"1205
}
[e :U 54 ]
[; ;ff.c: 1205: }
[; ;ff.c: 1207: return val;
"1207
[e ) _val ]
[e $UE 52  ]
[; ;ff.c: 1208: }
"1208
[e :UE 52 ]
}
"1218
[v _put_fat `(E64 ~T0 @X0 1 sf3`*S1`ul`ul ]
"1223
{
[; ;ff.c: 1218: static FRESULT put_fat (
[; ;ff.c: 1219: FATFS* fs,
[; ;ff.c: 1220: DWORD clst,
[; ;ff.c: 1221: DWORD val
[; ;ff.c: 1222: )
[; ;ff.c: 1223: {
[e :U _put_fat ]
"1219
[v _fs `*S1 ~T0 @X0 1 r1 ]
"1220
[v _clst `ul ~T0 @X0 1 r2 ]
"1221
[v _val `ul ~T0 @X0 1 r3 ]
"1223
[f ]
"1224
[v _bc `ui ~T0 @X0 1 a ]
"1225
[v _p `*uc ~T0 @X0 1 a ]
"1226
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 1224: UINT bc;
[; ;ff.c: 1225: BYTE *p;
[; ;ff.c: 1226: FRESULT res = FR_INT_ERR;
[e = _res . `E64 2 ]
[; ;ff.c: 1229: if (clst >= 2 && clst < fs->n_fatent) {
"1229
[e $ ! && >= _clst -> -> -> 2 `i `l `ul < _clst . *U _fs 10 66  ]
{
[; ;ff.c: 1230: switch (fs->fs_type) {
"1230
[e $U 68  ]
{
[; ;ff.c: 1231: case 1 :
"1231
[e :U 69 ]
[; ;ff.c: 1232: bc = (UINT)clst; bc += bc / 2;
"1232
[e = _bc -> _clst `ui ]
[e =+ _bc / _bc -> -> 2 `i `ui ]
[; ;ff.c: 1233: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
"1233
[e = _res ( _move_window (2 , _fs + . *U _fs 13 -> / _bc -> -> 512 `i `ui `ul ]
[; ;ff.c: 1234: if (res != FR_OK) break;
"1234
[e $ ! != -> _res `i -> . `E64 0 `i 70  ]
[e $U 67  ]
[e :U 70 ]
[; ;ff.c: 1235: p = fs->win + bc++ % ((UINT)512);
"1235
[e = _p + &U . *U _fs 17 * -> % ++ _bc -> -> 1 `i `ui -> -> 512 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 1236: *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
"1236
[e = *U _p -> ? != & _clst -> -> -> 1 `i `l `ul -> -> 0 `i `ul : | & -> *U _p `i -> 15 `i << -> -> _val `uc `i -> 4 `i -> -> _val `uc `i `uc ]
[; ;ff.c: 1237: fs->wflag = 1;
"1237
[e = . *U _fs 3 -> -> 1 `i `uc ]
[; ;ff.c: 1238: res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
"1238
[e = _res ( _move_window (2 , _fs + . *U _fs 13 -> / _bc -> -> 512 `i `ui `ul ]
[; ;ff.c: 1239: if (res != FR_OK) break;
"1239
[e $ ! != -> _res `i -> . `E64 0 `i 71  ]
[e $U 67  ]
[e :U 71 ]
[; ;ff.c: 1240: p = fs->win + bc % ((UINT)512);
"1240
[e = _p + &U . *U _fs 17 * -> % _bc -> -> 512 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 1241: *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
"1241
[e = *U _p -> ? != & _clst -> -> -> 1 `i `l `ul -> -> 0 `i `ul : -> -> >> _val -> 4 `i `uc `i | & -> *U _p `i -> 240 `i & -> -> >> _val -> 8 `i `uc `i -> 15 `i `uc ]
[; ;ff.c: 1242: fs->wflag = 1;
"1242
[e = . *U _fs 3 -> -> 1 `i `uc ]
[; ;ff.c: 1243: break;
"1243
[e $U 67  ]
[; ;ff.c: 1245: case 2 :
"1245
[e :U 72 ]
[; ;ff.c: 1246: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
"1246
[e = _res ( _move_window (2 , _fs + . *U _fs 13 / _clst -> / -> -> 512 `i `ui -> -> 2 `i `ui `ul ]
[; ;ff.c: 1247: if (res != FR_OK) break;
"1247
[e $ ! != -> _res `i -> . `E64 0 `i 73  ]
[e $U 67  ]
[e :U 73 ]
[; ;ff.c: 1248: st_word(fs->win + clst * 2 % ((UINT)512), (WORD)val);
"1248
[e ( _st_word (2 , + &U . *U _fs 17 * -> % * _clst -> -> -> 2 `i `l `ul -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux -> _val `us ]
[; ;ff.c: 1249: fs->wflag = 1;
"1249
[e = . *U _fs 3 -> -> 1 `i `uc ]
[; ;ff.c: 1250: break;
"1250
[e $U 67  ]
[; ;ff.c: 1252: case 3 :
"1252
[e :U 74 ]
[; ;ff.c: 1256: res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
"1256
[e = _res ( _move_window (2 , _fs + . *U _fs 13 / _clst -> / -> -> 512 `i `ui -> -> 4 `i `ui `ul ]
[; ;ff.c: 1257: if (res != FR_OK) break;
"1257
[e $ ! != -> _res `i -> . `E64 0 `i 75  ]
[e $U 67  ]
[e :U 75 ]
[; ;ff.c: 1258: if (!0 || fs->fs_type != 4) {
"1258
[e $ ! || ! != -> 0 `i -> 0 `i != -> . *U _fs 0 `i -> 4 `i 76  ]
{
[; ;ff.c: 1259: val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % ((UINT)512)) & 0xF0000000);
"1259
[e = _val | & _val -> -> 268435455 `l `ul & ( _ld_dword (1 -> + &U . *U _fs 17 * -> % * _clst -> -> -> 4 `i `l `ul -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux `*Cuc -> 4026531840 `ul ]
"1260
}
[e :U 76 ]
[; ;ff.c: 1260: }
[; ;ff.c: 1261: st_dword(fs->win + clst * 4 % ((UINT)512), val);
"1261
[e ( _st_dword (2 , + &U . *U _fs 17 * -> % * _clst -> -> -> 4 `i `l `ul -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux _val ]
[; ;ff.c: 1262: fs->wflag = 1;
"1262
[e = . *U _fs 3 -> -> 1 `i `uc ]
[; ;ff.c: 1263: break;
"1263
[e $U 67  ]
"1264
}
[; ;ff.c: 1264: }
[e $U 67  ]
"1230
[e :U 68 ]
[e [\ . *U _fs 0 , $ -> -> 1 `i `uc 69
 , $ -> -> 2 `i `uc 72
 , $ -> -> 3 `i `uc 74
 67 ]
"1264
[e :U 67 ]
"1265
}
[e :U 66 ]
[; ;ff.c: 1265: }
[; ;ff.c: 1266: return res;
"1266
[e ) _res ]
[e $UE 65  ]
[; ;ff.c: 1267: }
"1267
[e :UE 65 ]
}
"1408
[v _remove_chain `(E64 ~T0 @X0 1 sf3`*S2`ul`ul ]
"1413
{
[; ;ff.c: 1408: static FRESULT remove_chain (
[; ;ff.c: 1409: FFOBJID* obj,
[; ;ff.c: 1410: DWORD clst,
[; ;ff.c: 1411: DWORD pclst
[; ;ff.c: 1412: )
[; ;ff.c: 1413: {
[e :U _remove_chain ]
"1409
[v _obj `*S2 ~T0 @X0 1 r1 ]
"1410
[v _clst `ul ~T0 @X0 1 r2 ]
"1411
[v _pclst `ul ~T0 @X0 1 r3 ]
"1413
[f ]
"1414
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 1414: FRESULT res = FR_OK;
[e = _res . `E64 0 ]
"1415
[v _nxt `ul ~T0 @X0 1 a ]
"1416
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 1415: DWORD nxt;
[; ;ff.c: 1416: FATFS *fs = obj->fs;
[e = _fs . *U _obj 0 ]
[; ;ff.c: 1424: if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
"1424
[e $ ! || < _clst -> -> -> 2 `i `l `ul >= _clst . *U _fs 10 78  ]
[e ) . `E64 2 ]
[e $UE 77  ]
[e :U 78 ]
[; ;ff.c: 1427: if (pclst != 0 && (!0 || fs->fs_type != 4 || obj->stat != 2)) {
"1427
[e $ ! && != _pclst -> -> -> 0 `i `l `ul || || ! != -> 0 `i -> 0 `i != -> . *U _fs 0 `i -> 4 `i != -> . *U _obj 3 `i -> 2 `i 79  ]
{
[; ;ff.c: 1428: res = put_fat(fs, pclst, 0xFFFFFFFF);
"1428
[e = _res ( _put_fat (3 , , _fs _pclst -> 4294967295 `ul ]
[; ;ff.c: 1429: if (res != FR_OK) return res;
"1429
[e $ ! != -> _res `i -> . `E64 0 `i 80  ]
[e ) _res ]
[e $UE 77  ]
[e :U 80 ]
"1430
}
[e :U 79 ]
[; ;ff.c: 1430: }
[; ;ff.c: 1433: do {
"1433
[e :U 83 ]
{
[; ;ff.c: 1434: nxt = get_fat(obj, clst);
"1434
[e = _nxt ( _get_fat (2 , _obj _clst ]
[; ;ff.c: 1435: if (nxt == 0) break;
"1435
[e $ ! == _nxt -> -> -> 0 `i `l `ul 84  ]
[e $U 82  ]
[e :U 84 ]
[; ;ff.c: 1436: if (nxt == 1) return FR_INT_ERR;
"1436
[e $ ! == _nxt -> -> -> 1 `i `l `ul 85  ]
[e ) . `E64 2 ]
[e $UE 77  ]
[e :U 85 ]
[; ;ff.c: 1437: if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
"1437
[e $ ! == _nxt -> 4294967295 `ul 86  ]
[e ) . `E64 1 ]
[e $UE 77  ]
[e :U 86 ]
[; ;ff.c: 1438: if (!0 || fs->fs_type != 4) {
"1438
[e $ ! || ! != -> 0 `i -> 0 `i != -> . *U _fs 0 `i -> 4 `i 87  ]
{
[; ;ff.c: 1439: res = put_fat(fs, clst, 0);
"1439
[e = _res ( _put_fat (3 , , _fs _clst -> -> -> 0 `i `l `ul ]
[; ;ff.c: 1440: if (res != FR_OK) return res;
"1440
[e $ ! != -> _res `i -> . `E64 0 `i 88  ]
[e ) _res ]
[e $UE 77  ]
[e :U 88 ]
"1441
}
[e :U 87 ]
[; ;ff.c: 1441: }
[; ;ff.c: 1442: if (fs->free_clst < fs->n_fatent - 2) {
"1442
[e $ ! < . *U _fs 9 - . *U _fs 10 -> -> -> 2 `i `l `ul 89  ]
{
[; ;ff.c: 1443: fs->free_clst++;
"1443
[e ++ . *U _fs 9 -> -> -> 1 `i `l `ul ]
[; ;ff.c: 1444: fs->fsi_flag |= 1;
"1444
[e =| . *U _fs 4 -> -> 1 `i `uc ]
"1445
}
[e :U 89 ]
[; ;ff.c: 1445: }
[; ;ff.c: 1464: clst = nxt;
"1464
[e = _clst _nxt ]
"1465
}
[; ;ff.c: 1465: } while (clst < fs->n_fatent);
[e $ < _clst . *U _fs 10 83  ]
[e :U 82 ]
[; ;ff.c: 1493: return FR_OK;
"1493
[e ) . `E64 0 ]
[e $UE 77  ]
[; ;ff.c: 1494: }
"1494
[e :UE 77 ]
}
"1503
[v _create_chain `(ul ~T0 @X0 1 sf2`*S2`ul ]
"1507
{
[; ;ff.c: 1503: static DWORD create_chain (
[; ;ff.c: 1504: FFOBJID* obj,
[; ;ff.c: 1505: DWORD clst
[; ;ff.c: 1506: )
[; ;ff.c: 1507: {
[e :U _create_chain ]
"1504
[v _obj `*S2 ~T0 @X0 1 r1 ]
"1505
[v _clst `ul ~T0 @X0 1 r2 ]
"1507
[f ]
"1508
[v _cs `ul ~T0 @X0 1 a ]
[v _ncl `ul ~T0 @X0 1 a ]
[v _scl `ul ~T0 @X0 1 a ]
"1509
[v _res `E64 ~T0 @X0 1 a ]
"1510
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 1508: DWORD cs, ncl, scl;
[; ;ff.c: 1509: FRESULT res;
[; ;ff.c: 1510: FATFS *fs = obj->fs;
[e = _fs . *U _obj 0 ]
[; ;ff.c: 1513: if (clst == 0) {
"1513
[e $ ! == _clst -> -> -> 0 `i `l `ul 91  ]
{
[; ;ff.c: 1514: scl = fs->last_clst;
"1514
[e = _scl . *U _fs 8 ]
[; ;ff.c: 1515: if (scl == 0 || scl >= fs->n_fatent) scl = 1;
"1515
[e $ ! || == _scl -> -> -> 0 `i `l `ul >= _scl . *U _fs 10 92  ]
[e = _scl -> -> -> 1 `i `l `ul ]
[e :U 92 ]
"1516
}
[; ;ff.c: 1516: }
[e $U 93  ]
"1517
[e :U 91 ]
[; ;ff.c: 1517: else {
{
[; ;ff.c: 1518: cs = get_fat(obj, clst);
"1518
[e = _cs ( _get_fat (2 , _obj _clst ]
[; ;ff.c: 1519: if (cs < 2) return 1;
"1519
[e $ ! < _cs -> -> -> 2 `i `l `ul 94  ]
[e ) -> -> -> 1 `i `l `ul ]
[e $UE 90  ]
[e :U 94 ]
[; ;ff.c: 1520: if (cs == 0xFFFFFFFF) return cs;
"1520
[e $ ! == _cs -> 4294967295 `ul 95  ]
[e ) _cs ]
[e $UE 90  ]
[e :U 95 ]
[; ;ff.c: 1521: if (cs < fs->n_fatent) return cs;
"1521
[e $ ! < _cs . *U _fs 10 96  ]
[e ) _cs ]
[e $UE 90  ]
[e :U 96 ]
[; ;ff.c: 1522: scl = clst;
"1522
[e = _scl _clst ]
"1523
}
[e :U 93 ]
[; ;ff.c: 1523: }
[; ;ff.c: 1524: if (fs->free_clst == 0) return 0;
"1524
[e $ ! == . *U _fs 9 -> -> -> 0 `i `l `ul 97  ]
[e ) -> -> -> 0 `i `l `ul ]
[e $UE 90  ]
[e :U 97 ]
[; ;ff.c: 1552: {
"1552
{
[; ;ff.c: 1553: ncl = 0;
"1553
[e = _ncl -> -> -> 0 `i `l `ul ]
[; ;ff.c: 1554: if (scl == clst) {
"1554
[e $ ! == _scl _clst 98  ]
{
[; ;ff.c: 1555: ncl = scl + 1;
"1555
[e = _ncl + _scl -> -> -> 1 `i `l `ul ]
[; ;ff.c: 1556: if (ncl >= fs->n_fatent) ncl = 2;
"1556
[e $ ! >= _ncl . *U _fs 10 99  ]
[e = _ncl -> -> -> 2 `i `l `ul ]
[e :U 99 ]
[; ;ff.c: 1557: cs = get_fat(obj, ncl);
"1557
[e = _cs ( _get_fat (2 , _obj _ncl ]
[; ;ff.c: 1558: if (cs == 1 || cs == 0xFFFFFFFF) return cs;
"1558
[e $ ! || == _cs -> -> -> 1 `i `l `ul == _cs -> 4294967295 `ul 100  ]
[e ) _cs ]
[e $UE 90  ]
[e :U 100 ]
[; ;ff.c: 1559: if (cs != 0) {
"1559
[e $ ! != _cs -> -> -> 0 `i `l `ul 101  ]
{
[; ;ff.c: 1560: cs = fs->last_clst;
"1560
[e = _cs . *U _fs 8 ]
[; ;ff.c: 1561: if (cs >= 2 && cs < fs->n_fatent) scl = cs;
"1561
[e $ ! && >= _cs -> -> -> 2 `i `l `ul < _cs . *U _fs 10 102  ]
[e = _scl _cs ]
[e :U 102 ]
[; ;ff.c: 1562: ncl = 0;
"1562
[e = _ncl -> -> -> 0 `i `l `ul ]
"1563
}
[e :U 101 ]
"1564
}
[e :U 98 ]
[; ;ff.c: 1563: }
[; ;ff.c: 1564: }
[; ;ff.c: 1565: if (ncl == 0) {
"1565
[e $ ! == _ncl -> -> -> 0 `i `l `ul 103  ]
{
[; ;ff.c: 1566: ncl = scl;
"1566
[e = _ncl _scl ]
[; ;ff.c: 1567: for (;;) {
"1567
{
[e :U 104 ]
{
[; ;ff.c: 1568: ncl++;
"1568
[e ++ _ncl -> -> -> 1 `i `l `ul ]
[; ;ff.c: 1569: if (ncl >= fs->n_fatent) {
"1569
[e $ ! >= _ncl . *U _fs 10 107  ]
{
[; ;ff.c: 1570: ncl = 2;
"1570
[e = _ncl -> -> -> 2 `i `l `ul ]
[; ;ff.c: 1571: if (ncl > scl) return 0;
"1571
[e $ ! > _ncl _scl 108  ]
[e ) -> -> -> 0 `i `l `ul ]
[e $UE 90  ]
[e :U 108 ]
"1572
}
[e :U 107 ]
[; ;ff.c: 1572: }
[; ;ff.c: 1573: cs = get_fat(obj, ncl);
"1573
[e = _cs ( _get_fat (2 , _obj _ncl ]
[; ;ff.c: 1574: if (cs == 0) break;
"1574
[e $ ! == _cs -> -> -> 0 `i `l `ul 109  ]
[e $U 105  ]
[e :U 109 ]
[; ;ff.c: 1575: if (cs == 1 || cs == 0xFFFFFFFF) return cs;
"1575
[e $ ! || == _cs -> -> -> 1 `i `l `ul == _cs -> 4294967295 `ul 110  ]
[e ) _cs ]
[e $UE 90  ]
[e :U 110 ]
[; ;ff.c: 1576: if (ncl == scl) return 0;
"1576
[e $ ! == _ncl _scl 111  ]
[e ) -> -> -> 0 `i `l `ul ]
[e $UE 90  ]
[e :U 111 ]
"1577
}
[; ;ff.c: 1577: }
[e $U 104  ]
[e :U 105 ]
}
"1578
}
[e :U 103 ]
[; ;ff.c: 1578: }
[; ;ff.c: 1579: res = put_fat(fs, ncl, 0xFFFFFFFF);
"1579
[e = _res ( _put_fat (3 , , _fs _ncl -> 4294967295 `ul ]
[; ;ff.c: 1580: if (res == FR_OK && clst != 0) {
"1580
[e $ ! && == -> _res `i -> . `E64 0 `i != _clst -> -> -> 0 `i `l `ul 112  ]
{
[; ;ff.c: 1581: res = put_fat(fs, clst, ncl);
"1581
[e = _res ( _put_fat (3 , , _fs _clst _ncl ]
"1582
}
[e :U 112 ]
"1583
}
[; ;ff.c: 1582: }
[; ;ff.c: 1583: }
[; ;ff.c: 1585: if (res == FR_OK) {
"1585
[e $ ! == -> _res `i -> . `E64 0 `i 113  ]
{
[; ;ff.c: 1586: fs->last_clst = ncl;
"1586
[e = . *U _fs 8 _ncl ]
[; ;ff.c: 1587: if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
"1587
[e $ ! <= . *U _fs 9 - . *U _fs 10 -> -> -> 2 `i `l `ul 114  ]
[e -- . *U _fs 9 -> -> -> 1 `i `l `ul ]
[e :U 114 ]
[; ;ff.c: 1588: fs->fsi_flag |= 1;
"1588
[e =| . *U _fs 4 -> -> 1 `i `uc ]
"1589
}
[; ;ff.c: 1589: } else {
[e $U 115  ]
[e :U 113 ]
{
[; ;ff.c: 1590: ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
"1590
[e = _ncl ? == -> _res `i -> . `E64 1 `i : -> 4294967295 `ul -> -> -> 1 `i `l `ul ]
"1591
}
[e :U 115 ]
[; ;ff.c: 1591: }
[; ;ff.c: 1593: return ncl;
"1593
[e ) _ncl ]
[e $UE 90  ]
[; ;ff.c: 1594: }
"1594
[e :UE 90 ]
}
"1636
[v _dir_clear `(E64 ~T0 @X0 1 sf2`*S1`ul ]
"1640
{
[; ;ff.c: 1636: static FRESULT dir_clear (
[; ;ff.c: 1637: FATFS *fs,
[; ;ff.c: 1638: DWORD clst
[; ;ff.c: 1639: )
[; ;ff.c: 1640: {
[e :U _dir_clear ]
"1637
[v _fs `*S1 ~T0 @X0 1 r1 ]
"1638
[v _clst `ul ~T0 @X0 1 r2 ]
"1640
[f ]
"1641
[v _sect `ul ~T0 @X0 1 a ]
"1642
[v _n `ui ~T0 @X0 1 a ]
[v _szb `ui ~T0 @X0 1 a ]
"1643
[v _ibuf `*uc ~T0 @X0 1 a ]
[; ;ff.c: 1641: DWORD sect;
[; ;ff.c: 1642: UINT n, szb;
[; ;ff.c: 1643: BYTE *ibuf;
[; ;ff.c: 1646: if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
"1646
[e $ ! != -> ( _sync_window (1 _fs `i -> . `E64 0 `i 117  ]
[e ) . `E64 1 ]
[e $UE 116  ]
[e :U 117 ]
[; ;ff.c: 1647: sect = clst2sect(fs, clst);
"1647
[e = _sect ( _clst2sect (2 , _fs _clst ]
[; ;ff.c: 1648: fs->winsect = sect;
"1648
[e = . *U _fs 16 _sect ]
[; ;ff.c: 1649: mem_set(fs->win, 0, ((UINT)512));
"1649
[e ( _mem_set (3 , , -> &U . *U _fs 17 `*v -> 0 `i -> -> 512 `i `ui ]
[; ;ff.c: 1660: {
"1660
{
[; ;ff.c: 1661: ibuf = fs->win; szb = 1;
"1661
[e = _ibuf &U . *U _fs 17 ]
[e = _szb -> -> 1 `i `ui ]
[; ;ff.c: 1662: for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
"1662
{
[e = _n -> -> 0 `i `ui ]
[e $U 121  ]
[e :U 118 ]
[e =+ _n _szb ]
[e :U 121 ]
[e $ && < _n -> . *U _fs 7 `ui == -> ( _disk_write (4 , , , . *U _fs 1 -> _ibuf `*Cuc + _sect -> _n `ul _szb `i -> . `E203 0 `i 118  ]
[e :U 119 ]
}
"1663
}
[; ;ff.c: 1663: }
[; ;ff.c: 1664: return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
"1664
[e ) -> ? == _n -> . *U _fs 7 `ui : -> . `E64 0 `i -> . `E64 1 `i `E64 ]
[e $UE 116  ]
[; ;ff.c: 1665: }
"1665
[e :UE 116 ]
}
"1675
[v _dir_sdi `(E64 ~T0 @X0 1 sf2`*S4`ul ]
"1679
{
[; ;ff.c: 1675: static FRESULT dir_sdi (
[; ;ff.c: 1676: FFDIR* dp,
[; ;ff.c: 1677: DWORD ofs
[; ;ff.c: 1678: )
[; ;ff.c: 1679: {
[e :U _dir_sdi ]
"1676
[v _dp `*S4 ~T0 @X0 1 r1 ]
"1677
[v _ofs `ul ~T0 @X0 1 r2 ]
"1679
[f ]
"1680
[v _csz `ul ~T0 @X0 1 a ]
[v _clst `ul ~T0 @X0 1 a ]
"1681
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 1680: DWORD csz, clst;
[; ;ff.c: 1681: FATFS *fs = dp->obj.fs;
[e = _fs . . *U _dp 0 0 ]
[; ;ff.c: 1684: if (ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000) || ofs % 32) {
"1684
[e $ ! || >= _ofs -> ? && != -> 0 `i -> 0 `i == -> . *U _fs 0 `i -> 4 `i : -> 268435456 `l -> 2097152 `l `ul != % _ofs -> -> -> 32 `i `l `ul -> -> 0 `i `ul 123  ]
{
[; ;ff.c: 1685: return FR_INT_ERR;
"1685
[e ) . `E64 2 ]
[e $UE 122  ]
"1686
}
[e :U 123 ]
[; ;ff.c: 1686: }
[; ;ff.c: 1687: dp->dptr = ofs;
"1687
[e = . *U _dp 1 _ofs ]
[; ;ff.c: 1688: clst = dp->obj.sclust;
"1688
[e = _clst . . *U _dp 0 4 ]
[; ;ff.c: 1689: if (clst == 0 && fs->fs_type >= 3) {
"1689
[e $ ! && == _clst -> -> -> 0 `i `l `ul >= -> . *U _fs 0 `i -> 3 `i 124  ]
{
[; ;ff.c: 1690: clst = fs->dirbase;
"1690
[e = _clst . *U _fs 14 ]
[; ;ff.c: 1691: if (0) dp->obj.stat = 0;
"1691
[e $ ! != -> 0 `i -> 0 `i 125  ]
[e = . . *U _dp 0 3 -> -> 0 `i `uc ]
[e :U 125 ]
"1692
}
[e :U 124 ]
[; ;ff.c: 1692: }
[; ;ff.c: 1694: if (clst == 0) {
"1694
[e $ ! == _clst -> -> -> 0 `i `l `ul 126  ]
{
[; ;ff.c: 1695: if (ofs / 32 >= fs->n_rootdir) return FR_INT_ERR;
"1695
[e $ ! >= / _ofs -> -> -> 32 `i `l `ul -> . *U _fs 6 `ul 127  ]
[e ) . `E64 2 ]
[e $UE 122  ]
[e :U 127 ]
[; ;ff.c: 1696: dp->sect = fs->dirbase;
"1696
[e = . *U _dp 3 . *U _fs 14 ]
"1698
}
[; ;ff.c: 1698: } else {
[e $U 128  ]
[e :U 126 ]
{
[; ;ff.c: 1699: csz = (DWORD)fs->csize * ((UINT)512);
"1699
[e = _csz * -> . *U _fs 7 `ul -> -> -> 512 `i `ui `ul ]
[; ;ff.c: 1700: while (ofs >= csz) {
"1700
[e $U 129  ]
[e :U 130 ]
{
[; ;ff.c: 1701: clst = get_fat(&dp->obj, clst);
"1701
[e = _clst ( _get_fat (2 , &U . *U _dp 0 _clst ]
[; ;ff.c: 1702: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
"1702
[e $ ! == _clst -> 4294967295 `ul 132  ]
[e ) . `E64 1 ]
[e $UE 122  ]
[e :U 132 ]
[; ;ff.c: 1703: if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;
"1703
[e $ ! || < _clst -> -> -> 2 `i `l `ul >= _clst . *U _fs 10 133  ]
[e ) . `E64 2 ]
[e $UE 122  ]
[e :U 133 ]
[; ;ff.c: 1704: ofs -= csz;
"1704
[e =- _ofs _csz ]
"1705
}
[e :U 129 ]
"1700
[e $ >= _ofs _csz 130  ]
[e :U 131 ]
[; ;ff.c: 1705: }
[; ;ff.c: 1706: dp->sect = clst2sect(fs, clst);
"1706
[e = . *U _dp 3 ( _clst2sect (2 , _fs _clst ]
"1707
}
[e :U 128 ]
[; ;ff.c: 1707: }
[; ;ff.c: 1708: dp->clust = clst;
"1708
[e = . *U _dp 2 _clst ]
[; ;ff.c: 1709: if (dp->sect == 0) return FR_INT_ERR;
"1709
[e $ ! == . *U _dp 3 -> -> -> 0 `i `l `ul 134  ]
[e ) . `E64 2 ]
[e $UE 122  ]
[e :U 134 ]
[; ;ff.c: 1710: dp->sect += ofs / ((UINT)512);
"1710
[e =+ . *U _dp 3 / _ofs -> -> -> 512 `i `ui `ul ]
[; ;ff.c: 1711: dp->dir = fs->win + (ofs % ((UINT)512));
"1711
[e = . *U _dp 4 + &U . *U _fs 17 * -> % _ofs -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 1713: return FR_OK;
"1713
[e ) . `E64 0 ]
[e $UE 122  ]
[; ;ff.c: 1714: }
"1714
[e :UE 122 ]
}
"1723
[v _dir_next `(E64 ~T0 @X0 1 sf2`*S4`i ]
"1727
{
[; ;ff.c: 1723: static FRESULT dir_next (
[; ;ff.c: 1724: FFDIR* dp,
[; ;ff.c: 1725: int stretch
[; ;ff.c: 1726: )
[; ;ff.c: 1727: {
[e :U _dir_next ]
"1724
[v _dp `*S4 ~T0 @X0 1 r1 ]
"1725
[v _stretch `i ~T0 @X0 1 r2 ]
"1727
[f ]
"1728
[v _ofs `ul ~T0 @X0 1 a ]
[v _clst `ul ~T0 @X0 1 a ]
"1729
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 1728: DWORD ofs, clst;
[; ;ff.c: 1729: FATFS *fs = dp->obj.fs;
[e = _fs . . *U _dp 0 0 ]
[; ;ff.c: 1732: ofs = dp->dptr + 32;
"1732
[e = _ofs + . *U _dp 1 -> -> -> 32 `i `l `ul ]
[; ;ff.c: 1733: if (dp->sect == 0 || ofs >= (DWORD)((0 && fs->fs_type == 4) ? 0x10000000 : 0x200000)) return FR_NO_FILE;
"1733
[e $ ! || == . *U _dp 3 -> -> -> 0 `i `l `ul >= _ofs -> ? && != -> 0 `i -> 0 `i == -> . *U _fs 0 `i -> 4 `i : -> 268435456 `l -> 2097152 `l `ul 136  ]
[e ) . `E64 4 ]
[e $UE 135  ]
[e :U 136 ]
[; ;ff.c: 1735: if (ofs % ((UINT)512) == 0) {
"1735
[e $ ! == % _ofs -> -> -> 512 `i `ui `ul -> -> -> 0 `i `l `ul 137  ]
{
[; ;ff.c: 1736: dp->sect++;
"1736
[e ++ . *U _dp 3 -> -> -> 1 `i `l `ul ]
[; ;ff.c: 1738: if (dp->clust == 0) {
"1738
[e $ ! == . *U _dp 2 -> -> -> 0 `i `l `ul 138  ]
{
[; ;ff.c: 1739: if (ofs / 32 >= fs->n_rootdir) {
"1739
[e $ ! >= / _ofs -> -> -> 32 `i `l `ul -> . *U _fs 6 `ul 139  ]
{
[; ;ff.c: 1740: dp->sect = 0; return FR_NO_FILE;
"1740
[e = . *U _dp 3 -> -> -> 0 `i `l `ul ]
[e ) . `E64 4 ]
[e $UE 135  ]
"1741
}
[e :U 139 ]
"1742
}
[; ;ff.c: 1741: }
[; ;ff.c: 1742: }
[e $U 140  ]
"1743
[e :U 138 ]
[; ;ff.c: 1743: else {
{
[; ;ff.c: 1744: if ((ofs / ((UINT)512) & (fs->csize - 1)) == 0) {
"1744
[e $ ! == & / _ofs -> -> -> 512 `i `ui `ul -> - -> . *U _fs 7 `ui -> -> 1 `i `ui `ul -> -> -> 0 `i `l `ul 141  ]
{
[; ;ff.c: 1745: clst = get_fat(&dp->obj, dp->clust);
"1745
[e = _clst ( _get_fat (2 , &U . *U _dp 0 . *U _dp 2 ]
[; ;ff.c: 1746: if (clst <= 1) return FR_INT_ERR;
"1746
[e $ ! <= _clst -> -> -> 1 `i `l `ul 142  ]
[e ) . `E64 2 ]
[e $UE 135  ]
[e :U 142 ]
[; ;ff.c: 1747: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
"1747
[e $ ! == _clst -> 4294967295 `ul 143  ]
[e ) . `E64 1 ]
[e $UE 135  ]
[e :U 143 ]
[; ;ff.c: 1748: if (clst >= fs->n_fatent) {
"1748
[e $ ! >= _clst . *U _fs 10 144  ]
{
[; ;ff.c: 1750: if (!stretch) {
"1750
[e $ ! ! != _stretch -> 0 `i 145  ]
{
[; ;ff.c: 1751: dp->sect = 0; return FR_NO_FILE;
"1751
[e = . *U _dp 3 -> -> -> 0 `i `l `ul ]
[e ) . `E64 4 ]
[e $UE 135  ]
"1752
}
[e :U 145 ]
[; ;ff.c: 1752: }
[; ;ff.c: 1753: clst = create_chain(&dp->obj, dp->clust);
"1753
[e = _clst ( _create_chain (2 , &U . *U _dp 0 . *U _dp 2 ]
[; ;ff.c: 1754: if (clst == 0) return FR_DENIED;
"1754
[e $ ! == _clst -> -> -> 0 `i `l `ul 146  ]
[e ) . `E64 7 ]
[e $UE 135  ]
[e :U 146 ]
[; ;ff.c: 1755: if (clst == 1) return FR_INT_ERR;
"1755
[e $ ! == _clst -> -> -> 1 `i `l `ul 147  ]
[e ) . `E64 2 ]
[e $UE 135  ]
[e :U 147 ]
[; ;ff.c: 1756: if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
"1756
[e $ ! == _clst -> 4294967295 `ul 148  ]
[e ) . `E64 1 ]
[e $UE 135  ]
[e :U 148 ]
[; ;ff.c: 1757: if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;
"1757
[e $ ! != -> ( _dir_clear (2 , _fs _clst `i -> . `E64 0 `i 149  ]
[e ) . `E64 1 ]
[e $UE 135  ]
[e :U 149 ]
[; ;ff.c: 1758: if (0) dp->obj.stat |= 4;
"1758
[e $ ! != -> 0 `i -> 0 `i 150  ]
[e =| . . *U _dp 0 3 -> -> 4 `i `uc ]
[e :U 150 ]
"1763
}
[e :U 144 ]
[; ;ff.c: 1763: }
[; ;ff.c: 1764: dp->clust = clst;
"1764
[e = . *U _dp 2 _clst ]
[; ;ff.c: 1765: dp->sect = clst2sect(fs, clst);
"1765
[e = . *U _dp 3 ( _clst2sect (2 , _fs _clst ]
"1766
}
[e :U 141 ]
"1767
}
[e :U 140 ]
"1768
}
[e :U 137 ]
[; ;ff.c: 1766: }
[; ;ff.c: 1767: }
[; ;ff.c: 1768: }
[; ;ff.c: 1769: dp->dptr = ofs;
"1769
[e = . *U _dp 1 _ofs ]
[; ;ff.c: 1770: dp->dir = fs->win + ofs % ((UINT)512);
"1770
[e = . *U _dp 4 + &U . *U _fs 17 * -> % _ofs -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 1772: return FR_OK;
"1772
[e ) . `E64 0 ]
[e $UE 135  ]
[; ;ff.c: 1773: }
"1773
[e :UE 135 ]
}
"1783
[v _dir_alloc `(E64 ~T0 @X0 1 sf2`*S4`ui ]
"1787
{
[; ;ff.c: 1783: static FRESULT dir_alloc (
[; ;ff.c: 1784: FFDIR* dp,
[; ;ff.c: 1785: UINT nent
[; ;ff.c: 1786: )
[; ;ff.c: 1787: {
[e :U _dir_alloc ]
"1784
[v _dp `*S4 ~T0 @X0 1 r1 ]
"1785
[v _nent `ui ~T0 @X0 1 r2 ]
"1787
[f ]
"1788
[v _res `E64 ~T0 @X0 1 a ]
"1789
[v _n `ui ~T0 @X0 1 a ]
"1790
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 1788: FRESULT res;
[; ;ff.c: 1789: UINT n;
[; ;ff.c: 1790: FATFS *fs = dp->obj.fs;
[e = _fs . . *U _dp 0 0 ]
[; ;ff.c: 1793: res = dir_sdi(dp, 0);
"1793
[e = _res ( _dir_sdi (2 , _dp -> -> -> 0 `i `l `ul ]
[; ;ff.c: 1794: if (res == FR_OK) {
"1794
[e $ ! == -> _res `i -> . `E64 0 `i 152  ]
{
[; ;ff.c: 1795: n = 0;
"1795
[e = _n -> -> 0 `i `ui ]
[; ;ff.c: 1796: do {
"1796
[e :U 155 ]
{
[; ;ff.c: 1797: res = move_window(fs, dp->sect);
"1797
[e = _res ( _move_window (2 , _fs . *U _dp 3 ]
[; ;ff.c: 1798: if (res != FR_OK) break;
"1798
[e $ ! != -> _res `i -> . `E64 0 `i 156  ]
[e $U 154  ]
[e :U 156 ]
[; ;ff.c: 1802: if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
"1802
[e $ ! || == -> *U + . *U _dp 4 * -> -> 0 `i `x -> -> # *U . *U _dp 4 `i `x `i -> 229 `i == -> *U + . *U _dp 4 * -> -> 0 `i `x -> -> # *U . *U _dp 4 `i `x `i -> 0 `i 157  ]
{
[; ;ff.c: 1804: if (++n == nent) break;
"1804
[e $ ! == =+ _n -> -> 1 `i `ui _nent 158  ]
[e $U 154  ]
[e :U 158 ]
"1805
}
[; ;ff.c: 1805: } else {
[e $U 159  ]
[e :U 157 ]
{
[; ;ff.c: 1806: n = 0;
"1806
[e = _n -> -> 0 `i `ui ]
"1807
}
[e :U 159 ]
[; ;ff.c: 1807: }
[; ;ff.c: 1808: res = dir_next(dp, 1);
"1808
[e = _res ( _dir_next (2 , _dp -> 1 `i ]
"1809
}
[; ;ff.c: 1809: } while (res == FR_OK);
[e $ == -> _res `i -> . `E64 0 `i 155  ]
[e :U 154 ]
"1810
}
[e :U 152 ]
[; ;ff.c: 1810: }
[; ;ff.c: 1812: if (res == FR_NO_FILE) res = FR_DENIED;
"1812
[e $ ! == -> _res `i -> . `E64 4 `i 160  ]
[e = _res . `E64 7 ]
[e :U 160 ]
[; ;ff.c: 1813: return res;
"1813
[e ) _res ]
[e $UE 151  ]
[; ;ff.c: 1814: }
"1814
[e :UE 151 ]
}
"1825
[v _ld_clust `(ul ~T0 @X0 1 sf2`*S1`*Cuc ]
"1829
{
[; ;ff.c: 1825: static DWORD ld_clust (
[; ;ff.c: 1826: FATFS* fs,
[; ;ff.c: 1827: const BYTE* dir
[; ;ff.c: 1828: )
[; ;ff.c: 1829: {
[e :U _ld_clust ]
"1826
[v _fs `*S1 ~T0 @X0 1 r1 ]
"1827
[v _dir `*Cuc ~T0 @X0 1 r2 ]
"1829
[f ]
"1830
[v _cl `ul ~T0 @X0 1 a ]
[; ;ff.c: 1830: DWORD cl;
[; ;ff.c: 1832: cl = ld_word(dir + 26);
"1832
[e = _cl -> ( _ld_word (1 + _dir * -> -> 26 `i `x -> -> # *U _dir `i `x `ul ]
[; ;ff.c: 1833: if (fs->fs_type == 3) {
"1833
[e $ ! == -> . *U _fs 0 `i -> 3 `i 162  ]
{
[; ;ff.c: 1834: cl |= (DWORD)ld_word(dir + 20) << 16;
"1834
[e =| _cl << -> ( _ld_word (1 + _dir * -> -> 20 `i `x -> -> # *U _dir `i `x `ul -> 16 `i ]
"1835
}
[e :U 162 ]
[; ;ff.c: 1835: }
[; ;ff.c: 1837: return cl;
"1837
[e ) _cl ]
[e $UE 161  ]
[; ;ff.c: 1838: }
"1838
[e :UE 161 ]
}
"1842
[v _st_clust `(v ~T0 @X0 1 sf3`*S1`*uc`ul ]
"1847
{
[; ;ff.c: 1842: static void st_clust (
[; ;ff.c: 1843: FATFS* fs,
[; ;ff.c: 1844: BYTE* dir,
[; ;ff.c: 1845: DWORD cl
[; ;ff.c: 1846: )
[; ;ff.c: 1847: {
[e :U _st_clust ]
"1843
[v _fs `*S1 ~T0 @X0 1 r1 ]
"1844
[v _dir `*uc ~T0 @X0 1 r2 ]
"1845
[v _cl `ul ~T0 @X0 1 r3 ]
"1847
[f ]
[; ;ff.c: 1848: st_word(dir + 26, (WORD)cl);
"1848
[e ( _st_word (2 , + _dir * -> -> 26 `i `x -> -> # *U _dir `i `x -> _cl `us ]
[; ;ff.c: 1849: if (fs->fs_type == 3) {
"1849
[e $ ! == -> . *U _fs 0 `i -> 3 `i 164  ]
{
[; ;ff.c: 1850: st_word(dir + 20, (WORD)(cl >> 16));
"1850
[e ( _st_word (2 , + _dir * -> -> 20 `i `x -> -> # *U _dir `i `x -> >> _cl -> 16 `i `us ]
"1851
}
[e :U 164 ]
[; ;ff.c: 1851: }
[; ;ff.c: 1852: }
"1852
[e :UE 163 ]
}
"2403
[v _dir_find `(E64 ~T0 @X0 1 sf1`*S4 ]
"2406
{
[; ;ff.c: 2403: static FRESULT dir_find (
[; ;ff.c: 2404: FFDIR* dp
[; ;ff.c: 2405: )
[; ;ff.c: 2406: {
[e :U _dir_find ]
"2404
[v _dp `*S4 ~T0 @X0 1 r1 ]
"2406
[f ]
"2407
[v _res `E64 ~T0 @X0 1 a ]
"2408
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 2407: FRESULT res;
[; ;ff.c: 2408: FATFS *fs = dp->obj.fs;
[e = _fs . . *U _dp 0 0 ]
"2409
[v _c `uc ~T0 @X0 1 a ]
[; ;ff.c: 2409: BYTE c;
[; ;ff.c: 2414: res = dir_sdi(dp, 0);
"2414
[e = _res ( _dir_sdi (2 , _dp -> -> -> 0 `i `l `ul ]
[; ;ff.c: 2415: if (res != FR_OK) return res;
"2415
[e $ ! != -> _res `i -> . `E64 0 `i 166  ]
[e ) _res ]
[e $UE 165  ]
[e :U 166 ]
[; ;ff.c: 2440: do {
"2440
[e :U 169 ]
{
[; ;ff.c: 2441: res = move_window(fs, dp->sect);
"2441
[e = _res ( _move_window (2 , _fs . *U _dp 3 ]
[; ;ff.c: 2442: if (res != FR_OK) break;
"2442
[e $ ! != -> _res `i -> . `E64 0 `i 170  ]
[e $U 168  ]
[e :U 170 ]
[; ;ff.c: 2443: c = dp->dir[0];
"2443
[e = _c *U + . *U _dp 4 * -> -> 0 `i `x -> -> # *U . *U _dp 4 `i `x ]
[; ;ff.c: 2444: if (c == 0) { res = FR_NO_FILE; break; }
"2444
[e $ ! == -> _c `i -> 0 `i 171  ]
{
[e = _res . `E64 4 ]
[e $U 168  ]
}
[e :U 171 ]
[; ;ff.c: 2467: dp->obj.attr = dp->dir[11] & 0x3F;
"2467
[e = . . *U _dp 0 2 -> & -> *U + . *U _dp 4 * -> -> 11 `i `x -> -> # *U . *U _dp 4 `i `x `i -> 63 `i `uc ]
[; ;ff.c: 2468: if (!(dp->dir[11] & 0x08) && !mem_cmp(dp->dir, dp->fn, 11)) break;
"2468
[e $ ! && ! != & -> *U + . *U _dp 4 * -> -> 11 `i `x -> -> # *U . *U _dp 4 `i `x `i -> 8 `i -> 0 `i ! != ( _mem_cmp (3 , , -> . *U _dp 4 `*Cv -> &U . *U _dp 5 `*Cv -> -> 11 `i `ui -> 0 `i 172  ]
[e $U 168  ]
[e :U 172 ]
[; ;ff.c: 2470: res = dir_next(dp, 0);
"2470
[e = _res ( _dir_next (2 , _dp -> 0 `i ]
"2471
}
[; ;ff.c: 2471: } while (res == FR_OK);
[e $ == -> _res `i -> . `E64 0 `i 169  ]
[e :U 168 ]
[; ;ff.c: 2473: return res;
"2473
[e ) _res ]
[e $UE 165  ]
[; ;ff.c: 2474: }
"2474
[e :UE 165 ]
}
"2484
[v _dir_register `(E64 ~T0 @X0 1 sf1`*S4 ]
"2487
{
[; ;ff.c: 2484: static FRESULT dir_register (
[; ;ff.c: 2485: FFDIR* dp
[; ;ff.c: 2486: )
[; ;ff.c: 2487: {
[e :U _dir_register ]
"2485
[v _dp `*S4 ~T0 @X0 1 r1 ]
"2487
[f ]
"2488
[v _res `E64 ~T0 @X0 1 a ]
"2489
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 2488: FRESULT res;
[; ;ff.c: 2489: FATFS *fs = dp->obj.fs;
[e = _fs . . *U _dp 0 0 ]
[; ;ff.c: 2561: res = dir_alloc(dp, 1);
"2561
[e = _res ( _dir_alloc (2 , _dp -> -> 1 `i `ui ]
[; ;ff.c: 2566: if (res == FR_OK) {
"2566
[e $ ! == -> _res `i -> . `E64 0 `i 174  ]
{
[; ;ff.c: 2567: res = move_window(fs, dp->sect);
"2567
[e = _res ( _move_window (2 , _fs . *U _dp 3 ]
[; ;ff.c: 2568: if (res == FR_OK) {
"2568
[e $ ! == -> _res `i -> . `E64 0 `i 175  ]
{
[; ;ff.c: 2569: mem_set(dp->dir, 0, 32);
"2569
[e ( _mem_set (3 , , -> . *U _dp 4 `*v -> 0 `i -> -> 32 `i `ui ]
[; ;ff.c: 2570: mem_cpy(dp->dir + 0, dp->fn, 11);
"2570
[e ( _mem_cpy (3 , , -> + . *U _dp 4 * -> -> 0 `i `x -> -> # *U . *U _dp 4 `i `x `*v -> &U . *U _dp 5 `*Cv -> -> 11 `i `ui ]
[; ;ff.c: 2574: fs->wflag = 1;
"2574
[e = . *U _fs 3 -> -> 1 `i `uc ]
"2575
}
[e :U 175 ]
"2576
}
[e :U 174 ]
[; ;ff.c: 2575: }
[; ;ff.c: 2576: }
[; ;ff.c: 2578: return res;
"2578
[e ) _res ]
[e $UE 173  ]
[; ;ff.c: 2579: }
"2579
[e :UE 173 ]
}
"2818
[v _create_name `(E64 ~T0 @X0 1 sf2`*S4`**Cuc ]
"2822
{
[; ;ff.c: 2818: static FRESULT create_name (
[; ;ff.c: 2819: FFDIR* dp,
[; ;ff.c: 2820: const TCHAR** path
[; ;ff.c: 2821: )
[; ;ff.c: 2822: {
[e :U _create_name ]
"2819
[v _dp `*S4 ~T0 @X0 1 r1 ]
"2820
[v _path `**Cuc ~T0 @X0 1 r2 ]
"2822
[f ]
"2945
[v _c `uc ~T0 @X0 1 a ]
[v _d `uc ~T0 @X0 1 a ]
[v _sfn `*uc ~T0 @X0 1 a ]
"2946
[v _ni `ui ~T0 @X0 1 a ]
[v _si `ui ~T0 @X0 1 a ]
[v _i `ui ~T0 @X0 1 a ]
"2947
[v _p `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 2945: BYTE c, d, *sfn;
[; ;ff.c: 2946: UINT ni, si, i;
[; ;ff.c: 2947: const char *p;
[; ;ff.c: 2950: p = *path; sfn = dp->fn;
"2950
[e = _p *U _path ]
[e = _sfn &U . *U _dp 5 ]
[; ;ff.c: 2951: mem_set(sfn, ' ', 11);
"2951
[e ( _mem_set (3 , , -> _sfn `*v -> -> 32 `ui `i -> -> 11 `i `ui ]
[; ;ff.c: 2952: si = i = 0; ni = 8;
"2952
[e = _si = _i -> -> 0 `i `ui ]
[e = _ni -> -> 8 `i `ui ]
[; ;ff.c: 2966: for (;;) {
"2966
{
[e :U 177 ]
{
[; ;ff.c: 2967: c = (BYTE)p[si++];
"2967
[e = _c *U + _p * -> ++ _si -> -> 1 `i `ui `ux -> -> # *U _p `ui `ux ]
[; ;ff.c: 2968: if (c <= ' ') break;
"2968
[e $ ! <= -> _c `ui -> 32 `ui 180  ]
[e $U 178  ]
[e :U 180 ]
[; ;ff.c: 2969: if (c == '/' || c == '\\') {
"2969
[e $ ! || == -> _c `ui -> 47 `ui == -> _c `ui -> 92 `ui 181  ]
{
[; ;ff.c: 2970: while (p[si] == '/' || p[si] == '\\') si++;
"2970
[e $U 182  ]
[e :U 183 ]
[e ++ _si -> -> 1 `i `ui ]
[e :U 182 ]
[e $ || == -> *U + _p * -> _si `ux -> -> # *U _p `ui `ux `ui -> 47 `ui == -> *U + _p * -> _si `ux -> -> # *U _p `ui `ux `ui -> 92 `ui 183  ]
[e :U 184 ]
[; ;ff.c: 2971: break;
"2971
[e $U 178  ]
"2972
}
[e :U 181 ]
[; ;ff.c: 2972: }
[; ;ff.c: 2973: if (c == '.' || i >= ni) {
"2973
[e $ ! || == -> _c `ui -> 46 `ui >= _i _ni 185  ]
{
[; ;ff.c: 2974: if (ni == 11 || c != '.') return FR_INVALID_NAME;
"2974
[e $ ! || == _ni -> -> 11 `i `ui != -> _c `ui -> 46 `ui 186  ]
[e ) . `E64 6 ]
[e $UE 176  ]
[e :U 186 ]
[; ;ff.c: 2975: i = 8; ni = 11;
"2975
[e = _i -> -> 8 `i `ui ]
[e = _ni -> -> 11 `i `ui ]
[; ;ff.c: 2976: continue;
"2976
[e $U 179  ]
"2977
}
[e :U 185 ]
[; ;ff.c: 2977: }
[; ;ff.c: 2987: if (dbc_1st(c)) {
"2987
[e $ ! != ( _dbc_1st (1 _c -> 0 `i 187  ]
{
[; ;ff.c: 2988: d = (BYTE)p[si++];
"2988
[e = _d *U + _p * -> ++ _si -> -> 1 `i `ui `ux -> -> # *U _p `ui `ux ]
[; ;ff.c: 2989: if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;
"2989
[e $ ! || ! != ( _dbc_2nd (1 _d -> 0 `i >= _i - _ni -> -> 1 `i `ui 188  ]
[e ) . `E64 6 ]
[e $UE 176  ]
[e :U 188 ]
[; ;ff.c: 2990: sfn[i++] = c;
"2990
[e = *U + _sfn * -> ++ _i -> -> 1 `i `ui `ux -> -> # *U _sfn `ui `ux _c ]
[; ;ff.c: 2991: sfn[i++] = d;
"2991
[e = *U + _sfn * -> ++ _i -> -> 1 `i `ui `ux -> -> # *U _sfn `ui `ux _d ]
"2992
}
[; ;ff.c: 2992: } else {
[e $U 189  ]
[e :U 187 ]
{
[; ;ff.c: 2993: if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;
"2993
[e $ ! != ( _chk_chr (2 , :s 1C -> _c `i -> 0 `i 190  ]
[e ) . `E64 6 ]
[e $UE 176  ]
[e :U 190 ]
[; ;ff.c: 2994: if (((c) >= 'a' && (c) <= 'z')) c -= 0x20;
"2994
[e $ ! && >= -> _c `ui -> 97 `ui <= -> _c `ui -> 122 `ui 191  ]
[e =- _c -> -> 32 `i `uc ]
[e :U 191 ]
[; ;ff.c: 2995: sfn[i++] = c;
"2995
[e = *U + _sfn * -> ++ _i -> -> 1 `i `ui `ux -> -> # *U _sfn `ui `ux _c ]
"2996
}
[e :U 189 ]
"2997
}
[e :U 179 ]
[; ;ff.c: 2996: }
[; ;ff.c: 2997: }
[e $U 177  ]
[e :U 178 ]
}
[; ;ff.c: 2998: *path = p + si;
"2998
[e = *U _path + _p * -> _si `ux -> -> # *U _p `ui `ux ]
[; ;ff.c: 2999: if (i == 0) return FR_INVALID_NAME;
"2999
[e $ ! == _i -> -> 0 `i `ui 192  ]
[e ) . `E64 6 ]
[e $UE 176  ]
[e :U 192 ]
[; ;ff.c: 3001: if (sfn[0] == 0xE5) sfn[0] = 0x05;
"3001
[e $ ! == -> *U + _sfn * -> -> 0 `i `x -> -> # *U _sfn `i `x `i -> 229 `i 193  ]
[e = *U + _sfn * -> -> 0 `i `x -> -> # *U _sfn `i `x -> -> 5 `i `uc ]
[e :U 193 ]
[; ;ff.c: 3002: sfn[11] = (c <= ' ') ? 0x04 : 0;
"3002
[e = *U + _sfn * -> -> 11 `i `x -> -> # *U _sfn `i `x -> ? <= -> _c `ui -> 32 `ui : -> 4 `i -> 0 `i `uc ]
[; ;ff.c: 3004: return FR_OK;
"3004
[e ) . `E64 0 ]
[e $UE 176  ]
[; ;ff.c: 3006: }
"3006
[e :UE 176 ]
}
"3015
[v _follow_path `(E64 ~T0 @X0 1 sf2`*S4`*Cuc ]
"3019
{
[; ;ff.c: 3015: static FRESULT follow_path (
[; ;ff.c: 3016: FFDIR* dp,
[; ;ff.c: 3017: const TCHAR* path
[; ;ff.c: 3018: )
[; ;ff.c: 3019: {
[e :U _follow_path ]
"3016
[v _dp `*S4 ~T0 @X0 1 r1 ]
"3017
[v _path `*Cuc ~T0 @X0 1 r2 ]
"3019
[f ]
"3020
[v _res `E64 ~T0 @X0 1 a ]
"3021
[v _ns `uc ~T0 @X0 1 a ]
"3022
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 3020: FRESULT res;
[; ;ff.c: 3021: BYTE ns;
[; ;ff.c: 3022: FATFS *fs = dp->obj.fs;
[e = _fs . . *U _dp 0 0 ]
[; ;ff.c: 3030: {
"3030
{
[; ;ff.c: 3031: while (*path == '/' || *path == '\\') path++;
"3031
[e $U 195  ]
[e :U 196 ]
[e ++ _path * -> -> 1 `i `x -> -> # *U _path `i `x ]
[e :U 195 ]
[e $ || == -> *U _path `ui -> 47 `ui == -> *U _path `ui -> 92 `ui 196  ]
[e :U 197 ]
[; ;ff.c: 3032: dp->obj.sclust = 0;
"3032
[e = . . *U _dp 0 4 -> -> -> 0 `i `l `ul ]
"3033
}
[; ;ff.c: 3033: }
[; ;ff.c: 3051: if ((UINT)*path < ' ') {
"3051
[e $ ! < -> *U _path `ui -> 32 `ui 198  ]
{
[; ;ff.c: 3052: dp->fn[11] = 0x80;
"3052
[e = *U + &U . *U _dp 5 * -> -> -> 11 `i `ui `ux -> -> # *U &U . *U _dp 5 `ui `ux -> -> 128 `i `uc ]
[; ;ff.c: 3053: res = dir_sdi(dp, 0);
"3053
[e = _res ( _dir_sdi (2 , _dp -> -> -> 0 `i `l `ul ]
"3055
}
[; ;ff.c: 3055: } else {
[e $U 199  ]
[e :U 198 ]
{
[; ;ff.c: 3056: for (;;) {
"3056
{
[e :U 200 ]
{
[; ;ff.c: 3057: res = create_name(dp, &path);
"3057
[e = _res ( _create_name (2 , _dp &U _path ]
[; ;ff.c: 3058: if (res != FR_OK) break;
"3058
[e $ ! != -> _res `i -> . `E64 0 `i 203  ]
[e $U 201  ]
[e :U 203 ]
[; ;ff.c: 3059: res = dir_find(dp);
"3059
[e = _res ( _dir_find (1 _dp ]
[; ;ff.c: 3060: ns = dp->fn[11];
"3060
[e = _ns *U + &U . *U _dp 5 * -> -> -> 11 `i `ui `ux -> -> # *U &U . *U _dp 5 `ui `ux ]
[; ;ff.c: 3061: if (res != FR_OK) {
"3061
[e $ ! != -> _res `i -> . `E64 0 `i 204  ]
{
[; ;ff.c: 3062: if (res == FR_NO_FILE) {
"3062
[e $ ! == -> _res `i -> . `E64 4 `i 205  ]
{
[; ;ff.c: 3063: if (0 && (ns & 0x20)) {
"3063
[e $ ! && != -> 0 `i -> 0 `i != & -> _ns `i -> 32 `i -> 0 `i 206  ]
{
[; ;ff.c: 3064: if (!(ns & 0x04)) continue;
"3064
[e $ ! ! != & -> _ns `i -> 4 `i -> 0 `i 207  ]
[e $U 202  ]
[e :U 207 ]
[; ;ff.c: 3065: dp->fn[11] = 0x80;
"3065
[e = *U + &U . *U _dp 5 * -> -> -> 11 `i `ui `ux -> -> # *U &U . *U _dp 5 `ui `ux -> -> 128 `i `uc ]
[; ;ff.c: 3066: res = FR_OK;
"3066
[e = _res . `E64 0 ]
"3067
}
[; ;ff.c: 3067: } else {
[e $U 208  ]
[e :U 206 ]
{
[; ;ff.c: 3068: if (!(ns & 0x04)) res = FR_NO_PATH;
"3068
[e $ ! ! != & -> _ns `i -> 4 `i -> 0 `i 209  ]
[e = _res . `E64 5 ]
[e :U 209 ]
"3069
}
[e :U 208 ]
"3070
}
[e :U 205 ]
[; ;ff.c: 3069: }
[; ;ff.c: 3070: }
[; ;ff.c: 3071: break;
"3071
[e $U 201  ]
"3072
}
[e :U 204 ]
[; ;ff.c: 3072: }
[; ;ff.c: 3073: if (ns & 0x04) break;
"3073
[e $ ! != & -> _ns `i -> 4 `i -> 0 `i 210  ]
[e $U 201  ]
[e :U 210 ]
[; ;ff.c: 3075: if (!(dp->obj.attr & 0x10)) {
"3075
[e $ ! ! != & -> . . *U _dp 0 2 `i -> 16 `i -> 0 `i 211  ]
{
[; ;ff.c: 3076: res = FR_NO_PATH; break;
"3076
[e = _res . `E64 5 ]
[e $U 201  ]
"3077
}
[e :U 211 ]
[; ;ff.c: 3077: }
[; ;ff.c: 3086: {
"3086
{
[; ;ff.c: 3087: dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % ((UINT)512));
"3087
[e = . . *U _dp 0 4 ( _ld_clust (2 , _fs -> + &U . *U _fs 17 * -> % . *U _dp 1 -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux `*Cuc ]
"3088
}
"3089
}
[e :U 202 ]
[; ;ff.c: 3088: }
[; ;ff.c: 3089: }
[e $U 200  ]
[e :U 201 ]
}
"3090
}
[e :U 199 ]
[; ;ff.c: 3090: }
[; ;ff.c: 3092: return res;
"3092
[e ) _res ]
[e $UE 194  ]
[; ;ff.c: 3093: }
"3093
[e :UE 194 ]
}
"3102
[v _get_ldnumber `(i ~T0 @X0 1 sf1`**Cuc ]
"3105
{
[; ;ff.c: 3102: static int get_ldnumber (
[; ;ff.c: 3103: const TCHAR** path
[; ;ff.c: 3104: )
[; ;ff.c: 3105: {
[e :U _get_ldnumber ]
"3103
[v _path `**Cuc ~T0 @X0 1 r1 ]
"3105
[f ]
"3106
[v _tp `*Cuc ~T0 @X0 1 a ]
[v _tt `*Cuc ~T0 @X0 1 a ]
"3107
[v _tc `uc ~T0 @X0 1 a ]
"3108
[v _i `i ~T0 @X0 1 a ]
[v _vol `i ~T0 @X0 1 a ]
[; ;ff.c: 3106: const TCHAR *tp, *tt;
[; ;ff.c: 3107: TCHAR tc;
[; ;ff.c: 3108: int i, vol = -1;
[e = _vol -U -> 1 `i ]
[; ;ff.c: 3114: tt = tp = *path;
"3114
[e = _tt = _tp *U _path ]
[; ;ff.c: 3115: if (!tp) return vol;
"3115
[e $ ! ! != _tp -> -> 0 `i `*Cuc 213  ]
[e ) _vol ]
[e $UE 212  ]
[e :U 213 ]
[; ;ff.c: 3116: do tc = *tt++; while ((UINT)tc >= (0 ? ' ' : '!') && tc != ':');
"3116
[e :U 216 ]
[e = _tc *U ++ _tt * -> -> 1 `i `x -> -> # *U _tt `i `x ]
[e $ && >= -> _tc `ui ? != -> 0 `i -> 0 `i : -> 32 `ui -> 33 `ui != -> _tc `ui -> 58 `ui 216  ]
[e :U 215 ]
[; ;ff.c: 3118: if (tc == ':') {
"3118
[e $ ! == -> _tc `ui -> 58 `ui 217  ]
{
[; ;ff.c: 3119: i = 1;
"3119
[e = _i -> 1 `i ]
[; ;ff.c: 3120: if (((*tp) >= '0' && (*tp) <= '9') && tp + 2 == tt) {
"3120
[e $ ! && && >= -> *U _tp `ui -> 48 `ui <= -> *U _tp `ui -> 57 `ui == + _tp * -> -> 2 `i `x -> -> # *U _tp `i `x _tt 218  ]
{
[; ;ff.c: 3121: i = (int)*tp - '0';
"3121
[e = _i -> - -> -> *U _tp `i `ui -> 48 `ui `i ]
"3122
}
[e :U 218 ]
[; ;ff.c: 3122: }
[; ;ff.c: 3136: if (i < 1) {
"3136
[e $ ! < _i -> 1 `i 219  ]
{
[; ;ff.c: 3137: vol = i;
"3137
[e = _vol _i ]
[; ;ff.c: 3138: *path = tt;
"3138
[e = *U _path _tt ]
"3139
}
[e :U 219 ]
[; ;ff.c: 3139: }
[; ;ff.c: 3140: return vol;
"3140
[e ) _vol ]
[e $UE 212  ]
"3141
}
[e :U 217 ]
[; ;ff.c: 3141: }
[; ;ff.c: 3164: vol = 0;
"3164
[e = _vol -> 0 `i ]
[; ;ff.c: 3166: return vol;
"3166
[e ) _vol ]
[e $UE 212  ]
[; ;ff.c: 3167: }
"3167
[e :UE 212 ]
}
"3176
[v _check_fs `(uc ~T0 @X0 1 sf2`*S1`ul ]
"3180
{
[; ;ff.c: 3176: static BYTE check_fs (
[; ;ff.c: 3177: FATFS* fs,
[; ;ff.c: 3178: DWORD sect
[; ;ff.c: 3179: )
[; ;ff.c: 3180: {
[e :U _check_fs ]
"3177
[v _fs `*S1 ~T0 @X0 1 r1 ]
"3178
[v _sect `ul ~T0 @X0 1 r2 ]
"3180
[f ]
[; ;ff.c: 3181: fs->wflag = 0; fs->winsect = 0xFFFFFFFF;
"3181
[e = . *U _fs 3 -> -> 0 `i `uc ]
[e = . *U _fs 16 -> 4294967295 `ul ]
[; ;ff.c: 3182: if (move_window(fs, sect) != FR_OK) return 4;
"3182
[e $ ! != -> ( _move_window (2 , _fs _sect `i -> . `E64 0 `i 221  ]
[e ) -> -> 4 `i `uc ]
[e $UE 220  ]
[e :U 221 ]
[; ;ff.c: 3184: if (ld_word(fs->win + 510) != 0xAA55) return 3;
"3184
[e $ ! != -> ( _ld_word (1 -> + &U . *U _fs 17 * -> -> 510 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc `ui -> 43605 `ui 222  ]
[e ) -> -> 3 `i `uc ]
[e $UE 220  ]
[e :U 222 ]
[; ;ff.c: 3189: if (fs->win[0] == 0xE9 || fs->win[0] == 0xEB || fs->win[0] == 0xE8) {
"3189
[e $ ! || || == -> *U + &U . *U _fs 17 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `i -> 233 `i == -> *U + &U . *U _fs 17 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `i -> 235 `i == -> *U + &U . *U _fs 17 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `i -> 232 `i 223  ]
{
[; ;ff.c: 3190: if (!mem_cmp(fs->win + 54, "FAT", 3)) return 0;
"3190
[e $ ! ! != ( _mem_cmp (3 , , -> + &U . *U _fs 17 * -> -> 54 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cv -> :s 2C `*Cv -> -> 3 `i `ui -> 0 `i 224  ]
[e ) -> -> 0 `i `uc ]
[e $UE 220  ]
[e :U 224 ]
[; ;ff.c: 3191: if (!mem_cmp(fs->win + 82, "FAT32", 5)) return 0;
"3191
[e $ ! ! != ( _mem_cmp (3 , , -> + &U . *U _fs 17 * -> -> 82 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cv -> :s 3C `*Cv -> -> 5 `i `ui -> 0 `i 225  ]
[e ) -> -> 0 `i `uc ]
[e $UE 220  ]
[e :U 225 ]
"3192
}
[e :U 223 ]
[; ;ff.c: 3192: }
[; ;ff.c: 3193: return 2;
"3193
[e ) -> -> 2 `i `uc ]
[e $UE 220  ]
[; ;ff.c: 3194: }
"3194
[e :UE 220 ]
}
"3203
[v _find_volume `(E64 ~T0 @X0 1 sf3`**Cuc`**S1`uc ]
"3208
{
[; ;ff.c: 3203: static FRESULT find_volume (
[; ;ff.c: 3204: const TCHAR** path,
[; ;ff.c: 3205: FATFS** rfs,
[; ;ff.c: 3206: BYTE mode
[; ;ff.c: 3207: )
[; ;ff.c: 3208: {
[e :U _find_volume ]
"3204
[v _path `**Cuc ~T0 @X0 1 r1 ]
"3205
[v _rfs `**S1 ~T0 @X0 1 r2 ]
"3206
[v _mode `uc ~T0 @X0 1 r3 ]
"3208
[f ]
"3209
[v _fmt `uc ~T0 @X0 1 a ]
[v _pt `*uc ~T0 @X0 1 a ]
"3210
[v _vol `i ~T0 @X0 1 a ]
"3211
[v _stat `uc ~T0 @X0 1 a ]
"3212
[v _bsect `ul ~T0 @X0 1 a ]
[v _fasize `ul ~T0 @X0 1 a ]
[v _tsect `ul ~T0 @X0 1 a ]
[v _sysect `ul ~T0 @X0 1 a ]
[v _nclst `ul ~T0 @X0 1 a ]
[v _szbfat `ul ~T0 @X0 1 a ]
[v _br `ul ~T0 @X0 -> 4 `i a ]
"3213
[v _nrsv `us ~T0 @X0 1 a ]
"3214
[v _fs `*S1 ~T0 @X0 1 a ]
"3215
[v _i `ui ~T0 @X0 1 a ]
[; ;ff.c: 3209: BYTE fmt, *pt;
[; ;ff.c: 3210: int vol;
[; ;ff.c: 3211: DSTATUS stat;
[; ;ff.c: 3212: DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
[; ;ff.c: 3213: WORD nrsv;
[; ;ff.c: 3214: FATFS *fs;
[; ;ff.c: 3215: UINT i;
[; ;ff.c: 3219: *rfs = 0;
"3219
[e = *U _rfs -> -> 0 `i `*S1 ]
[; ;ff.c: 3220: vol = get_ldnumber(path);
"3220
[e = _vol ( _get_ldnumber (1 _path ]
[; ;ff.c: 3221: if (vol < 0) return FR_INVALID_DRIVE;
"3221
[e $ ! < _vol -> 0 `i 227  ]
[e ) . `E64 11 ]
[e $UE 226  ]
[e :U 227 ]
[; ;ff.c: 3224: fs = FatFs[vol];
"3224
[e = _fs *U + &U _FatFs * -> -> _vol `ui `ux -> -> # *U &U _FatFs `ui `ux ]
[; ;ff.c: 3225: if (!fs) return FR_NOT_ENABLED;
"3225
[e $ ! ! != _fs -> -> 0 `i `*S1 228  ]
[e ) . `E64 12 ]
[e $UE 226  ]
[e :U 228 ]
[; ;ff.c: 3229: *rfs = fs;
"3229
[e = *U _rfs _fs ]
[; ;ff.c: 3231: mode &= (BYTE)~0x01;
"3231
[e =& _mode -> ~ -> 1 `i `uc ]
[; ;ff.c: 3232: if (fs->fs_type != 0) {
"3232
[e $ ! != -> . *U _fs 0 `i -> 0 `i 229  ]
{
[; ;ff.c: 3233: stat = disk_status(fs->pdrv);
"3233
[e = _stat ( _disk_status (1 . *U _fs 1 ]
[; ;ff.c: 3234: if (!(stat & 0x01)) {
"3234
[e $ ! ! != & -> _stat `i -> 1 `i -> 0 `i 230  ]
{
[; ;ff.c: 3235: if (!0 && mode && (stat & 0x04)) {
"3235
[e $ ! && && ! != -> 0 `i -> 0 `i != -> _mode `i -> -> -> 0 `i `uc `i != & -> _stat `i -> 4 `i -> 0 `i 231  ]
{
[; ;ff.c: 3236: return FR_WRITE_PROTECTED;
"3236
[e ) . `E64 10 ]
[e $UE 226  ]
"3237
}
[e :U 231 ]
[; ;ff.c: 3237: }
[; ;ff.c: 3238: return FR_OK;
"3238
[e ) . `E64 0 ]
[e $UE 226  ]
"3239
}
[e :U 230 ]
"3240
}
[e :U 229 ]
[; ;ff.c: 3239: }
[; ;ff.c: 3240: }
[; ;ff.c: 3245: fs->fs_type = 0;
"3245
[e = . *U _fs 0 -> -> 0 `i `uc ]
[; ;ff.c: 3246: fs->pdrv = (BYTE)(vol);
"3246
[e = . *U _fs 1 -> _vol `uc ]
[; ;ff.c: 3247: stat = disk_initialize(fs->pdrv);
"3247
[e = _stat ( _disk_initialize (1 . *U _fs 1 ]
[; ;ff.c: 3248: if (stat & 0x01) {
"3248
[e $ ! != & -> _stat `i -> 1 `i -> 0 `i 232  ]
{
[; ;ff.c: 3249: return FR_NOT_READY;
"3249
[e ) . `E64 3 ]
[e $UE 226  ]
"3250
}
[e :U 232 ]
[; ;ff.c: 3250: }
[; ;ff.c: 3251: if (!0 && mode && (stat & 0x04)) {
"3251
[e $ ! && && ! != -> 0 `i -> 0 `i != -> _mode `i -> -> -> 0 `i `uc `i != & -> _stat `i -> 4 `i -> 0 `i 233  ]
{
[; ;ff.c: 3252: return FR_WRITE_PROTECTED;
"3252
[e ) . `E64 10 ]
[e $UE 226  ]
"3253
}
[e :U 233 ]
[; ;ff.c: 3253: }
[; ;ff.c: 3260: bsect = 0;
"3260
[e = _bsect -> -> -> 0 `i `l `ul ]
[; ;ff.c: 3261: fmt = check_fs(fs, bsect);
"3261
[e = _fmt ( _check_fs (2 , _fs _bsect ]
[; ;ff.c: 3262: if (fmt == 2 || (fmt < 2 && 0 != 0)) {
"3262
[e $ ! || == -> _fmt `i -> 2 `i && < -> _fmt `i -> 2 `i != -> 0 `i -> 0 `i 234  ]
{
[; ;ff.c: 3263: for (i = 0; i < 4; i++) {
"3263
{
[e = _i -> -> 0 `i `ui ]
[e $ < _i -> -> 4 `i `ui 235  ]
[e $U 236  ]
[e :U 235 ]
{
[; ;ff.c: 3264: pt = fs->win + (446 + i * 16);
"3264
[e = _pt + &U . *U _fs 17 * -> + -> -> 446 `i `ui * _i -> -> 16 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 3265: br[i] = pt[4] ? ld_dword(pt + 8) : 0;
"3265
[e = *U + &U _br * -> _i `ux -> -> # *U &U _br `ui `ux ? != -> *U + _pt * -> -> 4 `i `x -> -> # *U _pt `i `x `i -> -> -> 0 `i `uc `i : ( _ld_dword (1 -> + _pt * -> -> 8 `i `x -> -> # *U _pt `i `x `*Cuc -> -> -> 0 `i `l `ul ]
"3266
}
"3263
[e ++ _i -> -> 1 `i `ui ]
[e $ < _i -> -> 4 `i `ui 235  ]
[e :U 236 ]
"3266
}
[; ;ff.c: 3266: }
[; ;ff.c: 3267: i = 0;
"3267
[e = _i -> -> 0 `i `ui ]
[; ;ff.c: 3268: if (i != 0) i--;
"3268
[e $ ! != _i -> -> 0 `i `ui 238  ]
[e -- _i -> -> 1 `i `ui ]
[e :U 238 ]
[; ;ff.c: 3269: do {
"3269
[e :U 241 ]
{
[; ;ff.c: 3270: bsect = br[i];
"3270
[e = _bsect *U + &U _br * -> _i `ux -> -> # *U &U _br `ui `ux ]
[; ;ff.c: 3271: fmt = bsect ? check_fs(fs, bsect) : 3;
"3271
[e = _fmt -> ? != _bsect -> -> 0 `i `ul : -> ( _check_fs (2 , _fs _bsect `i -> 3 `i `uc ]
"3272
}
[; ;ff.c: 3272: } while (0 == 0 && fmt >= 2 && ++i < 4);
[e $ && && == -> 0 `i -> 0 `i >= -> _fmt `i -> 2 `i < =+ _i -> -> 1 `i `ui -> -> 4 `i `ui 241  ]
[e :U 240 ]
"3273
}
[e :U 234 ]
[; ;ff.c: 3273: }
[; ;ff.c: 3274: if (fmt == 4) return FR_DISK_ERR;
"3274
[e $ ! == -> _fmt `i -> 4 `i 242  ]
[e ) . `E64 1 ]
[e $UE 226  ]
[e :U 242 ]
[; ;ff.c: 3275: if (fmt >= 2) return FR_NO_FILESYSTEM;
"3275
[e $ ! >= -> _fmt `i -> 2 `i 243  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 243 ]
[; ;ff.c: 3326: {
"3326
{
[; ;ff.c: 3327: if (ld_word(fs->win + 11) != ((UINT)512)) return FR_NO_FILESYSTEM;
"3327
[e $ ! != -> ( _ld_word (1 -> + &U . *U _fs 17 * -> -> 11 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc `ui -> -> 512 `i `ui 244  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 244 ]
[; ;ff.c: 3329: fasize = ld_word(fs->win + 22);
"3329
[e = _fasize -> ( _ld_word (1 -> + &U . *U _fs 17 * -> -> 22 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc `ul ]
[; ;ff.c: 3330: if (fasize == 0) fasize = ld_dword(fs->win + 36);
"3330
[e $ ! == _fasize -> -> -> 0 `i `l `ul 245  ]
[e = _fasize ( _ld_dword (1 -> + &U . *U _fs 17 * -> -> 36 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc ]
[e :U 245 ]
[; ;ff.c: 3331: fs->fsize = fasize;
"3331
[e = . *U _fs 11 _fasize ]
[; ;ff.c: 3333: fs->n_fats = fs->win[16];
"3333
[e = . *U _fs 2 *U + &U . *U _fs 17 * -> -> -> 16 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux ]
[; ;ff.c: 3334: if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;
"3334
[e $ ! && != -> . *U _fs 2 `i -> 1 `i != -> . *U _fs 2 `i -> 2 `i 246  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 246 ]
[; ;ff.c: 3335: fasize *= fs->n_fats;
"3335
[e =* _fasize -> . *U _fs 2 `ul ]
[; ;ff.c: 3337: fs->csize = fs->win[13];
"3337
[e = . *U _fs 7 -> *U + &U . *U _fs 17 * -> -> -> 13 `i `ui `ux -> -> # *U &U . *U _fs 17 `ui `ux `us ]
[; ;ff.c: 3338: if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;
"3338
[e $ ! || == -> . *U _fs 7 `ui -> -> 0 `i `ui != & -> . *U _fs 7 `ui - -> . *U _fs 7 `ui -> -> 1 `i `ui -> -> 0 `i `ui 247  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 247 ]
[; ;ff.c: 3340: fs->n_rootdir = ld_word(fs->win + 17);
"3340
[e = . *U _fs 6 ( _ld_word (1 -> + &U . *U _fs 17 * -> -> 17 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc ]
[; ;ff.c: 3341: if (fs->n_rootdir % (((UINT)512) / 32)) return FR_NO_FILESYSTEM;
"3341
[e $ ! != % -> . *U _fs 6 `ui / -> -> 512 `i `ui -> -> 32 `i `ui -> -> 0 `i `ui 248  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 248 ]
[; ;ff.c: 3343: tsect = ld_word(fs->win + 19);
"3343
[e = _tsect -> ( _ld_word (1 -> + &U . *U _fs 17 * -> -> 19 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc `ul ]
[; ;ff.c: 3344: if (tsect == 0) tsect = ld_dword(fs->win + 32);
"3344
[e $ ! == _tsect -> -> -> 0 `i `l `ul 249  ]
[e = _tsect ( _ld_dword (1 -> + &U . *U _fs 17 * -> -> 32 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc ]
[e :U 249 ]
[; ;ff.c: 3346: nrsv = ld_word(fs->win + 14);
"3346
[e = _nrsv ( _ld_word (1 -> + &U . *U _fs 17 * -> -> 14 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc ]
[; ;ff.c: 3347: if (nrsv == 0) return FR_NO_FILESYSTEM;
"3347
[e $ ! == -> _nrsv `ui -> -> 0 `i `ui 250  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 250 ]
[; ;ff.c: 3350: sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
"3350
[e = _sysect + + -> _nrsv `ul _fasize -> / -> . *U _fs 6 `ui / -> -> 512 `i `ui -> -> 32 `i `ui `ul ]
[; ;ff.c: 3351: if (tsect < sysect) return FR_NO_FILESYSTEM;
"3351
[e $ ! < _tsect _sysect 251  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 251 ]
[; ;ff.c: 3352: nclst = (tsect - sysect) / fs->csize;
"3352
[e = _nclst / - _tsect _sysect -> . *U _fs 7 `ul ]
[; ;ff.c: 3353: if (nclst == 0) return FR_NO_FILESYSTEM;
"3353
[e $ ! == _nclst -> -> -> 0 `i `l `ul 252  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 252 ]
[; ;ff.c: 3354: fmt = 0;
"3354
[e = _fmt -> -> 0 `i `uc ]
[; ;ff.c: 3355: if (nclst <= 0x0FFFFFF5) fmt = 3;
"3355
[e $ ! <= _nclst -> -> 268435445 `l `ul 253  ]
[e = _fmt -> -> 3 `i `uc ]
[e :U 253 ]
[; ;ff.c: 3356: if (nclst <= 0xFFF5) fmt = 2;
"3356
[e $ ! <= _nclst -> -> 65525 `ui `ul 254  ]
[e = _fmt -> -> 2 `i `uc ]
[e :U 254 ]
[; ;ff.c: 3357: if (nclst <= 0xFF5) fmt = 1;
"3357
[e $ ! <= _nclst -> -> -> 4085 `i `l `ul 255  ]
[e = _fmt -> -> 1 `i `uc ]
[e :U 255 ]
[; ;ff.c: 3358: if (fmt == 0) return FR_NO_FILESYSTEM;
"3358
[e $ ! == -> _fmt `i -> 0 `i 256  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 256 ]
[; ;ff.c: 3361: fs->n_fatent = nclst + 2;
"3361
[e = . *U _fs 10 + _nclst -> -> -> 2 `i `l `ul ]
[; ;ff.c: 3362: fs->volbase = bsect;
"3362
[e = . *U _fs 12 _bsect ]
[; ;ff.c: 3363: fs->fatbase = bsect + nrsv;
"3363
[e = . *U _fs 13 + _bsect -> _nrsv `ul ]
[; ;ff.c: 3364: fs->database = bsect + sysect;
"3364
[e = . *U _fs 15 + _bsect _sysect ]
[; ;ff.c: 3365: if (fmt == 3) {
"3365
[e $ ! == -> _fmt `i -> 3 `i 257  ]
{
[; ;ff.c: 3366: if (ld_word(fs->win + 42) != 0) return FR_NO_FILESYSTEM;
"3366
[e $ ! != -> ( _ld_word (1 -> + &U . *U _fs 17 * -> -> 42 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc `ui -> -> 0 `i `ui 258  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 258 ]
[; ;ff.c: 3367: if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;
"3367
[e $ ! != -> . *U _fs 6 `ui -> -> 0 `i `ui 259  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 259 ]
[; ;ff.c: 3368: fs->dirbase = ld_dword(fs->win + 44);
"3368
[e = . *U _fs 14 ( _ld_dword (1 -> + &U . *U _fs 17 * -> -> 44 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc ]
[; ;ff.c: 3369: szbfat = fs->n_fatent * 4;
"3369
[e = _szbfat * . *U _fs 10 -> -> -> 4 `i `l `ul ]
"3370
}
[; ;ff.c: 3370: } else {
[e $U 260  ]
[e :U 257 ]
{
[; ;ff.c: 3371: if (fs->n_rootdir == 0) return FR_NO_FILESYSTEM;
"3371
[e $ ! == -> . *U _fs 6 `ui -> -> 0 `i `ui 261  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 261 ]
[; ;ff.c: 3372: fs->dirbase = fs->fatbase + fasize;
"3372
[e = . *U _fs 14 + . *U _fs 13 _fasize ]
[; ;ff.c: 3373: szbfat = (fmt == 2) ?
[; ;ff.c: 3374: fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
"3374
[e = _szbfat ? == -> _fmt `i -> 2 `i : * . *U _fs 10 -> -> -> 2 `i `l `ul + / * . *U _fs 10 -> -> -> 3 `i `l `ul -> -> -> 2 `i `l `ul & . *U _fs 10 -> -> -> 1 `i `l `ul ]
"3375
}
[e :U 260 ]
[; ;ff.c: 3375: }
[; ;ff.c: 3376: if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512)) return FR_NO_FILESYSTEM;
"3376
[e $ ! < . *U _fs 11 / + _szbfat -> - -> -> 512 `i `ui -> -> 1 `i `ui `ul -> -> -> 512 `i `ui `ul 262  ]
[e ) . `E64 13 ]
[e $UE 226  ]
[e :U 262 ]
[; ;ff.c: 3380: fs->last_clst = fs->free_clst = 0xFFFFFFFF;
"3380
[e = . *U _fs 8 = . *U _fs 9 -> 4294967295 `ul ]
[; ;ff.c: 3381: fs->fsi_flag = 0x80;
"3381
[e = . *U _fs 4 -> -> 128 `i `uc ]
[; ;ff.c: 3383: if (fmt == 3
[; ;ff.c: 3384: && ld_word(fs->win + 48) == 1
[; ;ff.c: 3385: && move_window(fs, bsect + 1) == FR_OK)
"3385
[e $ ! && && == -> _fmt `i -> 3 `i == -> ( _ld_word (1 -> + &U . *U _fs 17 * -> -> 48 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc `ui -> -> 1 `i `ui == -> ( _move_window (2 , _fs + _bsect -> -> -> 1 `i `l `ul `i -> . `E64 0 `i 263  ]
[; ;ff.c: 3386: {
"3386
{
[; ;ff.c: 3387: fs->fsi_flag = 0;
"3387
[e = . *U _fs 4 -> -> 0 `i `uc ]
[; ;ff.c: 3388: if (ld_word(fs->win + 510) == 0xAA55
[; ;ff.c: 3389: && ld_dword(fs->win + 0) == 0x41615252
[; ;ff.c: 3390: && ld_dword(fs->win + 484) == 0x61417272)
"3390
[e $ ! && && == -> ( _ld_word (1 -> + &U . *U _fs 17 * -> -> 510 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc `ui -> 43605 `ui == ( _ld_dword (1 -> + &U . *U _fs 17 * -> -> 0 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc -> -> 1096897106 `l `ul == ( _ld_dword (1 -> + &U . *U _fs 17 * -> -> 484 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc -> -> 1631679090 `l `ul 264  ]
[; ;ff.c: 3391: {
"3391
{
[; ;ff.c: 3393: fs->free_clst = ld_dword(fs->win + 488);
"3393
[e = . *U _fs 9 ( _ld_dword (1 -> + &U . *U _fs 17 * -> -> 488 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc ]
[; ;ff.c: 3396: fs->last_clst = ld_dword(fs->win + 492);
"3396
[e = . *U _fs 8 ( _ld_dword (1 -> + &U . *U _fs 17 * -> -> 492 `i `x -> -> # *U &U . *U _fs 17 `i `x `*Cuc ]
"3398
}
[e :U 264 ]
"3399
}
[e :U 263 ]
"3402
}
[; ;ff.c: 3398: }
[; ;ff.c: 3399: }
[; ;ff.c: 3402: }
[; ;ff.c: 3404: fs->fs_type = fmt;
"3404
[e = . *U _fs 0 _fmt ]
[; ;ff.c: 3405: fs->id = ++Fsid;
"3405
[e = . *U _fs 5 =+ _Fsid -> -> 1 `i `us ]
[; ;ff.c: 3418: return FR_OK;
"3418
[e ) . `E64 0 ]
[e $UE 226  ]
[; ;ff.c: 3419: }
"3419
[e :UE 226 ]
}
"3428
[v _validate `(E64 ~T0 @X0 1 sf2`*S2`**S1 ]
"3432
{
[; ;ff.c: 3428: static FRESULT validate (
[; ;ff.c: 3429: FFOBJID* obj,
[; ;ff.c: 3430: FATFS** rfs
[; ;ff.c: 3431: )
[; ;ff.c: 3432: {
[e :U _validate ]
"3429
[v _obj `*S2 ~T0 @X0 1 r1 ]
"3430
[v _rfs `**S1 ~T0 @X0 1 r2 ]
"3432
[f ]
"3433
[v _res `E64 ~T0 @X0 1 a ]
[; ;ff.c: 3433: FRESULT res = FR_INVALID_OBJECT;
[e = _res . `E64 9 ]
[; ;ff.c: 3436: if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {
"3436
[e $ ! && && && != _obj -> -> 0 `i `*S2 != . *U _obj 0 -> -> 0 `i `*S1 != -> . *U . *U _obj 0 0 `i -> -> -> 0 `i `uc `i == -> . *U _obj 1 `ui -> . *U . *U _obj 0 5 `ui 266  ]
{
[; ;ff.c: 3448: if (!(disk_status(obj->fs->pdrv) & 0x01)) {
"3448
[e $ ! ! != & -> ( _disk_status (1 . *U . *U _obj 0 1 `i -> 1 `i -> 0 `i 267  ]
{
[; ;ff.c: 3449: res = FR_OK;
"3449
[e = _res . `E64 0 ]
"3450
}
[e :U 267 ]
"3452
}
[e :U 266 ]
[; ;ff.c: 3450: }
[; ;ff.c: 3452: }
[; ;ff.c: 3453: *rfs = (res == FR_OK) ? obj->fs : 0;
"3453
[e = *U _rfs ? == -> _res `i -> . `E64 0 `i : . *U _obj 0 -> -> 0 `i `*S1 ]
[; ;ff.c: 3454: return res;
"3454
[e ) _res ]
[e $UE 265  ]
[; ;ff.c: 3455: }
"3455
[e :UE 265 ]
}
"3472
[v _f_mount `(E64 ~T0 @X0 1 ef3`*S1`*Cuc`uc ]
"3477
{
[; ;ff.c: 3472: FRESULT f_mount (
[; ;ff.c: 3473: FATFS* fs,
[; ;ff.c: 3474: const TCHAR* path,
[; ;ff.c: 3475: BYTE opt
[; ;ff.c: 3476: )
[; ;ff.c: 3477: {
[e :U _f_mount ]
"3473
[v _fs `*S1 ~T0 @X0 1 r1 ]
"3474
[v _path `*Cuc ~T0 @X0 1 r2 ]
"3475
[v _opt `uc ~T0 @X0 1 r3 ]
"3477
[f ]
"3478
[v _cfs `*S1 ~T0 @X0 1 a ]
"3479
[v _vol `i ~T0 @X0 1 a ]
"3480
[v _res `E64 ~T0 @X0 1 a ]
"3481
[v _rp `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 3478: FATFS *cfs;
[; ;ff.c: 3479: int vol;
[; ;ff.c: 3480: FRESULT res;
[; ;ff.c: 3481: const TCHAR *rp = path;
[e = _rp _path ]
[; ;ff.c: 3485: vol = get_ldnumber(&rp);
"3485
[e = _vol ( _get_ldnumber (1 &U _rp ]
[; ;ff.c: 3486: if (vol < 0) return FR_INVALID_DRIVE;
"3486
[e $ ! < _vol -> 0 `i 269  ]
[e ) . `E64 11 ]
[e $UE 268  ]
[e :U 269 ]
[; ;ff.c: 3487: cfs = FatFs[vol];
"3487
[e = _cfs *U + &U _FatFs * -> -> _vol `ui `ux -> -> # *U &U _FatFs `ui `ux ]
[; ;ff.c: 3489: if (cfs) {
"3489
[e $ ! != _cfs -> -> 0 `i `*S1 270  ]
{
[; ;ff.c: 3496: cfs->fs_type = 0;
"3496
[e = . *U _cfs 0 -> -> 0 `i `uc ]
"3497
}
[e :U 270 ]
[; ;ff.c: 3497: }
[; ;ff.c: 3499: if (fs) {
"3499
[e $ ! != _fs -> -> 0 `i `*S1 271  ]
{
[; ;ff.c: 3500: fs->fs_type = 0;
"3500
[e = . *U _fs 0 -> -> 0 `i `uc ]
"3504
}
[e :U 271 ]
[; ;ff.c: 3504: }
[; ;ff.c: 3505: FatFs[vol] = fs;
"3505
[e = *U + &U _FatFs * -> -> _vol `ui `ux -> -> # *U &U _FatFs `ui `ux _fs ]
[; ;ff.c: 3507: if (opt == 0) return FR_OK;
"3507
[e $ ! == -> _opt `i -> 0 `i 272  ]
[e ) . `E64 0 ]
[e $UE 268  ]
[e :U 272 ]
[; ;ff.c: 3509: res = find_volume(&path, &fs, 0);
"3509
[e = _res ( _find_volume (3 , , &U _path &U _fs -> -> 0 `i `uc ]
[; ;ff.c: 3510: return res;
"3510
[e ) _res ]
[e $UE 268  ]
[; ;ff.c: 3511: }
"3511
[e :UE 268 ]
}
"3520
[v _f_open `(E64 ~T0 @X0 1 ef3`*S3`*Cuc`uc ]
"3525
{
[; ;ff.c: 3520: FRESULT f_open (
[; ;ff.c: 3521: FIL* fp,
[; ;ff.c: 3522: const TCHAR* path,
[; ;ff.c: 3523: BYTE mode
[; ;ff.c: 3524: )
[; ;ff.c: 3525: {
[e :U _f_open ]
"3521
[v _fp `*S3 ~T0 @X0 1 r1 ]
"3522
[v _path `*Cuc ~T0 @X0 1 r2 ]
"3523
[v _mode `uc ~T0 @X0 1 r3 ]
"3525
[f ]
"3526
[v _res `E64 ~T0 @X0 1 a ]
"3527
[v _dj `S4 ~T0 @X0 1 a ]
"3528
[v _fs `*S1 ~T0 @X0 1 a ]
"3530
[v _dw `ul ~T0 @X0 1 a ]
[v _cl `ul ~T0 @X0 1 a ]
[v _bcs `ul ~T0 @X0 1 a ]
[v _clst `ul ~T0 @X0 1 a ]
[v _sc `ul ~T0 @X0 1 a ]
"3531
[v _ofs `ul ~T0 @X0 1 a ]
[; ;ff.c: 3526: FRESULT res;
[; ;ff.c: 3527: FFDIR dj;
[; ;ff.c: 3528: FATFS *fs;
[; ;ff.c: 3530: DWORD dw, cl, bcs, clst, sc;
[; ;ff.c: 3531: FSIZE_t ofs;
[; ;ff.c: 3536: if (!fp) return FR_INVALID_OBJECT;
"3536
[e $ ! ! != _fp -> -> 0 `i `*S3 274  ]
[e ) . `E64 9 ]
[e $UE 273  ]
[e :U 274 ]
[; ;ff.c: 3539: mode &= 0 ? 0x01 : 0x01 | 0x02 | 0x08 | 0x04 | 0x10 | 0x30;
"3539
[e =& _mode -> ? != -> 0 `i -> 0 `i : -> 1 `i | | | | | -> 1 `i -> 2 `i -> 8 `i -> 4 `i -> 16 `i -> 48 `i `uc ]
[; ;ff.c: 3540: res = find_volume(&path, &fs, mode);
"3540
[e = _res ( _find_volume (3 , , &U _path &U _fs _mode ]
[; ;ff.c: 3541: if (res == FR_OK) {
"3541
[e $ ! == -> _res `i -> . `E64 0 `i 275  ]
{
[; ;ff.c: 3542: dj.obj.fs = fs;
"3542
[e = . . _dj 0 0 _fs ]
[; ;ff.c: 3543: ;
[; ;ff.c: 3544: res = follow_path(&dj, path);
"3544
[e = _res ( _follow_path (2 , &U _dj _path ]
[; ;ff.c: 3546: if (res == FR_OK) {
"3546
[e $ ! == -> _res `i -> . `E64 0 `i 276  ]
{
[; ;ff.c: 3547: if (dj.fn[11] & 0x80) {
"3547
[e $ ! != & -> *U + &U . _dj 5 * -> -> -> 11 `i `ui `ux -> -> # *U &U . _dj 5 `ui `ux `i -> 128 `i -> 0 `i 277  ]
{
[; ;ff.c: 3548: res = FR_INVALID_NAME;
"3548
[e = _res . `E64 6 ]
"3549
}
[e :U 277 ]
"3555
}
[e :U 276 ]
[; ;ff.c: 3549: }
[; ;ff.c: 3555: }
[; ;ff.c: 3557: if (mode & (0x08 | 0x10 | 0x04)) {
"3557
[e $ ! != & -> _mode `i | | -> 8 `i -> 16 `i -> 4 `i -> 0 `i 278  ]
{
[; ;ff.c: 3558: if (res != FR_OK) {
"3558
[e $ ! != -> _res `i -> . `E64 0 `i 279  ]
{
[; ;ff.c: 3559: if (res == FR_NO_FILE) {
"3559
[e $ ! == -> _res `i -> . `E64 4 `i 280  ]
{
[; ;ff.c: 3563: res = dir_register(&dj);
"3563
[e = _res ( _dir_register (1 &U _dj ]
"3565
}
[e :U 280 ]
[; ;ff.c: 3565: }
[; ;ff.c: 3566: mode |= 0x08;
"3566
[e =| _mode -> -> 8 `i `uc ]
"3567
}
[; ;ff.c: 3567: }
[e $U 281  ]
"3568
[e :U 279 ]
[; ;ff.c: 3568: else {
{
[; ;ff.c: 3569: if (dj.obj.attr & (0x01 | 0x10)) {
"3569
[e $ ! != & -> . . _dj 0 2 `i | -> 1 `i -> 16 `i -> 0 `i 282  ]
{
[; ;ff.c: 3570: res = FR_DENIED;
"3570
[e = _res . `E64 7 ]
"3571
}
[; ;ff.c: 3571: } else {
[e $U 283  ]
[e :U 282 ]
{
[; ;ff.c: 3572: if (mode & 0x04) res = FR_EXIST;
"3572
[e $ ! != & -> _mode `i -> 4 `i -> 0 `i 284  ]
[e = _res . `E64 8 ]
[e :U 284 ]
"3573
}
[e :U 283 ]
"3574
}
[e :U 281 ]
[; ;ff.c: 3573: }
[; ;ff.c: 3574: }
[; ;ff.c: 3575: if (res == FR_OK && (mode & 0x08)) {
"3575
[e $ ! && == -> _res `i -> . `E64 0 `i != & -> _mode `i -> 8 `i -> 0 `i 285  ]
{
[; ;ff.c: 3594: {
"3594
{
[; ;ff.c: 3596: cl = ld_clust(fs, dj.dir);
"3596
[e = _cl ( _ld_clust (2 , _fs -> . _dj 4 `*Cuc ]
[; ;ff.c: 3597: st_dword(dj.dir + 14, get_fattime());
"3597
[e ( _st_dword (2 , + . _dj 4 * -> -> 14 `i `x -> -> # *U . _dj 4 `i `x ( _get_fattime ..  ]
[; ;ff.c: 3598: dj.dir[11] = 0x20;
"3598
[e = *U + . _dj 4 * -> -> 11 `i `x -> -> # *U . _dj 4 `i `x -> -> 32 `i `uc ]
[; ;ff.c: 3599: st_clust(fs, dj.dir, 0);
"3599
[e ( _st_clust (3 , , _fs . _dj 4 -> -> -> 0 `i `l `ul ]
[; ;ff.c: 3600: st_dword(dj.dir + 28, 0);
"3600
[e ( _st_dword (2 , + . _dj 4 * -> -> 28 `i `x -> -> # *U . _dj 4 `i `x -> -> -> 0 `i `l `ul ]
[; ;ff.c: 3601: fs->wflag = 1;
"3601
[e = . *U _fs 3 -> -> 1 `i `uc ]
[; ;ff.c: 3602: if (cl != 0) {
"3602
[e $ ! != _cl -> -> -> 0 `i `l `ul 286  ]
{
[; ;ff.c: 3603: dw = fs->winsect;
"3603
[e = _dw . *U _fs 16 ]
[; ;ff.c: 3604: res = remove_chain(&dj.obj, cl, 0);
"3604
[e = _res ( _remove_chain (3 , , &U . _dj 0 _cl -> -> -> 0 `i `l `ul ]
[; ;ff.c: 3605: if (res == FR_OK) {
"3605
[e $ ! == -> _res `i -> . `E64 0 `i 287  ]
{
[; ;ff.c: 3606: res = move_window(fs, dw);
"3606
[e = _res ( _move_window (2 , _fs _dw ]
[; ;ff.c: 3607: fs->last_clst = cl - 1;
"3607
[e = . *U _fs 8 - _cl -> -> -> 1 `i `l `ul ]
"3608
}
[e :U 287 ]
"3609
}
[e :U 286 ]
"3610
}
"3611
}
[e :U 285 ]
"3612
}
[; ;ff.c: 3608: }
[; ;ff.c: 3609: }
[; ;ff.c: 3610: }
[; ;ff.c: 3611: }
[; ;ff.c: 3612: }
[e $U 288  ]
"3613
[e :U 278 ]
[; ;ff.c: 3613: else {
{
[; ;ff.c: 3614: if (res == FR_OK) {
"3614
[e $ ! == -> _res `i -> . `E64 0 `i 289  ]
{
[; ;ff.c: 3615: if (dj.obj.attr & 0x10) {
"3615
[e $ ! != & -> . . _dj 0 2 `i -> 16 `i -> 0 `i 290  ]
{
[; ;ff.c: 3616: res = FR_NO_FILE;
"3616
[e = _res . `E64 4 ]
"3617
}
[; ;ff.c: 3617: } else {
[e $U 291  ]
[e :U 290 ]
{
[; ;ff.c: 3618: if ((mode & 0x02) && (dj.obj.attr & 0x01)) {
"3618
[e $ ! && != & -> _mode `i -> 2 `i -> 0 `i != & -> . . _dj 0 2 `i -> 1 `i -> 0 `i 292  ]
{
[; ;ff.c: 3619: res = FR_DENIED;
"3619
[e = _res . `E64 7 ]
"3620
}
[e :U 292 ]
"3621
}
[e :U 291 ]
"3622
}
[e :U 289 ]
"3623
}
[e :U 288 ]
[; ;ff.c: 3620: }
[; ;ff.c: 3621: }
[; ;ff.c: 3622: }
[; ;ff.c: 3623: }
[; ;ff.c: 3624: if (res == FR_OK) {
"3624
[e $ ! == -> _res `i -> . `E64 0 `i 293  ]
{
[; ;ff.c: 3625: if (mode & 0x08) mode |= 0x40;
"3625
[e $ ! != & -> _mode `i -> 8 `i -> 0 `i 294  ]
[e =| _mode -> -> 64 `i `uc ]
[e :U 294 ]
[; ;ff.c: 3626: fp->dir_sect = fs->winsect;
"3626
[e = . *U _fp 6 . *U _fs 16 ]
[; ;ff.c: 3627: fp->dir_ptr = dj.dir;
"3627
[e = . *U _fp 7 . _dj 4 ]
"3632
}
[e :U 293 ]
[; ;ff.c: 3632: }
[; ;ff.c: 3645: if (res == FR_OK) {
"3645
[e $ ! == -> _res `i -> . `E64 0 `i 295  ]
{
[; ;ff.c: 3654: {
"3654
{
[; ;ff.c: 3655: fp->obj.sclust = ld_clust(fs, dj.dir);
"3655
[e = . . *U _fp 0 4 ( _ld_clust (2 , _fs -> . _dj 4 `*Cuc ]
[; ;ff.c: 3656: fp->obj.objsize = ld_dword(dj.dir + 28);
"3656
[e = . . *U _fp 0 5 ( _ld_dword (1 -> + . _dj 4 * -> -> 28 `i `x -> -> # *U . _dj 4 `i `x `*Cuc ]
"3657
}
[; ;ff.c: 3657: }
[; ;ff.c: 3661: fp->obj.fs = fs;
"3661
[e = . . *U _fp 0 0 _fs ]
[; ;ff.c: 3662: fp->obj.id = fs->id;
"3662
[e = . . *U _fp 0 1 . *U _fs 5 ]
[; ;ff.c: 3663: fp->flag = mode;
"3663
[e = . *U _fp 1 _mode ]
[; ;ff.c: 3664: fp->err = 0;
"3664
[e = . *U _fp 2 -> -> 0 `i `uc ]
[; ;ff.c: 3665: fp->sect = 0;
"3665
[e = . *U _fp 5 -> -> -> 0 `i `l `ul ]
[; ;ff.c: 3666: fp->fptr = 0;
"3666
[e = . *U _fp 3 -> -> -> 0 `i `l `ul ]
[; ;ff.c: 3671: if ((mode & 0x20) && fp->obj.objsize > 0) {
"3671
[e $ ! && != & -> _mode `i -> 32 `i -> 0 `i > . . *U _fp 0 5 -> -> -> 0 `i `l `ul 296  ]
{
[; ;ff.c: 3672: fp->fptr = fp->obj.objsize;
"3672
[e = . *U _fp 3 . . *U _fp 0 5 ]
[; ;ff.c: 3673: bcs = (DWORD)fs->csize * ((UINT)512);
"3673
[e = _bcs * -> . *U _fs 7 `ul -> -> -> 512 `i `ui `ul ]
[; ;ff.c: 3674: clst = fp->obj.sclust;
"3674
[e = _clst . . *U _fp 0 4 ]
[; ;ff.c: 3675: for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
"3675
{
[e = _ofs . . *U _fp 0 5 ]
[e $U 300  ]
[e :U 297 ]
{
[; ;ff.c: 3676: clst = get_fat(&fp->obj, clst);
"3676
[e = _clst ( _get_fat (2 , &U . *U _fp 0 _clst ]
[; ;ff.c: 3677: if (clst <= 1) res = FR_INT_ERR;
"3677
[e $ ! <= _clst -> -> -> 1 `i `l `ul 301  ]
[e = _res . `E64 2 ]
[e :U 301 ]
[; ;ff.c: 3678: if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
"3678
[e $ ! == _clst -> 4294967295 `ul 302  ]
[e = _res . `E64 1 ]
[e :U 302 ]
"3679
}
"3675
[e =- _ofs _bcs ]
[e :U 300 ]
[e $ && == -> _res `i -> . `E64 0 `i > _ofs _bcs 297  ]
[e :U 298 ]
"3679
}
[; ;ff.c: 3679: }
[; ;ff.c: 3680: fp->clust = clst;
"3680
[e = . *U _fp 4 _clst ]
[; ;ff.c: 3681: if (res == FR_OK && ofs % ((UINT)512)) {
"3681
[e $ ! && == -> _res `i -> . `E64 0 `i != % _ofs -> -> -> 512 `i `ui `ul -> -> 0 `i `ul 303  ]
{
[; ;ff.c: 3682: if ((sc = clst2sect(fs, clst)) == 0) {
"3682
[e $ ! == = _sc ( _clst2sect (2 , _fs _clst -> -> -> 0 `i `l `ul 304  ]
{
[; ;ff.c: 3683: res = FR_INT_ERR;
"3683
[e = _res . `E64 2 ]
"3684
}
[; ;ff.c: 3684: } else {
[e $U 305  ]
[e :U 304 ]
{
[; ;ff.c: 3685: fp->sect = sc + (DWORD)(ofs / ((UINT)512));
"3685
[e = . *U _fp 5 + _sc / _ofs -> -> -> 512 `i `ui `ul ]
"3689
}
[e :U 305 ]
"3690
}
[e :U 303 ]
"3691
}
[e :U 296 ]
"3693
}
[e :U 295 ]
[; ;ff.c: 3689: }
[; ;ff.c: 3690: }
[; ;ff.c: 3691: }
[; ;ff.c: 3693: }
[; ;ff.c: 3695: ;
"3696
}
[e :U 275 ]
[; ;ff.c: 3696: }
[; ;ff.c: 3698: if (res != FR_OK) fp->obj.fs = 0;
"3698
[e $ ! != -> _res `i -> . `E64 0 `i 306  ]
[e = . . *U _fp 0 0 -> -> 0 `i `*S1 ]
[e :U 306 ]
[; ;ff.c: 3700: return res;
"3700
[e ) _res ]
[e $UE 273  ]
[; ;ff.c: 3701: }
"3701
[e :UE 273 ]
}
"3710
[v _f_read `(E64 ~T0 @X0 1 ef4`*S3`*v`ui`*ui ]
"3716
{
[; ;ff.c: 3710: FRESULT f_read (
[; ;ff.c: 3711: FIL* fp,
[; ;ff.c: 3712: void* buff,
[; ;ff.c: 3713: UINT btr,
[; ;ff.c: 3714: UINT* br
[; ;ff.c: 3715: )
[; ;ff.c: 3716: {
[e :U _f_read ]
"3711
[v _fp `*S3 ~T0 @X0 1 r1 ]
"3712
[v _buff `*v ~T0 @X0 1 r2 ]
"3713
[v _btr `ui ~T0 @X0 1 r3 ]
"3714
[v _br `*ui ~T0 @X0 1 r4 ]
"3716
[f ]
"3717
[v _res `E64 ~T0 @X0 1 a ]
"3718
[v _fs `*S1 ~T0 @X0 1 a ]
"3719
[v _clst `ul ~T0 @X0 1 a ]
[v _sect `ul ~T0 @X0 1 a ]
"3720
[v _remain `ul ~T0 @X0 1 a ]
"3721
[v _rcnt `ui ~T0 @X0 1 a ]
[v _cc `ui ~T0 @X0 1 a ]
[v _csect `ui ~T0 @X0 1 a ]
"3722
[v _rbuff `*uc ~T0 @X0 1 a ]
[; ;ff.c: 3717: FRESULT res;
[; ;ff.c: 3718: FATFS *fs;
[; ;ff.c: 3719: DWORD clst, sect;
[; ;ff.c: 3720: FSIZE_t remain;
[; ;ff.c: 3721: UINT rcnt, cc, csect;
[; ;ff.c: 3722: BYTE *rbuff = (BYTE*)buff;
[e = _rbuff -> _buff `*uc ]
[; ;ff.c: 3725: *br = 0;
"3725
[e = *U _br -> -> 0 `i `ui ]
[; ;ff.c: 3726: res = validate(&fp->obj, &fs);
"3726
[e = _res ( _validate (2 , &U . *U _fp 0 &U _fs ]
[; ;ff.c: 3727: if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
"3727
[e $ ! || != -> _res `i -> . `E64 0 `i != -> = _res -> . *U _fp 2 `E64 `i -> . `E64 0 `i 308  ]
[e ) _res ]
[e $UE 307  ]
[e :U 308 ]
[; ;ff.c: 3728: if (!(fp->flag & 0x01)) return FR_DENIED;
"3728
[e $ ! ! != & -> . *U _fp 1 `i -> 1 `i -> 0 `i 309  ]
[e ) . `E64 7 ]
[e $UE 307  ]
[e :U 309 ]
[; ;ff.c: 3729: remain = fp->obj.objsize - fp->fptr;
"3729
[e = _remain - . . *U _fp 0 5 . *U _fp 3 ]
[; ;ff.c: 3730: if (btr > remain) btr = (UINT)remain;
"3730
[e $ ! > -> _btr `ul _remain 310  ]
[e = _btr -> _remain `ui ]
[e :U 310 ]
[; ;ff.c: 3732: for ( ; btr;
"3732
{
[; ;ff.c: 3733: btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
[e $U 314  ]
"3733
[e :U 311 ]
{
[; ;ff.c: 3734: if (fp->fptr % ((UINT)512) == 0) {
"3734
[e $ ! == % . *U _fp 3 -> -> -> 512 `i `ui `ul -> -> -> 0 `i `l `ul 315  ]
{
[; ;ff.c: 3735: csect = (UINT)(fp->fptr / ((UINT)512) & (fs->csize - 1));
"3735
[e = _csect -> & / . *U _fp 3 -> -> -> 512 `i `ui `ul -> - -> . *U _fs 7 `ui -> -> 1 `i `ui `ul `ui ]
[; ;ff.c: 3736: if (csect == 0) {
"3736
[e $ ! == _csect -> -> 0 `i `ui 316  ]
{
[; ;ff.c: 3737: if (fp->fptr == 0) {
"3737
[e $ ! == . *U _fp 3 -> -> -> 0 `i `l `ul 317  ]
{
[; ;ff.c: 3738: clst = fp->obj.sclust;
"3738
[e = _clst . . *U _fp 0 4 ]
"3739
}
[; ;ff.c: 3739: } else {
[e $U 318  ]
[e :U 317 ]
{
[; ;ff.c: 3745: {
"3745
{
[; ;ff.c: 3746: clst = get_fat(&fp->obj, fp->clust);
"3746
[e = _clst ( _get_fat (2 , &U . *U _fp 0 . *U _fp 4 ]
"3747
}
"3748
}
[e :U 318 ]
[; ;ff.c: 3747: }
[; ;ff.c: 3748: }
[; ;ff.c: 3749: if (clst < 2) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"3749
[e $ ! < _clst -> -> -> 2 `i `l `ul 319  ]
{
[e = . *U _fp 2 -> . `E64 2 `uc ]
[e ) . `E64 2 ]
[e $UE 307  ]
}
[e :U 319 ]
[; ;ff.c: 3750: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"3750
[e $ ! == _clst -> 4294967295 `ul 320  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 307  ]
}
[e :U 320 ]
[; ;ff.c: 3751: fp->clust = clst;
"3751
[e = . *U _fp 4 _clst ]
"3752
}
[e :U 316 ]
[; ;ff.c: 3752: }
[; ;ff.c: 3753: sect = clst2sect(fs, fp->clust);
"3753
[e = _sect ( _clst2sect (2 , _fs . *U _fp 4 ]
[; ;ff.c: 3754: if (sect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"3754
[e $ ! == _sect -> -> -> 0 `i `l `ul 321  ]
{
[e = . *U _fp 2 -> . `E64 2 `uc ]
[e ) . `E64 2 ]
[e $UE 307  ]
}
[e :U 321 ]
[; ;ff.c: 3755: sect += csect;
"3755
[e =+ _sect -> _csect `ul ]
[; ;ff.c: 3756: cc = btr / ((UINT)512);
"3756
[e = _cc / _btr -> -> 512 `i `ui ]
[; ;ff.c: 3757: if (cc > 0) {
"3757
[e $ ! > _cc -> -> 0 `i `ui 322  ]
{
[; ;ff.c: 3758: if (csect + cc > fs->csize) {
"3758
[e $ ! > + _csect _cc -> . *U _fs 7 `ui 323  ]
{
[; ;ff.c: 3759: cc = fs->csize - csect;
"3759
[e = _cc - -> . *U _fs 7 `ui _csect ]
"3760
}
[e :U 323 ]
[; ;ff.c: 3760: }
[; ;ff.c: 3761: if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"3761
[e $ ! != -> ( _disk_read (4 , , , . *U _fs 1 _rbuff _sect _cc `i -> . `E203 0 `i 324  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 307  ]
}
[e :U 324 ]
[; ;ff.c: 3764: if (fs->wflag && fs->winsect - sect < cc) {
"3764
[e $ ! && != -> . *U _fs 3 `i -> -> -> 0 `i `uc `i < - . *U _fs 16 _sect -> _cc `ul 325  ]
{
[; ;ff.c: 3765: mem_cpy(rbuff + ((fs->winsect - sect) * ((UINT)512)), fs->win, ((UINT)512));
"3765
[e ( _mem_cpy (3 , , -> + _rbuff * -> * - . *U _fs 16 _sect -> -> -> 512 `i `ui `ul `ux -> -> # *U _rbuff `ui `ux `*v -> &U . *U _fs 17 `*Cv -> -> 512 `i `ui ]
"3766
}
[e :U 325 ]
[; ;ff.c: 3766: }
[; ;ff.c: 3773: rcnt = ((UINT)512) * cc;
"3773
[e = _rcnt * -> -> 512 `i `ui _cc ]
[; ;ff.c: 3774: continue;
"3774
[e $U 313  ]
"3775
}
[e :U 322 ]
[; ;ff.c: 3775: }
[; ;ff.c: 3787: fp->sect = sect;
"3787
[e = . *U _fp 5 _sect ]
"3788
}
[e :U 315 ]
[; ;ff.c: 3788: }
[; ;ff.c: 3789: rcnt = ((UINT)512) - (UINT)fp->fptr % ((UINT)512);
"3789
[e = _rcnt - -> -> 512 `i `ui % -> . *U _fp 3 `ui -> -> 512 `i `ui ]
[; ;ff.c: 3790: if (rcnt > btr) rcnt = btr;
"3790
[e $ ! > _rcnt _btr 326  ]
[e = _rcnt _btr ]
[e :U 326 ]
[; ;ff.c: 3792: if (move_window(fs, fp->sect) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"3792
[e $ ! != -> ( _move_window (2 , _fs . *U _fp 5 `i -> . `E64 0 `i 327  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 307  ]
}
[e :U 327 ]
[; ;ff.c: 3793: mem_cpy(rbuff, fs->win + fp->fptr % ((UINT)512), rcnt);
"3793
[e ( _mem_cpy (3 , , -> _rbuff `*v -> + &U . *U _fs 17 * -> % . *U _fp 3 -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux `*Cv _rcnt ]
"3797
}
"3733
[e :U 313 ]
[e ; ; ; =- _btr _rcnt =+ *U _br _rcnt =+ _rbuff * -> _rcnt `ux -> -> # *U _rbuff `ui `ux =+ . *U _fp 3 -> _rcnt `ul ]
"3732
[e :U 314 ]
[e $ != _btr -> -> 0 `i `ui 311  ]
[e :U 312 ]
"3797
}
[; ;ff.c: 3797: }
[; ;ff.c: 3799: return FR_OK;
"3799
[e ) . `E64 0 ]
[e $UE 307  ]
[; ;ff.c: 3800: }
"3800
[e :UE 307 ]
}
"3810
[v _f_write `(E64 ~T0 @X0 1 ef4`*S3`*Cv`ui`*ui ]
"3816
{
[; ;ff.c: 3810: FRESULT f_write (
[; ;ff.c: 3811: FIL* fp,
[; ;ff.c: 3812: const void* buff,
[; ;ff.c: 3813: UINT btw,
[; ;ff.c: 3814: UINT* bw
[; ;ff.c: 3815: )
[; ;ff.c: 3816: {
[e :U _f_write ]
"3811
[v _fp `*S3 ~T0 @X0 1 r1 ]
"3812
[v _buff `*Cv ~T0 @X0 1 r2 ]
"3813
[v _btw `ui ~T0 @X0 1 r3 ]
"3814
[v _bw `*ui ~T0 @X0 1 r4 ]
"3816
[f ]
"3817
[v _res `E64 ~T0 @X0 1 a ]
"3818
[v _fs `*S1 ~T0 @X0 1 a ]
"3819
[v _clst `ul ~T0 @X0 1 a ]
[v _sect `ul ~T0 @X0 1 a ]
"3820
[v _wcnt `ui ~T0 @X0 1 a ]
[v _cc `ui ~T0 @X0 1 a ]
[v _csect `ui ~T0 @X0 1 a ]
"3821
[v _wbuff `*Cuc ~T0 @X0 1 a ]
[; ;ff.c: 3817: FRESULT res;
[; ;ff.c: 3818: FATFS *fs;
[; ;ff.c: 3819: DWORD clst, sect;
[; ;ff.c: 3820: UINT wcnt, cc, csect;
[; ;ff.c: 3821: const BYTE *wbuff = (const BYTE*)buff;
[e = _wbuff -> _buff `*Cuc ]
[; ;ff.c: 3824: *bw = 0;
"3824
[e = *U _bw -> -> 0 `i `ui ]
[; ;ff.c: 3825: res = validate(&fp->obj, &fs);
"3825
[e = _res ( _validate (2 , &U . *U _fp 0 &U _fs ]
[; ;ff.c: 3826: if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) return res;
"3826
[e $ ! || != -> _res `i -> . `E64 0 `i != -> = _res -> . *U _fp 2 `E64 `i -> . `E64 0 `i 329  ]
[e ) _res ]
[e $UE 328  ]
[e :U 329 ]
[; ;ff.c: 3827: if (!(fp->flag & 0x02)) return FR_DENIED;
"3827
[e $ ! ! != & -> . *U _fp 1 `i -> 2 `i -> 0 `i 330  ]
[e ) . `E64 7 ]
[e $UE 328  ]
[e :U 330 ]
[; ;ff.c: 3830: if ((!0 || fs->fs_type != 4) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
"3830
[e $ ! && || ! != -> 0 `i -> 0 `i != -> . *U _fs 0 `i -> 4 `i < + . *U _fp 3 -> _btw `ul . *U _fp 3 331  ]
{
[; ;ff.c: 3831: btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
"3831
[e = _btw -> - -> 4294967295 `ul . *U _fp 3 `ui ]
"3832
}
[e :U 331 ]
[; ;ff.c: 3832: }
[; ;ff.c: 3834: for ( ; btw;
"3834
{
[; ;ff.c: 3835: btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
[e $U 335  ]
"3835
[e :U 332 ]
{
[; ;ff.c: 3836: if (fp->fptr % ((UINT)512) == 0) {
"3836
[e $ ! == % . *U _fp 3 -> -> -> 512 `i `ui `ul -> -> -> 0 `i `l `ul 336  ]
{
[; ;ff.c: 3837: csect = (UINT)(fp->fptr / ((UINT)512)) & (fs->csize - 1);
"3837
[e = _csect & -> / . *U _fp 3 -> -> -> 512 `i `ui `ul `ui - -> . *U _fs 7 `ui -> -> 1 `i `ui ]
[; ;ff.c: 3838: if (csect == 0) {
"3838
[e $ ! == _csect -> -> 0 `i `ui 337  ]
{
[; ;ff.c: 3839: if (fp->fptr == 0) {
"3839
[e $ ! == . *U _fp 3 -> -> -> 0 `i `l `ul 338  ]
{
[; ;ff.c: 3840: clst = fp->obj.sclust;
"3840
[e = _clst . . *U _fp 0 4 ]
[; ;ff.c: 3841: if (clst == 0) {
"3841
[e $ ! == _clst -> -> -> 0 `i `l `ul 339  ]
{
[; ;ff.c: 3842: clst = create_chain(&fp->obj, 0);
"3842
[e = _clst ( _create_chain (2 , &U . *U _fp 0 -> -> -> 0 `i `l `ul ]
"3843
}
[e :U 339 ]
"3844
}
[; ;ff.c: 3843: }
[; ;ff.c: 3844: } else {
[e $U 340  ]
[e :U 338 ]
{
[; ;ff.c: 3850: {
"3850
{
[; ;ff.c: 3851: clst = create_chain(&fp->obj, fp->clust);
"3851
[e = _clst ( _create_chain (2 , &U . *U _fp 0 . *U _fp 4 ]
"3852
}
"3853
}
[e :U 340 ]
[; ;ff.c: 3852: }
[; ;ff.c: 3853: }
[; ;ff.c: 3854: if (clst == 0) break;
"3854
[e $ ! == _clst -> -> -> 0 `i `l `ul 341  ]
[e $U 333  ]
[e :U 341 ]
[; ;ff.c: 3855: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"3855
[e $ ! == _clst -> -> -> 1 `i `l `ul 342  ]
{
[e = . *U _fp 2 -> . `E64 2 `uc ]
[e ) . `E64 2 ]
[e $UE 328  ]
}
[e :U 342 ]
[; ;ff.c: 3856: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"3856
[e $ ! == _clst -> 4294967295 `ul 343  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 328  ]
}
[e :U 343 ]
[; ;ff.c: 3857: fp->clust = clst;
"3857
[e = . *U _fp 4 _clst ]
[; ;ff.c: 3858: if (fp->obj.sclust == 0) fp->obj.sclust = clst;
"3858
[e $ ! == . . *U _fp 0 4 -> -> -> 0 `i `l `ul 344  ]
[e = . . *U _fp 0 4 _clst ]
[e :U 344 ]
"3859
}
[e :U 337 ]
[; ;ff.c: 3859: }
[; ;ff.c: 3861: if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"3861
[e $ ! && == . *U _fs 16 . *U _fp 5 != -> ( _sync_window (1 _fs `i -> . `E64 0 `i 345  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 328  ]
}
[e :U 345 ]
[; ;ff.c: 3868: sect = clst2sect(fs, fp->clust);
"3868
[e = _sect ( _clst2sect (2 , _fs . *U _fp 4 ]
[; ;ff.c: 3869: if (sect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"3869
[e $ ! == _sect -> -> -> 0 `i `l `ul 346  ]
{
[e = . *U _fp 2 -> . `E64 2 `uc ]
[e ) . `E64 2 ]
[e $UE 328  ]
}
[e :U 346 ]
[; ;ff.c: 3870: sect += csect;
"3870
[e =+ _sect -> _csect `ul ]
[; ;ff.c: 3871: cc = btw / ((UINT)512);
"3871
[e = _cc / _btw -> -> 512 `i `ui ]
[; ;ff.c: 3872: if (cc > 0) {
"3872
[e $ ! > _cc -> -> 0 `i `ui 347  ]
{
[; ;ff.c: 3873: if (csect + cc > fs->csize) {
"3873
[e $ ! > + _csect _cc -> . *U _fs 7 `ui 348  ]
{
[; ;ff.c: 3874: cc = fs->csize - csect;
"3874
[e = _cc - -> . *U _fs 7 `ui _csect ]
"3875
}
[e :U 348 ]
[; ;ff.c: 3875: }
[; ;ff.c: 3876: if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"3876
[e $ ! != -> ( _disk_write (4 , , , . *U _fs 1 _wbuff _sect _cc `i -> . `E203 0 `i 349  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 328  ]
}
[e :U 349 ]
[; ;ff.c: 3879: if (fs->winsect - sect < cc) {
"3879
[e $ ! < - . *U _fs 16 _sect -> _cc `ul 350  ]
{
[; ;ff.c: 3880: mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * ((UINT)512)), ((UINT)512));
"3880
[e ( _mem_cpy (3 , , -> &U . *U _fs 17 `*v -> + _wbuff * -> * - . *U _fs 16 _sect -> -> -> 512 `i `ui `ul `ux -> -> # *U _wbuff `ui `ux `*Cv -> -> 512 `i `ui ]
[; ;ff.c: 3881: fs->wflag = 0;
"3881
[e = . *U _fs 3 -> -> 0 `i `uc ]
"3882
}
[e :U 350 ]
[; ;ff.c: 3882: }
[; ;ff.c: 3890: wcnt = ((UINT)512) * cc;
"3890
[e = _wcnt * -> -> 512 `i `ui _cc ]
[; ;ff.c: 3891: continue;
"3891
[e $U 334  ]
"3892
}
[e :U 347 ]
[; ;ff.c: 3892: }
[; ;ff.c: 3894: if (fp->fptr >= fp->obj.objsize) {
"3894
[e $ ! >= . *U _fp 3 . . *U _fp 0 5 351  ]
{
[; ;ff.c: 3895: if (sync_window(fs) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"3895
[e $ ! != -> ( _sync_window (1 _fs `i -> . `E64 0 `i 352  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 328  ]
}
[e :U 352 ]
[; ;ff.c: 3896: fs->winsect = sect;
"3896
[e = . *U _fs 16 _sect ]
"3897
}
[e :U 351 ]
[; ;ff.c: 3897: }
[; ;ff.c: 3905: fp->sect = sect;
"3905
[e = . *U _fp 5 _sect ]
"3906
}
[e :U 336 ]
[; ;ff.c: 3906: }
[; ;ff.c: 3907: wcnt = ((UINT)512) - (UINT)fp->fptr % ((UINT)512);
"3907
[e = _wcnt - -> -> 512 `i `ui % -> . *U _fp 3 `ui -> -> 512 `i `ui ]
[; ;ff.c: 3908: if (wcnt > btw) wcnt = btw;
"3908
[e $ ! > _wcnt _btw 353  ]
[e = _wcnt _btw ]
[e :U 353 ]
[; ;ff.c: 3910: if (move_window(fs, fp->sect) != FR_OK) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"3910
[e $ ! != -> ( _move_window (2 , _fs . *U _fp 5 `i -> . `E64 0 `i 354  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 328  ]
}
[e :U 354 ]
[; ;ff.c: 3911: mem_cpy(fs->win + fp->fptr % ((UINT)512), wbuff, wcnt);
"3911
[e ( _mem_cpy (3 , , -> + &U . *U _fs 17 * -> % . *U _fp 3 -> -> -> 512 `i `ui `ul `ux -> -> # *U &U . *U _fs 17 `ui `ux `*v -> _wbuff `*Cv _wcnt ]
[; ;ff.c: 3912: fs->wflag = 1;
"3912
[e = . *U _fs 3 -> -> 1 `i `uc ]
"3917
}
"3835
[e :U 334 ]
[e ; ; ; ; =- _btw _wcnt =+ *U _bw _wcnt =+ _wbuff * -> _wcnt `ux -> -> # *U _wbuff `ui `ux =+ . *U _fp 3 -> _wcnt `ul = . . *U _fp 0 5 ? > . *U _fp 3 . . *U _fp 0 5 : . *U _fp 3 . . *U _fp 0 5 ]
"3834
[e :U 335 ]
[e $ != _btw -> -> 0 `i `ui 332  ]
[e :U 333 ]
"3917
}
[; ;ff.c: 3917: }
[; ;ff.c: 3919: fp->flag |= 0x40;
"3919
[e =| . *U _fp 1 -> -> 64 `i `uc ]
[; ;ff.c: 3921: return FR_OK;
"3921
[e ) . `E64 0 ]
[e $UE 328  ]
[; ;ff.c: 3922: }
"3922
[e :UE 328 ]
}
"3931
[v _f_sync `(E64 ~T0 @X0 1 ef1`*S3 ]
"3934
{
[; ;ff.c: 3931: FRESULT f_sync (
[; ;ff.c: 3932: FIL* fp
[; ;ff.c: 3933: )
[; ;ff.c: 3934: {
[e :U _f_sync ]
"3932
[v _fp `*S3 ~T0 @X0 1 r1 ]
"3934
[f ]
"3935
[v _res `E64 ~T0 @X0 1 a ]
"3936
[v _fs `*S1 ~T0 @X0 1 a ]
"3937
[v _tm `ul ~T0 @X0 1 a ]
"3938
[v _dir `*uc ~T0 @X0 1 a ]
[; ;ff.c: 3935: FRESULT res;
[; ;ff.c: 3936: FATFS *fs;
[; ;ff.c: 3937: DWORD tm;
[; ;ff.c: 3938: BYTE *dir;
[; ;ff.c: 3941: res = validate(&fp->obj, &fs);
"3941
[e = _res ( _validate (2 , &U . *U _fp 0 &U _fs ]
[; ;ff.c: 3942: if (res == FR_OK) {
"3942
[e $ ! == -> _res `i -> . `E64 0 `i 356  ]
{
[; ;ff.c: 3943: if (fp->flag & 0x40) {
"3943
[e $ ! != & -> . *U _fp 1 `i -> 64 `i -> 0 `i 357  ]
{
[; ;ff.c: 3951: tm = get_fattime();
"3951
[e = _tm ( _get_fattime ..  ]
[; ;ff.c: 3983: {
"3983
{
[; ;ff.c: 3984: res = move_window(fs, fp->dir_sect);
"3984
[e = _res ( _move_window (2 , _fs . *U _fp 6 ]
[; ;ff.c: 3985: if (res == FR_OK) {
"3985
[e $ ! == -> _res `i -> . `E64 0 `i 358  ]
{
[; ;ff.c: 3986: dir = fp->dir_ptr;
"3986
[e = _dir . *U _fp 7 ]
[; ;ff.c: 3987: dir[11] |= 0x20;
"3987
[e =| *U + _dir * -> -> 11 `i `x -> -> # *U _dir `i `x -> -> 32 `i `uc ]
[; ;ff.c: 3988: st_clust(fp->obj.fs, dir, fp->obj.sclust);
"3988
[e ( _st_clust (3 , , . . *U _fp 0 0 _dir . . *U _fp 0 4 ]
[; ;ff.c: 3989: st_dword(dir + 28, (DWORD)fp->obj.objsize);
"3989
[e ( _st_dword (2 , + _dir * -> -> 28 `i `x -> -> # *U _dir `i `x . . *U _fp 0 5 ]
[; ;ff.c: 3990: st_dword(dir + 22, tm);
"3990
[e ( _st_dword (2 , + _dir * -> -> 22 `i `x -> -> # *U _dir `i `x _tm ]
[; ;ff.c: 3991: st_word(dir + 18, 0);
"3991
[e ( _st_word (2 , + _dir * -> -> 18 `i `x -> -> # *U _dir `i `x -> -> 0 `i `us ]
[; ;ff.c: 3992: fs->wflag = 1;
"3992
[e = . *U _fs 3 -> -> 1 `i `uc ]
[; ;ff.c: 3993: res = sync_fs(fs);
"3993
[e = _res ( _sync_fs (1 _fs ]
[; ;ff.c: 3994: fp->flag &= (BYTE)~0x40;
"3994
[e =& . *U _fp 1 -> ~ -> 64 `i `uc ]
"3995
}
[e :U 358 ]
"3996
}
"3997
}
[e :U 357 ]
"3998
}
[e :U 356 ]
[; ;ff.c: 3995: }
[; ;ff.c: 3996: }
[; ;ff.c: 3997: }
[; ;ff.c: 3998: }
[; ;ff.c: 4000: return res;
"4000
[e ) _res ]
[e $UE 355  ]
[; ;ff.c: 4001: }
"4001
[e :UE 355 ]
}
"4012
[v _f_close `(E64 ~T0 @X0 1 ef1`*S3 ]
"4015
{
[; ;ff.c: 4012: FRESULT f_close (
[; ;ff.c: 4013: FIL* fp
[; ;ff.c: 4014: )
[; ;ff.c: 4015: {
[e :U _f_close ]
"4013
[v _fp `*S3 ~T0 @X0 1 r1 ]
"4015
[f ]
"4016
[v _res `E64 ~T0 @X0 1 a ]
"4017
[v _fs `*S1 ~T0 @X0 1 a ]
[; ;ff.c: 4016: FRESULT res;
[; ;ff.c: 4017: FATFS *fs;
[; ;ff.c: 4020: res = f_sync(fp);
"4020
[e = _res ( _f_sync (1 _fp ]
[; ;ff.c: 4021: if (res == FR_OK)
"4021
[e $ ! == -> _res `i -> . `E64 0 `i 360  ]
[; ;ff.c: 4023: {
"4023
{
[; ;ff.c: 4024: res = validate(&fp->obj, &fs);
"4024
[e = _res ( _validate (2 , &U . *U _fp 0 &U _fs ]
[; ;ff.c: 4025: if (res == FR_OK) {
"4025
[e $ ! == -> _res `i -> . `E64 0 `i 361  ]
{
[; ;ff.c: 4030: fp->obj.fs = 0;
"4030
[e = . . *U _fp 0 0 -> -> 0 `i `*S1 ]
"4035
}
[e :U 361 ]
"4036
}
[e :U 360 ]
[; ;ff.c: 4035: }
[; ;ff.c: 4036: }
[; ;ff.c: 4037: return res;
"4037
[e ) _res ]
[e $UE 359  ]
[; ;ff.c: 4038: }
"4038
[e :UE 359 ]
}
"4226
[v _f_lseek `(E64 ~T0 @X0 1 ef2`*S3`ul ]
"4230
{
[; ;ff.c: 4226: FRESULT f_lseek (
[; ;ff.c: 4227: FIL* fp,
[; ;ff.c: 4228: FSIZE_t ofs
[; ;ff.c: 4229: )
[; ;ff.c: 4230: {
[e :U _f_lseek ]
"4227
[v _fp `*S3 ~T0 @X0 1 r1 ]
"4228
[v _ofs `ul ~T0 @X0 1 r2 ]
"4230
[f ]
"4231
[v _res `E64 ~T0 @X0 1 a ]
"4232
[v _fs `*S1 ~T0 @X0 1 a ]
"4233
[v _clst `ul ~T0 @X0 1 a ]
[v _bcs `ul ~T0 @X0 1 a ]
[v _nsect `ul ~T0 @X0 1 a ]
"4234
[v _ifptr `ul ~T0 @X0 1 a ]
[; ;ff.c: 4231: FRESULT res;
[; ;ff.c: 4232: FATFS *fs;
[; ;ff.c: 4233: DWORD clst, bcs, nsect;
[; ;ff.c: 4234: FSIZE_t ifptr;
[; ;ff.c: 4239: res = validate(&fp->obj, &fs);
"4239
[e = _res ( _validate (2 , &U . *U _fp 0 &U _fs ]
[; ;ff.c: 4240: if (res == FR_OK) res = (FRESULT)fp->err;
"4240
[e $ ! == -> _res `i -> . `E64 0 `i 363  ]
[e = _res -> . *U _fp 2 `E64 ]
[e :U 363 ]
[; ;ff.c: 4246: if (res != FR_OK) return res;
"4246
[e $ ! != -> _res `i -> . `E64 0 `i 364  ]
[e ) _res ]
[e $UE 362  ]
[e :U 364 ]
[; ;ff.c: 4301: {
"4301
{
[; ;ff.c: 4305: if (ofs > fp->obj.objsize && (0 || !(fp->flag & 0x02))) {
"4305
[e $ ! && > _ofs . . *U _fp 0 5 || != -> 0 `i -> 0 `i ! != & -> . *U _fp 1 `i -> 2 `i -> 0 `i 365  ]
{
[; ;ff.c: 4306: ofs = fp->obj.objsize;
"4306
[e = _ofs . . *U _fp 0 5 ]
"4307
}
[e :U 365 ]
[; ;ff.c: 4307: }
[; ;ff.c: 4308: ifptr = fp->fptr;
"4308
[e = _ifptr . *U _fp 3 ]
[; ;ff.c: 4309: fp->fptr = nsect = 0;
"4309
[e = . *U _fp 3 = _nsect -> -> -> 0 `i `l `ul ]
[; ;ff.c: 4310: if (ofs > 0) {
"4310
[e $ ! > _ofs -> -> -> 0 `i `l `ul 366  ]
{
[; ;ff.c: 4311: bcs = (DWORD)fs->csize * ((UINT)512);
"4311
[e = _bcs * -> . *U _fs 7 `ul -> -> -> 512 `i `ui `ul ]
[; ;ff.c: 4312: if (ifptr > 0 &&
[; ;ff.c: 4313: (ofs - 1) / bcs >= (ifptr - 1) / bcs) {
"4313
[e $ ! && > _ifptr -> -> -> 0 `i `l `ul >= / - _ofs -> -> -> 1 `i `l `ul _bcs / - _ifptr -> -> -> 1 `i `l `ul _bcs 367  ]
{
[; ;ff.c: 4314: fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);
"4314
[e = . *U _fp 3 & - _ifptr -> -> -> 1 `i `l `ul ~ - _bcs -> -> -> 1 `i `l `ul ]
[; ;ff.c: 4315: ofs -= fp->fptr;
"4315
[e =- _ofs . *U _fp 3 ]
[; ;ff.c: 4316: clst = fp->clust;
"4316
[e = _clst . *U _fp 4 ]
"4317
}
[; ;ff.c: 4317: } else {
[e $U 368  ]
[e :U 367 ]
{
[; ;ff.c: 4318: clst = fp->obj.sclust;
"4318
[e = _clst . . *U _fp 0 4 ]
[; ;ff.c: 4320: if (clst == 0) {
"4320
[e $ ! == _clst -> -> -> 0 `i `l `ul 369  ]
{
[; ;ff.c: 4321: clst = create_chain(&fp->obj, 0);
"4321
[e = _clst ( _create_chain (2 , &U . *U _fp 0 -> -> -> 0 `i `l `ul ]
[; ;ff.c: 4322: if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"4322
[e $ ! == _clst -> -> -> 1 `i `l `ul 370  ]
{
[e = . *U _fp 2 -> . `E64 2 `uc ]
[e ) . `E64 2 ]
[e $UE 362  ]
}
[e :U 370 ]
[; ;ff.c: 4323: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"4323
[e $ ! == _clst -> 4294967295 `ul 371  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 362  ]
}
[e :U 371 ]
[; ;ff.c: 4324: fp->obj.sclust = clst;
"4324
[e = . . *U _fp 0 4 _clst ]
"4325
}
[e :U 369 ]
[; ;ff.c: 4325: }
[; ;ff.c: 4327: fp->clust = clst;
"4327
[e = . *U _fp 4 _clst ]
"4328
}
[e :U 368 ]
[; ;ff.c: 4328: }
[; ;ff.c: 4329: if (clst != 0) {
"4329
[e $ ! != _clst -> -> -> 0 `i `l `ul 372  ]
{
[; ;ff.c: 4330: while (ofs > bcs) {
"4330
[e $U 373  ]
[e :U 374 ]
{
[; ;ff.c: 4331: ofs -= bcs; fp->fptr += bcs;
"4331
[e =- _ofs _bcs ]
[e =+ . *U _fp 3 _bcs ]
[; ;ff.c: 4333: if (fp->flag & 0x02) {
"4333
[e $ ! != & -> . *U _fp 1 `i -> 2 `i -> 0 `i 376  ]
{
[; ;ff.c: 4334: if (0 && fp->fptr > fp->obj.objsize) {
"4334
[e $ ! && != -> 0 `i -> 0 `i > . *U _fp 3 . . *U _fp 0 5 377  ]
{
[; ;ff.c: 4335: fp->obj.objsize = fp->fptr;
"4335
[e = . . *U _fp 0 5 . *U _fp 3 ]
[; ;ff.c: 4336: fp->flag |= 0x40;
"4336
[e =| . *U _fp 1 -> -> 64 `i `uc ]
"4337
}
[e :U 377 ]
[; ;ff.c: 4337: }
[; ;ff.c: 4338: clst = create_chain(&fp->obj, clst);
"4338
[e = _clst ( _create_chain (2 , &U . *U _fp 0 _clst ]
[; ;ff.c: 4339: if (clst == 0) {
"4339
[e $ ! == _clst -> -> -> 0 `i `l `ul 378  ]
{
[; ;ff.c: 4340: ofs = 0; break;
"4340
[e = _ofs -> -> -> 0 `i `l `ul ]
[e $U 375  ]
"4341
}
[e :U 378 ]
"4342
}
[; ;ff.c: 4341: }
[; ;ff.c: 4342: } else
[e $U 379  ]
[e :U 376 ]
[; ;ff.c: 4344: {
"4344
{
[; ;ff.c: 4345: clst = get_fat(&fp->obj, clst);
"4345
[e = _clst ( _get_fat (2 , &U . *U _fp 0 _clst ]
"4346
}
[e :U 379 ]
[; ;ff.c: 4346: }
[; ;ff.c: 4347: if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
"4347
[e $ ! == _clst -> 4294967295 `ul 380  ]
{
[e = . *U _fp 2 -> . `E64 1 `uc ]
[e ) . `E64 1 ]
[e $UE 362  ]
}
[e :U 380 ]
[; ;ff.c: 4348: if (clst <= 1 || clst >= fs->n_fatent) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"4348
[e $ ! || <= _clst -> -> -> 1 `i `l `ul >= _clst . *U _fs 10 381  ]
{
[e = . *U _fp 2 -> . `E64 2 `uc ]
[e ) . `E64 2 ]
[e $UE 362  ]
}
[e :U 381 ]
[; ;ff.c: 4349: fp->clust = clst;
"4349
[e = . *U _fp 4 _clst ]
"4350
}
[e :U 373 ]
"4330
[e $ > _ofs _bcs 374  ]
[e :U 375 ]
[; ;ff.c: 4350: }
[; ;ff.c: 4351: fp->fptr += ofs;
"4351
[e =+ . *U _fp 3 _ofs ]
[; ;ff.c: 4352: if (ofs % ((UINT)512)) {
"4352
[e $ ! != % _ofs -> -> -> 512 `i `ui `ul -> -> 0 `i `ul 382  ]
{
[; ;ff.c: 4353: nsect = clst2sect(fs, clst);
"4353
[e = _nsect ( _clst2sect (2 , _fs _clst ]
[; ;ff.c: 4354: if (nsect == 0) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
"4354
[e $ ! == _nsect -> -> -> 0 `i `l `ul 383  ]
{
[e = . *U _fp 2 -> . `E64 2 `uc ]
[e ) . `E64 2 ]
[e $UE 362  ]
}
[e :U 383 ]
[; ;ff.c: 4355: nsect += (DWORD)(ofs / ((UINT)512));
"4355
[e =+ _nsect / _ofs -> -> -> 512 `i `ui `ul ]
"4356
}
[e :U 382 ]
"4357
}
[e :U 372 ]
"4358
}
[e :U 366 ]
[; ;ff.c: 4356: }
[; ;ff.c: 4357: }
[; ;ff.c: 4358: }
[; ;ff.c: 4359: if (!0 && fp->fptr > fp->obj.objsize) {
"4359
[e $ ! && ! != -> 0 `i -> 0 `i > . *U _fp 3 . . *U _fp 0 5 384  ]
{
[; ;ff.c: 4360: fp->obj.objsize = fp->fptr;
"4360
[e = . . *U _fp 0 5 . *U _fp 3 ]
[; ;ff.c: 4361: fp->flag |= 0x40;
"4361
[e =| . *U _fp 1 -> -> 64 `i `uc ]
"4362
}
[e :U 384 ]
[; ;ff.c: 4362: }
[; ;ff.c: 4363: if (fp->fptr % ((UINT)512) && nsect != fp->sect) {
"4363
[e $ ! && != % . *U _fp 3 -> -> -> 512 `i `ui `ul -> -> 0 `i `ul != _nsect . *U _fp 5 385  ]
{
[; ;ff.c: 4373: fp->sect = nsect;
"4373
[e = . *U _fp 5 _nsect ]
"4374
}
[e :U 385 ]
"4375
}
[; ;ff.c: 4374: }
[; ;ff.c: 4375: }
[; ;ff.c: 4377: return res;
"4377
[e ) _res ]
[e $UE 362  ]
[; ;ff.c: 4378: }
"4378
[e :UE 362 ]
}
[a 1C 34 42 43 44 58 59 60 61 62 63 91 93 124 127 0 ]
[a 2C 70 65 84 0 ]
[a 3C 70 65 84 51 50 0 ]
