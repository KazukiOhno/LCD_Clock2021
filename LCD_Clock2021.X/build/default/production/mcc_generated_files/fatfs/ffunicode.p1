Version 3.2 HI-TECH Software Intermediate Code
[; ;integer.h: 16: typedef int INT;
[; ;integer.h: 17: typedef unsigned int UINT;
[; ;integer.h: 20: typedef unsigned char BYTE;
[; ;integer.h: 23: typedef short SHORT;
[; ;integer.h: 24: typedef unsigned short WORD;
[; ;integer.h: 25: typedef unsigned short WCHAR;
[; ;integer.h: 28: typedef long LONG;
[; ;integer.h: 29: typedef unsigned long DWORD;
[; ;ff.h: 76: typedef char TCHAR;
[; ;ff.h: 90: typedef DWORD FSIZE_t;
[; ;ff.h: 97: typedef struct {
[; ;ff.h: 98: BYTE fs_type;
[; ;ff.h: 99: BYTE pdrv;
[; ;ff.h: 100: BYTE n_fats;
[; ;ff.h: 101: BYTE wflag;
[; ;ff.h: 102: BYTE fsi_flag;
[; ;ff.h: 103: WORD id;
[; ;ff.h: 104: WORD n_rootdir;
[; ;ff.h: 105: WORD csize;
[; ;ff.h: 119: DWORD last_clst;
[; ;ff.h: 120: DWORD free_clst;
[; ;ff.h: 130: DWORD n_fatent;
[; ;ff.h: 131: DWORD fsize;
[; ;ff.h: 132: DWORD volbase;
[; ;ff.h: 133: DWORD fatbase;
[; ;ff.h: 134: DWORD dirbase;
[; ;ff.h: 135: DWORD database;
[; ;ff.h: 136: DWORD winsect;
[; ;ff.h: 137: BYTE win[512];
[; ;ff.h: 138: } FATFS;
[; ;ff.h: 144: typedef struct {
[; ;ff.h: 145: FATFS* fs;
[; ;ff.h: 146: WORD id;
[; ;ff.h: 147: BYTE attr;
[; ;ff.h: 148: BYTE stat;
[; ;ff.h: 149: DWORD sclust;
[; ;ff.h: 150: FSIZE_t objsize;
[; ;ff.h: 161: } FFOBJID;
[; ;ff.h: 167: typedef struct {
[; ;ff.h: 168: FFOBJID obj;
[; ;ff.h: 169: BYTE flag;
[; ;ff.h: 170: BYTE err;
[; ;ff.h: 171: FSIZE_t fptr;
[; ;ff.h: 172: DWORD clust;
[; ;ff.h: 173: DWORD sect;
[; ;ff.h: 175: DWORD dir_sect;
[; ;ff.h: 176: BYTE* dir_ptr;
[; ;ff.h: 184: } FIL;
[; ;ff.h: 190: typedef struct {
[; ;ff.h: 191: FFOBJID obj;
[; ;ff.h: 192: DWORD dptr;
[; ;ff.h: 193: DWORD clust;
[; ;ff.h: 194: DWORD sect;
[; ;ff.h: 195: BYTE* dir;
[; ;ff.h: 196: BYTE fn[12];
[; ;ff.h: 203: } FFDIR;
[; ;ff.h: 209: typedef struct {
[; ;ff.h: 210: FSIZE_t fsize;
[; ;ff.h: 211: WORD fdate;
[; ;ff.h: 212: WORD ftime;
[; ;ff.h: 213: BYTE fattrib;
[; ;ff.h: 218: TCHAR fname[12 + 1];
[; ;ff.h: 220: } FILINFO;
[; ;ff.h: 226: typedef enum {
[; ;ff.h: 227: FR_OK = 0,
[; ;ff.h: 228: FR_DISK_ERR,
[; ;ff.h: 229: FR_INT_ERR,
[; ;ff.h: 230: FR_NOT_READY,
[; ;ff.h: 231: FR_NO_FILE,
[; ;ff.h: 232: FR_NO_PATH,
[; ;ff.h: 233: FR_INVALID_NAME,
[; ;ff.h: 234: FR_DENIED,
[; ;ff.h: 235: FR_EXIST,
[; ;ff.h: 236: FR_INVALID_OBJECT,
[; ;ff.h: 237: FR_WRITE_PROTECTED,
[; ;ff.h: 238: FR_INVALID_DRIVE,
[; ;ff.h: 239: FR_NOT_ENABLED,
[; ;ff.h: 240: FR_NO_FILESYSTEM,
[; ;ff.h: 241: FR_MKFS_ABORTED,
[; ;ff.h: 242: FR_TIMEOUT,
[; ;ff.h: 243: FR_LOCKED,
[; ;ff.h: 244: FR_NOT_ENOUGH_CORE,
[; ;ff.h: 245: FR_TOO_MANY_OPEN_FILES,
[; ;ff.h: 246: FR_INVALID_PARAMETER
[; ;ff.h: 247: } FRESULT;
[; ;ff.h: 254: FRESULT f_open (FIL* fp, const TCHAR* path, BYTE mode);
[; ;ff.h: 255: FRESULT f_close (FIL* fp);
[; ;ff.h: 256: FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);
[; ;ff.h: 257: FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
[; ;ff.h: 258: FRESULT f_lseek (FIL* fp, FSIZE_t ofs);
[; ;ff.h: 259: FRESULT f_truncate (FIL* fp);
[; ;ff.h: 260: FRESULT f_sync (FIL* fp);
[; ;ff.h: 261: FRESULT f_opendir (FFDIR* dp, const TCHAR* path);
[; ;ff.h: 262: FRESULT f_closedir (FFDIR* dp);
[; ;ff.h: 263: FRESULT f_readdir (FFDIR* dp, FILINFO* fno);
[; ;ff.h: 264: FRESULT f_findfirst (FFDIR* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);
[; ;ff.h: 265: FRESULT f_findnext (FFDIR* dp, FILINFO* fno);
[; ;ff.h: 266: FRESULT f_mkdir (const TCHAR* path);
[; ;ff.h: 267: FRESULT f_unlink (const TCHAR* path);
[; ;ff.h: 268: FRESULT f_rename (const TCHAR* path_old, const TCHAR* path_new);
[; ;ff.h: 269: FRESULT f_stat (const TCHAR* path, FILINFO* fno);
[; ;ff.h: 270: FRESULT f_chmod (const TCHAR* path, BYTE attr, BYTE mask);
[; ;ff.h: 271: FRESULT f_utime (const TCHAR* path, const FILINFO* fno);
[; ;ff.h: 272: FRESULT f_chdir (const TCHAR* path);
[; ;ff.h: 273: FRESULT f_chdrive (const TCHAR* path);
[; ;ff.h: 274: FRESULT f_getcwd (TCHAR* buff, UINT len);
[; ;ff.h: 275: FRESULT f_getfree (const TCHAR* path, DWORD* nclst, FATFS** fatfs);
[; ;ff.h: 276: FRESULT f_getlabel (const TCHAR* path, TCHAR* label, DWORD* vsn);
[; ;ff.h: 277: FRESULT f_setlabel (const TCHAR* label);
[; ;ff.h: 278: FRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);
[; ;ff.h: 279: FRESULT f_expand (FIL* fp, FSIZE_t szf, BYTE opt);
[; ;ff.h: 280: FRESULT f_mount (FATFS* fs, const TCHAR* path, BYTE opt);
[; ;ff.h: 281: FRESULT f_mkfs (const TCHAR* path, BYTE opt, DWORD au, void* work, UINT len);
[; ;ff.h: 282: FRESULT f_fdisk (BYTE pdrv, const DWORD* szt, void* work);
[; ;ff.h: 283: FRESULT f_setcp (WORD cp);
[; ;ff.h: 284: int f_putc (TCHAR c, FIL* fp);
[; ;ff.h: 285: int f_puts (const TCHAR* str, FIL* cp);
[; ;ff.h: 286: int f_printf (FIL* fp, const TCHAR* str, ...);
[; ;ff.h: 287: TCHAR* f_gets (TCHAR* buff, int len, FIL* fp);
[; ;ff.h: 310: DWORD get_fattime (void);
